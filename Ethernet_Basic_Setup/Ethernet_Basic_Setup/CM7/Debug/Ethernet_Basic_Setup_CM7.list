
Ethernet_Basic_Setup_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134b8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003190  08013758  08013758  00023758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080168e8  080168e8  00030098  2**0
                  CONTENTS
  4 .ARM          00000000  080168e8  080168e8  00030098  2**0
                  CONTENTS
  5 .preinit_array 00000000  080168e8  080168e8  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080168e8  080168e8  000268e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080168ec  080168ec  000268ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  080168f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007404  24000098  08016988  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400749c  08016988  0003749c  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e80c  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006f5c  00000000  00000000  0005e8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002188  00000000  00000000  00065830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002008  00000000  00000000  000679b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000491e1  00000000  00000000  000699c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034638  00000000  00000000  000b2ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a2471  00000000  00000000  000e71d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0028964a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009224  00000000  00000000  0028969c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013740 	.word	0x08013740

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08013740 	.word	0x08013740

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3d      	ldr	r3, [pc, #244]	; (800047c <SystemInit+0xfc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3c      	ldr	r2, [pc, #240]	; (800047c <SystemInit+0xfc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b39      	ldr	r3, [pc, #228]	; (800047c <SystemInit+0xfc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a38      	ldr	r2, [pc, #224]	; (800047c <SystemInit+0xfc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b34      	ldr	r3, [pc, #208]	; (8000480 <SystemInit+0x100>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a32      	ldr	r2, [pc, #200]	; (8000480 <SystemInit+0x100>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <SystemInit+0x104>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a30      	ldr	r2, [pc, #192]	; (8000484 <SystemInit+0x104>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <SystemInit+0x104>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <SystemInit+0x104>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492c      	ldr	r1, [pc, #176]	; (8000484 <SystemInit+0x104>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <SystemInit+0x108>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <SystemInit+0x100>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a24      	ldr	r2, [pc, #144]	; (8000480 <SystemInit+0x100>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <SystemInit+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <SystemInit+0x104>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <SystemInit+0x104>)
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SystemInit+0x104>)
 8000410:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <SystemInit+0x110>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SystemInit+0x104>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	; (8000494 <SystemInit+0x114>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <SystemInit+0x104>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <SystemInit+0x114>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SystemInit+0x104>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <SystemInit+0x114>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x104>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <SystemInit+0x104>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SystemInit+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <SystemInit+0x118>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <SystemInit+0x118>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x11c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <SystemInit+0x120>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x124>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <SystemInit+0x128>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	52002000 	.word	0x52002000
 8000484:	58024400 	.word	0x58024400
 8000488:	eaf6ed7f 	.word	0xeaf6ed7f
 800048c:	02020200 	.word	0x02020200
 8000490:	01ff0000 	.word	0x01ff0000
 8000494:	01010280 	.word	0x01010280
 8000498:	580000c0 	.word	0x580000c0
 800049c:	5c001000 	.word	0x5c001000
 80004a0:	ffff0000 	.word	0xffff0000
 80004a4:	51008108 	.word	0x51008108
 80004a8:	52004000 	.word	0x52004000

080004ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80004bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	4a06      	ldr	r2, [pc, #24]	; (80004dc <vApplicationGetIdleTaskMemory+0x30>)
 80004c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	240000b4 	.word	0x240000b4
 80004dc:	24000108 	.word	0x24000108

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b5b0      	push	{r4, r5, r7, lr}
 80004e2:	b08c      	sub	sp, #48	; 0x30
 80004e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80004e6:	f000 f9db 	bl	80008a0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004ea:	4b5d      	ldr	r3, [pc, #372]	; (8000660 <main+0x180>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d11b      	bne.n	800052e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004f6:	f3bf 8f4f 	dsb	sy
}
 80004fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004fc:	f3bf 8f6f 	isb	sy
}
 8000500:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000502:	4b57      	ldr	r3, [pc, #348]	; (8000660 <main+0x180>)
 8000504:	2200      	movs	r2, #0
 8000506:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800050a:	f3bf 8f4f 	dsb	sy
}
 800050e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000510:	f3bf 8f6f 	isb	sy
}
 8000514:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000516:	4b52      	ldr	r3, [pc, #328]	; (8000660 <main+0x180>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a51      	ldr	r2, [pc, #324]	; (8000660 <main+0x180>)
 800051c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000520:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000522:	f3bf 8f4f 	dsb	sy
}
 8000526:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000528:	f3bf 8f6f 	isb	sy
}
 800052c:	e000      	b.n	8000530 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800052e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000530:	4b4b      	ldr	r3, [pc, #300]	; (8000660 <main+0x180>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000538:	2b00      	cmp	r3, #0
 800053a:	d138      	bne.n	80005ae <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800053c:	4b48      	ldr	r3, [pc, #288]	; (8000660 <main+0x180>)
 800053e:	2200      	movs	r2, #0
 8000540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000544:	f3bf 8f4f 	dsb	sy
}
 8000548:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800054a:	4b45      	ldr	r3, [pc, #276]	; (8000660 <main+0x180>)
 800054c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000554:	0b5b      	lsrs	r3, r3, #13
 8000556:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800055a:	627b      	str	r3, [r7, #36]	; 0x24
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800055c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800055e:	08db      	lsrs	r3, r3, #3
 8000560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000564:	623b      	str	r3, [r7, #32]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	015a      	lsls	r2, r3, #5
 800056a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800056e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000570:	6a3a      	ldr	r2, [r7, #32]
 8000572:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000574:	493a      	ldr	r1, [pc, #232]	; (8000660 <main+0x180>)
 8000576:	4313      	orrs	r3, r2
 8000578:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800057c:	6a3b      	ldr	r3, [r7, #32]
 800057e:	1e5a      	subs	r2, r3, #1
 8000580:	623a      	str	r2, [r7, #32]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1ef      	bne.n	8000566 <main+0x86>
    } while(sets-- != 0U);
 8000586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000588:	1e5a      	subs	r2, r3, #1
 800058a:	627a      	str	r2, [r7, #36]	; 0x24
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1e5      	bne.n	800055c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000590:	f3bf 8f4f 	dsb	sy
}
 8000594:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000596:	4b32      	ldr	r3, [pc, #200]	; (8000660 <main+0x180>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a31      	ldr	r2, [pc, #196]	; (8000660 <main+0x180>)
 800059c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005a2:	f3bf 8f4f 	dsb	sy
}
 80005a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005a8:	f3bf 8f6f 	isb	sy
}
 80005ac:	e000      	b.n	80005b0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005ae:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80005b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80005b6:	bf00      	nop
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <main+0x184>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d004      	beq.n	80005ce <main+0xee>
 80005c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c6:	1e5a      	subs	r2, r3, #1
 80005c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	dcf4      	bgt.n	80005b8 <main+0xd8>
  if ( timeout < 0 )
 80005ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	da01      	bge.n	80005d8 <main+0xf8>
  {
  Error_Handler();
 80005d4:	f000 f9b2 	bl	800093c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fcbe 	bl	8000f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f848 	bl	8000670 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <main+0x184>)
 80005e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e6:	4a1f      	ldr	r2, [pc, #124]	; (8000664 <main+0x184>)
 80005e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <main+0x184>)
 80005f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80005fe:	2000      	movs	r0, #0
 8000600:	f002 fe1e 	bl	8003240 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000604:	2100      	movs	r1, #0
 8000606:	2000      	movs	r0, #0
 8000608:	f002 fe34 	bl	8003274 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800060c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000610:	62fb      	str	r3, [r7, #44]	; 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000612:	bf00      	nop
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <main+0x184>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800061c:	2b00      	cmp	r3, #0
 800061e:	d104      	bne.n	800062a <main+0x14a>
 8000620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000622:	1e5a      	subs	r2, r3, #1
 8000624:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000626:	2b00      	cmp	r3, #0
 8000628:	dcf4      	bgt.n	8000614 <main+0x134>
if ( timeout < 0 )
 800062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062c:	2b00      	cmp	r3, #0
 800062e:	da01      	bge.n	8000634 <main+0x154>
{
Error_Handler();
 8000630:	f000 f984 	bl	800093c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 f898 	bl	8000768 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <main+0x188>)
 800063a:	1d3c      	adds	r4, r7, #4
 800063c:	461d      	mov	r5, r3
 800063e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f004 ffbe 	bl	80055d0 <osThreadCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <main+0x18c>)
 8000658:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065a:	f004 ffa2 	bl	80055a2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0x17e>
 8000660:	e000ed00 	.word	0xe000ed00
 8000664:	58024400 	.word	0x58024400
 8000668:	08013764 	.word	0x08013764
 800066c:	24000308 	.word	0x24000308

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09c      	sub	sp, #112	; 0x70
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067a:	224c      	movs	r2, #76	; 0x4c
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f012 f806 	bl	8012690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2220      	movs	r2, #32
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f012 f800 	bl	8012690 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000690:	2004      	movs	r0, #4
 8000692:	f002 fe03 	bl	800329c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	4b31      	ldr	r3, [pc, #196]	; (8000760 <SystemClock_Config+0xf0>)
 800069c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069e:	4a30      	ldr	r2, [pc, #192]	; (8000760 <SystemClock_Config+0xf0>)
 80006a0:	f023 0301 	bic.w	r3, r3, #1
 80006a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006a6:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <SystemClock_Config+0xf0>)
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <SystemClock_Config+0xf4>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a2b      	ldr	r2, [pc, #172]	; (8000764 <SystemClock_Config+0xf4>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <SystemClock_Config+0xf4>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c8:	bf00      	nop
 80006ca:	4b26      	ldr	r3, [pc, #152]	; (8000764 <SystemClock_Config+0xf4>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d6:	d1f8      	bne.n	80006ca <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006dc:	2301      	movs	r3, #1
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2340      	movs	r3, #64	; 0x40
 80006e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006f0:	2332      	movs	r3, #50	; 0x32
 80006f2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000700:	230c      	movs	r3, #12
 8000702:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000704:	2300      	movs	r3, #0
 8000706:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000710:	4618      	mov	r0, r3
 8000712:	f002 fe1d 	bl	8003350 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800071c:	f000 f90e 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	233f      	movs	r3, #63	; 0x3f
 8000722:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2303      	movs	r3, #3
 8000726:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800072c:	2308      	movs	r3, #8
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000730:	2340      	movs	r3, #64	; 0x40
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800073e:	2340      	movs	r3, #64	; 0x40
 8000740:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2102      	movs	r1, #2
 8000746:	4618      	mov	r0, r3
 8000748:	f003 fa30 	bl	8003bac <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000752:	f000 f8f3 	bl	800093c <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3770      	adds	r7, #112	; 0x70
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	58000400 	.word	0x58000400
 8000764:	58024800 	.word	0x58024800

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	4b40      	ldr	r3, [pc, #256]	; (8000880 <MX_GPIO_Init+0x118>)
 8000780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000784:	4a3e      	ldr	r2, [pc, #248]	; (8000880 <MX_GPIO_Init+0x118>)
 8000786:	f043 0304 	orr.w	r3, r3, #4
 800078a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078e:	4b3c      	ldr	r3, [pc, #240]	; (8000880 <MX_GPIO_Init+0x118>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079c:	4b38      	ldr	r3, [pc, #224]	; (8000880 <MX_GPIO_Init+0x118>)
 800079e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a2:	4a37      	ldr	r2, [pc, #220]	; (8000880 <MX_GPIO_Init+0x118>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ac:	4b34      	ldr	r3, [pc, #208]	; (8000880 <MX_GPIO_Init+0x118>)
 80007ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <MX_GPIO_Init+0x118>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c0:	4a2f      	ldr	r2, [pc, #188]	; (8000880 <MX_GPIO_Init+0x118>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <MX_GPIO_Init+0x118>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <MX_GPIO_Init+0x118>)
 80007da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007de:	4a28      	ldr	r2, [pc, #160]	; (8000880 <MX_GPIO_Init+0x118>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <MX_GPIO_Init+0x118>)
 80007ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MX_GPIO_Init+0x118>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a20      	ldr	r2, [pc, #128]	; (8000880 <MX_GPIO_Init+0x118>)
 80007fe:	f043 0308 	orr.w	r3, r3, #8
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_GPIO_Init+0x118>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 0308 	and.w	r3, r3, #8
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_GPIO_Init+0x118>)
 8000816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081a:	4a19      	ldr	r2, [pc, #100]	; (8000880 <MX_GPIO_Init+0x118>)
 800081c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_GPIO_Init+0x118>)
 8000826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000832:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000844:	2307      	movs	r3, #7
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_GPIO_Init+0x11c>)
 8000850:	f002 fb46 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000854:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000866:	230a      	movs	r3, #10
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_GPIO_Init+0x120>)
 8000872:	f002 fb35 	bl	8002ee0 <HAL_GPIO_Init>

}
 8000876:	bf00      	nop
 8000878:	3730      	adds	r7, #48	; 0x30
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	58024400 	.word	0x58024400
 8000884:	58020c00 	.word	0x58020c00
 8000888:	58020000 	.word	0x58020000

0800088c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000894:	f004 f81c 	bl	80048d0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000898:	2001      	movs	r0, #1
 800089a:	f004 fee5 	bl	8005668 <osDelay>
 800089e:	e7fb      	b.n	8000898 <StartDefaultTask+0xc>

080008a0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008a6:	463b      	mov	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008b2:	f000 fcad 	bl	8001210 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008b6:	2301      	movs	r3, #1
 80008b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MPU_Config+0x74>)
 80008c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80008c2:	230e      	movs	r3, #14
 80008c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008ce:	2303      	movs	r3, #3
 80008d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008d2:	2301      	movs	r3, #1
 80008d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008e2:	463b      	mov	r3, r7
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fccb 	bl	8001280 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80008ee:	2307      	movs	r3, #7
 80008f0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008f6:	2301      	movs	r3, #1
 80008f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80008fa:	2301      	movs	r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008fe:	463b      	mov	r3, r7
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fcbd 	bl	8001280 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000906:	2004      	movs	r0, #4
 8000908:	f000 fc9a 	bl	8001240 <HAL_MPU_Enable>

}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	30040000 	.word	0x30040000

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092a:	f000 fb51 	bl	8000fd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40000400 	.word	0x40000400

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_MspInit+0x38>)
 8000950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_MspInit+0x38>)
 8000956:	f043 0302 	orr.w	r3, r3, #2
 800095a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_MspInit+0x38>)
 8000960:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000964:	f003 0302 	and.w	r3, r3, #2
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	210f      	movs	r1, #15
 8000970:	f06f 0001 	mvn.w	r0, #1
 8000974:	f000 fc24 	bl	80011c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	58024400 	.word	0x58024400

08000984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b090      	sub	sp, #64	; 0x40
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b0f      	cmp	r3, #15
 8000990:	d827      	bhi.n	80009e2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0U);
 8000992:	2200      	movs	r2, #0
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	201d      	movs	r0, #29
 8000998:	f000 fc12 	bl	80011c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800099c:	201d      	movs	r0, #29
 800099e:	f000 fc29 	bl	80011f4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80009a2:	4a29      	ldr	r2, [pc, #164]	; (8000a48 <HAL_InitTick+0xc4>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <HAL_InitTick+0xc8>)
 80009aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009ae:	4a27      	ldr	r2, [pc, #156]	; (8000a4c <HAL_InitTick+0xc8>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <HAL_InitTick+0xc8>)
 80009ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c6:	f107 0210 	add.w	r2, r7, #16
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 fc61 	bl	8004298 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d106      	bne.n	80009ee <HAL_InitTick+0x6a>
 80009e0:	e001      	b.n	80009e6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e02b      	b.n	8000a3e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009e6:	f003 fc41 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 80009ea:	63f8      	str	r0, [r7, #60]	; 0x3c
 80009ec:	e004      	b.n	80009f8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ee:	f003 fc3d 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 80009f2:	4603      	mov	r3, r0
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009fa:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <HAL_InitTick+0xcc>)
 80009fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000a00:	0c9b      	lsrs	r3, r3, #18
 8000a02:	3b01      	subs	r3, #1
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000a06:	4b13      	ldr	r3, [pc, #76]	; (8000a54 <HAL_InitTick+0xd0>)
 8000a08:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <HAL_InitTick+0xd4>)
 8000a0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_InitTick+0xd0>)
 8000a0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a12:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000a14:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <HAL_InitTick+0xd0>)
 8000a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a18:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_InitTick+0xd0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_InitTick+0xd0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000a26:	480b      	ldr	r0, [pc, #44]	; (8000a54 <HAL_InitTick+0xd0>)
 8000a28:	f003 fc78 	bl	800431c <HAL_TIM_Base_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d104      	bne.n	8000a3c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000a32:	4808      	ldr	r0, [pc, #32]	; (8000a54 <HAL_InitTick+0xd0>)
 8000a34:	f003 fcd4 	bl	80043e0 <HAL_TIM_Base_Start_IT>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	e000      	b.n	8000a3e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3740      	adds	r7, #64	; 0x40
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	24000008 	.word	0x24000008
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	431bde83 	.word	0x431bde83
 8000a54:	2400030c 	.word	0x2400030c
 8000a58:	40000400 	.word	0x40000400

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <TIM3_IRQHandler+0x10>)
 8000a8e:	f003 fd1f 	bl	80044d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2400030c 	.word	0x2400030c

08000a9c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <ETH_IRQHandler+0x10>)
 8000aa2:	f001 f86b 	bl	8001b7c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	240003bc 	.word	0x240003bc

08000ab0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	return 1;
 8000ab4:	2301      	movs	r3, #1
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <_kill>:

int _kill(int pid, int sig)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <_kill+0x20>)
 8000acc:	2216      	movs	r2, #22
 8000ace:	601a      	str	r2, [r3, #0]
	return -1;
 8000ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	24007418 	.word	0x24007418

08000ae4 <_exit>:

void _exit (int status)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ffe5 	bl	8000ac0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000af6:	e7fe      	b.n	8000af6 <_exit+0x12>

08000af8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e00a      	b.n	8000b20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b0a:	f3af 8000 	nop.w
 8000b0e:	4601      	mov	r1, r0
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	b2ca      	uxtb	r2, r1
 8000b18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbf0      	blt.n	8000b0a <_read+0x12>
	}

return len;
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	60f8      	str	r0, [r7, #12]
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	e009      	b.n	8000b58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	60ba      	str	r2, [r7, #8]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3301      	adds	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dbf1      	blt.n	8000b44 <_write+0x12>
	}
	return len;
 8000b60:	687b      	ldr	r3, [r7, #4]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_close>:

int _close(int file)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
	return -1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b92:	605a      	str	r2, [r3, #4]
	return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <_isatty>:

int _isatty(int file)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
	return 1;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
	return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b087      	sub	sp, #28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <_sbrk+0x5c>)
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <_sbrk+0x60>)
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <_sbrk+0x64>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <_sbrk+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d205      	bcs.n	8000c10 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <_sbrk+0x6c>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	371c      	adds	r7, #28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	24080000 	.word	0x24080000
 8000c34:	00000400 	.word	0x00000400
 8000c38:	24000358 	.word	0x24000358
 8000c3c:	240074a0 	.word	0x240074a0
 8000c40:	24007418 	.word	0x24007418

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c48:	f7ff fb9a 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	; (8000c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	; (8000c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f011 fccb 	bl	801260c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fc33 	bl	80004e0 <main>
  bx  lr
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c7c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c84:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8000c88:	080168f0 	.word	0x080168f0
  ldr r2, =_sbss
 8000c8c:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8000c90:	2400749c 	.word	0x2400749c

08000c94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC3_IRQHandler>

08000c96 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d00b      	beq.n	8000cbe <LAN8742_RegisterBusIO+0x28>
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d007      	beq.n	8000cbe <LAN8742_RegisterBusIO+0x28>
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <LAN8742_RegisterBusIO+0x28>
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d102      	bne.n	8000cc4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	e014      	b.n	8000cee <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	691a      	ldr	r2, [r3, #16]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d17c      	bne.n	8000e14 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2220      	movs	r2, #32
 8000d2c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e01c      	b.n	8000d6e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	f107 0208 	add.w	r2, r7, #8
 8000d3c:	2112      	movs	r1, #18
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	4798      	blx	r3
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	da03      	bge.n	8000d50 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000d48:	f06f 0304 	mvn.w	r3, #4
 8000d4c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000d4e:	e00b      	b.n	8000d68 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d105      	bne.n	8000d68 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
         break;
 8000d66:	e005      	b.n	8000d74 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2b1f      	cmp	r3, #31
 8000d72:	d9df      	bls.n	8000d34 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b1f      	cmp	r3, #31
 8000d7a:	d902      	bls.n	8000d82 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d7c:	f06f 0302 	mvn.w	r3, #2
 8000d80:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d145      	bne.n	8000e14 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	6810      	ldr	r0, [r2, #0]
 8000d90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d94:	2100      	movs	r1, #0
 8000d96:	4798      	blx	r3
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db37      	blt.n	8000e0e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	6810      	ldr	r0, [r2, #0]
 8000da6:	f107 0208 	add.w	r2, r7, #8
 8000daa:	2100      	movs	r1, #0
 8000dac:	4798      	blx	r3
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	db28      	blt.n	8000e06 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4798      	blx	r3
 8000dba:	4603      	mov	r3, r0
 8000dbc:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000dbe:	e01c      	b.n	8000dfa <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4798      	blx	r3
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000dd2:	d80e      	bhi.n	8000df2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	6810      	ldr	r0, [r2, #0]
 8000ddc:	f107 0208 	add.w	r2, r7, #8
 8000de0:	2100      	movs	r1, #0
 8000de2:	4798      	blx	r3
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	da07      	bge.n	8000dfa <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000dea:	f06f 0304 	mvn.w	r3, #4
 8000dee:	613b      	str	r3, [r7, #16]
                 break;
 8000df0:	e010      	b.n	8000e14 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000df2:	f06f 0301 	mvn.w	r3, #1
 8000df6:	613b      	str	r3, [r7, #16]
               break;
 8000df8:	e00c      	b.n	8000e14 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1dd      	bne.n	8000dc0 <LAN8742_Init+0xc6>
 8000e04:	e006      	b.n	8000e14 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000e06:	f06f 0304 	mvn.w	r3, #4
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	e002      	b.n	8000e14 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000e0e:	f06f 0303 	mvn.w	r3, #3
 8000e12:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d112      	bne.n	8000e40 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	4798      	blx	r3
 8000e20:	4603      	mov	r3, r0
 8000e22:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e24:	bf00      	nop
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	4798      	blx	r3
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e38:	d9f5      	bls.n	8000e26 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000e40:	693b      	ldr	r3, [r7, #16]
 }
 8000e42:	4618      	mov	r0, r3
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	6810      	ldr	r0, [r2, #0]
 8000e5e:	f107 020c 	add.w	r2, r7, #12
 8000e62:	2101      	movs	r1, #1
 8000e64:	4798      	blx	r3
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	da02      	bge.n	8000e72 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e6c:	f06f 0304 	mvn.w	r3, #4
 8000e70:	e06e      	b.n	8000f50 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6810      	ldr	r0, [r2, #0]
 8000e7a:	f107 020c 	add.w	r2, r7, #12
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4798      	blx	r3
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	da02      	bge.n	8000e8e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e88:	f06f 0304 	mvn.w	r3, #4
 8000e8c:	e060      	b.n	8000f50 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d101      	bne.n	8000e9c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e059      	b.n	8000f50 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6810      	ldr	r0, [r2, #0]
 8000ea4:	f107 020c 	add.w	r2, r7, #12
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4798      	blx	r3
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da02      	bge.n	8000eb8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000eb2:	f06f 0304 	mvn.w	r3, #4
 8000eb6:	e04b      	b.n	8000f50 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d11b      	bne.n	8000efa <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d006      	beq.n	8000eda <LAN8742_GetLinkState+0x90>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e03a      	b.n	8000f50 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e033      	b.n	8000f50 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	e02c      	b.n	8000f50 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	e02a      	b.n	8000f50 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	6810      	ldr	r0, [r2, #0]
 8000f02:	f107 020c 	add.w	r2, r7, #12
 8000f06:	211f      	movs	r1, #31
 8000f08:	4798      	blx	r3
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	da02      	bge.n	8000f16 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f10:	f06f 0304 	mvn.w	r3, #4
 8000f14:	e01c      	b.n	8000f50 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f20:	2306      	movs	r3, #6
 8000f22:	e015      	b.n	8000f50 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 031c 	and.w	r3, r3, #28
 8000f2a:	2b18      	cmp	r3, #24
 8000f2c:	d101      	bne.n	8000f32 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e00e      	b.n	8000f50 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f003 031c 	and.w	r3, r3, #28
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d101      	bne.n	8000f40 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e007      	b.n	8000f50 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 031c 	and.w	r3, r3, #28
 8000f46:	2b14      	cmp	r3, #20
 8000f48:	d101      	bne.n	8000f4e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e000      	b.n	8000f50 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f4e:	2305      	movs	r3, #5
    }				
  }
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5e:	2003      	movs	r0, #3
 8000f60:	f000 f923 	bl	80011aa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f64:	f002 ffd8 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_Init+0x68>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	0a1b      	lsrs	r3, r3, #8
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	4913      	ldr	r1, [pc, #76]	; (8000fc4 <HAL_Init+0x6c>)
 8000f76:	5ccb      	ldrb	r3, [r1, r3]
 8000f78:	f003 031f 	and.w	r3, r3, #31
 8000f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f80:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_Init+0x68>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_Init+0x6c>)
 8000f8c:	5cd3      	ldrb	r3, [r2, r3]
 8000f8e:	f003 031f 	and.w	r3, r3, #31
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	fa22 f303 	lsr.w	r3, r2, r3
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <HAL_Init+0x70>)
 8000f9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <HAL_Init+0x74>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f7ff fcee 	bl	8000984 <HAL_InitTick>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e002      	b.n	8000fb8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb2:	f7ff fcc9 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	08016658 	.word	0x08016658
 8000fc8:	24000004 	.word	0x24000004
 8000fcc:	24000000 	.word	0x24000000

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	2400000c 	.word	0x2400000c
 8000ff4:	2400035c 	.word	0x2400035c

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2400035c 	.word	0x2400035c

08001010 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetREVID+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	0c1b      	lsrs	r3, r3, #16
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	5c001000 	.word	0x5c001000

08001028 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001038:	4904      	ldr	r1, [pc, #16]	; (800104c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	58000400 	.word	0x58000400

08001050 <__NVIC_SetPriorityGrouping>:
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <__NVIC_SetPriorityGrouping+0x40>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	4313      	orrs	r3, r2
 800107c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <__NVIC_SetPriorityGrouping+0x40>)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	60d3      	str	r3, [r2, #12]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00
 8001094:	05fa0000 	.word	0x05fa0000

08001098 <__NVIC_GetPriorityGrouping>:
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <__NVIC_EnableIRQ+0x38>)
 80010ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff4c 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011ce:	f7ff ff63 	bl	8001098 <__NVIC_GetPriorityGrouping>
 80011d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	68b9      	ldr	r1, [r7, #8]
 80011d8:	6978      	ldr	r0, [r7, #20]
 80011da:	f7ff ffb3 	bl	8001144 <NVIC_EncodePriority>
 80011de:	4602      	mov	r2, r0
 80011e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff82 	bl	80010f0 <__NVIC_SetPriority>
}
 80011ec:	bf00      	nop
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff56 	bl	80010b4 <__NVIC_EnableIRQ>
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001214:	f3bf 8f5f 	dmb	sy
}
 8001218:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <HAL_MPU_Disable+0x28>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	4a06      	ldr	r2, [pc, #24]	; (8001238 <HAL_MPU_Disable+0x28>)
 8001220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001224:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_MPU_Disable+0x2c>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00
 800123c:	e000ed90 	.word	0xe000ed90

08001240 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001248:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <HAL_MPU_Enable+0x38>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_MPU_Enable+0x3c>)
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	4a09      	ldr	r2, [pc, #36]	; (800127c <HAL_MPU_Enable+0x3c>)
 8001258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800125e:	f3bf 8f4f 	dsb	sy
}
 8001262:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001264:	f3bf 8f6f 	isb	sy
}
 8001268:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed90 	.word	0xe000ed90
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	785a      	ldrb	r2, [r3, #1]
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <HAL_MPU_ConfigRegion+0x84>)
 800128e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d029      	beq.n	80012ec <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001298:	4a1a      	ldr	r2, [pc, #104]	; (8001304 <HAL_MPU_ConfigRegion+0x84>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7b1b      	ldrb	r3, [r3, #12]
 80012a4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7adb      	ldrb	r3, [r3, #11]
 80012aa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7a9b      	ldrb	r3, [r3, #10]
 80012b2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7b5b      	ldrb	r3, [r3, #13]
 80012ba:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7b9b      	ldrb	r3, [r3, #14]
 80012c2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7bdb      	ldrb	r3, [r3, #15]
 80012ca:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	7a5b      	ldrb	r3, [r3, #9]
 80012d2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7a1b      	ldrb	r3, [r3, #8]
 80012da:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012dc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	7812      	ldrb	r2, [r2, #0]
 80012e2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012e4:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012e6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012e8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80012ea:	e005      	b.n	80012f8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_MPU_ConfigRegion+0x84>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <HAL_MPU_ConfigRegion+0x84>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed90 	.word	0xe000ed90

08001308 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <HAL_GetCurrentCPUID+0x24>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	2b07      	cmp	r3, #7
 8001318:	d101      	bne.n	800131e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800131a:	2303      	movs	r3, #3
 800131c:	e000      	b.n	8001320 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800131e:	2301      	movs	r3, #1
  }
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e0cf      	b.n	80014e2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001348:	2b00      	cmp	r3, #0
 800134a:	d106      	bne.n	800135a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2223      	movs	r2, #35	; 0x23
 8001350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f003 fea5 	bl	80050a4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	4b64      	ldr	r3, [pc, #400]	; (80014ec <HAL_ETH_Init+0x1bc>)
 800135c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001360:	4a62      	ldr	r2, [pc, #392]	; (80014ec <HAL_ETH_Init+0x1bc>)
 8001362:	f043 0302 	orr.w	r3, r3, #2
 8001366:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800136a:	4b60      	ldr	r3, [pc, #384]	; (80014ec <HAL_ETH_Init+0x1bc>)
 800136c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	7a1b      	ldrb	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d103      	bne.n	8001388 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff fe51 	bl	8001028 <HAL_SYSCFG_ETHInterfaceSelect>
 8001386:	e003      	b.n	8001390 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001388:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800138c:	f7ff fe4c 	bl	8001028 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001390:	4b57      	ldr	r3, [pc, #348]	; (80014f0 <HAL_ETH_Init+0x1c0>)
 8001392:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013ac:	f7ff fe24 	bl	8000ff8 <HAL_GetTick>
 80013b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013b2:	e011      	b.n	80013d8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013b4:	f7ff fe20 	bl	8000ff8 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013c2:	d909      	bls.n	80013d8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2204      	movs	r2, #4
 80013c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	22e0      	movs	r2, #224	; 0xe0
 80013d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e084      	b.n	80014e2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1e4      	bne.n	80013b4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 ff9e 	bl	800232c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013f0:	f002 ff0c 	bl	800420c <HAL_RCC_GetHCLKFreq>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4a3f      	ldr	r2, [pc, #252]	; (80014f4 <HAL_ETH_Init+0x1c4>)
 80013f8:	fba2 2303 	umull	r2, r3, r2, r3
 80013fc:	0c9a      	lsrs	r2, r3, #18
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	3a01      	subs	r2, #1
 8001404:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f001 f997 	bl	800273c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001416:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800141a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001426:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800142a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d009      	beq.n	800144e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	22e0      	movs	r2, #224	; 0xe0
 8001446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e049      	b.n	80014e2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001456:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800145a:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <HAL_ETH_Init+0x1c8>)
 800145c:	4013      	ands	r3, r2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6952      	ldr	r2, [r2, #20]
 8001462:	0051      	lsls	r1, r2, #1
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	430b      	orrs	r3, r1
 800146a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800146e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f001 f9ff 	bl	8002876 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f001 fa45 	bl	8002908 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	3305      	adds	r3, #5
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	021a      	lsls	r2, r3, #8
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	3304      	adds	r3, #4
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	3303      	adds	r3, #3
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	061a      	lsls	r2, r3, #24
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	3302      	adds	r3, #2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	041b      	lsls	r3, r3, #16
 80014b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	3301      	adds	r3, #1
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014ca:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2210      	movs	r2, #16
 80014dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	58024400 	.word	0x58024400
 80014f0:	58000400 	.word	0x58000400
 80014f4:	431bde83 	.word	0x431bde83
 80014f8:	ffff8001 	.word	0xffff8001

080014fc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800150a:	2b10      	cmp	r3, #16
 800150c:	d153      	bne.n	80015b6 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2223      	movs	r2, #35	; 0x23
 8001512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2204      	movs	r2, #4
 800151a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 fa64 	bl	80019ea <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f042 0202 	orr.w	r2, r2, #2
 8001530:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0201 	orr.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0201 	orr.w	r2, r2, #1
 8001552:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800155e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800156e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800157a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800158a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001596:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80015a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015a6:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2223      	movs	r2, #35	; 0x23
 80015ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
  }
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015ce:	2b10      	cmp	r3, #16
 80015d0:	d179      	bne.n	80016c6 <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2223      	movs	r2, #35	; 0x23
 80015d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_ETH_Start_IT+0x110>)
 80015ee:	430b      	orrs	r3, r1
 80015f0:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <HAL_ETH_Start_IT+0x114>)
 8001602:	430b      	orrs	r3, r1
 8001604:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2204      	movs	r2, #4
 800160c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f9eb 	bl	80019ea <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0202 	orr.w	r2, r2, #2
 8001622:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 0201 	orr.w	r2, r2, #1
 8001644:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001650:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001660:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800167c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001688:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001694:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001698:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a4:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 80016b0:	430b      	orrs	r3, r1
 80016b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016b6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2223      	movs	r2, #35	; 0x23
 80016be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
  }
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	0c020060 	.word	0x0c020060
 80016d4:	0c20c000 	.word	0x0c20c000

080016d8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016e6:	2b23      	cmp	r3, #35	; 0x23
 80016e8:	d165      	bne.n	80017b6 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2223      	movs	r2, #35	; 0x23
 80016ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016fa:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_ETH_Stop_IT+0xec>)
 8001704:	400b      	ands	r3, r1
 8001706:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800170a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001716:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001726:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001732:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001742:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0202 	bic.w	r2, r2, #2
 8001778:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	e00e      	b.n	800179e <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	3212      	adds	r2, #18
 8001786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178a:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3301      	adds	r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d9ed      	bls.n	8001780 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2210      	movs	r2, #16
 80017ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e000      	b.n	80017b8 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
  }
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	ffff2f3e 	.word	0xffff2f3e

080017c8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d109      	bne.n	80017ec <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e03a      	b.n	8001862 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017f2:	2b23      	cmp	r3, #35	; 0x23
 80017f4:	d134      	bne.n	8001860 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80017fe:	2201      	movs	r2, #1
 8001800:	6839      	ldr	r1, [r7, #0]
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f001 f8de 	bl	80029c4 <ETH_Prepare_Tx_Descriptors>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001814:	f043 0202 	orr.w	r2, r3, #2
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e01f      	b.n	8001862 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001822:	f3bf 8f4f 	dsb	sy
}
 8001826:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	629a      	str	r2, [r3, #40]	; 0x28
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	2b03      	cmp	r3, #3
 8001838:	d904      	bls.n	8001844 <HAL_ETH_Transmit_IT+0x7c>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	1f1a      	subs	r2, r3, #4
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3106      	adds	r1, #6
 8001850:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001854:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001858:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	e000      	b.n	8001862 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
  }
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b088      	sub	sp, #32
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001888:	f043 0201 	orr.w	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e0a5      	b.n	80019e2 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800189c:	2b23      	cmp	r3, #35	; 0x23
 800189e:	d001      	beq.n	80018a4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e09e      	b.n	80019e2 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	3212      	adds	r2, #18
 80018b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018ba:	f1c3 0304 	rsb	r3, r3, #4
 80018be:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018c0:	e067      	b.n	8001992 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d007      	beq.n	80018de <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d103      	bne.n	80018f2 <HAL_ETH_ReadData+0x88>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d03d      	beq.n	800196e <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d005      	beq.n	800190a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00d      	beq.n	8001938 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001948:	461a      	mov	r2, r3
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	b29b      	uxth	r3, r3
 800194e:	f003 fd8b 	bl	8005468 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	441a      	add	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3301      	adds	r3, #1
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d902      	bls.n	8001980 <HAL_ETH_ReadData+0x116>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b04      	subs	r3, #4
 800197e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	3212      	adds	r2, #18
 8001986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3301      	adds	r3, #1
 8001990:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	db06      	blt.n	80019a8 <HAL_ETH_ReadData+0x13e>
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d202      	bcs.n	80019a8 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d08c      	beq.n	80018c2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	441a      	add	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d002      	beq.n	80019c2 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f814 	bl	80019ea <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d108      	bne.n	80019e0 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	e000      	b.n	80019e2 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3720      	adds	r7, #32
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b088      	sub	sp, #32
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80019f6:	2301      	movs	r3, #1
 80019f8:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019fe:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	3212      	adds	r2, #18
 8001a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0a:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a10:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a12:	e03b      	b.n	8001a8c <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d112      	bne.n	8001a42 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 fcf1 	bl	8005408 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	74fb      	strb	r3, [r7, #19]
 8001a30:	e007      	b.n	8001a42 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	461a      	mov	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001a42:	7cfb      	ldrb	r3, [r7, #19]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d021      	beq.n	8001a8c <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001a48:	f3bf 8f5f 	dmb	sy
}
 8001a4c:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	e003      	b.n	8001a68 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001a66:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d902      	bls.n	8001a7a <ETH_UpdateDescriptor+0x90>
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	3b04      	subs	r3, #4
 8001a78:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	3212      	adds	r2, #18
 8001a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a84:	617b      	str	r3, [r7, #20]
      desccount--;
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <ETH_UpdateDescriptor+0xae>
 8001a92:	7cfb      	ldrb	r3, [r7, #19]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1bd      	bne.n	8001a14 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d00d      	beq.n	8001abe <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001abe:	bf00      	nop
 8001ac0:	3720      	adds	r7, #32
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3318      	adds	r3, #24
 8001ad2:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001ae4:	e03f      	b.n	8001b66 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	3304      	adds	r3, #4
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d106      	bne.n	8001b0e <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	3301      	adds	r3, #1
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001b0e:	7bbb      	ldrb	r3, [r7, #14]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d028      	beq.n	8001b66 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68d9      	ldr	r1, [r3, #12]
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	440b      	add	r3, r1
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	db1b      	blt.n	8001b62 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	3304      	adds	r3, #4
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fcfe 	bl	8005538 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	3304      	adds	r3, #4
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	2200      	movs	r2, #0
 8001b48:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b60:	e001      	b.n	8001b66 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <HAL_ETH_ReleaseTxPacket+0xac>
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1b9      	bne.n	8001ae6 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b94:	2b40      	cmp	r3, #64	; 0x40
 8001b96:	d115      	bne.n	8001bc4 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba8:	2b40      	cmp	r3, #64	; 0x40
 8001baa:	d10b      	bne.n	8001bc4 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	f248 0340 	movw	r3, #32832	; 0x8040
 8001bba:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f002 ffd6 	bl	8004b70 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bcc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d115      	bne.n	8001c04 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d10b      	bne.n	8001c04 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f248 0301 	movw	r3, #32769	; 0x8001
 8001bfa:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f002 ffc6 	bl	8004b90 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c18:	d153      	bne.n	8001cc2 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c22:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c2e:	d148      	bne.n	8001cc2 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c36:	f043 0208 	orr.w	r2, r3, #8
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c48:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c54:	d11e      	bne.n	8001c94 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001c62:	f241 1302 	movw	r3, #4354	; 0x1102
 8001c66:	4013      	ands	r3, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c76:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c86:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	22e0      	movs	r2, #224	; 0xe0
 8001c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001c92:	e013      	b.n	8001cbc <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001ca0:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001cb8:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f002 ff77 	bl	8004bb0 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001cca:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d104      	bne.n	8001ce0 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d019      	beq.n	8001d14 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce6:	f043 0210 	orr.w	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	22e0      	movs	r2, #224	; 0xe0
 8001d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f002 ff52 	bl	8004bb0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d1c:	f003 0310 	and.w	r3, r3, #16
 8001d20:	2b10      	cmp	r3, #16
 8001d22:	d10f      	bne.n	8001d44 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d2c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f844 	bl	8001dc4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d10f      	bne.n	8001d74 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d5c:	f003 020f 	and.w	r2, r3, #15
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f836 	bl	8001dd8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001d74:	f7ff fac8 	bl	8001308 <HAL_GetCurrentCPUID>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d10d      	bne.n	8001d9a <HAL_ETH_IRQHandler+0x21e>
  {
    /* check ETH WAKEUP exti flag */
    if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_ETH_IRQHandler+0x240>)
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d014      	beq.n	8001db4 <HAL_ETH_IRQHandler+0x238>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_ETH_IRQHandler+0x240>)
 8001d8c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f82a 	bl	8001dec <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8001d98:	e00c      	b.n	8001db4 <HAL_ETH_IRQHandler+0x238>
    if (__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_ETH_IRQHandler+0x244>)
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <HAL_ETH_IRQHandler+0x238>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_ETH_IRQHandler+0x244>)
 8001da8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001dac:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f81c 	bl	8001dec <HAL_ETH_WakeUpCallback>
}
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	58000080 	.word	0x58000080
 8001dc0:	580000c0 	.word	0x580000c0

08001dc4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e03e      	b.n	8001ea0 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e2a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	055b      	lsls	r3, r3, #21
 8001e36:	4313      	orrs	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	041b      	lsls	r3, r3, #16
 8001e44:	4313      	orrs	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f043 030c 	orr.w	r3, r3, #12
 8001e4e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001e62:	f7ff f8c9 	bl	8000ff8 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e68:	e009      	b.n	8001e7e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001e6a:	f7ff f8c5 	bl	8000ff8 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e78:	d901      	bls.n	8001e7e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e010      	b.n	8001ea0 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1ed      	bne.n	8001e6a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e03c      	b.n	8001f44 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ed2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	055b      	lsls	r3, r3, #21
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	041b      	lsls	r3, r3, #16
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f023 030c 	bic.w	r3, r3, #12
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_ETH_WritePHYRegister+0xa4>)
 8001f0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <HAL_ETH_WritePHYRegister+0xa4>)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001f16:	f7ff f86f 	bl	8000ff8 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f1c:	e009      	b.n	8001f32 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f1e:	f7ff f86b 	bl	8000ff8 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f2c:	d901      	bls.n	8001f32 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e008      	b.n	8001f44 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1ed      	bne.n	8001f1e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40028000 	.word	0x40028000

08001f50 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e1c3      	b.n	80022ec <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf14      	ite	ne
 8001f80:	2301      	movne	r3, #1
 8001f82:	2300      	moveq	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	461a      	mov	r2, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf0c      	ite	eq
 8001faa:	2301      	moveq	r3, #1
 8001fac:	2300      	movne	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bf14      	ite	ne
 8001fc6:	2301      	movne	r3, #1
 8001fc8:	2300      	moveq	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bf14      	ite	ne
 8001ffa:	2301      	movne	r3, #1
 8001ffc:	2300      	moveq	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002010:	2b00      	cmp	r3, #0
 8002012:	bf14      	ite	ne
 8002014:	2301      	movne	r3, #1
 8002016:	2300      	moveq	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf14      	ite	ne
 800204a:	2301      	movne	r3, #1
 800204c:	2300      	moveq	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf0c      	ite	eq
 800207e:	2301      	moveq	r3, #1
 8002080:	2300      	movne	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf14      	ite	ne
 8002098:	2301      	movne	r3, #1
 800209a:	2300      	moveq	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	bf14      	ite	ne
 80020b2:	2301      	movne	r3, #1
 80020b4:	2300      	moveq	r3, #0
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf14      	ite	ne
 80020cc:	2301      	movne	r3, #1
 80020ce:	2300      	moveq	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80020de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf14      	ite	ne
 800210e:	2301      	movne	r3, #1
 8002110:	2300      	moveq	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf14      	ite	ne
 8002160:	2301      	movne	r3, #1
 8002162:	2300      	moveq	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	0e5b      	lsrs	r3, r3, #25
 80021ae:	f003 021f 	and.w	r2, r3, #31
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 020f 	and.w	r2, r3, #15
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf14      	ite	ne
 80021ee:	2301      	movne	r3, #1
 80021f0:	2300      	moveq	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	b29a      	uxth	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800225e:	2b00      	cmp	r3, #0
 8002260:	bf14      	ite	ne
 8002262:	2301      	movne	r3, #1
 8002264:	2300      	moveq	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002278:	f003 0272 	and.w	r2, r3, #114	; 0x72
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002288:	f003 0223 	and.w	r2, r3, #35	; 0x23
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bf14      	ite	ne
 80022be:	2301      	movne	r3, #1
 80022c0:	2300      	moveq	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	461a      	mov	r2, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80022d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e00b      	b.n	8002324 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002312:	2b10      	cmp	r3, #16
 8002314:	d105      	bne.n	8002322 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f86d 	bl	80023f8 <ETH_SetMACConfig>

    return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
  }
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800233c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002344:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002346:	f001 ff61 	bl	800420c <HAL_RCC_GetHCLKFreq>
 800234a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4a1e      	ldr	r2, [pc, #120]	; (80023c8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d908      	bls.n	8002366 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d804      	bhi.n	8002366 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e027      	b.n	80023b6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4a18      	ldr	r2, [pc, #96]	; (80023cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d908      	bls.n	8002380 <HAL_ETH_SetMDIOClockRange+0x54>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	4a17      	ldr	r2, [pc, #92]	; (80023d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d204      	bcs.n	8002380 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e01a      	b.n	80023b6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d303      	bcc.n	8002390 <HAL_ETH_SetMDIOClockRange+0x64>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d911      	bls.n	80023b4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d908      	bls.n	80023aa <HAL_ETH_SetMDIOClockRange+0x7e>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4a0f      	ldr	r2, [pc, #60]	; (80023d8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d804      	bhi.n	80023aa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	e005      	b.n	80023b6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	e000      	b.n	80023b6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80023b4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	01312cff 	.word	0x01312cff
 80023cc:	02160ebf 	.word	0x02160ebf
 80023d0:	03938700 	.word	0x03938700
 80023d4:	05f5e0ff 	.word	0x05f5e0ff
 80023d8:	08f0d17f 	.word	0x08f0d17f

080023dc <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800240a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	791b      	ldrb	r3, [r3, #4]
 8002410:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002412:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	7b1b      	ldrb	r3, [r3, #12]
 8002418:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800241a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	7b5b      	ldrb	r3, [r3, #13]
 8002420:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002422:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	7b9b      	ldrb	r3, [r3, #14]
 8002428:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800242a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	7bdb      	ldrb	r3, [r3, #15]
 8002430:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002432:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	7c12      	ldrb	r2, [r2, #16]
 8002438:	2a00      	cmp	r2, #0
 800243a:	d102      	bne.n	8002442 <ETH_SetMACConfig+0x4a>
 800243c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002440:	e000      	b.n	8002444 <ETH_SetMACConfig+0x4c>
 8002442:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002444:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	7c52      	ldrb	r2, [r2, #17]
 800244a:	2a00      	cmp	r2, #0
 800244c:	d102      	bne.n	8002454 <ETH_SetMACConfig+0x5c>
 800244e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002452:	e000      	b.n	8002456 <ETH_SetMACConfig+0x5e>
 8002454:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002456:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	7c9b      	ldrb	r3, [r3, #18]
 800245c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800245e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002464:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800246a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	7f1b      	ldrb	r3, [r3, #28]
 8002470:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002472:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	7f5b      	ldrb	r3, [r3, #29]
 8002478:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800247a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	7f92      	ldrb	r2, [r2, #30]
 8002480:	2a00      	cmp	r2, #0
 8002482:	d102      	bne.n	800248a <ETH_SetMACConfig+0x92>
 8002484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002488:	e000      	b.n	800248c <ETH_SetMACConfig+0x94>
 800248a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800248c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	7fdb      	ldrb	r3, [r3, #31]
 8002492:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002494:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	f892 2020 	ldrb.w	r2, [r2, #32]
 800249c:	2a00      	cmp	r2, #0
 800249e:	d102      	bne.n	80024a6 <ETH_SetMACConfig+0xae>
 80024a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024a4:	e000      	b.n	80024a8 <ETH_SetMACConfig+0xb0>
 80024a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80024a8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80024ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024b6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80024b8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b56      	ldr	r3, [pc, #344]	; (8002624 <ETH_SetMACConfig+0x22c>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	68f9      	ldr	r1, [r7, #12]
 80024d2:	430b      	orrs	r3, r1
 80024d4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024da:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024e2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80024e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024ec:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80024ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80024f6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80024f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002500:	2a00      	cmp	r2, #0
 8002502:	d102      	bne.n	800250a <ETH_SetMACConfig+0x112>
 8002504:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002508:	e000      	b.n	800250c <ETH_SetMACConfig+0x114>
 800250a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800250c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4b42      	ldr	r3, [pc, #264]	; (8002628 <ETH_SetMACConfig+0x230>)
 800251e:	4013      	ands	r3, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	68f9      	ldr	r1, [r7, #12]
 8002526:	430b      	orrs	r3, r1
 8002528:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002530:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	4b3a      	ldr	r3, [pc, #232]	; (800262c <ETH_SetMACConfig+0x234>)
 8002542:	4013      	ands	r3, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	68f9      	ldr	r1, [r7, #12]
 800254a:	430b      	orrs	r3, r1
 800254c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002554:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800255a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002562:	2a00      	cmp	r2, #0
 8002564:	d101      	bne.n	800256a <ETH_SetMACConfig+0x172>
 8002566:	2280      	movs	r2, #128	; 0x80
 8002568:	e000      	b.n	800256c <ETH_SetMACConfig+0x174>
 800256a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800256c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002572:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002574:	4313      	orrs	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800257e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002582:	4013      	ands	r3, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	68f9      	ldr	r1, [r7, #12]
 800258a:	430b      	orrs	r3, r1
 800258c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002594:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800259c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025aa:	f023 0103 	bic.w	r1, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80025c2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80025de:	2a00      	cmp	r2, #0
 80025e0:	d101      	bne.n	80025e6 <ETH_SetMACConfig+0x1ee>
 80025e2:	2240      	movs	r2, #64	; 0x40
 80025e4:	e000      	b.n	80025e8 <ETH_SetMACConfig+0x1f0>
 80025e6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80025e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80025f0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80025f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80025fa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002608:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	430a      	orrs	r2, r1
 8002614:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	00048083 	.word	0x00048083
 8002628:	c0f88000 	.word	0xc0f88000
 800262c:	fffffef0 	.word	0xfffffef0

08002630 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b38      	ldr	r3, [pc, #224]	; (8002728 <ETH_SetDMAConfig+0xf8>)
 8002646:	4013      	ands	r3, r2
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	6811      	ldr	r1, [r2, #0]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	430b      	orrs	r3, r1
 8002652:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002656:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	791b      	ldrb	r3, [r3, #4]
 800265c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002662:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	7b1b      	ldrb	r3, [r3, #12]
 8002668:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	4b2c      	ldr	r3, [pc, #176]	; (800272c <ETH_SetDMAConfig+0xfc>)
 800267a:	4013      	ands	r3, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	68f9      	ldr	r1, [r7, #12]
 8002682:	430b      	orrs	r3, r1
 8002684:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002688:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	7b5b      	ldrb	r3, [r3, #13]
 800268e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <ETH_SetDMAConfig+0x100>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	68f9      	ldr	r1, [r7, #12]
 80026ae:	430b      	orrs	r3, r1
 80026b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026b4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	7d1b      	ldrb	r3, [r3, #20]
 80026c0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80026c2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	7f5b      	ldrb	r3, [r3, #29]
 80026c8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80026da:	4b16      	ldr	r3, [pc, #88]	; (8002734 <ETH_SetDMAConfig+0x104>)
 80026dc:	4013      	ands	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	68f9      	ldr	r1, [r7, #12]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026ea:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	7f1b      	ldrb	r3, [r3, #28]
 80026f2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002704:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <ETH_SetDMAConfig+0x108>)
 800270a:	4013      	ands	r3, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	68f9      	ldr	r1, [r7, #12]
 8002712:	430b      	orrs	r3, r1
 8002714:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002718:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	ffff87fd 	.word	0xffff87fd
 800272c:	ffff2ffe 	.word	0xffff2ffe
 8002730:	fffec000 	.word	0xfffec000
 8002734:	ffc0efef 	.word	0xffc0efef
 8002738:	7fc0ffff 	.word	0x7fc0ffff

0800273c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b0a4      	sub	sp, #144	; 0x90
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800274a:	2300      	movs	r3, #0
 800274c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002754:	2300      	movs	r3, #0
 8002756:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800275a:	2301      	movs	r3, #1
 800275c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002760:	2301      	movs	r3, #1
 8002762:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002766:	2301      	movs	r3, #1
 8002768:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800276c:	2300      	movs	r3, #0
 800276e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800277c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800277e:	2300      	movs	r3, #0
 8002780:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002784:	2300      	movs	r3, #0
 8002786:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002788:	2300      	movs	r3, #0
 800278a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002794:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002798:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800279a:	2300      	movs	r3, #0
 800279c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80027a0:	2300      	movs	r3, #0
 80027a2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80027a4:	2301      	movs	r3, #1
 80027a6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80027b6:	2300      	movs	r3, #0
 80027b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80027be:	2300      	movs	r3, #0
 80027c0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80027d4:	2320      	movs	r3, #32
 80027d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80027e6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027f0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80027f8:	2302      	movs	r3, #2
 80027fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002810:	2301      	movs	r3, #1
 8002812:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002816:	2300      	movs	r3, #0
 8002818:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002824:	4619      	mov	r1, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff fde6 	bl	80023f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800282c:	2301      	movs	r3, #1
 800282e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002830:	2301      	movs	r3, #1
 8002832:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002834:	2300      	movs	r3, #0
 8002836:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002838:	2300      	movs	r3, #0
 800283a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002846:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800284a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800284c:	2300      	movs	r3, #0
 800284e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002850:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002854:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800285c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002862:	f107 0308 	add.w	r3, r7, #8
 8002866:	4619      	mov	r1, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff fee1 	bl	8002630 <ETH_SetDMAConfig>
}
 800286e:	bf00      	nop
 8002870:	3790      	adds	r7, #144	; 0x90
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002876:	b480      	push	{r7}
 8002878:	b085      	sub	sp, #20
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e01d      	b.n	80028c0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68d9      	ldr	r1, [r3, #12]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4613      	mov	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2200      	movs	r2, #0
 80028a0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2200      	movs	r2, #0
 80028ac:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	3206      	adds	r2, #6
 80028b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3301      	adds	r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d9de      	bls.n	8002884 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d4:	461a      	mov	r2, r3
 80028d6:	2303      	movs	r3, #3
 80028d8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e023      	b.n	800295e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6919      	ldr	r1, [r3, #16]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	440b      	add	r3, r1
 8002926:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2200      	movs	r2, #0
 8002932:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2200      	movs	r2, #0
 800293e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	3212      	adds	r2, #18
 8002954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	3301      	adds	r3, #1
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d9d8      	bls.n	8002916 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800298a:	461a      	mov	r2, r3
 800298c:	2303      	movs	r3, #3
 800298e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800299e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b08d      	sub	sp, #52	; 0x34
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3318      	adds	r3, #24
 80029d4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ee:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a06:	d007      	beq.n	8002a18 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e259      	b.n	8002ed0 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d044      	beq.n	8002ab2 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	4b75      	ldr	r3, [pc, #468]	; (8002c04 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a34:	431a      	orrs	r2, r3
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a54:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d027      	beq.n	8002ab2 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	041b      	lsls	r3, r3, #16
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002aa0:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ab0:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00e      	beq.n	8002adc <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	4b51      	ldr	r3, [pc, #324]	; (8002c08 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	6992      	ldr	r2, [r2, #24]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d036      	beq.n	8002b62 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b00:	f3bf 8f5f 	dmb	sy
}
 8002b04:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	3301      	adds	r3, #1
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d902      	bls.n	8002b24 <ETH_Prepare_Tx_Descriptors+0x160>
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	3b04      	subs	r3, #4
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2c:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	3301      	adds	r3, #1
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b40:	d10f      	bne.n	8002b62 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b4c:	f3bf 8f5f 	dmb	sy
}
 8002b50:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e1b6      	b.n	8002ed0 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	3301      	adds	r3, #1
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	6852      	ldr	r2, [r2, #4]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d012      	beq.n	8002bb2 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	6852      	ldr	r2, [r2, #4]
 8002ba8:	0412      	lsls	r2, r2, #16
 8002baa:	431a      	orrs	r2, r3
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	e008      	b.n	8002bc4 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	6a3a      	ldr	r2, [r7, #32]
 8002bc2:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d021      	beq.n	8002c14 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	04db      	lsls	r3, r3, #19
 8002bde:	431a      	orrs	r2, r3
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	69d2      	ldr	r2, [r2, #28]
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	e02e      	b.n	8002c62 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002c04:	ffff0000 	.word	0xffff0000
 8002c08:	ffffc000 	.word	0xffffc000
 8002c0c:	c000ffff 	.word	0xc000ffff
 8002c10:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	4b7b      	ldr	r3, [pc, #492]	; (8002e08 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	6852      	ldr	r2, [r2, #4]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d008      	beq.n	8002c80 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c98:	f3bf 8f5f 	dmb	sy
}
 8002c9c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80da 	beq.w	8002e6c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002cca:	e0cf      	b.n	8002e6c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	3301      	adds	r3, #1
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d902      	bls.n	8002cea <ETH_Prepare_Tx_Descriptors+0x326>
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	3b04      	subs	r3, #4
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf2:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d0c:	d007      	beq.n	8002d1e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d12:	3304      	adds	r3, #4
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d029      	beq.n	8002d72 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d2a:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d30:	e019      	b.n	8002d66 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d32:	f3bf 8f5f 	dmb	sy
}
 8002d36:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	3301      	adds	r3, #1
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d902      	bls.n	8002d56 <ETH_Prepare_Tx_Descriptors+0x392>
 8002d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d52:	3b04      	subs	r3, #4
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5e:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d62:	3301      	adds	r3, #1
 8002d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d3e1      	bcc.n	8002d32 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e0ae      	b.n	8002ed0 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	3301      	adds	r3, #1
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <ETH_Prepare_Tx_Descriptors+0x448>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	6852      	ldr	r2, [r2, #4]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d012      	beq.n	8002dc8 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	6852      	ldr	r2, [r2, #4]
 8002dbe:	0412      	lsls	r2, r2, #16
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	e008      	b.n	8002dda <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	6a3a      	ldr	r2, [r7, #32]
 8002dd8:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d018      	beq.n	8002e18 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	69d2      	ldr	r2, [r2, #28]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	60da      	str	r2, [r3, #12]
 8002e04:	e020      	b.n	8002e48 <ETH_Prepare_Tx_Descriptors+0x484>
 8002e06:	bf00      	nop
 8002e08:	ffff8000 	.word	0xffff8000
 8002e0c:	ffffc000 	.word	0xffffc000
 8002e10:	c000ffff 	.word	0xc000ffff
 8002e14:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <ETH_Prepare_Tx_Descriptors+0x518>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	6852      	ldr	r2, [r2, #4]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e4e:	f3bf 8f5f 	dmb	sy
}
 8002e52:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f47f af2b 	bne.w	8002ccc <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	e005      	b.n	8002e96 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea6:	6979      	ldr	r1, [r7, #20]
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	3304      	adds	r3, #4
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb8:	b672      	cpsid	i
}
 8002eba:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002eca:	b662      	cpsie	i
}
 8002ecc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3734      	adds	r7, #52	; 0x34
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	ffff8000 	.word	0xffff8000

08002ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	; 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002eee:	4b89      	ldr	r3, [pc, #548]	; (8003114 <HAL_GPIO_Init+0x234>)
 8002ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ef2:	e194      	b.n	800321e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	2101      	movs	r1, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8186 	beq.w	8003218 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d005      	beq.n	8002f24 <HAL_GPIO_Init+0x44>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d130      	bne.n	8002f86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	f003 0201 	and.w	r2, r3, #1
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d017      	beq.n	8002fc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d123      	bne.n	8003016 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	08da      	lsrs	r2, r3, #3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3208      	adds	r2, #8
 8002fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	08da      	lsrs	r2, r3, #3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3208      	adds	r2, #8
 8003010:	69b9      	ldr	r1, [r7, #24]
 8003012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	2203      	movs	r2, #3
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0203 	and.w	r2, r3, #3
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80e0 	beq.w	8003218 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003058:	4b2f      	ldr	r3, [pc, #188]	; (8003118 <HAL_GPIO_Init+0x238>)
 800305a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800305e:	4a2e      	ldr	r2, [pc, #184]	; (8003118 <HAL_GPIO_Init+0x238>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003068:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <HAL_GPIO_Init+0x238>)
 800306a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003076:	4a29      	ldr	r2, [pc, #164]	; (800311c <HAL_GPIO_Init+0x23c>)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	089b      	lsrs	r3, r3, #2
 800307c:	3302      	adds	r3, #2
 800307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	220f      	movs	r2, #15
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a20      	ldr	r2, [pc, #128]	; (8003120 <HAL_GPIO_Init+0x240>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d052      	beq.n	8003148 <HAL_GPIO_Init+0x268>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1f      	ldr	r2, [pc, #124]	; (8003124 <HAL_GPIO_Init+0x244>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d031      	beq.n	800310e <HAL_GPIO_Init+0x22e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a1e      	ldr	r2, [pc, #120]	; (8003128 <HAL_GPIO_Init+0x248>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d02b      	beq.n	800310a <HAL_GPIO_Init+0x22a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a1d      	ldr	r2, [pc, #116]	; (800312c <HAL_GPIO_Init+0x24c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d025      	beq.n	8003106 <HAL_GPIO_Init+0x226>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a1c      	ldr	r2, [pc, #112]	; (8003130 <HAL_GPIO_Init+0x250>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d01f      	beq.n	8003102 <HAL_GPIO_Init+0x222>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a1b      	ldr	r2, [pc, #108]	; (8003134 <HAL_GPIO_Init+0x254>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d019      	beq.n	80030fe <HAL_GPIO_Init+0x21e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a1a      	ldr	r2, [pc, #104]	; (8003138 <HAL_GPIO_Init+0x258>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <HAL_GPIO_Init+0x21a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a19      	ldr	r2, [pc, #100]	; (800313c <HAL_GPIO_Init+0x25c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00d      	beq.n	80030f6 <HAL_GPIO_Init+0x216>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a18      	ldr	r2, [pc, #96]	; (8003140 <HAL_GPIO_Init+0x260>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d007      	beq.n	80030f2 <HAL_GPIO_Init+0x212>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a17      	ldr	r2, [pc, #92]	; (8003144 <HAL_GPIO_Init+0x264>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d101      	bne.n	80030ee <HAL_GPIO_Init+0x20e>
 80030ea:	2309      	movs	r3, #9
 80030ec:	e02d      	b.n	800314a <HAL_GPIO_Init+0x26a>
 80030ee:	230a      	movs	r3, #10
 80030f0:	e02b      	b.n	800314a <HAL_GPIO_Init+0x26a>
 80030f2:	2308      	movs	r3, #8
 80030f4:	e029      	b.n	800314a <HAL_GPIO_Init+0x26a>
 80030f6:	2307      	movs	r3, #7
 80030f8:	e027      	b.n	800314a <HAL_GPIO_Init+0x26a>
 80030fa:	2306      	movs	r3, #6
 80030fc:	e025      	b.n	800314a <HAL_GPIO_Init+0x26a>
 80030fe:	2305      	movs	r3, #5
 8003100:	e023      	b.n	800314a <HAL_GPIO_Init+0x26a>
 8003102:	2304      	movs	r3, #4
 8003104:	e021      	b.n	800314a <HAL_GPIO_Init+0x26a>
 8003106:	2303      	movs	r3, #3
 8003108:	e01f      	b.n	800314a <HAL_GPIO_Init+0x26a>
 800310a:	2302      	movs	r3, #2
 800310c:	e01d      	b.n	800314a <HAL_GPIO_Init+0x26a>
 800310e:	2301      	movs	r3, #1
 8003110:	e01b      	b.n	800314a <HAL_GPIO_Init+0x26a>
 8003112:	bf00      	nop
 8003114:	58000080 	.word	0x58000080
 8003118:	58024400 	.word	0x58024400
 800311c:	58000400 	.word	0x58000400
 8003120:	58020000 	.word	0x58020000
 8003124:	58020400 	.word	0x58020400
 8003128:	58020800 	.word	0x58020800
 800312c:	58020c00 	.word	0x58020c00
 8003130:	58021000 	.word	0x58021000
 8003134:	58021400 	.word	0x58021400
 8003138:	58021800 	.word	0x58021800
 800313c:	58021c00 	.word	0x58021c00
 8003140:	58022000 	.word	0x58022000
 8003144:	58022400 	.word	0x58022400
 8003148:	2300      	movs	r3, #0
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	f002 0203 	and.w	r2, r2, #3
 8003150:	0092      	lsls	r2, r2, #2
 8003152:	4093      	lsls	r3, r2
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800315a:	4938      	ldr	r1, [pc, #224]	; (800323c <HAL_GPIO_Init+0x35c>)
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	3302      	adds	r3, #2
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800318e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80031bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	3301      	adds	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	f47f ae63 	bne.w	8002ef4 <HAL_GPIO_Init+0x14>
  }
}
 800322e:	bf00      	nop
 8003230:	bf00      	nop
 8003232:	3724      	adds	r7, #36	; 0x24
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	58000400 	.word	0x58000400

08003240 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003248:	4a08      	ldr	r2, [pc, #32]	; (800326c <HAL_HSEM_FastTake+0x2c>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3320      	adds	r3, #32
 800324e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003252:	4a07      	ldr	r2, [pc, #28]	; (8003270 <HAL_HSEM_FastTake+0x30>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d101      	bne.n	800325c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	e000      	b.n	800325e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	58026400 	.word	0x58026400
 8003270:	80000300 	.word	0x80000300

08003274 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800327e:	4906      	ldr	r1, [pc, #24]	; (8003298 <HAL_HSEM_Release+0x24>)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	58026400 	.word	0x58026400

0800329c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80032a4:	4b29      	ldr	r3, [pc, #164]	; (800334c <HAL_PWREx_ConfigSupply+0xb0>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	2b06      	cmp	r3, #6
 80032ae:	d00a      	beq.n	80032c6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032b0:	4b26      	ldr	r3, [pc, #152]	; (800334c <HAL_PWREx_ConfigSupply+0xb0>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d001      	beq.n	80032c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e040      	b.n	8003344 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e03e      	b.n	8003344 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032c6:	4b21      	ldr	r3, [pc, #132]	; (800334c <HAL_PWREx_ConfigSupply+0xb0>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80032ce:	491f      	ldr	r1, [pc, #124]	; (800334c <HAL_PWREx_ConfigSupply+0xb0>)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80032d6:	f7fd fe8f 	bl	8000ff8 <HAL_GetTick>
 80032da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032dc:	e009      	b.n	80032f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032de:	f7fd fe8b 	bl	8000ff8 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ec:	d901      	bls.n	80032f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e028      	b.n	8003344 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_PWREx_ConfigSupply+0xb0>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032fe:	d1ee      	bne.n	80032de <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b1e      	cmp	r3, #30
 8003304:	d008      	beq.n	8003318 <HAL_PWREx_ConfigSupply+0x7c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b2e      	cmp	r3, #46	; 0x2e
 800330a:	d005      	beq.n	8003318 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b1d      	cmp	r3, #29
 8003310:	d002      	beq.n	8003318 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b2d      	cmp	r3, #45	; 0x2d
 8003316:	d114      	bne.n	8003342 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003318:	f7fd fe6e 	bl	8000ff8 <HAL_GetTick>
 800331c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800331e:	e009      	b.n	8003334 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003320:	f7fd fe6a 	bl	8000ff8 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800332e:	d901      	bls.n	8003334 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e007      	b.n	8003344 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_PWREx_ConfigSupply+0xb0>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d1ee      	bne.n	8003320 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	58024800 	.word	0x58024800

08003350 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08c      	sub	sp, #48	; 0x30
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d102      	bne.n	8003364 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	f000 bc1d 	b.w	8003b9e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8087 	beq.w	8003480 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003372:	4b99      	ldr	r3, [pc, #612]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800337c:	4b96      	ldr	r3, [pc, #600]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	2b10      	cmp	r3, #16
 8003386:	d007      	beq.n	8003398 <HAL_RCC_OscConfig+0x48>
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	2b18      	cmp	r3, #24
 800338c:	d110      	bne.n	80033b0 <HAL_RCC_OscConfig+0x60>
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d10b      	bne.n	80033b0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	4b8f      	ldr	r3, [pc, #572]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d06c      	beq.n	800347e <HAL_RCC_OscConfig+0x12e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d168      	bne.n	800347e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e3f6      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b8:	d106      	bne.n	80033c8 <HAL_RCC_OscConfig+0x78>
 80033ba:	4b87      	ldr	r3, [pc, #540]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a86      	ldr	r2, [pc, #536]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e02e      	b.n	8003426 <HAL_RCC_OscConfig+0xd6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10c      	bne.n	80033ea <HAL_RCC_OscConfig+0x9a>
 80033d0:	4b81      	ldr	r3, [pc, #516]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a80      	ldr	r2, [pc, #512]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80033d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	4b7e      	ldr	r3, [pc, #504]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a7d      	ldr	r2, [pc, #500]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80033e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	e01d      	b.n	8003426 <HAL_RCC_OscConfig+0xd6>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f2:	d10c      	bne.n	800340e <HAL_RCC_OscConfig+0xbe>
 80033f4:	4b78      	ldr	r3, [pc, #480]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a77      	ldr	r2, [pc, #476]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80033fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	4b75      	ldr	r3, [pc, #468]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a74      	ldr	r2, [pc, #464]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 8003406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	e00b      	b.n	8003426 <HAL_RCC_OscConfig+0xd6>
 800340e:	4b72      	ldr	r3, [pc, #456]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a71      	ldr	r2, [pc, #452]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 8003414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b6f      	ldr	r3, [pc, #444]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a6e      	ldr	r2, [pc, #440]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 8003420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003424:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d013      	beq.n	8003456 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342e:	f7fd fde3 	bl	8000ff8 <HAL_GetTick>
 8003432:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003436:	f7fd fddf 	bl	8000ff8 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b64      	cmp	r3, #100	; 0x64
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e3aa      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003448:	4b63      	ldr	r3, [pc, #396]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0xe6>
 8003454:	e014      	b.n	8003480 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7fd fdcf 	bl	8000ff8 <HAL_GetTick>
 800345a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800345e:	f7fd fdcb 	bl	8000ff8 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b64      	cmp	r3, #100	; 0x64
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e396      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003470:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f0      	bne.n	800345e <HAL_RCC_OscConfig+0x10e>
 800347c:	e000      	b.n	8003480 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80cb 	beq.w	8003624 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800348e:	4b52      	ldr	r3, [pc, #328]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003496:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003498:	4b4f      	ldr	r3, [pc, #316]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <HAL_RCC_OscConfig+0x164>
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	2b18      	cmp	r3, #24
 80034a8:	d156      	bne.n	8003558 <HAL_RCC_OscConfig+0x208>
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d151      	bne.n	8003558 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b4:	4b48      	ldr	r3, [pc, #288]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_RCC_OscConfig+0x17c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e368      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034cc:	4b42      	ldr	r3, [pc, #264]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f023 0219 	bic.w	r2, r3, #25
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	493f      	ldr	r1, [pc, #252]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034de:	f7fd fd8b 	bl	8000ff8 <HAL_GetTick>
 80034e2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e6:	f7fd fd87 	bl	8000ff8 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e352      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034f8:	4b37      	ldr	r3, [pc, #220]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003504:	f7fd fd84 	bl	8001010 <HAL_GetREVID>
 8003508:	4603      	mov	r3, r0
 800350a:	f241 0203 	movw	r2, #4099	; 0x1003
 800350e:	4293      	cmp	r3, r2
 8003510:	d817      	bhi.n	8003542 <HAL_RCC_OscConfig+0x1f2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d108      	bne.n	800352c <HAL_RCC_OscConfig+0x1dc>
 800351a:	4b2f      	ldr	r3, [pc, #188]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003522:	4a2d      	ldr	r2, [pc, #180]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 8003524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003528:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800352a:	e07b      	b.n	8003624 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352c:	4b2a      	ldr	r3, [pc, #168]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	031b      	lsls	r3, r3, #12
 800353a:	4927      	ldr	r1, [pc, #156]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 800353c:	4313      	orrs	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003540:	e070      	b.n	8003624 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003542:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	061b      	lsls	r3, r3, #24
 8003550:	4921      	ldr	r1, [pc, #132]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003556:	e065      	b.n	8003624 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d048      	beq.n	80035f2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003560:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f023 0219 	bic.w	r2, r3, #25
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	491a      	ldr	r1, [pc, #104]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 800356e:	4313      	orrs	r3, r2
 8003570:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003572:	f7fd fd41 	bl	8000ff8 <HAL_GetTick>
 8003576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800357a:	f7fd fd3d 	bl	8000ff8 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e308      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003598:	f7fd fd3a 	bl	8001010 <HAL_GetREVID>
 800359c:	4603      	mov	r3, r0
 800359e:	f241 0203 	movw	r2, #4099	; 0x1003
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d81a      	bhi.n	80035dc <HAL_RCC_OscConfig+0x28c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b40      	cmp	r3, #64	; 0x40
 80035ac:	d108      	bne.n	80035c0 <HAL_RCC_OscConfig+0x270>
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80035b6:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80035b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035bc:	6053      	str	r3, [r2, #4]
 80035be:	e031      	b.n	8003624 <HAL_RCC_OscConfig+0x2d4>
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	031b      	lsls	r3, r3, #12
 80035ce:	4902      	ldr	r1, [pc, #8]	; (80035d8 <HAL_RCC_OscConfig+0x288>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
 80035d4:	e026      	b.n	8003624 <HAL_RCC_OscConfig+0x2d4>
 80035d6:	bf00      	nop
 80035d8:	58024400 	.word	0x58024400
 80035dc:	4b9a      	ldr	r3, [pc, #616]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	061b      	lsls	r3, r3, #24
 80035ea:	4997      	ldr	r1, [pc, #604]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
 80035f0:	e018      	b.n	8003624 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f2:	4b95      	ldr	r3, [pc, #596]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a94      	ldr	r2, [pc, #592]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fd fcfb 	bl	8000ff8 <HAL_GetTick>
 8003602:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003606:	f7fd fcf7 	bl	8000ff8 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e2c2      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003618:	4b8b      	ldr	r3, [pc, #556]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f0      	bne.n	8003606 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80a9 	beq.w	8003784 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003632:	4b85      	ldr	r3, [pc, #532]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800363a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800363c:	4b82      	ldr	r3, [pc, #520]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d007      	beq.n	8003658 <HAL_RCC_OscConfig+0x308>
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b18      	cmp	r3, #24
 800364c:	d13a      	bne.n	80036c4 <HAL_RCC_OscConfig+0x374>
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d135      	bne.n	80036c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003658:	4b7b      	ldr	r3, [pc, #492]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_OscConfig+0x320>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	2b80      	cmp	r3, #128	; 0x80
 800366a:	d001      	beq.n	8003670 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e296      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003670:	f7fd fcce 	bl	8001010 <HAL_GetREVID>
 8003674:	4603      	mov	r3, r0
 8003676:	f241 0203 	movw	r2, #4099	; 0x1003
 800367a:	4293      	cmp	r3, r2
 800367c:	d817      	bhi.n	80036ae <HAL_RCC_OscConfig+0x35e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	2b20      	cmp	r3, #32
 8003684:	d108      	bne.n	8003698 <HAL_RCC_OscConfig+0x348>
 8003686:	4b70      	ldr	r3, [pc, #448]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800368e:	4a6e      	ldr	r2, [pc, #440]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003694:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003696:	e075      	b.n	8003784 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003698:	4b6b      	ldr	r3, [pc, #428]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	069b      	lsls	r3, r3, #26
 80036a6:	4968      	ldr	r1, [pc, #416]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036ac:	e06a      	b.n	8003784 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036ae:	4b66      	ldr	r3, [pc, #408]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	061b      	lsls	r3, r3, #24
 80036bc:	4962      	ldr	r1, [pc, #392]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036c2:	e05f      	b.n	8003784 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d042      	beq.n	8003752 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036cc:	4b5e      	ldr	r3, [pc, #376]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a5d      	ldr	r2, [pc, #372]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 80036d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fd fc8e 	bl	8000ff8 <HAL_GetTick>
 80036dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80036e0:	f7fd fc8a 	bl	8000ff8 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e255      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036f2:	4b55      	ldr	r3, [pc, #340]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f0      	beq.n	80036e0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036fe:	f7fd fc87 	bl	8001010 <HAL_GetREVID>
 8003702:	4603      	mov	r3, r0
 8003704:	f241 0203 	movw	r2, #4099	; 0x1003
 8003708:	4293      	cmp	r3, r2
 800370a:	d817      	bhi.n	800373c <HAL_RCC_OscConfig+0x3ec>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	2b20      	cmp	r3, #32
 8003712:	d108      	bne.n	8003726 <HAL_RCC_OscConfig+0x3d6>
 8003714:	4b4c      	ldr	r3, [pc, #304]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800371c:	4a4a      	ldr	r2, [pc, #296]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 800371e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003722:	6053      	str	r3, [r2, #4]
 8003724:	e02e      	b.n	8003784 <HAL_RCC_OscConfig+0x434>
 8003726:	4b48      	ldr	r3, [pc, #288]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	069b      	lsls	r3, r3, #26
 8003734:	4944      	ldr	r1, [pc, #272]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003736:	4313      	orrs	r3, r2
 8003738:	604b      	str	r3, [r1, #4]
 800373a:	e023      	b.n	8003784 <HAL_RCC_OscConfig+0x434>
 800373c:	4b42      	ldr	r3, [pc, #264]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	493f      	ldr	r1, [pc, #252]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 800374c:	4313      	orrs	r3, r2
 800374e:	60cb      	str	r3, [r1, #12]
 8003750:	e018      	b.n	8003784 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003752:	4b3d      	ldr	r3, [pc, #244]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a3c      	ldr	r2, [pc, #240]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800375c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7fd fc4b 	bl	8000ff8 <HAL_GetTick>
 8003762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003766:	f7fd fc47 	bl	8000ff8 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e212      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003778:	4b33      	ldr	r3, [pc, #204]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f0      	bne.n	8003766 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d036      	beq.n	80037fe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d019      	beq.n	80037cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003798:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 800379a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379c:	4a2a      	ldr	r2, [pc, #168]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a4:	f7fd fc28 	bl	8000ff8 <HAL_GetTick>
 80037a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ac:	f7fd fc24 	bl	8000ff8 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e1ef      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037be:	4b22      	ldr	r3, [pc, #136]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 80037c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x45c>
 80037ca:	e018      	b.n	80037fe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037cc:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d0:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fd fc0e 	bl	8000ff8 <HAL_GetTick>
 80037dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fd fc0a 	bl	8000ff8 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e1d5      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 80037f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d039      	beq.n	800387e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d01c      	beq.n	800384c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003812:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 8003818:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800381c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800381e:	f7fd fbeb 	bl	8000ff8 <HAL_GetTick>
 8003822:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003826:	f7fd fbe7 	bl	8000ff8 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e1b2      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <HAL_RCC_OscConfig+0x4f8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x4d6>
 8003844:	e01b      	b.n	800387e <HAL_RCC_OscConfig+0x52e>
 8003846:	bf00      	nop
 8003848:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800384c:	4b9b      	ldr	r3, [pc, #620]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a9a      	ldr	r2, [pc, #616]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003856:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003858:	f7fd fbce 	bl	8000ff8 <HAL_GetTick>
 800385c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003860:	f7fd fbca 	bl	8000ff8 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e195      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003872:	4b92      	ldr	r3, [pc, #584]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8081 	beq.w	800398e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800388c:	4b8c      	ldr	r3, [pc, #560]	; (8003ac0 <HAL_RCC_OscConfig+0x770>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a8b      	ldr	r2, [pc, #556]	; (8003ac0 <HAL_RCC_OscConfig+0x770>)
 8003892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003896:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003898:	f7fd fbae 	bl	8000ff8 <HAL_GetTick>
 800389c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038a0:	f7fd fbaa 	bl	8000ff8 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e175      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038b2:	4b83      	ldr	r3, [pc, #524]	; (8003ac0 <HAL_RCC_OscConfig+0x770>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d106      	bne.n	80038d4 <HAL_RCC_OscConfig+0x584>
 80038c6:	4b7d      	ldr	r3, [pc, #500]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	4a7c      	ldr	r2, [pc, #496]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	6713      	str	r3, [r2, #112]	; 0x70
 80038d2:	e02d      	b.n	8003930 <HAL_RCC_OscConfig+0x5e0>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10c      	bne.n	80038f6 <HAL_RCC_OscConfig+0x5a6>
 80038dc:	4b77      	ldr	r3, [pc, #476]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	4a76      	ldr	r2, [pc, #472]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	6713      	str	r3, [r2, #112]	; 0x70
 80038e8:	4b74      	ldr	r3, [pc, #464]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	4a73      	ldr	r2, [pc, #460]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 80038ee:	f023 0304 	bic.w	r3, r3, #4
 80038f2:	6713      	str	r3, [r2, #112]	; 0x70
 80038f4:	e01c      	b.n	8003930 <HAL_RCC_OscConfig+0x5e0>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b05      	cmp	r3, #5
 80038fc:	d10c      	bne.n	8003918 <HAL_RCC_OscConfig+0x5c8>
 80038fe:	4b6f      	ldr	r3, [pc, #444]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	4a6e      	ldr	r2, [pc, #440]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003904:	f043 0304 	orr.w	r3, r3, #4
 8003908:	6713      	str	r3, [r2, #112]	; 0x70
 800390a:	4b6c      	ldr	r3, [pc, #432]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	4a6b      	ldr	r2, [pc, #428]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	6713      	str	r3, [r2, #112]	; 0x70
 8003916:	e00b      	b.n	8003930 <HAL_RCC_OscConfig+0x5e0>
 8003918:	4b68      	ldr	r3, [pc, #416]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	4a67      	ldr	r2, [pc, #412]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	6713      	str	r3, [r2, #112]	; 0x70
 8003924:	4b65      	ldr	r3, [pc, #404]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	4a64      	ldr	r2, [pc, #400]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 800392a:	f023 0304 	bic.w	r3, r3, #4
 800392e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d015      	beq.n	8003964 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003938:	f7fd fb5e 	bl	8000ff8 <HAL_GetTick>
 800393c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800393e:	e00a      	b.n	8003956 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003940:	f7fd fb5a 	bl	8000ff8 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f241 3288 	movw	r2, #5000	; 0x1388
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e123      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003956:	4b59      	ldr	r3, [pc, #356]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0ee      	beq.n	8003940 <HAL_RCC_OscConfig+0x5f0>
 8003962:	e014      	b.n	800398e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003964:	f7fd fb48 	bl	8000ff8 <HAL_GetTick>
 8003968:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800396a:	e00a      	b.n	8003982 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800396c:	f7fd fb44 	bl	8000ff8 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	; 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e10d      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003982:	4b4e      	ldr	r3, [pc, #312]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1ee      	bne.n	800396c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 8102 	beq.w	8003b9c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003998:	4b48      	ldr	r3, [pc, #288]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039a0:	2b18      	cmp	r3, #24
 80039a2:	f000 80bd 	beq.w	8003b20 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	f040 809e 	bne.w	8003aec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b0:	4b42      	ldr	r3, [pc, #264]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a41      	ldr	r2, [pc, #260]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 80039b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fd fb1c 	bl	8000ff8 <HAL_GetTick>
 80039c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c4:	f7fd fb18 	bl	8000ff8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e0e3      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039d6:	4b39      	ldr	r3, [pc, #228]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039e2:	4b36      	ldr	r3, [pc, #216]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 80039e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039e6:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <HAL_RCC_OscConfig+0x774>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039f2:	0112      	lsls	r2, r2, #4
 80039f4:	430a      	orrs	r2, r1
 80039f6:	4931      	ldr	r1, [pc, #196]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	628b      	str	r3, [r1, #40]	; 0x28
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	3b01      	subs	r3, #1
 8003a02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	025b      	lsls	r3, r3, #9
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	3b01      	subs	r3, #1
 8003a18:	041b      	lsls	r3, r3, #16
 8003a1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a24:	3b01      	subs	r3, #1
 8003a26:	061b      	lsls	r3, r3, #24
 8003a28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a2c:	4923      	ldr	r1, [pc, #140]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003a32:	4b22      	ldr	r3, [pc, #136]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	4a21      	ldr	r2, [pc, #132]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a3e:	4b1f      	ldr	r3, [pc, #124]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a42:	4b21      	ldr	r3, [pc, #132]	; (8003ac8 <HAL_RCC_OscConfig+0x778>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a4a:	00d2      	lsls	r2, r2, #3
 8003a4c:	491b      	ldr	r1, [pc, #108]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a52:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	f023 020c 	bic.w	r2, r3, #12
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	4917      	ldr	r1, [pc, #92]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a64:	4b15      	ldr	r3, [pc, #84]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	f023 0202 	bic.w	r2, r3, #2
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a70:	4912      	ldr	r1, [pc, #72]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a76:	4b11      	ldr	r3, [pc, #68]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	4a10      	ldr	r2, [pc, #64]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a82:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	4a0d      	ldr	r2, [pc, #52]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003a9a:	4b08      	ldr	r3, [pc, #32]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	4a07      	ldr	r2, [pc, #28]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a04      	ldr	r2, [pc, #16]	; (8003abc <HAL_RCC_OscConfig+0x76c>)
 8003aac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fd faa1 	bl	8000ff8 <HAL_GetTick>
 8003ab6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ab8:	e011      	b.n	8003ade <HAL_RCC_OscConfig+0x78e>
 8003aba:	bf00      	nop
 8003abc:	58024400 	.word	0x58024400
 8003ac0:	58024800 	.word	0x58024800
 8003ac4:	fffffc0c 	.word	0xfffffc0c
 8003ac8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fd fa94 	bl	8000ff8 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e05f      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ade:	4b32      	ldr	r3, [pc, #200]	; (8003ba8 <HAL_RCC_OscConfig+0x858>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x77c>
 8003aea:	e057      	b.n	8003b9c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aec:	4b2e      	ldr	r3, [pc, #184]	; (8003ba8 <HAL_RCC_OscConfig+0x858>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2d      	ldr	r2, [pc, #180]	; (8003ba8 <HAL_RCC_OscConfig+0x858>)
 8003af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7fd fa7e 	bl	8000ff8 <HAL_GetTick>
 8003afc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b00:	f7fd fa7a 	bl	8000ff8 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e045      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b12:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <HAL_RCC_OscConfig+0x858>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x7b0>
 8003b1e:	e03d      	b.n	8003b9c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b20:	4b21      	ldr	r3, [pc, #132]	; (8003ba8 <HAL_RCC_OscConfig+0x858>)
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b26:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_RCC_OscConfig+0x858>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d031      	beq.n	8003b98 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f003 0203 	and.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d12a      	bne.n	8003b98 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d122      	bne.n	8003b98 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d11a      	bne.n	8003b98 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	0a5b      	lsrs	r3, r3, #9
 8003b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d111      	bne.n	8003b98 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	0c1b      	lsrs	r3, r3, #16
 8003b78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d108      	bne.n	8003b98 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	0e1b      	lsrs	r3, r3, #24
 8003b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3730      	adds	r7, #48	; 0x30
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	58024400 	.word	0x58024400

08003bac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e19c      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc0:	4b8a      	ldr	r3, [pc, #552]	; (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d910      	bls.n	8003bf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bce:	4b87      	ldr	r3, [pc, #540]	; (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 020f 	bic.w	r2, r3, #15
 8003bd6:	4985      	ldr	r1, [pc, #532]	; (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b83      	ldr	r3, [pc, #524]	; (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e184      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d010      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	4b7b      	ldr	r3, [pc, #492]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d908      	bls.n	8003c1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c0c:	4b78      	ldr	r3, [pc, #480]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	4975      	ldr	r1, [pc, #468]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d010      	beq.n	8003c4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	4b70      	ldr	r3, [pc, #448]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d908      	bls.n	8003c4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c3a:	4b6d      	ldr	r3, [pc, #436]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	496a      	ldr	r1, [pc, #424]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d010      	beq.n	8003c7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	4b64      	ldr	r3, [pc, #400]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d908      	bls.n	8003c7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c68:	4b61      	ldr	r3, [pc, #388]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	495e      	ldr	r1, [pc, #376]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d010      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	4b59      	ldr	r3, [pc, #356]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d908      	bls.n	8003ca8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c96:	4b56      	ldr	r3, [pc, #344]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	4953      	ldr	r1, [pc, #332]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d010      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	4b4d      	ldr	r3, [pc, #308]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d908      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc4:	4b4a      	ldr	r3, [pc, #296]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f023 020f 	bic.w	r2, r3, #15
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4947      	ldr	r1, [pc, #284]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d055      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ce2:	4b43      	ldr	r3, [pc, #268]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	4940      	ldr	r1, [pc, #256]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cfc:	4b3c      	ldr	r3, [pc, #240]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d121      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0f6      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d107      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d14:	4b36      	ldr	r3, [pc, #216]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d115      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0ea      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d107      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d2c:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d109      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0de      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d3c:	4b2c      	ldr	r3, [pc, #176]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0d6      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d4c:	4b28      	ldr	r3, [pc, #160]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f023 0207 	bic.w	r2, r3, #7
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4925      	ldr	r1, [pc, #148]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5e:	f7fd f94b 	bl	8000ff8 <HAL_GetTick>
 8003d62:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d64:	e00a      	b.n	8003d7c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d66:	f7fd f947 	bl	8000ff8 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e0be      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7c:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d1eb      	bne.n	8003d66 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d010      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d208      	bcs.n	8003dbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003daa:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f023 020f 	bic.w	r2, r3, #15
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	490e      	ldr	r1, [pc, #56]	; (8003df0 <HAL_RCC_ClockConfig+0x244>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d214      	bcs.n	8003df4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dca:	4b08      	ldr	r3, [pc, #32]	; (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f023 020f 	bic.w	r2, r3, #15
 8003dd2:	4906      	ldr	r1, [pc, #24]	; (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dda:	4b04      	ldr	r3, [pc, #16]	; (8003dec <HAL_RCC_ClockConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e086      	b.n	8003efa <HAL_RCC_ClockConfig+0x34e>
 8003dec:	52002000 	.word	0x52002000
 8003df0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d010      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	4b3f      	ldr	r3, [pc, #252]	; (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d208      	bcs.n	8003e22 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e10:	4b3c      	ldr	r3, [pc, #240]	; (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	4939      	ldr	r1, [pc, #228]	; (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d010      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	4b34      	ldr	r3, [pc, #208]	; (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d208      	bcs.n	8003e50 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e3e:	4b31      	ldr	r3, [pc, #196]	; (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	492e      	ldr	r1, [pc, #184]	; (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d010      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	4b28      	ldr	r3, [pc, #160]	; (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d208      	bcs.n	8003e7e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e6c:	4b25      	ldr	r3, [pc, #148]	; (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	4922      	ldr	r1, [pc, #136]	; (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d010      	beq.n	8003eac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d208      	bcs.n	8003eac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	4917      	ldr	r1, [pc, #92]	; (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003eac:	f000 f834 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	4b14      	ldr	r3, [pc, #80]	; (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	4912      	ldr	r1, [pc, #72]	; (8003f08 <HAL_RCC_ClockConfig+0x35c>)
 8003ebe:	5ccb      	ldrb	r3, [r1, r3]
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003eca:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <HAL_RCC_ClockConfig+0x358>)
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	4a0d      	ldr	r2, [pc, #52]	; (8003f08 <HAL_RCC_ClockConfig+0x35c>)
 8003ed4:	5cd3      	ldrb	r3, [r2, r3]
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee0:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <HAL_RCC_ClockConfig+0x360>)
 8003ee2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ee4:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <HAL_RCC_ClockConfig+0x364>)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003eea:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <HAL_RCC_ClockConfig+0x368>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fc fd48 	bl	8000984 <HAL_InitTick>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	58024400 	.word	0x58024400
 8003f08:	08016658 	.word	0x08016658
 8003f0c:	24000004 	.word	0x24000004
 8003f10:	24000000 	.word	0x24000000
 8003f14:	24000008 	.word	0x24000008

08003f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b089      	sub	sp, #36	; 0x24
 8003f1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f1e:	4bb3      	ldr	r3, [pc, #716]	; (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f26:	2b18      	cmp	r3, #24
 8003f28:	f200 8155 	bhi.w	80041d6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003f2c:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f99 	.word	0x08003f99
 8003f38:	080041d7 	.word	0x080041d7
 8003f3c:	080041d7 	.word	0x080041d7
 8003f40:	080041d7 	.word	0x080041d7
 8003f44:	080041d7 	.word	0x080041d7
 8003f48:	080041d7 	.word	0x080041d7
 8003f4c:	080041d7 	.word	0x080041d7
 8003f50:	080041d7 	.word	0x080041d7
 8003f54:	08003fbf 	.word	0x08003fbf
 8003f58:	080041d7 	.word	0x080041d7
 8003f5c:	080041d7 	.word	0x080041d7
 8003f60:	080041d7 	.word	0x080041d7
 8003f64:	080041d7 	.word	0x080041d7
 8003f68:	080041d7 	.word	0x080041d7
 8003f6c:	080041d7 	.word	0x080041d7
 8003f70:	080041d7 	.word	0x080041d7
 8003f74:	08003fc5 	.word	0x08003fc5
 8003f78:	080041d7 	.word	0x080041d7
 8003f7c:	080041d7 	.word	0x080041d7
 8003f80:	080041d7 	.word	0x080041d7
 8003f84:	080041d7 	.word	0x080041d7
 8003f88:	080041d7 	.word	0x080041d7
 8003f8c:	080041d7 	.word	0x080041d7
 8003f90:	080041d7 	.word	0x080041d7
 8003f94:	08003fcb 	.word	0x08003fcb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f98:	4b94      	ldr	r3, [pc, #592]	; (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d009      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fa4:	4b91      	ldr	r3, [pc, #580]	; (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	08db      	lsrs	r3, r3, #3
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	4a90      	ldr	r2, [pc, #576]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003fb6:	e111      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003fb8:	4b8d      	ldr	r3, [pc, #564]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fba:	61bb      	str	r3, [r7, #24]
    break;
 8003fbc:	e10e      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003fbe:	4b8d      	ldr	r3, [pc, #564]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fc0:	61bb      	str	r3, [r7, #24]
    break;
 8003fc2:	e10b      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003fc4:	4b8c      	ldr	r3, [pc, #560]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003fc6:	61bb      	str	r3, [r7, #24]
    break;
 8003fc8:	e108      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fca:	4b88      	ldr	r3, [pc, #544]	; (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003fd4:	4b85      	ldr	r3, [pc, #532]	; (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fde:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003fe0:	4b82      	ldr	r3, [pc, #520]	; (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003fea:	4b80      	ldr	r3, [pc, #512]	; (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fee:	08db      	lsrs	r3, r3, #3
 8003ff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	fb02 f303 	mul.w	r3, r2, r3
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004002:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80e1 	beq.w	80041d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2b02      	cmp	r3, #2
 8004012:	f000 8083 	beq.w	800411c <HAL_RCC_GetSysClockFreq+0x204>
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b02      	cmp	r3, #2
 800401a:	f200 80a1 	bhi.w	8004160 <HAL_RCC_GetSysClockFreq+0x248>
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x114>
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d056      	beq.n	80040d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800402a:	e099      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800402c:	4b6f      	ldr	r3, [pc, #444]	; (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d02d      	beq.n	8004094 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004038:	4b6c      	ldr	r3, [pc, #432]	; (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	08db      	lsrs	r3, r3, #3
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	4a6b      	ldr	r2, [pc, #428]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
 8004048:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	ee07 3a90 	vmov	s15, r3
 8004050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004062:	4b62      	ldr	r3, [pc, #392]	; (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004072:	ed97 6a02 	vldr	s12, [r7, #8]
 8004076:	eddf 5a61 	vldr	s11, [pc, #388]	; 80041fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800407a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800407e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800408a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004092:	e087      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004200 <HAL_RCC_GetSysClockFreq+0x2e8>
 80040a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a6:	4b51      	ldr	r3, [pc, #324]	; (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80040ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80041fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80040be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040d6:	e065      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004204 <HAL_RCC_GetSysClockFreq+0x2ec>
 80040e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ea:	4b40      	ldr	r3, [pc, #256]	; (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80040fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80041fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800410a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800410e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800411a:	e043      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004126:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004208 <HAL_RCC_GetSysClockFreq+0x2f0>
 800412a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800412e:	4b2f      	ldr	r3, [pc, #188]	; (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800413e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004142:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80041fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800414a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800414e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800415e:	e021      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004204 <HAL_RCC_GetSysClockFreq+0x2ec>
 800416e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004172:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004182:	ed97 6a02 	vldr	s12, [r7, #8]
 8004186:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80041fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800418a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800418e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800419a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800419e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80041a4:	4b11      	ldr	r3, [pc, #68]	; (80041ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	0a5b      	lsrs	r3, r3, #9
 80041aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ae:	3301      	adds	r3, #1
 80041b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	ee07 3a90 	vmov	s15, r3
 80041b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80041c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041c8:	ee17 3a90 	vmov	r3, s15
 80041cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80041ce:	e005      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61bb      	str	r3, [r7, #24]
    break;
 80041d4:	e002      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80041d6:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041d8:	61bb      	str	r3, [r7, #24]
    break;
 80041da:	bf00      	nop
  }

  return sysclockfreq;
 80041dc:	69bb      	ldr	r3, [r7, #24]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	; 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	58024400 	.word	0x58024400
 80041f0:	03d09000 	.word	0x03d09000
 80041f4:	003d0900 	.word	0x003d0900
 80041f8:	017d7840 	.word	0x017d7840
 80041fc:	46000000 	.word	0x46000000
 8004200:	4c742400 	.word	0x4c742400
 8004204:	4a742400 	.word	0x4a742400
 8004208:	4bbebc20 	.word	0x4bbebc20

0800420c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004212:	f7ff fe81 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8004216:	4602      	mov	r2, r0
 8004218:	4b10      	ldr	r3, [pc, #64]	; (800425c <HAL_RCC_GetHCLKFreq+0x50>)
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	0a1b      	lsrs	r3, r3, #8
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	490f      	ldr	r1, [pc, #60]	; (8004260 <HAL_RCC_GetHCLKFreq+0x54>)
 8004224:	5ccb      	ldrb	r3, [r1, r3]
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	fa22 f303 	lsr.w	r3, r2, r3
 800422e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <HAL_RCC_GetHCLKFreq+0x50>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f003 030f 	and.w	r3, r3, #15
 8004238:	4a09      	ldr	r2, [pc, #36]	; (8004260 <HAL_RCC_GetHCLKFreq+0x54>)
 800423a:	5cd3      	ldrb	r3, [r2, r3]
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	fa22 f303 	lsr.w	r3, r2, r3
 8004246:	4a07      	ldr	r2, [pc, #28]	; (8004264 <HAL_RCC_GetHCLKFreq+0x58>)
 8004248:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800424a:	4a07      	ldr	r2, [pc, #28]	; (8004268 <HAL_RCC_GetHCLKFreq+0x5c>)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <HAL_RCC_GetHCLKFreq+0x58>)
 8004252:	681b      	ldr	r3, [r3, #0]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	58024400 	.word	0x58024400
 8004260:	08016658 	.word	0x08016658
 8004264:	24000004 	.word	0x24000004
 8004268:	24000000 	.word	0x24000000

0800426c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004270:	f7ff ffcc 	bl	800420c <HAL_RCC_GetHCLKFreq>
 8004274:	4602      	mov	r2, r0
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	091b      	lsrs	r3, r3, #4
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	4904      	ldr	r1, [pc, #16]	; (8004294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004282:	5ccb      	ldrb	r3, [r1, r3]
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800428c:	4618      	mov	r0, r3
 800428e:	bd80      	pop	{r7, pc}
 8004290:	58024400 	.word	0x58024400
 8004294:	08016658 	.word	0x08016658

08004298 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	223f      	movs	r2, #63	; 0x3f
 80042a6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042a8:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <HAL_RCC_GetClockConfig+0x7c>)
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f003 0207 	and.w	r2, r3, #7
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80042b4:	4b17      	ldr	r3, [pc, #92]	; (8004314 <HAL_RCC_GetClockConfig+0x7c>)
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80042c0:	4b14      	ldr	r3, [pc, #80]	; (8004314 <HAL_RCC_GetClockConfig+0x7c>)
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f003 020f 	and.w	r2, r3, #15
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80042cc:	4b11      	ldr	r3, [pc, #68]	; (8004314 <HAL_RCC_GetClockConfig+0x7c>)
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <HAL_RCC_GetClockConfig+0x7c>)
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <HAL_RCC_GetClockConfig+0x7c>)
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80042f0:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_RCC_GetClockConfig+0x7c>)
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <HAL_RCC_GetClockConfig+0x80>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 020f 	and.w	r2, r3, #15
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	601a      	str	r2, [r3, #0]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	58024400 	.word	0x58024400
 8004318:	52002000 	.word	0x52002000

0800431c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e049      	b.n	80043c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f841 	bl	80043ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	4619      	mov	r1, r3
 800435a:	4610      	mov	r0, r2
 800435c:	f000 fa00 	bl	8004760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d001      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e054      	b.n	80044a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a26      	ldr	r2, [pc, #152]	; (80044b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d022      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x80>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004422:	d01d      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x80>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a22      	ldr	r2, [pc, #136]	; (80044b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d018      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x80>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a21      	ldr	r2, [pc, #132]	; (80044b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d013      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x80>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1f      	ldr	r2, [pc, #124]	; (80044bc <HAL_TIM_Base_Start_IT+0xdc>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00e      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x80>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1e      	ldr	r2, [pc, #120]	; (80044c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d009      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x80>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1c      	ldr	r2, [pc, #112]	; (80044c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x80>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1b      	ldr	r2, [pc, #108]	; (80044c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d115      	bne.n	800448c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	4b19      	ldr	r3, [pc, #100]	; (80044cc <HAL_TIM_Base_Start_IT+0xec>)
 8004468:	4013      	ands	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b06      	cmp	r3, #6
 8004470:	d015      	beq.n	800449e <HAL_TIM_Base_Start_IT+0xbe>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004478:	d011      	beq.n	800449e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 0201 	orr.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448a:	e008      	b.n	800449e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	e000      	b.n	80044a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800
 80044bc:	40000c00 	.word	0x40000c00
 80044c0:	40010400 	.word	0x40010400
 80044c4:	40001800 	.word	0x40001800
 80044c8:	40014000 	.word	0x40014000
 80044cc:	00010007 	.word	0x00010007

080044d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d122      	bne.n	800452c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d11b      	bne.n	800452c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0202 	mvn.w	r2, #2
 80044fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f905 	bl	8004722 <HAL_TIM_IC_CaptureCallback>
 8004518:	e005      	b.n	8004526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f8f7 	bl	800470e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f908 	bl	8004736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b04      	cmp	r3, #4
 8004538:	d122      	bne.n	8004580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b04      	cmp	r3, #4
 8004546:	d11b      	bne.n	8004580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0204 	mvn.w	r2, #4
 8004550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2202      	movs	r2, #2
 8004556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f8db 	bl	8004722 <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f8cd 	bl	800470e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f8de 	bl	8004736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b08      	cmp	r3, #8
 800458c:	d122      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b08      	cmp	r3, #8
 800459a:	d11b      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0208 	mvn.w	r2, #8
 80045a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2204      	movs	r2, #4
 80045aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f8b1 	bl	8004722 <HAL_TIM_IC_CaptureCallback>
 80045c0:	e005      	b.n	80045ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f8a3 	bl	800470e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f8b4 	bl	8004736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0310 	and.w	r3, r3, #16
 80045de:	2b10      	cmp	r3, #16
 80045e0:	d122      	bne.n	8004628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d11b      	bne.n	8004628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0210 	mvn.w	r2, #16
 80045f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2208      	movs	r2, #8
 80045fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f887 	bl	8004722 <HAL_TIM_IC_CaptureCallback>
 8004614:	e005      	b.n	8004622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f879 	bl	800470e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f88a 	bl	8004736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b01      	cmp	r3, #1
 8004634:	d10e      	bne.n	8004654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b01      	cmp	r3, #1
 8004642:	d107      	bne.n	8004654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0201 	mvn.w	r2, #1
 800464c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fc f962 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465e:	2b80      	cmp	r3, #128	; 0x80
 8004660:	d10e      	bne.n	8004680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466c:	2b80      	cmp	r3, #128	; 0x80
 800466e:	d107      	bne.n	8004680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f914 	bl	80048a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468e:	d10e      	bne.n	80046ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469a:	2b80      	cmp	r3, #128	; 0x80
 800469c:	d107      	bne.n	80046ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f907 	bl	80048bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d10e      	bne.n	80046da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c6:	2b40      	cmp	r3, #64	; 0x40
 80046c8:	d107      	bne.n	80046da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f838 	bl	800474a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d10e      	bne.n	8004706 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	d107      	bne.n	8004706 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f06f 0220 	mvn.w	r2, #32
 80046fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f8c7 	bl	8004894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004706:	bf00      	nop
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a40      	ldr	r2, [pc, #256]	; (8004874 <TIM_Base_SetConfig+0x114>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d013      	beq.n	80047a0 <TIM_Base_SetConfig+0x40>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477e:	d00f      	beq.n	80047a0 <TIM_Base_SetConfig+0x40>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a3d      	ldr	r2, [pc, #244]	; (8004878 <TIM_Base_SetConfig+0x118>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00b      	beq.n	80047a0 <TIM_Base_SetConfig+0x40>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a3c      	ldr	r2, [pc, #240]	; (800487c <TIM_Base_SetConfig+0x11c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d007      	beq.n	80047a0 <TIM_Base_SetConfig+0x40>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a3b      	ldr	r2, [pc, #236]	; (8004880 <TIM_Base_SetConfig+0x120>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d003      	beq.n	80047a0 <TIM_Base_SetConfig+0x40>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a3a      	ldr	r2, [pc, #232]	; (8004884 <TIM_Base_SetConfig+0x124>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d108      	bne.n	80047b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a2f      	ldr	r2, [pc, #188]	; (8004874 <TIM_Base_SetConfig+0x114>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01f      	beq.n	80047fa <TIM_Base_SetConfig+0x9a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c0:	d01b      	beq.n	80047fa <TIM_Base_SetConfig+0x9a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a2c      	ldr	r2, [pc, #176]	; (8004878 <TIM_Base_SetConfig+0x118>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d017      	beq.n	80047fa <TIM_Base_SetConfig+0x9a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a2b      	ldr	r2, [pc, #172]	; (800487c <TIM_Base_SetConfig+0x11c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d013      	beq.n	80047fa <TIM_Base_SetConfig+0x9a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a2a      	ldr	r2, [pc, #168]	; (8004880 <TIM_Base_SetConfig+0x120>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00f      	beq.n	80047fa <TIM_Base_SetConfig+0x9a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a29      	ldr	r2, [pc, #164]	; (8004884 <TIM_Base_SetConfig+0x124>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00b      	beq.n	80047fa <TIM_Base_SetConfig+0x9a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a28      	ldr	r2, [pc, #160]	; (8004888 <TIM_Base_SetConfig+0x128>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d007      	beq.n	80047fa <TIM_Base_SetConfig+0x9a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a27      	ldr	r2, [pc, #156]	; (800488c <TIM_Base_SetConfig+0x12c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d003      	beq.n	80047fa <TIM_Base_SetConfig+0x9a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a26      	ldr	r2, [pc, #152]	; (8004890 <TIM_Base_SetConfig+0x130>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d108      	bne.n	800480c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a10      	ldr	r2, [pc, #64]	; (8004874 <TIM_Base_SetConfig+0x114>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00f      	beq.n	8004858 <TIM_Base_SetConfig+0xf8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a12      	ldr	r2, [pc, #72]	; (8004884 <TIM_Base_SetConfig+0x124>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00b      	beq.n	8004858 <TIM_Base_SetConfig+0xf8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a11      	ldr	r2, [pc, #68]	; (8004888 <TIM_Base_SetConfig+0x128>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d007      	beq.n	8004858 <TIM_Base_SetConfig+0xf8>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a10      	ldr	r2, [pc, #64]	; (800488c <TIM_Base_SetConfig+0x12c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d003      	beq.n	8004858 <TIM_Base_SetConfig+0xf8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a0f      	ldr	r2, [pc, #60]	; (8004890 <TIM_Base_SetConfig+0x130>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d103      	bne.n	8004860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	615a      	str	r2, [r3, #20]
}
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40010000 	.word	0x40010000
 8004878:	40000400 	.word	0x40000400
 800487c:	40000800 	.word	0x40000800
 8004880:	40000c00 	.word	0x40000c00
 8004884:	40010400 	.word	0x40010400
 8004888:	40014000 	.word	0x40014000
 800488c:	40014400 	.word	0x40014400
 8004890:	40014800 	.word	0x40014800

08004894 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80048d0:	b5b0      	push	{r4, r5, r7, lr}
 80048d2:	b08c      	sub	sp, #48	; 0x30
 80048d4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80048d6:	4b96      	ldr	r3, [pc, #600]	; (8004b30 <MX_LWIP_Init+0x260>)
 80048d8:	22c0      	movs	r2, #192	; 0xc0
 80048da:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80048dc:	4b94      	ldr	r3, [pc, #592]	; (8004b30 <MX_LWIP_Init+0x260>)
 80048de:	22a8      	movs	r2, #168	; 0xa8
 80048e0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80048e2:	4b93      	ldr	r3, [pc, #588]	; (8004b30 <MX_LWIP_Init+0x260>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 80048e8:	4b91      	ldr	r3, [pc, #580]	; (8004b30 <MX_LWIP_Init+0x260>)
 80048ea:	2201      	movs	r2, #1
 80048ec:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80048ee:	4b91      	ldr	r3, [pc, #580]	; (8004b34 <MX_LWIP_Init+0x264>)
 80048f0:	22ff      	movs	r2, #255	; 0xff
 80048f2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80048f4:	4b8f      	ldr	r3, [pc, #572]	; (8004b34 <MX_LWIP_Init+0x264>)
 80048f6:	22ff      	movs	r2, #255	; 0xff
 80048f8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80048fa:	4b8e      	ldr	r3, [pc, #568]	; (8004b34 <MX_LWIP_Init+0x264>)
 80048fc:	22ff      	movs	r2, #255	; 0xff
 80048fe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004900:	4b8c      	ldr	r3, [pc, #560]	; (8004b34 <MX_LWIP_Init+0x264>)
 8004902:	2200      	movs	r2, #0
 8004904:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004906:	4b8c      	ldr	r3, [pc, #560]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004908:	22c0      	movs	r2, #192	; 0xc0
 800490a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800490c:	4b8a      	ldr	r3, [pc, #552]	; (8004b38 <MX_LWIP_Init+0x268>)
 800490e:	22a8      	movs	r2, #168	; 0xa8
 8004910:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004912:	4b89      	ldr	r3, [pc, #548]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004914:	2201      	movs	r2, #1
 8004916:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 8004918:	4b87      	ldr	r3, [pc, #540]	; (8004b38 <MX_LWIP_Init+0x268>)
 800491a:	2264      	movs	r2, #100	; 0x64
 800491c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800491e:	2100      	movs	r1, #0
 8004920:	2000      	movs	r0, #0
 8004922:	f00d fad1 	bl	8011ec8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004926:	4b82      	ldr	r3, [pc, #520]	; (8004b30 <MX_LWIP_Init+0x260>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	061a      	lsls	r2, r3, #24
 800492c:	4b80      	ldr	r3, [pc, #512]	; (8004b30 <MX_LWIP_Init+0x260>)
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	041b      	lsls	r3, r3, #16
 8004932:	431a      	orrs	r2, r3
 8004934:	4b7e      	ldr	r3, [pc, #504]	; (8004b30 <MX_LWIP_Init+0x260>)
 8004936:	789b      	ldrb	r3, [r3, #2]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	4313      	orrs	r3, r2
 800493c:	4a7c      	ldr	r2, [pc, #496]	; (8004b30 <MX_LWIP_Init+0x260>)
 800493e:	78d2      	ldrb	r2, [r2, #3]
 8004940:	4313      	orrs	r3, r2
 8004942:	061a      	lsls	r2, r3, #24
 8004944:	4b7a      	ldr	r3, [pc, #488]	; (8004b30 <MX_LWIP_Init+0x260>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	0619      	lsls	r1, r3, #24
 800494a:	4b79      	ldr	r3, [pc, #484]	; (8004b30 <MX_LWIP_Init+0x260>)
 800494c:	785b      	ldrb	r3, [r3, #1]
 800494e:	041b      	lsls	r3, r3, #16
 8004950:	4319      	orrs	r1, r3
 8004952:	4b77      	ldr	r3, [pc, #476]	; (8004b30 <MX_LWIP_Init+0x260>)
 8004954:	789b      	ldrb	r3, [r3, #2]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	430b      	orrs	r3, r1
 800495a:	4975      	ldr	r1, [pc, #468]	; (8004b30 <MX_LWIP_Init+0x260>)
 800495c:	78c9      	ldrb	r1, [r1, #3]
 800495e:	430b      	orrs	r3, r1
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004966:	431a      	orrs	r2, r3
 8004968:	4b71      	ldr	r3, [pc, #452]	; (8004b30 <MX_LWIP_Init+0x260>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	0619      	lsls	r1, r3, #24
 800496e:	4b70      	ldr	r3, [pc, #448]	; (8004b30 <MX_LWIP_Init+0x260>)
 8004970:	785b      	ldrb	r3, [r3, #1]
 8004972:	041b      	lsls	r3, r3, #16
 8004974:	4319      	orrs	r1, r3
 8004976:	4b6e      	ldr	r3, [pc, #440]	; (8004b30 <MX_LWIP_Init+0x260>)
 8004978:	789b      	ldrb	r3, [r3, #2]
 800497a:	021b      	lsls	r3, r3, #8
 800497c:	430b      	orrs	r3, r1
 800497e:	496c      	ldr	r1, [pc, #432]	; (8004b30 <MX_LWIP_Init+0x260>)
 8004980:	78c9      	ldrb	r1, [r1, #3]
 8004982:	430b      	orrs	r3, r1
 8004984:	0a1b      	lsrs	r3, r3, #8
 8004986:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800498a:	431a      	orrs	r2, r3
 800498c:	4b68      	ldr	r3, [pc, #416]	; (8004b30 <MX_LWIP_Init+0x260>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	0619      	lsls	r1, r3, #24
 8004992:	4b67      	ldr	r3, [pc, #412]	; (8004b30 <MX_LWIP_Init+0x260>)
 8004994:	785b      	ldrb	r3, [r3, #1]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	4319      	orrs	r1, r3
 800499a:	4b65      	ldr	r3, [pc, #404]	; (8004b30 <MX_LWIP_Init+0x260>)
 800499c:	789b      	ldrb	r3, [r3, #2]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	430b      	orrs	r3, r1
 80049a2:	4963      	ldr	r1, [pc, #396]	; (8004b30 <MX_LWIP_Init+0x260>)
 80049a4:	78c9      	ldrb	r1, [r1, #3]
 80049a6:	430b      	orrs	r3, r1
 80049a8:	0e1b      	lsrs	r3, r3, #24
 80049aa:	4313      	orrs	r3, r2
 80049ac:	4a63      	ldr	r2, [pc, #396]	; (8004b3c <MX_LWIP_Init+0x26c>)
 80049ae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80049b0:	4b60      	ldr	r3, [pc, #384]	; (8004b34 <MX_LWIP_Init+0x264>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	061a      	lsls	r2, r3, #24
 80049b6:	4b5f      	ldr	r3, [pc, #380]	; (8004b34 <MX_LWIP_Init+0x264>)
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	431a      	orrs	r2, r3
 80049be:	4b5d      	ldr	r3, [pc, #372]	; (8004b34 <MX_LWIP_Init+0x264>)
 80049c0:	789b      	ldrb	r3, [r3, #2]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	4313      	orrs	r3, r2
 80049c6:	4a5b      	ldr	r2, [pc, #364]	; (8004b34 <MX_LWIP_Init+0x264>)
 80049c8:	78d2      	ldrb	r2, [r2, #3]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	061a      	lsls	r2, r3, #24
 80049ce:	4b59      	ldr	r3, [pc, #356]	; (8004b34 <MX_LWIP_Init+0x264>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	0619      	lsls	r1, r3, #24
 80049d4:	4b57      	ldr	r3, [pc, #348]	; (8004b34 <MX_LWIP_Init+0x264>)
 80049d6:	785b      	ldrb	r3, [r3, #1]
 80049d8:	041b      	lsls	r3, r3, #16
 80049da:	4319      	orrs	r1, r3
 80049dc:	4b55      	ldr	r3, [pc, #340]	; (8004b34 <MX_LWIP_Init+0x264>)
 80049de:	789b      	ldrb	r3, [r3, #2]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	430b      	orrs	r3, r1
 80049e4:	4953      	ldr	r1, [pc, #332]	; (8004b34 <MX_LWIP_Init+0x264>)
 80049e6:	78c9      	ldrb	r1, [r1, #3]
 80049e8:	430b      	orrs	r3, r1
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049f0:	431a      	orrs	r2, r3
 80049f2:	4b50      	ldr	r3, [pc, #320]	; (8004b34 <MX_LWIP_Init+0x264>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	0619      	lsls	r1, r3, #24
 80049f8:	4b4e      	ldr	r3, [pc, #312]	; (8004b34 <MX_LWIP_Init+0x264>)
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	041b      	lsls	r3, r3, #16
 80049fe:	4319      	orrs	r1, r3
 8004a00:	4b4c      	ldr	r3, [pc, #304]	; (8004b34 <MX_LWIP_Init+0x264>)
 8004a02:	789b      	ldrb	r3, [r3, #2]
 8004a04:	021b      	lsls	r3, r3, #8
 8004a06:	430b      	orrs	r3, r1
 8004a08:	494a      	ldr	r1, [pc, #296]	; (8004b34 <MX_LWIP_Init+0x264>)
 8004a0a:	78c9      	ldrb	r1, [r1, #3]
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	0a1b      	lsrs	r3, r3, #8
 8004a10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a14:	431a      	orrs	r2, r3
 8004a16:	4b47      	ldr	r3, [pc, #284]	; (8004b34 <MX_LWIP_Init+0x264>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	0619      	lsls	r1, r3, #24
 8004a1c:	4b45      	ldr	r3, [pc, #276]	; (8004b34 <MX_LWIP_Init+0x264>)
 8004a1e:	785b      	ldrb	r3, [r3, #1]
 8004a20:	041b      	lsls	r3, r3, #16
 8004a22:	4319      	orrs	r1, r3
 8004a24:	4b43      	ldr	r3, [pc, #268]	; (8004b34 <MX_LWIP_Init+0x264>)
 8004a26:	789b      	ldrb	r3, [r3, #2]
 8004a28:	021b      	lsls	r3, r3, #8
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	4941      	ldr	r1, [pc, #260]	; (8004b34 <MX_LWIP_Init+0x264>)
 8004a2e:	78c9      	ldrb	r1, [r1, #3]
 8004a30:	430b      	orrs	r3, r1
 8004a32:	0e1b      	lsrs	r3, r3, #24
 8004a34:	4313      	orrs	r3, r2
 8004a36:	4a42      	ldr	r2, [pc, #264]	; (8004b40 <MX_LWIP_Init+0x270>)
 8004a38:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004a3a:	4b3f      	ldr	r3, [pc, #252]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	061a      	lsls	r2, r3, #24
 8004a40:	4b3d      	ldr	r3, [pc, #244]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004a42:	785b      	ldrb	r3, [r3, #1]
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	431a      	orrs	r2, r3
 8004a48:	4b3b      	ldr	r3, [pc, #236]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004a4a:	789b      	ldrb	r3, [r3, #2]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	4a39      	ldr	r2, [pc, #228]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004a52:	78d2      	ldrb	r2, [r2, #3]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	061a      	lsls	r2, r3, #24
 8004a58:	4b37      	ldr	r3, [pc, #220]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	0619      	lsls	r1, r3, #24
 8004a5e:	4b36      	ldr	r3, [pc, #216]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004a60:	785b      	ldrb	r3, [r3, #1]
 8004a62:	041b      	lsls	r3, r3, #16
 8004a64:	4319      	orrs	r1, r3
 8004a66:	4b34      	ldr	r3, [pc, #208]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004a68:	789b      	ldrb	r3, [r3, #2]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	4932      	ldr	r1, [pc, #200]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004a70:	78c9      	ldrb	r1, [r1, #3]
 8004a72:	430b      	orrs	r3, r1
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	4b2e      	ldr	r3, [pc, #184]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	0619      	lsls	r1, r3, #24
 8004a82:	4b2d      	ldr	r3, [pc, #180]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	041b      	lsls	r3, r3, #16
 8004a88:	4319      	orrs	r1, r3
 8004a8a:	4b2b      	ldr	r3, [pc, #172]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004a8c:	789b      	ldrb	r3, [r3, #2]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	430b      	orrs	r3, r1
 8004a92:	4929      	ldr	r1, [pc, #164]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004a94:	78c9      	ldrb	r1, [r1, #3]
 8004a96:	430b      	orrs	r3, r1
 8004a98:	0a1b      	lsrs	r3, r3, #8
 8004a9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	4b25      	ldr	r3, [pc, #148]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	0619      	lsls	r1, r3, #24
 8004aa6:	4b24      	ldr	r3, [pc, #144]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	041b      	lsls	r3, r3, #16
 8004aac:	4319      	orrs	r1, r3
 8004aae:	4b22      	ldr	r3, [pc, #136]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004ab0:	789b      	ldrb	r3, [r3, #2]
 8004ab2:	021b      	lsls	r3, r3, #8
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	4920      	ldr	r1, [pc, #128]	; (8004b38 <MX_LWIP_Init+0x268>)
 8004ab8:	78c9      	ldrb	r1, [r1, #3]
 8004aba:	430b      	orrs	r3, r1
 8004abc:	0e1b      	lsrs	r3, r3, #24
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	4a20      	ldr	r2, [pc, #128]	; (8004b44 <MX_LWIP_Init+0x274>)
 8004ac2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004ac4:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <MX_LWIP_Init+0x278>)
 8004ac6:	9302      	str	r3, [sp, #8]
 8004ac8:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <MX_LWIP_Init+0x27c>)
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	2300      	movs	r3, #0
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	4b1c      	ldr	r3, [pc, #112]	; (8004b44 <MX_LWIP_Init+0x274>)
 8004ad2:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <MX_LWIP_Init+0x270>)
 8004ad4:	4919      	ldr	r1, [pc, #100]	; (8004b3c <MX_LWIP_Init+0x26c>)
 8004ad6:	481e      	ldr	r0, [pc, #120]	; (8004b50 <MX_LWIP_Init+0x280>)
 8004ad8:	f006 fd44 	bl	800b564 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004adc:	481c      	ldr	r0, [pc, #112]	; (8004b50 <MX_LWIP_Init+0x280>)
 8004ade:	f006 fef3 	bl	800b8c8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004ae2:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <MX_LWIP_Init+0x280>)
 8004ae4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ae8:	089b      	lsrs	r3, r3, #2
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004af4:	4816      	ldr	r0, [pc, #88]	; (8004b50 <MX_LWIP_Init+0x280>)
 8004af6:	f006 fef7 	bl	800b8e8 <netif_set_up>
 8004afa:	e002      	b.n	8004b02 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004afc:	4814      	ldr	r0, [pc, #80]	; (8004b50 <MX_LWIP_Init+0x280>)
 8004afe:	f006 ff5f 	bl	800b9c0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004b02:	4914      	ldr	r1, [pc, #80]	; (8004b54 <MX_LWIP_Init+0x284>)
 8004b04:	4812      	ldr	r0, [pc, #72]	; (8004b50 <MX_LWIP_Init+0x280>)
 8004b06:	f006 fff1 	bl	800baec <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <MX_LWIP_Init+0x288>)
 8004b0c:	1d3c      	adds	r4, r7, #4
 8004b0e:	461d      	mov	r5, r3
 8004b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004b1c:	1d3b      	adds	r3, r7, #4
 8004b1e:	490c      	ldr	r1, [pc, #48]	; (8004b50 <MX_LWIP_Init+0x280>)
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fd55 	bl	80055d0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004b26:	bf00      	nop
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	240003a0 	.word	0x240003a0
 8004b34:	240003a4 	.word	0x240003a4
 8004b38:	240003a8 	.word	0x240003a8
 8004b3c:	24000394 	.word	0x24000394
 8004b40:	24000398 	.word	0x24000398
 8004b44:	2400039c 	.word	0x2400039c
 8004b48:	08011e05 	.word	0x08011e05
 8004b4c:	08004ff9 	.word	0x08004ff9
 8004b50:	24000360 	.word	0x24000360
 8004b54:	08004b5d 	.word	0x08004b5d
 8004b58:	08013788 	.word	0x08013788

08004b5c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004b78:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <HAL_ETH_RxCpltCallback+0x1c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fe71 	bl	8005864 <osSemaphoreRelease>
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	240003b4 	.word	0x240003b4

08004b90 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004b98:	4b04      	ldr	r3, [pc, #16]	; (8004bac <HAL_ETH_TxCpltCallback+0x1c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fe61 	bl	8005864 <osSemaphoreRelease>
}
 8004ba2:	bf00      	nop
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	240003b8 	.word	0x240003b8

08004bb0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7fd fc0f 	bl	80023dc <HAL_ETH_GetDMAError>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc4:	2b80      	cmp	r3, #128	; 0x80
 8004bc6:	d104      	bne.n	8004bd2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <HAL_ETH_ErrorCallback+0x2c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fe49 	bl	8005864 <osSemaphoreRelease>
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	240003b4 	.word	0x240003b4

08004be0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004be0:	b5b0      	push	{r4, r5, r7, lr}
 8004be2:	b0a8      	sub	sp, #160	; 0xa0
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bfe:	2264      	movs	r2, #100	; 0x64
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f00d fd44 	bl	8012690 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004c08:	4b84      	ldr	r3, [pc, #528]	; (8004e1c <low_level_init+0x23c>)
 8004c0a:	4a85      	ldr	r2, [pc, #532]	; (8004e20 <low_level_init+0x240>)
 8004c0c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8004c1a:	23e1      	movs	r3, #225	; 0xe1
 8004c1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8004c20:	2300      	movs	r3, #0
 8004c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8004c26:	2300      	movs	r3, #0
 8004c28:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8004c32:	4a7a      	ldr	r2, [pc, #488]	; (8004e1c <low_level_init+0x23c>)
 8004c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c38:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004c3a:	4b78      	ldr	r3, [pc, #480]	; (8004e1c <low_level_init+0x23c>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004c40:	4b76      	ldr	r3, [pc, #472]	; (8004e1c <low_level_init+0x23c>)
 8004c42:	4a78      	ldr	r2, [pc, #480]	; (8004e24 <low_level_init+0x244>)
 8004c44:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004c46:	4b75      	ldr	r3, [pc, #468]	; (8004e1c <low_level_init+0x23c>)
 8004c48:	4a77      	ldr	r2, [pc, #476]	; (8004e28 <low_level_init+0x248>)
 8004c4a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004c4c:	4b73      	ldr	r3, [pc, #460]	; (8004e1c <low_level_init+0x23c>)
 8004c4e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004c52:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004c54:	4871      	ldr	r0, [pc, #452]	; (8004e1c <low_level_init+0x23c>)
 8004c56:	f7fc fb6b 	bl	8001330 <HAL_ETH_Init>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004c60:	2238      	movs	r2, #56	; 0x38
 8004c62:	2100      	movs	r1, #0
 8004c64:	4871      	ldr	r0, [pc, #452]	; (8004e2c <low_level_init+0x24c>)
 8004c66:	f00d fd13 	bl	8012690 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004c6a:	4b70      	ldr	r3, [pc, #448]	; (8004e2c <low_level_init+0x24c>)
 8004c6c:	2221      	movs	r2, #33	; 0x21
 8004c6e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004c70:	4b6e      	ldr	r3, [pc, #440]	; (8004e2c <low_level_init+0x24c>)
 8004c72:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004c76:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004c78:	4b6c      	ldr	r3, [pc, #432]	; (8004e2c <low_level_init+0x24c>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004c7e:	486c      	ldr	r0, [pc, #432]	; (8004e30 <low_level_init+0x250>)
 8004c80:	f006 fb2a 	bl	800b2d8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2206      	movs	r2, #6
 8004c88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004c8c:	4b63      	ldr	r3, [pc, #396]	; (8004e1c <low_level_init+0x23c>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	781a      	ldrb	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004c98:	4b60      	ldr	r3, [pc, #384]	; (8004e1c <low_level_init+0x23c>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	785a      	ldrb	r2, [r3, #1]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004ca4:	4b5d      	ldr	r3, [pc, #372]	; (8004e1c <low_level_init+0x23c>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	789a      	ldrb	r2, [r3, #2]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004cb0:	4b5a      	ldr	r3, [pc, #360]	; (8004e1c <low_level_init+0x23c>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	78da      	ldrb	r2, [r3, #3]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004cbc:	4b57      	ldr	r3, [pc, #348]	; (8004e1c <low_level_init+0x23c>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	791a      	ldrb	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004cc8:	4b54      	ldr	r3, [pc, #336]	; (8004e1c <low_level_init+0x23c>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	795a      	ldrb	r2, [r3, #5]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004cda:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ce2:	f043 030a 	orr.w	r3, r3, #10
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004cee:	2203      	movs	r2, #3
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	f001 fc98 	bl	8006628 <xQueueGenericCreate>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4a4e      	ldr	r2, [pc, #312]	; (8004e34 <low_level_init+0x254>)
 8004cfc:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004cfe:	2203      	movs	r2, #3
 8004d00:	2100      	movs	r1, #0
 8004d02:	2001      	movs	r0, #1
 8004d04:	f001 fc90 	bl	8006628 <xQueueGenericCreate>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	4a4b      	ldr	r2, [pc, #300]	; (8004e38 <low_level_init+0x258>)
 8004d0c:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004d0e:	4b4b      	ldr	r3, [pc, #300]	; (8004e3c <low_level_init+0x25c>)
 8004d10:	f107 0408 	add.w	r4, r7, #8
 8004d14:	461d      	mov	r5, r3
 8004d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004d22:	f107 0308 	add.w	r3, r7, #8
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fc51 	bl	80055d0 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004d2e:	4944      	ldr	r1, [pc, #272]	; (8004e40 <low_level_init+0x260>)
 8004d30:	4844      	ldr	r0, [pc, #272]	; (8004e44 <low_level_init+0x264>)
 8004d32:	f7fb ffb0 	bl	8000c96 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004d36:	4843      	ldr	r0, [pc, #268]	; (8004e44 <low_level_init+0x264>)
 8004d38:	f7fb ffdf 	bl	8000cfa <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004d3c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d164      	bne.n	8004e0e <low_level_init+0x22e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004d44:	483f      	ldr	r0, [pc, #252]	; (8004e44 <low_level_init+0x264>)
 8004d46:	f7fc f880 	bl	8000e4a <LAN8742_GetLinkState>
 8004d4a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004d4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	dc06      	bgt.n	8004d64 <low_level_init+0x184>
    {
      netif_set_link_down(netif);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f006 fe98 	bl	800ba8c <netif_set_link_down>
      netif_set_down(netif);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f006 fe2f 	bl	800b9c0 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004d62:	e056      	b.n	8004e12 <low_level_init+0x232>
      switch (PHYLinkState)
 8004d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d68:	3b02      	subs	r3, #2
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d82a      	bhi.n	8004dc4 <low_level_init+0x1e4>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <low_level_init+0x194>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d85 	.word	0x08004d85
 8004d78:	08004d97 	.word	0x08004d97
 8004d7c:	08004da7 	.word	0x08004da7
 8004d80:	08004db7 	.word	0x08004db7
        duplex = ETH_FULLDUPLEX_MODE;
 8004d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004d8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004d94:	e01f      	b.n	8004dd6 <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004d9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004da4:	e017      	b.n	8004dd6 <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 8004da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004dae:	2300      	movs	r3, #0
 8004db0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004db4:	e00f      	b.n	8004dd6 <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004dc2:	e008      	b.n	8004dd6 <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 8004dc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004dcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004dd4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dda:	4619      	mov	r1, r3
 8004ddc:	480f      	ldr	r0, [pc, #60]	; (8004e1c <low_level_init+0x23c>)
 8004dde:	f7fd f8b7 	bl	8001f50 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004de2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004de6:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dec:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004dee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004df2:	4619      	mov	r1, r3
 8004df4:	4809      	ldr	r0, [pc, #36]	; (8004e1c <low_level_init+0x23c>)
 8004df6:	f7fd fa7f 	bl	80022f8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004dfa:	4808      	ldr	r0, [pc, #32]	; (8004e1c <low_level_init+0x23c>)
 8004dfc:	f7fc fbe0 	bl	80015c0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f006 fd71 	bl	800b8e8 <netif_set_up>
    netif_set_link_up(netif);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f006 fe0c 	bl	800ba24 <netif_set_link_up>
}
 8004e0c:	e001      	b.n	8004e12 <low_level_init+0x232>
    Error_Handler();
 8004e0e:	f7fb fd95 	bl	800093c <Error_Handler>
}
 8004e12:	bf00      	nop
 8004e14:	37a0      	adds	r7, #160	; 0xa0
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bdb0      	pop	{r4, r5, r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	240003bc 	.word	0x240003bc
 8004e20:	40028000 	.word	0x40028000
 8004e24:	30040060 	.word	0x30040060
 8004e28:	30040000 	.word	0x30040000
 8004e2c:	2400046c 	.word	0x2400046c
 8004e30:	08016668 	.word	0x08016668
 8004e34:	240003b4 	.word	0x240003b4
 8004e38:	240003b8 	.word	0x240003b8
 8004e3c:	080137ac 	.word	0x080137ac
 8004e40:	24000010 	.word	0x24000010
 8004e44:	240004a4 	.word	0x240004a4

08004e48 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b092      	sub	sp, #72	; 0x48
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004e60:	f107 030c 	add.w	r3, r7, #12
 8004e64:	2230      	movs	r2, #48	; 0x30
 8004e66:	2100      	movs	r1, #0
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f00d fc11 	bl	8012690 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004e6e:	f107 030c 	add.w	r3, r7, #12
 8004e72:	2230      	movs	r2, #48	; 0x30
 8004e74:	2100      	movs	r1, #0
 8004e76:	4618      	mov	r0, r3
 8004e78:	f00d fc0a 	bl	8012690 <memset>

  for(q = p; q != NULL; q = q->next)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	643b      	str	r3, [r7, #64]	; 0x40
 8004e80:	e045      	b.n	8004f0e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d902      	bls.n	8004e8e <low_level_output+0x46>
      return ERR_IF;
 8004e88:	f06f 030b 	mvn.w	r3, #11
 8004e8c:	e065      	b.n	8004f5a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e90:	6859      	ldr	r1, [r3, #4]
 8004e92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e94:	4613      	mov	r3, r2
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	3348      	adds	r3, #72	; 0x48
 8004e9e:	443b      	add	r3, r7
 8004ea0:	3b3c      	subs	r3, #60	; 0x3c
 8004ea2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea6:	895b      	ldrh	r3, [r3, #10]
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eac:	4613      	mov	r3, r2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	3348      	adds	r3, #72	; 0x48
 8004eb6:	443b      	add	r3, r7
 8004eb8:	3b38      	subs	r3, #56	; 0x38
 8004eba:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d011      	beq.n	8004ee6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec4:	1e5a      	subs	r2, r3, #1
 8004ec6:	f107 000c 	add.w	r0, r7, #12
 8004eca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ecc:	460b      	mov	r3, r1
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	440b      	add	r3, r1
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	18c1      	adds	r1, r0, r3
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	3348      	adds	r3, #72	; 0x48
 8004ee0:	443b      	add	r3, r7
 8004ee2:	3b34      	subs	r3, #52	; 0x34
 8004ee4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d109      	bne.n	8004f02 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	3348      	adds	r3, #72	; 0x48
 8004efa:	443b      	add	r3, r7
 8004efc:	3b34      	subs	r3, #52	; 0x34
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f04:	3301      	adds	r3, #1
 8004f06:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1b6      	bne.n	8004e82 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	891b      	ldrh	r3, [r3, #8]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4b12      	ldr	r3, [pc, #72]	; (8004f64 <low_level_output+0x11c>)
 8004f1c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004f1e:	4a11      	ldr	r2, [pc, #68]	; (8004f64 <low_level_output+0x11c>)
 8004f20:	f107 030c 	add.w	r3, r7, #12
 8004f24:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004f26:	4a0f      	ldr	r2, [pc, #60]	; (8004f64 <low_level_output+0x11c>)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004f2c:	6838      	ldr	r0, [r7, #0]
 8004f2e:	f007 fa31 	bl	800c394 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004f32:	490c      	ldr	r1, [pc, #48]	; (8004f64 <low_level_output+0x11c>)
 8004f34:	480c      	ldr	r0, [pc, #48]	; (8004f68 <low_level_output+0x120>)
 8004f36:	f7fc fc47 	bl	80017c8 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004f3a:	bf00      	nop
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <low_level_output+0x124>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f04f 31ff 	mov.w	r1, #4294967295
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fc3f 	bl	80057c8 <osSemaphoreWait>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f5      	bne.n	8004f3c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004f50:	4805      	ldr	r0, [pc, #20]	; (8004f68 <low_level_output+0x120>)
 8004f52:	f7fc fdb8 	bl	8001ac6 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004f56:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3748      	adds	r7, #72	; 0x48
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	2400046c 	.word	0x2400046c
 8004f68:	240003bc 	.word	0x240003bc
 8004f6c:	240003b8 	.word	0x240003b8

08004f70 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004f7c:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <low_level_input+0x2c>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d105      	bne.n	8004f90 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004f84:	f107 030c 	add.w	r3, r7, #12
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4805      	ldr	r0, [pc, #20]	; (8004fa0 <low_level_input+0x30>)
 8004f8c:	f7fc fc6d 	bl	800186a <HAL_ETH_ReadData>
  }

  return p;
 8004f90:	68fb      	ldr	r3, [r7, #12]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	240003b0 	.word	0x240003b0
 8004fa0:	240003bc 	.word	0x240003bc

08004fa4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004fb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <ethernetif_input+0x50>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fc03 	bl	80057c8 <osSemaphoreWait>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1f5      	bne.n	8004fb4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004fc8:	68b8      	ldr	r0, [r7, #8]
 8004fca:	f7ff ffd1 	bl	8004f70 <low_level_input>
 8004fce:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	68b9      	ldr	r1, [r7, #8]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	4798      	blx	r3
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f007 f92e 	bl	800c248 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1ea      	bne.n	8004fc8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004ff2:	e7df      	b.n	8004fb4 <ethernetif_input+0x10>
 8004ff4:	240003b4 	.word	0x240003b4

08004ff8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <ethernetif_init+0x1c>
 8005006:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <ethernetif_init+0x48>)
 8005008:	f240 12f9 	movw	r2, #505	; 0x1f9
 800500c:	490d      	ldr	r1, [pc, #52]	; (8005044 <ethernetif_init+0x4c>)
 800500e:	480e      	ldr	r0, [pc, #56]	; (8005048 <ethernetif_init+0x50>)
 8005010:	f00d fb46 	bl	80126a0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2273      	movs	r2, #115	; 0x73
 8005018:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2274      	movs	r2, #116	; 0x74
 8005020:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a09      	ldr	r2, [pc, #36]	; (800504c <ethernetif_init+0x54>)
 8005028:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a08      	ldr	r2, [pc, #32]	; (8005050 <ethernetif_init+0x58>)
 800502e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff fdd5 	bl	8004be0 <low_level_init>

  return ERR_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	080137c8 	.word	0x080137c8
 8005044:	080137e4 	.word	0x080137e4
 8005048:	080137f4 	.word	0x080137f4
 800504c:	08008bf1 	.word	0x08008bf1
 8005050:	08004e49 	.word	0x08004e49

08005054 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005060:	68f9      	ldr	r1, [r7, #12]
 8005062:	4809      	ldr	r0, [pc, #36]	; (8005088 <pbuf_free_custom+0x34>)
 8005064:	f006 fa28 	bl	800b4b8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005068:	4b08      	ldr	r3, [pc, #32]	; (800508c <pbuf_free_custom+0x38>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d107      	bne.n	8005080 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005070:	4b06      	ldr	r3, [pc, #24]	; (800508c <pbuf_free_custom+0x38>)
 8005072:	2200      	movs	r2, #0
 8005074:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005076:	4b06      	ldr	r3, [pc, #24]	; (8005090 <pbuf_free_custom+0x3c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fbf2 	bl	8005864 <osSemaphoreRelease>
  }
}
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	08016668 	.word	0x08016668
 800508c:	240003b0 	.word	0x240003b0
 8005090:	240003b4 	.word	0x240003b4

08005094 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005098:	f7fb ffae 	bl	8000ff8 <HAL_GetTick>
 800509c:	4603      	mov	r3, r0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08e      	sub	sp, #56	; 0x38
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	605a      	str	r2, [r3, #4]
 80050b6:	609a      	str	r2, [r3, #8]
 80050b8:	60da      	str	r2, [r3, #12]
 80050ba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a5d      	ldr	r2, [pc, #372]	; (8005238 <HAL_ETH_MspInit+0x194>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	f040 80b3 	bne.w	800522e <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80050c8:	4b5c      	ldr	r3, [pc, #368]	; (800523c <HAL_ETH_MspInit+0x198>)
 80050ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80050ce:	4a5b      	ldr	r2, [pc, #364]	; (800523c <HAL_ETH_MspInit+0x198>)
 80050d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80050d8:	4b58      	ldr	r3, [pc, #352]	; (800523c <HAL_ETH_MspInit+0x198>)
 80050da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80050de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050e2:	623b      	str	r3, [r7, #32]
 80050e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80050e6:	4b55      	ldr	r3, [pc, #340]	; (800523c <HAL_ETH_MspInit+0x198>)
 80050e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80050ec:	4a53      	ldr	r2, [pc, #332]	; (800523c <HAL_ETH_MspInit+0x198>)
 80050ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80050f6:	4b51      	ldr	r3, [pc, #324]	; (800523c <HAL_ETH_MspInit+0x198>)
 80050f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80050fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005100:	61fb      	str	r3, [r7, #28]
 8005102:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8005104:	4b4d      	ldr	r3, [pc, #308]	; (800523c <HAL_ETH_MspInit+0x198>)
 8005106:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800510a:	4a4c      	ldr	r2, [pc, #304]	; (800523c <HAL_ETH_MspInit+0x198>)
 800510c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005110:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005114:	4b49      	ldr	r3, [pc, #292]	; (800523c <HAL_ETH_MspInit+0x198>)
 8005116:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800511a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005122:	4b46      	ldr	r3, [pc, #280]	; (800523c <HAL_ETH_MspInit+0x198>)
 8005124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005128:	4a44      	ldr	r2, [pc, #272]	; (800523c <HAL_ETH_MspInit+0x198>)
 800512a:	f043 0304 	orr.w	r3, r3, #4
 800512e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005132:	4b42      	ldr	r3, [pc, #264]	; (800523c <HAL_ETH_MspInit+0x198>)
 8005134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005140:	4b3e      	ldr	r3, [pc, #248]	; (800523c <HAL_ETH_MspInit+0x198>)
 8005142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005146:	4a3d      	ldr	r2, [pc, #244]	; (800523c <HAL_ETH_MspInit+0x198>)
 8005148:	f043 0301 	orr.w	r3, r3, #1
 800514c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005150:	4b3a      	ldr	r3, [pc, #232]	; (800523c <HAL_ETH_MspInit+0x198>)
 8005152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800515e:	4b37      	ldr	r3, [pc, #220]	; (800523c <HAL_ETH_MspInit+0x198>)
 8005160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005164:	4a35      	ldr	r2, [pc, #212]	; (800523c <HAL_ETH_MspInit+0x198>)
 8005166:	f043 0302 	orr.w	r3, r3, #2
 800516a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800516e:	4b33      	ldr	r3, [pc, #204]	; (800523c <HAL_ETH_MspInit+0x198>)
 8005170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800517c:	4b2f      	ldr	r3, [pc, #188]	; (800523c <HAL_ETH_MspInit+0x198>)
 800517e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005182:	4a2e      	ldr	r2, [pc, #184]	; (800523c <HAL_ETH_MspInit+0x198>)
 8005184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800518c:	4b2b      	ldr	r3, [pc, #172]	; (800523c <HAL_ETH_MspInit+0x198>)
 800518e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	60bb      	str	r3, [r7, #8]
 8005198:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800519a:	2332      	movs	r3, #50	; 0x32
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519e:	2302      	movs	r3, #2
 80051a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051a6:	2303      	movs	r3, #3
 80051a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80051aa:	230b      	movs	r3, #11
 80051ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051b2:	4619      	mov	r1, r3
 80051b4:	4822      	ldr	r0, [pc, #136]	; (8005240 <HAL_ETH_MspInit+0x19c>)
 80051b6:	f7fd fe93 	bl	8002ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80051ba:	2386      	movs	r3, #134	; 0x86
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051be:	2302      	movs	r3, #2
 80051c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051c6:	2303      	movs	r3, #3
 80051c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80051ca:	230b      	movs	r3, #11
 80051cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051d2:	4619      	mov	r1, r3
 80051d4:	481b      	ldr	r0, [pc, #108]	; (8005244 <HAL_ETH_MspInit+0x1a0>)
 80051d6:	f7fd fe83 	bl	8002ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80051da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e0:	2302      	movs	r3, #2
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051e8:	2303      	movs	r3, #3
 80051ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80051ec:	230b      	movs	r3, #11
 80051ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051f4:	4619      	mov	r1, r3
 80051f6:	4814      	ldr	r0, [pc, #80]	; (8005248 <HAL_ETH_MspInit+0x1a4>)
 80051f8:	f7fd fe72 	bl	8002ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80051fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005202:	2302      	movs	r3, #2
 8005204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005206:	2300      	movs	r3, #0
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800520a:	2303      	movs	r3, #3
 800520c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800520e:	230b      	movs	r3, #11
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005216:	4619      	mov	r1, r3
 8005218:	480c      	ldr	r0, [pc, #48]	; (800524c <HAL_ETH_MspInit+0x1a8>)
 800521a:	f7fd fe61 	bl	8002ee0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800521e:	2200      	movs	r2, #0
 8005220:	2105      	movs	r1, #5
 8005222:	203d      	movs	r0, #61	; 0x3d
 8005224:	f7fb ffcc 	bl	80011c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005228:	203d      	movs	r0, #61	; 0x3d
 800522a:	f7fb ffe3 	bl	80011f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800522e:	bf00      	nop
 8005230:	3738      	adds	r7, #56	; 0x38
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40028000 	.word	0x40028000
 800523c:	58024400 	.word	0x58024400
 8005240:	58020800 	.word	0x58020800
 8005244:	58020000 	.word	0x58020000
 8005248:	58020400 	.word	0x58020400
 800524c:	58021800 	.word	0x58021800

08005250 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005254:	4802      	ldr	r0, [pc, #8]	; (8005260 <ETH_PHY_IO_Init+0x10>)
 8005256:	f7fd f869 	bl	800232c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	bd80      	pop	{r7, pc}
 8005260:	240003bc 	.word	0x240003bc

08005264 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
  return 0;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	68f9      	ldr	r1, [r7, #12]
 8005286:	4807      	ldr	r0, [pc, #28]	; (80052a4 <ETH_PHY_IO_ReadReg+0x30>)
 8005288:	f7fc fdba 	bl	8001e00 <HAL_ETH_ReadPHYRegister>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005292:	f04f 33ff 	mov.w	r3, #4294967295
 8005296:	e000      	b.n	800529a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	240003bc 	.word	0x240003bc

080052a8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	68f9      	ldr	r1, [r7, #12]
 80052ba:	4807      	ldr	r0, [pc, #28]	; (80052d8 <ETH_PHY_IO_WriteReg+0x30>)
 80052bc:	f7fc fdf4 	bl	8001ea8 <HAL_ETH_WritePHYRegister>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80052c6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ca:	e000      	b.n	80052ce <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	240003bc 	.word	0x240003bc

080052dc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80052e0:	f7fb fe8a 	bl	8000ff8 <HAL_GetTick>
 80052e4:	4603      	mov	r3, r0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b0a0      	sub	sp, #128	; 0x80
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80052f4:	f107 0308 	add.w	r3, r7, #8
 80052f8:	2264      	movs	r2, #100	; 0x64
 80052fa:	2100      	movs	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f00d f9c7 	bl	8012690 <memset>
  int32_t PHYLinkState = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	67fb      	str	r3, [r7, #124]	; 0x7c
 800530a:	2300      	movs	r3, #0
 800530c:	67bb      	str	r3, [r7, #120]	; 0x78
 800530e:	2300      	movs	r3, #0
 8005310:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005316:	483a      	ldr	r0, [pc, #232]	; (8005400 <ethernet_link_thread+0x114>)
 8005318:	f7fb fd97 	bl	8000e4a <LAN8742_GetLinkState>
 800531c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800531e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005320:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005324:	089b      	lsrs	r3, r3, #2
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00c      	beq.n	800534a <ethernet_link_thread+0x5e>
 8005330:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005332:	2b01      	cmp	r3, #1
 8005334:	dc09      	bgt.n	800534a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005336:	4833      	ldr	r0, [pc, #204]	; (8005404 <ethernet_link_thread+0x118>)
 8005338:	f7fc f9ce 	bl	80016d8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800533c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800533e:	f006 fb3f 	bl	800b9c0 <netif_set_down>
    netif_set_link_down(netif);
 8005342:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005344:	f006 fba2 	bl	800ba8c <netif_set_link_down>
 8005348:	e055      	b.n	80053f6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800534a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d14e      	bne.n	80053f6 <ethernet_link_thread+0x10a>
 8005358:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800535a:	2b01      	cmp	r3, #1
 800535c:	dd4b      	ble.n	80053f6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800535e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005360:	3b02      	subs	r3, #2
 8005362:	2b03      	cmp	r3, #3
 8005364:	d82a      	bhi.n	80053bc <ethernet_link_thread+0xd0>
 8005366:	a201      	add	r2, pc, #4	; (adr r2, 800536c <ethernet_link_thread+0x80>)
 8005368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536c:	0800537d 	.word	0x0800537d
 8005370:	0800538f 	.word	0x0800538f
 8005374:	0800539f 	.word	0x0800539f
 8005378:	080053af 	.word	0x080053af
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800537c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005380:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005382:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005386:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005388:	2301      	movs	r3, #1
 800538a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800538c:	e017      	b.n	80053be <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800538e:	2300      	movs	r3, #0
 8005390:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005392:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005396:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005398:	2301      	movs	r3, #1
 800539a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800539c:	e00f      	b.n	80053be <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800539e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053a2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80053a4:	2300      	movs	r3, #0
 80053a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80053a8:	2301      	movs	r3, #1
 80053aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80053ac:	e007      	b.n	80053be <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80053ae:	2300      	movs	r3, #0
 80053b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80053b2:	2300      	movs	r3, #0
 80053b4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80053b6:	2301      	movs	r3, #1
 80053b8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80053ba:	e000      	b.n	80053be <ethernet_link_thread+0xd2>
    default:
      break;
 80053bc:	bf00      	nop
    }

    if(linkchanged)
 80053be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d018      	beq.n	80053f6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80053c4:	f107 0308 	add.w	r3, r7, #8
 80053c8:	4619      	mov	r1, r3
 80053ca:	480e      	ldr	r0, [pc, #56]	; (8005404 <ethernet_link_thread+0x118>)
 80053cc:	f7fc fdc0 	bl	8001f50 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80053d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053d2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80053d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053d6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80053d8:	f107 0308 	add.w	r3, r7, #8
 80053dc:	4619      	mov	r1, r3
 80053de:	4809      	ldr	r0, [pc, #36]	; (8005404 <ethernet_link_thread+0x118>)
 80053e0:	f7fc ff8a 	bl	80022f8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80053e4:	4807      	ldr	r0, [pc, #28]	; (8005404 <ethernet_link_thread+0x118>)
 80053e6:	f7fc f889 	bl	80014fc <HAL_ETH_Start>
      netif_set_up(netif);
 80053ea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80053ec:	f006 fa7c 	bl	800b8e8 <netif_set_up>
      netif_set_link_up(netif);
 80053f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80053f2:	f006 fb17 	bl	800ba24 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80053f6:	2064      	movs	r0, #100	; 0x64
 80053f8:	f000 f936 	bl	8005668 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80053fc:	e78b      	b.n	8005316 <ethernet_link_thread+0x2a>
 80053fe:	bf00      	nop
 8005400:	240004a4 	.word	0x240004a4
 8005404:	240003bc 	.word	0x240003bc

08005408 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af02      	add	r7, sp, #8
 800540e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005410:	4812      	ldr	r0, [pc, #72]	; (800545c <HAL_ETH_RxAllocateCallback+0x54>)
 8005412:	f005 ffdd 	bl	800b3d0 <memp_malloc_pool>
 8005416:	60f8      	str	r0, [r7, #12]
  if (p)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d014      	beq.n	8005448 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f103 0220 	add.w	r2, r3, #32
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4a0d      	ldr	r2, [pc, #52]	; (8005460 <HAL_ETH_RxAllocateCallback+0x58>)
 800542c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005436:	9201      	str	r2, [sp, #4]
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2241      	movs	r2, #65	; 0x41
 800543e:	2100      	movs	r1, #0
 8005440:	2000      	movs	r0, #0
 8005442:	f006 fd47 	bl	800bed4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005446:	e005      	b.n	8005454 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005448:	4b06      	ldr	r3, [pc, #24]	; (8005464 <HAL_ETH_RxAllocateCallback+0x5c>)
 800544a:	2201      	movs	r2, #1
 800544c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
}
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	08016668 	.word	0x08016668
 8005460:	08005055 	.word	0x08005055
 8005464:	240003b0 	.word	0x240003b0

08005468 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005468:	b480      	push	{r7}
 800546a:	b08d      	sub	sp, #52	; 0x34
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800547e:	2300      	movs	r3, #0
 8005480:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3b20      	subs	r3, #32
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005490:	2200      	movs	r2, #0
 8005492:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005496:	887a      	ldrh	r2, [r7, #2]
 8005498:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d103      	bne.n	80054aa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	e003      	b.n	80054b2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054be:	e009      	b.n	80054d4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80054c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c2:	891a      	ldrh	r2, [r3, #8]
 80054c4:	887b      	ldrh	r3, [r7, #2]
 80054c6:	4413      	add	r3, r2
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f2      	bne.n	80054c0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80054da:	887b      	ldrh	r3, [r7, #2]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	623a      	str	r2, [r7, #32]
 80054e0:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	dd1d      	ble.n	8005524 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	f003 021f 	and.w	r2, r3, #31
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	4413      	add	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80054f8:	f3bf 8f4f 	dsb	sy
}
 80054fc:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80054fe:	4a0d      	ldr	r2, [pc, #52]	; (8005534 <HAL_ETH_RxLinkCallback+0xcc>)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	3320      	adds	r3, #32
 800550a:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	3b20      	subs	r3, #32
 8005510:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b00      	cmp	r3, #0
 8005516:	dcf2      	bgt.n	80054fe <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8005518:	f3bf 8f4f 	dsb	sy
}
 800551c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800551e:	f3bf 8f6f 	isb	sy
}
 8005522:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005524:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005526:	bf00      	nop
 8005528:	3734      	adds	r7, #52	; 0x34
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	e000ed00 	.word	0xe000ed00

08005538 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f006 fe81 	bl	800c248 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005546:	bf00      	nop
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800554e:	b480      	push	{r7}
 8005550:	b085      	sub	sp, #20
 8005552:	af00      	add	r7, sp, #0
 8005554:	4603      	mov	r3, r0
 8005556:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800555c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005560:	2b84      	cmp	r3, #132	; 0x84
 8005562:	d005      	beq.n	8005570 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005564:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	3303      	adds	r3, #3
 800556e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005570:	68fb      	ldr	r3, [r7, #12]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005584:	f3ef 8305 	mrs	r3, IPSR
 8005588:	607b      	str	r3, [r7, #4]
  return(result);
 800558a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800558c:	2b00      	cmp	r3, #0
 800558e:	bf14      	ite	ne
 8005590:	2301      	movne	r3, #1
 8005592:	2300      	moveq	r3, #0
 8005594:	b2db      	uxtb	r3, r3
}
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80055a6:	f002 f867 	bl	8007678 <vTaskStartScheduler>
  
  return osOK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80055b4:	f7ff ffe3 	bl	800557e <inHandlerMode>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80055be:	f002 f975 	bl	80078ac <xTaskGetTickCountFromISR>
 80055c2:	4603      	mov	r3, r0
 80055c4:	e002      	b.n	80055cc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80055c6:	f002 f961 	bl	800788c <xTaskGetTickCount>
 80055ca:	4603      	mov	r3, r0
  }
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80055d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d2:	b089      	sub	sp, #36	; 0x24
 80055d4:	af04      	add	r7, sp, #16
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d020      	beq.n	8005624 <osThreadCreate+0x54>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01c      	beq.n	8005624 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685c      	ldr	r4, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681d      	ldr	r5, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691e      	ldr	r6, [r3, #16]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff ffa6 	bl	800554e <makeFreeRtosPriority>
 8005602:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800560c:	9202      	str	r2, [sp, #8]
 800560e:	9301      	str	r3, [sp, #4]
 8005610:	9100      	str	r1, [sp, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	4632      	mov	r2, r6
 8005616:	4629      	mov	r1, r5
 8005618:	4620      	mov	r0, r4
 800561a:	f001 fe65 	bl	80072e8 <xTaskCreateStatic>
 800561e:	4603      	mov	r3, r0
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e01c      	b.n	800565e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685c      	ldr	r4, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005630:	b29e      	uxth	r6, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff ff88 	bl	800554e <makeFreeRtosPriority>
 800563e:	4602      	mov	r2, r0
 8005640:	f107 030c 	add.w	r3, r7, #12
 8005644:	9301      	str	r3, [sp, #4]
 8005646:	9200      	str	r2, [sp, #0]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	4632      	mov	r2, r6
 800564c:	4629      	mov	r1, r5
 800564e:	4620      	mov	r0, r4
 8005650:	f001 fea7 	bl	80073a2 <xTaskCreate>
 8005654:	4603      	mov	r3, r0
 8005656:	2b01      	cmp	r3, #1
 8005658:	d001      	beq.n	800565e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	e000      	b.n	8005660 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800565e:	68fb      	ldr	r3, [r7, #12]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005668 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <osDelay+0x16>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	e000      	b.n	8005680 <osDelay+0x18>
 800567e:	2301      	movs	r3, #1
 8005680:	4618      	mov	r0, r3
 8005682:	f001 ffc5 	bl	8007610 <vTaskDelay>
  
  return osOK;
 8005686:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d007      	beq.n	80056b0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4619      	mov	r1, r3
 80056a6:	2001      	movs	r0, #1
 80056a8:	f001 f849 	bl	800673e <xQueueCreateMutexStatic>
 80056ac:	4603      	mov	r3, r0
 80056ae:	e003      	b.n	80056b8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80056b0:	2001      	movs	r0, #1
 80056b2:	f001 f82c 	bl	800670e <xQueueCreateMutex>
 80056b6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80056ca:	2300      	movs	r3, #0
 80056cc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <osMutexWait+0x18>
    return osErrorParameter;
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	e03a      	b.n	800574e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e2:	d103      	bne.n	80056ec <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80056e4:	f04f 33ff 	mov.w	r3, #4294967295
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	e009      	b.n	8005700 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d006      	beq.n	8005700 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <osMutexWait+0x40>
      ticks = 1;
 80056fc:	2301      	movs	r3, #1
 80056fe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005700:	f7ff ff3d 	bl	800557e <inHandlerMode>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d017      	beq.n	800573a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800570a:	f107 0308 	add.w	r3, r7, #8
 800570e:	461a      	mov	r2, r3
 8005710:	2100      	movs	r1, #0
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f001 fc40 	bl	8006f98 <xQueueReceiveFromISR>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d001      	beq.n	8005722 <osMutexWait+0x62>
      return osErrorOS;
 800571e:	23ff      	movs	r3, #255	; 0xff
 8005720:	e015      	b.n	800574e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d011      	beq.n	800574c <osMutexWait+0x8c>
 8005728:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <osMutexWait+0x98>)
 800572a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	e008      	b.n	800574c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800573a:	68f9      	ldr	r1, [r7, #12]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 fb1f 	bl	8006d80 <xQueueSemaphoreTake>
 8005742:	4603      	mov	r3, r0
 8005744:	2b01      	cmp	r3, #1
 8005746:	d001      	beq.n	800574c <osMutexWait+0x8c>
    return osErrorOS;
 8005748:	23ff      	movs	r3, #255	; 0xff
 800574a:	e000      	b.n	800574e <osMutexWait+0x8e>
  }
  
  return osOK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005768:	2300      	movs	r3, #0
 800576a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800576c:	f7ff ff07 	bl	800557e <inHandlerMode>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d016      	beq.n	80057a4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005776:	f107 0308 	add.w	r3, r7, #8
 800577a:	4619      	mov	r1, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f001 f992 	bl	8006aa6 <xQueueGiveFromISR>
 8005782:	4603      	mov	r3, r0
 8005784:	2b01      	cmp	r3, #1
 8005786:	d001      	beq.n	800578c <osMutexRelease+0x30>
      return osErrorOS;
 8005788:	23ff      	movs	r3, #255	; 0xff
 800578a:	e017      	b.n	80057bc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d013      	beq.n	80057ba <osMutexRelease+0x5e>
 8005792:	4b0c      	ldr	r3, [pc, #48]	; (80057c4 <osMutexRelease+0x68>)
 8005794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	e00a      	b.n	80057ba <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80057a4:	2300      	movs	r3, #0
 80057a6:	2200      	movs	r2, #0
 80057a8:	2100      	movs	r1, #0
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 ffe2 	bl	8006774 <xQueueGenericSend>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d001      	beq.n	80057ba <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80057b6:	23ff      	movs	r3, #255	; 0xff
 80057b8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80057ba:	68fb      	ldr	r3, [r7, #12]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	e000ed04 	.word	0xe000ed04

080057c8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80057d2:	2300      	movs	r3, #0
 80057d4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80057dc:	2380      	movs	r3, #128	; 0x80
 80057de:	e03a      	b.n	8005856 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d103      	bne.n	80057f4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80057ec:	f04f 33ff 	mov.w	r3, #4294967295
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	e009      	b.n	8005808 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d006      	beq.n	8005808 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <osSemaphoreWait+0x40>
      ticks = 1;
 8005804:	2301      	movs	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005808:	f7ff feb9 	bl	800557e <inHandlerMode>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d017      	beq.n	8005842 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005812:	f107 0308 	add.w	r3, r7, #8
 8005816:	461a      	mov	r2, r3
 8005818:	2100      	movs	r1, #0
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f001 fbbc 	bl	8006f98 <xQueueReceiveFromISR>
 8005820:	4603      	mov	r3, r0
 8005822:	2b01      	cmp	r3, #1
 8005824:	d001      	beq.n	800582a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005826:	23ff      	movs	r3, #255	; 0xff
 8005828:	e015      	b.n	8005856 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d011      	beq.n	8005854 <osSemaphoreWait+0x8c>
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <osSemaphoreWait+0x98>)
 8005832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	e008      	b.n	8005854 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005842:	68f9      	ldr	r1, [r7, #12]
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 fa9b 	bl	8006d80 <xQueueSemaphoreTake>
 800584a:	4603      	mov	r3, r0
 800584c:	2b01      	cmp	r3, #1
 800584e:	d001      	beq.n	8005854 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005850:	23ff      	movs	r3, #255	; 0xff
 8005852:	e000      	b.n	8005856 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	e000ed04 	.word	0xe000ed04

08005864 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005870:	2300      	movs	r3, #0
 8005872:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005874:	f7ff fe83 	bl	800557e <inHandlerMode>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d016      	beq.n	80058ac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800587e:	f107 0308 	add.w	r3, r7, #8
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 f90e 	bl	8006aa6 <xQueueGiveFromISR>
 800588a:	4603      	mov	r3, r0
 800588c:	2b01      	cmp	r3, #1
 800588e:	d001      	beq.n	8005894 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005890:	23ff      	movs	r3, #255	; 0xff
 8005892:	e017      	b.n	80058c4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d013      	beq.n	80058c2 <osSemaphoreRelease+0x5e>
 800589a:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <osSemaphoreRelease+0x68>)
 800589c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	e00a      	b.n	80058c2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80058ac:	2300      	movs	r3, #0
 80058ae:	2200      	movs	r2, #0
 80058b0:	2100      	movs	r1, #0
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 ff5e 	bl	8006774 <xQueueGenericSend>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d001      	beq.n	80058c2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80058be:	23ff      	movs	r3, #255	; 0xff
 80058c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80058c2:	68fb      	ldr	r3, [r7, #12]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	e000ed04 	.word	0xe000ed04

080058d0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80058d0:	b590      	push	{r4, r7, lr}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d011      	beq.n	8005906 <osMessageCreate+0x36>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00d      	beq.n	8005906 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6859      	ldr	r1, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	2400      	movs	r4, #0
 80058fc:	9400      	str	r4, [sp, #0]
 80058fe:	f000 fe1b 	bl	8006538 <xQueueGenericCreateStatic>
 8005902:	4603      	mov	r3, r0
 8005904:	e008      	b.n	8005918 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	4619      	mov	r1, r3
 8005912:	f000 fe89 	bl	8006628 <xQueueGenericCreate>
 8005916:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	bd90      	pop	{r4, r7, pc}

08005920 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800592c:	2300      	movs	r3, #0
 800592e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <osMessagePut+0x1e>
    ticks = 1;
 800593a:	2301      	movs	r3, #1
 800593c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800593e:	f7ff fe1e 	bl	800557e <inHandlerMode>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d018      	beq.n	800597a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005948:	f107 0210 	add.w	r2, r7, #16
 800594c:	f107 0108 	add.w	r1, r7, #8
 8005950:	2300      	movs	r3, #0
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f001 f80c 	bl	8006970 <xQueueGenericSendFromISR>
 8005958:	4603      	mov	r3, r0
 800595a:	2b01      	cmp	r3, #1
 800595c:	d001      	beq.n	8005962 <osMessagePut+0x42>
      return osErrorOS;
 800595e:	23ff      	movs	r3, #255	; 0xff
 8005960:	e018      	b.n	8005994 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d014      	beq.n	8005992 <osMessagePut+0x72>
 8005968:	4b0c      	ldr	r3, [pc, #48]	; (800599c <osMessagePut+0x7c>)
 800596a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	e00b      	b.n	8005992 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800597a:	f107 0108 	add.w	r1, r7, #8
 800597e:	2300      	movs	r3, #0
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fef6 	bl	8006774 <xQueueGenericSend>
 8005988:	4603      	mov	r3, r0
 800598a:	2b01      	cmp	r3, #1
 800598c:	d001      	beq.n	8005992 <osMessagePut+0x72>
      return osErrorOS;
 800598e:	23ff      	movs	r3, #255	; 0xff
 8005990:	e000      	b.n	8005994 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	e000ed04 	.word	0xe000ed04

080059a0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80059a0:	b590      	push	{r4, r7, lr}
 80059a2:	b08b      	sub	sp, #44	; 0x2c
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80059ba:	2380      	movs	r3, #128	; 0x80
 80059bc:	617b      	str	r3, [r7, #20]
    return event;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	461c      	mov	r4, r3
 80059c2:	f107 0314 	add.w	r3, r7, #20
 80059c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80059ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80059ce:	e054      	b.n	8005a7a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80059d0:	2300      	movs	r3, #0
 80059d2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059de:	d103      	bne.n	80059e8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80059e0:	f04f 33ff 	mov.w	r3, #4294967295
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
 80059e6:	e009      	b.n	80059fc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d006      	beq.n	80059fc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <osMessageGet+0x5c>
      ticks = 1;
 80059f8:	2301      	movs	r3, #1
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80059fc:	f7ff fdbf 	bl	800557e <inHandlerMode>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01c      	beq.n	8005a40 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005a06:	f107 0220 	add.w	r2, r7, #32
 8005a0a:	f107 0314 	add.w	r3, r7, #20
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4619      	mov	r1, r3
 8005a12:	68b8      	ldr	r0, [r7, #8]
 8005a14:	f001 fac0 	bl	8006f98 <xQueueReceiveFromISR>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d102      	bne.n	8005a24 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005a1e:	2310      	movs	r3, #16
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e001      	b.n	8005a28 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01d      	beq.n	8005a6a <osMessageGet+0xca>
 8005a2e:	4b15      	ldr	r3, [pc, #84]	; (8005a84 <osMessageGet+0xe4>)
 8005a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	e014      	b.n	8005a6a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005a40:	f107 0314 	add.w	r3, r7, #20
 8005a44:	3304      	adds	r3, #4
 8005a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a48:	4619      	mov	r1, r3
 8005a4a:	68b8      	ldr	r0, [r7, #8]
 8005a4c:	f001 f8b8 	bl	8006bc0 <xQueueReceive>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d102      	bne.n	8005a5c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005a56:	2310      	movs	r3, #16
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	e006      	b.n	8005a6a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <osMessageGet+0xc6>
 8005a62:	2300      	movs	r3, #0
 8005a64:	e000      	b.n	8005a68 <osMessageGet+0xc8>
 8005a66:	2340      	movs	r3, #64	; 0x40
 8005a68:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	461c      	mov	r4, r3
 8005a6e:	f107 0314 	add.w	r3, r7, #20
 8005a72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	372c      	adds	r7, #44	; 0x2c
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd90      	pop	{r4, r7, pc}
 8005a82:	bf00      	nop
 8005a84:	e000ed04 	.word	0xe000ed04

08005a88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	; 0x28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a94:	f001 fe50 	bl	8007738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a98:	4b5b      	ldr	r3, [pc, #364]	; (8005c08 <pvPortMalloc+0x180>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005aa0:	f000 f920 	bl	8005ce4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005aa4:	4b59      	ldr	r3, [pc, #356]	; (8005c0c <pvPortMalloc+0x184>)
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f040 8093 	bne.w	8005bd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01d      	beq.n	8005af4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ab8:	2208      	movs	r2, #8
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4413      	add	r3, r2
 8005abe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f003 0307 	and.w	r3, r3, #7
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d014      	beq.n	8005af4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f023 0307 	bic.w	r3, r3, #7
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d06e      	beq.n	8005bd8 <pvPortMalloc+0x150>
 8005afa:	4b45      	ldr	r3, [pc, #276]	; (8005c10 <pvPortMalloc+0x188>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d869      	bhi.n	8005bd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b04:	4b43      	ldr	r3, [pc, #268]	; (8005c14 <pvPortMalloc+0x18c>)
 8005b06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b08:	4b42      	ldr	r3, [pc, #264]	; (8005c14 <pvPortMalloc+0x18c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b0e:	e004      	b.n	8005b1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d903      	bls.n	8005b2c <pvPortMalloc+0xa4>
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1f1      	bne.n	8005b10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b2c:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <pvPortMalloc+0x180>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d050      	beq.n	8005bd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2208      	movs	r2, #8
 8005b3c:	4413      	add	r3, r2
 8005b3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	1ad2      	subs	r2, r2, r3
 8005b50:	2308      	movs	r3, #8
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d91f      	bls.n	8005b98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <pvPortMalloc+0xf8>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	613b      	str	r3, [r7, #16]
}
 8005b7c:	bf00      	nop
 8005b7e:	e7fe      	b.n	8005b7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	1ad2      	subs	r2, r2, r3
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b92:	69b8      	ldr	r0, [r7, #24]
 8005b94:	f000 f908 	bl	8005da8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b98:	4b1d      	ldr	r3, [pc, #116]	; (8005c10 <pvPortMalloc+0x188>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	4a1b      	ldr	r2, [pc, #108]	; (8005c10 <pvPortMalloc+0x188>)
 8005ba4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ba6:	4b1a      	ldr	r3, [pc, #104]	; (8005c10 <pvPortMalloc+0x188>)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <pvPortMalloc+0x190>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d203      	bcs.n	8005bba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bb2:	4b17      	ldr	r3, [pc, #92]	; (8005c10 <pvPortMalloc+0x188>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a18      	ldr	r2, [pc, #96]	; (8005c18 <pvPortMalloc+0x190>)
 8005bb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	4b13      	ldr	r3, [pc, #76]	; (8005c0c <pvPortMalloc+0x184>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005bce:	4b13      	ldr	r3, [pc, #76]	; (8005c1c <pvPortMalloc+0x194>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	4a11      	ldr	r2, [pc, #68]	; (8005c1c <pvPortMalloc+0x194>)
 8005bd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bd8:	f001 fdbc 	bl	8007754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <pvPortMalloc+0x174>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	60fb      	str	r3, [r7, #12]
}
 8005bf8:	bf00      	nop
 8005bfa:	e7fe      	b.n	8005bfa <pvPortMalloc+0x172>
	return pvReturn;
 8005bfc:	69fb      	ldr	r3, [r7, #28]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3728      	adds	r7, #40	; 0x28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	240040cc 	.word	0x240040cc
 8005c0c:	240040e0 	.word	0x240040e0
 8005c10:	240040d0 	.word	0x240040d0
 8005c14:	240040c4 	.word	0x240040c4
 8005c18:	240040d4 	.word	0x240040d4
 8005c1c:	240040d8 	.word	0x240040d8

08005c20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d04d      	beq.n	8005cce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c32:	2308      	movs	r3, #8
 8005c34:	425b      	negs	r3, r3
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4413      	add	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	4b24      	ldr	r3, [pc, #144]	; (8005cd8 <vPortFree+0xb8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10a      	bne.n	8005c64 <vPortFree+0x44>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	60fb      	str	r3, [r7, #12]
}
 8005c60:	bf00      	nop
 8005c62:	e7fe      	b.n	8005c62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <vPortFree+0x62>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	60bb      	str	r3, [r7, #8]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	4b14      	ldr	r3, [pc, #80]	; (8005cd8 <vPortFree+0xb8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01e      	beq.n	8005cce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d11a      	bne.n	8005cce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	4b0e      	ldr	r3, [pc, #56]	; (8005cd8 <vPortFree+0xb8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	401a      	ands	r2, r3
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ca8:	f001 fd46 	bl	8007738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	4b0a      	ldr	r3, [pc, #40]	; (8005cdc <vPortFree+0xbc>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	4a09      	ldr	r2, [pc, #36]	; (8005cdc <vPortFree+0xbc>)
 8005cb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cba:	6938      	ldr	r0, [r7, #16]
 8005cbc:	f000 f874 	bl	8005da8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005cc0:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <vPortFree+0xc0>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	4a06      	ldr	r2, [pc, #24]	; (8005ce0 <vPortFree+0xc0>)
 8005cc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005cca:	f001 fd43 	bl	8007754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005cce:	bf00      	nop
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	240040e0 	.word	0x240040e0
 8005cdc:	240040d0 	.word	0x240040d0
 8005ce0:	240040dc 	.word	0x240040dc

08005ce4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005cee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cf0:	4b27      	ldr	r3, [pc, #156]	; (8005d90 <prvHeapInit+0xac>)
 8005cf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00c      	beq.n	8005d18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3307      	adds	r3, #7
 8005d02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0307 	bic.w	r3, r3, #7
 8005d0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	4a1f      	ldr	r2, [pc, #124]	; (8005d90 <prvHeapInit+0xac>)
 8005d14:	4413      	add	r3, r2
 8005d16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d1c:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <prvHeapInit+0xb0>)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d22:	4b1c      	ldr	r3, [pc, #112]	; (8005d94 <prvHeapInit+0xb0>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d30:	2208      	movs	r2, #8
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1a9b      	subs	r3, r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0307 	bic.w	r3, r3, #7
 8005d3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4a15      	ldr	r2, [pc, #84]	; (8005d98 <prvHeapInit+0xb4>)
 8005d44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d46:	4b14      	ldr	r3, [pc, #80]	; (8005d98 <prvHeapInit+0xb4>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d4e:	4b12      	ldr	r3, [pc, #72]	; (8005d98 <prvHeapInit+0xb4>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	1ad2      	subs	r2, r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d64:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <prvHeapInit+0xb4>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	4a0a      	ldr	r2, [pc, #40]	; (8005d9c <prvHeapInit+0xb8>)
 8005d72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	4a09      	ldr	r2, [pc, #36]	; (8005da0 <prvHeapInit+0xbc>)
 8005d7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d7c:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <prvHeapInit+0xc0>)
 8005d7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d82:	601a      	str	r2, [r3, #0]
}
 8005d84:	bf00      	nop
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	240004c4 	.word	0x240004c4
 8005d94:	240040c4 	.word	0x240040c4
 8005d98:	240040cc 	.word	0x240040cc
 8005d9c:	240040d4 	.word	0x240040d4
 8005da0:	240040d0 	.word	0x240040d0
 8005da4:	240040e0 	.word	0x240040e0

08005da8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005db0:	4b28      	ldr	r3, [pc, #160]	; (8005e54 <prvInsertBlockIntoFreeList+0xac>)
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e002      	b.n	8005dbc <prvInsertBlockIntoFreeList+0x14>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d8f7      	bhi.n	8005db6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d108      	bne.n	8005dea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	441a      	add	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	441a      	add	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d118      	bne.n	8005e30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <prvInsertBlockIntoFreeList+0xb0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d00d      	beq.n	8005e26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	441a      	add	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	e008      	b.n	8005e38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e26:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <prvInsertBlockIntoFreeList+0xb0>)
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	e003      	b.n	8005e38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d002      	beq.n	8005e46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e46:	bf00      	nop
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	240040c4 	.word	0x240040c4
 8005e58:	240040cc 	.word	0x240040cc

08005e5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f103 0208 	add.w	r2, r3, #8
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f04f 32ff 	mov.w	r2, #4294967295
 8005e74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f103 0208 	add.w	r2, r3, #8
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f103 0208 	add.w	r2, r3, #8
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	601a      	str	r2, [r3, #0]
}
 8005ef2:	bf00      	nop
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005efe:	b480      	push	{r7}
 8005f00:	b085      	sub	sp, #20
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f14:	d103      	bne.n	8005f1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	e00c      	b.n	8005f38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3308      	adds	r3, #8
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	e002      	b.n	8005f2c <vListInsert+0x2e>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d2f6      	bcs.n	8005f26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	601a      	str	r2, [r3, #0]
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6892      	ldr	r2, [r2, #8]
 8005f86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6852      	ldr	r2, [r2, #4]
 8005f90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d103      	bne.n	8005fa4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	1e5a      	subs	r2, r3, #1
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3b04      	subs	r3, #4
 8005fd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	3b04      	subs	r3, #4
 8005fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f023 0201 	bic.w	r2, r3, #1
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3b04      	subs	r3, #4
 8005ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ff4:	4a0c      	ldr	r2, [pc, #48]	; (8006028 <pxPortInitialiseStack+0x64>)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3b14      	subs	r3, #20
 8005ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3b04      	subs	r3, #4
 800600a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f06f 0202 	mvn.w	r2, #2
 8006012:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3b20      	subs	r3, #32
 8006018:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800601a:	68fb      	ldr	r3, [r7, #12]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	0800602d 	.word	0x0800602d

0800602c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006036:	4b12      	ldr	r3, [pc, #72]	; (8006080 <prvTaskExitError+0x54>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603e:	d00a      	beq.n	8006056 <prvTaskExitError+0x2a>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	60fb      	str	r3, [r7, #12]
}
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <prvTaskExitError+0x28>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	60bb      	str	r3, [r7, #8]
}
 8006068:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800606a:	bf00      	nop
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0fc      	beq.n	800606c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006072:	bf00      	nop
 8006074:	bf00      	nop
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	24000024 	.word	0x24000024
	...

08006090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <pxCurrentTCBConst2>)
 8006092:	6819      	ldr	r1, [r3, #0]
 8006094:	6808      	ldr	r0, [r1, #0]
 8006096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609a:	f380 8809 	msr	PSP, r0
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f04f 0000 	mov.w	r0, #0
 80060a6:	f380 8811 	msr	BASEPRI, r0
 80060aa:	4770      	bx	lr
 80060ac:	f3af 8000 	nop.w

080060b0 <pxCurrentTCBConst2>:
 80060b0:	240040ec 	.word	0x240040ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop

080060b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80060b8:	4808      	ldr	r0, [pc, #32]	; (80060dc <prvPortStartFirstTask+0x24>)
 80060ba:	6800      	ldr	r0, [r0, #0]
 80060bc:	6800      	ldr	r0, [r0, #0]
 80060be:	f380 8808 	msr	MSP, r0
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	f380 8814 	msr	CONTROL, r0
 80060ca:	b662      	cpsie	i
 80060cc:	b661      	cpsie	f
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	df00      	svc	0
 80060d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060da:	bf00      	nop
 80060dc:	e000ed08 	.word	0xe000ed08

080060e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060e6:	4b46      	ldr	r3, [pc, #280]	; (8006200 <xPortStartScheduler+0x120>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a46      	ldr	r2, [pc, #280]	; (8006204 <xPortStartScheduler+0x124>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d10a      	bne.n	8006106 <xPortStartScheduler+0x26>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	613b      	str	r3, [r7, #16]
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006106:	4b3e      	ldr	r3, [pc, #248]	; (8006200 <xPortStartScheduler+0x120>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a3f      	ldr	r2, [pc, #252]	; (8006208 <xPortStartScheduler+0x128>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d10a      	bne.n	8006126 <xPortStartScheduler+0x46>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	60fb      	str	r3, [r7, #12]
}
 8006122:	bf00      	nop
 8006124:	e7fe      	b.n	8006124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006126:	4b39      	ldr	r3, [pc, #228]	; (800620c <xPortStartScheduler+0x12c>)
 8006128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	22ff      	movs	r2, #255	; 0xff
 8006136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006148:	b2da      	uxtb	r2, r3
 800614a:	4b31      	ldr	r3, [pc, #196]	; (8006210 <xPortStartScheduler+0x130>)
 800614c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800614e:	4b31      	ldr	r3, [pc, #196]	; (8006214 <xPortStartScheduler+0x134>)
 8006150:	2207      	movs	r2, #7
 8006152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006154:	e009      	b.n	800616a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006156:	4b2f      	ldr	r3, [pc, #188]	; (8006214 <xPortStartScheduler+0x134>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3b01      	subs	r3, #1
 800615c:	4a2d      	ldr	r2, [pc, #180]	; (8006214 <xPortStartScheduler+0x134>)
 800615e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	b2db      	uxtb	r3, r3
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	b2db      	uxtb	r3, r3
 8006168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006172:	2b80      	cmp	r3, #128	; 0x80
 8006174:	d0ef      	beq.n	8006156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006176:	4b27      	ldr	r3, [pc, #156]	; (8006214 <xPortStartScheduler+0x134>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f1c3 0307 	rsb	r3, r3, #7
 800617e:	2b04      	cmp	r3, #4
 8006180:	d00a      	beq.n	8006198 <xPortStartScheduler+0xb8>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	60bb      	str	r3, [r7, #8]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006198:	4b1e      	ldr	r3, [pc, #120]	; (8006214 <xPortStartScheduler+0x134>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	4a1d      	ldr	r2, [pc, #116]	; (8006214 <xPortStartScheduler+0x134>)
 80061a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061a2:	4b1c      	ldr	r3, [pc, #112]	; (8006214 <xPortStartScheduler+0x134>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061aa:	4a1a      	ldr	r2, [pc, #104]	; (8006214 <xPortStartScheduler+0x134>)
 80061ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80061b6:	4b18      	ldr	r3, [pc, #96]	; (8006218 <xPortStartScheduler+0x138>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a17      	ldr	r2, [pc, #92]	; (8006218 <xPortStartScheduler+0x138>)
 80061bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80061c2:	4b15      	ldr	r3, [pc, #84]	; (8006218 <xPortStartScheduler+0x138>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a14      	ldr	r2, [pc, #80]	; (8006218 <xPortStartScheduler+0x138>)
 80061c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80061cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80061ce:	f000 f8dd 	bl	800638c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061d2:	4b12      	ldr	r3, [pc, #72]	; (800621c <xPortStartScheduler+0x13c>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061d8:	f000 f8fc 	bl	80063d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061dc:	4b10      	ldr	r3, [pc, #64]	; (8006220 <xPortStartScheduler+0x140>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a0f      	ldr	r2, [pc, #60]	; (8006220 <xPortStartScheduler+0x140>)
 80061e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061e8:	f7ff ff66 	bl	80060b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061ec:	f001 fc28 	bl	8007a40 <vTaskSwitchContext>
	prvTaskExitError();
 80061f0:	f7ff ff1c 	bl	800602c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	e000ed00 	.word	0xe000ed00
 8006204:	410fc271 	.word	0x410fc271
 8006208:	410fc270 	.word	0x410fc270
 800620c:	e000e400 	.word	0xe000e400
 8006210:	240040e4 	.word	0x240040e4
 8006214:	240040e8 	.word	0x240040e8
 8006218:	e000ed20 	.word	0xe000ed20
 800621c:	24000024 	.word	0x24000024
 8006220:	e000ef34 	.word	0xe000ef34

08006224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	607b      	str	r3, [r7, #4]
}
 800623c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800623e:	4b0f      	ldr	r3, [pc, #60]	; (800627c <vPortEnterCritical+0x58>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3301      	adds	r3, #1
 8006244:	4a0d      	ldr	r2, [pc, #52]	; (800627c <vPortEnterCritical+0x58>)
 8006246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006248:	4b0c      	ldr	r3, [pc, #48]	; (800627c <vPortEnterCritical+0x58>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d10f      	bne.n	8006270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <vPortEnterCritical+0x5c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <vPortEnterCritical+0x4c>
	__asm volatile
 800625a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	603b      	str	r3, [r7, #0]
}
 800626c:	bf00      	nop
 800626e:	e7fe      	b.n	800626e <vPortEnterCritical+0x4a>
	}
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	24000024 	.word	0x24000024
 8006280:	e000ed04 	.word	0xe000ed04

08006284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800628a:	4b12      	ldr	r3, [pc, #72]	; (80062d4 <vPortExitCritical+0x50>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <vPortExitCritical+0x24>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	607b      	str	r3, [r7, #4]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062a8:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <vPortExitCritical+0x50>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	4a09      	ldr	r2, [pc, #36]	; (80062d4 <vPortExitCritical+0x50>)
 80062b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062b2:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <vPortExitCritical+0x50>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d105      	bne.n	80062c6 <vPortExitCritical+0x42>
 80062ba:	2300      	movs	r3, #0
 80062bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	24000024 	.word	0x24000024
	...

080062e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062e0:	f3ef 8009 	mrs	r0, PSP
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	4b15      	ldr	r3, [pc, #84]	; (8006340 <pxCurrentTCBConst>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	f01e 0f10 	tst.w	lr, #16
 80062f0:	bf08      	it	eq
 80062f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fa:	6010      	str	r0, [r2, #0]
 80062fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006304:	f380 8811 	msr	BASEPRI, r0
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f001 fb96 	bl	8007a40 <vTaskSwitchContext>
 8006314:	f04f 0000 	mov.w	r0, #0
 8006318:	f380 8811 	msr	BASEPRI, r0
 800631c:	bc09      	pop	{r0, r3}
 800631e:	6819      	ldr	r1, [r3, #0]
 8006320:	6808      	ldr	r0, [r1, #0]
 8006322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006326:	f01e 0f10 	tst.w	lr, #16
 800632a:	bf08      	it	eq
 800632c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006330:	f380 8809 	msr	PSP, r0
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	f3af 8000 	nop.w

08006340 <pxCurrentTCBConst>:
 8006340:	240040ec 	.word	0x240040ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop

08006348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	607b      	str	r3, [r7, #4]
}
 8006360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006362:	f001 fab5 	bl	80078d0 <xTaskIncrementTick>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800636c:	4b06      	ldr	r3, [pc, #24]	; (8006388 <SysTick_Handler+0x40>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	2300      	movs	r3, #0
 8006376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	f383 8811 	msr	BASEPRI, r3
}
 800637e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006380:	bf00      	nop
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006390:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <vPortSetupTimerInterrupt+0x34>)
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006396:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <vPortSetupTimerInterrupt+0x38>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <vPortSetupTimerInterrupt+0x3c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a0a      	ldr	r2, [pc, #40]	; (80063cc <vPortSetupTimerInterrupt+0x40>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <vPortSetupTimerInterrupt+0x44>)
 80063aa:	3b01      	subs	r3, #1
 80063ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063ae:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <vPortSetupTimerInterrupt+0x34>)
 80063b0:	2207      	movs	r2, #7
 80063b2:	601a      	str	r2, [r3, #0]
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	e000e010 	.word	0xe000e010
 80063c4:	e000e018 	.word	0xe000e018
 80063c8:	24000000 	.word	0x24000000
 80063cc:	10624dd3 	.word	0x10624dd3
 80063d0:	e000e014 	.word	0xe000e014

080063d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063e4 <vPortEnableVFP+0x10>
 80063d8:	6801      	ldr	r1, [r0, #0]
 80063da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063de:	6001      	str	r1, [r0, #0]
 80063e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063e2:	bf00      	nop
 80063e4:	e000ed88 	.word	0xe000ed88

080063e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063ee:	f3ef 8305 	mrs	r3, IPSR
 80063f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d914      	bls.n	8006424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063fa:	4a17      	ldr	r2, [pc, #92]	; (8006458 <vPortValidateInterruptPriority+0x70>)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4413      	add	r3, r2
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006404:	4b15      	ldr	r3, [pc, #84]	; (800645c <vPortValidateInterruptPriority+0x74>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	7afa      	ldrb	r2, [r7, #11]
 800640a:	429a      	cmp	r2, r3
 800640c:	d20a      	bcs.n	8006424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	607b      	str	r3, [r7, #4]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006424:	4b0e      	ldr	r3, [pc, #56]	; (8006460 <vPortValidateInterruptPriority+0x78>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800642c:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <vPortValidateInterruptPriority+0x7c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d90a      	bls.n	800644a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	603b      	str	r3, [r7, #0]
}
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <vPortValidateInterruptPriority+0x60>
	}
 800644a:	bf00      	nop
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	e000e3f0 	.word	0xe000e3f0
 800645c:	240040e4 	.word	0x240040e4
 8006460:	e000ed0c 	.word	0xe000ed0c
 8006464:	240040e8 	.word	0x240040e8

08006468 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <xQueueGenericReset+0x2a>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	60bb      	str	r3, [r7, #8]
}
 800648e:	bf00      	nop
 8006490:	e7fe      	b.n	8006490 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006492:	f7ff fec7 	bl	8006224 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649e:	68f9      	ldr	r1, [r7, #12]
 80064a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064a2:	fb01 f303 	mul.w	r3, r1, r3
 80064a6:	441a      	add	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c2:	3b01      	subs	r3, #1
 80064c4:	68f9      	ldr	r1, [r7, #12]
 80064c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	441a      	add	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	22ff      	movs	r2, #255	; 0xff
 80064d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	22ff      	movs	r2, #255	; 0xff
 80064de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d114      	bne.n	8006512 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01a      	beq.n	8006526 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3310      	adds	r3, #16
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 fb23 	bl	8007b40 <xTaskRemoveFromEventList>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d012      	beq.n	8006526 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006500:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <xQueueGenericReset+0xcc>)
 8006502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	e009      	b.n	8006526 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3310      	adds	r3, #16
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff fca0 	bl	8005e5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3324      	adds	r3, #36	; 0x24
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff fc9b 	bl	8005e5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006526:	f7ff fead 	bl	8006284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800652a:	2301      	movs	r3, #1
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	e000ed04 	.word	0xe000ed04

08006538 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08e      	sub	sp, #56	; 0x38
 800653c:	af02      	add	r7, sp, #8
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <xQueueGenericCreateStatic+0x52>
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <xQueueGenericCreateStatic+0x56>
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <xQueueGenericCreateStatic+0x58>
 800658e:	2300      	movs	r3, #0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	623b      	str	r3, [r7, #32]
}
 80065a6:	bf00      	nop
 80065a8:	e7fe      	b.n	80065a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d102      	bne.n	80065b6 <xQueueGenericCreateStatic+0x7e>
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <xQueueGenericCreateStatic+0x82>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e000      	b.n	80065bc <xQueueGenericCreateStatic+0x84>
 80065ba:	2300      	movs	r3, #0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	61fb      	str	r3, [r7, #28]
}
 80065d2:	bf00      	nop
 80065d4:	e7fe      	b.n	80065d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80065d6:	2348      	movs	r3, #72	; 0x48
 80065d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b48      	cmp	r3, #72	; 0x48
 80065de:	d00a      	beq.n	80065f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	61bb      	str	r3, [r7, #24]
}
 80065f2:	bf00      	nop
 80065f4:	e7fe      	b.n	80065f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80065f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80065fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00d      	beq.n	800661e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800660a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	4613      	mov	r3, r2
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	68b9      	ldr	r1, [r7, #8]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f83f 	bl	800669c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006620:	4618      	mov	r0, r3
 8006622:	3730      	adds	r7, #48	; 0x30
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08a      	sub	sp, #40	; 0x28
 800662c:	af02      	add	r7, sp, #8
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10a      	bne.n	8006652 <xQueueGenericCreate+0x2a>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	613b      	str	r3, [r7, #16]
}
 800664e:	bf00      	nop
 8006650:	e7fe      	b.n	8006650 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	fb02 f303 	mul.w	r3, r2, r3
 800665a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	3348      	adds	r3, #72	; 0x48
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff fa11 	bl	8005a88 <pvPortMalloc>
 8006666:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d011      	beq.n	8006692 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	3348      	adds	r3, #72	; 0x48
 8006676:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006680:	79fa      	ldrb	r2, [r7, #7]
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	4613      	mov	r3, r2
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	68b9      	ldr	r1, [r7, #8]
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 f805 	bl	800669c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006692:	69bb      	ldr	r3, [r7, #24]
	}
 8006694:	4618      	mov	r0, r3
 8006696:	3720      	adds	r7, #32
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
 80066a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d103      	bne.n	80066b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	e002      	b.n	80066be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80066ca:	2101      	movs	r1, #1
 80066cc:	69b8      	ldr	r0, [r7, #24]
 80066ce:	f7ff fecb 	bl	8006468 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80066d2:	bf00      	nop
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00e      	beq.n	8006706 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80066fa:	2300      	movs	r3, #0
 80066fc:	2200      	movs	r2, #0
 80066fe:	2100      	movs	r1, #0
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f837 	bl	8006774 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800670e:	b580      	push	{r7, lr}
 8006710:	b086      	sub	sp, #24
 8006712:	af00      	add	r7, sp, #0
 8006714:	4603      	mov	r3, r0
 8006716:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006718:	2301      	movs	r3, #1
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	2300      	movs	r3, #0
 800671e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	461a      	mov	r2, r3
 8006724:	6939      	ldr	r1, [r7, #16]
 8006726:	6978      	ldr	r0, [r7, #20]
 8006728:	f7ff ff7e 	bl	8006628 <xQueueGenericCreate>
 800672c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f7ff ffd3 	bl	80066da <prvInitialiseMutex>

		return xNewQueue;
 8006734:	68fb      	ldr	r3, [r7, #12]
	}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800673e:	b580      	push	{r7, lr}
 8006740:	b088      	sub	sp, #32
 8006742:	af02      	add	r7, sp, #8
 8006744:	4603      	mov	r3, r0
 8006746:	6039      	str	r1, [r7, #0]
 8006748:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800674a:	2301      	movs	r3, #1
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	2300      	movs	r3, #0
 8006750:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2200      	movs	r2, #0
 800675a:	6939      	ldr	r1, [r7, #16]
 800675c:	6978      	ldr	r0, [r7, #20]
 800675e:	f7ff feeb 	bl	8006538 <xQueueGenericCreateStatic>
 8006762:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f7ff ffb8 	bl	80066da <prvInitialiseMutex>

		return xNewQueue;
 800676a:	68fb      	ldr	r3, [r7, #12]
	}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08e      	sub	sp, #56	; 0x38
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006782:	2300      	movs	r3, #0
 8006784:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10a      	bne.n	80067a6 <xQueueGenericSend+0x32>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d103      	bne.n	80067b4 <xQueueGenericSend+0x40>
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <xQueueGenericSend+0x44>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <xQueueGenericSend+0x46>
 80067b8:	2300      	movs	r3, #0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10a      	bne.n	80067d4 <xQueueGenericSend+0x60>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067d0:	bf00      	nop
 80067d2:	e7fe      	b.n	80067d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d103      	bne.n	80067e2 <xQueueGenericSend+0x6e>
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <xQueueGenericSend+0x72>
 80067e2:	2301      	movs	r3, #1
 80067e4:	e000      	b.n	80067e8 <xQueueGenericSend+0x74>
 80067e6:	2300      	movs	r3, #0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <xQueueGenericSend+0x8e>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	623b      	str	r3, [r7, #32]
}
 80067fe:	bf00      	nop
 8006800:	e7fe      	b.n	8006800 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006802:	f001 fb59 	bl	8007eb8 <xTaskGetSchedulerState>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d102      	bne.n	8006812 <xQueueGenericSend+0x9e>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <xQueueGenericSend+0xa2>
 8006812:	2301      	movs	r3, #1
 8006814:	e000      	b.n	8006818 <xQueueGenericSend+0xa4>
 8006816:	2300      	movs	r3, #0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <xQueueGenericSend+0xbe>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	61fb      	str	r3, [r7, #28]
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006832:	f7ff fcf7 	bl	8006224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683e:	429a      	cmp	r2, r3
 8006840:	d302      	bcc.n	8006848 <xQueueGenericSend+0xd4>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b02      	cmp	r3, #2
 8006846:	d129      	bne.n	800689c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800684e:	f000 fc3b 	bl	80070c8 <prvCopyDataToQueue>
 8006852:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	d010      	beq.n	800687e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	3324      	adds	r3, #36	; 0x24
 8006860:	4618      	mov	r0, r3
 8006862:	f001 f96d 	bl	8007b40 <xTaskRemoveFromEventList>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d013      	beq.n	8006894 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800686c:	4b3f      	ldr	r3, [pc, #252]	; (800696c <xQueueGenericSend+0x1f8>)
 800686e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	e00a      	b.n	8006894 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006880:	2b00      	cmp	r3, #0
 8006882:	d007      	beq.n	8006894 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006884:	4b39      	ldr	r3, [pc, #228]	; (800696c <xQueueGenericSend+0x1f8>)
 8006886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006894:	f7ff fcf6 	bl	8006284 <vPortExitCritical>
				return pdPASS;
 8006898:	2301      	movs	r3, #1
 800689a:	e063      	b.n	8006964 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d103      	bne.n	80068aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068a2:	f7ff fcef 	bl	8006284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	e05c      	b.n	8006964 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068b0:	f107 0314 	add.w	r3, r7, #20
 80068b4:	4618      	mov	r0, r3
 80068b6:	f001 f9a5 	bl	8007c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068ba:	2301      	movs	r3, #1
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068be:	f7ff fce1 	bl	8006284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068c2:	f000 ff39 	bl	8007738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068c6:	f7ff fcad 	bl	8006224 <vPortEnterCritical>
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068d0:	b25b      	sxtb	r3, r3
 80068d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d6:	d103      	bne.n	80068e0 <xQueueGenericSend+0x16c>
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068e6:	b25b      	sxtb	r3, r3
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ec:	d103      	bne.n	80068f6 <xQueueGenericSend+0x182>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068f6:	f7ff fcc5 	bl	8006284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068fa:	1d3a      	adds	r2, r7, #4
 80068fc:	f107 0314 	add.w	r3, r7, #20
 8006900:	4611      	mov	r1, r2
 8006902:	4618      	mov	r0, r3
 8006904:	f001 f994 	bl	8007c30 <xTaskCheckForTimeOut>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d124      	bne.n	8006958 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800690e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006910:	f000 fcd2 	bl	80072b8 <prvIsQueueFull>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d018      	beq.n	800694c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	3310      	adds	r3, #16
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	4611      	mov	r1, r2
 8006922:	4618      	mov	r0, r3
 8006924:	f001 f8e8 	bl	8007af8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800692a:	f000 fc5d 	bl	80071e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800692e:	f000 ff11 	bl	8007754 <xTaskResumeAll>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	f47f af7c 	bne.w	8006832 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800693a:	4b0c      	ldr	r3, [pc, #48]	; (800696c <xQueueGenericSend+0x1f8>)
 800693c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	e772      	b.n	8006832 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800694c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800694e:	f000 fc4b 	bl	80071e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006952:	f000 feff 	bl	8007754 <xTaskResumeAll>
 8006956:	e76c      	b.n	8006832 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800695a:	f000 fc45 	bl	80071e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800695e:	f000 fef9 	bl	8007754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006962:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006964:	4618      	mov	r0, r3
 8006966:	3738      	adds	r7, #56	; 0x38
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b090      	sub	sp, #64	; 0x40
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10a      	bne.n	800699e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800699a:	bf00      	nop
 800699c:	e7fe      	b.n	800699c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d103      	bne.n	80069ac <xQueueGenericSendFromISR+0x3c>
 80069a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <xQueueGenericSendFromISR+0x40>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e000      	b.n	80069b2 <xQueueGenericSendFromISR+0x42>
 80069b0:	2300      	movs	r3, #0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10a      	bne.n	80069cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069c8:	bf00      	nop
 80069ca:	e7fe      	b.n	80069ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d103      	bne.n	80069da <xQueueGenericSendFromISR+0x6a>
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d101      	bne.n	80069de <xQueueGenericSendFromISR+0x6e>
 80069da:	2301      	movs	r3, #1
 80069dc:	e000      	b.n	80069e0 <xQueueGenericSendFromISR+0x70>
 80069de:	2300      	movs	r3, #0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	623b      	str	r3, [r7, #32]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069fa:	f7ff fcf5 	bl	80063e8 <vPortValidateInterruptPriority>
	__asm volatile
 80069fe:	f3ef 8211 	mrs	r2, BASEPRI
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	61fa      	str	r2, [r7, #28]
 8006a14:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006a16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d302      	bcc.n	8006a2c <xQueueGenericSendFromISR+0xbc>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d12f      	bne.n	8006a8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a42:	f000 fb41 	bl	80070c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4e:	d112      	bne.n	8006a76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d016      	beq.n	8006a86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	3324      	adds	r3, #36	; 0x24
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f001 f86f 	bl	8007b40 <xTaskRemoveFromEventList>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00e      	beq.n	8006a86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00b      	beq.n	8006a86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e007      	b.n	8006a86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	b25a      	sxtb	r2, r3
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a86:	2301      	movs	r3, #1
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006a8a:	e001      	b.n	8006a90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a92:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f383 8811 	msr	BASEPRI, r3
}
 8006a9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3740      	adds	r7, #64	; 0x40
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b08e      	sub	sp, #56	; 0x38
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	623b      	str	r3, [r7, #32]
}
 8006acc:	bf00      	nop
 8006ace:	e7fe      	b.n	8006ace <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00a      	beq.n	8006aee <xQueueGiveFromISR+0x48>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	61fb      	str	r3, [r7, #28]
}
 8006aea:	bf00      	nop
 8006aec:	e7fe      	b.n	8006aec <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d103      	bne.n	8006afe <xQueueGiveFromISR+0x58>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <xQueueGiveFromISR+0x5c>
 8006afe:	2301      	movs	r3, #1
 8006b00:	e000      	b.n	8006b04 <xQueueGiveFromISR+0x5e>
 8006b02:	2300      	movs	r3, #0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	61bb      	str	r3, [r7, #24]
}
 8006b1a:	bf00      	nop
 8006b1c:	e7fe      	b.n	8006b1c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b1e:	f7ff fc63 	bl	80063e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006b22:	f3ef 8211 	mrs	r2, BASEPRI
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	617a      	str	r2, [r7, #20]
 8006b38:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006b3a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d22b      	bcs.n	8006ba6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b68:	d112      	bne.n	8006b90 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d016      	beq.n	8006ba0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	3324      	adds	r3, #36	; 0x24
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 ffe2 	bl	8007b40 <xTaskRemoveFromEventList>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00e      	beq.n	8006ba0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00b      	beq.n	8006ba0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	e007      	b.n	8006ba0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b94:	3301      	adds	r3, #1
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	b25a      	sxtb	r2, r3
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba4:	e001      	b.n	8006baa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f383 8811 	msr	BASEPRI, r3
}
 8006bb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3738      	adds	r7, #56	; 0x38
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08c      	sub	sp, #48	; 0x30
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <xQueueReceive+0x30>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	623b      	str	r3, [r7, #32]
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <xQueueReceive+0x3e>
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <xQueueReceive+0x42>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e000      	b.n	8006c04 <xQueueReceive+0x44>
 8006c02:	2300      	movs	r3, #0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10a      	bne.n	8006c1e <xQueueReceive+0x5e>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	61fb      	str	r3, [r7, #28]
}
 8006c1a:	bf00      	nop
 8006c1c:	e7fe      	b.n	8006c1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c1e:	f001 f94b 	bl	8007eb8 <xTaskGetSchedulerState>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d102      	bne.n	8006c2e <xQueueReceive+0x6e>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <xQueueReceive+0x72>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <xQueueReceive+0x74>
 8006c32:	2300      	movs	r3, #0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <xQueueReceive+0x8e>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	61bb      	str	r3, [r7, #24]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c4e:	f7ff fae9 	bl	8006224 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d01f      	beq.n	8006c9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c62:	f000 fa9b 	bl	800719c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	1e5a      	subs	r2, r3, #1
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00f      	beq.n	8006c96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	3310      	adds	r3, #16
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 ff60 	bl	8007b40 <xTaskRemoveFromEventList>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d007      	beq.n	8006c96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c86:	4b3d      	ldr	r3, [pc, #244]	; (8006d7c <xQueueReceive+0x1bc>)
 8006c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c96:	f7ff faf5 	bl	8006284 <vPortExitCritical>
				return pdPASS;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e069      	b.n	8006d72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d103      	bne.n	8006cac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ca4:	f7ff faee 	bl	8006284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e062      	b.n	8006d72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cb2:	f107 0310 	add.w	r3, r7, #16
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 ffa4 	bl	8007c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cc0:	f7ff fae0 	bl	8006284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cc4:	f000 fd38 	bl	8007738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cc8:	f7ff faac 	bl	8006224 <vPortEnterCritical>
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cd2:	b25b      	sxtb	r3, r3
 8006cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd8:	d103      	bne.n	8006ce2 <xQueueReceive+0x122>
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ce8:	b25b      	sxtb	r3, r3
 8006cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cee:	d103      	bne.n	8006cf8 <xQueueReceive+0x138>
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cf8:	f7ff fac4 	bl	8006284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cfc:	1d3a      	adds	r2, r7, #4
 8006cfe:	f107 0310 	add.w	r3, r7, #16
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 ff93 	bl	8007c30 <xTaskCheckForTimeOut>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d123      	bne.n	8006d58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d12:	f000 fabb 	bl	800728c <prvIsQueueEmpty>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d017      	beq.n	8006d4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	3324      	adds	r3, #36	; 0x24
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	4611      	mov	r1, r2
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fee7 	bl	8007af8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d2c:	f000 fa5c 	bl	80071e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d30:	f000 fd10 	bl	8007754 <xTaskResumeAll>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d189      	bne.n	8006c4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d3a:	4b10      	ldr	r3, [pc, #64]	; (8006d7c <xQueueReceive+0x1bc>)
 8006d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	e780      	b.n	8006c4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d4e:	f000 fa4b 	bl	80071e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d52:	f000 fcff 	bl	8007754 <xTaskResumeAll>
 8006d56:	e77a      	b.n	8006c4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d5a:	f000 fa45 	bl	80071e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d5e:	f000 fcf9 	bl	8007754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d64:	f000 fa92 	bl	800728c <prvIsQueueEmpty>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f43f af6f 	beq.w	8006c4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3730      	adds	r7, #48	; 0x30
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	e000ed04 	.word	0xe000ed04

08006d80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08e      	sub	sp, #56	; 0x38
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d92:	2300      	movs	r3, #0
 8006d94:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	623b      	str	r3, [r7, #32]
}
 8006dae:	bf00      	nop
 8006db0:	e7fe      	b.n	8006db0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	61fb      	str	r3, [r7, #28]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dd0:	f001 f872 	bl	8007eb8 <xTaskGetSchedulerState>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d102      	bne.n	8006de0 <xQueueSemaphoreTake+0x60>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <xQueueSemaphoreTake+0x64>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <xQueueSemaphoreTake+0x66>
 8006de4:	2300      	movs	r3, #0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10a      	bne.n	8006e00 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	61bb      	str	r3, [r7, #24]
}
 8006dfc:	bf00      	nop
 8006dfe:	e7fe      	b.n	8006dfe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e00:	f7ff fa10 	bl	8006224 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e08:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d024      	beq.n	8006e5a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e12:	1e5a      	subs	r2, r3, #1
 8006e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e16:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d104      	bne.n	8006e2a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006e20:	f001 f9f2 	bl	8008208 <pvTaskIncrementMutexHeldCount>
 8006e24:	4602      	mov	r2, r0
 8006e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e28:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00f      	beq.n	8006e52 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	3310      	adds	r3, #16
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 fe82 	bl	8007b40 <xTaskRemoveFromEventList>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d007      	beq.n	8006e52 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e42:	4b54      	ldr	r3, [pc, #336]	; (8006f94 <xQueueSemaphoreTake+0x214>)
 8006e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e52:	f7ff fa17 	bl	8006284 <vPortExitCritical>
				return pdPASS;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e097      	b.n	8006f8a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d111      	bne.n	8006e84 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	617b      	str	r3, [r7, #20]
}
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e7c:	f7ff fa02 	bl	8006284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e80:	2300      	movs	r3, #0
 8006e82:	e082      	b.n	8006f8a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e8a:	f107 030c 	add.w	r3, r7, #12
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 feb8 	bl	8007c04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e94:	2301      	movs	r3, #1
 8006e96:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e98:	f7ff f9f4 	bl	8006284 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e9c:	f000 fc4c 	bl	8007738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ea0:	f7ff f9c0 	bl	8006224 <vPortEnterCritical>
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eaa:	b25b      	sxtb	r3, r3
 8006eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb0:	d103      	bne.n	8006eba <xQueueSemaphoreTake+0x13a>
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ec0:	b25b      	sxtb	r3, r3
 8006ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec6:	d103      	bne.n	8006ed0 <xQueueSemaphoreTake+0x150>
 8006ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ed0:	f7ff f9d8 	bl	8006284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ed4:	463a      	mov	r2, r7
 8006ed6:	f107 030c 	add.w	r3, r7, #12
 8006eda:	4611      	mov	r1, r2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fea7 	bl	8007c30 <xTaskCheckForTimeOut>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d132      	bne.n	8006f4e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006eea:	f000 f9cf 	bl	800728c <prvIsQueueEmpty>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d026      	beq.n	8006f42 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d109      	bne.n	8006f10 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006efc:	f7ff f992 	bl	8006224 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fff5 	bl	8007ef4 <xTaskPriorityInherit>
 8006f0a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006f0c:	f7ff f9ba 	bl	8006284 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	3324      	adds	r3, #36	; 0x24
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	4611      	mov	r1, r2
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 fded 	bl	8007af8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f20:	f000 f962 	bl	80071e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f24:	f000 fc16 	bl	8007754 <xTaskResumeAll>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f47f af68 	bne.w	8006e00 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006f30:	4b18      	ldr	r3, [pc, #96]	; (8006f94 <xQueueSemaphoreTake+0x214>)
 8006f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	e75e      	b.n	8006e00 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f44:	f000 f950 	bl	80071e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f48:	f000 fc04 	bl	8007754 <xTaskResumeAll>
 8006f4c:	e758      	b.n	8006e00 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f50:	f000 f94a 	bl	80071e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f54:	f000 fbfe 	bl	8007754 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f5a:	f000 f997 	bl	800728c <prvIsQueueEmpty>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f43f af4d 	beq.w	8006e00 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00d      	beq.n	8006f88 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006f6c:	f7ff f95a 	bl	8006224 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f72:	f000 f891 	bl	8007098 <prvGetDisinheritPriorityAfterTimeout>
 8006f76:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 f8b4 	bl	80080ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f84:	f7ff f97e 	bl	8006284 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3738      	adds	r7, #56	; 0x38
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	e000ed04 	.word	0xe000ed04

08006f98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08e      	sub	sp, #56	; 0x38
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10a      	bne.n	8006fc4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	623b      	str	r3, [r7, #32]
}
 8006fc0:	bf00      	nop
 8006fc2:	e7fe      	b.n	8006fc2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d103      	bne.n	8006fd2 <xQueueReceiveFromISR+0x3a>
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <xQueueReceiveFromISR+0x3e>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <xQueueReceiveFromISR+0x40>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10a      	bne.n	8006ff2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	61fb      	str	r3, [r7, #28]
}
 8006fee:	bf00      	nop
 8006ff0:	e7fe      	b.n	8006ff0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ff2:	f7ff f9f9 	bl	80063e8 <vPortValidateInterruptPriority>
	__asm volatile
 8006ff6:	f3ef 8211 	mrs	r2, BASEPRI
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	61ba      	str	r2, [r7, #24]
 800700c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800700e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007010:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	2b00      	cmp	r3, #0
 800701c:	d02f      	beq.n	800707e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007028:	68b9      	ldr	r1, [r7, #8]
 800702a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800702c:	f000 f8b6 	bl	800719c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	1e5a      	subs	r2, r3, #1
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007038:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800703c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007040:	d112      	bne.n	8007068 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d016      	beq.n	8007078 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	3310      	adds	r3, #16
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fd76 	bl	8007b40 <xTaskRemoveFromEventList>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00e      	beq.n	8007078 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	e007      	b.n	8007078 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800706c:	3301      	adds	r3, #1
 800706e:	b2db      	uxtb	r3, r3
 8007070:	b25a      	sxtb	r2, r3
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007078:	2301      	movs	r3, #1
 800707a:	637b      	str	r3, [r7, #52]	; 0x34
 800707c:	e001      	b.n	8007082 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800707e:	2300      	movs	r3, #0
 8007080:	637b      	str	r3, [r7, #52]	; 0x34
 8007082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007084:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f383 8811 	msr	BASEPRI, r3
}
 800708c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800708e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007090:	4618      	mov	r0, r3
 8007092:	3738      	adds	r7, #56	; 0x38
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d006      	beq.n	80070b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f1c3 0307 	rsb	r3, r3, #7
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	e001      	b.n	80070ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80070ba:	68fb      	ldr	r3, [r7, #12]
	}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070d4:	2300      	movs	r3, #0
 80070d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10d      	bne.n	8007102 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d14d      	bne.n	800718a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 ff74 	bl	8007fe0 <xTaskPriorityDisinherit>
 80070f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	609a      	str	r2, [r3, #8]
 8007100:	e043      	b.n	800718a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d119      	bne.n	800713c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6858      	ldr	r0, [r3, #4]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007110:	461a      	mov	r2, r3
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	f00b faae 	bl	8012674 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007120:	441a      	add	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	429a      	cmp	r2, r3
 8007130:	d32b      	bcc.n	800718a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	605a      	str	r2, [r3, #4]
 800713a:	e026      	b.n	800718a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	68d8      	ldr	r0, [r3, #12]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007144:	461a      	mov	r2, r3
 8007146:	68b9      	ldr	r1, [r7, #8]
 8007148:	f00b fa94 	bl	8012674 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	68da      	ldr	r2, [r3, #12]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007154:	425b      	negs	r3, r3
 8007156:	441a      	add	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	68da      	ldr	r2, [r3, #12]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	429a      	cmp	r2, r3
 8007166:	d207      	bcs.n	8007178 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	425b      	negs	r3, r3
 8007172:	441a      	add	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b02      	cmp	r3, #2
 800717c:	d105      	bne.n	800718a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	3b01      	subs	r3, #1
 8007188:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007192:	697b      	ldr	r3, [r7, #20]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d018      	beq.n	80071e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	441a      	add	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68da      	ldr	r2, [r3, #12]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d303      	bcc.n	80071d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68d9      	ldr	r1, [r3, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	461a      	mov	r2, r3
 80071da:	6838      	ldr	r0, [r7, #0]
 80071dc:	f00b fa4a 	bl	8012674 <memcpy>
	}
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071f0:	f7ff f818 	bl	8006224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071fc:	e011      	b.n	8007222 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	2b00      	cmp	r3, #0
 8007204:	d012      	beq.n	800722c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3324      	adds	r3, #36	; 0x24
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fc98 	bl	8007b40 <xTaskRemoveFromEventList>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007216:	f000 fd6d 	bl	8007cf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	3b01      	subs	r3, #1
 800721e:	b2db      	uxtb	r3, r3
 8007220:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007226:	2b00      	cmp	r3, #0
 8007228:	dce9      	bgt.n	80071fe <prvUnlockQueue+0x16>
 800722a:	e000      	b.n	800722e <prvUnlockQueue+0x46>
					break;
 800722c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	22ff      	movs	r2, #255	; 0xff
 8007232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007236:	f7ff f825 	bl	8006284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800723a:	f7fe fff3 	bl	8006224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007244:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007246:	e011      	b.n	800726c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d012      	beq.n	8007276 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3310      	adds	r3, #16
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fc73 	bl	8007b40 <xTaskRemoveFromEventList>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d001      	beq.n	8007264 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007260:	f000 fd48 	bl	8007cf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	3b01      	subs	r3, #1
 8007268:	b2db      	uxtb	r3, r3
 800726a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800726c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007270:	2b00      	cmp	r3, #0
 8007272:	dce9      	bgt.n	8007248 <prvUnlockQueue+0x60>
 8007274:	e000      	b.n	8007278 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007276:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	22ff      	movs	r2, #255	; 0xff
 800727c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007280:	f7ff f800 	bl	8006284 <vPortExitCritical>
}
 8007284:	bf00      	nop
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007294:	f7fe ffc6 	bl	8006224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729c:	2b00      	cmp	r3, #0
 800729e:	d102      	bne.n	80072a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072a0:	2301      	movs	r3, #1
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	e001      	b.n	80072aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072aa:	f7fe ffeb 	bl	8006284 <vPortExitCritical>

	return xReturn;
 80072ae:	68fb      	ldr	r3, [r7, #12]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072c0:	f7fe ffb0 	bl	8006224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d102      	bne.n	80072d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072d0:	2301      	movs	r3, #1
 80072d2:	60fb      	str	r3, [r7, #12]
 80072d4:	e001      	b.n	80072da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072da:	f7fe ffd3 	bl	8006284 <vPortExitCritical>

	return xReturn;
 80072de:	68fb      	ldr	r3, [r7, #12]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08e      	sub	sp, #56	; 0x38
 80072ec:	af04      	add	r7, sp, #16
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xTaskCreateStatic+0x2a>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	623b      	str	r3, [r7, #32]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <xTaskCreateStatic+0x46>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	61fb      	str	r3, [r7, #28]
}
 800732a:	bf00      	nop
 800732c:	e7fe      	b.n	800732c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800732e:	2354      	movs	r3, #84	; 0x54
 8007330:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2b54      	cmp	r3, #84	; 0x54
 8007336:	d00a      	beq.n	800734e <xTaskCreateStatic+0x66>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	61bb      	str	r3, [r7, #24]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800734e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007352:	2b00      	cmp	r3, #0
 8007354:	d01e      	beq.n	8007394 <xTaskCreateStatic+0xac>
 8007356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01b      	beq.n	8007394 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800735c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007364:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	2202      	movs	r2, #2
 800736a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800736e:	2300      	movs	r3, #0
 8007370:	9303      	str	r3, [sp, #12]
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	9302      	str	r3, [sp, #8]
 8007376:	f107 0314 	add.w	r3, r7, #20
 800737a:	9301      	str	r3, [sp, #4]
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	68b9      	ldr	r1, [r7, #8]
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 f850 	bl	800742c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800738c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800738e:	f000 f8d5 	bl	800753c <prvAddNewTaskToReadyList>
 8007392:	e001      	b.n	8007398 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007398:	697b      	ldr	r3, [r7, #20]
	}
 800739a:	4618      	mov	r0, r3
 800739c:	3728      	adds	r7, #40	; 0x28
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b08c      	sub	sp, #48	; 0x30
 80073a6:	af04      	add	r7, sp, #16
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	603b      	str	r3, [r7, #0]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe fb66 	bl	8005a88 <pvPortMalloc>
 80073bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00e      	beq.n	80073e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073c4:	2054      	movs	r0, #84	; 0x54
 80073c6:	f7fe fb5f 	bl	8005a88 <pvPortMalloc>
 80073ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	631a      	str	r2, [r3, #48]	; 0x30
 80073d8:	e005      	b.n	80073e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073da:	6978      	ldr	r0, [r7, #20]
 80073dc:	f7fe fc20 	bl	8005c20 <vPortFree>
 80073e0:	e001      	b.n	80073e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d017      	beq.n	800741c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073f4:	88fa      	ldrh	r2, [r7, #6]
 80073f6:	2300      	movs	r3, #0
 80073f8:	9303      	str	r3, [sp, #12]
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	9302      	str	r3, [sp, #8]
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	9301      	str	r3, [sp, #4]
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68b9      	ldr	r1, [r7, #8]
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 f80e 	bl	800742c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007410:	69f8      	ldr	r0, [r7, #28]
 8007412:	f000 f893 	bl	800753c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007416:	2301      	movs	r3, #1
 8007418:	61bb      	str	r3, [r7, #24]
 800741a:	e002      	b.n	8007422 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800741c:	f04f 33ff 	mov.w	r3, #4294967295
 8007420:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007422:	69bb      	ldr	r3, [r7, #24]
	}
 8007424:	4618      	mov	r0, r3
 8007426:	3720      	adds	r7, #32
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007444:	440b      	add	r3, r1
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	f023 0307 	bic.w	r3, r3, #7
 8007452:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <prvInitialiseNewTask+0x48>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	617b      	str	r3, [r7, #20]
}
 8007470:	bf00      	nop
 8007472:	e7fe      	b.n	8007472 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d01f      	beq.n	80074ba <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800747a:	2300      	movs	r3, #0
 800747c:	61fb      	str	r3, [r7, #28]
 800747e:	e012      	b.n	80074a6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	4413      	add	r3, r2
 8007486:	7819      	ldrb	r1, [r3, #0]
 8007488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	4413      	add	r3, r2
 800748e:	3334      	adds	r3, #52	; 0x34
 8007490:	460a      	mov	r2, r1
 8007492:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4413      	add	r3, r2
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d006      	beq.n	80074ae <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	3301      	adds	r3, #1
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	2b0f      	cmp	r3, #15
 80074aa:	d9e9      	bls.n	8007480 <prvInitialiseNewTask+0x54>
 80074ac:	e000      	b.n	80074b0 <prvInitialiseNewTask+0x84>
			{
				break;
 80074ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074b8:	e003      	b.n	80074c2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	2b06      	cmp	r3, #6
 80074c6:	d901      	bls.n	80074cc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074c8:	2306      	movs	r3, #6
 80074ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	2200      	movs	r2, #0
 80074dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	3304      	adds	r3, #4
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fe fcda 	bl	8005e9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	3318      	adds	r3, #24
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fe fcd5 	bl	8005e9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	f1c3 0207 	rsb	r2, r3, #7
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007506:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	2200      	movs	r2, #0
 800750c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	68f9      	ldr	r1, [r7, #12]
 800751a:	69b8      	ldr	r0, [r7, #24]
 800751c:	f7fe fd52 	bl	8005fc4 <pxPortInitialiseStack>
 8007520:	4602      	mov	r2, r0
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007532:	bf00      	nop
 8007534:	3720      	adds	r7, #32
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007544:	f7fe fe6e 	bl	8006224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007548:	4b2a      	ldr	r3, [pc, #168]	; (80075f4 <prvAddNewTaskToReadyList+0xb8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3301      	adds	r3, #1
 800754e:	4a29      	ldr	r2, [pc, #164]	; (80075f4 <prvAddNewTaskToReadyList+0xb8>)
 8007550:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007552:	4b29      	ldr	r3, [pc, #164]	; (80075f8 <prvAddNewTaskToReadyList+0xbc>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d109      	bne.n	800756e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800755a:	4a27      	ldr	r2, [pc, #156]	; (80075f8 <prvAddNewTaskToReadyList+0xbc>)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007560:	4b24      	ldr	r3, [pc, #144]	; (80075f4 <prvAddNewTaskToReadyList+0xb8>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d110      	bne.n	800758a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007568:	f000 fbe8 	bl	8007d3c <prvInitialiseTaskLists>
 800756c:	e00d      	b.n	800758a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800756e:	4b23      	ldr	r3, [pc, #140]	; (80075fc <prvAddNewTaskToReadyList+0xc0>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d109      	bne.n	800758a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007576:	4b20      	ldr	r3, [pc, #128]	; (80075f8 <prvAddNewTaskToReadyList+0xbc>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	429a      	cmp	r2, r3
 8007582:	d802      	bhi.n	800758a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007584:	4a1c      	ldr	r2, [pc, #112]	; (80075f8 <prvAddNewTaskToReadyList+0xbc>)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800758a:	4b1d      	ldr	r3, [pc, #116]	; (8007600 <prvAddNewTaskToReadyList+0xc4>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3301      	adds	r3, #1
 8007590:	4a1b      	ldr	r2, [pc, #108]	; (8007600 <prvAddNewTaskToReadyList+0xc4>)
 8007592:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007598:	2201      	movs	r2, #1
 800759a:	409a      	lsls	r2, r3
 800759c:	4b19      	ldr	r3, [pc, #100]	; (8007604 <prvAddNewTaskToReadyList+0xc8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	4a18      	ldr	r2, [pc, #96]	; (8007604 <prvAddNewTaskToReadyList+0xc8>)
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075aa:	4613      	mov	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4a15      	ldr	r2, [pc, #84]	; (8007608 <prvAddNewTaskToReadyList+0xcc>)
 80075b4:	441a      	add	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3304      	adds	r3, #4
 80075ba:	4619      	mov	r1, r3
 80075bc:	4610      	mov	r0, r2
 80075be:	f7fe fc7a 	bl	8005eb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075c2:	f7fe fe5f 	bl	8006284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075c6:	4b0d      	ldr	r3, [pc, #52]	; (80075fc <prvAddNewTaskToReadyList+0xc0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00e      	beq.n	80075ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075ce:	4b0a      	ldr	r3, [pc, #40]	; (80075f8 <prvAddNewTaskToReadyList+0xbc>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	429a      	cmp	r2, r3
 80075da:	d207      	bcs.n	80075ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075dc:	4b0b      	ldr	r3, [pc, #44]	; (800760c <prvAddNewTaskToReadyList+0xd0>)
 80075de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ec:	bf00      	nop
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	240041ec 	.word	0x240041ec
 80075f8:	240040ec 	.word	0x240040ec
 80075fc:	240041f8 	.word	0x240041f8
 8007600:	24004208 	.word	0x24004208
 8007604:	240041f4 	.word	0x240041f4
 8007608:	240040f0 	.word	0x240040f0
 800760c:	e000ed04 	.word	0xe000ed04

08007610 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007618:	2300      	movs	r3, #0
 800761a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d017      	beq.n	8007652 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007622:	4b13      	ldr	r3, [pc, #76]	; (8007670 <vTaskDelay+0x60>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <vTaskDelay+0x30>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	60bb      	str	r3, [r7, #8]
}
 800763c:	bf00      	nop
 800763e:	e7fe      	b.n	800763e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007640:	f000 f87a 	bl	8007738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007644:	2100      	movs	r1, #0
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fdf2 	bl	8008230 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800764c:	f000 f882 	bl	8007754 <xTaskResumeAll>
 8007650:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d107      	bne.n	8007668 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007658:	4b06      	ldr	r3, [pc, #24]	; (8007674 <vTaskDelay+0x64>)
 800765a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007668:	bf00      	nop
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	24004214 	.word	0x24004214
 8007674:	e000ed04 	.word	0xe000ed04

08007678 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08a      	sub	sp, #40	; 0x28
 800767c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800767e:	2300      	movs	r3, #0
 8007680:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007682:	2300      	movs	r3, #0
 8007684:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007686:	463a      	mov	r2, r7
 8007688:	1d39      	adds	r1, r7, #4
 800768a:	f107 0308 	add.w	r3, r7, #8
 800768e:	4618      	mov	r0, r3
 8007690:	f7f8 ff0c 	bl	80004ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	9202      	str	r2, [sp, #8]
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	2300      	movs	r3, #0
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	2300      	movs	r3, #0
 80076a4:	460a      	mov	r2, r1
 80076a6:	491e      	ldr	r1, [pc, #120]	; (8007720 <vTaskStartScheduler+0xa8>)
 80076a8:	481e      	ldr	r0, [pc, #120]	; (8007724 <vTaskStartScheduler+0xac>)
 80076aa:	f7ff fe1d 	bl	80072e8 <xTaskCreateStatic>
 80076ae:	4603      	mov	r3, r0
 80076b0:	4a1d      	ldr	r2, [pc, #116]	; (8007728 <vTaskStartScheduler+0xb0>)
 80076b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076b4:	4b1c      	ldr	r3, [pc, #112]	; (8007728 <vTaskStartScheduler+0xb0>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076bc:	2301      	movs	r3, #1
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	e001      	b.n	80076c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d116      	bne.n	80076fa <vTaskStartScheduler+0x82>
	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	613b      	str	r3, [r7, #16]
}
 80076de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076e0:	4b12      	ldr	r3, [pc, #72]	; (800772c <vTaskStartScheduler+0xb4>)
 80076e2:	f04f 32ff 	mov.w	r2, #4294967295
 80076e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076e8:	4b11      	ldr	r3, [pc, #68]	; (8007730 <vTaskStartScheduler+0xb8>)
 80076ea:	2201      	movs	r2, #1
 80076ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076ee:	4b11      	ldr	r3, [pc, #68]	; (8007734 <vTaskStartScheduler+0xbc>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076f4:	f7fe fcf4 	bl	80060e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076f8:	e00e      	b.n	8007718 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007700:	d10a      	bne.n	8007718 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	60fb      	str	r3, [r7, #12]
}
 8007714:	bf00      	nop
 8007716:	e7fe      	b.n	8007716 <vTaskStartScheduler+0x9e>
}
 8007718:	bf00      	nop
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	0801381c 	.word	0x0801381c
 8007724:	08007d0d 	.word	0x08007d0d
 8007728:	24004210 	.word	0x24004210
 800772c:	2400420c 	.word	0x2400420c
 8007730:	240041f8 	.word	0x240041f8
 8007734:	240041f0 	.word	0x240041f0

08007738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007738:	b480      	push	{r7}
 800773a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800773c:	4b04      	ldr	r3, [pc, #16]	; (8007750 <vTaskSuspendAll+0x18>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3301      	adds	r3, #1
 8007742:	4a03      	ldr	r2, [pc, #12]	; (8007750 <vTaskSuspendAll+0x18>)
 8007744:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007746:	bf00      	nop
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	24004214 	.word	0x24004214

08007754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800775e:	2300      	movs	r3, #0
 8007760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007762:	4b41      	ldr	r3, [pc, #260]	; (8007868 <xTaskResumeAll+0x114>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10a      	bne.n	8007780 <xTaskResumeAll+0x2c>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	603b      	str	r3, [r7, #0]
}
 800777c:	bf00      	nop
 800777e:	e7fe      	b.n	800777e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007780:	f7fe fd50 	bl	8006224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007784:	4b38      	ldr	r3, [pc, #224]	; (8007868 <xTaskResumeAll+0x114>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3b01      	subs	r3, #1
 800778a:	4a37      	ldr	r2, [pc, #220]	; (8007868 <xTaskResumeAll+0x114>)
 800778c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800778e:	4b36      	ldr	r3, [pc, #216]	; (8007868 <xTaskResumeAll+0x114>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d161      	bne.n	800785a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007796:	4b35      	ldr	r3, [pc, #212]	; (800786c <xTaskResumeAll+0x118>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d05d      	beq.n	800785a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800779e:	e02e      	b.n	80077fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077a0:	4b33      	ldr	r3, [pc, #204]	; (8007870 <xTaskResumeAll+0x11c>)
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3318      	adds	r3, #24
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fe fbdf 	bl	8005f70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3304      	adds	r3, #4
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe fbda 	bl	8005f70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	2201      	movs	r2, #1
 80077c2:	409a      	lsls	r2, r3
 80077c4:	4b2b      	ldr	r3, [pc, #172]	; (8007874 <xTaskResumeAll+0x120>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	4a2a      	ldr	r2, [pc, #168]	; (8007874 <xTaskResumeAll+0x120>)
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d2:	4613      	mov	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4a27      	ldr	r2, [pc, #156]	; (8007878 <xTaskResumeAll+0x124>)
 80077dc:	441a      	add	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	3304      	adds	r3, #4
 80077e2:	4619      	mov	r1, r3
 80077e4:	4610      	mov	r0, r2
 80077e6:	f7fe fb66 	bl	8005eb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ee:	4b23      	ldr	r3, [pc, #140]	; (800787c <xTaskResumeAll+0x128>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d302      	bcc.n	80077fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80077f8:	4b21      	ldr	r3, [pc, #132]	; (8007880 <xTaskResumeAll+0x12c>)
 80077fa:	2201      	movs	r2, #1
 80077fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077fe:	4b1c      	ldr	r3, [pc, #112]	; (8007870 <xTaskResumeAll+0x11c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1cc      	bne.n	80077a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800780c:	f000 fb34 	bl	8007e78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007810:	4b1c      	ldr	r3, [pc, #112]	; (8007884 <xTaskResumeAll+0x130>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d010      	beq.n	800783e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800781c:	f000 f858 	bl	80078d0 <xTaskIncrementTick>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007826:	4b16      	ldr	r3, [pc, #88]	; (8007880 <xTaskResumeAll+0x12c>)
 8007828:	2201      	movs	r2, #1
 800782a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3b01      	subs	r3, #1
 8007830:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1f1      	bne.n	800781c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007838:	4b12      	ldr	r3, [pc, #72]	; (8007884 <xTaskResumeAll+0x130>)
 800783a:	2200      	movs	r2, #0
 800783c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800783e:	4b10      	ldr	r3, [pc, #64]	; (8007880 <xTaskResumeAll+0x12c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d009      	beq.n	800785a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007846:	2301      	movs	r3, #1
 8007848:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800784a:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <xTaskResumeAll+0x134>)
 800784c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800785a:	f7fe fd13 	bl	8006284 <vPortExitCritical>

	return xAlreadyYielded;
 800785e:	68bb      	ldr	r3, [r7, #8]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	24004214 	.word	0x24004214
 800786c:	240041ec 	.word	0x240041ec
 8007870:	240041ac 	.word	0x240041ac
 8007874:	240041f4 	.word	0x240041f4
 8007878:	240040f0 	.word	0x240040f0
 800787c:	240040ec 	.word	0x240040ec
 8007880:	24004200 	.word	0x24004200
 8007884:	240041fc 	.word	0x240041fc
 8007888:	e000ed04 	.word	0xe000ed04

0800788c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007892:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <xTaskGetTickCount+0x1c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007898:	687b      	ldr	r3, [r7, #4]
}
 800789a:	4618      	mov	r0, r3
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	240041f0 	.word	0x240041f0

080078ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078b2:	f7fe fd99 	bl	80063e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80078b6:	2300      	movs	r3, #0
 80078b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80078ba:	4b04      	ldr	r3, [pc, #16]	; (80078cc <xTaskGetTickCountFromISR+0x20>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078c0:	683b      	ldr	r3, [r7, #0]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	240041f0 	.word	0x240041f0

080078d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078d6:	2300      	movs	r3, #0
 80078d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078da:	4b4e      	ldr	r3, [pc, #312]	; (8007a14 <xTaskIncrementTick+0x144>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f040 808e 	bne.w	8007a00 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078e4:	4b4c      	ldr	r3, [pc, #304]	; (8007a18 <xTaskIncrementTick+0x148>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3301      	adds	r3, #1
 80078ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078ec:	4a4a      	ldr	r2, [pc, #296]	; (8007a18 <xTaskIncrementTick+0x148>)
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d120      	bne.n	800793a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80078f8:	4b48      	ldr	r3, [pc, #288]	; (8007a1c <xTaskIncrementTick+0x14c>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <xTaskIncrementTick+0x48>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	603b      	str	r3, [r7, #0]
}
 8007914:	bf00      	nop
 8007916:	e7fe      	b.n	8007916 <xTaskIncrementTick+0x46>
 8007918:	4b40      	ldr	r3, [pc, #256]	; (8007a1c <xTaskIncrementTick+0x14c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60fb      	str	r3, [r7, #12]
 800791e:	4b40      	ldr	r3, [pc, #256]	; (8007a20 <xTaskIncrementTick+0x150>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a3e      	ldr	r2, [pc, #248]	; (8007a1c <xTaskIncrementTick+0x14c>)
 8007924:	6013      	str	r3, [r2, #0]
 8007926:	4a3e      	ldr	r2, [pc, #248]	; (8007a20 <xTaskIncrementTick+0x150>)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	4b3d      	ldr	r3, [pc, #244]	; (8007a24 <xTaskIncrementTick+0x154>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3301      	adds	r3, #1
 8007932:	4a3c      	ldr	r2, [pc, #240]	; (8007a24 <xTaskIncrementTick+0x154>)
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	f000 fa9f 	bl	8007e78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800793a:	4b3b      	ldr	r3, [pc, #236]	; (8007a28 <xTaskIncrementTick+0x158>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	429a      	cmp	r2, r3
 8007942:	d348      	bcc.n	80079d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007944:	4b35      	ldr	r3, [pc, #212]	; (8007a1c <xTaskIncrementTick+0x14c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d104      	bne.n	8007958 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800794e:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <xTaskIncrementTick+0x158>)
 8007950:	f04f 32ff 	mov.w	r2, #4294967295
 8007954:	601a      	str	r2, [r3, #0]
					break;
 8007956:	e03e      	b.n	80079d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007958:	4b30      	ldr	r3, [pc, #192]	; (8007a1c <xTaskIncrementTick+0x14c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	429a      	cmp	r2, r3
 800796e:	d203      	bcs.n	8007978 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007970:	4a2d      	ldr	r2, [pc, #180]	; (8007a28 <xTaskIncrementTick+0x158>)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007976:	e02e      	b.n	80079d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	3304      	adds	r3, #4
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe faf7 	bl	8005f70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	2b00      	cmp	r3, #0
 8007988:	d004      	beq.n	8007994 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	3318      	adds	r3, #24
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe faee 	bl	8005f70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007998:	2201      	movs	r2, #1
 800799a:	409a      	lsls	r2, r3
 800799c:	4b23      	ldr	r3, [pc, #140]	; (8007a2c <xTaskIncrementTick+0x15c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	4a22      	ldr	r2, [pc, #136]	; (8007a2c <xTaskIncrementTick+0x15c>)
 80079a4:	6013      	str	r3, [r2, #0]
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4a1f      	ldr	r2, [pc, #124]	; (8007a30 <xTaskIncrementTick+0x160>)
 80079b4:	441a      	add	r2, r3
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	3304      	adds	r3, #4
 80079ba:	4619      	mov	r1, r3
 80079bc:	4610      	mov	r0, r2
 80079be:	f7fe fa7a 	bl	8005eb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c6:	4b1b      	ldr	r3, [pc, #108]	; (8007a34 <xTaskIncrementTick+0x164>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d3b9      	bcc.n	8007944 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80079d0:	2301      	movs	r3, #1
 80079d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079d4:	e7b6      	b.n	8007944 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079d6:	4b17      	ldr	r3, [pc, #92]	; (8007a34 <xTaskIncrementTick+0x164>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079dc:	4914      	ldr	r1, [pc, #80]	; (8007a30 <xTaskIncrementTick+0x160>)
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d901      	bls.n	80079f2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80079ee:	2301      	movs	r3, #1
 80079f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079f2:	4b11      	ldr	r3, [pc, #68]	; (8007a38 <xTaskIncrementTick+0x168>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d007      	beq.n	8007a0a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80079fa:	2301      	movs	r3, #1
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	e004      	b.n	8007a0a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a00:	4b0e      	ldr	r3, [pc, #56]	; (8007a3c <xTaskIncrementTick+0x16c>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3301      	adds	r3, #1
 8007a06:	4a0d      	ldr	r2, [pc, #52]	; (8007a3c <xTaskIncrementTick+0x16c>)
 8007a08:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a0a:	697b      	ldr	r3, [r7, #20]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	24004214 	.word	0x24004214
 8007a18:	240041f0 	.word	0x240041f0
 8007a1c:	240041a4 	.word	0x240041a4
 8007a20:	240041a8 	.word	0x240041a8
 8007a24:	24004204 	.word	0x24004204
 8007a28:	2400420c 	.word	0x2400420c
 8007a2c:	240041f4 	.word	0x240041f4
 8007a30:	240040f0 	.word	0x240040f0
 8007a34:	240040ec 	.word	0x240040ec
 8007a38:	24004200 	.word	0x24004200
 8007a3c:	240041fc 	.word	0x240041fc

08007a40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a46:	4b27      	ldr	r3, [pc, #156]	; (8007ae4 <vTaskSwitchContext+0xa4>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a4e:	4b26      	ldr	r3, [pc, #152]	; (8007ae8 <vTaskSwitchContext+0xa8>)
 8007a50:	2201      	movs	r2, #1
 8007a52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a54:	e03f      	b.n	8007ad6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007a56:	4b24      	ldr	r3, [pc, #144]	; (8007ae8 <vTaskSwitchContext+0xa8>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a5c:	4b23      	ldr	r3, [pc, #140]	; (8007aec <vTaskSwitchContext+0xac>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	fab3 f383 	clz	r3, r3
 8007a68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007a6a:	7afb      	ldrb	r3, [r7, #11]
 8007a6c:	f1c3 031f 	rsb	r3, r3, #31
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	491f      	ldr	r1, [pc, #124]	; (8007af0 <vTaskSwitchContext+0xb0>)
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	4613      	mov	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	440b      	add	r3, r1
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10a      	bne.n	8007a9c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	607b      	str	r3, [r7, #4]
}
 8007a98:	bf00      	nop
 8007a9a:	e7fe      	b.n	8007a9a <vTaskSwitchContext+0x5a>
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4a12      	ldr	r2, [pc, #72]	; (8007af0 <vTaskSwitchContext+0xb0>)
 8007aa8:	4413      	add	r3, r2
 8007aaa:	613b      	str	r3, [r7, #16]
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	605a      	str	r2, [r3, #4]
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	3308      	adds	r3, #8
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d104      	bne.n	8007acc <vTaskSwitchContext+0x8c>
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	605a      	str	r2, [r3, #4]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	4a08      	ldr	r2, [pc, #32]	; (8007af4 <vTaskSwitchContext+0xb4>)
 8007ad4:	6013      	str	r3, [r2, #0]
}
 8007ad6:	bf00      	nop
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	24004214 	.word	0x24004214
 8007ae8:	24004200 	.word	0x24004200
 8007aec:	240041f4 	.word	0x240041f4
 8007af0:	240040f0 	.word	0x240040f0
 8007af4:	240040ec 	.word	0x240040ec

08007af8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	60fb      	str	r3, [r7, #12]
}
 8007b1a:	bf00      	nop
 8007b1c:	e7fe      	b.n	8007b1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b1e:	4b07      	ldr	r3, [pc, #28]	; (8007b3c <vTaskPlaceOnEventList+0x44>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3318      	adds	r3, #24
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7fe f9e9 	bl	8005efe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	6838      	ldr	r0, [r7, #0]
 8007b30:	f000 fb7e 	bl	8008230 <prvAddCurrentTaskToDelayedList>
}
 8007b34:	bf00      	nop
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	240040ec 	.word	0x240040ec

08007b40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10a      	bne.n	8007b6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	60fb      	str	r3, [r7, #12]
}
 8007b68:	bf00      	nop
 8007b6a:	e7fe      	b.n	8007b6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	3318      	adds	r3, #24
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fe f9fd 	bl	8005f70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b76:	4b1d      	ldr	r3, [pc, #116]	; (8007bec <xTaskRemoveFromEventList+0xac>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d11c      	bne.n	8007bb8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	3304      	adds	r3, #4
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe f9f4 	bl	8005f70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	409a      	lsls	r2, r3
 8007b90:	4b17      	ldr	r3, [pc, #92]	; (8007bf0 <xTaskRemoveFromEventList+0xb0>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	4a16      	ldr	r2, [pc, #88]	; (8007bf0 <xTaskRemoveFromEventList+0xb0>)
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4a13      	ldr	r2, [pc, #76]	; (8007bf4 <xTaskRemoveFromEventList+0xb4>)
 8007ba8:	441a      	add	r2, r3
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	3304      	adds	r3, #4
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	f7fe f980 	bl	8005eb6 <vListInsertEnd>
 8007bb6:	e005      	b.n	8007bc4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	3318      	adds	r3, #24
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	480e      	ldr	r0, [pc, #56]	; (8007bf8 <xTaskRemoveFromEventList+0xb8>)
 8007bc0:	f7fe f979 	bl	8005eb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc8:	4b0c      	ldr	r3, [pc, #48]	; (8007bfc <xTaskRemoveFromEventList+0xbc>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d905      	bls.n	8007bde <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bd6:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <xTaskRemoveFromEventList+0xc0>)
 8007bd8:	2201      	movs	r2, #1
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e001      	b.n	8007be2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007bde:	2300      	movs	r3, #0
 8007be0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007be2:	697b      	ldr	r3, [r7, #20]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	24004214 	.word	0x24004214
 8007bf0:	240041f4 	.word	0x240041f4
 8007bf4:	240040f0 	.word	0x240040f0
 8007bf8:	240041ac 	.word	0x240041ac
 8007bfc:	240040ec 	.word	0x240040ec
 8007c00:	24004200 	.word	0x24004200

08007c04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c0c:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <vTaskInternalSetTimeOutState+0x24>)
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c14:	4b05      	ldr	r3, [pc, #20]	; (8007c2c <vTaskInternalSetTimeOutState+0x28>)
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	605a      	str	r2, [r3, #4]
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	24004204 	.word	0x24004204
 8007c2c:	240041f0 	.word	0x240041f0

08007c30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b088      	sub	sp, #32
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10a      	bne.n	8007c56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	613b      	str	r3, [r7, #16]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10a      	bne.n	8007c72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	60fb      	str	r3, [r7, #12]
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007c72:	f7fe fad7 	bl	8006224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c76:	4b1d      	ldr	r3, [pc, #116]	; (8007cec <xTaskCheckForTimeOut+0xbc>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8e:	d102      	bne.n	8007c96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c90:	2300      	movs	r3, #0
 8007c92:	61fb      	str	r3, [r7, #28]
 8007c94:	e023      	b.n	8007cde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	4b15      	ldr	r3, [pc, #84]	; (8007cf0 <xTaskCheckForTimeOut+0xc0>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d007      	beq.n	8007cb2 <xTaskCheckForTimeOut+0x82>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	69ba      	ldr	r2, [r7, #24]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d302      	bcc.n	8007cb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cac:	2301      	movs	r3, #1
 8007cae:	61fb      	str	r3, [r7, #28]
 8007cb0:	e015      	b.n	8007cde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d20b      	bcs.n	8007cd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	1ad2      	subs	r2, r2, r3
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff ff9b 	bl	8007c04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	61fb      	str	r3, [r7, #28]
 8007cd2:	e004      	b.n	8007cde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cde:	f7fe fad1 	bl	8006284 <vPortExitCritical>

	return xReturn;
 8007ce2:	69fb      	ldr	r3, [r7, #28]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3720      	adds	r7, #32
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	240041f0 	.word	0x240041f0
 8007cf0:	24004204 	.word	0x24004204

08007cf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007cf8:	4b03      	ldr	r3, [pc, #12]	; (8007d08 <vTaskMissedYield+0x14>)
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]
}
 8007cfe:	bf00      	nop
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	24004200 	.word	0x24004200

08007d0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d14:	f000 f852 	bl	8007dbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d18:	4b06      	ldr	r3, [pc, #24]	; (8007d34 <prvIdleTask+0x28>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d9f9      	bls.n	8007d14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d20:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <prvIdleTask+0x2c>)
 8007d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d30:	e7f0      	b.n	8007d14 <prvIdleTask+0x8>
 8007d32:	bf00      	nop
 8007d34:	240040f0 	.word	0x240040f0
 8007d38:	e000ed04 	.word	0xe000ed04

08007d3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d42:	2300      	movs	r3, #0
 8007d44:	607b      	str	r3, [r7, #4]
 8007d46:	e00c      	b.n	8007d62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4a12      	ldr	r2, [pc, #72]	; (8007d9c <prvInitialiseTaskLists+0x60>)
 8007d54:	4413      	add	r3, r2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fe f880 	bl	8005e5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	607b      	str	r3, [r7, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b06      	cmp	r3, #6
 8007d66:	d9ef      	bls.n	8007d48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d68:	480d      	ldr	r0, [pc, #52]	; (8007da0 <prvInitialiseTaskLists+0x64>)
 8007d6a:	f7fe f877 	bl	8005e5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d6e:	480d      	ldr	r0, [pc, #52]	; (8007da4 <prvInitialiseTaskLists+0x68>)
 8007d70:	f7fe f874 	bl	8005e5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d74:	480c      	ldr	r0, [pc, #48]	; (8007da8 <prvInitialiseTaskLists+0x6c>)
 8007d76:	f7fe f871 	bl	8005e5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d7a:	480c      	ldr	r0, [pc, #48]	; (8007dac <prvInitialiseTaskLists+0x70>)
 8007d7c:	f7fe f86e 	bl	8005e5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d80:	480b      	ldr	r0, [pc, #44]	; (8007db0 <prvInitialiseTaskLists+0x74>)
 8007d82:	f7fe f86b 	bl	8005e5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d86:	4b0b      	ldr	r3, [pc, #44]	; (8007db4 <prvInitialiseTaskLists+0x78>)
 8007d88:	4a05      	ldr	r2, [pc, #20]	; (8007da0 <prvInitialiseTaskLists+0x64>)
 8007d8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <prvInitialiseTaskLists+0x7c>)
 8007d8e:	4a05      	ldr	r2, [pc, #20]	; (8007da4 <prvInitialiseTaskLists+0x68>)
 8007d90:	601a      	str	r2, [r3, #0]
}
 8007d92:	bf00      	nop
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	240040f0 	.word	0x240040f0
 8007da0:	2400417c 	.word	0x2400417c
 8007da4:	24004190 	.word	0x24004190
 8007da8:	240041ac 	.word	0x240041ac
 8007dac:	240041c0 	.word	0x240041c0
 8007db0:	240041d8 	.word	0x240041d8
 8007db4:	240041a4 	.word	0x240041a4
 8007db8:	240041a8 	.word	0x240041a8

08007dbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dc2:	e019      	b.n	8007df8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007dc4:	f7fe fa2e 	bl	8006224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc8:	4b10      	ldr	r3, [pc, #64]	; (8007e0c <prvCheckTasksWaitingTermination+0x50>)
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7fe f8cb 	bl	8005f70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007dda:	4b0d      	ldr	r3, [pc, #52]	; (8007e10 <prvCheckTasksWaitingTermination+0x54>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	4a0b      	ldr	r2, [pc, #44]	; (8007e10 <prvCheckTasksWaitingTermination+0x54>)
 8007de2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007de4:	4b0b      	ldr	r3, [pc, #44]	; (8007e14 <prvCheckTasksWaitingTermination+0x58>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	4a0a      	ldr	r2, [pc, #40]	; (8007e14 <prvCheckTasksWaitingTermination+0x58>)
 8007dec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007dee:	f7fe fa49 	bl	8006284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f810 	bl	8007e18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007df8:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <prvCheckTasksWaitingTermination+0x58>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e1      	bne.n	8007dc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	240041c0 	.word	0x240041c0
 8007e10:	240041ec 	.word	0x240041ec
 8007e14:	240041d4 	.word	0x240041d4

08007e18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d108      	bne.n	8007e3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fd fef6 	bl	8005c20 <vPortFree>
				vPortFree( pxTCB );
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7fd fef3 	bl	8005c20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e3a:	e018      	b.n	8007e6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d103      	bne.n	8007e4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7fd feea 	bl	8005c20 <vPortFree>
	}
 8007e4c:	e00f      	b.n	8007e6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d00a      	beq.n	8007e6e <prvDeleteTCB+0x56>
	__asm volatile
 8007e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5c:	f383 8811 	msr	BASEPRI, r3
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	60fb      	str	r3, [r7, #12]
}
 8007e6a:	bf00      	nop
 8007e6c:	e7fe      	b.n	8007e6c <prvDeleteTCB+0x54>
	}
 8007e6e:	bf00      	nop
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e7e:	4b0c      	ldr	r3, [pc, #48]	; (8007eb0 <prvResetNextTaskUnblockTime+0x38>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d104      	bne.n	8007e92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e88:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8007e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e90:	e008      	b.n	8007ea4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e92:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <prvResetNextTaskUnblockTime+0x38>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	4a04      	ldr	r2, [pc, #16]	; (8007eb4 <prvResetNextTaskUnblockTime+0x3c>)
 8007ea2:	6013      	str	r3, [r2, #0]
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	240041a4 	.word	0x240041a4
 8007eb4:	2400420c 	.word	0x2400420c

08007eb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ebe:	4b0b      	ldr	r3, [pc, #44]	; (8007eec <xTaskGetSchedulerState+0x34>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d102      	bne.n	8007ecc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	607b      	str	r3, [r7, #4]
 8007eca:	e008      	b.n	8007ede <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ecc:	4b08      	ldr	r3, [pc, #32]	; (8007ef0 <xTaskGetSchedulerState+0x38>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d102      	bne.n	8007eda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	607b      	str	r3, [r7, #4]
 8007ed8:	e001      	b.n	8007ede <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007eda:	2300      	movs	r3, #0
 8007edc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ede:	687b      	ldr	r3, [r7, #4]
	}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	240041f8 	.word	0x240041f8
 8007ef0:	24004214 	.word	0x24004214

08007ef4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f00:	2300      	movs	r3, #0
 8007f02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d05e      	beq.n	8007fc8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f0e:	4b31      	ldr	r3, [pc, #196]	; (8007fd4 <xTaskPriorityInherit+0xe0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d24e      	bcs.n	8007fb6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	db06      	blt.n	8007f2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f20:	4b2c      	ldr	r3, [pc, #176]	; (8007fd4 <xTaskPriorityInherit+0xe0>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f26:	f1c3 0207 	rsb	r2, r3, #7
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	6959      	ldr	r1, [r3, #20]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f36:	4613      	mov	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4a26      	ldr	r2, [pc, #152]	; (8007fd8 <xTaskPriorityInherit+0xe4>)
 8007f40:	4413      	add	r3, r2
 8007f42:	4299      	cmp	r1, r3
 8007f44:	d12f      	bne.n	8007fa6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	3304      	adds	r3, #4
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe f810 	bl	8005f70 <uxListRemove>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10a      	bne.n	8007f6c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f60:	43da      	mvns	r2, r3
 8007f62:	4b1e      	ldr	r3, [pc, #120]	; (8007fdc <xTaskPriorityInherit+0xe8>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4013      	ands	r3, r2
 8007f68:	4a1c      	ldr	r2, [pc, #112]	; (8007fdc <xTaskPriorityInherit+0xe8>)
 8007f6a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f6c:	4b19      	ldr	r3, [pc, #100]	; (8007fd4 <xTaskPriorityInherit+0xe0>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	409a      	lsls	r2, r3
 8007f7e:	4b17      	ldr	r3, [pc, #92]	; (8007fdc <xTaskPriorityInherit+0xe8>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	4a15      	ldr	r2, [pc, #84]	; (8007fdc <xTaskPriorityInherit+0xe8>)
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4a10      	ldr	r2, [pc, #64]	; (8007fd8 <xTaskPriorityInherit+0xe4>)
 8007f96:	441a      	add	r2, r3
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	f7fd ff89 	bl	8005eb6 <vListInsertEnd>
 8007fa4:	e004      	b.n	8007fb0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fa6:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <xTaskPriorityInherit+0xe0>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	e008      	b.n	8007fc8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fba:	4b06      	ldr	r3, [pc, #24]	; (8007fd4 <xTaskPriorityInherit+0xe0>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d201      	bcs.n	8007fc8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
	}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	240040ec 	.word	0x240040ec
 8007fd8:	240040f0 	.word	0x240040f0
 8007fdc:	240041f4 	.word	0x240041f4

08007fe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fec:	2300      	movs	r3, #0
 8007fee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d06e      	beq.n	80080d4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ff6:	4b3a      	ldr	r3, [pc, #232]	; (80080e0 <xTaskPriorityDisinherit+0x100>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d00a      	beq.n	8008016 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	60fb      	str	r3, [r7, #12]
}
 8008012:	bf00      	nop
 8008014:	e7fe      	b.n	8008014 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10a      	bne.n	8008034 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	60bb      	str	r3, [r7, #8]
}
 8008030:	bf00      	nop
 8008032:	e7fe      	b.n	8008032 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008038:	1e5a      	subs	r2, r3, #1
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008046:	429a      	cmp	r2, r3
 8008048:	d044      	beq.n	80080d4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800804e:	2b00      	cmp	r3, #0
 8008050:	d140      	bne.n	80080d4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	3304      	adds	r3, #4
 8008056:	4618      	mov	r0, r3
 8008058:	f7fd ff8a 	bl	8005f70 <uxListRemove>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d115      	bne.n	800808e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008066:	491f      	ldr	r1, [pc, #124]	; (80080e4 <xTaskPriorityDisinherit+0x104>)
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	440b      	add	r3, r1
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <xTaskPriorityDisinherit+0xae>
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	2201      	movs	r2, #1
 800807e:	fa02 f303 	lsl.w	r3, r2, r3
 8008082:	43da      	mvns	r2, r3
 8008084:	4b18      	ldr	r3, [pc, #96]	; (80080e8 <xTaskPriorityDisinherit+0x108>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4013      	ands	r3, r2
 800808a:	4a17      	ldr	r2, [pc, #92]	; (80080e8 <xTaskPriorityDisinherit+0x108>)
 800808c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809a:	f1c3 0207 	rsb	r2, r3, #7
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a6:	2201      	movs	r2, #1
 80080a8:	409a      	lsls	r2, r3
 80080aa:	4b0f      	ldr	r3, [pc, #60]	; (80080e8 <xTaskPriorityDisinherit+0x108>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	4a0d      	ldr	r2, [pc, #52]	; (80080e8 <xTaskPriorityDisinherit+0x108>)
 80080b2:	6013      	str	r3, [r2, #0]
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b8:	4613      	mov	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4a08      	ldr	r2, [pc, #32]	; (80080e4 <xTaskPriorityDisinherit+0x104>)
 80080c2:	441a      	add	r2, r3
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	3304      	adds	r3, #4
 80080c8:	4619      	mov	r1, r3
 80080ca:	4610      	mov	r0, r2
 80080cc:	f7fd fef3 	bl	8005eb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080d0:	2301      	movs	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080d4:	697b      	ldr	r3, [r7, #20]
	}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	240040ec 	.word	0x240040ec
 80080e4:	240040f0 	.word	0x240040f0
 80080e8:	240041f4 	.word	0x240041f4

080080ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80080fa:	2301      	movs	r3, #1
 80080fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d077      	beq.n	80081f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	60fb      	str	r3, [r7, #12]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	429a      	cmp	r2, r3
 800812a:	d902      	bls.n	8008132 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	61fb      	str	r3, [r7, #28]
 8008130:	e002      	b.n	8008138 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008136:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	69fa      	ldr	r2, [r7, #28]
 800813e:	429a      	cmp	r2, r3
 8008140:	d058      	beq.n	80081f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	429a      	cmp	r2, r3
 800814a:	d153      	bne.n	80081f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800814c:	4b2b      	ldr	r3, [pc, #172]	; (80081fc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	429a      	cmp	r2, r3
 8008154:	d10a      	bne.n	800816c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	60bb      	str	r3, [r7, #8]
}
 8008168:	bf00      	nop
 800816a:	e7fe      	b.n	800816a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	69fa      	ldr	r2, [r7, #28]
 8008176:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	2b00      	cmp	r3, #0
 800817e:	db04      	blt.n	800818a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	f1c3 0207 	rsb	r2, r3, #7
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	6959      	ldr	r1, [r3, #20]
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	4613      	mov	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4a19      	ldr	r2, [pc, #100]	; (8008200 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800819a:	4413      	add	r3, r2
 800819c:	4299      	cmp	r1, r3
 800819e:	d129      	bne.n	80081f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	3304      	adds	r3, #4
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fd fee3 	bl	8005f70 <uxListRemove>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10a      	bne.n	80081c6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b4:	2201      	movs	r2, #1
 80081b6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ba:	43da      	mvns	r2, r3
 80081bc:	4b11      	ldr	r3, [pc, #68]	; (8008204 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4013      	ands	r3, r2
 80081c2:	4a10      	ldr	r2, [pc, #64]	; (8008204 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80081c4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ca:	2201      	movs	r2, #1
 80081cc:	409a      	lsls	r2, r3
 80081ce:	4b0d      	ldr	r3, [pc, #52]	; (8008204 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	4a0b      	ldr	r2, [pc, #44]	; (8008204 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081dc:	4613      	mov	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4a06      	ldr	r2, [pc, #24]	; (8008200 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80081e6:	441a      	add	r2, r3
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	3304      	adds	r3, #4
 80081ec:	4619      	mov	r1, r3
 80081ee:	4610      	mov	r0, r2
 80081f0:	f7fd fe61 	bl	8005eb6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081f4:	bf00      	nop
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	240040ec 	.word	0x240040ec
 8008200:	240040f0 	.word	0x240040f0
 8008204:	240041f4 	.word	0x240041f4

08008208 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008208:	b480      	push	{r7}
 800820a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800820c:	4b07      	ldr	r3, [pc, #28]	; (800822c <pvTaskIncrementMutexHeldCount+0x24>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008214:	4b05      	ldr	r3, [pc, #20]	; (800822c <pvTaskIncrementMutexHeldCount+0x24>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800821a:	3201      	adds	r2, #1
 800821c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800821e:	4b03      	ldr	r3, [pc, #12]	; (800822c <pvTaskIncrementMutexHeldCount+0x24>)
 8008220:	681b      	ldr	r3, [r3, #0]
	}
 8008222:	4618      	mov	r0, r3
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	240040ec 	.word	0x240040ec

08008230 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800823a:	4b29      	ldr	r3, [pc, #164]	; (80082e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008240:	4b28      	ldr	r3, [pc, #160]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3304      	adds	r3, #4
 8008246:	4618      	mov	r0, r3
 8008248:	f7fd fe92 	bl	8005f70 <uxListRemove>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10b      	bne.n	800826a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008252:	4b24      	ldr	r3, [pc, #144]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	2201      	movs	r2, #1
 800825a:	fa02 f303 	lsl.w	r3, r2, r3
 800825e:	43da      	mvns	r2, r3
 8008260:	4b21      	ldr	r3, [pc, #132]	; (80082e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4013      	ands	r3, r2
 8008266:	4a20      	ldr	r2, [pc, #128]	; (80082e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008268:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008270:	d10a      	bne.n	8008288 <prvAddCurrentTaskToDelayedList+0x58>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d007      	beq.n	8008288 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008278:	4b1a      	ldr	r3, [pc, #104]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3304      	adds	r3, #4
 800827e:	4619      	mov	r1, r3
 8008280:	481a      	ldr	r0, [pc, #104]	; (80082ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8008282:	f7fd fe18 	bl	8005eb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008286:	e026      	b.n	80082d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4413      	add	r3, r2
 800828e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008290:	4b14      	ldr	r3, [pc, #80]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	429a      	cmp	r2, r3
 800829e:	d209      	bcs.n	80082b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082a0:	4b13      	ldr	r3, [pc, #76]	; (80082f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3304      	adds	r3, #4
 80082aa:	4619      	mov	r1, r3
 80082ac:	4610      	mov	r0, r2
 80082ae:	f7fd fe26 	bl	8005efe <vListInsert>
}
 80082b2:	e010      	b.n	80082d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082b4:	4b0f      	ldr	r3, [pc, #60]	; (80082f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3304      	adds	r3, #4
 80082be:	4619      	mov	r1, r3
 80082c0:	4610      	mov	r0, r2
 80082c2:	f7fd fe1c 	bl	8005efe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082c6:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d202      	bcs.n	80082d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80082d0:	4a09      	ldr	r2, [pc, #36]	; (80082f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	6013      	str	r3, [r2, #0]
}
 80082d6:	bf00      	nop
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	240041f0 	.word	0x240041f0
 80082e4:	240040ec 	.word	0x240040ec
 80082e8:	240041f4 	.word	0x240041f4
 80082ec:	240041d8 	.word	0x240041d8
 80082f0:	240041a8 	.word	0x240041a8
 80082f4:	240041a4 	.word	0x240041a4
 80082f8:	2400420c 	.word	0x2400420c

080082fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008306:	88fb      	ldrh	r3, [r7, #6]
 8008308:	021b      	lsls	r3, r3, #8
 800830a:	b21a      	sxth	r2, r3
 800830c:	88fb      	ldrh	r3, [r7, #6]
 800830e:	0a1b      	lsrs	r3, r3, #8
 8008310:	b29b      	uxth	r3, r3
 8008312:	b21b      	sxth	r3, r3
 8008314:	4313      	orrs	r3, r2
 8008316:	b21b      	sxth	r3, r3
 8008318:	b29b      	uxth	r3, r3
}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	061a      	lsls	r2, r3, #24
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	021b      	lsls	r3, r3, #8
 8008336:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	0a1b      	lsrs	r3, r3, #8
 8008340:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008344:	431a      	orrs	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	0e1b      	lsrs	r3, r3, #24
 800834a:	4313      	orrs	r3, r2
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8008360:	4915      	ldr	r1, [pc, #84]	; (80083b8 <etharp_free_entry+0x60>)
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	4613      	mov	r3, r2
 8008366:	005b      	lsls	r3, r3, #1
 8008368:	4413      	add	r3, r2
 800836a:	00db      	lsls	r3, r3, #3
 800836c:	440b      	add	r3, r1
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d013      	beq.n	800839c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8008374:	4910      	ldr	r1, [pc, #64]	; (80083b8 <etharp_free_entry+0x60>)
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	4613      	mov	r3, r2
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	4413      	add	r3, r2
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	440b      	add	r3, r1
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4618      	mov	r0, r3
 8008386:	f003 ff5f 	bl	800c248 <pbuf_free>
    arp_table[i].q = NULL;
 800838a:	490b      	ldr	r1, [pc, #44]	; (80083b8 <etharp_free_entry+0x60>)
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	4613      	mov	r3, r2
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	4413      	add	r3, r2
 8008394:	00db      	lsls	r3, r3, #3
 8008396:	440b      	add	r3, r1
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800839c:	4906      	ldr	r1, [pc, #24]	; (80083b8 <etharp_free_entry+0x60>)
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	4613      	mov	r3, r2
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	4413      	add	r3, r2
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	440b      	add	r3, r1
 80083aa:	3314      	adds	r3, #20
 80083ac:	2200      	movs	r2, #0
 80083ae:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80083b0:	bf00      	nop
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	24004218 	.word	0x24004218

080083bc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80083c2:	2300      	movs	r3, #0
 80083c4:	607b      	str	r3, [r7, #4]
 80083c6:	e096      	b.n	80084f6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80083c8:	494f      	ldr	r1, [pc, #316]	; (8008508 <etharp_tmr+0x14c>)
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	4413      	add	r3, r2
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	440b      	add	r3, r1
 80083d6:	3314      	adds	r3, #20
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80083dc:	78fb      	ldrb	r3, [r7, #3]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 8086 	beq.w	80084f0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80083e4:	4948      	ldr	r1, [pc, #288]	; (8008508 <etharp_tmr+0x14c>)
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	4613      	mov	r3, r2
 80083ea:	005b      	lsls	r3, r3, #1
 80083ec:	4413      	add	r3, r2
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	440b      	add	r3, r1
 80083f2:	3312      	adds	r3, #18
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	3301      	adds	r3, #1
 80083f8:	b298      	uxth	r0, r3
 80083fa:	4943      	ldr	r1, [pc, #268]	; (8008508 <etharp_tmr+0x14c>)
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	4613      	mov	r3, r2
 8008400:	005b      	lsls	r3, r3, #1
 8008402:	4413      	add	r3, r2
 8008404:	00db      	lsls	r3, r3, #3
 8008406:	440b      	add	r3, r1
 8008408:	3312      	adds	r3, #18
 800840a:	4602      	mov	r2, r0
 800840c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800840e:	493e      	ldr	r1, [pc, #248]	; (8008508 <etharp_tmr+0x14c>)
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	4613      	mov	r3, r2
 8008414:	005b      	lsls	r3, r3, #1
 8008416:	4413      	add	r3, r2
 8008418:	00db      	lsls	r3, r3, #3
 800841a:	440b      	add	r3, r1
 800841c:	3312      	adds	r3, #18
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008424:	d215      	bcs.n	8008452 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008426:	4938      	ldr	r1, [pc, #224]	; (8008508 <etharp_tmr+0x14c>)
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	4613      	mov	r3, r2
 800842c:	005b      	lsls	r3, r3, #1
 800842e:	4413      	add	r3, r2
 8008430:	00db      	lsls	r3, r3, #3
 8008432:	440b      	add	r3, r1
 8008434:	3314      	adds	r3, #20
 8008436:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008438:	2b01      	cmp	r3, #1
 800843a:	d10e      	bne.n	800845a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800843c:	4932      	ldr	r1, [pc, #200]	; (8008508 <etharp_tmr+0x14c>)
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	4613      	mov	r3, r2
 8008442:	005b      	lsls	r3, r3, #1
 8008444:	4413      	add	r3, r2
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	440b      	add	r3, r1
 800844a:	3312      	adds	r3, #18
 800844c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800844e:	2b04      	cmp	r3, #4
 8008450:	d903      	bls.n	800845a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f7ff ff80 	bl	8008358 <etharp_free_entry>
 8008458:	e04a      	b.n	80084f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800845a:	492b      	ldr	r1, [pc, #172]	; (8008508 <etharp_tmr+0x14c>)
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	4613      	mov	r3, r2
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	4413      	add	r3, r2
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	440b      	add	r3, r1
 8008468:	3314      	adds	r3, #20
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b03      	cmp	r3, #3
 800846e:	d10a      	bne.n	8008486 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8008470:	4925      	ldr	r1, [pc, #148]	; (8008508 <etharp_tmr+0x14c>)
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	4613      	mov	r3, r2
 8008476:	005b      	lsls	r3, r3, #1
 8008478:	4413      	add	r3, r2
 800847a:	00db      	lsls	r3, r3, #3
 800847c:	440b      	add	r3, r1
 800847e:	3314      	adds	r3, #20
 8008480:	2204      	movs	r2, #4
 8008482:	701a      	strb	r2, [r3, #0]
 8008484:	e034      	b.n	80084f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8008486:	4920      	ldr	r1, [pc, #128]	; (8008508 <etharp_tmr+0x14c>)
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	4613      	mov	r3, r2
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	4413      	add	r3, r2
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	440b      	add	r3, r1
 8008494:	3314      	adds	r3, #20
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	2b04      	cmp	r3, #4
 800849a:	d10a      	bne.n	80084b2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800849c:	491a      	ldr	r1, [pc, #104]	; (8008508 <etharp_tmr+0x14c>)
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	4613      	mov	r3, r2
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	4413      	add	r3, r2
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	440b      	add	r3, r1
 80084aa:	3314      	adds	r3, #20
 80084ac:	2202      	movs	r2, #2
 80084ae:	701a      	strb	r2, [r3, #0]
 80084b0:	e01e      	b.n	80084f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80084b2:	4915      	ldr	r1, [pc, #84]	; (8008508 <etharp_tmr+0x14c>)
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	4613      	mov	r3, r2
 80084b8:	005b      	lsls	r3, r3, #1
 80084ba:	4413      	add	r3, r2
 80084bc:	00db      	lsls	r3, r3, #3
 80084be:	440b      	add	r3, r1
 80084c0:	3314      	adds	r3, #20
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d113      	bne.n	80084f0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80084c8:	490f      	ldr	r1, [pc, #60]	; (8008508 <etharp_tmr+0x14c>)
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	4613      	mov	r3, r2
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	4413      	add	r3, r2
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	440b      	add	r3, r1
 80084d6:	3308      	adds	r3, #8
 80084d8:	6818      	ldr	r0, [r3, #0]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	4613      	mov	r3, r2
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	4413      	add	r3, r2
 80084e2:	00db      	lsls	r3, r3, #3
 80084e4:	4a08      	ldr	r2, [pc, #32]	; (8008508 <etharp_tmr+0x14c>)
 80084e6:	4413      	add	r3, r2
 80084e8:	3304      	adds	r3, #4
 80084ea:	4619      	mov	r1, r3
 80084ec:	f000 fe6e 	bl	80091cc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3301      	adds	r3, #1
 80084f4:	607b      	str	r3, [r7, #4]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b09      	cmp	r3, #9
 80084fa:	f77f af65 	ble.w	80083c8 <etharp_tmr+0xc>
      }
    }
  }
}
 80084fe:	bf00      	nop
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	24004218 	.word	0x24004218

0800850c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b08a      	sub	sp, #40	; 0x28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	460b      	mov	r3, r1
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800851a:	230a      	movs	r3, #10
 800851c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800851e:	230a      	movs	r3, #10
 8008520:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8008522:	230a      	movs	r3, #10
 8008524:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8008526:	2300      	movs	r3, #0
 8008528:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800852a:	230a      	movs	r3, #10
 800852c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	83bb      	strh	r3, [r7, #28]
 8008532:	2300      	movs	r3, #0
 8008534:	837b      	strh	r3, [r7, #26]
 8008536:	2300      	movs	r3, #0
 8008538:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800853a:	2300      	movs	r3, #0
 800853c:	843b      	strh	r3, [r7, #32]
 800853e:	e0ae      	b.n	800869e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8008540:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008544:	49a6      	ldr	r1, [pc, #664]	; (80087e0 <etharp_find_entry+0x2d4>)
 8008546:	4613      	mov	r3, r2
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	4413      	add	r3, r2
 800854c:	00db      	lsls	r3, r3, #3
 800854e:	440b      	add	r3, r1
 8008550:	3314      	adds	r3, #20
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008556:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800855a:	2b0a      	cmp	r3, #10
 800855c:	d105      	bne.n	800856a <etharp_find_entry+0x5e>
 800855e:	7dfb      	ldrb	r3, [r7, #23]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d102      	bne.n	800856a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8008564:	8c3b      	ldrh	r3, [r7, #32]
 8008566:	847b      	strh	r3, [r7, #34]	; 0x22
 8008568:	e095      	b.n	8008696 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800856a:	7dfb      	ldrb	r3, [r7, #23]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 8092 	beq.w	8008696 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d009      	beq.n	800858c <etharp_find_entry+0x80>
 8008578:	7dfb      	ldrb	r3, [r7, #23]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d806      	bhi.n	800858c <etharp_find_entry+0x80>
 800857e:	4b99      	ldr	r3, [pc, #612]	; (80087e4 <etharp_find_entry+0x2d8>)
 8008580:	f240 1223 	movw	r2, #291	; 0x123
 8008584:	4998      	ldr	r1, [pc, #608]	; (80087e8 <etharp_find_entry+0x2dc>)
 8008586:	4899      	ldr	r0, [pc, #612]	; (80087ec <etharp_find_entry+0x2e0>)
 8008588:	f00a f88a 	bl	80126a0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d020      	beq.n	80085d4 <etharp_find_entry+0xc8>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6819      	ldr	r1, [r3, #0]
 8008596:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800859a:	4891      	ldr	r0, [pc, #580]	; (80087e0 <etharp_find_entry+0x2d4>)
 800859c:	4613      	mov	r3, r2
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	4413      	add	r3, r2
 80085a2:	00db      	lsls	r3, r3, #3
 80085a4:	4403      	add	r3, r0
 80085a6:	3304      	adds	r3, #4
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4299      	cmp	r1, r3
 80085ac:	d112      	bne.n	80085d4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00c      	beq.n	80085ce <etharp_find_entry+0xc2>
 80085b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80085b8:	4989      	ldr	r1, [pc, #548]	; (80087e0 <etharp_find_entry+0x2d4>)
 80085ba:	4613      	mov	r3, r2
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	4413      	add	r3, r2
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	440b      	add	r3, r1
 80085c4:	3308      	adds	r3, #8
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d102      	bne.n	80085d4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80085ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80085d2:	e100      	b.n	80087d6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d140      	bne.n	800865c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80085da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80085de:	4980      	ldr	r1, [pc, #512]	; (80087e0 <etharp_find_entry+0x2d4>)
 80085e0:	4613      	mov	r3, r2
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	4413      	add	r3, r2
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	440b      	add	r3, r1
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d01a      	beq.n	8008626 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80085f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80085f4:	497a      	ldr	r1, [pc, #488]	; (80087e0 <etharp_find_entry+0x2d4>)
 80085f6:	4613      	mov	r3, r2
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	4413      	add	r3, r2
 80085fc:	00db      	lsls	r3, r3, #3
 80085fe:	440b      	add	r3, r1
 8008600:	3312      	adds	r3, #18
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	8bba      	ldrh	r2, [r7, #28]
 8008606:	429a      	cmp	r2, r3
 8008608:	d845      	bhi.n	8008696 <etharp_find_entry+0x18a>
            old_queue = i;
 800860a:	8c3b      	ldrh	r3, [r7, #32]
 800860c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800860e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008612:	4973      	ldr	r1, [pc, #460]	; (80087e0 <etharp_find_entry+0x2d4>)
 8008614:	4613      	mov	r3, r2
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	4413      	add	r3, r2
 800861a:	00db      	lsls	r3, r3, #3
 800861c:	440b      	add	r3, r1
 800861e:	3312      	adds	r3, #18
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	83bb      	strh	r3, [r7, #28]
 8008624:	e037      	b.n	8008696 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8008626:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800862a:	496d      	ldr	r1, [pc, #436]	; (80087e0 <etharp_find_entry+0x2d4>)
 800862c:	4613      	mov	r3, r2
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	4413      	add	r3, r2
 8008632:	00db      	lsls	r3, r3, #3
 8008634:	440b      	add	r3, r1
 8008636:	3312      	adds	r3, #18
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	8b7a      	ldrh	r2, [r7, #26]
 800863c:	429a      	cmp	r2, r3
 800863e:	d82a      	bhi.n	8008696 <etharp_find_entry+0x18a>
            old_pending = i;
 8008640:	8c3b      	ldrh	r3, [r7, #32]
 8008642:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8008644:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008648:	4965      	ldr	r1, [pc, #404]	; (80087e0 <etharp_find_entry+0x2d4>)
 800864a:	4613      	mov	r3, r2
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	4413      	add	r3, r2
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	440b      	add	r3, r1
 8008654:	3312      	adds	r3, #18
 8008656:	881b      	ldrh	r3, [r3, #0]
 8008658:	837b      	strh	r3, [r7, #26]
 800865a:	e01c      	b.n	8008696 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800865c:	7dfb      	ldrb	r3, [r7, #23]
 800865e:	2b01      	cmp	r3, #1
 8008660:	d919      	bls.n	8008696 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8008662:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008666:	495e      	ldr	r1, [pc, #376]	; (80087e0 <etharp_find_entry+0x2d4>)
 8008668:	4613      	mov	r3, r2
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	4413      	add	r3, r2
 800866e:	00db      	lsls	r3, r3, #3
 8008670:	440b      	add	r3, r1
 8008672:	3312      	adds	r3, #18
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	8b3a      	ldrh	r2, [r7, #24]
 8008678:	429a      	cmp	r2, r3
 800867a:	d80c      	bhi.n	8008696 <etharp_find_entry+0x18a>
            old_stable = i;
 800867c:	8c3b      	ldrh	r3, [r7, #32]
 800867e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8008680:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008684:	4956      	ldr	r1, [pc, #344]	; (80087e0 <etharp_find_entry+0x2d4>)
 8008686:	4613      	mov	r3, r2
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	4413      	add	r3, r2
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	440b      	add	r3, r1
 8008690:	3312      	adds	r3, #18
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008696:	8c3b      	ldrh	r3, [r7, #32]
 8008698:	3301      	adds	r3, #1
 800869a:	b29b      	uxth	r3, r3
 800869c:	843b      	strh	r3, [r7, #32]
 800869e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80086a2:	2b09      	cmp	r3, #9
 80086a4:	f77f af4c 	ble.w	8008540 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80086a8:	7afb      	ldrb	r3, [r7, #11]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d108      	bne.n	80086c4 <etharp_find_entry+0x1b8>
 80086b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80086b6:	2b0a      	cmp	r3, #10
 80086b8:	d107      	bne.n	80086ca <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80086ba:	7afb      	ldrb	r3, [r7, #11]
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d102      	bne.n	80086ca <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80086c4:	f04f 33ff 	mov.w	r3, #4294967295
 80086c8:	e085      	b.n	80087d6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80086ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80086ce:	2b09      	cmp	r3, #9
 80086d0:	dc02      	bgt.n	80086d8 <etharp_find_entry+0x1cc>
    i = empty;
 80086d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80086d4:	843b      	strh	r3, [r7, #32]
 80086d6:	e039      	b.n	800874c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80086d8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80086dc:	2b09      	cmp	r3, #9
 80086de:	dc14      	bgt.n	800870a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80086e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086e2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80086e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80086e8:	493d      	ldr	r1, [pc, #244]	; (80087e0 <etharp_find_entry+0x2d4>)
 80086ea:	4613      	mov	r3, r2
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	4413      	add	r3, r2
 80086f0:	00db      	lsls	r3, r3, #3
 80086f2:	440b      	add	r3, r1
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d018      	beq.n	800872c <etharp_find_entry+0x220>
 80086fa:	4b3a      	ldr	r3, [pc, #232]	; (80087e4 <etharp_find_entry+0x2d8>)
 80086fc:	f240 126d 	movw	r2, #365	; 0x16d
 8008700:	493b      	ldr	r1, [pc, #236]	; (80087f0 <etharp_find_entry+0x2e4>)
 8008702:	483a      	ldr	r0, [pc, #232]	; (80087ec <etharp_find_entry+0x2e0>)
 8008704:	f009 ffcc 	bl	80126a0 <iprintf>
 8008708:	e010      	b.n	800872c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800870a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800870e:	2b09      	cmp	r3, #9
 8008710:	dc02      	bgt.n	8008718 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8008712:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008714:	843b      	strh	r3, [r7, #32]
 8008716:	e009      	b.n	800872c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8008718:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800871c:	2b09      	cmp	r3, #9
 800871e:	dc02      	bgt.n	8008726 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8008720:	8bfb      	ldrh	r3, [r7, #30]
 8008722:	843b      	strh	r3, [r7, #32]
 8008724:	e002      	b.n	800872c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8008726:	f04f 33ff 	mov.w	r3, #4294967295
 800872a:	e054      	b.n	80087d6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800872c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008730:	2b09      	cmp	r3, #9
 8008732:	dd06      	ble.n	8008742 <etharp_find_entry+0x236>
 8008734:	4b2b      	ldr	r3, [pc, #172]	; (80087e4 <etharp_find_entry+0x2d8>)
 8008736:	f240 127f 	movw	r2, #383	; 0x17f
 800873a:	492e      	ldr	r1, [pc, #184]	; (80087f4 <etharp_find_entry+0x2e8>)
 800873c:	482b      	ldr	r0, [pc, #172]	; (80087ec <etharp_find_entry+0x2e0>)
 800873e:	f009 ffaf 	bl	80126a0 <iprintf>
    etharp_free_entry(i);
 8008742:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff fe06 	bl	8008358 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800874c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008750:	2b09      	cmp	r3, #9
 8008752:	dd06      	ble.n	8008762 <etharp_find_entry+0x256>
 8008754:	4b23      	ldr	r3, [pc, #140]	; (80087e4 <etharp_find_entry+0x2d8>)
 8008756:	f240 1283 	movw	r2, #387	; 0x183
 800875a:	4926      	ldr	r1, [pc, #152]	; (80087f4 <etharp_find_entry+0x2e8>)
 800875c:	4823      	ldr	r0, [pc, #140]	; (80087ec <etharp_find_entry+0x2e0>)
 800875e:	f009 ff9f 	bl	80126a0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8008762:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008766:	491e      	ldr	r1, [pc, #120]	; (80087e0 <etharp_find_entry+0x2d4>)
 8008768:	4613      	mov	r3, r2
 800876a:	005b      	lsls	r3, r3, #1
 800876c:	4413      	add	r3, r2
 800876e:	00db      	lsls	r3, r3, #3
 8008770:	440b      	add	r3, r1
 8008772:	3314      	adds	r3, #20
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d006      	beq.n	8008788 <etharp_find_entry+0x27c>
 800877a:	4b1a      	ldr	r3, [pc, #104]	; (80087e4 <etharp_find_entry+0x2d8>)
 800877c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8008780:	491d      	ldr	r1, [pc, #116]	; (80087f8 <etharp_find_entry+0x2ec>)
 8008782:	481a      	ldr	r0, [pc, #104]	; (80087ec <etharp_find_entry+0x2e0>)
 8008784:	f009 ff8c 	bl	80126a0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00b      	beq.n	80087a6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800878e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6819      	ldr	r1, [r3, #0]
 8008796:	4812      	ldr	r0, [pc, #72]	; (80087e0 <etharp_find_entry+0x2d4>)
 8008798:	4613      	mov	r3, r2
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	4413      	add	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	4403      	add	r3, r0
 80087a2:	3304      	adds	r3, #4
 80087a4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80087a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80087aa:	490d      	ldr	r1, [pc, #52]	; (80087e0 <etharp_find_entry+0x2d4>)
 80087ac:	4613      	mov	r3, r2
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	4413      	add	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	440b      	add	r3, r1
 80087b6:	3312      	adds	r3, #18
 80087b8:	2200      	movs	r2, #0
 80087ba:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80087bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80087c0:	4907      	ldr	r1, [pc, #28]	; (80087e0 <etharp_find_entry+0x2d4>)
 80087c2:	4613      	mov	r3, r2
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	4413      	add	r3, r2
 80087c8:	00db      	lsls	r3, r3, #3
 80087ca:	440b      	add	r3, r1
 80087cc:	3308      	adds	r3, #8
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80087d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3728      	adds	r7, #40	; 0x28
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	24004218 	.word	0x24004218
 80087e4:	08013824 	.word	0x08013824
 80087e8:	0801389c 	.word	0x0801389c
 80087ec:	080138dc 	.word	0x080138dc
 80087f0:	08013904 	.word	0x08013904
 80087f4:	0801391c 	.word	0x0801391c
 80087f8:	08013930 	.word	0x08013930

080087fc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b088      	sub	sp, #32
 8008800:	af02      	add	r7, sp, #8
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008810:	2b06      	cmp	r3, #6
 8008812:	d006      	beq.n	8008822 <etharp_update_arp_entry+0x26>
 8008814:	4b48      	ldr	r3, [pc, #288]	; (8008938 <etharp_update_arp_entry+0x13c>)
 8008816:	f240 12a9 	movw	r2, #425	; 0x1a9
 800881a:	4948      	ldr	r1, [pc, #288]	; (800893c <etharp_update_arp_entry+0x140>)
 800881c:	4848      	ldr	r0, [pc, #288]	; (8008940 <etharp_update_arp_entry+0x144>)
 800881e:	f009 ff3f 	bl	80126a0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d012      	beq.n	800884e <etharp_update_arp_entry+0x52>
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00e      	beq.n	800884e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68f9      	ldr	r1, [r7, #12]
 8008836:	4618      	mov	r0, r3
 8008838:	f001 face 	bl	8009dd8 <ip4_addr_isbroadcast_u32>
 800883c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800883e:	2b00      	cmp	r3, #0
 8008840:	d105      	bne.n	800884e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800884a:	2be0      	cmp	r3, #224	; 0xe0
 800884c:	d102      	bne.n	8008854 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800884e:	f06f 030f 	mvn.w	r3, #15
 8008852:	e06c      	b.n	800892e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	4619      	mov	r1, r3
 800885a:	68b8      	ldr	r0, [r7, #8]
 800885c:	f7ff fe56 	bl	800850c <etharp_find_entry>
 8008860:	4603      	mov	r3, r0
 8008862:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8008864:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008868:	2b00      	cmp	r3, #0
 800886a:	da02      	bge.n	8008872 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800886c:	8afb      	ldrh	r3, [r7, #22]
 800886e:	b25b      	sxtb	r3, r3
 8008870:	e05d      	b.n	800892e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8008872:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008876:	4933      	ldr	r1, [pc, #204]	; (8008944 <etharp_update_arp_entry+0x148>)
 8008878:	4613      	mov	r3, r2
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	4413      	add	r3, r2
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	440b      	add	r3, r1
 8008882:	3314      	adds	r3, #20
 8008884:	2202      	movs	r2, #2
 8008886:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8008888:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800888c:	492d      	ldr	r1, [pc, #180]	; (8008944 <etharp_update_arp_entry+0x148>)
 800888e:	4613      	mov	r3, r2
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	4413      	add	r3, r2
 8008894:	00db      	lsls	r3, r3, #3
 8008896:	440b      	add	r3, r1
 8008898:	3308      	adds	r3, #8
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800889e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80088a2:	4613      	mov	r3, r2
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	4413      	add	r3, r2
 80088a8:	00db      	lsls	r3, r3, #3
 80088aa:	3308      	adds	r3, #8
 80088ac:	4a25      	ldr	r2, [pc, #148]	; (8008944 <etharp_update_arp_entry+0x148>)
 80088ae:	4413      	add	r3, r2
 80088b0:	3304      	adds	r3, #4
 80088b2:	2206      	movs	r2, #6
 80088b4:	6879      	ldr	r1, [r7, #4]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f009 fedc 	bl	8012674 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80088bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80088c0:	4920      	ldr	r1, [pc, #128]	; (8008944 <etharp_update_arp_entry+0x148>)
 80088c2:	4613      	mov	r3, r2
 80088c4:	005b      	lsls	r3, r3, #1
 80088c6:	4413      	add	r3, r2
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	440b      	add	r3, r1
 80088cc:	3312      	adds	r3, #18
 80088ce:	2200      	movs	r2, #0
 80088d0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80088d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80088d6:	491b      	ldr	r1, [pc, #108]	; (8008944 <etharp_update_arp_entry+0x148>)
 80088d8:	4613      	mov	r3, r2
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	4413      	add	r3, r2
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	440b      	add	r3, r1
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d021      	beq.n	800892c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80088e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80088ec:	4915      	ldr	r1, [pc, #84]	; (8008944 <etharp_update_arp_entry+0x148>)
 80088ee:	4613      	mov	r3, r2
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	4413      	add	r3, r2
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	440b      	add	r3, r1
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80088fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008900:	4910      	ldr	r1, [pc, #64]	; (8008944 <etharp_update_arp_entry+0x148>)
 8008902:	4613      	mov	r3, r2
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	4413      	add	r3, r2
 8008908:	00db      	lsls	r3, r3, #3
 800890a:	440b      	add	r3, r1
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8008916:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6939      	ldr	r1, [r7, #16]
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 fcf3 	bl	800930c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8008926:	6938      	ldr	r0, [r7, #16]
 8008928:	f003 fc8e 	bl	800c248 <pbuf_free>
  }
  return ERR_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	08013824 	.word	0x08013824
 800893c:	0801395c 	.word	0x0801395c
 8008940:	080138dc 	.word	0x080138dc
 8008944:	24004218 	.word	0x24004218

08008948 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008950:	2300      	movs	r3, #0
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	e01e      	b.n	8008994 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8008956:	4913      	ldr	r1, [pc, #76]	; (80089a4 <etharp_cleanup_netif+0x5c>)
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4613      	mov	r3, r2
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	4413      	add	r3, r2
 8008960:	00db      	lsls	r3, r3, #3
 8008962:	440b      	add	r3, r1
 8008964:	3314      	adds	r3, #20
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800896a:	7afb      	ldrb	r3, [r7, #11]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00e      	beq.n	800898e <etharp_cleanup_netif+0x46>
 8008970:	490c      	ldr	r1, [pc, #48]	; (80089a4 <etharp_cleanup_netif+0x5c>)
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	4613      	mov	r3, r2
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	4413      	add	r3, r2
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	440b      	add	r3, r1
 800897e:	3308      	adds	r3, #8
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	429a      	cmp	r2, r3
 8008986:	d102      	bne.n	800898e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f7ff fce5 	bl	8008358 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3301      	adds	r3, #1
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b09      	cmp	r3, #9
 8008998:	dddd      	ble.n	8008956 <etharp_cleanup_netif+0xe>
    }
  }
}
 800899a:	bf00      	nop
 800899c:	bf00      	nop
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	24004218 	.word	0x24004218

080089a8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80089a8:	b5b0      	push	{r4, r5, r7, lr}
 80089aa:	b08a      	sub	sp, #40	; 0x28
 80089ac:	af04      	add	r7, sp, #16
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d107      	bne.n	80089c8 <etharp_input+0x20>
 80089b8:	4b3d      	ldr	r3, [pc, #244]	; (8008ab0 <etharp_input+0x108>)
 80089ba:	f240 228a 	movw	r2, #650	; 0x28a
 80089be:	493d      	ldr	r1, [pc, #244]	; (8008ab4 <etharp_input+0x10c>)
 80089c0:	483d      	ldr	r0, [pc, #244]	; (8008ab8 <etharp_input+0x110>)
 80089c2:	f009 fe6d 	bl	80126a0 <iprintf>
 80089c6:	e06f      	b.n	8008aa8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	881b      	ldrh	r3, [r3, #0]
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089d8:	d10c      	bne.n	80089f4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80089de:	2b06      	cmp	r3, #6
 80089e0:	d108      	bne.n	80089f4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	d104      	bne.n	80089f4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	885b      	ldrh	r3, [r3, #2]
 80089ee:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80089f0:	2b08      	cmp	r3, #8
 80089f2:	d003      	beq.n	80089fc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f003 fc27 	bl	800c248 <pbuf_free>
    return;
 80089fa:	e055      	b.n	8008aa8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	330e      	adds	r3, #14
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	3318      	adds	r3, #24
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	3304      	adds	r3, #4
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d102      	bne.n	8008a1c <etharp_input+0x74>
    for_us = 0;
 8008a16:	2300      	movs	r3, #0
 8008a18:	75fb      	strb	r3, [r7, #23]
 8008a1a:	e009      	b.n	8008a30 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	3304      	adds	r3, #4
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	bf0c      	ite	eq
 8008a28:	2301      	moveq	r3, #1
 8008a2a:	2300      	movne	r3, #0
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f103 0208 	add.w	r2, r3, #8
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <etharp_input+0x98>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e000      	b.n	8008a42 <etharp_input+0x9a>
 8008a40:	2302      	movs	r3, #2
 8008a42:	f107 010c 	add.w	r1, r7, #12
 8008a46:	6838      	ldr	r0, [r7, #0]
 8008a48:	f7ff fed8 	bl	80087fc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	88db      	ldrh	r3, [r3, #6]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a56:	d003      	beq.n	8008a60 <etharp_input+0xb8>
 8008a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a5c:	d01e      	beq.n	8008a9c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8008a5e:	e020      	b.n	8008aa2 <etharp_input+0xfa>
      if (for_us) {
 8008a60:	7dfb      	ldrb	r3, [r7, #23]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d01c      	beq.n	8008aa0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8008a80:	2102      	movs	r1, #2
 8008a82:	9103      	str	r1, [sp, #12]
 8008a84:	f107 010c 	add.w	r1, r7, #12
 8008a88:	9102      	str	r1, [sp, #8]
 8008a8a:	9201      	str	r2, [sp, #4]
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	462b      	mov	r3, r5
 8008a90:	4622      	mov	r2, r4
 8008a92:	4601      	mov	r1, r0
 8008a94:	6838      	ldr	r0, [r7, #0]
 8008a96:	f000 faeb 	bl	8009070 <etharp_raw>
      break;
 8008a9a:	e001      	b.n	8008aa0 <etharp_input+0xf8>
      break;
 8008a9c:	bf00      	nop
 8008a9e:	e000      	b.n	8008aa2 <etharp_input+0xfa>
      break;
 8008aa0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f003 fbd0 	bl	800c248 <pbuf_free>
}
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bdb0      	pop	{r4, r5, r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	08013824 	.word	0x08013824
 8008ab4:	080139b4 	.word	0x080139b4
 8008ab8:	080138dc 	.word	0x080138dc

08008abc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af02      	add	r7, sp, #8
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008aca:	79fa      	ldrb	r2, [r7, #7]
 8008acc:	4944      	ldr	r1, [pc, #272]	; (8008be0 <etharp_output_to_arp_index+0x124>)
 8008ace:	4613      	mov	r3, r2
 8008ad0:	005b      	lsls	r3, r3, #1
 8008ad2:	4413      	add	r3, r2
 8008ad4:	00db      	lsls	r3, r3, #3
 8008ad6:	440b      	add	r3, r1
 8008ad8:	3314      	adds	r3, #20
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d806      	bhi.n	8008aee <etharp_output_to_arp_index+0x32>
 8008ae0:	4b40      	ldr	r3, [pc, #256]	; (8008be4 <etharp_output_to_arp_index+0x128>)
 8008ae2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008ae6:	4940      	ldr	r1, [pc, #256]	; (8008be8 <etharp_output_to_arp_index+0x12c>)
 8008ae8:	4840      	ldr	r0, [pc, #256]	; (8008bec <etharp_output_to_arp_index+0x130>)
 8008aea:	f009 fdd9 	bl	80126a0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008aee:	79fa      	ldrb	r2, [r7, #7]
 8008af0:	493b      	ldr	r1, [pc, #236]	; (8008be0 <etharp_output_to_arp_index+0x124>)
 8008af2:	4613      	mov	r3, r2
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	4413      	add	r3, r2
 8008af8:	00db      	lsls	r3, r3, #3
 8008afa:	440b      	add	r3, r1
 8008afc:	3314      	adds	r3, #20
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d153      	bne.n	8008bac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8008b04:	79fa      	ldrb	r2, [r7, #7]
 8008b06:	4936      	ldr	r1, [pc, #216]	; (8008be0 <etharp_output_to_arp_index+0x124>)
 8008b08:	4613      	mov	r3, r2
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	4413      	add	r3, r2
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	440b      	add	r3, r1
 8008b12:	3312      	adds	r3, #18
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8008b1a:	d919      	bls.n	8008b50 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8008b1c:	79fa      	ldrb	r2, [r7, #7]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	4413      	add	r3, r2
 8008b24:	00db      	lsls	r3, r3, #3
 8008b26:	4a2e      	ldr	r2, [pc, #184]	; (8008be0 <etharp_output_to_arp_index+0x124>)
 8008b28:	4413      	add	r3, r2
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 fb4c 	bl	80091cc <etharp_request>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d138      	bne.n	8008bac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008b3a:	79fa      	ldrb	r2, [r7, #7]
 8008b3c:	4928      	ldr	r1, [pc, #160]	; (8008be0 <etharp_output_to_arp_index+0x124>)
 8008b3e:	4613      	mov	r3, r2
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	4413      	add	r3, r2
 8008b44:	00db      	lsls	r3, r3, #3
 8008b46:	440b      	add	r3, r1
 8008b48:	3314      	adds	r3, #20
 8008b4a:	2203      	movs	r2, #3
 8008b4c:	701a      	strb	r2, [r3, #0]
 8008b4e:	e02d      	b.n	8008bac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8008b50:	79fa      	ldrb	r2, [r7, #7]
 8008b52:	4923      	ldr	r1, [pc, #140]	; (8008be0 <etharp_output_to_arp_index+0x124>)
 8008b54:	4613      	mov	r3, r2
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	4413      	add	r3, r2
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	440b      	add	r3, r1
 8008b5e:	3312      	adds	r3, #18
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008b66:	d321      	bcc.n	8008bac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008b68:	79fa      	ldrb	r2, [r7, #7]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	4413      	add	r3, r2
 8008b70:	00db      	lsls	r3, r3, #3
 8008b72:	4a1b      	ldr	r2, [pc, #108]	; (8008be0 <etharp_output_to_arp_index+0x124>)
 8008b74:	4413      	add	r3, r2
 8008b76:	1d19      	adds	r1, r3, #4
 8008b78:	79fa      	ldrb	r2, [r7, #7]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	005b      	lsls	r3, r3, #1
 8008b7e:	4413      	add	r3, r2
 8008b80:	00db      	lsls	r3, r3, #3
 8008b82:	3308      	adds	r3, #8
 8008b84:	4a16      	ldr	r2, [pc, #88]	; (8008be0 <etharp_output_to_arp_index+0x124>)
 8008b86:	4413      	add	r3, r2
 8008b88:	3304      	adds	r3, #4
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f000 fafb 	bl	8009188 <etharp_request_dst>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008b98:	79fa      	ldrb	r2, [r7, #7]
 8008b9a:	4911      	ldr	r1, [pc, #68]	; (8008be0 <etharp_output_to_arp_index+0x124>)
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	4413      	add	r3, r2
 8008ba2:	00db      	lsls	r3, r3, #3
 8008ba4:	440b      	add	r3, r1
 8008ba6:	3314      	adds	r3, #20
 8008ba8:	2203      	movs	r2, #3
 8008baa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8008bb2:	79fa      	ldrb	r2, [r7, #7]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	4413      	add	r3, r2
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	4a08      	ldr	r2, [pc, #32]	; (8008be0 <etharp_output_to_arp_index+0x124>)
 8008bc0:	4413      	add	r3, r2
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bc8:	9200      	str	r2, [sp, #0]
 8008bca:	460a      	mov	r2, r1
 8008bcc:	68b9      	ldr	r1, [r7, #8]
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 fb9c 	bl	800930c <ethernet_output>
 8008bd4:	4603      	mov	r3, r0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	24004218 	.word	0x24004218
 8008be4:	08013824 	.word	0x08013824
 8008be8:	080139d4 	.word	0x080139d4
 8008bec:	080138dc 	.word	0x080138dc

08008bf0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08a      	sub	sp, #40	; 0x28
 8008bf4:	af02      	add	r7, sp, #8
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d106      	bne.n	8008c14 <etharp_output+0x24>
 8008c06:	4b73      	ldr	r3, [pc, #460]	; (8008dd4 <etharp_output+0x1e4>)
 8008c08:	f240 321e 	movw	r2, #798	; 0x31e
 8008c0c:	4972      	ldr	r1, [pc, #456]	; (8008dd8 <etharp_output+0x1e8>)
 8008c0e:	4873      	ldr	r0, [pc, #460]	; (8008ddc <etharp_output+0x1ec>)
 8008c10:	f009 fd46 	bl	80126a0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d106      	bne.n	8008c28 <etharp_output+0x38>
 8008c1a:	4b6e      	ldr	r3, [pc, #440]	; (8008dd4 <etharp_output+0x1e4>)
 8008c1c:	f240 321f 	movw	r2, #799	; 0x31f
 8008c20:	496f      	ldr	r1, [pc, #444]	; (8008de0 <etharp_output+0x1f0>)
 8008c22:	486e      	ldr	r0, [pc, #440]	; (8008ddc <etharp_output+0x1ec>)
 8008c24:	f009 fd3c 	bl	80126a0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d106      	bne.n	8008c3c <etharp_output+0x4c>
 8008c2e:	4b69      	ldr	r3, [pc, #420]	; (8008dd4 <etharp_output+0x1e4>)
 8008c30:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008c34:	496b      	ldr	r1, [pc, #428]	; (8008de4 <etharp_output+0x1f4>)
 8008c36:	4869      	ldr	r0, [pc, #420]	; (8008ddc <etharp_output+0x1ec>)
 8008c38:	f009 fd32 	bl	80126a0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68f9      	ldr	r1, [r7, #12]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f001 f8c8 	bl	8009dd8 <ip4_addr_isbroadcast_u32>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d002      	beq.n	8008c54 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8008c4e:	4b66      	ldr	r3, [pc, #408]	; (8008de8 <etharp_output+0x1f8>)
 8008c50:	61fb      	str	r3, [r7, #28]
 8008c52:	e0af      	b.n	8008db4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c5c:	2be0      	cmp	r3, #224	; 0xe0
 8008c5e:	d118      	bne.n	8008c92 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008c60:	2301      	movs	r3, #1
 8008c62:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8008c64:	2300      	movs	r3, #0
 8008c66:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8008c68:	235e      	movs	r3, #94	; 0x5e
 8008c6a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	3302      	adds	r3, #2
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3303      	adds	r3, #3
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8008c8a:	f107 0310 	add.w	r3, r7, #16
 8008c8e:	61fb      	str	r3, [r7, #28]
 8008c90:	e090      	b.n	8008db4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	405a      	eors	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d012      	beq.n	8008cd0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008cb0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d00b      	beq.n	8008cd0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	330c      	adds	r3, #12
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	330c      	adds	r3, #12
 8008cc6:	61bb      	str	r3, [r7, #24]
 8008cc8:	e002      	b.n	8008cd0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8008cca:	f06f 0303 	mvn.w	r3, #3
 8008cce:	e07d      	b.n	8008dcc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008cd0:	4b46      	ldr	r3, [pc, #280]	; (8008dec <etharp_output+0x1fc>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4a46      	ldr	r2, [pc, #280]	; (8008df0 <etharp_output+0x200>)
 8008cd8:	460b      	mov	r3, r1
 8008cda:	005b      	lsls	r3, r3, #1
 8008cdc:	440b      	add	r3, r1
 8008cde:	00db      	lsls	r3, r3, #3
 8008ce0:	4413      	add	r3, r2
 8008ce2:	3314      	adds	r3, #20
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d925      	bls.n	8008d36 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008cea:	4b40      	ldr	r3, [pc, #256]	; (8008dec <etharp_output+0x1fc>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	4a3f      	ldr	r2, [pc, #252]	; (8008df0 <etharp_output+0x200>)
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	440b      	add	r3, r1
 8008cf8:	00db      	lsls	r3, r3, #3
 8008cfa:	4413      	add	r3, r2
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d117      	bne.n	8008d36 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	4b38      	ldr	r3, [pc, #224]	; (8008dec <etharp_output+0x1fc>)
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	4937      	ldr	r1, [pc, #220]	; (8008df0 <etharp_output+0x200>)
 8008d12:	4603      	mov	r3, r0
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	4403      	add	r3, r0
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	440b      	add	r3, r1
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d108      	bne.n	8008d36 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8008d24:	4b31      	ldr	r3, [pc, #196]	; (8008dec <etharp_output+0x1fc>)
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	68b9      	ldr	r1, [r7, #8]
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f7ff fec5 	bl	8008abc <etharp_output_to_arp_index>
 8008d32:	4603      	mov	r3, r0
 8008d34:	e04a      	b.n	8008dcc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008d36:	2300      	movs	r3, #0
 8008d38:	75fb      	strb	r3, [r7, #23]
 8008d3a:	e031      	b.n	8008da0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008d3c:	7dfa      	ldrb	r2, [r7, #23]
 8008d3e:	492c      	ldr	r1, [pc, #176]	; (8008df0 <etharp_output+0x200>)
 8008d40:	4613      	mov	r3, r2
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	4413      	add	r3, r2
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	440b      	add	r3, r1
 8008d4a:	3314      	adds	r3, #20
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d923      	bls.n	8008d9a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8008d52:	7dfa      	ldrb	r2, [r7, #23]
 8008d54:	4926      	ldr	r1, [pc, #152]	; (8008df0 <etharp_output+0x200>)
 8008d56:	4613      	mov	r3, r2
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	4413      	add	r3, r2
 8008d5c:	00db      	lsls	r3, r3, #3
 8008d5e:	440b      	add	r3, r1
 8008d60:	3308      	adds	r3, #8
 8008d62:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d117      	bne.n	8008d9a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	6819      	ldr	r1, [r3, #0]
 8008d6e:	7dfa      	ldrb	r2, [r7, #23]
 8008d70:	481f      	ldr	r0, [pc, #124]	; (8008df0 <etharp_output+0x200>)
 8008d72:	4613      	mov	r3, r2
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	4413      	add	r3, r2
 8008d78:	00db      	lsls	r3, r3, #3
 8008d7a:	4403      	add	r3, r0
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8008d80:	4299      	cmp	r1, r3
 8008d82:	d10a      	bne.n	8008d9a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8008d84:	4a19      	ldr	r2, [pc, #100]	; (8008dec <etharp_output+0x1fc>)
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
 8008d88:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	68b9      	ldr	r1, [r7, #8]
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f7ff fe93 	bl	8008abc <etharp_output_to_arp_index>
 8008d96:	4603      	mov	r3, r0
 8008d98:	e018      	b.n	8008dcc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	75fb      	strb	r3, [r7, #23]
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
 8008da2:	2b09      	cmp	r3, #9
 8008da4:	d9ca      	bls.n	8008d3c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	69b9      	ldr	r1, [r7, #24]
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f000 f822 	bl	8008df4 <etharp_query>
 8008db0:	4603      	mov	r3, r0
 8008db2:	e00b      	b.n	8008dcc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8008dba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	68b9      	ldr	r1, [r7, #8]
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f000 faa1 	bl	800930c <ethernet_output>
 8008dca:	4603      	mov	r3, r0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3720      	adds	r7, #32
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	08013824 	.word	0x08013824
 8008dd8:	080139b4 	.word	0x080139b4
 8008ddc:	080138dc 	.word	0x080138dc
 8008de0:	08013a04 	.word	0x08013a04
 8008de4:	080139a4 	.word	0x080139a4
 8008de8:	08016674 	.word	0x08016674
 8008dec:	24004308 	.word	0x24004308
 8008df0:	24004218 	.word	0x24004218

08008df4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08c      	sub	sp, #48	; 0x30
 8008df8:	af02      	add	r7, sp, #8
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	3326      	adds	r3, #38	; 0x26
 8008e04:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8008e06:	23ff      	movs	r3, #255	; 0xff
 8008e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68f9      	ldr	r1, [r7, #12]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 ffde 	bl	8009dd8 <ip4_addr_isbroadcast_u32>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10c      	bne.n	8008e3c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008e2a:	2be0      	cmp	r3, #224	; 0xe0
 8008e2c:	d006      	beq.n	8008e3c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d003      	beq.n	8008e3c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d102      	bne.n	8008e42 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8008e3c:	f06f 030f 	mvn.w	r3, #15
 8008e40:	e101      	b.n	8009046 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	2101      	movs	r1, #1
 8008e46:	68b8      	ldr	r0, [r7, #8]
 8008e48:	f7ff fb60 	bl	800850c <etharp_find_entry>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8008e50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	da02      	bge.n	8008e5e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8008e58:	8a7b      	ldrh	r3, [r7, #18]
 8008e5a:	b25b      	sxtb	r3, r3
 8008e5c:	e0f3      	b.n	8009046 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8008e5e:	8a7b      	ldrh	r3, [r7, #18]
 8008e60:	2b7e      	cmp	r3, #126	; 0x7e
 8008e62:	d906      	bls.n	8008e72 <etharp_query+0x7e>
 8008e64:	4b7a      	ldr	r3, [pc, #488]	; (8009050 <etharp_query+0x25c>)
 8008e66:	f240 32c1 	movw	r2, #961	; 0x3c1
 8008e6a:	497a      	ldr	r1, [pc, #488]	; (8009054 <etharp_query+0x260>)
 8008e6c:	487a      	ldr	r0, [pc, #488]	; (8009058 <etharp_query+0x264>)
 8008e6e:	f009 fc17 	bl	80126a0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8008e72:	8a7b      	ldrh	r3, [r7, #18]
 8008e74:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8008e76:	7c7a      	ldrb	r2, [r7, #17]
 8008e78:	4978      	ldr	r1, [pc, #480]	; (800905c <etharp_query+0x268>)
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	4413      	add	r3, r2
 8008e80:	00db      	lsls	r3, r3, #3
 8008e82:	440b      	add	r3, r1
 8008e84:	3314      	adds	r3, #20
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d115      	bne.n	8008eb8 <etharp_query+0xc4>
    is_new_entry = 1;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8008e90:	7c7a      	ldrb	r2, [r7, #17]
 8008e92:	4972      	ldr	r1, [pc, #456]	; (800905c <etharp_query+0x268>)
 8008e94:	4613      	mov	r3, r2
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	4413      	add	r3, r2
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	440b      	add	r3, r1
 8008e9e:	3314      	adds	r3, #20
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8008ea4:	7c7a      	ldrb	r2, [r7, #17]
 8008ea6:	496d      	ldr	r1, [pc, #436]	; (800905c <etharp_query+0x268>)
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	4413      	add	r3, r2
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	440b      	add	r3, r1
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8008eb8:	7c7a      	ldrb	r2, [r7, #17]
 8008eba:	4968      	ldr	r1, [pc, #416]	; (800905c <etharp_query+0x268>)
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	005b      	lsls	r3, r3, #1
 8008ec0:	4413      	add	r3, r2
 8008ec2:	00db      	lsls	r3, r3, #3
 8008ec4:	440b      	add	r3, r1
 8008ec6:	3314      	adds	r3, #20
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d011      	beq.n	8008ef2 <etharp_query+0xfe>
 8008ece:	7c7a      	ldrb	r2, [r7, #17]
 8008ed0:	4962      	ldr	r1, [pc, #392]	; (800905c <etharp_query+0x268>)
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	4413      	add	r3, r2
 8008ed8:	00db      	lsls	r3, r3, #3
 8008eda:	440b      	add	r3, r1
 8008edc:	3314      	adds	r3, #20
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d806      	bhi.n	8008ef2 <etharp_query+0xfe>
 8008ee4:	4b5a      	ldr	r3, [pc, #360]	; (8009050 <etharp_query+0x25c>)
 8008ee6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8008eea:	495d      	ldr	r1, [pc, #372]	; (8009060 <etharp_query+0x26c>)
 8008eec:	485a      	ldr	r0, [pc, #360]	; (8009058 <etharp_query+0x264>)
 8008eee:	f009 fbd7 	bl	80126a0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <etharp_query+0x10a>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10c      	bne.n	8008f18 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8008efe:	68b9      	ldr	r1, [r7, #8]
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 f963 	bl	80091cc <etharp_request>
 8008f06:	4603      	mov	r3, r0
 8008f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d102      	bne.n	8008f18 <etharp_query+0x124>
      return result;
 8008f12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f16:	e096      	b.n	8009046 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d106      	bne.n	8008f2c <etharp_query+0x138>
 8008f1e:	4b4c      	ldr	r3, [pc, #304]	; (8009050 <etharp_query+0x25c>)
 8008f20:	f240 32e1 	movw	r2, #993	; 0x3e1
 8008f24:	494f      	ldr	r1, [pc, #316]	; (8009064 <etharp_query+0x270>)
 8008f26:	484c      	ldr	r0, [pc, #304]	; (8009058 <etharp_query+0x264>)
 8008f28:	f009 fbba 	bl	80126a0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8008f2c:	7c7a      	ldrb	r2, [r7, #17]
 8008f2e:	494b      	ldr	r1, [pc, #300]	; (800905c <etharp_query+0x268>)
 8008f30:	4613      	mov	r3, r2
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	4413      	add	r3, r2
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	440b      	add	r3, r1
 8008f3a:	3314      	adds	r3, #20
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d917      	bls.n	8008f72 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8008f42:	4a49      	ldr	r2, [pc, #292]	; (8009068 <etharp_query+0x274>)
 8008f44:	7c7b      	ldrb	r3, [r7, #17]
 8008f46:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8008f48:	7c7a      	ldrb	r2, [r7, #17]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	005b      	lsls	r3, r3, #1
 8008f4e:	4413      	add	r3, r2
 8008f50:	00db      	lsls	r3, r3, #3
 8008f52:	3308      	adds	r3, #8
 8008f54:	4a41      	ldr	r2, [pc, #260]	; (800905c <etharp_query+0x268>)
 8008f56:	4413      	add	r3, r2
 8008f58:	3304      	adds	r3, #4
 8008f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f5e:	9200      	str	r2, [sp, #0]
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	6879      	ldr	r1, [r7, #4]
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 f9d1 	bl	800930c <ethernet_output>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f70:	e067      	b.n	8009042 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8008f72:	7c7a      	ldrb	r2, [r7, #17]
 8008f74:	4939      	ldr	r1, [pc, #228]	; (800905c <etharp_query+0x268>)
 8008f76:	4613      	mov	r3, r2
 8008f78:	005b      	lsls	r3, r3, #1
 8008f7a:	4413      	add	r3, r2
 8008f7c:	00db      	lsls	r3, r3, #3
 8008f7e:	440b      	add	r3, r1
 8008f80:	3314      	adds	r3, #20
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d15c      	bne.n	8009042 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8008f90:	e01c      	b.n	8008fcc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	895a      	ldrh	r2, [r3, #10]
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	891b      	ldrh	r3, [r3, #8]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d10a      	bne.n	8008fb4 <etharp_query+0x1c0>
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d006      	beq.n	8008fb4 <etharp_query+0x1c0>
 8008fa6:	4b2a      	ldr	r3, [pc, #168]	; (8009050 <etharp_query+0x25c>)
 8008fa8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8008fac:	492f      	ldr	r1, [pc, #188]	; (800906c <etharp_query+0x278>)
 8008fae:	482a      	ldr	r0, [pc, #168]	; (8009058 <etharp_query+0x264>)
 8008fb0:	f009 fb76 	bl	80126a0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	7b1b      	ldrb	r3, [r3, #12]
 8008fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <etharp_query+0x1d2>
        copy_needed = 1;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	61bb      	str	r3, [r7, #24]
        break;
 8008fc4:	e005      	b.n	8008fd2 <etharp_query+0x1de>
      }
      p = p->next;
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	61fb      	str	r3, [r7, #28]
    while (p) {
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1df      	bne.n	8008f92 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d007      	beq.n	8008fe8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	f44f 7120 	mov.w	r1, #640	; 0x280
 8008fde:	200e      	movs	r0, #14
 8008fe0:	f003 fb9a 	bl	800c718 <pbuf_clone>
 8008fe4:	61f8      	str	r0, [r7, #28]
 8008fe6:	e004      	b.n	8008ff2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8008fec:	69f8      	ldr	r0, [r7, #28]
 8008fee:	f003 f9d1 	bl	800c394 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d021      	beq.n	800903c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8008ff8:	7c7a      	ldrb	r2, [r7, #17]
 8008ffa:	4918      	ldr	r1, [pc, #96]	; (800905c <etharp_query+0x268>)
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	005b      	lsls	r3, r3, #1
 8009000:	4413      	add	r3, r2
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	440b      	add	r3, r1
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00a      	beq.n	8009022 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800900c:	7c7a      	ldrb	r2, [r7, #17]
 800900e:	4913      	ldr	r1, [pc, #76]	; (800905c <etharp_query+0x268>)
 8009010:	4613      	mov	r3, r2
 8009012:	005b      	lsls	r3, r3, #1
 8009014:	4413      	add	r3, r2
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	440b      	add	r3, r1
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4618      	mov	r0, r3
 800901e:	f003 f913 	bl	800c248 <pbuf_free>
      }
      arp_table[i].q = p;
 8009022:	7c7a      	ldrb	r2, [r7, #17]
 8009024:	490d      	ldr	r1, [pc, #52]	; (800905c <etharp_query+0x268>)
 8009026:	4613      	mov	r3, r2
 8009028:	005b      	lsls	r3, r3, #1
 800902a:	4413      	add	r3, r2
 800902c:	00db      	lsls	r3, r3, #3
 800902e:	440b      	add	r3, r1
 8009030:	69fa      	ldr	r2, [r7, #28]
 8009032:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800903a:	e002      	b.n	8009042 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800903c:	23ff      	movs	r3, #255	; 0xff
 800903e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8009042:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009046:	4618      	mov	r0, r3
 8009048:	3728      	adds	r7, #40	; 0x28
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	08013824 	.word	0x08013824
 8009054:	08013a10 	.word	0x08013a10
 8009058:	080138dc 	.word	0x080138dc
 800905c:	24004218 	.word	0x24004218
 8009060:	08013a20 	.word	0x08013a20
 8009064:	08013a04 	.word	0x08013a04
 8009068:	24004308 	.word	0x24004308
 800906c:	08013a48 	.word	0x08013a48

08009070 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b08a      	sub	sp, #40	; 0x28
 8009074:	af02      	add	r7, sp, #8
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
 800907c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d106      	bne.n	8009096 <etharp_raw+0x26>
 8009088:	4b3a      	ldr	r3, [pc, #232]	; (8009174 <etharp_raw+0x104>)
 800908a:	f240 4257 	movw	r2, #1111	; 0x457
 800908e:	493a      	ldr	r1, [pc, #232]	; (8009178 <etharp_raw+0x108>)
 8009090:	483a      	ldr	r0, [pc, #232]	; (800917c <etharp_raw+0x10c>)
 8009092:	f009 fb05 	bl	80126a0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009096:	f44f 7220 	mov.w	r2, #640	; 0x280
 800909a:	211c      	movs	r1, #28
 800909c:	200e      	movs	r0, #14
 800909e:	f002 fdef 	bl	800bc80 <pbuf_alloc>
 80090a2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d102      	bne.n	80090b0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80090aa:	f04f 33ff 	mov.w	r3, #4294967295
 80090ae:	e05d      	b.n	800916c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	895b      	ldrh	r3, [r3, #10]
 80090b4:	2b1b      	cmp	r3, #27
 80090b6:	d806      	bhi.n	80090c6 <etharp_raw+0x56>
 80090b8:	4b2e      	ldr	r3, [pc, #184]	; (8009174 <etharp_raw+0x104>)
 80090ba:	f240 4262 	movw	r2, #1122	; 0x462
 80090be:	4930      	ldr	r1, [pc, #192]	; (8009180 <etharp_raw+0x110>)
 80090c0:	482e      	ldr	r0, [pc, #184]	; (800917c <etharp_raw+0x10c>)
 80090c2:	f009 faed 	bl	80126a0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80090cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7ff f914 	bl	80082fc <lwip_htons>
 80090d4:	4603      	mov	r3, r0
 80090d6:	461a      	mov	r2, r3
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80090e2:	2b06      	cmp	r3, #6
 80090e4:	d006      	beq.n	80090f4 <etharp_raw+0x84>
 80090e6:	4b23      	ldr	r3, [pc, #140]	; (8009174 <etharp_raw+0x104>)
 80090e8:	f240 4269 	movw	r2, #1129	; 0x469
 80090ec:	4925      	ldr	r1, [pc, #148]	; (8009184 <etharp_raw+0x114>)
 80090ee:	4823      	ldr	r0, [pc, #140]	; (800917c <etharp_raw+0x10c>)
 80090f0:	f009 fad6 	bl	80126a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	3308      	adds	r3, #8
 80090f8:	2206      	movs	r2, #6
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f009 fab9 	bl	8012674 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	3312      	adds	r3, #18
 8009106:	2206      	movs	r2, #6
 8009108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800910a:	4618      	mov	r0, r3
 800910c:	f009 fab2 	bl	8012674 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	330e      	adds	r3, #14
 8009114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009116:	6812      	ldr	r2, [r2, #0]
 8009118:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	3318      	adds	r3, #24
 800911e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009120:	6812      	ldr	r2, [r2, #0]
 8009122:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	2200      	movs	r2, #0
 8009128:	701a      	strb	r2, [r3, #0]
 800912a:	2200      	movs	r2, #0
 800912c:	f042 0201 	orr.w	r2, r2, #1
 8009130:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	2200      	movs	r2, #0
 8009136:	f042 0208 	orr.w	r2, r2, #8
 800913a:	709a      	strb	r2, [r3, #2]
 800913c:	2200      	movs	r2, #0
 800913e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	2206      	movs	r2, #6
 8009144:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2204      	movs	r2, #4
 800914a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800914c:	f640 0306 	movw	r3, #2054	; 0x806
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	69b9      	ldr	r1, [r7, #24]
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 f8d7 	bl	800930c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800915e:	69b8      	ldr	r0, [r7, #24]
 8009160:	f003 f872 	bl	800c248 <pbuf_free>
  p = NULL;
 8009164:	2300      	movs	r3, #0
 8009166:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8009168:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3720      	adds	r7, #32
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	08013824 	.word	0x08013824
 8009178:	080139b4 	.word	0x080139b4
 800917c:	080138dc 	.word	0x080138dc
 8009180:	08013a64 	.word	0x08013a64
 8009184:	08013a98 	.word	0x08013a98

08009188 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af04      	add	r7, sp, #16
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80091a4:	2201      	movs	r2, #1
 80091a6:	9203      	str	r2, [sp, #12]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	9202      	str	r2, [sp, #8]
 80091ac:	4a06      	ldr	r2, [pc, #24]	; (80091c8 <etharp_request_dst+0x40>)
 80091ae:	9201      	str	r2, [sp, #4]
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	4603      	mov	r3, r0
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f7ff ff5a 	bl	8009070 <etharp_raw>
 80091bc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	0801667c 	.word	0x0801667c

080091cc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80091d6:	4a05      	ldr	r2, [pc, #20]	; (80091ec <etharp_request+0x20>)
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7ff ffd4 	bl	8009188 <etharp_request_dst>
 80091e0:	4603      	mov	r3, r0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	08016674 	.word	0x08016674

080091f0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80091fa:	230e      	movs	r3, #14
 80091fc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	895b      	ldrh	r3, [r3, #10]
 8009202:	2b0e      	cmp	r3, #14
 8009204:	d96e      	bls.n	80092e4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	7bdb      	ldrb	r3, [r3, #15]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d106      	bne.n	800921c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009214:	3301      	adds	r3, #1
 8009216:	b2da      	uxtb	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	7b1a      	ldrb	r2, [r3, #12]
 8009226:	7b5b      	ldrb	r3, [r3, #13]
 8009228:	021b      	lsls	r3, r3, #8
 800922a:	4313      	orrs	r3, r2
 800922c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	d023      	beq.n	8009282 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d10f      	bne.n	8009262 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	785b      	ldrb	r3, [r3, #1]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d11b      	bne.n	8009282 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800924e:	2b5e      	cmp	r3, #94	; 0x5e
 8009250:	d117      	bne.n	8009282 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	7b5b      	ldrb	r3, [r3, #13]
 8009256:	f043 0310 	orr.w	r3, r3, #16
 800925a:	b2da      	uxtb	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	735a      	strb	r2, [r3, #13]
 8009260:	e00f      	b.n	8009282 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	2206      	movs	r2, #6
 8009266:	4928      	ldr	r1, [pc, #160]	; (8009308 <ethernet_input+0x118>)
 8009268:	4618      	mov	r0, r3
 800926a:	f009 f9f3 	bl	8012654 <memcmp>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d106      	bne.n	8009282 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	7b5b      	ldrb	r3, [r3, #13]
 8009278:	f043 0308 	orr.w	r3, r3, #8
 800927c:	b2da      	uxtb	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8009282:	89fb      	ldrh	r3, [r7, #14]
 8009284:	2b08      	cmp	r3, #8
 8009286:	d003      	beq.n	8009290 <ethernet_input+0xa0>
 8009288:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800928c:	d014      	beq.n	80092b8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800928e:	e032      	b.n	80092f6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009296:	f003 0308 	and.w	r3, r3, #8
 800929a:	2b00      	cmp	r3, #0
 800929c:	d024      	beq.n	80092e8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800929e:	8afb      	ldrh	r3, [r7, #22]
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f002 ff4a 	bl	800c13c <pbuf_remove_header>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d11e      	bne.n	80092ec <ethernet_input+0xfc>
        ip4_input(p, netif);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fb95 	bl	80099e0 <ip4_input>
      break;
 80092b6:	e013      	b.n	80092e0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80092be:	f003 0308 	and.w	r3, r3, #8
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d014      	beq.n	80092f0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80092c6:	8afb      	ldrh	r3, [r7, #22]
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f002 ff36 	bl	800c13c <pbuf_remove_header>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10e      	bne.n	80092f4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7ff fb65 	bl	80089a8 <etharp_input>
      break;
 80092de:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	e00c      	b.n	80092fe <ethernet_input+0x10e>
    goto free_and_return;
 80092e4:	bf00      	nop
 80092e6:	e006      	b.n	80092f6 <ethernet_input+0x106>
        goto free_and_return;
 80092e8:	bf00      	nop
 80092ea:	e004      	b.n	80092f6 <ethernet_input+0x106>
        goto free_and_return;
 80092ec:	bf00      	nop
 80092ee:	e002      	b.n	80092f6 <ethernet_input+0x106>
        goto free_and_return;
 80092f0:	bf00      	nop
 80092f2:	e000      	b.n	80092f6 <ethernet_input+0x106>
        goto free_and_return;
 80092f4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f002 ffa6 	bl	800c248 <pbuf_free>
  return ERR_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	08016674 	.word	0x08016674

0800930c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800931a:	8c3b      	ldrh	r3, [r7, #32]
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe ffed 	bl	80082fc <lwip_htons>
 8009322:	4603      	mov	r3, r0
 8009324:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8009326:	210e      	movs	r1, #14
 8009328:	68b8      	ldr	r0, [r7, #8]
 800932a:	f002 fef7 	bl	800c11c <pbuf_add_header>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d125      	bne.n	8009380 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	8afa      	ldrh	r2, [r7, #22]
 800933e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	2206      	movs	r2, #6
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	4618      	mov	r0, r3
 8009348:	f009 f994 	bl	8012674 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	3306      	adds	r3, #6
 8009350:	2206      	movs	r2, #6
 8009352:	6879      	ldr	r1, [r7, #4]
 8009354:	4618      	mov	r0, r3
 8009356:	f009 f98d 	bl	8012674 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009360:	2b06      	cmp	r3, #6
 8009362:	d006      	beq.n	8009372 <ethernet_output+0x66>
 8009364:	4b0a      	ldr	r3, [pc, #40]	; (8009390 <ethernet_output+0x84>)
 8009366:	f44f 7299 	mov.w	r2, #306	; 0x132
 800936a:	490a      	ldr	r1, [pc, #40]	; (8009394 <ethernet_output+0x88>)
 800936c:	480a      	ldr	r0, [pc, #40]	; (8009398 <ethernet_output+0x8c>)
 800936e:	f009 f997 	bl	80126a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	68b9      	ldr	r1, [r7, #8]
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	4798      	blx	r3
 800937c:	4603      	mov	r3, r0
 800937e:	e002      	b.n	8009386 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8009380:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8009382:	f06f 0301 	mvn.w	r3, #1
}
 8009386:	4618      	mov	r0, r3
 8009388:	3718      	adds	r7, #24
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	08013adc 	.word	0x08013adc
 8009394:	08013b50 	.word	0x08013b50
 8009398:	08013b84 	.word	0x08013b84

0800939c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b08e      	sub	sp, #56	; 0x38
 80093a0:	af04      	add	r7, sp, #16
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80093a6:	4b87      	ldr	r3, [pc, #540]	; (80095c4 <icmp_input+0x228>)
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	f003 030f 	and.w	r3, r3, #15
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80093bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80093be:	2b13      	cmp	r3, #19
 80093c0:	f240 80e8 	bls.w	8009594 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	895b      	ldrh	r3, [r3, #10]
 80093c8:	2b03      	cmp	r3, #3
 80093ca:	f240 80e5 	bls.w	8009598 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80093d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 80d2 	beq.w	8009586 <icmp_input+0x1ea>
 80093e2:	2b08      	cmp	r3, #8
 80093e4:	f040 80d2 	bne.w	800958c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80093e8:	4b77      	ldr	r3, [pc, #476]	; (80095c8 <icmp_input+0x22c>)
 80093ea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80093ec:	4b75      	ldr	r3, [pc, #468]	; (80095c4 <icmp_input+0x228>)
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093f4:	2be0      	cmp	r3, #224	; 0xe0
 80093f6:	f000 80d6 	beq.w	80095a6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80093fa:	4b72      	ldr	r3, [pc, #456]	; (80095c4 <icmp_input+0x228>)
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	4a71      	ldr	r2, [pc, #452]	; (80095c4 <icmp_input+0x228>)
 8009400:	6812      	ldr	r2, [r2, #0]
 8009402:	4611      	mov	r1, r2
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fce7 	bl	8009dd8 <ip4_addr_isbroadcast_u32>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	f040 80cc 	bne.w	80095aa <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	891b      	ldrh	r3, [r3, #8]
 8009416:	2b07      	cmp	r3, #7
 8009418:	f240 80c0 	bls.w	800959c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f9e0 	bl	80097e2 <inet_chksum_pbuf>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d003      	beq.n	8009430 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f002 ff0d 	bl	800c248 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800942e:	e0c5      	b.n	80095bc <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009430:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009432:	330e      	adds	r3, #14
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f002 fe70 	bl	800c11c <pbuf_add_header>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d04b      	beq.n	80094da <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	891a      	ldrh	r2, [r3, #8]
 8009446:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009448:	4413      	add	r3, r2
 800944a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	891b      	ldrh	r3, [r3, #8]
 8009450:	8b7a      	ldrh	r2, [r7, #26]
 8009452:	429a      	cmp	r2, r3
 8009454:	f0c0 80ab 	bcc.w	80095ae <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8009458:	8b7b      	ldrh	r3, [r7, #26]
 800945a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800945e:	4619      	mov	r1, r3
 8009460:	200e      	movs	r0, #14
 8009462:	f002 fc0d 	bl	800bc80 <pbuf_alloc>
 8009466:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	2b00      	cmp	r3, #0
 800946c:	f000 80a1 	beq.w	80095b2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	895b      	ldrh	r3, [r3, #10]
 8009474:	461a      	mov	r2, r3
 8009476:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009478:	3308      	adds	r3, #8
 800947a:	429a      	cmp	r2, r3
 800947c:	d203      	bcs.n	8009486 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800947e:	6978      	ldr	r0, [r7, #20]
 8009480:	f002 fee2 	bl	800c248 <pbuf_free>
          goto icmperr;
 8009484:	e096      	b.n	80095b4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800948c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800948e:	4618      	mov	r0, r3
 8009490:	f009 f8f0 	bl	8012674 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8009494:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009496:	4619      	mov	r1, r3
 8009498:	6978      	ldr	r0, [r7, #20]
 800949a:	f002 fe4f 	bl	800c13c <pbuf_remove_header>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d009      	beq.n	80094b8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80094a4:	4b49      	ldr	r3, [pc, #292]	; (80095cc <icmp_input+0x230>)
 80094a6:	22b6      	movs	r2, #182	; 0xb6
 80094a8:	4949      	ldr	r1, [pc, #292]	; (80095d0 <icmp_input+0x234>)
 80094aa:	484a      	ldr	r0, [pc, #296]	; (80095d4 <icmp_input+0x238>)
 80094ac:	f009 f8f8 	bl	80126a0 <iprintf>
          pbuf_free(r);
 80094b0:	6978      	ldr	r0, [r7, #20]
 80094b2:	f002 fec9 	bl	800c248 <pbuf_free>
          goto icmperr;
 80094b6:	e07d      	b.n	80095b4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80094b8:	6879      	ldr	r1, [r7, #4]
 80094ba:	6978      	ldr	r0, [r7, #20]
 80094bc:	f002 ffe8 	bl	800c490 <pbuf_copy>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d003      	beq.n	80094ce <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80094c6:	6978      	ldr	r0, [r7, #20]
 80094c8:	f002 febe 	bl	800c248 <pbuf_free>
          goto icmperr;
 80094cc:	e072      	b.n	80095b4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f002 feba 	bl	800c248 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	607b      	str	r3, [r7, #4]
 80094d8:	e00f      	b.n	80094fa <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80094da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094dc:	330e      	adds	r3, #14
 80094de:	4619      	mov	r1, r3
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f002 fe2b 	bl	800c13c <pbuf_remove_header>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d006      	beq.n	80094fa <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80094ec:	4b37      	ldr	r3, [pc, #220]	; (80095cc <icmp_input+0x230>)
 80094ee:	22c7      	movs	r2, #199	; 0xc7
 80094f0:	4939      	ldr	r1, [pc, #228]	; (80095d8 <icmp_input+0x23c>)
 80094f2:	4838      	ldr	r0, [pc, #224]	; (80095d4 <icmp_input+0x238>)
 80094f4:	f009 f8d4 	bl	80126a0 <iprintf>
          goto icmperr;
 80094f8:	e05c      	b.n	80095b4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8009500:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f002 fe09 	bl	800c11c <pbuf_add_header>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d13c      	bne.n	800958a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800951e:	4b29      	ldr	r3, [pc, #164]	; (80095c4 <icmp_input+0x228>)
 8009520:	691a      	ldr	r2, [r3, #16]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	2200      	movs	r2, #0
 800952a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	885b      	ldrh	r3, [r3, #2]
 8009530:	b29b      	uxth	r3, r3
 8009532:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8009536:	4293      	cmp	r3, r2
 8009538:	d907      	bls.n	800954a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	885b      	ldrh	r3, [r3, #2]
 800953e:	b29b      	uxth	r3, r3
 8009540:	3309      	adds	r3, #9
 8009542:	b29a      	uxth	r2, r3
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	805a      	strh	r2, [r3, #2]
 8009548:	e006      	b.n	8009558 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	885b      	ldrh	r3, [r3, #2]
 800954e:	b29b      	uxth	r3, r3
 8009550:	3308      	adds	r3, #8
 8009552:	b29a      	uxth	r2, r3
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	22ff      	movs	r2, #255	; 0xff
 800955c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	729a      	strb	r2, [r3, #10]
 8009564:	2200      	movs	r2, #0
 8009566:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	9302      	str	r3, [sp, #8]
 800956c:	2301      	movs	r3, #1
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	2300      	movs	r3, #0
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	23ff      	movs	r3, #255	; 0xff
 8009576:	2200      	movs	r2, #0
 8009578:	69f9      	ldr	r1, [r7, #28]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fb54 	bl	8009c28 <ip4_output_if>
 8009580:	4603      	mov	r3, r0
 8009582:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8009584:	e001      	b.n	800958a <icmp_input+0x1ee>
      break;
 8009586:	bf00      	nop
 8009588:	e000      	b.n	800958c <icmp_input+0x1f0>
      break;
 800958a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f002 fe5b 	bl	800c248 <pbuf_free>
  return;
 8009592:	e013      	b.n	80095bc <icmp_input+0x220>
    goto lenerr;
 8009594:	bf00      	nop
 8009596:	e002      	b.n	800959e <icmp_input+0x202>
    goto lenerr;
 8009598:	bf00      	nop
 800959a:	e000      	b.n	800959e <icmp_input+0x202>
        goto lenerr;
 800959c:	bf00      	nop
lenerr:
  pbuf_free(p);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f002 fe52 	bl	800c248 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80095a4:	e00a      	b.n	80095bc <icmp_input+0x220>
        goto icmperr;
 80095a6:	bf00      	nop
 80095a8:	e004      	b.n	80095b4 <icmp_input+0x218>
        goto icmperr;
 80095aa:	bf00      	nop
 80095ac:	e002      	b.n	80095b4 <icmp_input+0x218>
          goto icmperr;
 80095ae:	bf00      	nop
 80095b0:	e000      	b.n	80095b4 <icmp_input+0x218>
          goto icmperr;
 80095b2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f002 fe47 	bl	800c248 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80095ba:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80095bc:	3728      	adds	r7, #40	; 0x28
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	2400430c 	.word	0x2400430c
 80095c8:	24004320 	.word	0x24004320
 80095cc:	08013bac 	.word	0x08013bac
 80095d0:	08013c20 	.word	0x08013c20
 80095d4:	08013c58 	.word	0x08013c58
 80095d8:	08013c80 	.word	0x08013c80

080095dc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80095e8:	78fb      	ldrb	r3, [r7, #3]
 80095ea:	461a      	mov	r2, r3
 80095ec:	2103      	movs	r1, #3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f814 	bl	800961c <icmp_send_response>
}
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8009608:	78fb      	ldrb	r3, [r7, #3]
 800960a:	461a      	mov	r2, r3
 800960c:	210b      	movs	r1, #11
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f804 	bl	800961c <icmp_send_response>
}
 8009614:	bf00      	nop
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b08c      	sub	sp, #48	; 0x30
 8009620:	af04      	add	r7, sp, #16
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	70fb      	strb	r3, [r7, #3]
 8009628:	4613      	mov	r3, r2
 800962a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800962c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009630:	2124      	movs	r1, #36	; 0x24
 8009632:	2022      	movs	r0, #34	; 0x22
 8009634:	f002 fb24 	bl	800bc80 <pbuf_alloc>
 8009638:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d056      	beq.n	80096ee <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	895b      	ldrh	r3, [r3, #10]
 8009644:	2b23      	cmp	r3, #35	; 0x23
 8009646:	d806      	bhi.n	8009656 <icmp_send_response+0x3a>
 8009648:	4b2b      	ldr	r3, [pc, #172]	; (80096f8 <icmp_send_response+0xdc>)
 800964a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800964e:	492b      	ldr	r1, [pc, #172]	; (80096fc <icmp_send_response+0xe0>)
 8009650:	482b      	ldr	r0, [pc, #172]	; (8009700 <icmp_send_response+0xe4>)
 8009652:	f009 f825 	bl	80126a0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	78fa      	ldrb	r2, [r7, #3]
 8009666:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	78ba      	ldrb	r2, [r7, #2]
 800966c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	2200      	movs	r2, #0
 8009672:	711a      	strb	r2, [r3, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	2200      	movs	r2, #0
 800967c:	719a      	strb	r2, [r3, #6]
 800967e:	2200      	movs	r2, #0
 8009680:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f103 0008 	add.w	r0, r3, #8
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	221c      	movs	r2, #28
 8009690:	4619      	mov	r1, r3
 8009692:	f008 ffef 	bl	8012674 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800969c:	f107 030c 	add.w	r3, r7, #12
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 f903 	bl	80098ac <ip4_route>
 80096a6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d01b      	beq.n	80096e6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2200      	movs	r2, #0
 80096b2:	709a      	strb	r2, [r3, #2]
 80096b4:	2200      	movs	r2, #0
 80096b6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	895b      	ldrh	r3, [r3, #10]
 80096bc:	4619      	mov	r1, r3
 80096be:	6978      	ldr	r0, [r7, #20]
 80096c0:	f000 f87d 	bl	80097be <inet_chksum>
 80096c4:	4603      	mov	r3, r0
 80096c6:	461a      	mov	r2, r3
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80096cc:	f107 020c 	add.w	r2, r7, #12
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	9302      	str	r3, [sp, #8]
 80096d4:	2301      	movs	r3, #1
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	2300      	movs	r3, #0
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	23ff      	movs	r3, #255	; 0xff
 80096de:	2100      	movs	r1, #0
 80096e0:	69f8      	ldr	r0, [r7, #28]
 80096e2:	f000 faa1 	bl	8009c28 <ip4_output_if>
  }
  pbuf_free(q);
 80096e6:	69f8      	ldr	r0, [r7, #28]
 80096e8:	f002 fdae 	bl	800c248 <pbuf_free>
 80096ec:	e000      	b.n	80096f0 <icmp_send_response+0xd4>
    return;
 80096ee:	bf00      	nop
}
 80096f0:	3720      	adds	r7, #32
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	08013bac 	.word	0x08013bac
 80096fc:	08013cb4 	.word	0x08013cb4
 8009700:	08013c58 	.word	0x08013c58

08009704 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009704:	b480      	push	{r7}
 8009706:	b089      	sub	sp, #36	; 0x24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	f003 0301 	and.w	r3, r3, #1
 8009720:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00d      	beq.n	8009744 <lwip_standard_chksum+0x40>
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	dd0a      	ble.n	8009744 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800972e:	69fa      	ldr	r2, [r7, #28]
 8009730:	1c53      	adds	r3, r2, #1
 8009732:	61fb      	str	r3, [r7, #28]
 8009734:	f107 030e 	add.w	r3, r7, #14
 8009738:	3301      	adds	r3, #1
 800973a:	7812      	ldrb	r2, [r2, #0]
 800973c:	701a      	strb	r2, [r3, #0]
    len--;
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	3b01      	subs	r3, #1
 8009742:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8009748:	e00a      	b.n	8009760 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	1c9a      	adds	r2, r3, #2
 800974e:	61ba      	str	r2, [r7, #24]
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	461a      	mov	r2, r3
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	4413      	add	r3, r2
 8009758:	617b      	str	r3, [r7, #20]
    len -= 2;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	3b02      	subs	r3, #2
 800975e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2b01      	cmp	r3, #1
 8009764:	dcf1      	bgt.n	800974a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	dd04      	ble.n	8009776 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800976c:	f107 030e 	add.w	r3, r7, #14
 8009770:	69ba      	ldr	r2, [r7, #24]
 8009772:	7812      	ldrb	r2, [r2, #0]
 8009774:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8009776:	89fb      	ldrh	r3, [r7, #14]
 8009778:	461a      	mov	r2, r3
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	4413      	add	r3, r2
 800977e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	0c1a      	lsrs	r2, r3, #16
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	b29b      	uxth	r3, r3
 8009788:	4413      	add	r3, r2
 800978a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	0c1a      	lsrs	r2, r3, #16
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	b29b      	uxth	r3, r3
 8009794:	4413      	add	r3, r2
 8009796:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d007      	beq.n	80097ae <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	021b      	lsls	r3, r3, #8
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	0a1b      	lsrs	r3, r3, #8
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	4313      	orrs	r3, r2
 80097ac:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	b29b      	uxth	r3, r3
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3724      	adds	r7, #36	; 0x24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b082      	sub	sp, #8
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	460b      	mov	r3, r1
 80097c8:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80097ca:	887b      	ldrh	r3, [r7, #2]
 80097cc:	4619      	mov	r1, r3
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7ff ff98 	bl	8009704 <lwip_standard_chksum>
 80097d4:	4603      	mov	r3, r0
 80097d6:	43db      	mvns	r3, r3
 80097d8:	b29b      	uxth	r3, r3
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b086      	sub	sp, #24
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	613b      	str	r3, [r7, #16]
 80097f6:	e02b      	b.n	8009850 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	895b      	ldrh	r3, [r3, #10]
 8009800:	4619      	mov	r1, r3
 8009802:	4610      	mov	r0, r2
 8009804:	f7ff ff7e 	bl	8009704 <lwip_standard_chksum>
 8009808:	4603      	mov	r3, r0
 800980a:	461a      	mov	r2, r3
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	4413      	add	r3, r2
 8009810:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	0c1a      	lsrs	r2, r3, #16
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	b29b      	uxth	r3, r3
 800981a:	4413      	add	r3, r2
 800981c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	895b      	ldrh	r3, [r3, #10]
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	b29b      	uxth	r3, r3
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00e      	beq.n	800984a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	bf0c      	ite	eq
 8009832:	2301      	moveq	r3, #1
 8009834:	2300      	movne	r3, #0
 8009836:	b2db      	uxtb	r3, r3
 8009838:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	b29a      	uxth	r2, r3
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	0a1b      	lsrs	r3, r3, #8
 8009844:	b2db      	uxtb	r3, r3
 8009846:	4313      	orrs	r3, r2
 8009848:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	613b      	str	r3, [r7, #16]
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1d0      	bne.n	80097f8 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d007      	beq.n	800986c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	021b      	lsls	r3, r3, #8
 8009860:	b29a      	uxth	r2, r3
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	0a1b      	lsrs	r3, r3, #8
 8009866:	b2db      	uxtb	r3, r3
 8009868:	4313      	orrs	r3, r2
 800986a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	b29b      	uxth	r3, r3
 8009870:	43db      	mvns	r3, r3
 8009872:	b29b      	uxth	r3, r3
}
 8009874:	4618      	mov	r0, r3
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009882:	2300      	movs	r3, #0
 8009884:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009886:	f003 f805 	bl	800c894 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800988a:	f001 f9ef 	bl	800ac6c <mem_init>
  memp_init();
 800988e:	f001 fd53 	bl	800b338 <memp_init>
  pbuf_init();
  netif_init();
 8009892:	f001 fe5f 	bl	800b554 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009896:	f008 fcff 	bl	8012298 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800989a:	f003 f885 	bl	800c9a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800989e:	f008 fc41 	bl	8012124 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80098a2:	bf00      	nop
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80098b4:	4b33      	ldr	r3, [pc, #204]	; (8009984 <ip4_route+0xd8>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	60fb      	str	r3, [r7, #12]
 80098ba:	e036      	b.n	800992a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d02b      	beq.n	8009924 <ip4_route+0x78>
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80098d2:	089b      	lsrs	r3, r3, #2
 80098d4:	f003 0301 	and.w	r3, r3, #1
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d022      	beq.n	8009924 <ip4_route+0x78>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	3304      	adds	r3, #4
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d01d      	beq.n	8009924 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	3304      	adds	r3, #4
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	405a      	eors	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3308      	adds	r3, #8
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4013      	ands	r3, r2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d101      	bne.n	8009904 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	e038      	b.n	8009976 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800990a:	f003 0302 	and.w	r3, r3, #2
 800990e:	2b00      	cmp	r3, #0
 8009910:	d108      	bne.n	8009924 <ip4_route+0x78>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	330c      	adds	r3, #12
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	429a      	cmp	r2, r3
 800991e:	d101      	bne.n	8009924 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	e028      	b.n	8009976 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	60fb      	str	r3, [r7, #12]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1c5      	bne.n	80098bc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009930:	4b15      	ldr	r3, [pc, #84]	; (8009988 <ip4_route+0xdc>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d01a      	beq.n	800996e <ip4_route+0xc2>
 8009938:	4b13      	ldr	r3, [pc, #76]	; (8009988 <ip4_route+0xdc>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009940:	f003 0301 	and.w	r3, r3, #1
 8009944:	2b00      	cmp	r3, #0
 8009946:	d012      	beq.n	800996e <ip4_route+0xc2>
 8009948:	4b0f      	ldr	r3, [pc, #60]	; (8009988 <ip4_route+0xdc>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009950:	f003 0304 	and.w	r3, r3, #4
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00a      	beq.n	800996e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009958:	4b0b      	ldr	r3, [pc, #44]	; (8009988 <ip4_route+0xdc>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3304      	adds	r3, #4
 800995e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009960:	2b00      	cmp	r3, #0
 8009962:	d004      	beq.n	800996e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b7f      	cmp	r3, #127	; 0x7f
 800996c:	d101      	bne.n	8009972 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800996e:	2300      	movs	r3, #0
 8009970:	e001      	b.n	8009976 <ip4_route+0xca>
  }

  return netif_default;
 8009972:	4b05      	ldr	r3, [pc, #20]	; (8009988 <ip4_route+0xdc>)
 8009974:	681b      	ldr	r3, [r3, #0]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3714      	adds	r7, #20
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	2400740c 	.word	0x2400740c
 8009988:	24007410 	.word	0x24007410

0800998c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d016      	beq.n	80099d2 <ip4_input_accept+0x46>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	3304      	adds	r3, #4
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d011      	beq.n	80099d2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80099ae:	4b0b      	ldr	r3, [pc, #44]	; (80099dc <ip4_input_accept+0x50>)
 80099b0:	695a      	ldr	r2, [r3, #20]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	3304      	adds	r3, #4
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d008      	beq.n	80099ce <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80099bc:	4b07      	ldr	r3, [pc, #28]	; (80099dc <ip4_input_accept+0x50>)
 80099be:	695b      	ldr	r3, [r3, #20]
 80099c0:	6879      	ldr	r1, [r7, #4]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 fa08 	bl	8009dd8 <ip4_addr_isbroadcast_u32>
 80099c8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e000      	b.n	80099d4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	2400430c 	.word	0x2400430c

080099e0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	091b      	lsrs	r3, r3, #4
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	d004      	beq.n	8009a06 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f002 fc23 	bl	800c248 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	e107      	b.n	8009c16 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	f003 030f 	and.w	r3, r3, #15
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	885b      	ldrh	r3, [r3, #2]
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe fc6d 	bl	80082fc <lwip_htons>
 8009a22:	4603      	mov	r3, r0
 8009a24:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	891b      	ldrh	r3, [r3, #8]
 8009a2a:	89ba      	ldrh	r2, [r7, #12]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d204      	bcs.n	8009a3a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8009a30:	89bb      	ldrh	r3, [r7, #12]
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f002 fa81 	bl	800bf3c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	895b      	ldrh	r3, [r3, #10]
 8009a3e:	89fa      	ldrh	r2, [r7, #14]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d807      	bhi.n	8009a54 <ip4_input+0x74>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	891b      	ldrh	r3, [r3, #8]
 8009a48:	89ba      	ldrh	r2, [r7, #12]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d802      	bhi.n	8009a54 <ip4_input+0x74>
 8009a4e:	89fb      	ldrh	r3, [r7, #14]
 8009a50:	2b13      	cmp	r3, #19
 8009a52:	d804      	bhi.n	8009a5e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f002 fbf7 	bl	800c248 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e0db      	b.n	8009c16 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	4a6f      	ldr	r2, [pc, #444]	; (8009c20 <ip4_input+0x240>)
 8009a64:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	4a6d      	ldr	r2, [pc, #436]	; (8009c20 <ip4_input+0x240>)
 8009a6c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009a6e:	4b6c      	ldr	r3, [pc, #432]	; (8009c20 <ip4_input+0x240>)
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a76:	2be0      	cmp	r3, #224	; 0xe0
 8009a78:	d112      	bne.n	8009aa0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a80:	f003 0301 	and.w	r3, r3, #1
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d007      	beq.n	8009a9a <ip4_input+0xba>
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <ip4_input+0xba>
      netif = inp;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	613b      	str	r3, [r7, #16]
 8009a98:	e02a      	b.n	8009af0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	613b      	str	r3, [r7, #16]
 8009a9e:	e027      	b.n	8009af0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8009aa0:	6838      	ldr	r0, [r7, #0]
 8009aa2:	f7ff ff73 	bl	800998c <ip4_input_accept>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <ip4_input+0xd2>
      netif = inp;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	613b      	str	r3, [r7, #16]
 8009ab0:	e01e      	b.n	8009af0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8009ab6:	4b5a      	ldr	r3, [pc, #360]	; (8009c20 <ip4_input+0x240>)
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	2b7f      	cmp	r3, #127	; 0x7f
 8009abe:	d017      	beq.n	8009af0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8009ac0:	4b58      	ldr	r3, [pc, #352]	; (8009c24 <ip4_input+0x244>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	613b      	str	r3, [r7, #16]
 8009ac6:	e00e      	b.n	8009ae6 <ip4_input+0x106>
          if (netif == inp) {
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d006      	beq.n	8009ade <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8009ad0:	6938      	ldr	r0, [r7, #16]
 8009ad2:	f7ff ff5b 	bl	800998c <ip4_input_accept>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d108      	bne.n	8009aee <ip4_input+0x10e>
 8009adc:	e000      	b.n	8009ae0 <ip4_input+0x100>
            continue;
 8009ade:	bf00      	nop
        NETIF_FOREACH(netif) {
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	613b      	str	r3, [r7, #16]
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1ed      	bne.n	8009ac8 <ip4_input+0xe8>
 8009aec:	e000      	b.n	8009af0 <ip4_input+0x110>
            break;
 8009aee:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009af0:	4b4b      	ldr	r3, [pc, #300]	; (8009c20 <ip4_input+0x240>)
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 f96e 	bl	8009dd8 <ip4_addr_isbroadcast_u32>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d105      	bne.n	8009b0e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8009b02:	4b47      	ldr	r3, [pc, #284]	; (8009c20 <ip4_input+0x240>)
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009b0a:	2be0      	cmp	r3, #224	; 0xe0
 8009b0c:	d104      	bne.n	8009b18 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f002 fb9a 	bl	800c248 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	e07e      	b.n	8009c16 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d104      	bne.n	8009b28 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f002 fb92 	bl	800c248 <pbuf_free>
    return ERR_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	e076      	b.n	8009c16 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	88db      	ldrh	r3, [r3, #6]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8009b34:	4013      	ands	r3, r2
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00b      	beq.n	8009b52 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fc92 	bl	800a464 <ip4_reass>
 8009b40:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <ip4_input+0x16c>
      return ERR_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e064      	b.n	8009c16 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8009b52:	4a33      	ldr	r2, [pc, #204]	; (8009c20 <ip4_input+0x240>)
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8009b58:	4a31      	ldr	r2, [pc, #196]	; (8009c20 <ip4_input+0x240>)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8009b5e:	4a30      	ldr	r2, [pc, #192]	; (8009c20 <ip4_input+0x240>)
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	f003 030f 	and.w	r3, r3, #15
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	4b2a      	ldr	r3, [pc, #168]	; (8009c20 <ip4_input+0x240>)
 8009b76:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8009b78:	89fb      	ldrh	r3, [r7, #14]
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f002 fadd 	bl	800c13c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	7a5b      	ldrb	r3, [r3, #9]
 8009b86:	2b11      	cmp	r3, #17
 8009b88:	d006      	beq.n	8009b98 <ip4_input+0x1b8>
 8009b8a:	2b11      	cmp	r3, #17
 8009b8c:	dc13      	bgt.n	8009bb6 <ip4_input+0x1d6>
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d00c      	beq.n	8009bac <ip4_input+0x1cc>
 8009b92:	2b06      	cmp	r3, #6
 8009b94:	d005      	beq.n	8009ba2 <ip4_input+0x1c2>
 8009b96:	e00e      	b.n	8009bb6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f008 fbf2 	bl	8012384 <udp_input>
        break;
 8009ba0:	e026      	b.n	8009bf0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f004 fa99 	bl	800e0dc <tcp_input>
        break;
 8009baa:	e021      	b.n	8009bf0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7ff fbf4 	bl	800939c <icmp_input>
        break;
 8009bb4:	e01c      	b.n	8009bf0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009bb6:	4b1a      	ldr	r3, [pc, #104]	; (8009c20 <ip4_input+0x240>)
 8009bb8:	695b      	ldr	r3, [r3, #20]
 8009bba:	6939      	ldr	r1, [r7, #16]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f000 f90b 	bl	8009dd8 <ip4_addr_isbroadcast_u32>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10f      	bne.n	8009be8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009bc8:	4b15      	ldr	r3, [pc, #84]	; (8009c20 <ip4_input+0x240>)
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009bd0:	2be0      	cmp	r3, #224	; 0xe0
 8009bd2:	d009      	beq.n	8009be8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8009bd4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f002 fb21 	bl	800c222 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8009be0:	2102      	movs	r1, #2
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff fcfa 	bl	80095dc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f002 fb2d 	bl	800c248 <pbuf_free>
        break;
 8009bee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8009bf0:	4b0b      	ldr	r3, [pc, #44]	; (8009c20 <ip4_input+0x240>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8009bf6:	4b0a      	ldr	r3, [pc, #40]	; (8009c20 <ip4_input+0x240>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8009bfc:	4b08      	ldr	r3, [pc, #32]	; (8009c20 <ip4_input+0x240>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8009c02:	4b07      	ldr	r3, [pc, #28]	; (8009c20 <ip4_input+0x240>)
 8009c04:	2200      	movs	r2, #0
 8009c06:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8009c08:	4b05      	ldr	r3, [pc, #20]	; (8009c20 <ip4_input+0x240>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8009c0e:	4b04      	ldr	r3, [pc, #16]	; (8009c20 <ip4_input+0x240>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3718      	adds	r7, #24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	2400430c 	.word	0x2400430c
 8009c24:	2400740c 	.word	0x2400740c

08009c28 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b08a      	sub	sp, #40	; 0x28
 8009c2c:	af04      	add	r7, sp, #16
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d009      	beq.n	8009c54 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <ip4_output_if+0x26>
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d102      	bne.n	8009c54 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8009c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c50:	3304      	adds	r3, #4
 8009c52:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009c54:	78fa      	ldrb	r2, [r7, #3]
 8009c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c58:	9302      	str	r3, [sp, #8]
 8009c5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009c5e:	9301      	str	r3, [sp, #4]
 8009c60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	4613      	mov	r3, r2
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	6979      	ldr	r1, [r7, #20]
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f000 f805 	bl	8009c7c <ip4_output_if_src>
 8009c72:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b088      	sub	sp, #32
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	7b9b      	ldrb	r3, [r3, #14]
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d006      	beq.n	8009ca0 <ip4_output_if_src+0x24>
 8009c92:	4b4b      	ldr	r3, [pc, #300]	; (8009dc0 <ip4_output_if_src+0x144>)
 8009c94:	f44f 7255 	mov.w	r2, #852	; 0x354
 8009c98:	494a      	ldr	r1, [pc, #296]	; (8009dc4 <ip4_output_if_src+0x148>)
 8009c9a:	484b      	ldr	r0, [pc, #300]	; (8009dc8 <ip4_output_if_src+0x14c>)
 8009c9c:	f008 fd00 	bl	80126a0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d060      	beq.n	8009d68 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8009ca6:	2314      	movs	r3, #20
 8009ca8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8009caa:	2114      	movs	r1, #20
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f002 fa35 	bl	800c11c <pbuf_add_header>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009cb8:	f06f 0301 	mvn.w	r3, #1
 8009cbc:	e07c      	b.n	8009db8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	895b      	ldrh	r3, [r3, #10]
 8009cc8:	2b13      	cmp	r3, #19
 8009cca:	d806      	bhi.n	8009cda <ip4_output_if_src+0x5e>
 8009ccc:	4b3c      	ldr	r3, [pc, #240]	; (8009dc0 <ip4_output_if_src+0x144>)
 8009cce:	f44f 7262 	mov.w	r2, #904	; 0x388
 8009cd2:	493e      	ldr	r1, [pc, #248]	; (8009dcc <ip4_output_if_src+0x150>)
 8009cd4:	483c      	ldr	r0, [pc, #240]	; (8009dc8 <ip4_output_if_src+0x14c>)
 8009cd6:	f008 fce3 	bl	80126a0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	78fa      	ldrb	r2, [r7, #3]
 8009cde:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8009ce6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8009cf0:	8b7b      	ldrh	r3, [r7, #26]
 8009cf2:	089b      	lsrs	r3, r3, #2
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009d08:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	891b      	ldrh	r3, [r3, #8]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fe faf4 	bl	80082fc <lwip_htons>
 8009d14:	4603      	mov	r3, r0
 8009d16:	461a      	mov	r2, r3
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	719a      	strb	r2, [r3, #6]
 8009d22:	2200      	movs	r2, #0
 8009d24:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009d26:	4b2a      	ldr	r3, [pc, #168]	; (8009dd0 <ip4_output_if_src+0x154>)
 8009d28:	881b      	ldrh	r3, [r3, #0]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe fae6 	bl	80082fc <lwip_htons>
 8009d30:	4603      	mov	r3, r0
 8009d32:	461a      	mov	r2, r3
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8009d38:	4b25      	ldr	r3, [pc, #148]	; (8009dd0 <ip4_output_if_src+0x154>)
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	4b23      	ldr	r3, [pc, #140]	; (8009dd0 <ip4_output_if_src+0x154>)
 8009d42:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d104      	bne.n	8009d54 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8009d4a:	4b22      	ldr	r3, [pc, #136]	; (8009dd4 <ip4_output_if_src+0x158>)
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	60da      	str	r2, [r3, #12]
 8009d52:	e003      	b.n	8009d5c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	729a      	strb	r2, [r3, #10]
 8009d62:	2200      	movs	r2, #0
 8009d64:	72da      	strb	r2, [r3, #11]
 8009d66:	e00f      	b.n	8009d88 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	895b      	ldrh	r3, [r3, #10]
 8009d6c:	2b13      	cmp	r3, #19
 8009d6e:	d802      	bhi.n	8009d76 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009d70:	f06f 0301 	mvn.w	r3, #1
 8009d74:	e020      	b.n	8009db8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8009d82:	f107 0314 	add.w	r3, r7, #20
 8009d86:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8009d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00c      	beq.n	8009daa <ip4_output_if_src+0x12e>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	891a      	ldrh	r2, [r3, #8]
 8009d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d906      	bls.n	8009daa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 fd53 	bl	800a84c <ip4_frag>
 8009da6:	4603      	mov	r3, r0
 8009da8:	e006      	b.n	8009db8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8009daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	68f9      	ldr	r1, [r7, #12]
 8009db2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009db4:	4798      	blx	r3
 8009db6:	4603      	mov	r3, r0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3720      	adds	r7, #32
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	08013ce0 	.word	0x08013ce0
 8009dc4:	08013d54 	.word	0x08013d54
 8009dc8:	08013d60 	.word	0x08013d60
 8009dcc:	08013d88 	.word	0x08013d88
 8009dd0:	24004324 	.word	0x24004324
 8009dd4:	08016684 	.word	0x08016684

08009dd8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dec:	d002      	beq.n	8009df4 <ip4_addr_isbroadcast_u32+0x1c>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d101      	bne.n	8009df8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e02a      	b.n	8009e4e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009dfe:	f003 0302 	and.w	r3, r3, #2
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	e021      	b.n	8009e4e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d101      	bne.n	8009e1a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	e019      	b.n	8009e4e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	3304      	adds	r3, #4
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	405a      	eors	r2, r3
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	3308      	adds	r3, #8
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10d      	bne.n	8009e4c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	3308      	adds	r3, #8
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	43da      	mvns	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	3308      	adds	r3, #8
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d101      	bne.n	8009e4c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e000      	b.n	8009e4e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8009e4c:	2300      	movs	r3, #0
  }
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
	...

08009e5c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8009e62:	2300      	movs	r3, #0
 8009e64:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8009e66:	4b12      	ldr	r3, [pc, #72]	; (8009eb0 <ip_reass_tmr+0x54>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8009e6c:	e018      	b.n	8009ea0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	7fdb      	ldrb	r3, [r3, #31]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00b      	beq.n	8009e8e <ip_reass_tmr+0x32>
      r->timer--;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	7fdb      	ldrb	r3, [r3, #31]
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	b2da      	uxtb	r2, r3
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	60fb      	str	r3, [r7, #12]
 8009e8c:	e008      	b.n	8009ea0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8009e98:	68b9      	ldr	r1, [r7, #8]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f80a 	bl	8009eb4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e3      	bne.n	8009e6e <ip_reass_tmr+0x12>
    }
  }
}
 8009ea6:	bf00      	nop
 8009ea8:	bf00      	nop
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	24004328 	.word	0x24004328

08009eb4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b088      	sub	sp, #32
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d105      	bne.n	8009ed6 <ip_reass_free_complete_datagram+0x22>
 8009eca:	4b45      	ldr	r3, [pc, #276]	; (8009fe0 <ip_reass_free_complete_datagram+0x12c>)
 8009ecc:	22ab      	movs	r2, #171	; 0xab
 8009ece:	4945      	ldr	r1, [pc, #276]	; (8009fe4 <ip_reass_free_complete_datagram+0x130>)
 8009ed0:	4845      	ldr	r0, [pc, #276]	; (8009fe8 <ip_reass_free_complete_datagram+0x134>)
 8009ed2:	f008 fbe5 	bl	80126a0 <iprintf>
  if (prev != NULL) {
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00a      	beq.n	8009ef2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d005      	beq.n	8009ef2 <ip_reass_free_complete_datagram+0x3e>
 8009ee6:	4b3e      	ldr	r3, [pc, #248]	; (8009fe0 <ip_reass_free_complete_datagram+0x12c>)
 8009ee8:	22ad      	movs	r2, #173	; 0xad
 8009eea:	4940      	ldr	r1, [pc, #256]	; (8009fec <ip_reass_free_complete_datagram+0x138>)
 8009eec:	483e      	ldr	r0, [pc, #248]	; (8009fe8 <ip_reass_free_complete_datagram+0x134>)
 8009eee:	f008 fbd7 	bl	80126a0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	889b      	ldrh	r3, [r3, #4]
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d12a      	bne.n	8009f5a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	6858      	ldr	r0, [r3, #4]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	3308      	adds	r3, #8
 8009f1a:	2214      	movs	r2, #20
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	f008 fba9 	bl	8012674 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8009f22:	2101      	movs	r1, #1
 8009f24:	69b8      	ldr	r0, [r7, #24]
 8009f26:	f7ff fb69 	bl	80095fc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8009f2a:	69b8      	ldr	r0, [r7, #24]
 8009f2c:	f002 fa1a 	bl	800c364 <pbuf_clen>
 8009f30:	4603      	mov	r3, r0
 8009f32:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009f34:	8bfa      	ldrh	r2, [r7, #30]
 8009f36:	8a7b      	ldrh	r3, [r7, #18]
 8009f38:	4413      	add	r3, r2
 8009f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f3e:	db05      	blt.n	8009f4c <ip_reass_free_complete_datagram+0x98>
 8009f40:	4b27      	ldr	r3, [pc, #156]	; (8009fe0 <ip_reass_free_complete_datagram+0x12c>)
 8009f42:	22bc      	movs	r2, #188	; 0xbc
 8009f44:	492a      	ldr	r1, [pc, #168]	; (8009ff0 <ip_reass_free_complete_datagram+0x13c>)
 8009f46:	4828      	ldr	r0, [pc, #160]	; (8009fe8 <ip_reass_free_complete_datagram+0x134>)
 8009f48:	f008 fbaa 	bl	80126a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009f4c:	8bfa      	ldrh	r2, [r7, #30]
 8009f4e:	8a7b      	ldrh	r3, [r7, #18]
 8009f50:	4413      	add	r3, r2
 8009f52:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8009f54:	69b8      	ldr	r0, [r7, #24]
 8009f56:	f002 f977 	bl	800c248 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8009f60:	e01f      	b.n	8009fa2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	617b      	str	r3, [r7, #20]
    pcur = p;
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f002 f9f6 	bl	800c364 <pbuf_clen>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009f7c:	8bfa      	ldrh	r2, [r7, #30]
 8009f7e:	8a7b      	ldrh	r3, [r7, #18]
 8009f80:	4413      	add	r3, r2
 8009f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f86:	db05      	blt.n	8009f94 <ip_reass_free_complete_datagram+0xe0>
 8009f88:	4b15      	ldr	r3, [pc, #84]	; (8009fe0 <ip_reass_free_complete_datagram+0x12c>)
 8009f8a:	22cc      	movs	r2, #204	; 0xcc
 8009f8c:	4918      	ldr	r1, [pc, #96]	; (8009ff0 <ip_reass_free_complete_datagram+0x13c>)
 8009f8e:	4816      	ldr	r0, [pc, #88]	; (8009fe8 <ip_reass_free_complete_datagram+0x134>)
 8009f90:	f008 fb86 	bl	80126a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009f94:	8bfa      	ldrh	r2, [r7, #30]
 8009f96:	8a7b      	ldrh	r3, [r7, #18]
 8009f98:	4413      	add	r3, r2
 8009f9a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f002 f953 	bl	800c248 <pbuf_free>
  while (p != NULL) {
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1dc      	bne.n	8009f62 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8009fa8:	6839      	ldr	r1, [r7, #0]
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f8c2 	bl	800a134 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009fb0:	4b10      	ldr	r3, [pc, #64]	; (8009ff4 <ip_reass_free_complete_datagram+0x140>)
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	8bfa      	ldrh	r2, [r7, #30]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d905      	bls.n	8009fc6 <ip_reass_free_complete_datagram+0x112>
 8009fba:	4b09      	ldr	r3, [pc, #36]	; (8009fe0 <ip_reass_free_complete_datagram+0x12c>)
 8009fbc:	22d2      	movs	r2, #210	; 0xd2
 8009fbe:	490e      	ldr	r1, [pc, #56]	; (8009ff8 <ip_reass_free_complete_datagram+0x144>)
 8009fc0:	4809      	ldr	r0, [pc, #36]	; (8009fe8 <ip_reass_free_complete_datagram+0x134>)
 8009fc2:	f008 fb6d 	bl	80126a0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8009fc6:	4b0b      	ldr	r3, [pc, #44]	; (8009ff4 <ip_reass_free_complete_datagram+0x140>)
 8009fc8:	881a      	ldrh	r2, [r3, #0]
 8009fca:	8bfb      	ldrh	r3, [r7, #30]
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	4b08      	ldr	r3, [pc, #32]	; (8009ff4 <ip_reass_free_complete_datagram+0x140>)
 8009fd2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8009fd4:	8bfb      	ldrh	r3, [r7, #30]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3720      	adds	r7, #32
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	08013db8 	.word	0x08013db8
 8009fe4:	08013e30 	.word	0x08013e30
 8009fe8:	08013e3c 	.word	0x08013e3c
 8009fec:	08013e64 	.word	0x08013e64
 8009ff0:	08013e78 	.word	0x08013e78
 8009ff4:	2400432c 	.word	0x2400432c
 8009ff8:	08013e98 	.word	0x08013e98

08009ffc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b08a      	sub	sp, #40	; 0x28
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800a006:	2300      	movs	r3, #0
 800a008:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800a00e:	2300      	movs	r3, #0
 800a010:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800a012:	2300      	movs	r3, #0
 800a014:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800a01a:	4b28      	ldr	r3, [pc, #160]	; (800a0bc <ip_reass_remove_oldest_datagram+0xc0>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a020:	e030      	b.n	800a084 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800a022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a024:	695a      	ldr	r2, [r3, #20]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d10c      	bne.n	800a048 <ip_reass_remove_oldest_datagram+0x4c>
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	699a      	ldr	r2, [r3, #24]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	429a      	cmp	r2, r3
 800a038:	d106      	bne.n	800a048 <ip_reass_remove_oldest_datagram+0x4c>
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	899a      	ldrh	r2, [r3, #12]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	889b      	ldrh	r3, [r3, #4]
 800a042:	b29b      	uxth	r3, r3
 800a044:	429a      	cmp	r2, r3
 800a046:	d014      	beq.n	800a072 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	3301      	adds	r3, #1
 800a04c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d104      	bne.n	800a05e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a056:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	61bb      	str	r3, [r7, #24]
 800a05c:	e009      	b.n	800a072 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a060:	7fda      	ldrb	r2, [r3, #31]
 800a062:	6a3b      	ldr	r3, [r7, #32]
 800a064:	7fdb      	ldrb	r3, [r3, #31]
 800a066:	429a      	cmp	r2, r3
 800a068:	d803      	bhi.n	800a072 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800a072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1cb      	bne.n	800a022 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800a08a:	6a3b      	ldr	r3, [r7, #32]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d008      	beq.n	800a0a2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800a090:	69b9      	ldr	r1, [r7, #24]
 800a092:	6a38      	ldr	r0, [r7, #32]
 800a094:	f7ff ff0e 	bl	8009eb4 <ip_reass_free_complete_datagram>
 800a098:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4413      	add	r3, r2
 800a0a0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	da02      	bge.n	800a0b0 <ip_reass_remove_oldest_datagram+0xb4>
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	dcac      	bgt.n	800a00a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800a0b0:	697b      	ldr	r3, [r7, #20]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3728      	adds	r7, #40	; 0x28
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	24004328 	.word	0x24004328

0800a0c0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a0ca:	2004      	movs	r0, #4
 800a0cc:	f001 f9a2 	bl	800b414 <memp_malloc>
 800a0d0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d110      	bne.n	800a0fa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7ff ff8e 	bl	8009ffc <ip_reass_remove_oldest_datagram>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	dc03      	bgt.n	800a0f0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a0e8:	2004      	movs	r0, #4
 800a0ea:	f001 f993 	bl	800b414 <memp_malloc>
 800a0ee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	e016      	b.n	800a128 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a0fa:	2220      	movs	r2, #32
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f008 fac6 	bl	8012690 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	220f      	movs	r2, #15
 800a108:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800a10a:	4b09      	ldr	r3, [pc, #36]	; (800a130 <ip_reass_enqueue_new_datagram+0x70>)
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800a112:	4a07      	ldr	r2, [pc, #28]	; (800a130 <ip_reass_enqueue_new_datagram+0x70>)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	3308      	adds	r3, #8
 800a11c:	2214      	movs	r2, #20
 800a11e:	6879      	ldr	r1, [r7, #4]
 800a120:	4618      	mov	r0, r3
 800a122:	f008 faa7 	bl	8012674 <memcpy>
  return ipr;
 800a126:	68fb      	ldr	r3, [r7, #12]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	24004328 	.word	0x24004328

0800a134 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a13e:	4b10      	ldr	r3, [pc, #64]	; (800a180 <ip_reass_dequeue_datagram+0x4c>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	429a      	cmp	r2, r3
 800a146:	d104      	bne.n	800a152 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a0c      	ldr	r2, [pc, #48]	; (800a180 <ip_reass_dequeue_datagram+0x4c>)
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	e00d      	b.n	800a16e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d106      	bne.n	800a166 <ip_reass_dequeue_datagram+0x32>
 800a158:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <ip_reass_dequeue_datagram+0x50>)
 800a15a:	f240 1245 	movw	r2, #325	; 0x145
 800a15e:	490a      	ldr	r1, [pc, #40]	; (800a188 <ip_reass_dequeue_datagram+0x54>)
 800a160:	480a      	ldr	r0, [pc, #40]	; (800a18c <ip_reass_dequeue_datagram+0x58>)
 800a162:	f008 fa9d 	bl	80126a0 <iprintf>
    prev->next = ipr->next;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a16e:	6879      	ldr	r1, [r7, #4]
 800a170:	2004      	movs	r0, #4
 800a172:	f001 f9c5 	bl	800b500 <memp_free>
}
 800a176:	bf00      	nop
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	24004328 	.word	0x24004328
 800a184:	08013db8 	.word	0x08013db8
 800a188:	08013ebc 	.word	0x08013ebc
 800a18c:	08013e3c 	.word	0x08013e3c

0800a190 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b08c      	sub	sp, #48	; 0x30
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800a19c:	2300      	movs	r3, #0
 800a19e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	885b      	ldrh	r3, [r3, #2]
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fe f8a3 	bl	80082fc <lwip_htons>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	f003 030f 	and.w	r3, r3, #15
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800a1c8:	7e7b      	ldrb	r3, [r7, #25]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	8b7a      	ldrh	r2, [r7, #26]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d202      	bcs.n	800a1d8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d6:	e135      	b.n	800a444 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800a1d8:	7e7b      	ldrb	r3, [r7, #25]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	8b7a      	ldrh	r2, [r7, #26]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	88db      	ldrh	r3, [r3, #6]
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fe f887 	bl	80082fc <lwip_htons>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	00db      	lsls	r3, r3, #3
 800a1f8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a202:	2200      	movs	r2, #0
 800a204:	701a      	strb	r2, [r3, #0]
 800a206:	2200      	movs	r2, #0
 800a208:	705a      	strb	r2, [r3, #1]
 800a20a:	2200      	movs	r2, #0
 800a20c:	709a      	strb	r2, [r3, #2]
 800a20e:	2200      	movs	r2, #0
 800a210:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a214:	8afa      	ldrh	r2, [r7, #22]
 800a216:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800a218:	8afa      	ldrh	r2, [r7, #22]
 800a21a:	8b7b      	ldrh	r3, [r7, #26]
 800a21c:	4413      	add	r3, r2
 800a21e:	b29a      	uxth	r2, r3
 800a220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a222:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800a224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a226:	88db      	ldrh	r3, [r3, #6]
 800a228:	b29b      	uxth	r3, r3
 800a22a:	8afa      	ldrh	r2, [r7, #22]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d902      	bls.n	800a236 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a230:	f04f 33ff 	mov.w	r3, #4294967295
 800a234:	e106      	b.n	800a444 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	627b      	str	r3, [r7, #36]	; 0x24
 800a23c:	e068      	b.n	800a310 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800a244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a246:	889b      	ldrh	r3, [r3, #4]
 800a248:	b29a      	uxth	r2, r3
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	889b      	ldrh	r3, [r3, #4]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	429a      	cmp	r2, r3
 800a252:	d235      	bcs.n	800a2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800a254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a258:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d020      	beq.n	800a2a2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800a260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a262:	889b      	ldrh	r3, [r3, #4]
 800a264:	b29a      	uxth	r2, r3
 800a266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a268:	88db      	ldrh	r3, [r3, #6]
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d307      	bcc.n	800a280 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a272:	88db      	ldrh	r3, [r3, #6]
 800a274:	b29a      	uxth	r2, r3
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	889b      	ldrh	r3, [r3, #4]
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d902      	bls.n	800a286 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a280:	f04f 33ff 	mov.w	r3, #4294967295
 800a284:	e0de      	b.n	800a444 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800a286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a288:	68ba      	ldr	r2, [r7, #8]
 800a28a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28e:	88db      	ldrh	r3, [r3, #6]
 800a290:	b29a      	uxth	r2, r3
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	889b      	ldrh	r3, [r3, #4]
 800a296:	b29b      	uxth	r3, r3
 800a298:	429a      	cmp	r2, r3
 800a29a:	d03d      	beq.n	800a318 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a29c:	2300      	movs	r3, #0
 800a29e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800a2a0:	e03a      	b.n	800a318 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800a2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a4:	88db      	ldrh	r3, [r3, #6]
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	889b      	ldrh	r3, [r3, #4]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d902      	bls.n	800a2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b6:	e0c5      	b.n	800a444 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	605a      	str	r2, [r3, #4]
      break;
 800a2be:	e02b      	b.n	800a318 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c2:	889b      	ldrh	r3, [r3, #4]
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	889b      	ldrh	r3, [r3, #4]
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d102      	bne.n	800a2d6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2d4:	e0b6      	b.n	800a444 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800a2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d8:	889b      	ldrh	r3, [r3, #4]
 800a2da:	b29a      	uxth	r2, r3
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	88db      	ldrh	r3, [r3, #6]
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d202      	bcs.n	800a2ec <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ea:	e0ab      	b.n	800a444 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d009      	beq.n	800a306 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800a2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f4:	88db      	ldrh	r3, [r3, #6]
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	889b      	ldrh	r3, [r3, #4]
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d001      	beq.n	800a306 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a302:	2300      	movs	r3, #0
 800a304:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a312:	2b00      	cmp	r3, #0
 800a314:	d193      	bne.n	800a23e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800a316:	e000      	b.n	800a31a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800a318:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800a31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d12d      	bne.n	800a37c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800a320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a322:	2b00      	cmp	r3, #0
 800a324:	d01c      	beq.n	800a360 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800a326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a328:	88db      	ldrh	r3, [r3, #6]
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32e:	889b      	ldrh	r3, [r3, #4]
 800a330:	b29b      	uxth	r3, r3
 800a332:	429a      	cmp	r2, r3
 800a334:	d906      	bls.n	800a344 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800a336:	4b45      	ldr	r3, [pc, #276]	; (800a44c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a338:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800a33c:	4944      	ldr	r1, [pc, #272]	; (800a450 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800a33e:	4845      	ldr	r0, [pc, #276]	; (800a454 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a340:	f008 f9ae 	bl	80126a0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800a344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a346:	68ba      	ldr	r2, [r7, #8]
 800a348:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800a34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34c:	88db      	ldrh	r3, [r3, #6]
 800a34e:	b29a      	uxth	r2, r3
 800a350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a352:	889b      	ldrh	r3, [r3, #4]
 800a354:	b29b      	uxth	r3, r3
 800a356:	429a      	cmp	r2, r3
 800a358:	d010      	beq.n	800a37c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800a35a:	2300      	movs	r3, #0
 800a35c:	623b      	str	r3, [r7, #32]
 800a35e:	e00d      	b.n	800a37c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d006      	beq.n	800a376 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800a368:	4b38      	ldr	r3, [pc, #224]	; (800a44c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a36a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800a36e:	493a      	ldr	r1, [pc, #232]	; (800a458 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800a370:	4838      	ldr	r0, [pc, #224]	; (800a454 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a372:	f008 f995 	bl	80126a0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d105      	bne.n	800a38e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	7f9b      	ldrb	r3, [r3, #30]
 800a386:	f003 0301 	and.w	r3, r3, #1
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d059      	beq.n	800a442 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800a38e:	6a3b      	ldr	r3, [r7, #32]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d04f      	beq.n	800a434 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d006      	beq.n	800a3aa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	889b      	ldrh	r3, [r3, #4]
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d002      	beq.n	800a3b0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	623b      	str	r3, [r7, #32]
 800a3ae:	e041      	b.n	800a434 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800a3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800a3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a3ba:	e012      	b.n	800a3e2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800a3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c4:	88db      	ldrh	r3, [r3, #6]
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ca:	889b      	ldrh	r3, [r3, #4]
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d002      	beq.n	800a3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	623b      	str	r3, [r7, #32]
            break;
 800a3d6:	e007      	b.n	800a3e8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3da:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800a3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1e9      	bne.n	800a3bc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d022      	beq.n	800a434 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d106      	bne.n	800a404 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800a3f6:	4b15      	ldr	r3, [pc, #84]	; (800a44c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a3f8:	f240 12df 	movw	r2, #479	; 0x1df
 800a3fc:	4917      	ldr	r1, [pc, #92]	; (800a45c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800a3fe:	4815      	ldr	r0, [pc, #84]	; (800a454 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a400:	f008 f94e 	bl	80126a0 <iprintf>
          LWIP_ASSERT("sanity check",
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d106      	bne.n	800a41e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800a410:	4b0e      	ldr	r3, [pc, #56]	; (800a44c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a412:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a416:	4911      	ldr	r1, [pc, #68]	; (800a45c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800a418:	480e      	ldr	r0, [pc, #56]	; (800a454 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a41a:	f008 f941 	bl	80126a0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800a41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d006      	beq.n	800a434 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800a426:	4b09      	ldr	r3, [pc, #36]	; (800a44c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a428:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800a42c:	490c      	ldr	r1, [pc, #48]	; (800a460 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800a42e:	4809      	ldr	r0, [pc, #36]	; (800a454 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a430:	f008 f936 	bl	80126a0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	2b00      	cmp	r3, #0
 800a438:	bf14      	ite	ne
 800a43a:	2301      	movne	r3, #1
 800a43c:	2300      	moveq	r3, #0
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	e000      	b.n	800a444 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3730      	adds	r7, #48	; 0x30
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	08013db8 	.word	0x08013db8
 800a450:	08013ed8 	.word	0x08013ed8
 800a454:	08013e3c 	.word	0x08013e3c
 800a458:	08013ef8 	.word	0x08013ef8
 800a45c:	08013f30 	.word	0x08013f30
 800a460:	08013f40 	.word	0x08013f40

0800a464 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b08e      	sub	sp, #56	; 0x38
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800a472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	f003 030f 	and.w	r3, r3, #15
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	2b14      	cmp	r3, #20
 800a482:	f040 8171 	bne.w	800a768 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a488:	88db      	ldrh	r3, [r3, #6]
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fd ff35 	bl	80082fc <lwip_htons>
 800a492:	4603      	mov	r3, r0
 800a494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a498:	b29b      	uxth	r3, r3
 800a49a:	00db      	lsls	r3, r3, #3
 800a49c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a0:	885b      	ldrh	r3, [r3, #2]
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7fd ff29 	bl	80082fc <lwip_htons>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800a4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	f003 030f 	and.w	r3, r3, #15
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800a4be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	f0c0 8150 	bcc.w	800a76c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800a4cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a4d4:	1ad3      	subs	r3, r2, r3
 800a4d6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f001 ff43 	bl	800c364 <pbuf_clen>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800a4e2:	4b8c      	ldr	r3, [pc, #560]	; (800a714 <ip4_reass+0x2b0>)
 800a4e4:	881b      	ldrh	r3, [r3, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	8c3b      	ldrh	r3, [r7, #32]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	2b0a      	cmp	r3, #10
 800a4ee:	dd10      	ble.n	800a512 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a4f0:	8c3b      	ldrh	r3, [r7, #32]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4f6:	f7ff fd81 	bl	8009ffc <ip_reass_remove_oldest_datagram>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f000 8137 	beq.w	800a770 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800a502:	4b84      	ldr	r3, [pc, #528]	; (800a714 <ip4_reass+0x2b0>)
 800a504:	881b      	ldrh	r3, [r3, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	8c3b      	ldrh	r3, [r7, #32]
 800a50a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a50c:	2b0a      	cmp	r3, #10
 800a50e:	f300 812f 	bgt.w	800a770 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a512:	4b81      	ldr	r3, [pc, #516]	; (800a718 <ip4_reass+0x2b4>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	633b      	str	r3, [r7, #48]	; 0x30
 800a518:	e015      	b.n	800a546 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51c:	695a      	ldr	r2, [r3, #20]
 800a51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	429a      	cmp	r2, r3
 800a524:	d10c      	bne.n	800a540 <ip4_reass+0xdc>
 800a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a528:	699a      	ldr	r2, [r3, #24]
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d106      	bne.n	800a540 <ip4_reass+0xdc>
 800a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a534:	899a      	ldrh	r2, [r3, #12]
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	889b      	ldrh	r3, [r3, #4]
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d006      	beq.n	800a54e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	633b      	str	r3, [r7, #48]	; 0x30
 800a546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1e6      	bne.n	800a51a <ip4_reass+0xb6>
 800a54c:	e000      	b.n	800a550 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800a54e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800a550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a552:	2b00      	cmp	r3, #0
 800a554:	d109      	bne.n	800a56a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800a556:	8c3b      	ldrh	r3, [r7, #32]
 800a558:	4619      	mov	r1, r3
 800a55a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a55c:	f7ff fdb0 	bl	800a0c0 <ip_reass_enqueue_new_datagram>
 800a560:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800a562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a564:	2b00      	cmp	r3, #0
 800a566:	d11c      	bne.n	800a5a2 <ip4_reass+0x13e>
      goto nullreturn;
 800a568:	e105      	b.n	800a776 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56c:	88db      	ldrh	r3, [r3, #6]
 800a56e:	b29b      	uxth	r3, r3
 800a570:	4618      	mov	r0, r3
 800a572:	f7fd fec3 	bl	80082fc <lwip_htons>
 800a576:	4603      	mov	r3, r0
 800a578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d110      	bne.n	800a5a2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	89db      	ldrh	r3, [r3, #14]
 800a584:	4618      	mov	r0, r3
 800a586:	f7fd feb9 	bl	80082fc <lwip_htons>
 800a58a:	4603      	mov	r3, r0
 800a58c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a590:	2b00      	cmp	r3, #0
 800a592:	d006      	beq.n	800a5a2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800a594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a596:	3308      	adds	r3, #8
 800a598:	2214      	movs	r2, #20
 800a59a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a59c:	4618      	mov	r0, r3
 800a59e:	f008 f869 	bl	8012674 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800a5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a4:	88db      	ldrh	r3, [r3, #6]
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	f003 0320 	and.w	r3, r3, #32
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	bf0c      	ite	eq
 800a5b0:	2301      	moveq	r3, #1
 800a5b2:	2300      	movne	r3, #0
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00e      	beq.n	800a5dc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800a5be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a5c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5c2:	4413      	add	r3, r2
 800a5c4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800a5c6:	8b7a      	ldrh	r2, [r7, #26]
 800a5c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	f0c0 80a0 	bcc.w	800a710 <ip4_reass+0x2ac>
 800a5d0:	8b7b      	ldrh	r3, [r7, #26]
 800a5d2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	f200 809a 	bhi.w	800a710 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800a5dc:	69fa      	ldr	r2, [r7, #28]
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5e2:	f7ff fdd5 	bl	800a190 <ip_reass_chain_frag_into_datagram_and_validate>
 800a5e6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ee:	f000 809b 	beq.w	800a728 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800a5f2:	4b48      	ldr	r3, [pc, #288]	; (800a714 <ip4_reass+0x2b0>)
 800a5f4:	881a      	ldrh	r2, [r3, #0]
 800a5f6:	8c3b      	ldrh	r3, [r7, #32]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	4b45      	ldr	r3, [pc, #276]	; (800a714 <ip4_reass+0x2b0>)
 800a5fe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00d      	beq.n	800a622 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800a606:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a60a:	4413      	add	r3, r2
 800a60c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	8a7a      	ldrh	r2, [r7, #18]
 800a612:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800a614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a616:	7f9b      	ldrb	r3, [r3, #30]
 800a618:	f043 0301 	orr.w	r3, r3, #1
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a620:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d171      	bne.n	800a70c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800a628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62a:	8b9b      	ldrh	r3, [r3, #28]
 800a62c:	3314      	adds	r3, #20
 800a62e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800a630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800a63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a644:	3308      	adds	r3, #8
 800a646:	2214      	movs	r2, #20
 800a648:	4619      	mov	r1, r3
 800a64a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a64c:	f008 f812 	bl	8012674 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800a650:	8a3b      	ldrh	r3, [r7, #16]
 800a652:	4618      	mov	r0, r3
 800a654:	f7fd fe52 	bl	80082fc <lwip_htons>
 800a658:	4603      	mov	r3, r0
 800a65a:	461a      	mov	r2, r3
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800a660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a662:	2200      	movs	r2, #0
 800a664:	719a      	strb	r2, [r3, #6]
 800a666:	2200      	movs	r2, #0
 800a668:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800a66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66c:	2200      	movs	r2, #0
 800a66e:	729a      	strb	r2, [r3, #10]
 800a670:	2200      	movs	r2, #0
 800a672:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800a67a:	e00d      	b.n	800a698 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800a67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800a682:	2114      	movs	r1, #20
 800a684:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a686:	f001 fd59 	bl	800c13c <pbuf_remove_header>
      pbuf_cat(p, r);
 800a68a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f001 fea9 	bl	800c3e4 <pbuf_cat>
      r = iprh->next_pbuf;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800a698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1ee      	bne.n	800a67c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800a69e:	4b1e      	ldr	r3, [pc, #120]	; (800a718 <ip4_reass+0x2b4>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d102      	bne.n	800a6ae <ip4_reass+0x24a>
      ipr_prev = NULL;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6ac:	e010      	b.n	800a6d0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a6ae:	4b1a      	ldr	r3, [pc, #104]	; (800a718 <ip4_reass+0x2b4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6b4:	e007      	b.n	800a6c6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d006      	beq.n	800a6ce <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1f4      	bne.n	800a6b6 <ip4_reass+0x252>
 800a6cc:	e000      	b.n	800a6d0 <ip4_reass+0x26c>
          break;
 800a6ce:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800a6d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6d4:	f7ff fd2e 	bl	800a134 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f001 fe43 	bl	800c364 <pbuf_clen>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800a6e2:	4b0c      	ldr	r3, [pc, #48]	; (800a714 <ip4_reass+0x2b0>)
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	8c3a      	ldrh	r2, [r7, #32]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d906      	bls.n	800a6fa <ip4_reass+0x296>
 800a6ec:	4b0b      	ldr	r3, [pc, #44]	; (800a71c <ip4_reass+0x2b8>)
 800a6ee:	f240 229b 	movw	r2, #667	; 0x29b
 800a6f2:	490b      	ldr	r1, [pc, #44]	; (800a720 <ip4_reass+0x2bc>)
 800a6f4:	480b      	ldr	r0, [pc, #44]	; (800a724 <ip4_reass+0x2c0>)
 800a6f6:	f007 ffd3 	bl	80126a0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800a6fa:	4b06      	ldr	r3, [pc, #24]	; (800a714 <ip4_reass+0x2b0>)
 800a6fc:	881a      	ldrh	r2, [r3, #0]
 800a6fe:	8c3b      	ldrh	r3, [r7, #32]
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	b29a      	uxth	r2, r3
 800a704:	4b03      	ldr	r3, [pc, #12]	; (800a714 <ip4_reass+0x2b0>)
 800a706:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	e038      	b.n	800a77e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800a70c:	2300      	movs	r3, #0
 800a70e:	e036      	b.n	800a77e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800a710:	bf00      	nop
 800a712:	e00a      	b.n	800a72a <ip4_reass+0x2c6>
 800a714:	2400432c 	.word	0x2400432c
 800a718:	24004328 	.word	0x24004328
 800a71c:	08013db8 	.word	0x08013db8
 800a720:	08013f64 	.word	0x08013f64
 800a724:	08013e3c 	.word	0x08013e3c
    goto nullreturn_ipr;
 800a728:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800a72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d106      	bne.n	800a73e <ip4_reass+0x2da>
 800a730:	4b15      	ldr	r3, [pc, #84]	; (800a788 <ip4_reass+0x324>)
 800a732:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800a736:	4915      	ldr	r1, [pc, #84]	; (800a78c <ip4_reass+0x328>)
 800a738:	4815      	ldr	r0, [pc, #84]	; (800a790 <ip4_reass+0x32c>)
 800a73a:	f007 ffb1 	bl	80126a0 <iprintf>
  if (ipr->p == NULL) {
 800a73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d116      	bne.n	800a774 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800a746:	4b13      	ldr	r3, [pc, #76]	; (800a794 <ip4_reass+0x330>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d006      	beq.n	800a75e <ip4_reass+0x2fa>
 800a750:	4b0d      	ldr	r3, [pc, #52]	; (800a788 <ip4_reass+0x324>)
 800a752:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a756:	4910      	ldr	r1, [pc, #64]	; (800a798 <ip4_reass+0x334>)
 800a758:	480d      	ldr	r0, [pc, #52]	; (800a790 <ip4_reass+0x32c>)
 800a75a:	f007 ffa1 	bl	80126a0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800a75e:	2100      	movs	r1, #0
 800a760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a762:	f7ff fce7 	bl	800a134 <ip_reass_dequeue_datagram>
 800a766:	e006      	b.n	800a776 <ip4_reass+0x312>
    goto nullreturn;
 800a768:	bf00      	nop
 800a76a:	e004      	b.n	800a776 <ip4_reass+0x312>
    goto nullreturn;
 800a76c:	bf00      	nop
 800a76e:	e002      	b.n	800a776 <ip4_reass+0x312>
      goto nullreturn;
 800a770:	bf00      	nop
 800a772:	e000      	b.n	800a776 <ip4_reass+0x312>
  }

nullreturn:
 800a774:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f001 fd66 	bl	800c248 <pbuf_free>
  return NULL;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3738      	adds	r7, #56	; 0x38
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	08013db8 	.word	0x08013db8
 800a78c:	08013f80 	.word	0x08013f80
 800a790:	08013e3c 	.word	0x08013e3c
 800a794:	24004328 	.word	0x24004328
 800a798:	08013f8c 	.word	0x08013f8c

0800a79c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800a7a0:	2005      	movs	r0, #5
 800a7a2:	f000 fe37 	bl	800b414 <memp_malloc>
 800a7a6:	4603      	mov	r3, r0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d106      	bne.n	800a7c8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800a7ba:	4b07      	ldr	r3, [pc, #28]	; (800a7d8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800a7bc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800a7c0:	4906      	ldr	r1, [pc, #24]	; (800a7dc <ip_frag_free_pbuf_custom_ref+0x30>)
 800a7c2:	4807      	ldr	r0, [pc, #28]	; (800a7e0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800a7c4:	f007 ff6c 	bl	80126a0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800a7c8:	6879      	ldr	r1, [r7, #4]
 800a7ca:	2005      	movs	r0, #5
 800a7cc:	f000 fe98 	bl	800b500 <memp_free>
}
 800a7d0:	bf00      	nop
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	08013db8 	.word	0x08013db8
 800a7dc:	08013fac 	.word	0x08013fac
 800a7e0:	08013e3c 	.word	0x08013e3c

0800a7e4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d106      	bne.n	800a804 <ipfrag_free_pbuf_custom+0x20>
 800a7f6:	4b11      	ldr	r3, [pc, #68]	; (800a83c <ipfrag_free_pbuf_custom+0x58>)
 800a7f8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800a7fc:	4910      	ldr	r1, [pc, #64]	; (800a840 <ipfrag_free_pbuf_custom+0x5c>)
 800a7fe:	4811      	ldr	r0, [pc, #68]	; (800a844 <ipfrag_free_pbuf_custom+0x60>)
 800a800:	f007 ff4e 	bl	80126a0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d006      	beq.n	800a81a <ipfrag_free_pbuf_custom+0x36>
 800a80c:	4b0b      	ldr	r3, [pc, #44]	; (800a83c <ipfrag_free_pbuf_custom+0x58>)
 800a80e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800a812:	490d      	ldr	r1, [pc, #52]	; (800a848 <ipfrag_free_pbuf_custom+0x64>)
 800a814:	480b      	ldr	r0, [pc, #44]	; (800a844 <ipfrag_free_pbuf_custom+0x60>)
 800a816:	f007 ff43 	bl	80126a0 <iprintf>
  if (pcr->original != NULL) {
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	695b      	ldr	r3, [r3, #20]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d004      	beq.n	800a82c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	4618      	mov	r0, r3
 800a828:	f001 fd0e 	bl	800c248 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f7ff ffbd 	bl	800a7ac <ip_frag_free_pbuf_custom_ref>
}
 800a832:	bf00      	nop
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	08013db8 	.word	0x08013db8
 800a840:	08013fb8 	.word	0x08013fb8
 800a844:	08013e3c 	.word	0x08013e3c
 800a848:	08013fc4 	.word	0x08013fc4

0800a84c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b094      	sub	sp, #80	; 0x50
 800a850:	af02      	add	r7, sp, #8
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a862:	3b14      	subs	r3, #20
 800a864:	2b00      	cmp	r3, #0
 800a866:	da00      	bge.n	800a86a <ip4_frag+0x1e>
 800a868:	3307      	adds	r3, #7
 800a86a:	10db      	asrs	r3, r3, #3
 800a86c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800a86e:	2314      	movs	r3, #20
 800a870:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800a878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	f003 030f 	and.w	r3, r3, #15
 800a884:	b2db      	uxtb	r3, r3
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b14      	cmp	r3, #20
 800a88c:	d002      	beq.n	800a894 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800a88e:	f06f 0305 	mvn.w	r3, #5
 800a892:	e110      	b.n	800aab6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	895b      	ldrh	r3, [r3, #10]
 800a898:	2b13      	cmp	r3, #19
 800a89a:	d809      	bhi.n	800a8b0 <ip4_frag+0x64>
 800a89c:	4b88      	ldr	r3, [pc, #544]	; (800aac0 <ip4_frag+0x274>)
 800a89e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800a8a2:	4988      	ldr	r1, [pc, #544]	; (800aac4 <ip4_frag+0x278>)
 800a8a4:	4888      	ldr	r0, [pc, #544]	; (800aac8 <ip4_frag+0x27c>)
 800a8a6:	f007 fefb 	bl	80126a0 <iprintf>
 800a8aa:	f06f 0305 	mvn.w	r3, #5
 800a8ae:	e102      	b.n	800aab6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b2:	88db      	ldrh	r3, [r3, #6]
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fd fd20 	bl	80082fc <lwip_htons>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800a8c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a8c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800a8ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a8cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8d0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	891b      	ldrh	r3, [r3, #8]
 800a8d6:	3b14      	subs	r3, #20
 800a8d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800a8dc:	e0e1      	b.n	800aaa2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a8de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a8e0:	00db      	lsls	r3, r3, #3
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	bf28      	it	cs
 800a8ec:	4613      	movcs	r3, r2
 800a8ee:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800a8f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a8f4:	2114      	movs	r1, #20
 800a8f6:	200e      	movs	r0, #14
 800a8f8:	f001 f9c2 	bl	800bc80 <pbuf_alloc>
 800a8fc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 80d5 	beq.w	800aab0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800a906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a908:	895b      	ldrh	r3, [r3, #10]
 800a90a:	2b13      	cmp	r3, #19
 800a90c:	d806      	bhi.n	800a91c <ip4_frag+0xd0>
 800a90e:	4b6c      	ldr	r3, [pc, #432]	; (800aac0 <ip4_frag+0x274>)
 800a910:	f44f 7249 	mov.w	r2, #804	; 0x324
 800a914:	496d      	ldr	r1, [pc, #436]	; (800aacc <ip4_frag+0x280>)
 800a916:	486c      	ldr	r0, [pc, #432]	; (800aac8 <ip4_frag+0x27c>)
 800a918:	f007 fec2 	bl	80126a0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800a91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	2214      	movs	r2, #20
 800a922:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a924:	4618      	mov	r0, r3
 800a926:	f007 fea5 	bl	8012674 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800a930:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a932:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800a936:	e064      	b.n	800aa02 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	895a      	ldrh	r2, [r3, #10]
 800a93c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	895b      	ldrh	r3, [r3, #10]
 800a946:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a948:	429a      	cmp	r2, r3
 800a94a:	d906      	bls.n	800a95a <ip4_frag+0x10e>
 800a94c:	4b5c      	ldr	r3, [pc, #368]	; (800aac0 <ip4_frag+0x274>)
 800a94e:	f240 322d 	movw	r2, #813	; 0x32d
 800a952:	495f      	ldr	r1, [pc, #380]	; (800aad0 <ip4_frag+0x284>)
 800a954:	485c      	ldr	r0, [pc, #368]	; (800aac8 <ip4_frag+0x27c>)
 800a956:	f007 fea3 	bl	80126a0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800a95a:	8bfa      	ldrh	r2, [r7, #30]
 800a95c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a960:	4293      	cmp	r3, r2
 800a962:	bf28      	it	cs
 800a964:	4613      	movcs	r3, r2
 800a966:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800a96a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d105      	bne.n	800a97e <ip4_frag+0x132>
        poff = 0;
 800a972:	2300      	movs	r3, #0
 800a974:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	60fb      	str	r3, [r7, #12]
        continue;
 800a97c:	e041      	b.n	800aa02 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800a97e:	f7ff ff0d 	bl	800a79c <ip_frag_alloc_pbuf_custom_ref>
 800a982:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d103      	bne.n	800a992 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800a98a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a98c:	f001 fc5c 	bl	800c248 <pbuf_free>
        goto memerr;
 800a990:	e08f      	b.n	800aab2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a992:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a998:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a99a:	4413      	add	r3, r2
 800a99c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800a9a0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800a9a4:	9201      	str	r2, [sp, #4]
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2241      	movs	r2, #65	; 0x41
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	f001 fa91 	bl	800bed4 <pbuf_alloced_custom>
 800a9b2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d106      	bne.n	800a9c8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800a9ba:	69b8      	ldr	r0, [r7, #24]
 800a9bc:	f7ff fef6 	bl	800a7ac <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800a9c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9c2:	f001 fc41 	bl	800c248 <pbuf_free>
        goto memerr;
 800a9c6:	e074      	b.n	800aab2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f001 fce3 	bl	800c394 <pbuf_ref>
      pcr->original = p;
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	4a3f      	ldr	r2, [pc, #252]	; (800aad4 <ip4_frag+0x288>)
 800a9d8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800a9da:	6979      	ldr	r1, [r7, #20]
 800a9dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9de:	f001 fd01 	bl	800c3e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800a9e2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800a9e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800a9f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d004      	beq.n	800aa02 <ip4_frag+0x1b6>
        poff = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800aa02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d196      	bne.n	800a938 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800aa0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800aa0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aa10:	4413      	add	r3, r2
 800aa12:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aa18:	f1a3 0213 	sub.w	r2, r3, #19
 800aa1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aa20:	429a      	cmp	r2, r3
 800aa22:	bfcc      	ite	gt
 800aa24:	2301      	movgt	r3, #1
 800aa26:	2300      	movle	r3, #0
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800aa2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800aa30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa34:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d002      	beq.n	800aa42 <ip4_frag+0x1f6>
 800aa3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800aa42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aa44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800aa48:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800aa4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fd fc55 	bl	80082fc <lwip_htons>
 800aa52:	4603      	mov	r3, r0
 800aa54:	461a      	mov	r2, r3
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800aa5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aa5c:	3314      	adds	r3, #20
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fd fc4b 	bl	80082fc <lwip_htons>
 800aa66:	4603      	mov	r3, r0
 800aa68:	461a      	mov	r2, r3
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa70:	2200      	movs	r2, #0
 800aa72:	729a      	strb	r2, [r3, #10]
 800aa74:	2200      	movs	r2, #0
 800aa76:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa80:	68b8      	ldr	r0, [r7, #8]
 800aa82:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800aa84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa86:	f001 fbdf 	bl	800c248 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800aa8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800aa8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800aa96:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800aa9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aa9c:	4413      	add	r3, r2
 800aa9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800aaa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f47f af19 	bne.w	800a8de <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	e002      	b.n	800aab6 <ip4_frag+0x26a>
      goto memerr;
 800aab0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800aab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3748      	adds	r7, #72	; 0x48
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	08013db8 	.word	0x08013db8
 800aac4:	08013fd0 	.word	0x08013fd0
 800aac8:	08013e3c 	.word	0x08013e3c
 800aacc:	08013fec 	.word	0x08013fec
 800aad0:	0801400c 	.word	0x0801400c
 800aad4:	0800a7e5 	.word	0x0800a7e5

0800aad8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	4603      	mov	r3, r0
 800aae0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800aae2:	4b05      	ldr	r3, [pc, #20]	; (800aaf8 <ptr_to_mem+0x20>)
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	88fb      	ldrh	r3, [r7, #6]
 800aae8:	4413      	add	r3, r2
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	24004330 	.word	0x24004330

0800aafc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ab04:	4b05      	ldr	r3, [pc, #20]	; (800ab1c <mem_to_ptr+0x20>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	b29b      	uxth	r3, r3
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	24004330 	.word	0x24004330

0800ab20 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ab20:	b590      	push	{r4, r7, lr}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ab28:	4b47      	ldr	r3, [pc, #284]	; (800ac48 <plug_holes+0x128>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d206      	bcs.n	800ab40 <plug_holes+0x20>
 800ab32:	4b46      	ldr	r3, [pc, #280]	; (800ac4c <plug_holes+0x12c>)
 800ab34:	f240 12df 	movw	r2, #479	; 0x1df
 800ab38:	4945      	ldr	r1, [pc, #276]	; (800ac50 <plug_holes+0x130>)
 800ab3a:	4846      	ldr	r0, [pc, #280]	; (800ac54 <plug_holes+0x134>)
 800ab3c:	f007 fdb0 	bl	80126a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ab40:	4b45      	ldr	r3, [pc, #276]	; (800ac58 <plug_holes+0x138>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d306      	bcc.n	800ab58 <plug_holes+0x38>
 800ab4a:	4b40      	ldr	r3, [pc, #256]	; (800ac4c <plug_holes+0x12c>)
 800ab4c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ab50:	4942      	ldr	r1, [pc, #264]	; (800ac5c <plug_holes+0x13c>)
 800ab52:	4840      	ldr	r0, [pc, #256]	; (800ac54 <plug_holes+0x134>)
 800ab54:	f007 fda4 	bl	80126a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	791b      	ldrb	r3, [r3, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d006      	beq.n	800ab6e <plug_holes+0x4e>
 800ab60:	4b3a      	ldr	r3, [pc, #232]	; (800ac4c <plug_holes+0x12c>)
 800ab62:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ab66:	493e      	ldr	r1, [pc, #248]	; (800ac60 <plug_holes+0x140>)
 800ab68:	483a      	ldr	r0, [pc, #232]	; (800ac54 <plug_holes+0x134>)
 800ab6a:	f007 fd99 	bl	80126a0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	881b      	ldrh	r3, [r3, #0]
 800ab72:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d906      	bls.n	800ab88 <plug_holes+0x68>
 800ab7a:	4b34      	ldr	r3, [pc, #208]	; (800ac4c <plug_holes+0x12c>)
 800ab7c:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ab80:	4938      	ldr	r1, [pc, #224]	; (800ac64 <plug_holes+0x144>)
 800ab82:	4834      	ldr	r0, [pc, #208]	; (800ac54 <plug_holes+0x134>)
 800ab84:	f007 fd8c 	bl	80126a0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	881b      	ldrh	r3, [r3, #0]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7ff ffa3 	bl	800aad8 <ptr_to_mem>
 800ab92:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d025      	beq.n	800abe8 <plug_holes+0xc8>
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	791b      	ldrb	r3, [r3, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d121      	bne.n	800abe8 <plug_holes+0xc8>
 800aba4:	4b2c      	ldr	r3, [pc, #176]	; (800ac58 <plug_holes+0x138>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d01c      	beq.n	800abe8 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800abae:	4b2e      	ldr	r3, [pc, #184]	; (800ac68 <plug_holes+0x148>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d102      	bne.n	800abbe <plug_holes+0x9e>
      lfree = mem;
 800abb8:	4a2b      	ldr	r2, [pc, #172]	; (800ac68 <plug_holes+0x148>)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	881a      	ldrh	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800abce:	4293      	cmp	r3, r2
 800abd0:	d00a      	beq.n	800abe8 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	881b      	ldrh	r3, [r3, #0]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff ff7e 	bl	800aad8 <ptr_to_mem>
 800abdc:	4604      	mov	r4, r0
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f7ff ff8c 	bl	800aafc <mem_to_ptr>
 800abe4:	4603      	mov	r3, r0
 800abe6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	885b      	ldrh	r3, [r3, #2]
 800abec:	4618      	mov	r0, r3
 800abee:	f7ff ff73 	bl	800aad8 <ptr_to_mem>
 800abf2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800abf4:	68ba      	ldr	r2, [r7, #8]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d020      	beq.n	800ac3e <plug_holes+0x11e>
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	791b      	ldrb	r3, [r3, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d11c      	bne.n	800ac3e <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ac04:	4b18      	ldr	r3, [pc, #96]	; (800ac68 <plug_holes+0x148>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d102      	bne.n	800ac14 <plug_holes+0xf4>
      lfree = pmem;
 800ac0e:	4a16      	ldr	r2, [pc, #88]	; (800ac68 <plug_holes+0x148>)
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	881a      	ldrh	r2, [r3, #0]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	881b      	ldrh	r3, [r3, #0]
 800ac20:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d00a      	beq.n	800ac3e <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	881b      	ldrh	r3, [r3, #0]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff ff53 	bl	800aad8 <ptr_to_mem>
 800ac32:	4604      	mov	r4, r0
 800ac34:	68b8      	ldr	r0, [r7, #8]
 800ac36:	f7ff ff61 	bl	800aafc <mem_to_ptr>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ac3e:	bf00      	nop
 800ac40:	3714      	adds	r7, #20
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd90      	pop	{r4, r7, pc}
 800ac46:	bf00      	nop
 800ac48:	24004330 	.word	0x24004330
 800ac4c:	0801401c 	.word	0x0801401c
 800ac50:	0801408c 	.word	0x0801408c
 800ac54:	080140a4 	.word	0x080140a4
 800ac58:	24004334 	.word	0x24004334
 800ac5c:	080140cc 	.word	0x080140cc
 800ac60:	080140e8 	.word	0x080140e8
 800ac64:	08014104 	.word	0x08014104
 800ac68:	2400433c 	.word	0x2400433c

0800ac6c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ac72:	4b1d      	ldr	r3, [pc, #116]	; (800ace8 <mem_init+0x7c>)
 800ac74:	4a1d      	ldr	r2, [pc, #116]	; (800acec <mem_init+0x80>)
 800ac76:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ac78:	4b1b      	ldr	r3, [pc, #108]	; (800ace8 <mem_init+0x7c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ac84:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ac92:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 800ac96:	f7ff ff1f 	bl	800aad8 <ptr_to_mem>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	4a14      	ldr	r2, [pc, #80]	; (800acf0 <mem_init+0x84>)
 800ac9e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800aca0:	4b13      	ldr	r3, [pc, #76]	; (800acf0 <mem_init+0x84>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2201      	movs	r2, #1
 800aca6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800aca8:	4b11      	ldr	r3, [pc, #68]	; (800acf0 <mem_init+0x84>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800acb0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800acb2:	4b0f      	ldr	r3, [pc, #60]	; (800acf0 <mem_init+0x84>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800acba:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800acbc:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <mem_init+0x7c>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a0c      	ldr	r2, [pc, #48]	; (800acf4 <mem_init+0x88>)
 800acc2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800acc4:	480c      	ldr	r0, [pc, #48]	; (800acf8 <mem_init+0x8c>)
 800acc6:	f001 fdf3 	bl	800c8b0 <sys_mutex_new>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d006      	beq.n	800acde <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800acd0:	4b0a      	ldr	r3, [pc, #40]	; (800acfc <mem_init+0x90>)
 800acd2:	f240 221f 	movw	r2, #543	; 0x21f
 800acd6:	490a      	ldr	r1, [pc, #40]	; (800ad00 <mem_init+0x94>)
 800acd8:	480a      	ldr	r0, [pc, #40]	; (800ad04 <mem_init+0x98>)
 800acda:	f007 fce1 	bl	80126a0 <iprintf>
  }
}
 800acde:	bf00      	nop
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	24004330 	.word	0x24004330
 800acec:	30044000 	.word	0x30044000
 800acf0:	24004334 	.word	0x24004334
 800acf4:	2400433c 	.word	0x2400433c
 800acf8:	24004338 	.word	0x24004338
 800acfc:	0801401c 	.word	0x0801401c
 800ad00:	08014130 	.word	0x08014130
 800ad04:	080140a4 	.word	0x080140a4

0800ad08 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f7ff fef3 	bl	800aafc <mem_to_ptr>
 800ad16:	4603      	mov	r3, r0
 800ad18:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7ff feda 	bl	800aad8 <ptr_to_mem>
 800ad24:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	885b      	ldrh	r3, [r3, #2]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7ff fed4 	bl	800aad8 <ptr_to_mem>
 800ad30:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	881b      	ldrh	r3, [r3, #0]
 800ad36:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d819      	bhi.n	800ad72 <mem_link_valid+0x6a>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	885b      	ldrh	r3, [r3, #2]
 800ad42:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d813      	bhi.n	800ad72 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ad4e:	8afa      	ldrh	r2, [r7, #22]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d004      	beq.n	800ad5e <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	881b      	ldrh	r3, [r3, #0]
 800ad58:	8afa      	ldrh	r2, [r7, #22]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d109      	bne.n	800ad72 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ad5e:	4b08      	ldr	r3, [pc, #32]	; (800ad80 <mem_link_valid+0x78>)
 800ad60:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ad62:	693a      	ldr	r2, [r7, #16]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d006      	beq.n	800ad76 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	885b      	ldrh	r3, [r3, #2]
 800ad6c:	8afa      	ldrh	r2, [r7, #22]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d001      	beq.n	800ad76 <mem_link_valid+0x6e>
    return 0;
 800ad72:	2300      	movs	r3, #0
 800ad74:	e000      	b.n	800ad78 <mem_link_valid+0x70>
  }
  return 1;
 800ad76:	2301      	movs	r3, #1
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3718      	adds	r7, #24
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	24004334 	.word	0x24004334

0800ad84 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b088      	sub	sp, #32
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d070      	beq.n	800ae74 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f003 0303 	and.w	r3, r3, #3
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00d      	beq.n	800adb8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ad9c:	4b37      	ldr	r3, [pc, #220]	; (800ae7c <mem_free+0xf8>)
 800ad9e:	f240 2273 	movw	r2, #627	; 0x273
 800ada2:	4937      	ldr	r1, [pc, #220]	; (800ae80 <mem_free+0xfc>)
 800ada4:	4837      	ldr	r0, [pc, #220]	; (800ae84 <mem_free+0x100>)
 800ada6:	f007 fc7b 	bl	80126a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800adaa:	f001 fddf 	bl	800c96c <sys_arch_protect>
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f001 fde9 	bl	800c988 <sys_arch_unprotect>
    return;
 800adb6:	e05e      	b.n	800ae76 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	3b08      	subs	r3, #8
 800adbc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800adbe:	4b32      	ldr	r3, [pc, #200]	; (800ae88 <mem_free+0x104>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	69fa      	ldr	r2, [r7, #28]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d306      	bcc.n	800add6 <mem_free+0x52>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f103 020c 	add.w	r2, r3, #12
 800adce:	4b2f      	ldr	r3, [pc, #188]	; (800ae8c <mem_free+0x108>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	429a      	cmp	r2, r3
 800add4:	d90d      	bls.n	800adf2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800add6:	4b29      	ldr	r3, [pc, #164]	; (800ae7c <mem_free+0xf8>)
 800add8:	f240 227f 	movw	r2, #639	; 0x27f
 800addc:	492c      	ldr	r1, [pc, #176]	; (800ae90 <mem_free+0x10c>)
 800adde:	4829      	ldr	r0, [pc, #164]	; (800ae84 <mem_free+0x100>)
 800ade0:	f007 fc5e 	bl	80126a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ade4:	f001 fdc2 	bl	800c96c <sys_arch_protect>
 800ade8:	6138      	str	r0, [r7, #16]
 800adea:	6938      	ldr	r0, [r7, #16]
 800adec:	f001 fdcc 	bl	800c988 <sys_arch_unprotect>
    return;
 800adf0:	e041      	b.n	800ae76 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800adf2:	4828      	ldr	r0, [pc, #160]	; (800ae94 <mem_free+0x110>)
 800adf4:	f001 fd78 	bl	800c8e8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	791b      	ldrb	r3, [r3, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d110      	bne.n	800ae22 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ae00:	4b1e      	ldr	r3, [pc, #120]	; (800ae7c <mem_free+0xf8>)
 800ae02:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ae06:	4924      	ldr	r1, [pc, #144]	; (800ae98 <mem_free+0x114>)
 800ae08:	481e      	ldr	r0, [pc, #120]	; (800ae84 <mem_free+0x100>)
 800ae0a:	f007 fc49 	bl	80126a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ae0e:	4821      	ldr	r0, [pc, #132]	; (800ae94 <mem_free+0x110>)
 800ae10:	f001 fd79 	bl	800c906 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ae14:	f001 fdaa 	bl	800c96c <sys_arch_protect>
 800ae18:	6178      	str	r0, [r7, #20]
 800ae1a:	6978      	ldr	r0, [r7, #20]
 800ae1c:	f001 fdb4 	bl	800c988 <sys_arch_unprotect>
    return;
 800ae20:	e029      	b.n	800ae76 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ae22:	69f8      	ldr	r0, [r7, #28]
 800ae24:	f7ff ff70 	bl	800ad08 <mem_link_valid>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d110      	bne.n	800ae50 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ae2e:	4b13      	ldr	r3, [pc, #76]	; (800ae7c <mem_free+0xf8>)
 800ae30:	f240 2295 	movw	r2, #661	; 0x295
 800ae34:	4919      	ldr	r1, [pc, #100]	; (800ae9c <mem_free+0x118>)
 800ae36:	4813      	ldr	r0, [pc, #76]	; (800ae84 <mem_free+0x100>)
 800ae38:	f007 fc32 	bl	80126a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ae3c:	4815      	ldr	r0, [pc, #84]	; (800ae94 <mem_free+0x110>)
 800ae3e:	f001 fd62 	bl	800c906 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ae42:	f001 fd93 	bl	800c96c <sys_arch_protect>
 800ae46:	61b8      	str	r0, [r7, #24]
 800ae48:	69b8      	ldr	r0, [r7, #24]
 800ae4a:	f001 fd9d 	bl	800c988 <sys_arch_unprotect>
    return;
 800ae4e:	e012      	b.n	800ae76 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	2200      	movs	r2, #0
 800ae54:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ae56:	4b12      	ldr	r3, [pc, #72]	; (800aea0 <mem_free+0x11c>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	69fa      	ldr	r2, [r7, #28]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d202      	bcs.n	800ae66 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ae60:	4a0f      	ldr	r2, [pc, #60]	; (800aea0 <mem_free+0x11c>)
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ae66:	69f8      	ldr	r0, [r7, #28]
 800ae68:	f7ff fe5a 	bl	800ab20 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ae6c:	4809      	ldr	r0, [pc, #36]	; (800ae94 <mem_free+0x110>)
 800ae6e:	f001 fd4a 	bl	800c906 <sys_mutex_unlock>
 800ae72:	e000      	b.n	800ae76 <mem_free+0xf2>
    return;
 800ae74:	bf00      	nop
}
 800ae76:	3720      	adds	r7, #32
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	0801401c 	.word	0x0801401c
 800ae80:	0801414c 	.word	0x0801414c
 800ae84:	080140a4 	.word	0x080140a4
 800ae88:	24004330 	.word	0x24004330
 800ae8c:	24004334 	.word	0x24004334
 800ae90:	08014170 	.word	0x08014170
 800ae94:	24004338 	.word	0x24004338
 800ae98:	0801418c 	.word	0x0801418c
 800ae9c:	080141b4 	.word	0x080141b4
 800aea0:	2400433c 	.word	0x2400433c

0800aea4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b088      	sub	sp, #32
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800aeb0:	887b      	ldrh	r3, [r7, #2]
 800aeb2:	3303      	adds	r3, #3
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	f023 0303 	bic.w	r3, r3, #3
 800aeba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800aebc:	8bfb      	ldrh	r3, [r7, #30]
 800aebe:	2b0b      	cmp	r3, #11
 800aec0:	d801      	bhi.n	800aec6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800aec2:	230c      	movs	r3, #12
 800aec4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800aec6:	8bfb      	ldrh	r3, [r7, #30]
 800aec8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800aecc:	4293      	cmp	r3, r2
 800aece:	d803      	bhi.n	800aed8 <mem_trim+0x34>
 800aed0:	8bfa      	ldrh	r2, [r7, #30]
 800aed2:	887b      	ldrh	r3, [r7, #2]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d201      	bcs.n	800aedc <mem_trim+0x38>
    return NULL;
 800aed8:	2300      	movs	r3, #0
 800aeda:	e0dc      	b.n	800b096 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800aedc:	4b70      	ldr	r3, [pc, #448]	; (800b0a0 <mem_trim+0x1fc>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d304      	bcc.n	800aef0 <mem_trim+0x4c>
 800aee6:	4b6f      	ldr	r3, [pc, #444]	; (800b0a4 <mem_trim+0x200>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d306      	bcc.n	800aefe <mem_trim+0x5a>
 800aef0:	4b6d      	ldr	r3, [pc, #436]	; (800b0a8 <mem_trim+0x204>)
 800aef2:	f240 22d1 	movw	r2, #721	; 0x2d1
 800aef6:	496d      	ldr	r1, [pc, #436]	; (800b0ac <mem_trim+0x208>)
 800aef8:	486d      	ldr	r0, [pc, #436]	; (800b0b0 <mem_trim+0x20c>)
 800aefa:	f007 fbd1 	bl	80126a0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800aefe:	4b68      	ldr	r3, [pc, #416]	; (800b0a0 <mem_trim+0x1fc>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	429a      	cmp	r2, r3
 800af06:	d304      	bcc.n	800af12 <mem_trim+0x6e>
 800af08:	4b66      	ldr	r3, [pc, #408]	; (800b0a4 <mem_trim+0x200>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d307      	bcc.n	800af22 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800af12:	f001 fd2b 	bl	800c96c <sys_arch_protect>
 800af16:	60b8      	str	r0, [r7, #8]
 800af18:	68b8      	ldr	r0, [r7, #8]
 800af1a:	f001 fd35 	bl	800c988 <sys_arch_unprotect>
    return rmem;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	e0b9      	b.n	800b096 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	3b08      	subs	r3, #8
 800af26:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800af28:	69b8      	ldr	r0, [r7, #24]
 800af2a:	f7ff fde7 	bl	800aafc <mem_to_ptr>
 800af2e:	4603      	mov	r3, r0
 800af30:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	881a      	ldrh	r2, [r3, #0]
 800af36:	8afb      	ldrh	r3, [r7, #22]
 800af38:	1ad3      	subs	r3, r2, r3
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	3b08      	subs	r3, #8
 800af3e:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800af40:	8bfa      	ldrh	r2, [r7, #30]
 800af42:	8abb      	ldrh	r3, [r7, #20]
 800af44:	429a      	cmp	r2, r3
 800af46:	d906      	bls.n	800af56 <mem_trim+0xb2>
 800af48:	4b57      	ldr	r3, [pc, #348]	; (800b0a8 <mem_trim+0x204>)
 800af4a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800af4e:	4959      	ldr	r1, [pc, #356]	; (800b0b4 <mem_trim+0x210>)
 800af50:	4857      	ldr	r0, [pc, #348]	; (800b0b0 <mem_trim+0x20c>)
 800af52:	f007 fba5 	bl	80126a0 <iprintf>
  if (newsize > size) {
 800af56:	8bfa      	ldrh	r2, [r7, #30]
 800af58:	8abb      	ldrh	r3, [r7, #20]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d901      	bls.n	800af62 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800af5e:	2300      	movs	r3, #0
 800af60:	e099      	b.n	800b096 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800af62:	8bfa      	ldrh	r2, [r7, #30]
 800af64:	8abb      	ldrh	r3, [r7, #20]
 800af66:	429a      	cmp	r2, r3
 800af68:	d101      	bne.n	800af6e <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	e093      	b.n	800b096 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800af6e:	4852      	ldr	r0, [pc, #328]	; (800b0b8 <mem_trim+0x214>)
 800af70:	f001 fcba 	bl	800c8e8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	881b      	ldrh	r3, [r3, #0]
 800af78:	4618      	mov	r0, r3
 800af7a:	f7ff fdad 	bl	800aad8 <ptr_to_mem>
 800af7e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	791b      	ldrb	r3, [r3, #4]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d141      	bne.n	800b00c <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	881b      	ldrh	r3, [r3, #0]
 800af8c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800af90:	4293      	cmp	r3, r2
 800af92:	d106      	bne.n	800afa2 <mem_trim+0xfe>
 800af94:	4b44      	ldr	r3, [pc, #272]	; (800b0a8 <mem_trim+0x204>)
 800af96:	f240 22f5 	movw	r2, #757	; 0x2f5
 800af9a:	4948      	ldr	r1, [pc, #288]	; (800b0bc <mem_trim+0x218>)
 800af9c:	4844      	ldr	r0, [pc, #272]	; (800b0b0 <mem_trim+0x20c>)
 800af9e:	f007 fb7f 	bl	80126a0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	881b      	ldrh	r3, [r3, #0]
 800afa6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800afa8:	8afa      	ldrh	r2, [r7, #22]
 800afaa:	8bfb      	ldrh	r3, [r7, #30]
 800afac:	4413      	add	r3, r2
 800afae:	b29b      	uxth	r3, r3
 800afb0:	3308      	adds	r3, #8
 800afb2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800afb4:	4b42      	ldr	r3, [pc, #264]	; (800b0c0 <mem_trim+0x21c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d106      	bne.n	800afcc <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800afbe:	89fb      	ldrh	r3, [r7, #14]
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7ff fd89 	bl	800aad8 <ptr_to_mem>
 800afc6:	4603      	mov	r3, r0
 800afc8:	4a3d      	ldr	r2, [pc, #244]	; (800b0c0 <mem_trim+0x21c>)
 800afca:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800afcc:	89fb      	ldrh	r3, [r7, #14]
 800afce:	4618      	mov	r0, r3
 800afd0:	f7ff fd82 	bl	800aad8 <ptr_to_mem>
 800afd4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	2200      	movs	r2, #0
 800afda:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	89ba      	ldrh	r2, [r7, #12]
 800afe0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	8afa      	ldrh	r2, [r7, #22]
 800afe6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	89fa      	ldrh	r2, [r7, #14]
 800afec:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	881b      	ldrh	r3, [r3, #0]
 800aff2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d049      	beq.n	800b08e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	881b      	ldrh	r3, [r3, #0]
 800affe:	4618      	mov	r0, r3
 800b000:	f7ff fd6a 	bl	800aad8 <ptr_to_mem>
 800b004:	4602      	mov	r2, r0
 800b006:	89fb      	ldrh	r3, [r7, #14]
 800b008:	8053      	strh	r3, [r2, #2]
 800b00a:	e040      	b.n	800b08e <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b00c:	8bfb      	ldrh	r3, [r7, #30]
 800b00e:	f103 0214 	add.w	r2, r3, #20
 800b012:	8abb      	ldrh	r3, [r7, #20]
 800b014:	429a      	cmp	r2, r3
 800b016:	d83a      	bhi.n	800b08e <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b018:	8afa      	ldrh	r2, [r7, #22]
 800b01a:	8bfb      	ldrh	r3, [r7, #30]
 800b01c:	4413      	add	r3, r2
 800b01e:	b29b      	uxth	r3, r3
 800b020:	3308      	adds	r3, #8
 800b022:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d106      	bne.n	800b03e <mem_trim+0x19a>
 800b030:	4b1d      	ldr	r3, [pc, #116]	; (800b0a8 <mem_trim+0x204>)
 800b032:	f240 3216 	movw	r2, #790	; 0x316
 800b036:	4921      	ldr	r1, [pc, #132]	; (800b0bc <mem_trim+0x218>)
 800b038:	481d      	ldr	r0, [pc, #116]	; (800b0b0 <mem_trim+0x20c>)
 800b03a:	f007 fb31 	bl	80126a0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b03e:	89fb      	ldrh	r3, [r7, #14]
 800b040:	4618      	mov	r0, r3
 800b042:	f7ff fd49 	bl	800aad8 <ptr_to_mem>
 800b046:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b048:	4b1d      	ldr	r3, [pc, #116]	; (800b0c0 <mem_trim+0x21c>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d202      	bcs.n	800b058 <mem_trim+0x1b4>
      lfree = mem2;
 800b052:	4a1b      	ldr	r2, [pc, #108]	; (800b0c0 <mem_trim+0x21c>)
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	2200      	movs	r2, #0
 800b05c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	881a      	ldrh	r2, [r3, #0]
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	8afa      	ldrh	r2, [r7, #22]
 800b06a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	89fa      	ldrh	r2, [r7, #14]
 800b070:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	881b      	ldrh	r3, [r3, #0]
 800b076:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d007      	beq.n	800b08e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	881b      	ldrh	r3, [r3, #0]
 800b082:	4618      	mov	r0, r3
 800b084:	f7ff fd28 	bl	800aad8 <ptr_to_mem>
 800b088:	4602      	mov	r2, r0
 800b08a:	89fb      	ldrh	r3, [r7, #14]
 800b08c:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b08e:	480a      	ldr	r0, [pc, #40]	; (800b0b8 <mem_trim+0x214>)
 800b090:	f001 fc39 	bl	800c906 <sys_mutex_unlock>
  return rmem;
 800b094:	687b      	ldr	r3, [r7, #4]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3720      	adds	r7, #32
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	24004330 	.word	0x24004330
 800b0a4:	24004334 	.word	0x24004334
 800b0a8:	0801401c 	.word	0x0801401c
 800b0ac:	080141e8 	.word	0x080141e8
 800b0b0:	080140a4 	.word	0x080140a4
 800b0b4:	08014200 	.word	0x08014200
 800b0b8:	24004338 	.word	0x24004338
 800b0bc:	08014220 	.word	0x08014220
 800b0c0:	2400433c 	.word	0x2400433c

0800b0c4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b088      	sub	sp, #32
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b0ce:	88fb      	ldrh	r3, [r7, #6]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d101      	bne.n	800b0d8 <mem_malloc+0x14>
    return NULL;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	e0e6      	b.n	800b2a6 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b0d8:	88fb      	ldrh	r3, [r7, #6]
 800b0da:	3303      	adds	r3, #3
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	f023 0303 	bic.w	r3, r3, #3
 800b0e2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b0e4:	8bbb      	ldrh	r3, [r7, #28]
 800b0e6:	2b0b      	cmp	r3, #11
 800b0e8:	d801      	bhi.n	800b0ee <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b0ea:	230c      	movs	r3, #12
 800b0ec:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b0ee:	8bbb      	ldrh	r3, [r7, #28]
 800b0f0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d803      	bhi.n	800b100 <mem_malloc+0x3c>
 800b0f8:	8bba      	ldrh	r2, [r7, #28]
 800b0fa:	88fb      	ldrh	r3, [r7, #6]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d201      	bcs.n	800b104 <mem_malloc+0x40>
    return NULL;
 800b100:	2300      	movs	r3, #0
 800b102:	e0d0      	b.n	800b2a6 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b104:	486a      	ldr	r0, [pc, #424]	; (800b2b0 <mem_malloc+0x1ec>)
 800b106:	f001 fbef 	bl	800c8e8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b10a:	4b6a      	ldr	r3, [pc, #424]	; (800b2b4 <mem_malloc+0x1f0>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4618      	mov	r0, r3
 800b110:	f7ff fcf4 	bl	800aafc <mem_to_ptr>
 800b114:	4603      	mov	r3, r0
 800b116:	83fb      	strh	r3, [r7, #30]
 800b118:	e0b9      	b.n	800b28e <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b11a:	8bfb      	ldrh	r3, [r7, #30]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7ff fcdb 	bl	800aad8 <ptr_to_mem>
 800b122:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	791b      	ldrb	r3, [r3, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f040 80a9 	bne.w	800b280 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	881b      	ldrh	r3, [r3, #0]
 800b132:	461a      	mov	r2, r3
 800b134:	8bfb      	ldrh	r3, [r7, #30]
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	f1a3 0208 	sub.w	r2, r3, #8
 800b13c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b13e:	429a      	cmp	r2, r3
 800b140:	f0c0 809e 	bcc.w	800b280 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	881b      	ldrh	r3, [r3, #0]
 800b148:	461a      	mov	r2, r3
 800b14a:	8bfb      	ldrh	r3, [r7, #30]
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	f1a3 0208 	sub.w	r2, r3, #8
 800b152:	8bbb      	ldrh	r3, [r7, #28]
 800b154:	3314      	adds	r3, #20
 800b156:	429a      	cmp	r2, r3
 800b158:	d335      	bcc.n	800b1c6 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b15a:	8bfa      	ldrh	r2, [r7, #30]
 800b15c:	8bbb      	ldrh	r3, [r7, #28]
 800b15e:	4413      	add	r3, r2
 800b160:	b29b      	uxth	r3, r3
 800b162:	3308      	adds	r3, #8
 800b164:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b166:	8a7b      	ldrh	r3, [r7, #18]
 800b168:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d106      	bne.n	800b17e <mem_malloc+0xba>
 800b170:	4b51      	ldr	r3, [pc, #324]	; (800b2b8 <mem_malloc+0x1f4>)
 800b172:	f240 3287 	movw	r2, #903	; 0x387
 800b176:	4951      	ldr	r1, [pc, #324]	; (800b2bc <mem_malloc+0x1f8>)
 800b178:	4851      	ldr	r0, [pc, #324]	; (800b2c0 <mem_malloc+0x1fc>)
 800b17a:	f007 fa91 	bl	80126a0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b17e:	8a7b      	ldrh	r3, [r7, #18]
 800b180:	4618      	mov	r0, r3
 800b182:	f7ff fca9 	bl	800aad8 <ptr_to_mem>
 800b186:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2200      	movs	r2, #0
 800b18c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	881a      	ldrh	r2, [r3, #0]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	8bfa      	ldrh	r2, [r7, #30]
 800b19a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	8a7a      	ldrh	r2, [r7, #18]
 800b1a0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	881b      	ldrh	r3, [r3, #0]
 800b1ac:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d00b      	beq.n	800b1cc <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	881b      	ldrh	r3, [r3, #0]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7ff fc8d 	bl	800aad8 <ptr_to_mem>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	8a7b      	ldrh	r3, [r7, #18]
 800b1c2:	8053      	strh	r3, [r2, #2]
 800b1c4:	e002      	b.n	800b1cc <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b1cc:	4b39      	ldr	r3, [pc, #228]	; (800b2b4 <mem_malloc+0x1f0>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	697a      	ldr	r2, [r7, #20]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d127      	bne.n	800b226 <mem_malloc+0x162>
          struct mem *cur = lfree;
 800b1d6:	4b37      	ldr	r3, [pc, #220]	; (800b2b4 <mem_malloc+0x1f0>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b1dc:	e005      	b.n	800b1ea <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	881b      	ldrh	r3, [r3, #0]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7ff fc78 	bl	800aad8 <ptr_to_mem>
 800b1e8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	791b      	ldrb	r3, [r3, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d004      	beq.n	800b1fc <mem_malloc+0x138>
 800b1f2:	4b34      	ldr	r3, [pc, #208]	; (800b2c4 <mem_malloc+0x200>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	69ba      	ldr	r2, [r7, #24]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d1f0      	bne.n	800b1de <mem_malloc+0x11a>
          }
          lfree = cur;
 800b1fc:	4a2d      	ldr	r2, [pc, #180]	; (800b2b4 <mem_malloc+0x1f0>)
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b202:	4b2c      	ldr	r3, [pc, #176]	; (800b2b4 <mem_malloc+0x1f0>)
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	4b2f      	ldr	r3, [pc, #188]	; (800b2c4 <mem_malloc+0x200>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d00b      	beq.n	800b226 <mem_malloc+0x162>
 800b20e:	4b29      	ldr	r3, [pc, #164]	; (800b2b4 <mem_malloc+0x1f0>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	791b      	ldrb	r3, [r3, #4]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d006      	beq.n	800b226 <mem_malloc+0x162>
 800b218:	4b27      	ldr	r3, [pc, #156]	; (800b2b8 <mem_malloc+0x1f4>)
 800b21a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b21e:	492a      	ldr	r1, [pc, #168]	; (800b2c8 <mem_malloc+0x204>)
 800b220:	4827      	ldr	r0, [pc, #156]	; (800b2c0 <mem_malloc+0x1fc>)
 800b222:	f007 fa3d 	bl	80126a0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b226:	4822      	ldr	r0, [pc, #136]	; (800b2b0 <mem_malloc+0x1ec>)
 800b228:	f001 fb6d 	bl	800c906 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b22c:	8bba      	ldrh	r2, [r7, #28]
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	4413      	add	r3, r2
 800b232:	3308      	adds	r3, #8
 800b234:	4a23      	ldr	r2, [pc, #140]	; (800b2c4 <mem_malloc+0x200>)
 800b236:	6812      	ldr	r2, [r2, #0]
 800b238:	4293      	cmp	r3, r2
 800b23a:	d906      	bls.n	800b24a <mem_malloc+0x186>
 800b23c:	4b1e      	ldr	r3, [pc, #120]	; (800b2b8 <mem_malloc+0x1f4>)
 800b23e:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b242:	4922      	ldr	r1, [pc, #136]	; (800b2cc <mem_malloc+0x208>)
 800b244:	481e      	ldr	r0, [pc, #120]	; (800b2c0 <mem_malloc+0x1fc>)
 800b246:	f007 fa2b 	bl	80126a0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f003 0303 	and.w	r3, r3, #3
 800b250:	2b00      	cmp	r3, #0
 800b252:	d006      	beq.n	800b262 <mem_malloc+0x19e>
 800b254:	4b18      	ldr	r3, [pc, #96]	; (800b2b8 <mem_malloc+0x1f4>)
 800b256:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b25a:	491d      	ldr	r1, [pc, #116]	; (800b2d0 <mem_malloc+0x20c>)
 800b25c:	4818      	ldr	r0, [pc, #96]	; (800b2c0 <mem_malloc+0x1fc>)
 800b25e:	f007 fa1f 	bl	80126a0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f003 0303 	and.w	r3, r3, #3
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d006      	beq.n	800b27a <mem_malloc+0x1b6>
 800b26c:	4b12      	ldr	r3, [pc, #72]	; (800b2b8 <mem_malloc+0x1f4>)
 800b26e:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b272:	4918      	ldr	r1, [pc, #96]	; (800b2d4 <mem_malloc+0x210>)
 800b274:	4812      	ldr	r0, [pc, #72]	; (800b2c0 <mem_malloc+0x1fc>)
 800b276:	f007 fa13 	bl	80126a0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	3308      	adds	r3, #8
 800b27e:	e012      	b.n	800b2a6 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800b280:	8bfb      	ldrh	r3, [r7, #30]
 800b282:	4618      	mov	r0, r3
 800b284:	f7ff fc28 	bl	800aad8 <ptr_to_mem>
 800b288:	4603      	mov	r3, r0
 800b28a:	881b      	ldrh	r3, [r3, #0]
 800b28c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b28e:	8bfa      	ldrh	r2, [r7, #30]
 800b290:	8bb9      	ldrh	r1, [r7, #28]
 800b292:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800b296:	1a5b      	subs	r3, r3, r1
 800b298:	429a      	cmp	r2, r3
 800b29a:	f4ff af3e 	bcc.w	800b11a <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b29e:	4804      	ldr	r0, [pc, #16]	; (800b2b0 <mem_malloc+0x1ec>)
 800b2a0:	f001 fb31 	bl	800c906 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3720      	adds	r7, #32
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	24004338 	.word	0x24004338
 800b2b4:	2400433c 	.word	0x2400433c
 800b2b8:	0801401c 	.word	0x0801401c
 800b2bc:	08014220 	.word	0x08014220
 800b2c0:	080140a4 	.word	0x080140a4
 800b2c4:	24004334 	.word	0x24004334
 800b2c8:	08014234 	.word	0x08014234
 800b2cc:	08014250 	.word	0x08014250
 800b2d0:	08014280 	.word	0x08014280
 800b2d4:	080142b0 	.word	0x080142b0

0800b2d8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	3303      	adds	r3, #3
 800b2ee:	f023 0303 	bic.w	r3, r3, #3
 800b2f2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	e011      	b.n	800b31e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	881b      	ldrh	r3, [r3, #0]
 800b310:	461a      	mov	r2, r3
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	4413      	add	r3, r2
 800b316:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	3301      	adds	r3, #1
 800b31c:	60fb      	str	r3, [r7, #12]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	885b      	ldrh	r3, [r3, #2]
 800b322:	461a      	mov	r2, r3
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	4293      	cmp	r3, r2
 800b328:	dbe7      	blt.n	800b2fa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b32a:	bf00      	nop
 800b32c:	bf00      	nop
 800b32e:	3714      	adds	r7, #20
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b33e:	2300      	movs	r3, #0
 800b340:	80fb      	strh	r3, [r7, #6]
 800b342:	e009      	b.n	800b358 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b344:	88fb      	ldrh	r3, [r7, #6]
 800b346:	4a08      	ldr	r2, [pc, #32]	; (800b368 <memp_init+0x30>)
 800b348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7ff ffc3 	bl	800b2d8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b352:	88fb      	ldrh	r3, [r7, #6]
 800b354:	3301      	adds	r3, #1
 800b356:	80fb      	strh	r3, [r7, #6]
 800b358:	88fb      	ldrh	r3, [r7, #6]
 800b35a:	2b0c      	cmp	r3, #12
 800b35c:	d9f2      	bls.n	800b344 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b35e:	bf00      	nop
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	08016724 	.word	0x08016724

0800b36c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b374:	f001 fafa 	bl	800c96c <sys_arch_protect>
 800b378:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d015      	beq.n	800b3b4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	6812      	ldr	r2, [r2, #0]
 800b390:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	f003 0303 	and.w	r3, r3, #3
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d006      	beq.n	800b3aa <do_memp_malloc_pool+0x3e>
 800b39c:	4b09      	ldr	r3, [pc, #36]	; (800b3c4 <do_memp_malloc_pool+0x58>)
 800b39e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b3a2:	4909      	ldr	r1, [pc, #36]	; (800b3c8 <do_memp_malloc_pool+0x5c>)
 800b3a4:	4809      	ldr	r0, [pc, #36]	; (800b3cc <do_memp_malloc_pool+0x60>)
 800b3a6:	f007 f97b 	bl	80126a0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f001 faec 	bl	800c988 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	e003      	b.n	800b3bc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f001 fae7 	bl	800c988 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	080142d4 	.word	0x080142d4
 800b3c8:	08014344 	.word	0x08014344
 800b3cc:	08014368 	.word	0x08014368

0800b3d0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d106      	bne.n	800b3ec <memp_malloc_pool+0x1c>
 800b3de:	4b0a      	ldr	r3, [pc, #40]	; (800b408 <memp_malloc_pool+0x38>)
 800b3e0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b3e4:	4909      	ldr	r1, [pc, #36]	; (800b40c <memp_malloc_pool+0x3c>)
 800b3e6:	480a      	ldr	r0, [pc, #40]	; (800b410 <memp_malloc_pool+0x40>)
 800b3e8:	f007 f95a 	bl	80126a0 <iprintf>
  if (desc == NULL) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d101      	bne.n	800b3f6 <memp_malloc_pool+0x26>
    return NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	e003      	b.n	800b3fe <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7ff ffb8 	bl	800b36c <do_memp_malloc_pool>
 800b3fc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3708      	adds	r7, #8
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	080142d4 	.word	0x080142d4
 800b40c:	08014390 	.word	0x08014390
 800b410:	08014368 	.word	0x08014368

0800b414 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	4603      	mov	r3, r0
 800b41c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b41e:	79fb      	ldrb	r3, [r7, #7]
 800b420:	2b0c      	cmp	r3, #12
 800b422:	d908      	bls.n	800b436 <memp_malloc+0x22>
 800b424:	4b0a      	ldr	r3, [pc, #40]	; (800b450 <memp_malloc+0x3c>)
 800b426:	f240 1257 	movw	r2, #343	; 0x157
 800b42a:	490a      	ldr	r1, [pc, #40]	; (800b454 <memp_malloc+0x40>)
 800b42c:	480a      	ldr	r0, [pc, #40]	; (800b458 <memp_malloc+0x44>)
 800b42e:	f007 f937 	bl	80126a0 <iprintf>
 800b432:	2300      	movs	r3, #0
 800b434:	e008      	b.n	800b448 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b436:	79fb      	ldrb	r3, [r7, #7]
 800b438:	4a08      	ldr	r2, [pc, #32]	; (800b45c <memp_malloc+0x48>)
 800b43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b43e:	4618      	mov	r0, r3
 800b440:	f7ff ff94 	bl	800b36c <do_memp_malloc_pool>
 800b444:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b446:	68fb      	ldr	r3, [r7, #12]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	080142d4 	.word	0x080142d4
 800b454:	080143a4 	.word	0x080143a4
 800b458:	08014368 	.word	0x08014368
 800b45c:	08016724 	.word	0x08016724

0800b460 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	f003 0303 	and.w	r3, r3, #3
 800b470:	2b00      	cmp	r3, #0
 800b472:	d006      	beq.n	800b482 <do_memp_free_pool+0x22>
 800b474:	4b0d      	ldr	r3, [pc, #52]	; (800b4ac <do_memp_free_pool+0x4c>)
 800b476:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b47a:	490d      	ldr	r1, [pc, #52]	; (800b4b0 <do_memp_free_pool+0x50>)
 800b47c:	480d      	ldr	r0, [pc, #52]	; (800b4b4 <do_memp_free_pool+0x54>)
 800b47e:	f007 f90f 	bl	80126a0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b486:	f001 fa71 	bl	800c96c <sys_arch_protect>
 800b48a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b49e:	68b8      	ldr	r0, [r7, #8]
 800b4a0:	f001 fa72 	bl	800c988 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b4a4:	bf00      	nop
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	080142d4 	.word	0x080142d4
 800b4b0:	080143c4 	.word	0x080143c4
 800b4b4:	08014368 	.word	0x08014368

0800b4b8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d106      	bne.n	800b4d6 <memp_free_pool+0x1e>
 800b4c8:	4b0a      	ldr	r3, [pc, #40]	; (800b4f4 <memp_free_pool+0x3c>)
 800b4ca:	f240 1295 	movw	r2, #405	; 0x195
 800b4ce:	490a      	ldr	r1, [pc, #40]	; (800b4f8 <memp_free_pool+0x40>)
 800b4d0:	480a      	ldr	r0, [pc, #40]	; (800b4fc <memp_free_pool+0x44>)
 800b4d2:	f007 f8e5 	bl	80126a0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d007      	beq.n	800b4ec <memp_free_pool+0x34>
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d004      	beq.n	800b4ec <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b4e2:	6839      	ldr	r1, [r7, #0]
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f7ff ffbb 	bl	800b460 <do_memp_free_pool>
 800b4ea:	e000      	b.n	800b4ee <memp_free_pool+0x36>
    return;
 800b4ec:	bf00      	nop
}
 800b4ee:	3708      	adds	r7, #8
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	080142d4 	.word	0x080142d4
 800b4f8:	08014390 	.word	0x08014390
 800b4fc:	08014368 	.word	0x08014368

0800b500 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	4603      	mov	r3, r0
 800b508:	6039      	str	r1, [r7, #0]
 800b50a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b50c:	79fb      	ldrb	r3, [r7, #7]
 800b50e:	2b0c      	cmp	r3, #12
 800b510:	d907      	bls.n	800b522 <memp_free+0x22>
 800b512:	4b0c      	ldr	r3, [pc, #48]	; (800b544 <memp_free+0x44>)
 800b514:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b518:	490b      	ldr	r1, [pc, #44]	; (800b548 <memp_free+0x48>)
 800b51a:	480c      	ldr	r0, [pc, #48]	; (800b54c <memp_free+0x4c>)
 800b51c:	f007 f8c0 	bl	80126a0 <iprintf>
 800b520:	e00c      	b.n	800b53c <memp_free+0x3c>

  if (mem == NULL) {
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d008      	beq.n	800b53a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b528:	79fb      	ldrb	r3, [r7, #7]
 800b52a:	4a09      	ldr	r2, [pc, #36]	; (800b550 <memp_free+0x50>)
 800b52c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b530:	6839      	ldr	r1, [r7, #0]
 800b532:	4618      	mov	r0, r3
 800b534:	f7ff ff94 	bl	800b460 <do_memp_free_pool>
 800b538:	e000      	b.n	800b53c <memp_free+0x3c>
    return;
 800b53a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	080142d4 	.word	0x080142d4
 800b548:	080143e4 	.word	0x080143e4
 800b54c:	08014368 	.word	0x08014368
 800b550:	08016724 	.word	0x08016724

0800b554 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b554:	b480      	push	{r7}
 800b556:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b558:	bf00      	nop
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
	...

0800b564 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
 800b570:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d108      	bne.n	800b58a <netif_add+0x26>
 800b578:	4b57      	ldr	r3, [pc, #348]	; (800b6d8 <netif_add+0x174>)
 800b57a:	f240 1227 	movw	r2, #295	; 0x127
 800b57e:	4957      	ldr	r1, [pc, #348]	; (800b6dc <netif_add+0x178>)
 800b580:	4857      	ldr	r0, [pc, #348]	; (800b6e0 <netif_add+0x17c>)
 800b582:	f007 f88d 	bl	80126a0 <iprintf>
 800b586:	2300      	movs	r3, #0
 800b588:	e0a2      	b.n	800b6d0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d108      	bne.n	800b5a2 <netif_add+0x3e>
 800b590:	4b51      	ldr	r3, [pc, #324]	; (800b6d8 <netif_add+0x174>)
 800b592:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b596:	4953      	ldr	r1, [pc, #332]	; (800b6e4 <netif_add+0x180>)
 800b598:	4851      	ldr	r0, [pc, #324]	; (800b6e0 <netif_add+0x17c>)
 800b59a:	f007 f881 	bl	80126a0 <iprintf>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	e096      	b.n	800b6d0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d101      	bne.n	800b5ac <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b5a8:	4b4f      	ldr	r3, [pc, #316]	; (800b6e8 <netif_add+0x184>)
 800b5aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d101      	bne.n	800b5b6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b5b2:	4b4d      	ldr	r3, [pc, #308]	; (800b6e8 <netif_add+0x184>)
 800b5b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d101      	bne.n	800b5c0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b5bc:	4b4a      	ldr	r3, [pc, #296]	; (800b6e8 <netif_add+0x184>)
 800b5be:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	4a45      	ldr	r2, [pc, #276]	; (800b6ec <netif_add+0x188>)
 800b5d6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6a3a      	ldr	r2, [r7, #32]
 800b5f0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b5f2:	4b3f      	ldr	r3, [pc, #252]	; (800b6f0 <netif_add+0x18c>)
 800b5f4:	781a      	ldrb	r2, [r3, #0]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b600:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	68b9      	ldr	r1, [r7, #8]
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	f000 f913 	bl	800b834 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	4798      	blx	r3
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d001      	beq.n	800b61e <netif_add+0xba>
    return NULL;
 800b61a:	2300      	movs	r3, #0
 800b61c:	e058      	b.n	800b6d0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b624:	2bff      	cmp	r3, #255	; 0xff
 800b626:	d103      	bne.n	800b630 <netif_add+0xcc>
        netif->num = 0;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b630:	2300      	movs	r3, #0
 800b632:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b634:	4b2f      	ldr	r3, [pc, #188]	; (800b6f4 <netif_add+0x190>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	617b      	str	r3, [r7, #20]
 800b63a:	e02b      	b.n	800b694 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b63c:	697a      	ldr	r2, [r7, #20]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	429a      	cmp	r2, r3
 800b642:	d106      	bne.n	800b652 <netif_add+0xee>
 800b644:	4b24      	ldr	r3, [pc, #144]	; (800b6d8 <netif_add+0x174>)
 800b646:	f240 128b 	movw	r2, #395	; 0x18b
 800b64a:	492b      	ldr	r1, [pc, #172]	; (800b6f8 <netif_add+0x194>)
 800b64c:	4824      	ldr	r0, [pc, #144]	; (800b6e0 <netif_add+0x17c>)
 800b64e:	f007 f827 	bl	80126a0 <iprintf>
        num_netifs++;
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	3301      	adds	r3, #1
 800b656:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	2bff      	cmp	r3, #255	; 0xff
 800b65c:	dd06      	ble.n	800b66c <netif_add+0x108>
 800b65e:	4b1e      	ldr	r3, [pc, #120]	; (800b6d8 <netif_add+0x174>)
 800b660:	f240 128d 	movw	r2, #397	; 0x18d
 800b664:	4925      	ldr	r1, [pc, #148]	; (800b6fc <netif_add+0x198>)
 800b666:	481e      	ldr	r0, [pc, #120]	; (800b6e0 <netif_add+0x17c>)
 800b668:	f007 f81a 	bl	80126a0 <iprintf>
        if (netif2->num == netif->num) {
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b678:	429a      	cmp	r2, r3
 800b67a:	d108      	bne.n	800b68e <netif_add+0x12a>
          netif->num++;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b682:	3301      	adds	r3, #1
 800b684:	b2da      	uxtb	r2, r3
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b68c:	e005      	b.n	800b69a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	617b      	str	r3, [r7, #20]
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1d0      	bne.n	800b63c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1be      	bne.n	800b61e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b6a6:	2bfe      	cmp	r3, #254	; 0xfe
 800b6a8:	d103      	bne.n	800b6b2 <netif_add+0x14e>
    netif_num = 0;
 800b6aa:	4b11      	ldr	r3, [pc, #68]	; (800b6f0 <netif_add+0x18c>)
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	701a      	strb	r2, [r3, #0]
 800b6b0:	e006      	b.n	800b6c0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	4b0c      	ldr	r3, [pc, #48]	; (800b6f0 <netif_add+0x18c>)
 800b6be:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b6c0:	4b0c      	ldr	r3, [pc, #48]	; (800b6f4 <netif_add+0x190>)
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b6c8:	4a0a      	ldr	r2, [pc, #40]	; (800b6f4 <netif_add+0x190>)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3718      	adds	r7, #24
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	08014400 	.word	0x08014400
 800b6dc:	080144d0 	.word	0x080144d0
 800b6e0:	0801448c 	.word	0x0801448c
 800b6e4:	080144ec 	.word	0x080144ec
 800b6e8:	08016684 	.word	0x08016684
 800b6ec:	0800bb0f 	.word	0x0800bb0f
 800b6f0:	24007414 	.word	0x24007414
 800b6f4:	2400740c 	.word	0x2400740c
 800b6f8:	08014510 	.word	0x08014510
 800b6fc:	08014524 	.word	0x08014524

0800b700 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b70a:	6839      	ldr	r1, [r7, #0]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f002 fc93 	bl	800e038 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b712:	6839      	ldr	r1, [r7, #0]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f006 ff49 	bl	80125ac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b71a:	bf00      	nop
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
	...

0800b724 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d106      	bne.n	800b744 <netif_do_set_ipaddr+0x20>
 800b736:	4b1d      	ldr	r3, [pc, #116]	; (800b7ac <netif_do_set_ipaddr+0x88>)
 800b738:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b73c:	491c      	ldr	r1, [pc, #112]	; (800b7b0 <netif_do_set_ipaddr+0x8c>)
 800b73e:	481d      	ldr	r0, [pc, #116]	; (800b7b4 <netif_do_set_ipaddr+0x90>)
 800b740:	f006 ffae 	bl	80126a0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d106      	bne.n	800b758 <netif_do_set_ipaddr+0x34>
 800b74a:	4b18      	ldr	r3, [pc, #96]	; (800b7ac <netif_do_set_ipaddr+0x88>)
 800b74c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b750:	4917      	ldr	r1, [pc, #92]	; (800b7b0 <netif_do_set_ipaddr+0x8c>)
 800b752:	4818      	ldr	r0, [pc, #96]	; (800b7b4 <netif_do_set_ipaddr+0x90>)
 800b754:	f006 ffa4 	bl	80126a0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	3304      	adds	r3, #4
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	429a      	cmp	r2, r3
 800b764:	d01c      	beq.n	800b7a0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	3304      	adds	r3, #4
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b776:	f107 0314 	add.w	r3, r7, #20
 800b77a:	4619      	mov	r1, r3
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f7ff ffbf 	bl	800b700 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d002      	beq.n	800b78e <netif_do_set_ipaddr+0x6a>
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	e000      	b.n	800b790 <netif_do_set_ipaddr+0x6c>
 800b78e:	2300      	movs	r3, #0
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b794:	2101      	movs	r1, #1
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f000 f8d2 	bl	800b940 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b79c:	2301      	movs	r3, #1
 800b79e:	e000      	b.n	800b7a2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3718      	adds	r7, #24
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	08014400 	.word	0x08014400
 800b7b0:	08014554 	.word	0x08014554
 800b7b4:	0801448c 	.word	0x0801448c

0800b7b8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	3308      	adds	r3, #8
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d00a      	beq.n	800b7e8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <netif_do_set_netmask+0x26>
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	e000      	b.n	800b7e0 <netif_do_set_netmask+0x28>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e000      	b.n	800b7ea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3714      	adds	r7, #20
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b085      	sub	sp, #20
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	60f8      	str	r0, [r7, #12]
 800b7fe:	60b9      	str	r1, [r7, #8]
 800b800:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	330c      	adds	r3, #12
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d00a      	beq.n	800b826 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d002      	beq.n	800b81c <netif_do_set_gw+0x26>
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	e000      	b.n	800b81e <netif_do_set_gw+0x28>
 800b81c:	2300      	movs	r3, #0
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b822:	2301      	movs	r3, #1
 800b824:	e000      	b.n	800b828 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b088      	sub	sp, #32
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]
 800b840:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b842:	2300      	movs	r3, #0
 800b844:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b846:	2300      	movs	r3, #0
 800b848:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d101      	bne.n	800b854 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b850:	4b1c      	ldr	r3, [pc, #112]	; (800b8c4 <netif_set_addr+0x90>)
 800b852:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b85a:	4b1a      	ldr	r3, [pc, #104]	; (800b8c4 <netif_set_addr+0x90>)
 800b85c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d101      	bne.n	800b868 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b864:	4b17      	ldr	r3, [pc, #92]	; (800b8c4 <netif_set_addr+0x90>)
 800b866:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d003      	beq.n	800b876 <netif_set_addr+0x42>
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d101      	bne.n	800b87a <netif_set_addr+0x46>
 800b876:	2301      	movs	r3, #1
 800b878:	e000      	b.n	800b87c <netif_set_addr+0x48>
 800b87a:	2300      	movs	r3, #0
 800b87c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d006      	beq.n	800b892 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b884:	f107 0310 	add.w	r3, r7, #16
 800b888:	461a      	mov	r2, r3
 800b88a:	68b9      	ldr	r1, [r7, #8]
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f7ff ff49 	bl	800b724 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b892:	69fa      	ldr	r2, [r7, #28]
 800b894:	6879      	ldr	r1, [r7, #4]
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f7ff ff8e 	bl	800b7b8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b89c:	69ba      	ldr	r2, [r7, #24]
 800b89e:	6839      	ldr	r1, [r7, #0]
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f7ff ffa8 	bl	800b7f6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d106      	bne.n	800b8ba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b8ac:	f107 0310 	add.w	r3, r7, #16
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	68b9      	ldr	r1, [r7, #8]
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f7ff ff35 	bl	800b724 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b8ba:	bf00      	nop
 800b8bc:	3720      	adds	r7, #32
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	08016684 	.word	0x08016684

0800b8c8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b8d0:	4a04      	ldr	r2, [pc, #16]	; (800b8e4 <netif_set_default+0x1c>)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b8d6:	bf00      	nop
 800b8d8:	370c      	adds	r7, #12
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr
 800b8e2:	bf00      	nop
 800b8e4:	24007410 	.word	0x24007410

0800b8e8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d107      	bne.n	800b906 <netif_set_up+0x1e>
 800b8f6:	4b0f      	ldr	r3, [pc, #60]	; (800b934 <netif_set_up+0x4c>)
 800b8f8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b8fc:	490e      	ldr	r1, [pc, #56]	; (800b938 <netif_set_up+0x50>)
 800b8fe:	480f      	ldr	r0, [pc, #60]	; (800b93c <netif_set_up+0x54>)
 800b900:	f006 fece 	bl	80126a0 <iprintf>
 800b904:	e013      	b.n	800b92e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b90c:	f003 0301 	and.w	r3, r3, #1
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10c      	bne.n	800b92e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b91a:	f043 0301 	orr.w	r3, r3, #1
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b926:	2103      	movs	r1, #3
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 f809 	bl	800b940 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	08014400 	.word	0x08014400
 800b938:	080145c4 	.word	0x080145c4
 800b93c:	0801448c 	.word	0x0801448c

0800b940 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	460b      	mov	r3, r1
 800b94a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d106      	bne.n	800b960 <netif_issue_reports+0x20>
 800b952:	4b18      	ldr	r3, [pc, #96]	; (800b9b4 <netif_issue_reports+0x74>)
 800b954:	f240 326d 	movw	r2, #877	; 0x36d
 800b958:	4917      	ldr	r1, [pc, #92]	; (800b9b8 <netif_issue_reports+0x78>)
 800b95a:	4818      	ldr	r0, [pc, #96]	; (800b9bc <netif_issue_reports+0x7c>)
 800b95c:	f006 fea0 	bl	80126a0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b966:	f003 0304 	and.w	r3, r3, #4
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d01e      	beq.n	800b9ac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b974:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d017      	beq.n	800b9ac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b97c:	78fb      	ldrb	r3, [r7, #3]
 800b97e:	f003 0301 	and.w	r3, r3, #1
 800b982:	2b00      	cmp	r3, #0
 800b984:	d013      	beq.n	800b9ae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	3304      	adds	r3, #4
 800b98a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00e      	beq.n	800b9ae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b996:	f003 0308 	and.w	r3, r3, #8
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d007      	beq.n	800b9ae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	3304      	adds	r3, #4
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7fd fc11 	bl	80091cc <etharp_request>
 800b9aa:	e000      	b.n	800b9ae <netif_issue_reports+0x6e>
    return;
 800b9ac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	08014400 	.word	0x08014400
 800b9b8:	080145e0 	.word	0x080145e0
 800b9bc:	0801448c 	.word	0x0801448c

0800b9c0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d107      	bne.n	800b9de <netif_set_down+0x1e>
 800b9ce:	4b12      	ldr	r3, [pc, #72]	; (800ba18 <netif_set_down+0x58>)
 800b9d0:	f240 329b 	movw	r2, #923	; 0x39b
 800b9d4:	4911      	ldr	r1, [pc, #68]	; (800ba1c <netif_set_down+0x5c>)
 800b9d6:	4812      	ldr	r0, [pc, #72]	; (800ba20 <netif_set_down+0x60>)
 800b9d8:	f006 fe62 	bl	80126a0 <iprintf>
 800b9dc:	e019      	b.n	800ba12 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d012      	beq.n	800ba12 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9f2:	f023 0301 	bic.w	r3, r3, #1
 800b9f6:	b2da      	uxtb	r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba04:	f003 0308 	and.w	r3, r3, #8
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d002      	beq.n	800ba12 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f7fc ff9b 	bl	8008948 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	08014400 	.word	0x08014400
 800ba1c:	08014604 	.word	0x08014604
 800ba20:	0801448c 	.word	0x0801448c

0800ba24 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d107      	bne.n	800ba42 <netif_set_link_up+0x1e>
 800ba32:	4b13      	ldr	r3, [pc, #76]	; (800ba80 <netif_set_link_up+0x5c>)
 800ba34:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ba38:	4912      	ldr	r1, [pc, #72]	; (800ba84 <netif_set_link_up+0x60>)
 800ba3a:	4813      	ldr	r0, [pc, #76]	; (800ba88 <netif_set_link_up+0x64>)
 800ba3c:	f006 fe30 	bl	80126a0 <iprintf>
 800ba40:	e01b      	b.n	800ba7a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba48:	f003 0304 	and.w	r3, r3, #4
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d114      	bne.n	800ba7a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba56:	f043 0304 	orr.w	r3, r3, #4
 800ba5a:	b2da      	uxtb	r2, r3
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ba62:	2103      	movs	r1, #3
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f7ff ff6b 	bl	800b940 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	69db      	ldr	r3, [r3, #28]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d003      	beq.n	800ba7a <netif_set_link_up+0x56>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ba7a:	3708      	adds	r7, #8
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	08014400 	.word	0x08014400
 800ba84:	08014624 	.word	0x08014624
 800ba88:	0801448c 	.word	0x0801448c

0800ba8c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d107      	bne.n	800baaa <netif_set_link_down+0x1e>
 800ba9a:	4b11      	ldr	r3, [pc, #68]	; (800bae0 <netif_set_link_down+0x54>)
 800ba9c:	f240 4206 	movw	r2, #1030	; 0x406
 800baa0:	4910      	ldr	r1, [pc, #64]	; (800bae4 <netif_set_link_down+0x58>)
 800baa2:	4811      	ldr	r0, [pc, #68]	; (800bae8 <netif_set_link_down+0x5c>)
 800baa4:	f006 fdfc 	bl	80126a0 <iprintf>
 800baa8:	e017      	b.n	800bada <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bab0:	f003 0304 	and.w	r3, r3, #4
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d010      	beq.n	800bada <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800babe:	f023 0304 	bic.w	r3, r3, #4
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	69db      	ldr	r3, [r3, #28]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d003      	beq.n	800bada <netif_set_link_down+0x4e>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	69db      	ldr	r3, [r3, #28]
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bada:	3708      	adds	r7, #8
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	08014400 	.word	0x08014400
 800bae4:	08014648 	.word	0x08014648
 800bae8:	0801448c 	.word	0x0801448c

0800baec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d002      	beq.n	800bb02 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	683a      	ldr	r2, [r7, #0]
 800bb00:	61da      	str	r2, [r3, #28]
  }
}
 800bb02:	bf00      	nop
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b085      	sub	sp, #20
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	60f8      	str	r0, [r7, #12]
 800bb16:	60b9      	str	r1, [r7, #8]
 800bb18:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bb1a:	f06f 030b 	mvn.w	r3, #11
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3714      	adds	r7, #20
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr
	...

0800bb2c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	4603      	mov	r3, r0
 800bb34:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bb36:	79fb      	ldrb	r3, [r7, #7]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d013      	beq.n	800bb64 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bb3c:	4b0d      	ldr	r3, [pc, #52]	; (800bb74 <netif_get_by_index+0x48>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	60fb      	str	r3, [r7, #12]
 800bb42:	e00c      	b.n	800bb5e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	79fa      	ldrb	r2, [r7, #7]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d101      	bne.n	800bb58 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	e006      	b.n	800bb66 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	60fb      	str	r3, [r7, #12]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1ef      	bne.n	800bb44 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	2400740c 	.word	0x2400740c

0800bb78 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bb7e:	f000 fef5 	bl	800c96c <sys_arch_protect>
 800bb82:	6038      	str	r0, [r7, #0]
 800bb84:	4b0d      	ldr	r3, [pc, #52]	; (800bbbc <pbuf_free_ooseq+0x44>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	701a      	strb	r2, [r3, #0]
 800bb8a:	6838      	ldr	r0, [r7, #0]
 800bb8c:	f000 fefc 	bl	800c988 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bb90:	4b0b      	ldr	r3, [pc, #44]	; (800bbc0 <pbuf_free_ooseq+0x48>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	607b      	str	r3, [r7, #4]
 800bb96:	e00a      	b.n	800bbae <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d003      	beq.n	800bba8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f002 fa87 	bl	800e0b4 <tcp_free_ooseq>
      return;
 800bba6:	e005      	b.n	800bbb4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	607b      	str	r3, [r7, #4]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d1f1      	bne.n	800bb98 <pbuf_free_ooseq+0x20>
    }
  }
}
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	24007415 	.word	0x24007415
 800bbc0:	2400742c 	.word	0x2400742c

0800bbc4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bbcc:	f7ff ffd4 	bl	800bb78 <pbuf_free_ooseq>
}
 800bbd0:	bf00      	nop
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bbde:	f000 fec5 	bl	800c96c <sys_arch_protect>
 800bbe2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bbe4:	4b0f      	ldr	r3, [pc, #60]	; (800bc24 <pbuf_pool_is_empty+0x4c>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bbea:	4b0e      	ldr	r3, [pc, #56]	; (800bc24 <pbuf_pool_is_empty+0x4c>)
 800bbec:	2201      	movs	r2, #1
 800bbee:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 fec9 	bl	800c988 <sys_arch_unprotect>

  if (!queued) {
 800bbf6:	78fb      	ldrb	r3, [r7, #3]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10f      	bne.n	800bc1c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bbfc:	2100      	movs	r1, #0
 800bbfe:	480a      	ldr	r0, [pc, #40]	; (800bc28 <pbuf_pool_is_empty+0x50>)
 800bc00:	f006 f922 	bl	8011e48 <tcpip_try_callback>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d008      	beq.n	800bc1c <pbuf_pool_is_empty+0x44>
 800bc0a:	f000 feaf 	bl	800c96c <sys_arch_protect>
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	4b04      	ldr	r3, [pc, #16]	; (800bc24 <pbuf_pool_is_empty+0x4c>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	701a      	strb	r2, [r3, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 feb6 	bl	800c988 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bc1c:	bf00      	nop
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	24007415 	.word	0x24007415
 800bc28:	0800bbc5 	.word	0x0800bbc5

0800bc2c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	4611      	mov	r1, r2
 800bc38:	461a      	mov	r2, r3
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	80fb      	strh	r3, [r7, #6]
 800bc3e:	4613      	mov	r3, r2
 800bc40:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2200      	movs	r2, #0
 800bc46:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	88fa      	ldrh	r2, [r7, #6]
 800bc52:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	88ba      	ldrh	r2, [r7, #4]
 800bc58:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bc5a:	8b3b      	ldrh	r3, [r7, #24]
 800bc5c:	b2da      	uxtb	r2, r3
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	7f3a      	ldrb	r2, [r7, #28]
 800bc66:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	73da      	strb	r2, [r3, #15]
}
 800bc74:	bf00      	nop
 800bc76:	3714      	adds	r7, #20
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b08c      	sub	sp, #48	; 0x30
 800bc84:	af02      	add	r7, sp, #8
 800bc86:	4603      	mov	r3, r0
 800bc88:	71fb      	strb	r3, [r7, #7]
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	80bb      	strh	r3, [r7, #4]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bc92:	79fb      	ldrb	r3, [r7, #7]
 800bc94:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bc96:	887b      	ldrh	r3, [r7, #2]
 800bc98:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc9c:	d07f      	beq.n	800bd9e <pbuf_alloc+0x11e>
 800bc9e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bca2:	f300 80c8 	bgt.w	800be36 <pbuf_alloc+0x1b6>
 800bca6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bcaa:	d010      	beq.n	800bcce <pbuf_alloc+0x4e>
 800bcac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bcb0:	f300 80c1 	bgt.w	800be36 <pbuf_alloc+0x1b6>
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d002      	beq.n	800bcbe <pbuf_alloc+0x3e>
 800bcb8:	2b41      	cmp	r3, #65	; 0x41
 800bcba:	f040 80bc 	bne.w	800be36 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bcbe:	887a      	ldrh	r2, [r7, #2]
 800bcc0:	88bb      	ldrh	r3, [r7, #4]
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	f000 f8d1 	bl	800be6c <pbuf_alloc_reference>
 800bcca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bccc:	e0bd      	b.n	800be4a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bcd6:	88bb      	ldrh	r3, [r7, #4]
 800bcd8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bcda:	200c      	movs	r0, #12
 800bcdc:	f7ff fb9a 	bl	800b414 <memp_malloc>
 800bce0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d109      	bne.n	800bcfc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bce8:	f7ff ff76 	bl	800bbd8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d002      	beq.n	800bcf8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800bcf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bcf4:	f000 faa8 	bl	800c248 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	e0a7      	b.n	800be4c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bcfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcfe:	3303      	adds	r3, #3
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	f023 0303 	bic.w	r3, r3, #3
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	8b7a      	ldrh	r2, [r7, #26]
 800bd10:	4293      	cmp	r3, r2
 800bd12:	bf28      	it	cs
 800bd14:	4613      	movcs	r3, r2
 800bd16:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bd18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd1a:	3310      	adds	r3, #16
 800bd1c:	693a      	ldr	r2, [r7, #16]
 800bd1e:	4413      	add	r3, r2
 800bd20:	3303      	adds	r3, #3
 800bd22:	f023 0303 	bic.w	r3, r3, #3
 800bd26:	4618      	mov	r0, r3
 800bd28:	89f9      	ldrh	r1, [r7, #14]
 800bd2a:	8b7a      	ldrh	r2, [r7, #26]
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	9301      	str	r3, [sp, #4]
 800bd30:	887b      	ldrh	r3, [r7, #2]
 800bd32:	9300      	str	r3, [sp, #0]
 800bd34:	460b      	mov	r3, r1
 800bd36:	4601      	mov	r1, r0
 800bd38:	6938      	ldr	r0, [r7, #16]
 800bd3a:	f7ff ff77 	bl	800bc2c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	f003 0303 	and.w	r3, r3, #3
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d006      	beq.n	800bd58 <pbuf_alloc+0xd8>
 800bd4a:	4b42      	ldr	r3, [pc, #264]	; (800be54 <pbuf_alloc+0x1d4>)
 800bd4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd50:	4941      	ldr	r1, [pc, #260]	; (800be58 <pbuf_alloc+0x1d8>)
 800bd52:	4842      	ldr	r0, [pc, #264]	; (800be5c <pbuf_alloc+0x1dc>)
 800bd54:	f006 fca4 	bl	80126a0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bd58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd5a:	3303      	adds	r3, #3
 800bd5c:	f023 0303 	bic.w	r3, r3, #3
 800bd60:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bd64:	d106      	bne.n	800bd74 <pbuf_alloc+0xf4>
 800bd66:	4b3b      	ldr	r3, [pc, #236]	; (800be54 <pbuf_alloc+0x1d4>)
 800bd68:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bd6c:	493c      	ldr	r1, [pc, #240]	; (800be60 <pbuf_alloc+0x1e0>)
 800bd6e:	483b      	ldr	r0, [pc, #236]	; (800be5c <pbuf_alloc+0x1dc>)
 800bd70:	f006 fc96 	bl	80126a0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d102      	bne.n	800bd80 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd7e:	e002      	b.n	800bd86 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	693a      	ldr	r2, [r7, #16]
 800bd84:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bd8a:	8b7a      	ldrh	r2, [r7, #26]
 800bd8c:	89fb      	ldrh	r3, [r7, #14]
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bd96:	8b7b      	ldrh	r3, [r7, #26]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d19e      	bne.n	800bcda <pbuf_alloc+0x5a>
      break;
 800bd9c:	e055      	b.n	800be4a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bd9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bda0:	3303      	adds	r3, #3
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	f023 0303 	bic.w	r3, r3, #3
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	88bb      	ldrh	r3, [r7, #4]
 800bdac:	3303      	adds	r3, #3
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	f023 0303 	bic.w	r3, r3, #3
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	4413      	add	r3, r2
 800bdb8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bdba:	8b3b      	ldrh	r3, [r7, #24]
 800bdbc:	3310      	adds	r3, #16
 800bdbe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bdc0:	8b3a      	ldrh	r2, [r7, #24]
 800bdc2:	88bb      	ldrh	r3, [r7, #4]
 800bdc4:	3303      	adds	r3, #3
 800bdc6:	f023 0303 	bic.w	r3, r3, #3
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d306      	bcc.n	800bddc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bdce:	8afa      	ldrh	r2, [r7, #22]
 800bdd0:	88bb      	ldrh	r3, [r7, #4]
 800bdd2:	3303      	adds	r3, #3
 800bdd4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d201      	bcs.n	800bde0 <pbuf_alloc+0x160>
        return NULL;
 800bddc:	2300      	movs	r3, #0
 800bdde:	e035      	b.n	800be4c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bde0:	8afb      	ldrh	r3, [r7, #22]
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7ff f96e 	bl	800b0c4 <mem_malloc>
 800bde8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d101      	bne.n	800bdf4 <pbuf_alloc+0x174>
        return NULL;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	e02b      	b.n	800be4c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bdf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdf6:	3310      	adds	r3, #16
 800bdf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdfa:	4413      	add	r3, r2
 800bdfc:	3303      	adds	r3, #3
 800bdfe:	f023 0303 	bic.w	r3, r3, #3
 800be02:	4618      	mov	r0, r3
 800be04:	88b9      	ldrh	r1, [r7, #4]
 800be06:	88ba      	ldrh	r2, [r7, #4]
 800be08:	2300      	movs	r3, #0
 800be0a:	9301      	str	r3, [sp, #4]
 800be0c:	887b      	ldrh	r3, [r7, #2]
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	460b      	mov	r3, r1
 800be12:	4601      	mov	r1, r0
 800be14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be16:	f7ff ff09 	bl	800bc2c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	f003 0303 	and.w	r3, r3, #3
 800be22:	2b00      	cmp	r3, #0
 800be24:	d010      	beq.n	800be48 <pbuf_alloc+0x1c8>
 800be26:	4b0b      	ldr	r3, [pc, #44]	; (800be54 <pbuf_alloc+0x1d4>)
 800be28:	f44f 7291 	mov.w	r2, #290	; 0x122
 800be2c:	490d      	ldr	r1, [pc, #52]	; (800be64 <pbuf_alloc+0x1e4>)
 800be2e:	480b      	ldr	r0, [pc, #44]	; (800be5c <pbuf_alloc+0x1dc>)
 800be30:	f006 fc36 	bl	80126a0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800be34:	e008      	b.n	800be48 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800be36:	4b07      	ldr	r3, [pc, #28]	; (800be54 <pbuf_alloc+0x1d4>)
 800be38:	f240 1227 	movw	r2, #295	; 0x127
 800be3c:	490a      	ldr	r1, [pc, #40]	; (800be68 <pbuf_alloc+0x1e8>)
 800be3e:	4807      	ldr	r0, [pc, #28]	; (800be5c <pbuf_alloc+0x1dc>)
 800be40:	f006 fc2e 	bl	80126a0 <iprintf>
      return NULL;
 800be44:	2300      	movs	r3, #0
 800be46:	e001      	b.n	800be4c <pbuf_alloc+0x1cc>
      break;
 800be48:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3728      	adds	r7, #40	; 0x28
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	0801466c 	.word	0x0801466c
 800be58:	080146dc 	.word	0x080146dc
 800be5c:	0801470c 	.word	0x0801470c
 800be60:	08014734 	.word	0x08014734
 800be64:	08014768 	.word	0x08014768
 800be68:	08014794 	.word	0x08014794

0800be6c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b086      	sub	sp, #24
 800be70:	af02      	add	r7, sp, #8
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	460b      	mov	r3, r1
 800be76:	807b      	strh	r3, [r7, #2]
 800be78:	4613      	mov	r3, r2
 800be7a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800be7c:	883b      	ldrh	r3, [r7, #0]
 800be7e:	2b41      	cmp	r3, #65	; 0x41
 800be80:	d009      	beq.n	800be96 <pbuf_alloc_reference+0x2a>
 800be82:	883b      	ldrh	r3, [r7, #0]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d006      	beq.n	800be96 <pbuf_alloc_reference+0x2a>
 800be88:	4b0f      	ldr	r3, [pc, #60]	; (800bec8 <pbuf_alloc_reference+0x5c>)
 800be8a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800be8e:	490f      	ldr	r1, [pc, #60]	; (800becc <pbuf_alloc_reference+0x60>)
 800be90:	480f      	ldr	r0, [pc, #60]	; (800bed0 <pbuf_alloc_reference+0x64>)
 800be92:	f006 fc05 	bl	80126a0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800be96:	200b      	movs	r0, #11
 800be98:	f7ff fabc 	bl	800b414 <memp_malloc>
 800be9c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d101      	bne.n	800bea8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bea4:	2300      	movs	r3, #0
 800bea6:	e00b      	b.n	800bec0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bea8:	8879      	ldrh	r1, [r7, #2]
 800beaa:	887a      	ldrh	r2, [r7, #2]
 800beac:	2300      	movs	r3, #0
 800beae:	9301      	str	r3, [sp, #4]
 800beb0:	883b      	ldrh	r3, [r7, #0]
 800beb2:	9300      	str	r3, [sp, #0]
 800beb4:	460b      	mov	r3, r1
 800beb6:	6879      	ldr	r1, [r7, #4]
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f7ff feb7 	bl	800bc2c <pbuf_init_alloced_pbuf>
  return p;
 800bebe:	68fb      	ldr	r3, [r7, #12]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	0801466c 	.word	0x0801466c
 800becc:	080147b0 	.word	0x080147b0
 800bed0:	0801470c 	.word	0x0801470c

0800bed4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af02      	add	r7, sp, #8
 800beda:	607b      	str	r3, [r7, #4]
 800bedc:	4603      	mov	r3, r0
 800bede:	73fb      	strb	r3, [r7, #15]
 800bee0:	460b      	mov	r3, r1
 800bee2:	81bb      	strh	r3, [r7, #12]
 800bee4:	4613      	mov	r3, r2
 800bee6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800beec:	8a7b      	ldrh	r3, [r7, #18]
 800beee:	3303      	adds	r3, #3
 800bef0:	f023 0203 	bic.w	r2, r3, #3
 800bef4:	89bb      	ldrh	r3, [r7, #12]
 800bef6:	441a      	add	r2, r3
 800bef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800befa:	429a      	cmp	r2, r3
 800befc:	d901      	bls.n	800bf02 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800befe:	2300      	movs	r3, #0
 800bf00:	e018      	b.n	800bf34 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bf02:	6a3b      	ldr	r3, [r7, #32]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d007      	beq.n	800bf18 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bf08:	8a7b      	ldrh	r3, [r7, #18]
 800bf0a:	3303      	adds	r3, #3
 800bf0c:	f023 0303 	bic.w	r3, r3, #3
 800bf10:	6a3a      	ldr	r2, [r7, #32]
 800bf12:	4413      	add	r3, r2
 800bf14:	617b      	str	r3, [r7, #20]
 800bf16:	e001      	b.n	800bf1c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	89b9      	ldrh	r1, [r7, #12]
 800bf20:	89ba      	ldrh	r2, [r7, #12]
 800bf22:	2302      	movs	r3, #2
 800bf24:	9301      	str	r3, [sp, #4]
 800bf26:	897b      	ldrh	r3, [r7, #10]
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	6979      	ldr	r1, [r7, #20]
 800bf2e:	f7ff fe7d 	bl	800bc2c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bf32:	687b      	ldr	r3, [r7, #4]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3718      	adds	r7, #24
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d106      	bne.n	800bf5c <pbuf_realloc+0x20>
 800bf4e:	4b3a      	ldr	r3, [pc, #232]	; (800c038 <pbuf_realloc+0xfc>)
 800bf50:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bf54:	4939      	ldr	r1, [pc, #228]	; (800c03c <pbuf_realloc+0x100>)
 800bf56:	483a      	ldr	r0, [pc, #232]	; (800c040 <pbuf_realloc+0x104>)
 800bf58:	f006 fba2 	bl	80126a0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	891b      	ldrh	r3, [r3, #8]
 800bf60:	887a      	ldrh	r2, [r7, #2]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d263      	bcs.n	800c02e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	891a      	ldrh	r2, [r3, #8]
 800bf6a:	887b      	ldrh	r3, [r7, #2]
 800bf6c:	1ad3      	subs	r3, r2, r3
 800bf6e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bf70:	887b      	ldrh	r3, [r7, #2]
 800bf72:	817b      	strh	r3, [r7, #10]
  q = p;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bf78:	e018      	b.n	800bfac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	895b      	ldrh	r3, [r3, #10]
 800bf7e:	897a      	ldrh	r2, [r7, #10]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	891a      	ldrh	r2, [r3, #8]
 800bf88:	893b      	ldrh	r3, [r7, #8]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d106      	bne.n	800bfac <pbuf_realloc+0x70>
 800bf9e:	4b26      	ldr	r3, [pc, #152]	; (800c038 <pbuf_realloc+0xfc>)
 800bfa0:	f240 12af 	movw	r2, #431	; 0x1af
 800bfa4:	4927      	ldr	r1, [pc, #156]	; (800c044 <pbuf_realloc+0x108>)
 800bfa6:	4826      	ldr	r0, [pc, #152]	; (800c040 <pbuf_realloc+0x104>)
 800bfa8:	f006 fb7a 	bl	80126a0 <iprintf>
  while (rem_len > q->len) {
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	895b      	ldrh	r3, [r3, #10]
 800bfb0:	897a      	ldrh	r2, [r7, #10]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d8e1      	bhi.n	800bf7a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	7b1b      	ldrb	r3, [r3, #12]
 800bfba:	f003 030f 	and.w	r3, r3, #15
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d121      	bne.n	800c006 <pbuf_realloc+0xca>
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	895b      	ldrh	r3, [r3, #10]
 800bfc6:	897a      	ldrh	r2, [r7, #10]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d01c      	beq.n	800c006 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	7b5b      	ldrb	r3, [r3, #13]
 800bfd0:	f003 0302 	and.w	r3, r3, #2
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d116      	bne.n	800c006 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	685a      	ldr	r2, [r3, #4]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	1ad3      	subs	r3, r2, r3
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	897b      	ldrh	r3, [r7, #10]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	4619      	mov	r1, r3
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f7fe ff5a 	bl	800aea4 <mem_trim>
 800bff0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d106      	bne.n	800c006 <pbuf_realloc+0xca>
 800bff8:	4b0f      	ldr	r3, [pc, #60]	; (800c038 <pbuf_realloc+0xfc>)
 800bffa:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bffe:	4912      	ldr	r1, [pc, #72]	; (800c048 <pbuf_realloc+0x10c>)
 800c000:	480f      	ldr	r0, [pc, #60]	; (800c040 <pbuf_realloc+0x104>)
 800c002:	f006 fb4d 	bl	80126a0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	897a      	ldrh	r2, [r7, #10]
 800c00a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	895a      	ldrh	r2, [r3, #10]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d004      	beq.n	800c026 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4618      	mov	r0, r3
 800c022:	f000 f911 	bl	800c248 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	601a      	str	r2, [r3, #0]
 800c02c:	e000      	b.n	800c030 <pbuf_realloc+0xf4>
    return;
 800c02e:	bf00      	nop

}
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	0801466c 	.word	0x0801466c
 800c03c:	080147c4 	.word	0x080147c4
 800c040:	0801470c 	.word	0x0801470c
 800c044:	080147dc 	.word	0x080147dc
 800c048:	080147f4 	.word	0x080147f4

0800c04c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b086      	sub	sp, #24
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	4613      	mov	r3, r2
 800c058:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d106      	bne.n	800c06e <pbuf_add_header_impl+0x22>
 800c060:	4b2b      	ldr	r3, [pc, #172]	; (800c110 <pbuf_add_header_impl+0xc4>)
 800c062:	f240 12df 	movw	r2, #479	; 0x1df
 800c066:	492b      	ldr	r1, [pc, #172]	; (800c114 <pbuf_add_header_impl+0xc8>)
 800c068:	482b      	ldr	r0, [pc, #172]	; (800c118 <pbuf_add_header_impl+0xcc>)
 800c06a:	f006 fb19 	bl	80126a0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d003      	beq.n	800c07c <pbuf_add_header_impl+0x30>
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c07a:	d301      	bcc.n	800c080 <pbuf_add_header_impl+0x34>
    return 1;
 800c07c:	2301      	movs	r3, #1
 800c07e:	e043      	b.n	800c108 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d101      	bne.n	800c08a <pbuf_add_header_impl+0x3e>
    return 0;
 800c086:	2300      	movs	r3, #0
 800c088:	e03e      	b.n	800c108 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	891a      	ldrh	r2, [r3, #8]
 800c092:	8a7b      	ldrh	r3, [r7, #18]
 800c094:	4413      	add	r3, r2
 800c096:	b29b      	uxth	r3, r3
 800c098:	8a7a      	ldrh	r2, [r7, #18]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d901      	bls.n	800c0a2 <pbuf_add_header_impl+0x56>
    return 1;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e032      	b.n	800c108 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	7b1b      	ldrb	r3, [r3, #12]
 800c0a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c0a8:	8a3b      	ldrh	r3, [r7, #16]
 800c0aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00c      	beq.n	800c0cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	425b      	negs	r3, r3
 800c0ba:	4413      	add	r3, r2
 800c0bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3310      	adds	r3, #16
 800c0c2:	697a      	ldr	r2, [r7, #20]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d20d      	bcs.n	800c0e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e01d      	b.n	800c108 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c0cc:	79fb      	ldrb	r3, [r7, #7]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d006      	beq.n	800c0e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	685a      	ldr	r2, [r3, #4]
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	425b      	negs	r3, r3
 800c0da:	4413      	add	r3, r2
 800c0dc:	617b      	str	r3, [r7, #20]
 800c0de:	e001      	b.n	800c0e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e011      	b.n	800c108 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	895a      	ldrh	r2, [r3, #10]
 800c0ee:	8a7b      	ldrh	r3, [r7, #18]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	891a      	ldrh	r2, [r3, #8]
 800c0fc:	8a7b      	ldrh	r3, [r7, #18]
 800c0fe:	4413      	add	r3, r2
 800c100:	b29a      	uxth	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	811a      	strh	r2, [r3, #8]


  return 0;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3718      	adds	r7, #24
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	0801466c 	.word	0x0801466c
 800c114:	08014810 	.word	0x08014810
 800c118:	0801470c 	.word	0x0801470c

0800c11c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c126:	2200      	movs	r2, #0
 800c128:	6839      	ldr	r1, [r7, #0]
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7ff ff8e 	bl	800c04c <pbuf_add_header_impl>
 800c130:	4603      	mov	r3, r0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3708      	adds	r7, #8
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
	...

0800c13c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d106      	bne.n	800c15a <pbuf_remove_header+0x1e>
 800c14c:	4b20      	ldr	r3, [pc, #128]	; (800c1d0 <pbuf_remove_header+0x94>)
 800c14e:	f240 224b 	movw	r2, #587	; 0x24b
 800c152:	4920      	ldr	r1, [pc, #128]	; (800c1d4 <pbuf_remove_header+0x98>)
 800c154:	4820      	ldr	r0, [pc, #128]	; (800c1d8 <pbuf_remove_header+0x9c>)
 800c156:	f006 faa3 	bl	80126a0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d003      	beq.n	800c168 <pbuf_remove_header+0x2c>
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c166:	d301      	bcc.n	800c16c <pbuf_remove_header+0x30>
    return 1;
 800c168:	2301      	movs	r3, #1
 800c16a:	e02c      	b.n	800c1c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d101      	bne.n	800c176 <pbuf_remove_header+0x3a>
    return 0;
 800c172:	2300      	movs	r3, #0
 800c174:	e027      	b.n	800c1c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	895b      	ldrh	r3, [r3, #10]
 800c17e:	89fa      	ldrh	r2, [r7, #14]
 800c180:	429a      	cmp	r2, r3
 800c182:	d908      	bls.n	800c196 <pbuf_remove_header+0x5a>
 800c184:	4b12      	ldr	r3, [pc, #72]	; (800c1d0 <pbuf_remove_header+0x94>)
 800c186:	f240 2255 	movw	r2, #597	; 0x255
 800c18a:	4914      	ldr	r1, [pc, #80]	; (800c1dc <pbuf_remove_header+0xa0>)
 800c18c:	4812      	ldr	r0, [pc, #72]	; (800c1d8 <pbuf_remove_header+0x9c>)
 800c18e:	f006 fa87 	bl	80126a0 <iprintf>
 800c192:	2301      	movs	r3, #1
 800c194:	e017      	b.n	800c1c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	685a      	ldr	r2, [r3, #4]
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	441a      	add	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	895a      	ldrh	r2, [r3, #10]
 800c1ac:	89fb      	ldrh	r3, [r7, #14]
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	891a      	ldrh	r2, [r3, #8]
 800c1ba:	89fb      	ldrh	r3, [r7, #14]
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	0801466c 	.word	0x0801466c
 800c1d4:	08014810 	.word	0x08014810
 800c1d8:	0801470c 	.word	0x0801470c
 800c1dc:	0801481c 	.word	0x0801481c

0800c1e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	807b      	strh	r3, [r7, #2]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c1f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	da08      	bge.n	800c20a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c1f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1fc:	425b      	negs	r3, r3
 800c1fe:	4619      	mov	r1, r3
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f7ff ff9b 	bl	800c13c <pbuf_remove_header>
 800c206:	4603      	mov	r3, r0
 800c208:	e007      	b.n	800c21a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c20a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c20e:	787a      	ldrb	r2, [r7, #1]
 800c210:	4619      	mov	r1, r3
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f7ff ff1a 	bl	800c04c <pbuf_add_header_impl>
 800c218:	4603      	mov	r3, r0
  }
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3708      	adds	r7, #8
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b082      	sub	sp, #8
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	460b      	mov	r3, r1
 800c22c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c22e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c232:	2201      	movs	r2, #1
 800c234:	4619      	mov	r1, r3
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f7ff ffd2 	bl	800c1e0 <pbuf_header_impl>
 800c23c:	4603      	mov	r3, r0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3708      	adds	r7, #8
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
	...

0800c248 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b088      	sub	sp, #32
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d10b      	bne.n	800c26e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d106      	bne.n	800c26a <pbuf_free+0x22>
 800c25c:	4b3b      	ldr	r3, [pc, #236]	; (800c34c <pbuf_free+0x104>)
 800c25e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c262:	493b      	ldr	r1, [pc, #236]	; (800c350 <pbuf_free+0x108>)
 800c264:	483b      	ldr	r0, [pc, #236]	; (800c354 <pbuf_free+0x10c>)
 800c266:	f006 fa1b 	bl	80126a0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c26a:	2300      	movs	r3, #0
 800c26c:	e069      	b.n	800c342 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c26e:	2300      	movs	r3, #0
 800c270:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c272:	e062      	b.n	800c33a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c274:	f000 fb7a 	bl	800c96c <sys_arch_protect>
 800c278:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	7b9b      	ldrb	r3, [r3, #14]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d106      	bne.n	800c290 <pbuf_free+0x48>
 800c282:	4b32      	ldr	r3, [pc, #200]	; (800c34c <pbuf_free+0x104>)
 800c284:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c288:	4933      	ldr	r1, [pc, #204]	; (800c358 <pbuf_free+0x110>)
 800c28a:	4832      	ldr	r0, [pc, #200]	; (800c354 <pbuf_free+0x10c>)
 800c28c:	f006 fa08 	bl	80126a0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	7b9b      	ldrb	r3, [r3, #14]
 800c294:	3b01      	subs	r3, #1
 800c296:	b2da      	uxtb	r2, r3
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	739a      	strb	r2, [r3, #14]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	7b9b      	ldrb	r3, [r3, #14]
 800c2a0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c2a2:	69b8      	ldr	r0, [r7, #24]
 800c2a4:	f000 fb70 	bl	800c988 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c2a8:	7dfb      	ldrb	r3, [r7, #23]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d143      	bne.n	800c336 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	7b1b      	ldrb	r3, [r3, #12]
 800c2b8:	f003 030f 	and.w	r3, r3, #15
 800c2bc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	7b5b      	ldrb	r3, [r3, #13]
 800c2c2:	f003 0302 	and.w	r3, r3, #2
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d011      	beq.n	800c2ee <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	691b      	ldr	r3, [r3, #16]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d106      	bne.n	800c2e4 <pbuf_free+0x9c>
 800c2d6:	4b1d      	ldr	r3, [pc, #116]	; (800c34c <pbuf_free+0x104>)
 800c2d8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c2dc:	491f      	ldr	r1, [pc, #124]	; (800c35c <pbuf_free+0x114>)
 800c2de:	481d      	ldr	r0, [pc, #116]	; (800c354 <pbuf_free+0x10c>)
 800c2e0:	f006 f9de 	bl	80126a0 <iprintf>
        pc->custom_free_function(p);
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	4798      	blx	r3
 800c2ec:	e01d      	b.n	800c32a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
 800c2f0:	2b02      	cmp	r3, #2
 800c2f2:	d104      	bne.n	800c2fe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c2f4:	6879      	ldr	r1, [r7, #4]
 800c2f6:	200c      	movs	r0, #12
 800c2f8:	f7ff f902 	bl	800b500 <memp_free>
 800c2fc:	e015      	b.n	800c32a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c2fe:	7bfb      	ldrb	r3, [r7, #15]
 800c300:	2b01      	cmp	r3, #1
 800c302:	d104      	bne.n	800c30e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c304:	6879      	ldr	r1, [r7, #4]
 800c306:	200b      	movs	r0, #11
 800c308:	f7ff f8fa 	bl	800b500 <memp_free>
 800c30c:	e00d      	b.n	800c32a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c30e:	7bfb      	ldrb	r3, [r7, #15]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d103      	bne.n	800c31c <pbuf_free+0xd4>
          mem_free(p);
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f7fe fd35 	bl	800ad84 <mem_free>
 800c31a:	e006      	b.n	800c32a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c31c:	4b0b      	ldr	r3, [pc, #44]	; (800c34c <pbuf_free+0x104>)
 800c31e:	f240 320f 	movw	r2, #783	; 0x30f
 800c322:	490f      	ldr	r1, [pc, #60]	; (800c360 <pbuf_free+0x118>)
 800c324:	480b      	ldr	r0, [pc, #44]	; (800c354 <pbuf_free+0x10c>)
 800c326:	f006 f9bb 	bl	80126a0 <iprintf>
        }
      }
      count++;
 800c32a:	7ffb      	ldrb	r3, [r7, #31]
 800c32c:	3301      	adds	r3, #1
 800c32e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	607b      	str	r3, [r7, #4]
 800c334:	e001      	b.n	800c33a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c336:	2300      	movs	r3, #0
 800c338:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d199      	bne.n	800c274 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c340:	7ffb      	ldrb	r3, [r7, #31]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3720      	adds	r7, #32
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	0801466c 	.word	0x0801466c
 800c350:	08014810 	.word	0x08014810
 800c354:	0801470c 	.word	0x0801470c
 800c358:	0801483c 	.word	0x0801483c
 800c35c:	08014854 	.word	0x08014854
 800c360:	08014878 	.word	0x08014878

0800c364 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c36c:	2300      	movs	r3, #0
 800c36e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c370:	e005      	b.n	800c37e <pbuf_clen+0x1a>
    ++len;
 800c372:	89fb      	ldrh	r3, [r7, #14]
 800c374:	3301      	adds	r3, #1
 800c376:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d1f6      	bne.n	800c372 <pbuf_clen+0xe>
  }
  return len;
 800c384:	89fb      	ldrh	r3, [r7, #14]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
	...

0800c394 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d016      	beq.n	800c3d0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c3a2:	f000 fae3 	bl	800c96c <sys_arch_protect>
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	7b9b      	ldrb	r3, [r3, #14]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	b2da      	uxtb	r2, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	739a      	strb	r2, [r3, #14]
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f000 fae7 	bl	800c988 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	7b9b      	ldrb	r3, [r3, #14]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d106      	bne.n	800c3d0 <pbuf_ref+0x3c>
 800c3c2:	4b05      	ldr	r3, [pc, #20]	; (800c3d8 <pbuf_ref+0x44>)
 800c3c4:	f240 3242 	movw	r2, #834	; 0x342
 800c3c8:	4904      	ldr	r1, [pc, #16]	; (800c3dc <pbuf_ref+0x48>)
 800c3ca:	4805      	ldr	r0, [pc, #20]	; (800c3e0 <pbuf_ref+0x4c>)
 800c3cc:	f006 f968 	bl	80126a0 <iprintf>
  }
}
 800c3d0:	bf00      	nop
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	0801466c 	.word	0x0801466c
 800c3dc:	0801488c 	.word	0x0801488c
 800c3e0:	0801470c 	.word	0x0801470c

0800c3e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d002      	beq.n	800c3fa <pbuf_cat+0x16>
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d107      	bne.n	800c40a <pbuf_cat+0x26>
 800c3fa:	4b20      	ldr	r3, [pc, #128]	; (800c47c <pbuf_cat+0x98>)
 800c3fc:	f240 3259 	movw	r2, #857	; 0x359
 800c400:	491f      	ldr	r1, [pc, #124]	; (800c480 <pbuf_cat+0x9c>)
 800c402:	4820      	ldr	r0, [pc, #128]	; (800c484 <pbuf_cat+0xa0>)
 800c404:	f006 f94c 	bl	80126a0 <iprintf>
 800c408:	e034      	b.n	800c474 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	60fb      	str	r3, [r7, #12]
 800c40e:	e00a      	b.n	800c426 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	891a      	ldrh	r2, [r3, #8]
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	891b      	ldrh	r3, [r3, #8]
 800c418:	4413      	add	r3, r2
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	60fb      	str	r3, [r7, #12]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d1f0      	bne.n	800c410 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	891a      	ldrh	r2, [r3, #8]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	895b      	ldrh	r3, [r3, #10]
 800c436:	429a      	cmp	r2, r3
 800c438:	d006      	beq.n	800c448 <pbuf_cat+0x64>
 800c43a:	4b10      	ldr	r3, [pc, #64]	; (800c47c <pbuf_cat+0x98>)
 800c43c:	f240 3262 	movw	r2, #866	; 0x362
 800c440:	4911      	ldr	r1, [pc, #68]	; (800c488 <pbuf_cat+0xa4>)
 800c442:	4810      	ldr	r0, [pc, #64]	; (800c484 <pbuf_cat+0xa0>)
 800c444:	f006 f92c 	bl	80126a0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d006      	beq.n	800c45e <pbuf_cat+0x7a>
 800c450:	4b0a      	ldr	r3, [pc, #40]	; (800c47c <pbuf_cat+0x98>)
 800c452:	f240 3263 	movw	r2, #867	; 0x363
 800c456:	490d      	ldr	r1, [pc, #52]	; (800c48c <pbuf_cat+0xa8>)
 800c458:	480a      	ldr	r0, [pc, #40]	; (800c484 <pbuf_cat+0xa0>)
 800c45a:	f006 f921 	bl	80126a0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	891a      	ldrh	r2, [r3, #8]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	891b      	ldrh	r3, [r3, #8]
 800c466:	4413      	add	r3, r2
 800c468:	b29a      	uxth	r2, r3
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	683a      	ldr	r2, [r7, #0]
 800c472:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	0801466c 	.word	0x0801466c
 800c480:	080148a0 	.word	0x080148a0
 800c484:	0801470c 	.word	0x0801470c
 800c488:	080148d8 	.word	0x080148d8
 800c48c:	08014908 	.word	0x08014908

0800c490 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c49a:	2300      	movs	r3, #0
 800c49c:	617b      	str	r3, [r7, #20]
 800c49e:	2300      	movs	r3, #0
 800c4a0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d008      	beq.n	800c4ba <pbuf_copy+0x2a>
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d005      	beq.n	800c4ba <pbuf_copy+0x2a>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	891a      	ldrh	r2, [r3, #8]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	891b      	ldrh	r3, [r3, #8]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d209      	bcs.n	800c4ce <pbuf_copy+0x3e>
 800c4ba:	4b57      	ldr	r3, [pc, #348]	; (800c618 <pbuf_copy+0x188>)
 800c4bc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c4c0:	4956      	ldr	r1, [pc, #344]	; (800c61c <pbuf_copy+0x18c>)
 800c4c2:	4857      	ldr	r0, [pc, #348]	; (800c620 <pbuf_copy+0x190>)
 800c4c4:	f006 f8ec 	bl	80126a0 <iprintf>
 800c4c8:	f06f 030f 	mvn.w	r3, #15
 800c4cc:	e09f      	b.n	800c60e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	895b      	ldrh	r3, [r3, #10]
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	1ad2      	subs	r2, r2, r3
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	895b      	ldrh	r3, [r3, #10]
 800c4dc:	4619      	mov	r1, r3
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	1acb      	subs	r3, r1, r3
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d306      	bcc.n	800c4f4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	895b      	ldrh	r3, [r3, #10]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	60fb      	str	r3, [r7, #12]
 800c4f2:	e005      	b.n	800c500 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	895b      	ldrh	r3, [r3, #10]
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	685a      	ldr	r2, [r3, #4]
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	18d0      	adds	r0, r2, r3
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	685a      	ldr	r2, [r3, #4]
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	4413      	add	r3, r2
 800c510:	68fa      	ldr	r2, [r7, #12]
 800c512:	4619      	mov	r1, r3
 800c514:	f006 f8ae 	bl	8012674 <memcpy>
    offset_to += len;
 800c518:	697a      	ldr	r2, [r7, #20]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	4413      	add	r3, r2
 800c51e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c520:	693a      	ldr	r2, [r7, #16]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	4413      	add	r3, r2
 800c526:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	895b      	ldrh	r3, [r3, #10]
 800c52c:	461a      	mov	r2, r3
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	4293      	cmp	r3, r2
 800c532:	d906      	bls.n	800c542 <pbuf_copy+0xb2>
 800c534:	4b38      	ldr	r3, [pc, #224]	; (800c618 <pbuf_copy+0x188>)
 800c536:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c53a:	493a      	ldr	r1, [pc, #232]	; (800c624 <pbuf_copy+0x194>)
 800c53c:	4838      	ldr	r0, [pc, #224]	; (800c620 <pbuf_copy+0x190>)
 800c53e:	f006 f8af 	bl	80126a0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	895b      	ldrh	r3, [r3, #10]
 800c546:	461a      	mov	r2, r3
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d906      	bls.n	800c55c <pbuf_copy+0xcc>
 800c54e:	4b32      	ldr	r3, [pc, #200]	; (800c618 <pbuf_copy+0x188>)
 800c550:	f240 32da 	movw	r2, #986	; 0x3da
 800c554:	4934      	ldr	r1, [pc, #208]	; (800c628 <pbuf_copy+0x198>)
 800c556:	4832      	ldr	r0, [pc, #200]	; (800c620 <pbuf_copy+0x190>)
 800c558:	f006 f8a2 	bl	80126a0 <iprintf>
    if (offset_from >= p_from->len) {
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	895b      	ldrh	r3, [r3, #10]
 800c560:	461a      	mov	r2, r3
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	4293      	cmp	r3, r2
 800c566:	d304      	bcc.n	800c572 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c568:	2300      	movs	r3, #0
 800c56a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	895b      	ldrh	r3, [r3, #10]
 800c576:	461a      	mov	r2, r3
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d114      	bne.n	800c5a8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c57e:	2300      	movs	r3, #0
 800c580:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10c      	bne.n	800c5a8 <pbuf_copy+0x118>
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d009      	beq.n	800c5a8 <pbuf_copy+0x118>
 800c594:	4b20      	ldr	r3, [pc, #128]	; (800c618 <pbuf_copy+0x188>)
 800c596:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c59a:	4924      	ldr	r1, [pc, #144]	; (800c62c <pbuf_copy+0x19c>)
 800c59c:	4820      	ldr	r0, [pc, #128]	; (800c620 <pbuf_copy+0x190>)
 800c59e:	f006 f87f 	bl	80126a0 <iprintf>
 800c5a2:	f06f 030f 	mvn.w	r3, #15
 800c5a6:	e032      	b.n	800c60e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d013      	beq.n	800c5d6 <pbuf_copy+0x146>
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	895a      	ldrh	r2, [r3, #10]
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	891b      	ldrh	r3, [r3, #8]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d10d      	bne.n	800c5d6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d009      	beq.n	800c5d6 <pbuf_copy+0x146>
 800c5c2:	4b15      	ldr	r3, [pc, #84]	; (800c618 <pbuf_copy+0x188>)
 800c5c4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c5c8:	4919      	ldr	r1, [pc, #100]	; (800c630 <pbuf_copy+0x1a0>)
 800c5ca:	4815      	ldr	r0, [pc, #84]	; (800c620 <pbuf_copy+0x190>)
 800c5cc:	f006 f868 	bl	80126a0 <iprintf>
 800c5d0:	f06f 0305 	mvn.w	r3, #5
 800c5d4:	e01b      	b.n	800c60e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d013      	beq.n	800c604 <pbuf_copy+0x174>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	895a      	ldrh	r2, [r3, #10]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	891b      	ldrh	r3, [r3, #8]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d10d      	bne.n	800c604 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d009      	beq.n	800c604 <pbuf_copy+0x174>
 800c5f0:	4b09      	ldr	r3, [pc, #36]	; (800c618 <pbuf_copy+0x188>)
 800c5f2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c5f6:	490e      	ldr	r1, [pc, #56]	; (800c630 <pbuf_copy+0x1a0>)
 800c5f8:	4809      	ldr	r0, [pc, #36]	; (800c620 <pbuf_copy+0x190>)
 800c5fa:	f006 f851 	bl	80126a0 <iprintf>
 800c5fe:	f06f 0305 	mvn.w	r3, #5
 800c602:	e004      	b.n	800c60e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	f47f af61 	bne.w	800c4ce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3718      	adds	r7, #24
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	0801466c 	.word	0x0801466c
 800c61c:	08014954 	.word	0x08014954
 800c620:	0801470c 	.word	0x0801470c
 800c624:	08014984 	.word	0x08014984
 800c628:	0801499c 	.word	0x0801499c
 800c62c:	080149b8 	.word	0x080149b8
 800c630:	080149c8 	.word	0x080149c8

0800c634 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b088      	sub	sp, #32
 800c638:	af00      	add	r7, sp, #0
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	4611      	mov	r1, r2
 800c640:	461a      	mov	r2, r3
 800c642:	460b      	mov	r3, r1
 800c644:	80fb      	strh	r3, [r7, #6]
 800c646:	4613      	mov	r3, r2
 800c648:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c64a:	2300      	movs	r3, #0
 800c64c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c64e:	2300      	movs	r3, #0
 800c650:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d108      	bne.n	800c66a <pbuf_copy_partial+0x36>
 800c658:	4b2b      	ldr	r3, [pc, #172]	; (800c708 <pbuf_copy_partial+0xd4>)
 800c65a:	f240 420a 	movw	r2, #1034	; 0x40a
 800c65e:	492b      	ldr	r1, [pc, #172]	; (800c70c <pbuf_copy_partial+0xd8>)
 800c660:	482b      	ldr	r0, [pc, #172]	; (800c710 <pbuf_copy_partial+0xdc>)
 800c662:	f006 f81d 	bl	80126a0 <iprintf>
 800c666:	2300      	movs	r3, #0
 800c668:	e04a      	b.n	800c700 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d108      	bne.n	800c682 <pbuf_copy_partial+0x4e>
 800c670:	4b25      	ldr	r3, [pc, #148]	; (800c708 <pbuf_copy_partial+0xd4>)
 800c672:	f240 420b 	movw	r2, #1035	; 0x40b
 800c676:	4927      	ldr	r1, [pc, #156]	; (800c714 <pbuf_copy_partial+0xe0>)
 800c678:	4825      	ldr	r0, [pc, #148]	; (800c710 <pbuf_copy_partial+0xdc>)
 800c67a:	f006 f811 	bl	80126a0 <iprintf>
 800c67e:	2300      	movs	r3, #0
 800c680:	e03e      	b.n	800c700 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	61fb      	str	r3, [r7, #28]
 800c686:	e034      	b.n	800c6f2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c688:	88bb      	ldrh	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d00a      	beq.n	800c6a4 <pbuf_copy_partial+0x70>
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	895b      	ldrh	r3, [r3, #10]
 800c692:	88ba      	ldrh	r2, [r7, #4]
 800c694:	429a      	cmp	r2, r3
 800c696:	d305      	bcc.n	800c6a4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	895b      	ldrh	r3, [r3, #10]
 800c69c:	88ba      	ldrh	r2, [r7, #4]
 800c69e:	1ad3      	subs	r3, r2, r3
 800c6a0:	80bb      	strh	r3, [r7, #4]
 800c6a2:	e023      	b.n	800c6ec <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	895a      	ldrh	r2, [r3, #10]
 800c6a8:	88bb      	ldrh	r3, [r7, #4]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c6ae:	8b3a      	ldrh	r2, [r7, #24]
 800c6b0:	88fb      	ldrh	r3, [r7, #6]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d901      	bls.n	800c6ba <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c6b6:	88fb      	ldrh	r3, [r7, #6]
 800c6b8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c6ba:	8b7b      	ldrh	r3, [r7, #26]
 800c6bc:	68ba      	ldr	r2, [r7, #8]
 800c6be:	18d0      	adds	r0, r2, r3
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	685a      	ldr	r2, [r3, #4]
 800c6c4:	88bb      	ldrh	r3, [r7, #4]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	8b3a      	ldrh	r2, [r7, #24]
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	f005 ffd2 	bl	8012674 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c6d0:	8afa      	ldrh	r2, [r7, #22]
 800c6d2:	8b3b      	ldrh	r3, [r7, #24]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c6d8:	8b7a      	ldrh	r2, [r7, #26]
 800c6da:	8b3b      	ldrh	r3, [r7, #24]
 800c6dc:	4413      	add	r3, r2
 800c6de:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c6e0:	88fa      	ldrh	r2, [r7, #6]
 800c6e2:	8b3b      	ldrh	r3, [r7, #24]
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	61fb      	str	r3, [r7, #28]
 800c6f2:	88fb      	ldrh	r3, [r7, #6]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d002      	beq.n	800c6fe <pbuf_copy_partial+0xca>
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d1c4      	bne.n	800c688 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c6fe:	8afb      	ldrh	r3, [r7, #22]
}
 800c700:	4618      	mov	r0, r3
 800c702:	3720      	adds	r7, #32
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	0801466c 	.word	0x0801466c
 800c70c:	080149f4 	.word	0x080149f4
 800c710:	0801470c 	.word	0x0801470c
 800c714:	08014a14 	.word	0x08014a14

0800c718 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	4603      	mov	r3, r0
 800c720:	603a      	str	r2, [r7, #0]
 800c722:	71fb      	strb	r3, [r7, #7]
 800c724:	460b      	mov	r3, r1
 800c726:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	8919      	ldrh	r1, [r3, #8]
 800c72c:	88ba      	ldrh	r2, [r7, #4]
 800c72e:	79fb      	ldrb	r3, [r7, #7]
 800c730:	4618      	mov	r0, r3
 800c732:	f7ff faa5 	bl	800bc80 <pbuf_alloc>
 800c736:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d101      	bne.n	800c742 <pbuf_clone+0x2a>
    return NULL;
 800c73e:	2300      	movs	r3, #0
 800c740:	e011      	b.n	800c766 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c742:	6839      	ldr	r1, [r7, #0]
 800c744:	68f8      	ldr	r0, [r7, #12]
 800c746:	f7ff fea3 	bl	800c490 <pbuf_copy>
 800c74a:	4603      	mov	r3, r0
 800c74c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c74e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d006      	beq.n	800c764 <pbuf_clone+0x4c>
 800c756:	4b06      	ldr	r3, [pc, #24]	; (800c770 <pbuf_clone+0x58>)
 800c758:	f240 5224 	movw	r2, #1316	; 0x524
 800c75c:	4905      	ldr	r1, [pc, #20]	; (800c774 <pbuf_clone+0x5c>)
 800c75e:	4806      	ldr	r0, [pc, #24]	; (800c778 <pbuf_clone+0x60>)
 800c760:	f005 ff9e 	bl	80126a0 <iprintf>
  return q;
 800c764:	68fb      	ldr	r3, [r7, #12]
}
 800c766:	4618      	mov	r0, r3
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	0801466c 	.word	0x0801466c
 800c774:	08014b20 	.word	0x08014b20
 800c778:	0801470c 	.word	0x0801470c

0800c77c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b086      	sub	sp, #24
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	60bb      	str	r3, [r7, #8]
 800c78a:	2304      	movs	r3, #4
 800c78c:	60fb      	str	r3, [r7, #12]
 800c78e:	2300      	movs	r3, #0
 800c790:	613b      	str	r3, [r7, #16]
 800c792:	2300      	movs	r3, #0
 800c794:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800c796:	f107 0308 	add.w	r3, r7, #8
 800c79a:	2100      	movs	r1, #0
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7f9 f897 	bl	80058d0 <osMessageCreate>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d102      	bne.n	800c7b6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 800c7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b4:	e000      	b.n	800c7b8 <sys_mbox_new+0x3c>

  return ERR_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3718      	adds	r7, #24
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7f9 f8a4 	bl	8005920 <osMessagePut>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d102      	bne.n	800c7e4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	73fb      	strb	r3, [r7, #15]
 800c7e2:	e001      	b.n	800c7e8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 800c7e4:	23ff      	movs	r3, #255	; 0xff
 800c7e6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 800c7e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b08c      	sub	sp, #48	; 0x30
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	61f8      	str	r0, [r7, #28]
 800c7fc:	61b9      	str	r1, [r7, #24]
 800c7fe:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800c800:	f7f8 fed6 	bl	80055b0 <osKernelSysTick>
 800c804:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d017      	beq.n	800c83c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	6819      	ldr	r1, [r3, #0]
 800c810:	f107 0320 	add.w	r3, r7, #32
 800c814:	697a      	ldr	r2, [r7, #20]
 800c816:	4618      	mov	r0, r3
 800c818:	f7f9 f8c2 	bl	80059a0 <osMessageGet>

    if(event.status == osEventMessage)
 800c81c:	6a3b      	ldr	r3, [r7, #32]
 800c81e:	2b10      	cmp	r3, #16
 800c820:	d109      	bne.n	800c836 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 800c822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c824:	461a      	mov	r2, r3
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 800c82a:	f7f8 fec1 	bl	80055b0 <osKernelSysTick>
 800c82e:	4602      	mov	r2, r0
 800c830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c832:	1ad3      	subs	r3, r2, r3
 800c834:	e019      	b.n	800c86a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800c836:	f04f 33ff 	mov.w	r3, #4294967295
 800c83a:	e016      	b.n	800c86a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	6819      	ldr	r1, [r3, #0]
 800c840:	463b      	mov	r3, r7
 800c842:	f04f 32ff 	mov.w	r2, #4294967295
 800c846:	4618      	mov	r0, r3
 800c848:	f7f9 f8aa 	bl	80059a0 <osMessageGet>
 800c84c:	f107 0320 	add.w	r3, r7, #32
 800c850:	463a      	mov	r2, r7
 800c852:	ca07      	ldmia	r2, {r0, r1, r2}
 800c854:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800c858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85a:	461a      	mov	r2, r3
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 800c860:	f7f8 fea6 	bl	80055b0 <osKernelSysTick>
 800c864:	4602      	mov	r2, r0
 800c866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c868:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3730      	adds	r7, #48	; 0x30
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 800c872:	b480      	push	{r7}
 800c874:	b083      	sub	sp, #12
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d101      	bne.n	800c886 <sys_mbox_valid+0x14>
    return 0;
 800c882:	2300      	movs	r3, #0
 800c884:	e000      	b.n	800c888 <sys_mbox_valid+0x16>
  else
    return 1;
 800c886:	2301      	movs	r3, #1
}
 800c888:	4618      	mov	r0, r3
 800c88a:	370c      	adds	r7, #12
 800c88c:	46bd      	mov	sp, r7
 800c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c892:	4770      	bx	lr

0800c894 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800c898:	4803      	ldr	r0, [pc, #12]	; (800c8a8 <sys_init+0x14>)
 800c89a:	f7f8 fef9 	bl	8005690 <osMutexCreate>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	4a02      	ldr	r2, [pc, #8]	; (800c8ac <sys_init+0x18>)
 800c8a2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800c8a4:	bf00      	nop
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	08016758 	.word	0x08016758
 800c8ac:	2400741c 	.word	0x2400741c

0800c8b0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	60bb      	str	r3, [r7, #8]
 800c8bc:	2300      	movs	r3, #0
 800c8be:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800c8c0:	f107 0308 	add.w	r3, r7, #8
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7f8 fee3 	bl	8005690 <osMutexCreate>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d102      	bne.n	800c8de <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800c8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c8dc:	e000      	b.n	800c8e0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800c8de:	2300      	movs	r3, #0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3710      	adds	r7, #16
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f04f 31ff 	mov.w	r1, #4294967295
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7f8 fee1 	bl	80056c0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 800c8fe:	bf00      	nop
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b082      	sub	sp, #8
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4618      	mov	r0, r3
 800c914:	f7f8 ff22 	bl	800575c <osMutexRelease>
}
 800c918:	bf00      	nop
 800c91a:	3708      	adds	r7, #8
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b08c      	sub	sp, #48	; 0x30
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
 800c92c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800c92e:	f107 0314 	add.w	r3, r7, #20
 800c932:	2200      	movs	r2, #0
 800c934:	601a      	str	r2, [r3, #0]
 800c936:	605a      	str	r2, [r3, #4]
 800c938:	609a      	str	r2, [r3, #8]
 800c93a:	60da      	str	r2, [r3, #12]
 800c93c:	611a      	str	r2, [r3, #16]
 800c93e:	615a      	str	r2, [r3, #20]
 800c940:	619a      	str	r2, [r3, #24]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	617b      	str	r3, [r7, #20]
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	61bb      	str	r3, [r7, #24]
 800c94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94c:	b21b      	sxth	r3, r3
 800c94e:	83bb      	strh	r3, [r7, #28]
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 800c954:	f107 0314 	add.w	r3, r7, #20
 800c958:	6879      	ldr	r1, [r7, #4]
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7f8 fe38 	bl	80055d0 <osThreadCreate>
 800c960:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800c962:	4618      	mov	r0, r3
 800c964:	3730      	adds	r7, #48	; 0x30
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
	...

0800c96c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800c970:	4b04      	ldr	r3, [pc, #16]	; (800c984 <sys_arch_protect+0x18>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f04f 31ff 	mov.w	r1, #4294967295
 800c978:	4618      	mov	r0, r3
 800c97a:	f7f8 fea1 	bl	80056c0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 800c97e:	2301      	movs	r3, #1
}
 800c980:	4618      	mov	r0, r3
 800c982:	bd80      	pop	{r7, pc}
 800c984:	2400741c 	.word	0x2400741c

0800c988 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800c990:	4b04      	ldr	r3, [pc, #16]	; (800c9a4 <sys_arch_unprotect+0x1c>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4618      	mov	r0, r3
 800c996:	f7f8 fee1 	bl	800575c <osMutexRelease>
}
 800c99a:	bf00      	nop
 800c99c:	3708      	adds	r7, #8
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	2400741c 	.word	0x2400741c

0800c9a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c9ac:	f005 fe90 	bl	80126d0 <rand>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	4b01      	ldr	r3, [pc, #4]	; (800c9c8 <tcp_init+0x20>)
 800c9c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c9c4:	bf00      	nop
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	24000028 	.word	0x24000028

0800c9cc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	7d1b      	ldrb	r3, [r3, #20]
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d105      	bne.n	800c9e8 <tcp_free+0x1c>
 800c9dc:	4b06      	ldr	r3, [pc, #24]	; (800c9f8 <tcp_free+0x2c>)
 800c9de:	22d4      	movs	r2, #212	; 0xd4
 800c9e0:	4906      	ldr	r1, [pc, #24]	; (800c9fc <tcp_free+0x30>)
 800c9e2:	4807      	ldr	r0, [pc, #28]	; (800ca00 <tcp_free+0x34>)
 800c9e4:	f005 fe5c 	bl	80126a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c9e8:	6879      	ldr	r1, [r7, #4]
 800c9ea:	2001      	movs	r0, #1
 800c9ec:	f7fe fd88 	bl	800b500 <memp_free>
}
 800c9f0:	bf00      	nop
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	08014bac 	.word	0x08014bac
 800c9fc:	08014c1c 	.word	0x08014c1c
 800ca00:	08014c30 	.word	0x08014c30

0800ca04 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	7d1b      	ldrb	r3, [r3, #20]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d105      	bne.n	800ca20 <tcp_free_listen+0x1c>
 800ca14:	4b06      	ldr	r3, [pc, #24]	; (800ca30 <tcp_free_listen+0x2c>)
 800ca16:	22df      	movs	r2, #223	; 0xdf
 800ca18:	4906      	ldr	r1, [pc, #24]	; (800ca34 <tcp_free_listen+0x30>)
 800ca1a:	4807      	ldr	r0, [pc, #28]	; (800ca38 <tcp_free_listen+0x34>)
 800ca1c:	f005 fe40 	bl	80126a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ca20:	6879      	ldr	r1, [r7, #4]
 800ca22:	2002      	movs	r0, #2
 800ca24:	f7fe fd6c 	bl	800b500 <memp_free>
}
 800ca28:	bf00      	nop
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	08014bac 	.word	0x08014bac
 800ca34:	08014c58 	.word	0x08014c58
 800ca38:	08014c30 	.word	0x08014c30

0800ca3c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ca40:	f000 fea2 	bl	800d788 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ca44:	4b07      	ldr	r3, [pc, #28]	; (800ca64 <tcp_tmr+0x28>)
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	b2da      	uxtb	r2, r3
 800ca4c:	4b05      	ldr	r3, [pc, #20]	; (800ca64 <tcp_tmr+0x28>)
 800ca4e:	701a      	strb	r2, [r3, #0]
 800ca50:	4b04      	ldr	r3, [pc, #16]	; (800ca64 <tcp_tmr+0x28>)
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	f003 0301 	and.w	r3, r3, #1
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d001      	beq.n	800ca60 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ca5c:	f000 fb54 	bl	800d108 <tcp_slowtmr>
  }
}
 800ca60:	bf00      	nop
 800ca62:	bd80      	pop	{r7, pc}
 800ca64:	24007435 	.word	0x24007435

0800ca68 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d105      	bne.n	800ca84 <tcp_remove_listener+0x1c>
 800ca78:	4b0d      	ldr	r3, [pc, #52]	; (800cab0 <tcp_remove_listener+0x48>)
 800ca7a:	22ff      	movs	r2, #255	; 0xff
 800ca7c:	490d      	ldr	r1, [pc, #52]	; (800cab4 <tcp_remove_listener+0x4c>)
 800ca7e:	480e      	ldr	r0, [pc, #56]	; (800cab8 <tcp_remove_listener+0x50>)
 800ca80:	f005 fe0e 	bl	80126a0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	60fb      	str	r3, [r7, #12]
 800ca88:	e00a      	b.n	800caa0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca8e:	683a      	ldr	r2, [r7, #0]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d102      	bne.n	800ca9a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	60fb      	str	r3, [r7, #12]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d1f1      	bne.n	800ca8a <tcp_remove_listener+0x22>
    }
  }
}
 800caa6:	bf00      	nop
 800caa8:	bf00      	nop
 800caaa:	3710      	adds	r7, #16
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	08014bac 	.word	0x08014bac
 800cab4:	08014c74 	.word	0x08014c74
 800cab8:	08014c30 	.word	0x08014c30

0800cabc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d106      	bne.n	800cad8 <tcp_listen_closed+0x1c>
 800caca:	4b14      	ldr	r3, [pc, #80]	; (800cb1c <tcp_listen_closed+0x60>)
 800cacc:	f240 1211 	movw	r2, #273	; 0x111
 800cad0:	4913      	ldr	r1, [pc, #76]	; (800cb20 <tcp_listen_closed+0x64>)
 800cad2:	4814      	ldr	r0, [pc, #80]	; (800cb24 <tcp_listen_closed+0x68>)
 800cad4:	f005 fde4 	bl	80126a0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	7d1b      	ldrb	r3, [r3, #20]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d006      	beq.n	800caee <tcp_listen_closed+0x32>
 800cae0:	4b0e      	ldr	r3, [pc, #56]	; (800cb1c <tcp_listen_closed+0x60>)
 800cae2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800cae6:	4910      	ldr	r1, [pc, #64]	; (800cb28 <tcp_listen_closed+0x6c>)
 800cae8:	480e      	ldr	r0, [pc, #56]	; (800cb24 <tcp_listen_closed+0x68>)
 800caea:	f005 fdd9 	bl	80126a0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800caee:	2301      	movs	r3, #1
 800caf0:	60fb      	str	r3, [r7, #12]
 800caf2:	e00b      	b.n	800cb0c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800caf4:	4a0d      	ldr	r2, [pc, #52]	; (800cb2c <tcp_listen_closed+0x70>)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	6879      	ldr	r1, [r7, #4]
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7ff ffb1 	bl	800ca68 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	60fb      	str	r3, [r7, #12]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2b03      	cmp	r3, #3
 800cb10:	d9f0      	bls.n	800caf4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cb12:	bf00      	nop
 800cb14:	bf00      	nop
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	08014bac 	.word	0x08014bac
 800cb20:	08014c9c 	.word	0x08014c9c
 800cb24:	08014c30 	.word	0x08014c30
 800cb28:	08014ca8 	.word	0x08014ca8
 800cb2c:	08016778 	.word	0x08016778

0800cb30 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cb30:	b5b0      	push	{r4, r5, r7, lr}
 800cb32:	b088      	sub	sp, #32
 800cb34:	af04      	add	r7, sp, #16
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	460b      	mov	r3, r1
 800cb3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d106      	bne.n	800cb50 <tcp_close_shutdown+0x20>
 800cb42:	4b63      	ldr	r3, [pc, #396]	; (800ccd0 <tcp_close_shutdown+0x1a0>)
 800cb44:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800cb48:	4962      	ldr	r1, [pc, #392]	; (800ccd4 <tcp_close_shutdown+0x1a4>)
 800cb4a:	4863      	ldr	r0, [pc, #396]	; (800ccd8 <tcp_close_shutdown+0x1a8>)
 800cb4c:	f005 fda8 	bl	80126a0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cb50:	78fb      	ldrb	r3, [r7, #3]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d066      	beq.n	800cc24 <tcp_close_shutdown+0xf4>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	7d1b      	ldrb	r3, [r3, #20]
 800cb5a:	2b04      	cmp	r3, #4
 800cb5c:	d003      	beq.n	800cb66 <tcp_close_shutdown+0x36>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	7d1b      	ldrb	r3, [r3, #20]
 800cb62:	2b07      	cmp	r3, #7
 800cb64:	d15e      	bne.n	800cc24 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d104      	bne.n	800cb78 <tcp_close_shutdown+0x48>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb72:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cb76:	d055      	beq.n	800cc24 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	8b5b      	ldrh	r3, [r3, #26]
 800cb7c:	f003 0310 	and.w	r3, r3, #16
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d106      	bne.n	800cb92 <tcp_close_shutdown+0x62>
 800cb84:	4b52      	ldr	r3, [pc, #328]	; (800ccd0 <tcp_close_shutdown+0x1a0>)
 800cb86:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800cb8a:	4954      	ldr	r1, [pc, #336]	; (800ccdc <tcp_close_shutdown+0x1ac>)
 800cb8c:	4852      	ldr	r0, [pc, #328]	; (800ccd8 <tcp_close_shutdown+0x1a8>)
 800cb8e:	f005 fd87 	bl	80126a0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cb9a:	687d      	ldr	r5, [r7, #4]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	3304      	adds	r3, #4
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	8ad2      	ldrh	r2, [r2, #22]
 800cba4:	6879      	ldr	r1, [r7, #4]
 800cba6:	8b09      	ldrh	r1, [r1, #24]
 800cba8:	9102      	str	r1, [sp, #8]
 800cbaa:	9201      	str	r2, [sp, #4]
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	462b      	mov	r3, r5
 800cbb0:	4622      	mov	r2, r4
 800cbb2:	4601      	mov	r1, r0
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f004 fe91 	bl	80118dc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f001 f8c6 	bl	800dd4c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cbc0:	4b47      	ldr	r3, [pc, #284]	; (800cce0 <tcp_close_shutdown+0x1b0>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d105      	bne.n	800cbd6 <tcp_close_shutdown+0xa6>
 800cbca:	4b45      	ldr	r3, [pc, #276]	; (800cce0 <tcp_close_shutdown+0x1b0>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	4a43      	ldr	r2, [pc, #268]	; (800cce0 <tcp_close_shutdown+0x1b0>)
 800cbd2:	6013      	str	r3, [r2, #0]
 800cbd4:	e013      	b.n	800cbfe <tcp_close_shutdown+0xce>
 800cbd6:	4b42      	ldr	r3, [pc, #264]	; (800cce0 <tcp_close_shutdown+0x1b0>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	60fb      	str	r3, [r7, #12]
 800cbdc:	e00c      	b.n	800cbf8 <tcp_close_shutdown+0xc8>
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d104      	bne.n	800cbf2 <tcp_close_shutdown+0xc2>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	68da      	ldr	r2, [r3, #12]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	60da      	str	r2, [r3, #12]
 800cbf0:	e005      	b.n	800cbfe <tcp_close_shutdown+0xce>
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	68db      	ldr	r3, [r3, #12]
 800cbf6:	60fb      	str	r3, [r7, #12]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1ef      	bne.n	800cbde <tcp_close_shutdown+0xae>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	60da      	str	r2, [r3, #12]
 800cc04:	4b37      	ldr	r3, [pc, #220]	; (800cce4 <tcp_close_shutdown+0x1b4>)
 800cc06:	2201      	movs	r2, #1
 800cc08:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cc0a:	4b37      	ldr	r3, [pc, #220]	; (800cce8 <tcp_close_shutdown+0x1b8>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d102      	bne.n	800cc1a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cc14:	f003 fd5e 	bl	80106d4 <tcp_trigger_input_pcb_close>
 800cc18:	e002      	b.n	800cc20 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff fed6 	bl	800c9cc <tcp_free>
      }
      return ERR_OK;
 800cc20:	2300      	movs	r3, #0
 800cc22:	e050      	b.n	800ccc6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	7d1b      	ldrb	r3, [r3, #20]
 800cc28:	2b02      	cmp	r3, #2
 800cc2a:	d03b      	beq.n	800cca4 <tcp_close_shutdown+0x174>
 800cc2c:	2b02      	cmp	r3, #2
 800cc2e:	dc44      	bgt.n	800ccba <tcp_close_shutdown+0x18a>
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d002      	beq.n	800cc3a <tcp_close_shutdown+0x10a>
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d02a      	beq.n	800cc8e <tcp_close_shutdown+0x15e>
 800cc38:	e03f      	b.n	800ccba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	8adb      	ldrh	r3, [r3, #22]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d021      	beq.n	800cc86 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cc42:	4b2a      	ldr	r3, [pc, #168]	; (800ccec <tcp_close_shutdown+0x1bc>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d105      	bne.n	800cc58 <tcp_close_shutdown+0x128>
 800cc4c:	4b27      	ldr	r3, [pc, #156]	; (800ccec <tcp_close_shutdown+0x1bc>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	4a26      	ldr	r2, [pc, #152]	; (800ccec <tcp_close_shutdown+0x1bc>)
 800cc54:	6013      	str	r3, [r2, #0]
 800cc56:	e013      	b.n	800cc80 <tcp_close_shutdown+0x150>
 800cc58:	4b24      	ldr	r3, [pc, #144]	; (800ccec <tcp_close_shutdown+0x1bc>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	60bb      	str	r3, [r7, #8]
 800cc5e:	e00c      	b.n	800cc7a <tcp_close_shutdown+0x14a>
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d104      	bne.n	800cc74 <tcp_close_shutdown+0x144>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	68da      	ldr	r2, [r3, #12]
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	60da      	str	r2, [r3, #12]
 800cc72:	e005      	b.n	800cc80 <tcp_close_shutdown+0x150>
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	60bb      	str	r3, [r7, #8]
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d1ef      	bne.n	800cc60 <tcp_close_shutdown+0x130>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f7ff fea0 	bl	800c9cc <tcp_free>
      break;
 800cc8c:	e01a      	b.n	800ccc4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff ff14 	bl	800cabc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cc94:	6879      	ldr	r1, [r7, #4]
 800cc96:	4816      	ldr	r0, [pc, #88]	; (800ccf0 <tcp_close_shutdown+0x1c0>)
 800cc98:	f001 f8a8 	bl	800ddec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f7ff feb1 	bl	800ca04 <tcp_free_listen>
      break;
 800cca2:	e00f      	b.n	800ccc4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cca4:	6879      	ldr	r1, [r7, #4]
 800cca6:	480e      	ldr	r0, [pc, #56]	; (800cce0 <tcp_close_shutdown+0x1b0>)
 800cca8:	f001 f8a0 	bl	800ddec <tcp_pcb_remove>
 800ccac:	4b0d      	ldr	r3, [pc, #52]	; (800cce4 <tcp_close_shutdown+0x1b4>)
 800ccae:	2201      	movs	r2, #1
 800ccb0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f7ff fe8a 	bl	800c9cc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ccb8:	e004      	b.n	800ccc4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 f81a 	bl	800ccf4 <tcp_close_shutdown_fin>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	e000      	b.n	800ccc6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3710      	adds	r7, #16
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bdb0      	pop	{r4, r5, r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	08014bac 	.word	0x08014bac
 800ccd4:	08014cc0 	.word	0x08014cc0
 800ccd8:	08014c30 	.word	0x08014c30
 800ccdc:	08014ce0 	.word	0x08014ce0
 800cce0:	2400742c 	.word	0x2400742c
 800cce4:	24007434 	.word	0x24007434
 800cce8:	2400746c 	.word	0x2400746c
 800ccec:	24007424 	.word	0x24007424
 800ccf0:	24007428 	.word	0x24007428

0800ccf4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d106      	bne.n	800cd10 <tcp_close_shutdown_fin+0x1c>
 800cd02:	4b2e      	ldr	r3, [pc, #184]	; (800cdbc <tcp_close_shutdown_fin+0xc8>)
 800cd04:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cd08:	492d      	ldr	r1, [pc, #180]	; (800cdc0 <tcp_close_shutdown_fin+0xcc>)
 800cd0a:	482e      	ldr	r0, [pc, #184]	; (800cdc4 <tcp_close_shutdown_fin+0xd0>)
 800cd0c:	f005 fcc8 	bl	80126a0 <iprintf>

  switch (pcb->state) {
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	7d1b      	ldrb	r3, [r3, #20]
 800cd14:	2b07      	cmp	r3, #7
 800cd16:	d020      	beq.n	800cd5a <tcp_close_shutdown_fin+0x66>
 800cd18:	2b07      	cmp	r3, #7
 800cd1a:	dc2b      	bgt.n	800cd74 <tcp_close_shutdown_fin+0x80>
 800cd1c:	2b03      	cmp	r3, #3
 800cd1e:	d002      	beq.n	800cd26 <tcp_close_shutdown_fin+0x32>
 800cd20:	2b04      	cmp	r3, #4
 800cd22:	d00d      	beq.n	800cd40 <tcp_close_shutdown_fin+0x4c>
 800cd24:	e026      	b.n	800cd74 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f003 fee6 	bl	8010af8 <tcp_send_fin>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cd30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d11f      	bne.n	800cd78 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2205      	movs	r2, #5
 800cd3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cd3e:	e01b      	b.n	800cd78 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f003 fed9 	bl	8010af8 <tcp_send_fin>
 800cd46:	4603      	mov	r3, r0
 800cd48:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cd4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d114      	bne.n	800cd7c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2205      	movs	r2, #5
 800cd56:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cd58:	e010      	b.n	800cd7c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f003 fecc 	bl	8010af8 <tcp_send_fin>
 800cd60:	4603      	mov	r3, r0
 800cd62:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cd64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d109      	bne.n	800cd80 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2209      	movs	r2, #9
 800cd70:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cd72:	e005      	b.n	800cd80 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cd74:	2300      	movs	r3, #0
 800cd76:	e01c      	b.n	800cdb2 <tcp_close_shutdown_fin+0xbe>
      break;
 800cd78:	bf00      	nop
 800cd7a:	e002      	b.n	800cd82 <tcp_close_shutdown_fin+0x8e>
      break;
 800cd7c:	bf00      	nop
 800cd7e:	e000      	b.n	800cd82 <tcp_close_shutdown_fin+0x8e>
      break;
 800cd80:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cd82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d103      	bne.n	800cd92 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f003 fff2 	bl	8010d74 <tcp_output>
 800cd90:	e00d      	b.n	800cdae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cd92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd9a:	d108      	bne.n	800cdae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	8b5b      	ldrh	r3, [r3, #26]
 800cda0:	f043 0308 	orr.w	r3, r3, #8
 800cda4:	b29a      	uxth	r2, r3
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	e001      	b.n	800cdb2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cdae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	08014bac 	.word	0x08014bac
 800cdc0:	08014c9c 	.word	0x08014c9c
 800cdc4:	08014c30 	.word	0x08014c30

0800cdc8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d109      	bne.n	800cdea <tcp_close+0x22>
 800cdd6:	4b0f      	ldr	r3, [pc, #60]	; (800ce14 <tcp_close+0x4c>)
 800cdd8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cddc:	490e      	ldr	r1, [pc, #56]	; (800ce18 <tcp_close+0x50>)
 800cdde:	480f      	ldr	r0, [pc, #60]	; (800ce1c <tcp_close+0x54>)
 800cde0:	f005 fc5e 	bl	80126a0 <iprintf>
 800cde4:	f06f 030f 	mvn.w	r3, #15
 800cde8:	e00f      	b.n	800ce0a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	7d1b      	ldrb	r3, [r3, #20]
 800cdee:	2b01      	cmp	r3, #1
 800cdf0:	d006      	beq.n	800ce00 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	8b5b      	ldrh	r3, [r3, #26]
 800cdf6:	f043 0310 	orr.w	r3, r3, #16
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ce00:	2101      	movs	r1, #1
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7ff fe94 	bl	800cb30 <tcp_close_shutdown>
 800ce08:	4603      	mov	r3, r0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3708      	adds	r7, #8
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	08014bac 	.word	0x08014bac
 800ce18:	08014cfc 	.word	0x08014cfc
 800ce1c:	08014c30 	.word	0x08014c30

0800ce20 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b08e      	sub	sp, #56	; 0x38
 800ce24:	af04      	add	r7, sp, #16
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d107      	bne.n	800ce40 <tcp_abandon+0x20>
 800ce30:	4b52      	ldr	r3, [pc, #328]	; (800cf7c <tcp_abandon+0x15c>)
 800ce32:	f240 223d 	movw	r2, #573	; 0x23d
 800ce36:	4952      	ldr	r1, [pc, #328]	; (800cf80 <tcp_abandon+0x160>)
 800ce38:	4852      	ldr	r0, [pc, #328]	; (800cf84 <tcp_abandon+0x164>)
 800ce3a:	f005 fc31 	bl	80126a0 <iprintf>
 800ce3e:	e099      	b.n	800cf74 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	7d1b      	ldrb	r3, [r3, #20]
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d106      	bne.n	800ce56 <tcp_abandon+0x36>
 800ce48:	4b4c      	ldr	r3, [pc, #304]	; (800cf7c <tcp_abandon+0x15c>)
 800ce4a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ce4e:	494e      	ldr	r1, [pc, #312]	; (800cf88 <tcp_abandon+0x168>)
 800ce50:	484c      	ldr	r0, [pc, #304]	; (800cf84 <tcp_abandon+0x164>)
 800ce52:	f005 fc25 	bl	80126a0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	7d1b      	ldrb	r3, [r3, #20]
 800ce5a:	2b0a      	cmp	r3, #10
 800ce5c:	d107      	bne.n	800ce6e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ce5e:	6879      	ldr	r1, [r7, #4]
 800ce60:	484a      	ldr	r0, [pc, #296]	; (800cf8c <tcp_abandon+0x16c>)
 800ce62:	f000 ffc3 	bl	800ddec <tcp_pcb_remove>
    tcp_free(pcb);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f7ff fdb0 	bl	800c9cc <tcp_free>
 800ce6c:	e082      	b.n	800cf74 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce7a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce80:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce88:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	691b      	ldr	r3, [r3, #16]
 800ce8e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	7d1b      	ldrb	r3, [r3, #20]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d126      	bne.n	800cee6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	8adb      	ldrh	r3, [r3, #22]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d02e      	beq.n	800cefe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cea0:	4b3b      	ldr	r3, [pc, #236]	; (800cf90 <tcp_abandon+0x170>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d105      	bne.n	800ceb6 <tcp_abandon+0x96>
 800ceaa:	4b39      	ldr	r3, [pc, #228]	; (800cf90 <tcp_abandon+0x170>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	4a37      	ldr	r2, [pc, #220]	; (800cf90 <tcp_abandon+0x170>)
 800ceb2:	6013      	str	r3, [r2, #0]
 800ceb4:	e013      	b.n	800cede <tcp_abandon+0xbe>
 800ceb6:	4b36      	ldr	r3, [pc, #216]	; (800cf90 <tcp_abandon+0x170>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	61fb      	str	r3, [r7, #28]
 800cebc:	e00c      	b.n	800ced8 <tcp_abandon+0xb8>
 800cebe:	69fb      	ldr	r3, [r7, #28]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d104      	bne.n	800ced2 <tcp_abandon+0xb2>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	68da      	ldr	r2, [r3, #12]
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	60da      	str	r2, [r3, #12]
 800ced0:	e005      	b.n	800cede <tcp_abandon+0xbe>
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	68db      	ldr	r3, [r3, #12]
 800ced6:	61fb      	str	r3, [r7, #28]
 800ced8:	69fb      	ldr	r3, [r7, #28]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1ef      	bne.n	800cebe <tcp_abandon+0x9e>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	60da      	str	r2, [r3, #12]
 800cee4:	e00b      	b.n	800cefe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	8adb      	ldrh	r3, [r3, #22]
 800ceee:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cef0:	6879      	ldr	r1, [r7, #4]
 800cef2:	4828      	ldr	r0, [pc, #160]	; (800cf94 <tcp_abandon+0x174>)
 800cef4:	f000 ff7a 	bl	800ddec <tcp_pcb_remove>
 800cef8:	4b27      	ldr	r3, [pc, #156]	; (800cf98 <tcp_abandon+0x178>)
 800cefa:	2201      	movs	r2, #1
 800cefc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d004      	beq.n	800cf10 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f000 fd1c 	bl	800d948 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d004      	beq.n	800cf22 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f000 fd13 	bl	800d948 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d004      	beq.n	800cf34 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f000 fd0a 	bl	800d948 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d00e      	beq.n	800cf58 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cf3a:	6879      	ldr	r1, [r7, #4]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	3304      	adds	r3, #4
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	8b12      	ldrh	r2, [r2, #24]
 800cf44:	9202      	str	r2, [sp, #8]
 800cf46:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cf48:	9201      	str	r2, [sp, #4]
 800cf4a:	9300      	str	r3, [sp, #0]
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	697a      	ldr	r2, [r7, #20]
 800cf50:	69b9      	ldr	r1, [r7, #24]
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f004 fcc2 	bl	80118dc <tcp_rst>
    }
    last_state = pcb->state;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	7d1b      	ldrb	r3, [r3, #20]
 800cf5c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f7ff fd34 	bl	800c9cc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d004      	beq.n	800cf74 <tcp_abandon+0x154>
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	f06f 010c 	mvn.w	r1, #12
 800cf70:	68f8      	ldr	r0, [r7, #12]
 800cf72:	4798      	blx	r3
  }
}
 800cf74:	3728      	adds	r7, #40	; 0x28
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	08014bac 	.word	0x08014bac
 800cf80:	08014d30 	.word	0x08014d30
 800cf84:	08014c30 	.word	0x08014c30
 800cf88:	08014d4c 	.word	0x08014d4c
 800cf8c:	24007430 	.word	0x24007430
 800cf90:	24007424 	.word	0x24007424
 800cf94:	2400742c 	.word	0x2400742c
 800cf98:	24007434 	.word	0x24007434

0800cf9c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cfa4:	2101      	movs	r1, #1
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f7ff ff3a 	bl	800ce20 <tcp_abandon>
}
 800cfac:	bf00      	nop
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d106      	bne.n	800cfd0 <tcp_update_rcv_ann_wnd+0x1c>
 800cfc2:	4b25      	ldr	r3, [pc, #148]	; (800d058 <tcp_update_rcv_ann_wnd+0xa4>)
 800cfc4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cfc8:	4924      	ldr	r1, [pc, #144]	; (800d05c <tcp_update_rcv_ann_wnd+0xa8>)
 800cfca:	4825      	ldr	r0, [pc, #148]	; (800d060 <tcp_update_rcv_ann_wnd+0xac>)
 800cfcc:	f005 fb68 	bl	80126a0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cfd8:	4413      	add	r3, r2
 800cfda:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cfe4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cfe8:	bf28      	it	cs
 800cfea:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cfee:	b292      	uxth	r2, r2
 800cff0:	4413      	add	r3, r2
 800cff2:	68fa      	ldr	r2, [r7, #12]
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	db08      	blt.n	800d00c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d006:	68fa      	ldr	r2, [r7, #12]
 800d008:	1ad3      	subs	r3, r2, r3
 800d00a:	e020      	b.n	800d04e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d014:	1ad3      	subs	r3, r2, r3
 800d016:	2b00      	cmp	r3, #0
 800d018:	dd03      	ble.n	800d022 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d020:	e014      	b.n	800d04c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02a:	1ad3      	subs	r3, r2, r3
 800d02c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d034:	d306      	bcc.n	800d044 <tcp_update_rcv_ann_wnd+0x90>
 800d036:	4b08      	ldr	r3, [pc, #32]	; (800d058 <tcp_update_rcv_ann_wnd+0xa4>)
 800d038:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d03c:	4909      	ldr	r1, [pc, #36]	; (800d064 <tcp_update_rcv_ann_wnd+0xb0>)
 800d03e:	4808      	ldr	r0, [pc, #32]	; (800d060 <tcp_update_rcv_ann_wnd+0xac>)
 800d040:	f005 fb2e 	bl	80126a0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	b29a      	uxth	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d04c:	2300      	movs	r3, #0
  }
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3710      	adds	r7, #16
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	08014bac 	.word	0x08014bac
 800d05c:	08014e48 	.word	0x08014e48
 800d060:	08014c30 	.word	0x08014c30
 800d064:	08014e6c 	.word	0x08014e6c

0800d068 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	460b      	mov	r3, r1
 800d072:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d107      	bne.n	800d08a <tcp_recved+0x22>
 800d07a:	4b1f      	ldr	r3, [pc, #124]	; (800d0f8 <tcp_recved+0x90>)
 800d07c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d080:	491e      	ldr	r1, [pc, #120]	; (800d0fc <tcp_recved+0x94>)
 800d082:	481f      	ldr	r0, [pc, #124]	; (800d100 <tcp_recved+0x98>)
 800d084:	f005 fb0c 	bl	80126a0 <iprintf>
 800d088:	e032      	b.n	800d0f0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	7d1b      	ldrb	r3, [r3, #20]
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d106      	bne.n	800d0a0 <tcp_recved+0x38>
 800d092:	4b19      	ldr	r3, [pc, #100]	; (800d0f8 <tcp_recved+0x90>)
 800d094:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d098:	491a      	ldr	r1, [pc, #104]	; (800d104 <tcp_recved+0x9c>)
 800d09a:	4819      	ldr	r0, [pc, #100]	; (800d100 <tcp_recved+0x98>)
 800d09c:	f005 fb00 	bl	80126a0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d0a4:	887b      	ldrh	r3, [r7, #2]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d0aa:	89fb      	ldrh	r3, [r7, #14]
 800d0ac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d0b0:	d804      	bhi.n	800d0bc <tcp_recved+0x54>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0b6:	89fa      	ldrh	r2, [r7, #14]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d204      	bcs.n	800d0c6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d0c2:	851a      	strh	r2, [r3, #40]	; 0x28
 800d0c4:	e002      	b.n	800d0cc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	89fa      	ldrh	r2, [r7, #14]
 800d0ca:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f7ff ff71 	bl	800cfb4 <tcp_update_rcv_ann_wnd>
 800d0d2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d0da:	d309      	bcc.n	800d0f0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	8b5b      	ldrh	r3, [r3, #26]
 800d0e0:	f043 0302 	orr.w	r3, r3, #2
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f003 fe42 	bl	8010d74 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	08014bac 	.word	0x08014bac
 800d0fc:	08014e88 	.word	0x08014e88
 800d100:	08014c30 	.word	0x08014c30
 800d104:	08014ea0 	.word	0x08014ea0

0800d108 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d108:	b5b0      	push	{r4, r5, r7, lr}
 800d10a:	b090      	sub	sp, #64	; 0x40
 800d10c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d10e:	2300      	movs	r3, #0
 800d110:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d114:	4b94      	ldr	r3, [pc, #592]	; (800d368 <tcp_slowtmr+0x260>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	3301      	adds	r3, #1
 800d11a:	4a93      	ldr	r2, [pc, #588]	; (800d368 <tcp_slowtmr+0x260>)
 800d11c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d11e:	4b93      	ldr	r3, [pc, #588]	; (800d36c <tcp_slowtmr+0x264>)
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	3301      	adds	r3, #1
 800d124:	b2da      	uxtb	r2, r3
 800d126:	4b91      	ldr	r3, [pc, #580]	; (800d36c <tcp_slowtmr+0x264>)
 800d128:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d12a:	2300      	movs	r3, #0
 800d12c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d12e:	4b90      	ldr	r3, [pc, #576]	; (800d370 <tcp_slowtmr+0x268>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d134:	e29d      	b.n	800d672 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d138:	7d1b      	ldrb	r3, [r3, #20]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d106      	bne.n	800d14c <tcp_slowtmr+0x44>
 800d13e:	4b8d      	ldr	r3, [pc, #564]	; (800d374 <tcp_slowtmr+0x26c>)
 800d140:	f240 42be 	movw	r2, #1214	; 0x4be
 800d144:	498c      	ldr	r1, [pc, #560]	; (800d378 <tcp_slowtmr+0x270>)
 800d146:	488d      	ldr	r0, [pc, #564]	; (800d37c <tcp_slowtmr+0x274>)
 800d148:	f005 faaa 	bl	80126a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14e:	7d1b      	ldrb	r3, [r3, #20]
 800d150:	2b01      	cmp	r3, #1
 800d152:	d106      	bne.n	800d162 <tcp_slowtmr+0x5a>
 800d154:	4b87      	ldr	r3, [pc, #540]	; (800d374 <tcp_slowtmr+0x26c>)
 800d156:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d15a:	4989      	ldr	r1, [pc, #548]	; (800d380 <tcp_slowtmr+0x278>)
 800d15c:	4887      	ldr	r0, [pc, #540]	; (800d37c <tcp_slowtmr+0x274>)
 800d15e:	f005 fa9f 	bl	80126a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d164:	7d1b      	ldrb	r3, [r3, #20]
 800d166:	2b0a      	cmp	r3, #10
 800d168:	d106      	bne.n	800d178 <tcp_slowtmr+0x70>
 800d16a:	4b82      	ldr	r3, [pc, #520]	; (800d374 <tcp_slowtmr+0x26c>)
 800d16c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d170:	4984      	ldr	r1, [pc, #528]	; (800d384 <tcp_slowtmr+0x27c>)
 800d172:	4882      	ldr	r0, [pc, #520]	; (800d37c <tcp_slowtmr+0x274>)
 800d174:	f005 fa94 	bl	80126a0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17a:	7f9a      	ldrb	r2, [r3, #30]
 800d17c:	4b7b      	ldr	r3, [pc, #492]	; (800d36c <tcp_slowtmr+0x264>)
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	429a      	cmp	r2, r3
 800d182:	d105      	bne.n	800d190 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d186:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d18e:	e270      	b.n	800d672 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d190:	4b76      	ldr	r3, [pc, #472]	; (800d36c <tcp_slowtmr+0x264>)
 800d192:	781a      	ldrb	r2, [r3, #0]
 800d194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d196:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d198:	2300      	movs	r3, #0
 800d19a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a6:	7d1b      	ldrb	r3, [r3, #20]
 800d1a8:	2b02      	cmp	r3, #2
 800d1aa:	d10a      	bne.n	800d1c2 <tcp_slowtmr+0xba>
 800d1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1b2:	2b05      	cmp	r3, #5
 800d1b4:	d905      	bls.n	800d1c2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d1b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1c0:	e11e      	b.n	800d400 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1c8:	2b0b      	cmp	r3, #11
 800d1ca:	d905      	bls.n	800d1d8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1d6:	e113      	b.n	800d400 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d075      	beq.n	800d2ce <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d006      	beq.n	800d1f8 <tcp_slowtmr+0xf0>
 800d1ea:	4b62      	ldr	r3, [pc, #392]	; (800d374 <tcp_slowtmr+0x26c>)
 800d1ec:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d1f0:	4965      	ldr	r1, [pc, #404]	; (800d388 <tcp_slowtmr+0x280>)
 800d1f2:	4862      	ldr	r0, [pc, #392]	; (800d37c <tcp_slowtmr+0x274>)
 800d1f4:	f005 fa54 	bl	80126a0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d106      	bne.n	800d20e <tcp_slowtmr+0x106>
 800d200:	4b5c      	ldr	r3, [pc, #368]	; (800d374 <tcp_slowtmr+0x26c>)
 800d202:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d206:	4961      	ldr	r1, [pc, #388]	; (800d38c <tcp_slowtmr+0x284>)
 800d208:	485c      	ldr	r0, [pc, #368]	; (800d37c <tcp_slowtmr+0x274>)
 800d20a:	f005 fa49 	bl	80126a0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d210:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d214:	2b0b      	cmp	r3, #11
 800d216:	d905      	bls.n	800d224 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d21c:	3301      	adds	r3, #1
 800d21e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d222:	e0ed      	b.n	800d400 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d226:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d22a:	3b01      	subs	r3, #1
 800d22c:	4a58      	ldr	r2, [pc, #352]	; (800d390 <tcp_slowtmr+0x288>)
 800d22e:	5cd3      	ldrb	r3, [r2, r3]
 800d230:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d234:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d238:	7c7a      	ldrb	r2, [r7, #17]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d907      	bls.n	800d24e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d240:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d244:	3301      	adds	r3, #1
 800d246:	b2da      	uxtb	r2, r3
 800d248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d250:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d254:	7c7a      	ldrb	r2, [r7, #17]
 800d256:	429a      	cmp	r2, r3
 800d258:	f200 80d2 	bhi.w	800d400 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d25c:	2301      	movs	r3, #1
 800d25e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d262:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d266:	2b00      	cmp	r3, #0
 800d268:	d108      	bne.n	800d27c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d26a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d26c:	f004 fc2a 	bl	8011ac4 <tcp_zero_window_probe>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d014      	beq.n	800d2a0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d276:	2300      	movs	r3, #0
 800d278:	623b      	str	r3, [r7, #32]
 800d27a:	e011      	b.n	800d2a0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d282:	4619      	mov	r1, r3
 800d284:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d286:	f003 faef 	bl	8010868 <tcp_split_unsent_seg>
 800d28a:	4603      	mov	r3, r0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d107      	bne.n	800d2a0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d292:	f003 fd6f 	bl	8010d74 <tcp_output>
 800d296:	4603      	mov	r3, r0
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d101      	bne.n	800d2a0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d29c:	2300      	movs	r3, #0
 800d29e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d2a0:	6a3b      	ldr	r3, [r7, #32]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f000 80ac 	beq.w	800d400 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d2b6:	2b06      	cmp	r3, #6
 800d2b8:	f200 80a2 	bhi.w	800d400 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	b2da      	uxtb	r2, r3
 800d2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d2cc:	e098      	b.n	800d400 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	db0f      	blt.n	800d2f8 <tcp_slowtmr+0x1f0>
 800d2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d2de:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d008      	beq.n	800d2f8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	b21a      	sxth	r2, r3
 800d2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d300:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d304:	429a      	cmp	r2, r3
 800d306:	db7b      	blt.n	800d400 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d308:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d30a:	f004 f825 	bl	8011358 <tcp_rexmit_rto_prepare>
 800d30e:	4603      	mov	r3, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	d007      	beq.n	800d324 <tcp_slowtmr+0x21c>
 800d314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d171      	bne.n	800d400 <tcp_slowtmr+0x2f8>
 800d31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d320:	2b00      	cmp	r3, #0
 800d322:	d06d      	beq.n	800d400 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d326:	7d1b      	ldrb	r3, [r3, #20]
 800d328:	2b02      	cmp	r3, #2
 800d32a:	d03a      	beq.n	800d3a2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d332:	2b0c      	cmp	r3, #12
 800d334:	bf28      	it	cs
 800d336:	230c      	movcs	r3, #12
 800d338:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d340:	10db      	asrs	r3, r3, #3
 800d342:	b21b      	sxth	r3, r3
 800d344:	461a      	mov	r2, r3
 800d346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d348:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d34c:	4413      	add	r3, r2
 800d34e:	7efa      	ldrb	r2, [r7, #27]
 800d350:	4910      	ldr	r1, [pc, #64]	; (800d394 <tcp_slowtmr+0x28c>)
 800d352:	5c8a      	ldrb	r2, [r1, r2]
 800d354:	4093      	lsls	r3, r2
 800d356:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d35e:	4293      	cmp	r3, r2
 800d360:	dc1a      	bgt.n	800d398 <tcp_slowtmr+0x290>
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	b21a      	sxth	r2, r3
 800d366:	e019      	b.n	800d39c <tcp_slowtmr+0x294>
 800d368:	24007420 	.word	0x24007420
 800d36c:	24007436 	.word	0x24007436
 800d370:	2400742c 	.word	0x2400742c
 800d374:	08014bac 	.word	0x08014bac
 800d378:	08014f30 	.word	0x08014f30
 800d37c:	08014c30 	.word	0x08014c30
 800d380:	08014f5c 	.word	0x08014f5c
 800d384:	08014f88 	.word	0x08014f88
 800d388:	08014fb8 	.word	0x08014fb8
 800d38c:	08014fec 	.word	0x08014fec
 800d390:	08016770 	.word	0x08016770
 800d394:	08016760 	.word	0x08016760
 800d398:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	bf28      	it	cs
 800d3b8:	4613      	movcs	r3, r2
 800d3ba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d3bc:	8a7b      	ldrh	r3, [r7, #18]
 800d3be:	085b      	lsrs	r3, r3, #1
 800d3c0:	b29a      	uxth	r2, r3
 800d3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3d2:	005b      	lsls	r3, r3, #1
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d206      	bcs.n	800d3e8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3de:	005b      	lsls	r3, r3, #1
 800d3e0:	b29a      	uxth	r2, r3
 800d3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ea:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d3fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3fc:	f004 f81c 	bl	8011438 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d402:	7d1b      	ldrb	r3, [r3, #20]
 800d404:	2b06      	cmp	r3, #6
 800d406:	d111      	bne.n	800d42c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40a:	8b5b      	ldrh	r3, [r3, #26]
 800d40c:	f003 0310 	and.w	r3, r3, #16
 800d410:	2b00      	cmp	r3, #0
 800d412:	d00b      	beq.n	800d42c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d414:	4b9c      	ldr	r3, [pc, #624]	; (800d688 <tcp_slowtmr+0x580>)
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41a:	6a1b      	ldr	r3, [r3, #32]
 800d41c:	1ad3      	subs	r3, r2, r3
 800d41e:	2b28      	cmp	r3, #40	; 0x28
 800d420:	d904      	bls.n	800d42c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d426:	3301      	adds	r3, #1
 800d428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42e:	7a5b      	ldrb	r3, [r3, #9]
 800d430:	f003 0308 	and.w	r3, r3, #8
 800d434:	2b00      	cmp	r3, #0
 800d436:	d04a      	beq.n	800d4ce <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d43c:	2b04      	cmp	r3, #4
 800d43e:	d003      	beq.n	800d448 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d442:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d444:	2b07      	cmp	r3, #7
 800d446:	d142      	bne.n	800d4ce <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d448:	4b8f      	ldr	r3, [pc, #572]	; (800d688 <tcp_slowtmr+0x580>)
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44e:	6a1b      	ldr	r3, [r3, #32]
 800d450:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d454:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d458:	4b8c      	ldr	r3, [pc, #560]	; (800d68c <tcp_slowtmr+0x584>)
 800d45a:	440b      	add	r3, r1
 800d45c:	498c      	ldr	r1, [pc, #560]	; (800d690 <tcp_slowtmr+0x588>)
 800d45e:	fba1 1303 	umull	r1, r3, r1, r3
 800d462:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d464:	429a      	cmp	r2, r3
 800d466:	d90a      	bls.n	800d47e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d46c:	3301      	adds	r3, #1
 800d46e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d472:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d476:	3301      	adds	r3, #1
 800d478:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d47c:	e027      	b.n	800d4ce <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d47e:	4b82      	ldr	r3, [pc, #520]	; (800d688 <tcp_slowtmr+0x580>)
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d484:	6a1b      	ldr	r3, [r3, #32]
 800d486:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d490:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d494:	4618      	mov	r0, r3
 800d496:	4b7f      	ldr	r3, [pc, #508]	; (800d694 <tcp_slowtmr+0x58c>)
 800d498:	fb00 f303 	mul.w	r3, r0, r3
 800d49c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d49e:	497c      	ldr	r1, [pc, #496]	; (800d690 <tcp_slowtmr+0x588>)
 800d4a0:	fba1 1303 	umull	r1, r3, r1, r3
 800d4a4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d911      	bls.n	800d4ce <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d4aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4ac:	f004 faca 	bl	8011a44 <tcp_keepalive>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d4b6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d107      	bne.n	800d4ce <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	b2da      	uxtb	r2, r3
 800d4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ca:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d011      	beq.n	800d4fa <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d4d6:	4b6c      	ldr	r3, [pc, #432]	; (800d688 <tcp_slowtmr+0x580>)
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4dc:	6a1b      	ldr	r3, [r3, #32]
 800d4de:	1ad2      	subs	r2, r2, r3
 800d4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	440b      	add	r3, r1
 800d4ee:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d302      	bcc.n	800d4fa <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d4f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4f6:	f000 fddd 	bl	800e0b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fc:	7d1b      	ldrb	r3, [r3, #20]
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d10b      	bne.n	800d51a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d502:	4b61      	ldr	r3, [pc, #388]	; (800d688 <tcp_slowtmr+0x580>)
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	2b28      	cmp	r3, #40	; 0x28
 800d50e:	d904      	bls.n	800d51a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d514:	3301      	adds	r3, #1
 800d516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51c:	7d1b      	ldrb	r3, [r3, #20]
 800d51e:	2b09      	cmp	r3, #9
 800d520:	d10b      	bne.n	800d53a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d522:	4b59      	ldr	r3, [pc, #356]	; (800d688 <tcp_slowtmr+0x580>)
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d528:	6a1b      	ldr	r3, [r3, #32]
 800d52a:	1ad3      	subs	r3, r2, r3
 800d52c:	2bf0      	cmp	r3, #240	; 0xf0
 800d52e:	d904      	bls.n	800d53a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d534:	3301      	adds	r3, #1
 800d536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d53a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d060      	beq.n	800d604 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d548:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d54a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d54c:	f000 fbfe 	bl	800dd4c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d552:	2b00      	cmp	r3, #0
 800d554:	d010      	beq.n	800d578 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d556:	4b50      	ldr	r3, [pc, #320]	; (800d698 <tcp_slowtmr+0x590>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d106      	bne.n	800d56e <tcp_slowtmr+0x466>
 800d560:	4b4e      	ldr	r3, [pc, #312]	; (800d69c <tcp_slowtmr+0x594>)
 800d562:	f240 526d 	movw	r2, #1389	; 0x56d
 800d566:	494e      	ldr	r1, [pc, #312]	; (800d6a0 <tcp_slowtmr+0x598>)
 800d568:	484e      	ldr	r0, [pc, #312]	; (800d6a4 <tcp_slowtmr+0x59c>)
 800d56a:	f005 f899 	bl	80126a0 <iprintf>
        prev->next = pcb->next;
 800d56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d570:	68da      	ldr	r2, [r3, #12]
 800d572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d574:	60da      	str	r2, [r3, #12]
 800d576:	e00f      	b.n	800d598 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d578:	4b47      	ldr	r3, [pc, #284]	; (800d698 <tcp_slowtmr+0x590>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d57e:	429a      	cmp	r2, r3
 800d580:	d006      	beq.n	800d590 <tcp_slowtmr+0x488>
 800d582:	4b46      	ldr	r3, [pc, #280]	; (800d69c <tcp_slowtmr+0x594>)
 800d584:	f240 5271 	movw	r2, #1393	; 0x571
 800d588:	4947      	ldr	r1, [pc, #284]	; (800d6a8 <tcp_slowtmr+0x5a0>)
 800d58a:	4846      	ldr	r0, [pc, #280]	; (800d6a4 <tcp_slowtmr+0x59c>)
 800d58c:	f005 f888 	bl	80126a0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d592:	68db      	ldr	r3, [r3, #12]
 800d594:	4a40      	ldr	r2, [pc, #256]	; (800d698 <tcp_slowtmr+0x590>)
 800d596:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d598:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d013      	beq.n	800d5c8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d5a8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5b0:	8ad2      	ldrh	r2, [r2, #22]
 800d5b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5b4:	8b09      	ldrh	r1, [r1, #24]
 800d5b6:	9102      	str	r1, [sp, #8]
 800d5b8:	9201      	str	r2, [sp, #4]
 800d5ba:	9300      	str	r3, [sp, #0]
 800d5bc:	462b      	mov	r3, r5
 800d5be:	4622      	mov	r2, r4
 800d5c0:	4601      	mov	r1, r0
 800d5c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5c4:	f004 f98a 	bl	80118dc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ca:	691b      	ldr	r3, [r3, #16]
 800d5cc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d0:	7d1b      	ldrb	r3, [r3, #20]
 800d5d2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d5de:	6838      	ldr	r0, [r7, #0]
 800d5e0:	f7ff f9f4 	bl	800c9cc <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d5e4:	4b31      	ldr	r3, [pc, #196]	; (800d6ac <tcp_slowtmr+0x5a4>)
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d004      	beq.n	800d5fa <tcp_slowtmr+0x4f2>
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f06f 010c 	mvn.w	r1, #12
 800d5f6:	68b8      	ldr	r0, [r7, #8]
 800d5f8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d5fa:	4b2c      	ldr	r3, [pc, #176]	; (800d6ac <tcp_slowtmr+0x5a4>)
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d037      	beq.n	800d672 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d602:	e592      	b.n	800d12a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d606:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d610:	7f1b      	ldrb	r3, [r3, #28]
 800d612:	3301      	adds	r3, #1
 800d614:	b2da      	uxtb	r2, r3
 800d616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d618:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61c:	7f1a      	ldrb	r2, [r3, #28]
 800d61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d620:	7f5b      	ldrb	r3, [r3, #29]
 800d622:	429a      	cmp	r2, r3
 800d624:	d325      	bcc.n	800d672 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d628:	2200      	movs	r2, #0
 800d62a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d62c:	4b1f      	ldr	r3, [pc, #124]	; (800d6ac <tcp_slowtmr+0x5a4>)
 800d62e:	2200      	movs	r2, #0
 800d630:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d00b      	beq.n	800d654 <tcp_slowtmr+0x54c>
 800d63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d644:	6912      	ldr	r2, [r2, #16]
 800d646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d648:	4610      	mov	r0, r2
 800d64a:	4798      	blx	r3
 800d64c:	4603      	mov	r3, r0
 800d64e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d652:	e002      	b.n	800d65a <tcp_slowtmr+0x552>
 800d654:	2300      	movs	r3, #0
 800d656:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d65a:	4b14      	ldr	r3, [pc, #80]	; (800d6ac <tcp_slowtmr+0x5a4>)
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d000      	beq.n	800d664 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d662:	e562      	b.n	800d12a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d664:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d102      	bne.n	800d672 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d66c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d66e:	f003 fb81 	bl	8010d74 <tcp_output>
  while (pcb != NULL) {
 800d672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d674:	2b00      	cmp	r3, #0
 800d676:	f47f ad5e 	bne.w	800d136 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d67a:	2300      	movs	r3, #0
 800d67c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d67e:	4b0c      	ldr	r3, [pc, #48]	; (800d6b0 <tcp_slowtmr+0x5a8>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d684:	e069      	b.n	800d75a <tcp_slowtmr+0x652>
 800d686:	bf00      	nop
 800d688:	24007420 	.word	0x24007420
 800d68c:	000a4cb8 	.word	0x000a4cb8
 800d690:	10624dd3 	.word	0x10624dd3
 800d694:	000124f8 	.word	0x000124f8
 800d698:	2400742c 	.word	0x2400742c
 800d69c:	08014bac 	.word	0x08014bac
 800d6a0:	08015024 	.word	0x08015024
 800d6a4:	08014c30 	.word	0x08014c30
 800d6a8:	08015050 	.word	0x08015050
 800d6ac:	24007434 	.word	0x24007434
 800d6b0:	24007430 	.word	0x24007430
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b6:	7d1b      	ldrb	r3, [r3, #20]
 800d6b8:	2b0a      	cmp	r3, #10
 800d6ba:	d006      	beq.n	800d6ca <tcp_slowtmr+0x5c2>
 800d6bc:	4b2b      	ldr	r3, [pc, #172]	; (800d76c <tcp_slowtmr+0x664>)
 800d6be:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d6c2:	492b      	ldr	r1, [pc, #172]	; (800d770 <tcp_slowtmr+0x668>)
 800d6c4:	482b      	ldr	r0, [pc, #172]	; (800d774 <tcp_slowtmr+0x66c>)
 800d6c6:	f004 ffeb 	bl	80126a0 <iprintf>
    pcb_remove = 0;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d6d0:	4b29      	ldr	r3, [pc, #164]	; (800d778 <tcp_slowtmr+0x670>)
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d6:	6a1b      	ldr	r3, [r3, #32]
 800d6d8:	1ad3      	subs	r3, r2, r3
 800d6da:	2bf0      	cmp	r3, #240	; 0xf0
 800d6dc:	d904      	bls.n	800d6e8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d6de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d6e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d02f      	beq.n	800d750 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d6f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6f2:	f000 fb2b 	bl	800dd4c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d010      	beq.n	800d71e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d6fc:	4b1f      	ldr	r3, [pc, #124]	; (800d77c <tcp_slowtmr+0x674>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d702:	429a      	cmp	r2, r3
 800d704:	d106      	bne.n	800d714 <tcp_slowtmr+0x60c>
 800d706:	4b19      	ldr	r3, [pc, #100]	; (800d76c <tcp_slowtmr+0x664>)
 800d708:	f240 52af 	movw	r2, #1455	; 0x5af
 800d70c:	491c      	ldr	r1, [pc, #112]	; (800d780 <tcp_slowtmr+0x678>)
 800d70e:	4819      	ldr	r0, [pc, #100]	; (800d774 <tcp_slowtmr+0x66c>)
 800d710:	f004 ffc6 	bl	80126a0 <iprintf>
        prev->next = pcb->next;
 800d714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d716:	68da      	ldr	r2, [r3, #12]
 800d718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71a:	60da      	str	r2, [r3, #12]
 800d71c:	e00f      	b.n	800d73e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d71e:	4b17      	ldr	r3, [pc, #92]	; (800d77c <tcp_slowtmr+0x674>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d724:	429a      	cmp	r2, r3
 800d726:	d006      	beq.n	800d736 <tcp_slowtmr+0x62e>
 800d728:	4b10      	ldr	r3, [pc, #64]	; (800d76c <tcp_slowtmr+0x664>)
 800d72a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d72e:	4915      	ldr	r1, [pc, #84]	; (800d784 <tcp_slowtmr+0x67c>)
 800d730:	4810      	ldr	r0, [pc, #64]	; (800d774 <tcp_slowtmr+0x66c>)
 800d732:	f004 ffb5 	bl	80126a0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d738:	68db      	ldr	r3, [r3, #12]
 800d73a:	4a10      	ldr	r2, [pc, #64]	; (800d77c <tcp_slowtmr+0x674>)
 800d73c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d740:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d748:	69f8      	ldr	r0, [r7, #28]
 800d74a:	f7ff f93f 	bl	800c9cc <tcp_free>
 800d74e:	e004      	b.n	800d75a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d752:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d756:	68db      	ldr	r3, [r3, #12]
 800d758:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d1a9      	bne.n	800d6b4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d760:	bf00      	nop
 800d762:	bf00      	nop
 800d764:	3730      	adds	r7, #48	; 0x30
 800d766:	46bd      	mov	sp, r7
 800d768:	bdb0      	pop	{r4, r5, r7, pc}
 800d76a:	bf00      	nop
 800d76c:	08014bac 	.word	0x08014bac
 800d770:	0801507c 	.word	0x0801507c
 800d774:	08014c30 	.word	0x08014c30
 800d778:	24007420 	.word	0x24007420
 800d77c:	24007430 	.word	0x24007430
 800d780:	080150ac 	.word	0x080150ac
 800d784:	080150d4 	.word	0x080150d4

0800d788 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d78e:	4b2d      	ldr	r3, [pc, #180]	; (800d844 <tcp_fasttmr+0xbc>)
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	3301      	adds	r3, #1
 800d794:	b2da      	uxtb	r2, r3
 800d796:	4b2b      	ldr	r3, [pc, #172]	; (800d844 <tcp_fasttmr+0xbc>)
 800d798:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d79a:	4b2b      	ldr	r3, [pc, #172]	; (800d848 <tcp_fasttmr+0xc0>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d7a0:	e048      	b.n	800d834 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	7f9a      	ldrb	r2, [r3, #30]
 800d7a6:	4b27      	ldr	r3, [pc, #156]	; (800d844 <tcp_fasttmr+0xbc>)
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d03f      	beq.n	800d82e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d7ae:	4b25      	ldr	r3, [pc, #148]	; (800d844 <tcp_fasttmr+0xbc>)
 800d7b0:	781a      	ldrb	r2, [r3, #0]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	8b5b      	ldrh	r3, [r3, #26]
 800d7ba:	f003 0301 	and.w	r3, r3, #1
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d010      	beq.n	800d7e4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	8b5b      	ldrh	r3, [r3, #26]
 800d7c6:	f043 0302 	orr.w	r3, r3, #2
 800d7ca:	b29a      	uxth	r2, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f003 facf 	bl	8010d74 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	8b5b      	ldrh	r3, [r3, #26]
 800d7da:	f023 0303 	bic.w	r3, r3, #3
 800d7de:	b29a      	uxth	r2, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	8b5b      	ldrh	r3, [r3, #26]
 800d7e8:	f003 0308 	and.w	r3, r3, #8
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d009      	beq.n	800d804 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	8b5b      	ldrh	r3, [r3, #26]
 800d7f4:	f023 0308 	bic.w	r3, r3, #8
 800d7f8:	b29a      	uxth	r2, r3
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f7ff fa78 	bl	800ccf4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	68db      	ldr	r3, [r3, #12]
 800d808:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00a      	beq.n	800d828 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d812:	4b0e      	ldr	r3, [pc, #56]	; (800d84c <tcp_fasttmr+0xc4>)
 800d814:	2200      	movs	r2, #0
 800d816:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 f819 	bl	800d850 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d81e:	4b0b      	ldr	r3, [pc, #44]	; (800d84c <tcp_fasttmr+0xc4>)
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d000      	beq.n	800d828 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d826:	e7b8      	b.n	800d79a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	607b      	str	r3, [r7, #4]
 800d82c:	e002      	b.n	800d834 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d1b3      	bne.n	800d7a2 <tcp_fasttmr+0x1a>
    }
  }
}
 800d83a:	bf00      	nop
 800d83c:	bf00      	nop
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	24007436 	.word	0x24007436
 800d848:	2400742c 	.word	0x2400742c
 800d84c:	24007434 	.word	0x24007434

0800d850 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d850:	b590      	push	{r4, r7, lr}
 800d852:	b085      	sub	sp, #20
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d109      	bne.n	800d872 <tcp_process_refused_data+0x22>
 800d85e:	4b37      	ldr	r3, [pc, #220]	; (800d93c <tcp_process_refused_data+0xec>)
 800d860:	f240 6209 	movw	r2, #1545	; 0x609
 800d864:	4936      	ldr	r1, [pc, #216]	; (800d940 <tcp_process_refused_data+0xf0>)
 800d866:	4837      	ldr	r0, [pc, #220]	; (800d944 <tcp_process_refused_data+0xf4>)
 800d868:	f004 ff1a 	bl	80126a0 <iprintf>
 800d86c:	f06f 030f 	mvn.w	r3, #15
 800d870:	e060      	b.n	800d934 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d876:	7b5b      	ldrb	r3, [r3, #13]
 800d878:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d87e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d00b      	beq.n	800d8a8 <tcp_process_refused_data+0x58>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6918      	ldr	r0, [r3, #16]
 800d89a:	2300      	movs	r3, #0
 800d89c:	68ba      	ldr	r2, [r7, #8]
 800d89e:	6879      	ldr	r1, [r7, #4]
 800d8a0:	47a0      	blx	r4
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	73fb      	strb	r3, [r7, #15]
 800d8a6:	e007      	b.n	800d8b8 <tcp_process_refused_data+0x68>
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	6879      	ldr	r1, [r7, #4]
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	f000 f8a4 	bl	800d9fc <tcp_recv_null>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d8b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d12a      	bne.n	800d916 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d8c0:	7bbb      	ldrb	r3, [r7, #14]
 800d8c2:	f003 0320 	and.w	r3, r3, #32
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d033      	beq.n	800d932 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8ce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d8d2:	d005      	beq.n	800d8e0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8d8:	3301      	adds	r3, #1
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d00b      	beq.n	800d902 <tcp_process_refused_data+0xb2>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6918      	ldr	r0, [r3, #16]
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	6879      	ldr	r1, [r7, #4]
 800d8fa:	47a0      	blx	r4
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	73fb      	strb	r3, [r7, #15]
 800d900:	e001      	b.n	800d906 <tcp_process_refused_data+0xb6>
 800d902:	2300      	movs	r3, #0
 800d904:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d90a:	f113 0f0d 	cmn.w	r3, #13
 800d90e:	d110      	bne.n	800d932 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d910:	f06f 030c 	mvn.w	r3, #12
 800d914:	e00e      	b.n	800d934 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d91a:	f113 0f0d 	cmn.w	r3, #13
 800d91e:	d102      	bne.n	800d926 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d920:	f06f 030c 	mvn.w	r3, #12
 800d924:	e006      	b.n	800d934 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	68ba      	ldr	r2, [r7, #8]
 800d92a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d92c:	f06f 0304 	mvn.w	r3, #4
 800d930:	e000      	b.n	800d934 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	3714      	adds	r7, #20
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd90      	pop	{r4, r7, pc}
 800d93c:	08014bac 	.word	0x08014bac
 800d940:	080150fc 	.word	0x080150fc
 800d944:	08014c30 	.word	0x08014c30

0800d948 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d950:	e007      	b.n	800d962 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 f80a 	bl	800d972 <tcp_seg_free>
    seg = next;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d1f4      	bne.n	800d952 <tcp_segs_free+0xa>
  }
}
 800d968:	bf00      	nop
 800d96a:	bf00      	nop
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}

0800d972 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d972:	b580      	push	{r7, lr}
 800d974:	b082      	sub	sp, #8
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d00c      	beq.n	800d99a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d004      	beq.n	800d992 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fe fc5b 	bl	800c248 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d992:	6879      	ldr	r1, [r7, #4]
 800d994:	2003      	movs	r0, #3
 800d996:	f7fd fdb3 	bl	800b500 <memp_free>
  }
}
 800d99a:	bf00      	nop
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
	...

0800d9a4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d106      	bne.n	800d9c0 <tcp_seg_copy+0x1c>
 800d9b2:	4b0f      	ldr	r3, [pc, #60]	; (800d9f0 <tcp_seg_copy+0x4c>)
 800d9b4:	f240 6282 	movw	r2, #1666	; 0x682
 800d9b8:	490e      	ldr	r1, [pc, #56]	; (800d9f4 <tcp_seg_copy+0x50>)
 800d9ba:	480f      	ldr	r0, [pc, #60]	; (800d9f8 <tcp_seg_copy+0x54>)
 800d9bc:	f004 fe70 	bl	80126a0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d9c0:	2003      	movs	r0, #3
 800d9c2:	f7fd fd27 	bl	800b414 <memp_malloc>
 800d9c6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d101      	bne.n	800d9d2 <tcp_seg_copy+0x2e>
    return NULL;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	e00a      	b.n	800d9e8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d9d2:	2210      	movs	r2, #16
 800d9d4:	6879      	ldr	r1, [r7, #4]
 800d9d6:	68f8      	ldr	r0, [r7, #12]
 800d9d8:	f004 fe4c 	bl	8012674 <memcpy>
  pbuf_ref(cseg->p);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7fe fcd7 	bl	800c394 <pbuf_ref>
  return cseg;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3710      	adds	r7, #16
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	08014bac 	.word	0x08014bac
 800d9f4:	08015140 	.word	0x08015140
 800d9f8:	08014c30 	.word	0x08014c30

0800d9fc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	60b9      	str	r1, [r7, #8]
 800da06:	607a      	str	r2, [r7, #4]
 800da08:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d109      	bne.n	800da24 <tcp_recv_null+0x28>
 800da10:	4b12      	ldr	r3, [pc, #72]	; (800da5c <tcp_recv_null+0x60>)
 800da12:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800da16:	4912      	ldr	r1, [pc, #72]	; (800da60 <tcp_recv_null+0x64>)
 800da18:	4812      	ldr	r0, [pc, #72]	; (800da64 <tcp_recv_null+0x68>)
 800da1a:	f004 fe41 	bl	80126a0 <iprintf>
 800da1e:	f06f 030f 	mvn.w	r3, #15
 800da22:	e016      	b.n	800da52 <tcp_recv_null+0x56>

  if (p != NULL) {
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d009      	beq.n	800da3e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	891b      	ldrh	r3, [r3, #8]
 800da2e:	4619      	mov	r1, r3
 800da30:	68b8      	ldr	r0, [r7, #8]
 800da32:	f7ff fb19 	bl	800d068 <tcp_recved>
    pbuf_free(p);
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7fe fc06 	bl	800c248 <pbuf_free>
 800da3c:	e008      	b.n	800da50 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800da3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d104      	bne.n	800da50 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800da46:	68b8      	ldr	r0, [r7, #8]
 800da48:	f7ff f9be 	bl	800cdc8 <tcp_close>
 800da4c:	4603      	mov	r3, r0
 800da4e:	e000      	b.n	800da52 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	3710      	adds	r7, #16
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	08014bac 	.word	0x08014bac
 800da60:	0801515c 	.word	0x0801515c
 800da64:	08014c30 	.word	0x08014c30

0800da68 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b086      	sub	sp, #24
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	4603      	mov	r3, r0
 800da70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800da72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da76:	2b00      	cmp	r3, #0
 800da78:	db01      	blt.n	800da7e <tcp_kill_prio+0x16>
 800da7a:	79fb      	ldrb	r3, [r7, #7]
 800da7c:	e000      	b.n	800da80 <tcp_kill_prio+0x18>
 800da7e:	237f      	movs	r3, #127	; 0x7f
 800da80:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800da82:	7afb      	ldrb	r3, [r7, #11]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d034      	beq.n	800daf2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800da88:	7afb      	ldrb	r3, [r7, #11]
 800da8a:	3b01      	subs	r3, #1
 800da8c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800da8e:	2300      	movs	r3, #0
 800da90:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800da92:	2300      	movs	r3, #0
 800da94:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800da96:	4b19      	ldr	r3, [pc, #100]	; (800dafc <tcp_kill_prio+0x94>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	617b      	str	r3, [r7, #20]
 800da9c:	e01f      	b.n	800dade <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	7d5b      	ldrb	r3, [r3, #21]
 800daa2:	7afa      	ldrb	r2, [r7, #11]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d80c      	bhi.n	800dac2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800daac:	7afa      	ldrb	r2, [r7, #11]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d112      	bne.n	800dad8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dab2:	4b13      	ldr	r3, [pc, #76]	; (800db00 <tcp_kill_prio+0x98>)
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	6a1b      	ldr	r3, [r3, #32]
 800daba:	1ad3      	subs	r3, r2, r3
 800dabc:	68fa      	ldr	r2, [r7, #12]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d80a      	bhi.n	800dad8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dac2:	4b0f      	ldr	r3, [pc, #60]	; (800db00 <tcp_kill_prio+0x98>)
 800dac4:	681a      	ldr	r2, [r3, #0]
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	6a1b      	ldr	r3, [r3, #32]
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	7d5b      	ldrb	r3, [r3, #21]
 800dad6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	68db      	ldr	r3, [r3, #12]
 800dadc:	617b      	str	r3, [r7, #20]
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d1dc      	bne.n	800da9e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d004      	beq.n	800daf4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800daea:	6938      	ldr	r0, [r7, #16]
 800daec:	f7ff fa56 	bl	800cf9c <tcp_abort>
 800daf0:	e000      	b.n	800daf4 <tcp_kill_prio+0x8c>
    return;
 800daf2:	bf00      	nop
  }
}
 800daf4:	3718      	adds	r7, #24
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	2400742c 	.word	0x2400742c
 800db00:	24007420 	.word	0x24007420

0800db04 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b086      	sub	sp, #24
 800db08:	af00      	add	r7, sp, #0
 800db0a:	4603      	mov	r3, r0
 800db0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800db0e:	79fb      	ldrb	r3, [r7, #7]
 800db10:	2b08      	cmp	r3, #8
 800db12:	d009      	beq.n	800db28 <tcp_kill_state+0x24>
 800db14:	79fb      	ldrb	r3, [r7, #7]
 800db16:	2b09      	cmp	r3, #9
 800db18:	d006      	beq.n	800db28 <tcp_kill_state+0x24>
 800db1a:	4b1a      	ldr	r3, [pc, #104]	; (800db84 <tcp_kill_state+0x80>)
 800db1c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800db20:	4919      	ldr	r1, [pc, #100]	; (800db88 <tcp_kill_state+0x84>)
 800db22:	481a      	ldr	r0, [pc, #104]	; (800db8c <tcp_kill_state+0x88>)
 800db24:	f004 fdbc 	bl	80126a0 <iprintf>

  inactivity = 0;
 800db28:	2300      	movs	r3, #0
 800db2a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800db2c:	2300      	movs	r3, #0
 800db2e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db30:	4b17      	ldr	r3, [pc, #92]	; (800db90 <tcp_kill_state+0x8c>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	617b      	str	r3, [r7, #20]
 800db36:	e017      	b.n	800db68 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	7d1b      	ldrb	r3, [r3, #20]
 800db3c:	79fa      	ldrb	r2, [r7, #7]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d10f      	bne.n	800db62 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800db42:	4b14      	ldr	r3, [pc, #80]	; (800db94 <tcp_kill_state+0x90>)
 800db44:	681a      	ldr	r2, [r3, #0]
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	6a1b      	ldr	r3, [r3, #32]
 800db4a:	1ad3      	subs	r3, r2, r3
 800db4c:	68fa      	ldr	r2, [r7, #12]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d807      	bhi.n	800db62 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800db52:	4b10      	ldr	r3, [pc, #64]	; (800db94 <tcp_kill_state+0x90>)
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	6a1b      	ldr	r3, [r3, #32]
 800db5a:	1ad3      	subs	r3, r2, r3
 800db5c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	68db      	ldr	r3, [r3, #12]
 800db66:	617b      	str	r3, [r7, #20]
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d1e4      	bne.n	800db38 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d003      	beq.n	800db7c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800db74:	2100      	movs	r1, #0
 800db76:	6938      	ldr	r0, [r7, #16]
 800db78:	f7ff f952 	bl	800ce20 <tcp_abandon>
  }
}
 800db7c:	bf00      	nop
 800db7e:	3718      	adds	r7, #24
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	08014bac 	.word	0x08014bac
 800db88:	08015178 	.word	0x08015178
 800db8c:	08014c30 	.word	0x08014c30
 800db90:	2400742c 	.word	0x2400742c
 800db94:	24007420 	.word	0x24007420

0800db98 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800dba2:	2300      	movs	r3, #0
 800dba4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dba6:	4b12      	ldr	r3, [pc, #72]	; (800dbf0 <tcp_kill_timewait+0x58>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	60fb      	str	r3, [r7, #12]
 800dbac:	e012      	b.n	800dbd4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dbae:	4b11      	ldr	r3, [pc, #68]	; (800dbf4 <tcp_kill_timewait+0x5c>)
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	6a1b      	ldr	r3, [r3, #32]
 800dbb6:	1ad3      	subs	r3, r2, r3
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d807      	bhi.n	800dbce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800dbbe:	4b0d      	ldr	r3, [pc, #52]	; (800dbf4 <tcp_kill_timewait+0x5c>)
 800dbc0:	681a      	ldr	r2, [r3, #0]
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	6a1b      	ldr	r3, [r3, #32]
 800dbc6:	1ad3      	subs	r3, r2, r3
 800dbc8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	60fb      	str	r3, [r7, #12]
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1e9      	bne.n	800dbae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d002      	beq.n	800dbe6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dbe0:	68b8      	ldr	r0, [r7, #8]
 800dbe2:	f7ff f9db 	bl	800cf9c <tcp_abort>
  }
}
 800dbe6:	bf00      	nop
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	24007430 	.word	0x24007430
 800dbf4:	24007420 	.word	0x24007420

0800dbf8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dbfe:	4b10      	ldr	r3, [pc, #64]	; (800dc40 <tcp_handle_closepend+0x48>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dc04:	e014      	b.n	800dc30 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	68db      	ldr	r3, [r3, #12]
 800dc0a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	8b5b      	ldrh	r3, [r3, #26]
 800dc10:	f003 0308 	and.w	r3, r3, #8
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d009      	beq.n	800dc2c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	8b5b      	ldrh	r3, [r3, #26]
 800dc1c:	f023 0308 	bic.w	r3, r3, #8
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f7ff f864 	bl	800ccf4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d1e7      	bne.n	800dc06 <tcp_handle_closepend+0xe>
  }
}
 800dc36:	bf00      	nop
 800dc38:	bf00      	nop
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	2400742c 	.word	0x2400742c

0800dc44 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc4e:	2001      	movs	r0, #1
 800dc50:	f7fd fbe0 	bl	800b414 <memp_malloc>
 800dc54:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d126      	bne.n	800dcaa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800dc5c:	f7ff ffcc 	bl	800dbf8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800dc60:	f7ff ff9a 	bl	800db98 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc64:	2001      	movs	r0, #1
 800dc66:	f7fd fbd5 	bl	800b414 <memp_malloc>
 800dc6a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d11b      	bne.n	800dcaa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800dc72:	2009      	movs	r0, #9
 800dc74:	f7ff ff46 	bl	800db04 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc78:	2001      	movs	r0, #1
 800dc7a:	f7fd fbcb 	bl	800b414 <memp_malloc>
 800dc7e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d111      	bne.n	800dcaa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800dc86:	2008      	movs	r0, #8
 800dc88:	f7ff ff3c 	bl	800db04 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc8c:	2001      	movs	r0, #1
 800dc8e:	f7fd fbc1 	bl	800b414 <memp_malloc>
 800dc92:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d107      	bne.n	800dcaa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800dc9a:	79fb      	ldrb	r3, [r7, #7]
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f7ff fee3 	bl	800da68 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dca2:	2001      	movs	r0, #1
 800dca4:	f7fd fbb6 	bl	800b414 <memp_malloc>
 800dca8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d03f      	beq.n	800dd30 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dcb0:	229c      	movs	r2, #156	; 0x9c
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f004 fceb 	bl	8012690 <memset>
    pcb->prio = prio;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	79fa      	ldrb	r2, [r7, #7]
 800dcbe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dcc6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dcd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	22ff      	movs	r2, #255	; 0xff
 800dcde:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dce6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2206      	movs	r2, #6
 800dcec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2206      	movs	r2, #6
 800dcf4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcfc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2201      	movs	r2, #1
 800dd02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800dd06:	4b0d      	ldr	r3, [pc, #52]	; (800dd3c <tcp_alloc+0xf8>)
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dd0e:	4b0c      	ldr	r3, [pc, #48]	; (800dd40 <tcp_alloc+0xfc>)
 800dd10:	781a      	ldrb	r2, [r3, #0]
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dd1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	4a08      	ldr	r2, [pc, #32]	; (800dd44 <tcp_alloc+0x100>)
 800dd24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	4a07      	ldr	r2, [pc, #28]	; (800dd48 <tcp_alloc+0x104>)
 800dd2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dd30:	68fb      	ldr	r3, [r7, #12]
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3710      	adds	r7, #16
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	24007420 	.word	0x24007420
 800dd40:	24007436 	.word	0x24007436
 800dd44:	0800d9fd 	.word	0x0800d9fd
 800dd48:	006ddd00 	.word	0x006ddd00

0800dd4c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d107      	bne.n	800dd6a <tcp_pcb_purge+0x1e>
 800dd5a:	4b21      	ldr	r3, [pc, #132]	; (800dde0 <tcp_pcb_purge+0x94>)
 800dd5c:	f640 0251 	movw	r2, #2129	; 0x851
 800dd60:	4920      	ldr	r1, [pc, #128]	; (800dde4 <tcp_pcb_purge+0x98>)
 800dd62:	4821      	ldr	r0, [pc, #132]	; (800dde8 <tcp_pcb_purge+0x9c>)
 800dd64:	f004 fc9c 	bl	80126a0 <iprintf>
 800dd68:	e037      	b.n	800ddda <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	7d1b      	ldrb	r3, [r3, #20]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d033      	beq.n	800ddda <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800dd76:	2b0a      	cmp	r3, #10
 800dd78:	d02f      	beq.n	800ddda <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d02b      	beq.n	800ddda <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d007      	beq.n	800dd9a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fe fa5a 	bl	800c248 <pbuf_free>
      pcb->refused_data = NULL;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2200      	movs	r2, #0
 800dd98:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d002      	beq.n	800dda8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 f986 	bl	800e0b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddae:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7ff fdc7 	bl	800d948 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7ff fdc2 	bl	800d948 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	66da      	str	r2, [r3, #108]	; 0x6c
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	08014bac 	.word	0x08014bac
 800dde4:	08015238 	.word	0x08015238
 800dde8:	08014c30 	.word	0x08014c30

0800ddec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b084      	sub	sp, #16
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d106      	bne.n	800de0a <tcp_pcb_remove+0x1e>
 800ddfc:	4b3e      	ldr	r3, [pc, #248]	; (800def8 <tcp_pcb_remove+0x10c>)
 800ddfe:	f640 0283 	movw	r2, #2179	; 0x883
 800de02:	493e      	ldr	r1, [pc, #248]	; (800defc <tcp_pcb_remove+0x110>)
 800de04:	483e      	ldr	r0, [pc, #248]	; (800df00 <tcp_pcb_remove+0x114>)
 800de06:	f004 fc4b 	bl	80126a0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d106      	bne.n	800de1e <tcp_pcb_remove+0x32>
 800de10:	4b39      	ldr	r3, [pc, #228]	; (800def8 <tcp_pcb_remove+0x10c>)
 800de12:	f640 0284 	movw	r2, #2180	; 0x884
 800de16:	493b      	ldr	r1, [pc, #236]	; (800df04 <tcp_pcb_remove+0x118>)
 800de18:	4839      	ldr	r0, [pc, #228]	; (800df00 <tcp_pcb_remove+0x114>)
 800de1a:	f004 fc41 	bl	80126a0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	683a      	ldr	r2, [r7, #0]
 800de24:	429a      	cmp	r2, r3
 800de26:	d105      	bne.n	800de34 <tcp_pcb_remove+0x48>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	68da      	ldr	r2, [r3, #12]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	601a      	str	r2, [r3, #0]
 800de32:	e013      	b.n	800de5c <tcp_pcb_remove+0x70>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	60fb      	str	r3, [r7, #12]
 800de3a:	e00c      	b.n	800de56 <tcp_pcb_remove+0x6a>
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	683a      	ldr	r2, [r7, #0]
 800de42:	429a      	cmp	r2, r3
 800de44:	d104      	bne.n	800de50 <tcp_pcb_remove+0x64>
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	68da      	ldr	r2, [r3, #12]
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	60da      	str	r2, [r3, #12]
 800de4e:	e005      	b.n	800de5c <tcp_pcb_remove+0x70>
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	60fb      	str	r3, [r7, #12]
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d1ef      	bne.n	800de3c <tcp_pcb_remove+0x50>
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	2200      	movs	r2, #0
 800de60:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800de62:	6838      	ldr	r0, [r7, #0]
 800de64:	f7ff ff72 	bl	800dd4c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	7d1b      	ldrb	r3, [r3, #20]
 800de6c:	2b0a      	cmp	r3, #10
 800de6e:	d013      	beq.n	800de98 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800de74:	2b01      	cmp	r3, #1
 800de76:	d00f      	beq.n	800de98 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	8b5b      	ldrh	r3, [r3, #26]
 800de7c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800de80:	2b00      	cmp	r3, #0
 800de82:	d009      	beq.n	800de98 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	8b5b      	ldrh	r3, [r3, #26]
 800de88:	f043 0302 	orr.w	r3, r3, #2
 800de8c:	b29a      	uxth	r2, r3
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800de92:	6838      	ldr	r0, [r7, #0]
 800de94:	f002 ff6e 	bl	8010d74 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	7d1b      	ldrb	r3, [r3, #20]
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d020      	beq.n	800dee2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d006      	beq.n	800deb6 <tcp_pcb_remove+0xca>
 800dea8:	4b13      	ldr	r3, [pc, #76]	; (800def8 <tcp_pcb_remove+0x10c>)
 800deaa:	f640 0293 	movw	r2, #2195	; 0x893
 800deae:	4916      	ldr	r1, [pc, #88]	; (800df08 <tcp_pcb_remove+0x11c>)
 800deb0:	4813      	ldr	r0, [pc, #76]	; (800df00 <tcp_pcb_remove+0x114>)
 800deb2:	f004 fbf5 	bl	80126a0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deba:	2b00      	cmp	r3, #0
 800debc:	d006      	beq.n	800decc <tcp_pcb_remove+0xe0>
 800debe:	4b0e      	ldr	r3, [pc, #56]	; (800def8 <tcp_pcb_remove+0x10c>)
 800dec0:	f640 0294 	movw	r2, #2196	; 0x894
 800dec4:	4911      	ldr	r1, [pc, #68]	; (800df0c <tcp_pcb_remove+0x120>)
 800dec6:	480e      	ldr	r0, [pc, #56]	; (800df00 <tcp_pcb_remove+0x114>)
 800dec8:	f004 fbea 	bl	80126a0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d006      	beq.n	800dee2 <tcp_pcb_remove+0xf6>
 800ded4:	4b08      	ldr	r3, [pc, #32]	; (800def8 <tcp_pcb_remove+0x10c>)
 800ded6:	f640 0296 	movw	r2, #2198	; 0x896
 800deda:	490d      	ldr	r1, [pc, #52]	; (800df10 <tcp_pcb_remove+0x124>)
 800dedc:	4808      	ldr	r0, [pc, #32]	; (800df00 <tcp_pcb_remove+0x114>)
 800dede:	f004 fbdf 	bl	80126a0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	2200      	movs	r2, #0
 800dee6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	2200      	movs	r2, #0
 800deec:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800deee:	bf00      	nop
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	08014bac 	.word	0x08014bac
 800defc:	08015254 	.word	0x08015254
 800df00:	08014c30 	.word	0x08014c30
 800df04:	08015270 	.word	0x08015270
 800df08:	08015290 	.word	0x08015290
 800df0c:	080152a8 	.word	0x080152a8
 800df10:	080152c4 	.word	0x080152c4

0800df14 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d106      	bne.n	800df30 <tcp_next_iss+0x1c>
 800df22:	4b0a      	ldr	r3, [pc, #40]	; (800df4c <tcp_next_iss+0x38>)
 800df24:	f640 02af 	movw	r2, #2223	; 0x8af
 800df28:	4909      	ldr	r1, [pc, #36]	; (800df50 <tcp_next_iss+0x3c>)
 800df2a:	480a      	ldr	r0, [pc, #40]	; (800df54 <tcp_next_iss+0x40>)
 800df2c:	f004 fbb8 	bl	80126a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800df30:	4b09      	ldr	r3, [pc, #36]	; (800df58 <tcp_next_iss+0x44>)
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	4b09      	ldr	r3, [pc, #36]	; (800df5c <tcp_next_iss+0x48>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4413      	add	r3, r2
 800df3a:	4a07      	ldr	r2, [pc, #28]	; (800df58 <tcp_next_iss+0x44>)
 800df3c:	6013      	str	r3, [r2, #0]
  return iss;
 800df3e:	4b06      	ldr	r3, [pc, #24]	; (800df58 <tcp_next_iss+0x44>)
 800df40:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800df42:	4618      	mov	r0, r3
 800df44:	3708      	adds	r7, #8
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	08014bac 	.word	0x08014bac
 800df50:	080152dc 	.word	0x080152dc
 800df54:	08014c30 	.word	0x08014c30
 800df58:	2400002c 	.word	0x2400002c
 800df5c:	24007420 	.word	0x24007420

0800df60 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b086      	sub	sp, #24
 800df64:	af00      	add	r7, sp, #0
 800df66:	4603      	mov	r3, r0
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	607a      	str	r2, [r7, #4]
 800df6c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d106      	bne.n	800df82 <tcp_eff_send_mss_netif+0x22>
 800df74:	4b14      	ldr	r3, [pc, #80]	; (800dfc8 <tcp_eff_send_mss_netif+0x68>)
 800df76:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800df7a:	4914      	ldr	r1, [pc, #80]	; (800dfcc <tcp_eff_send_mss_netif+0x6c>)
 800df7c:	4814      	ldr	r0, [pc, #80]	; (800dfd0 <tcp_eff_send_mss_netif+0x70>)
 800df7e:	f004 fb8f 	bl	80126a0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d101      	bne.n	800df8c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800df88:	89fb      	ldrh	r3, [r7, #14]
 800df8a:	e019      	b.n	800dfc0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df90:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800df92:	8afb      	ldrh	r3, [r7, #22]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d012      	beq.n	800dfbe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800df98:	2328      	movs	r3, #40	; 0x28
 800df9a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800df9c:	8afa      	ldrh	r2, [r7, #22]
 800df9e:	8abb      	ldrh	r3, [r7, #20]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d904      	bls.n	800dfae <tcp_eff_send_mss_netif+0x4e>
 800dfa4:	8afa      	ldrh	r2, [r7, #22]
 800dfa6:	8abb      	ldrh	r3, [r7, #20]
 800dfa8:	1ad3      	subs	r3, r2, r3
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	e000      	b.n	800dfb0 <tcp_eff_send_mss_netif+0x50>
 800dfae:	2300      	movs	r3, #0
 800dfb0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dfb2:	8a7a      	ldrh	r2, [r7, #18]
 800dfb4:	89fb      	ldrh	r3, [r7, #14]
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	bf28      	it	cs
 800dfba:	4613      	movcs	r3, r2
 800dfbc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dfbe:	89fb      	ldrh	r3, [r7, #14]
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3718      	adds	r7, #24
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	08014bac 	.word	0x08014bac
 800dfcc:	080152f8 	.word	0x080152f8
 800dfd0:	08014c30 	.word	0x08014c30

0800dfd4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b084      	sub	sp, #16
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d119      	bne.n	800e01c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dfe8:	4b10      	ldr	r3, [pc, #64]	; (800e02c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dfea:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dfee:	4910      	ldr	r1, [pc, #64]	; (800e030 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dff0:	4810      	ldr	r0, [pc, #64]	; (800e034 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dff2:	f004 fb55 	bl	80126a0 <iprintf>

  while (pcb != NULL) {
 800dff6:	e011      	b.n	800e01c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	429a      	cmp	r2, r3
 800e002:	d108      	bne.n	800e016 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f7fe ffc6 	bl	800cf9c <tcp_abort>
      pcb = next;
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	60fb      	str	r3, [r7, #12]
 800e014:	e002      	b.n	800e01c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d1ea      	bne.n	800dff8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e022:	bf00      	nop
 800e024:	bf00      	nop
 800e026:	3710      	adds	r7, #16
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}
 800e02c:	08014bac 	.word	0x08014bac
 800e030:	08015320 	.word	0x08015320
 800e034:	08014c30 	.word	0x08014c30

0800e038 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d02a      	beq.n	800e09e <tcp_netif_ip_addr_changed+0x66>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d026      	beq.n	800e09e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e050:	4b15      	ldr	r3, [pc, #84]	; (800e0a8 <tcp_netif_ip_addr_changed+0x70>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4619      	mov	r1, r3
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7ff ffbc 	bl	800dfd4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e05c:	4b13      	ldr	r3, [pc, #76]	; (800e0ac <tcp_netif_ip_addr_changed+0x74>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4619      	mov	r1, r3
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f7ff ffb6 	bl	800dfd4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d017      	beq.n	800e09e <tcp_netif_ip_addr_changed+0x66>
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d013      	beq.n	800e09e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e076:	4b0e      	ldr	r3, [pc, #56]	; (800e0b0 <tcp_netif_ip_addr_changed+0x78>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	60fb      	str	r3, [r7, #12]
 800e07c:	e00c      	b.n	800e098 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	429a      	cmp	r2, r3
 800e088:	d103      	bne.n	800e092 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	60fb      	str	r3, [r7, #12]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d1ef      	bne.n	800e07e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e09e:	bf00      	nop
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	2400742c 	.word	0x2400742c
 800e0ac:	24007424 	.word	0x24007424
 800e0b0:	24007428 	.word	0x24007428

0800e0b4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d007      	beq.n	800e0d4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7ff fc3d 	bl	800d948 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e0d4:	bf00      	nop
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e0dc:	b590      	push	{r4, r7, lr}
 800e0de:	b08d      	sub	sp, #52	; 0x34
 800e0e0:	af04      	add	r7, sp, #16
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d105      	bne.n	800e0f8 <tcp_input+0x1c>
 800e0ec:	4b9b      	ldr	r3, [pc, #620]	; (800e35c <tcp_input+0x280>)
 800e0ee:	2283      	movs	r2, #131	; 0x83
 800e0f0:	499b      	ldr	r1, [pc, #620]	; (800e360 <tcp_input+0x284>)
 800e0f2:	489c      	ldr	r0, [pc, #624]	; (800e364 <tcp_input+0x288>)
 800e0f4:	f004 fad4 	bl	80126a0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	4a9a      	ldr	r2, [pc, #616]	; (800e368 <tcp_input+0x28c>)
 800e0fe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	895b      	ldrh	r3, [r3, #10]
 800e104:	2b13      	cmp	r3, #19
 800e106:	f240 83d1 	bls.w	800e8ac <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e10a:	4b98      	ldr	r3, [pc, #608]	; (800e36c <tcp_input+0x290>)
 800e10c:	695b      	ldr	r3, [r3, #20]
 800e10e:	4a97      	ldr	r2, [pc, #604]	; (800e36c <tcp_input+0x290>)
 800e110:	6812      	ldr	r2, [r2, #0]
 800e112:	4611      	mov	r1, r2
 800e114:	4618      	mov	r0, r3
 800e116:	f7fb fe5f 	bl	8009dd8 <ip4_addr_isbroadcast_u32>
 800e11a:	4603      	mov	r3, r0
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	f040 83c7 	bne.w	800e8b0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e122:	4b92      	ldr	r3, [pc, #584]	; (800e36c <tcp_input+0x290>)
 800e124:	695b      	ldr	r3, [r3, #20]
 800e126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e12a:	2be0      	cmp	r3, #224	; 0xe0
 800e12c:	f000 83c0 	beq.w	800e8b0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e130:	4b8d      	ldr	r3, [pc, #564]	; (800e368 <tcp_input+0x28c>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	899b      	ldrh	r3, [r3, #12]
 800e136:	b29b      	uxth	r3, r3
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fa f8df 	bl	80082fc <lwip_htons>
 800e13e:	4603      	mov	r3, r0
 800e140:	0b1b      	lsrs	r3, r3, #12
 800e142:	b29b      	uxth	r3, r3
 800e144:	b2db      	uxtb	r3, r3
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e14a:	7cbb      	ldrb	r3, [r7, #18]
 800e14c:	2b13      	cmp	r3, #19
 800e14e:	f240 83b1 	bls.w	800e8b4 <tcp_input+0x7d8>
 800e152:	7cbb      	ldrb	r3, [r7, #18]
 800e154:	b29a      	uxth	r2, r3
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	891b      	ldrh	r3, [r3, #8]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	f200 83aa 	bhi.w	800e8b4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e160:	7cbb      	ldrb	r3, [r7, #18]
 800e162:	b29b      	uxth	r3, r3
 800e164:	3b14      	subs	r3, #20
 800e166:	b29a      	uxth	r2, r3
 800e168:	4b81      	ldr	r3, [pc, #516]	; (800e370 <tcp_input+0x294>)
 800e16a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e16c:	4b81      	ldr	r3, [pc, #516]	; (800e374 <tcp_input+0x298>)
 800e16e:	2200      	movs	r2, #0
 800e170:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	895a      	ldrh	r2, [r3, #10]
 800e176:	7cbb      	ldrb	r3, [r7, #18]
 800e178:	b29b      	uxth	r3, r3
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d309      	bcc.n	800e192 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e17e:	4b7c      	ldr	r3, [pc, #496]	; (800e370 <tcp_input+0x294>)
 800e180:	881a      	ldrh	r2, [r3, #0]
 800e182:	4b7d      	ldr	r3, [pc, #500]	; (800e378 <tcp_input+0x29c>)
 800e184:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e186:	7cbb      	ldrb	r3, [r7, #18]
 800e188:	4619      	mov	r1, r3
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f7fd ffd6 	bl	800c13c <pbuf_remove_header>
 800e190:	e04e      	b.n	800e230 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d105      	bne.n	800e1a6 <tcp_input+0xca>
 800e19a:	4b70      	ldr	r3, [pc, #448]	; (800e35c <tcp_input+0x280>)
 800e19c:	22c2      	movs	r2, #194	; 0xc2
 800e19e:	4977      	ldr	r1, [pc, #476]	; (800e37c <tcp_input+0x2a0>)
 800e1a0:	4870      	ldr	r0, [pc, #448]	; (800e364 <tcp_input+0x288>)
 800e1a2:	f004 fa7d 	bl	80126a0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e1a6:	2114      	movs	r1, #20
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f7fd ffc7 	bl	800c13c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	895a      	ldrh	r2, [r3, #10]
 800e1b2:	4b71      	ldr	r3, [pc, #452]	; (800e378 <tcp_input+0x29c>)
 800e1b4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e1b6:	4b6e      	ldr	r3, [pc, #440]	; (800e370 <tcp_input+0x294>)
 800e1b8:	881a      	ldrh	r2, [r3, #0]
 800e1ba:	4b6f      	ldr	r3, [pc, #444]	; (800e378 <tcp_input+0x29c>)
 800e1bc:	881b      	ldrh	r3, [r3, #0]
 800e1be:	1ad3      	subs	r3, r2, r3
 800e1c0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e1c2:	4b6d      	ldr	r3, [pc, #436]	; (800e378 <tcp_input+0x29c>)
 800e1c4:	881b      	ldrh	r3, [r3, #0]
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f7fd ffb7 	bl	800c13c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	895b      	ldrh	r3, [r3, #10]
 800e1d4:	8a3a      	ldrh	r2, [r7, #16]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	f200 836e 	bhi.w	800e8b8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	4a64      	ldr	r2, [pc, #400]	; (800e374 <tcp_input+0x298>)
 800e1e4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	8a3a      	ldrh	r2, [r7, #16]
 800e1ec:	4611      	mov	r1, r2
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fd ffa4 	bl	800c13c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	891a      	ldrh	r2, [r3, #8]
 800e1f8:	8a3b      	ldrh	r3, [r7, #16]
 800e1fa:	1ad3      	subs	r3, r2, r3
 800e1fc:	b29a      	uxth	r2, r3
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	895b      	ldrh	r3, [r3, #10]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d005      	beq.n	800e216 <tcp_input+0x13a>
 800e20a:	4b54      	ldr	r3, [pc, #336]	; (800e35c <tcp_input+0x280>)
 800e20c:	22df      	movs	r2, #223	; 0xdf
 800e20e:	495c      	ldr	r1, [pc, #368]	; (800e380 <tcp_input+0x2a4>)
 800e210:	4854      	ldr	r0, [pc, #336]	; (800e364 <tcp_input+0x288>)
 800e212:	f004 fa45 	bl	80126a0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	891a      	ldrh	r2, [r3, #8]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	891b      	ldrh	r3, [r3, #8]
 800e220:	429a      	cmp	r2, r3
 800e222:	d005      	beq.n	800e230 <tcp_input+0x154>
 800e224:	4b4d      	ldr	r3, [pc, #308]	; (800e35c <tcp_input+0x280>)
 800e226:	22e0      	movs	r2, #224	; 0xe0
 800e228:	4956      	ldr	r1, [pc, #344]	; (800e384 <tcp_input+0x2a8>)
 800e22a:	484e      	ldr	r0, [pc, #312]	; (800e364 <tcp_input+0x288>)
 800e22c:	f004 fa38 	bl	80126a0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e230:	4b4d      	ldr	r3, [pc, #308]	; (800e368 <tcp_input+0x28c>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	881b      	ldrh	r3, [r3, #0]
 800e236:	b29b      	uxth	r3, r3
 800e238:	4a4b      	ldr	r2, [pc, #300]	; (800e368 <tcp_input+0x28c>)
 800e23a:	6814      	ldr	r4, [r2, #0]
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7fa f85d 	bl	80082fc <lwip_htons>
 800e242:	4603      	mov	r3, r0
 800e244:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e246:	4b48      	ldr	r3, [pc, #288]	; (800e368 <tcp_input+0x28c>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	885b      	ldrh	r3, [r3, #2]
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	4a46      	ldr	r2, [pc, #280]	; (800e368 <tcp_input+0x28c>)
 800e250:	6814      	ldr	r4, [r2, #0]
 800e252:	4618      	mov	r0, r3
 800e254:	f7fa f852 	bl	80082fc <lwip_htons>
 800e258:	4603      	mov	r3, r0
 800e25a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e25c:	4b42      	ldr	r3, [pc, #264]	; (800e368 <tcp_input+0x28c>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	4a41      	ldr	r2, [pc, #260]	; (800e368 <tcp_input+0x28c>)
 800e264:	6814      	ldr	r4, [r2, #0]
 800e266:	4618      	mov	r0, r3
 800e268:	f7fa f85d 	bl	8008326 <lwip_htonl>
 800e26c:	4603      	mov	r3, r0
 800e26e:	6063      	str	r3, [r4, #4]
 800e270:	6863      	ldr	r3, [r4, #4]
 800e272:	4a45      	ldr	r2, [pc, #276]	; (800e388 <tcp_input+0x2ac>)
 800e274:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e276:	4b3c      	ldr	r3, [pc, #240]	; (800e368 <tcp_input+0x28c>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	4a3a      	ldr	r2, [pc, #232]	; (800e368 <tcp_input+0x28c>)
 800e27e:	6814      	ldr	r4, [r2, #0]
 800e280:	4618      	mov	r0, r3
 800e282:	f7fa f850 	bl	8008326 <lwip_htonl>
 800e286:	4603      	mov	r3, r0
 800e288:	60a3      	str	r3, [r4, #8]
 800e28a:	68a3      	ldr	r3, [r4, #8]
 800e28c:	4a3f      	ldr	r2, [pc, #252]	; (800e38c <tcp_input+0x2b0>)
 800e28e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e290:	4b35      	ldr	r3, [pc, #212]	; (800e368 <tcp_input+0x28c>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	89db      	ldrh	r3, [r3, #14]
 800e296:	b29b      	uxth	r3, r3
 800e298:	4a33      	ldr	r2, [pc, #204]	; (800e368 <tcp_input+0x28c>)
 800e29a:	6814      	ldr	r4, [r2, #0]
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7fa f82d 	bl	80082fc <lwip_htons>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e2a6:	4b30      	ldr	r3, [pc, #192]	; (800e368 <tcp_input+0x28c>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	899b      	ldrh	r3, [r3, #12]
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7fa f824 	bl	80082fc <lwip_htons>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e2bc:	b2da      	uxtb	r2, r3
 800e2be:	4b34      	ldr	r3, [pc, #208]	; (800e390 <tcp_input+0x2b4>)
 800e2c0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	891a      	ldrh	r2, [r3, #8]
 800e2c6:	4b33      	ldr	r3, [pc, #204]	; (800e394 <tcp_input+0x2b8>)
 800e2c8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e2ca:	4b31      	ldr	r3, [pc, #196]	; (800e390 <tcp_input+0x2b4>)
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	f003 0303 	and.w	r3, r3, #3
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00c      	beq.n	800e2f0 <tcp_input+0x214>
    tcplen++;
 800e2d6:	4b2f      	ldr	r3, [pc, #188]	; (800e394 <tcp_input+0x2b8>)
 800e2d8:	881b      	ldrh	r3, [r3, #0]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	b29a      	uxth	r2, r3
 800e2de:	4b2d      	ldr	r3, [pc, #180]	; (800e394 <tcp_input+0x2b8>)
 800e2e0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	891a      	ldrh	r2, [r3, #8]
 800e2e6:	4b2b      	ldr	r3, [pc, #172]	; (800e394 <tcp_input+0x2b8>)
 800e2e8:	881b      	ldrh	r3, [r3, #0]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	f200 82e6 	bhi.w	800e8bc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2f4:	4b28      	ldr	r3, [pc, #160]	; (800e398 <tcp_input+0x2bc>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	61fb      	str	r3, [r7, #28]
 800e2fa:	e09d      	b.n	800e438 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	7d1b      	ldrb	r3, [r3, #20]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d105      	bne.n	800e310 <tcp_input+0x234>
 800e304:	4b15      	ldr	r3, [pc, #84]	; (800e35c <tcp_input+0x280>)
 800e306:	22fb      	movs	r2, #251	; 0xfb
 800e308:	4924      	ldr	r1, [pc, #144]	; (800e39c <tcp_input+0x2c0>)
 800e30a:	4816      	ldr	r0, [pc, #88]	; (800e364 <tcp_input+0x288>)
 800e30c:	f004 f9c8 	bl	80126a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	7d1b      	ldrb	r3, [r3, #20]
 800e314:	2b0a      	cmp	r3, #10
 800e316:	d105      	bne.n	800e324 <tcp_input+0x248>
 800e318:	4b10      	ldr	r3, [pc, #64]	; (800e35c <tcp_input+0x280>)
 800e31a:	22fc      	movs	r2, #252	; 0xfc
 800e31c:	4920      	ldr	r1, [pc, #128]	; (800e3a0 <tcp_input+0x2c4>)
 800e31e:	4811      	ldr	r0, [pc, #68]	; (800e364 <tcp_input+0x288>)
 800e320:	f004 f9be 	bl	80126a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	7d1b      	ldrb	r3, [r3, #20]
 800e328:	2b01      	cmp	r3, #1
 800e32a:	d105      	bne.n	800e338 <tcp_input+0x25c>
 800e32c:	4b0b      	ldr	r3, [pc, #44]	; (800e35c <tcp_input+0x280>)
 800e32e:	22fd      	movs	r2, #253	; 0xfd
 800e330:	491c      	ldr	r1, [pc, #112]	; (800e3a4 <tcp_input+0x2c8>)
 800e332:	480c      	ldr	r0, [pc, #48]	; (800e364 <tcp_input+0x288>)
 800e334:	f004 f9b4 	bl	80126a0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	7a1b      	ldrb	r3, [r3, #8]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d033      	beq.n	800e3a8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	7a1a      	ldrb	r2, [r3, #8]
 800e344:	4b09      	ldr	r3, [pc, #36]	; (800e36c <tcp_input+0x290>)
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e34c:	3301      	adds	r3, #1
 800e34e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e350:	429a      	cmp	r2, r3
 800e352:	d029      	beq.n	800e3a8 <tcp_input+0x2cc>
      prev = pcb;
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	61bb      	str	r3, [r7, #24]
      continue;
 800e358:	e06b      	b.n	800e432 <tcp_input+0x356>
 800e35a:	bf00      	nop
 800e35c:	08015354 	.word	0x08015354
 800e360:	080153c4 	.word	0x080153c4
 800e364:	080153dc 	.word	0x080153dc
 800e368:	24007448 	.word	0x24007448
 800e36c:	2400430c 	.word	0x2400430c
 800e370:	2400744c 	.word	0x2400744c
 800e374:	24007450 	.word	0x24007450
 800e378:	2400744e 	.word	0x2400744e
 800e37c:	08015404 	.word	0x08015404
 800e380:	08015414 	.word	0x08015414
 800e384:	08015420 	.word	0x08015420
 800e388:	24007458 	.word	0x24007458
 800e38c:	2400745c 	.word	0x2400745c
 800e390:	24007464 	.word	0x24007464
 800e394:	24007462 	.word	0x24007462
 800e398:	2400742c 	.word	0x2400742c
 800e39c:	08015440 	.word	0x08015440
 800e3a0:	08015468 	.word	0x08015468
 800e3a4:	08015494 	.word	0x08015494
    }

    if (pcb->remote_port == tcphdr->src &&
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	8b1a      	ldrh	r2, [r3, #24]
 800e3ac:	4b72      	ldr	r3, [pc, #456]	; (800e578 <tcp_input+0x49c>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	881b      	ldrh	r3, [r3, #0]
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d13a      	bne.n	800e42e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	8ada      	ldrh	r2, [r3, #22]
 800e3bc:	4b6e      	ldr	r3, [pc, #440]	; (800e578 <tcp_input+0x49c>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	885b      	ldrh	r3, [r3, #2]
 800e3c2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d132      	bne.n	800e42e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	685a      	ldr	r2, [r3, #4]
 800e3cc:	4b6b      	ldr	r3, [pc, #428]	; (800e57c <tcp_input+0x4a0>)
 800e3ce:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d12c      	bne.n	800e42e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	4b68      	ldr	r3, [pc, #416]	; (800e57c <tcp_input+0x4a0>)
 800e3da:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d126      	bne.n	800e42e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e3e0:	69fb      	ldr	r3, [r7, #28]
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	69fa      	ldr	r2, [r7, #28]
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d106      	bne.n	800e3f8 <tcp_input+0x31c>
 800e3ea:	4b65      	ldr	r3, [pc, #404]	; (800e580 <tcp_input+0x4a4>)
 800e3ec:	f240 120d 	movw	r2, #269	; 0x10d
 800e3f0:	4964      	ldr	r1, [pc, #400]	; (800e584 <tcp_input+0x4a8>)
 800e3f2:	4865      	ldr	r0, [pc, #404]	; (800e588 <tcp_input+0x4ac>)
 800e3f4:	f004 f954 	bl	80126a0 <iprintf>
      if (prev != NULL) {
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d00a      	beq.n	800e414 <tcp_input+0x338>
        prev->next = pcb->next;
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	68da      	ldr	r2, [r3, #12]
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e406:	4b61      	ldr	r3, [pc, #388]	; (800e58c <tcp_input+0x4b0>)
 800e408:	681a      	ldr	r2, [r3, #0]
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e40e:	4a5f      	ldr	r2, [pc, #380]	; (800e58c <tcp_input+0x4b0>)
 800e410:	69fb      	ldr	r3, [r7, #28]
 800e412:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e414:	69fb      	ldr	r3, [r7, #28]
 800e416:	68db      	ldr	r3, [r3, #12]
 800e418:	69fa      	ldr	r2, [r7, #28]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d111      	bne.n	800e442 <tcp_input+0x366>
 800e41e:	4b58      	ldr	r3, [pc, #352]	; (800e580 <tcp_input+0x4a4>)
 800e420:	f240 1215 	movw	r2, #277	; 0x115
 800e424:	495a      	ldr	r1, [pc, #360]	; (800e590 <tcp_input+0x4b4>)
 800e426:	4858      	ldr	r0, [pc, #352]	; (800e588 <tcp_input+0x4ac>)
 800e428:	f004 f93a 	bl	80126a0 <iprintf>
      break;
 800e42c:	e009      	b.n	800e442 <tcp_input+0x366>
    }
    prev = pcb;
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e432:	69fb      	ldr	r3, [r7, #28]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	61fb      	str	r3, [r7, #28]
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	f47f af5e 	bne.w	800e2fc <tcp_input+0x220>
 800e440:	e000      	b.n	800e444 <tcp_input+0x368>
      break;
 800e442:	bf00      	nop
  }

  if (pcb == NULL) {
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	2b00      	cmp	r3, #0
 800e448:	f040 80aa 	bne.w	800e5a0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e44c:	4b51      	ldr	r3, [pc, #324]	; (800e594 <tcp_input+0x4b8>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	61fb      	str	r3, [r7, #28]
 800e452:	e03f      	b.n	800e4d4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	7d1b      	ldrb	r3, [r3, #20]
 800e458:	2b0a      	cmp	r3, #10
 800e45a:	d006      	beq.n	800e46a <tcp_input+0x38e>
 800e45c:	4b48      	ldr	r3, [pc, #288]	; (800e580 <tcp_input+0x4a4>)
 800e45e:	f240 121f 	movw	r2, #287	; 0x11f
 800e462:	494d      	ldr	r1, [pc, #308]	; (800e598 <tcp_input+0x4bc>)
 800e464:	4848      	ldr	r0, [pc, #288]	; (800e588 <tcp_input+0x4ac>)
 800e466:	f004 f91b 	bl	80126a0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e46a:	69fb      	ldr	r3, [r7, #28]
 800e46c:	7a1b      	ldrb	r3, [r3, #8]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d009      	beq.n	800e486 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	7a1a      	ldrb	r2, [r3, #8]
 800e476:	4b41      	ldr	r3, [pc, #260]	; (800e57c <tcp_input+0x4a0>)
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e47e:	3301      	adds	r3, #1
 800e480:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e482:	429a      	cmp	r2, r3
 800e484:	d122      	bne.n	800e4cc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e486:	69fb      	ldr	r3, [r7, #28]
 800e488:	8b1a      	ldrh	r2, [r3, #24]
 800e48a:	4b3b      	ldr	r3, [pc, #236]	; (800e578 <tcp_input+0x49c>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	881b      	ldrh	r3, [r3, #0]
 800e490:	b29b      	uxth	r3, r3
 800e492:	429a      	cmp	r2, r3
 800e494:	d11b      	bne.n	800e4ce <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	8ada      	ldrh	r2, [r3, #22]
 800e49a:	4b37      	ldr	r3, [pc, #220]	; (800e578 <tcp_input+0x49c>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	885b      	ldrh	r3, [r3, #2]
 800e4a0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d113      	bne.n	800e4ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	685a      	ldr	r2, [r3, #4]
 800e4aa:	4b34      	ldr	r3, [pc, #208]	; (800e57c <tcp_input+0x4a0>)
 800e4ac:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d10d      	bne.n	800e4ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e4b2:	69fb      	ldr	r3, [r7, #28]
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	4b31      	ldr	r3, [pc, #196]	; (800e57c <tcp_input+0x4a0>)
 800e4b8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d107      	bne.n	800e4ce <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e4be:	69f8      	ldr	r0, [r7, #28]
 800e4c0:	f000 fb56 	bl	800eb70 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f7fd febf 	bl	800c248 <pbuf_free>
        return;
 800e4ca:	e1fd      	b.n	800e8c8 <tcp_input+0x7ec>
        continue;
 800e4cc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	68db      	ldr	r3, [r3, #12]
 800e4d2:	61fb      	str	r3, [r7, #28]
 800e4d4:	69fb      	ldr	r3, [r7, #28]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1bc      	bne.n	800e454 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e4de:	4b2f      	ldr	r3, [pc, #188]	; (800e59c <tcp_input+0x4c0>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	617b      	str	r3, [r7, #20]
 800e4e4:	e02a      	b.n	800e53c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	7a1b      	ldrb	r3, [r3, #8]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d00c      	beq.n	800e508 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	7a1a      	ldrb	r2, [r3, #8]
 800e4f2:	4b22      	ldr	r3, [pc, #136]	; (800e57c <tcp_input+0x4a0>)
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d002      	beq.n	800e508 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	61bb      	str	r3, [r7, #24]
        continue;
 800e506:	e016      	b.n	800e536 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	8ada      	ldrh	r2, [r3, #22]
 800e50c:	4b1a      	ldr	r3, [pc, #104]	; (800e578 <tcp_input+0x49c>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	885b      	ldrh	r3, [r3, #2]
 800e512:	b29b      	uxth	r3, r3
 800e514:	429a      	cmp	r2, r3
 800e516:	d10c      	bne.n	800e532 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	4b17      	ldr	r3, [pc, #92]	; (800e57c <tcp_input+0x4a0>)
 800e51e:	695b      	ldr	r3, [r3, #20]
 800e520:	429a      	cmp	r2, r3
 800e522:	d00f      	beq.n	800e544 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d00d      	beq.n	800e546 <tcp_input+0x46a>
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d009      	beq.n	800e546 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	617b      	str	r3, [r7, #20]
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d1d1      	bne.n	800e4e6 <tcp_input+0x40a>
 800e542:	e000      	b.n	800e546 <tcp_input+0x46a>
            break;
 800e544:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d029      	beq.n	800e5a0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e54c:	69bb      	ldr	r3, [r7, #24]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d00a      	beq.n	800e568 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	68da      	ldr	r2, [r3, #12]
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e55a:	4b10      	ldr	r3, [pc, #64]	; (800e59c <tcp_input+0x4c0>)
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e562:	4a0e      	ldr	r2, [pc, #56]	; (800e59c <tcp_input+0x4c0>)
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e568:	6978      	ldr	r0, [r7, #20]
 800e56a:	f000 fa03 	bl	800e974 <tcp_listen_input>
      }
      pbuf_free(p);
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7fd fe6a 	bl	800c248 <pbuf_free>
      return;
 800e574:	e1a8      	b.n	800e8c8 <tcp_input+0x7ec>
 800e576:	bf00      	nop
 800e578:	24007448 	.word	0x24007448
 800e57c:	2400430c 	.word	0x2400430c
 800e580:	08015354 	.word	0x08015354
 800e584:	080154bc 	.word	0x080154bc
 800e588:	080153dc 	.word	0x080153dc
 800e58c:	2400742c 	.word	0x2400742c
 800e590:	080154e8 	.word	0x080154e8
 800e594:	24007430 	.word	0x24007430
 800e598:	08015514 	.word	0x08015514
 800e59c:	24007428 	.word	0x24007428
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	f000 8158 	beq.w	800e858 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e5a8:	4b95      	ldr	r3, [pc, #596]	; (800e800 <tcp_input+0x724>)
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	891a      	ldrh	r2, [r3, #8]
 800e5b2:	4b93      	ldr	r3, [pc, #588]	; (800e800 <tcp_input+0x724>)
 800e5b4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e5b6:	4a92      	ldr	r2, [pc, #584]	; (800e800 <tcp_input+0x724>)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e5bc:	4b91      	ldr	r3, [pc, #580]	; (800e804 <tcp_input+0x728>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a8f      	ldr	r2, [pc, #572]	; (800e800 <tcp_input+0x724>)
 800e5c2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e5c4:	4b90      	ldr	r3, [pc, #576]	; (800e808 <tcp_input+0x72c>)
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e5ca:	4b90      	ldr	r3, [pc, #576]	; (800e80c <tcp_input+0x730>)
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e5d0:	4b8f      	ldr	r3, [pc, #572]	; (800e810 <tcp_input+0x734>)
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e5d6:	4b8f      	ldr	r3, [pc, #572]	; (800e814 <tcp_input+0x738>)
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	f003 0308 	and.w	r3, r3, #8
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d006      	beq.n	800e5f0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	7b5b      	ldrb	r3, [r3, #13]
 800e5e6:	f043 0301 	orr.w	r3, r3, #1
 800e5ea:	b2da      	uxtb	r2, r3
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d017      	beq.n	800e628 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e5f8:	69f8      	ldr	r0, [r7, #28]
 800e5fa:	f7ff f929 	bl	800d850 <tcp_process_refused_data>
 800e5fe:	4603      	mov	r3, r0
 800e600:	f113 0f0d 	cmn.w	r3, #13
 800e604:	d007      	beq.n	800e616 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e606:	69fb      	ldr	r3, [r7, #28]
 800e608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d00c      	beq.n	800e628 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e60e:	4b82      	ldr	r3, [pc, #520]	; (800e818 <tcp_input+0x73c>)
 800e610:	881b      	ldrh	r3, [r3, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d008      	beq.n	800e628 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	f040 80e3 	bne.w	800e7e6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e620:	69f8      	ldr	r0, [r7, #28]
 800e622:	f003 f9ad 	bl	8011980 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e626:	e0de      	b.n	800e7e6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e628:	4a7c      	ldr	r2, [pc, #496]	; (800e81c <tcp_input+0x740>)
 800e62a:	69fb      	ldr	r3, [r7, #28]
 800e62c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e62e:	69f8      	ldr	r0, [r7, #28]
 800e630:	f000 fb18 	bl	800ec64 <tcp_process>
 800e634:	4603      	mov	r3, r0
 800e636:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e638:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e63c:	f113 0f0d 	cmn.w	r3, #13
 800e640:	f000 80d3 	beq.w	800e7ea <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e644:	4b71      	ldr	r3, [pc, #452]	; (800e80c <tcp_input+0x730>)
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	f003 0308 	and.w	r3, r3, #8
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d015      	beq.n	800e67c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e650:	69fb      	ldr	r3, [r7, #28]
 800e652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e656:	2b00      	cmp	r3, #0
 800e658:	d008      	beq.n	800e66c <tcp_input+0x590>
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e660:	69fa      	ldr	r2, [r7, #28]
 800e662:	6912      	ldr	r2, [r2, #16]
 800e664:	f06f 010d 	mvn.w	r1, #13
 800e668:	4610      	mov	r0, r2
 800e66a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e66c:	69f9      	ldr	r1, [r7, #28]
 800e66e:	486c      	ldr	r0, [pc, #432]	; (800e820 <tcp_input+0x744>)
 800e670:	f7ff fbbc 	bl	800ddec <tcp_pcb_remove>
        tcp_free(pcb);
 800e674:	69f8      	ldr	r0, [r7, #28]
 800e676:	f7fe f9a9 	bl	800c9cc <tcp_free>
 800e67a:	e0da      	b.n	800e832 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e67c:	2300      	movs	r3, #0
 800e67e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e680:	4b63      	ldr	r3, [pc, #396]	; (800e810 <tcp_input+0x734>)
 800e682:	881b      	ldrh	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d01d      	beq.n	800e6c4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e688:	4b61      	ldr	r3, [pc, #388]	; (800e810 <tcp_input+0x734>)
 800e68a:	881b      	ldrh	r3, [r3, #0]
 800e68c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e68e:	69fb      	ldr	r3, [r7, #28]
 800e690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e694:	2b00      	cmp	r3, #0
 800e696:	d00a      	beq.n	800e6ae <tcp_input+0x5d2>
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e69e:	69fa      	ldr	r2, [r7, #28]
 800e6a0:	6910      	ldr	r0, [r2, #16]
 800e6a2:	89fa      	ldrh	r2, [r7, #14]
 800e6a4:	69f9      	ldr	r1, [r7, #28]
 800e6a6:	4798      	blx	r3
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	74fb      	strb	r3, [r7, #19]
 800e6ac:	e001      	b.n	800e6b2 <tcp_input+0x5d6>
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e6b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e6b6:	f113 0f0d 	cmn.w	r3, #13
 800e6ba:	f000 8098 	beq.w	800e7ee <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e6be:	4b54      	ldr	r3, [pc, #336]	; (800e810 <tcp_input+0x734>)
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e6c4:	69f8      	ldr	r0, [r7, #28]
 800e6c6:	f000 f915 	bl	800e8f4 <tcp_input_delayed_close>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f040 8090 	bne.w	800e7f2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e6d2:	4b4d      	ldr	r3, [pc, #308]	; (800e808 <tcp_input+0x72c>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d041      	beq.n	800e75e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e6da:	69fb      	ldr	r3, [r7, #28]
 800e6dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d006      	beq.n	800e6f0 <tcp_input+0x614>
 800e6e2:	4b50      	ldr	r3, [pc, #320]	; (800e824 <tcp_input+0x748>)
 800e6e4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e6e8:	494f      	ldr	r1, [pc, #316]	; (800e828 <tcp_input+0x74c>)
 800e6ea:	4850      	ldr	r0, [pc, #320]	; (800e82c <tcp_input+0x750>)
 800e6ec:	f003 ffd8 	bl	80126a0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	8b5b      	ldrh	r3, [r3, #26]
 800e6f4:	f003 0310 	and.w	r3, r3, #16
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d008      	beq.n	800e70e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e6fc:	4b42      	ldr	r3, [pc, #264]	; (800e808 <tcp_input+0x72c>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4618      	mov	r0, r3
 800e702:	f7fd fda1 	bl	800c248 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e706:	69f8      	ldr	r0, [r7, #28]
 800e708:	f7fe fc48 	bl	800cf9c <tcp_abort>
            goto aborted;
 800e70c:	e091      	b.n	800e832 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e714:	2b00      	cmp	r3, #0
 800e716:	d00c      	beq.n	800e732 <tcp_input+0x656>
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	6918      	ldr	r0, [r3, #16]
 800e722:	4b39      	ldr	r3, [pc, #228]	; (800e808 <tcp_input+0x72c>)
 800e724:	681a      	ldr	r2, [r3, #0]
 800e726:	2300      	movs	r3, #0
 800e728:	69f9      	ldr	r1, [r7, #28]
 800e72a:	47a0      	blx	r4
 800e72c:	4603      	mov	r3, r0
 800e72e:	74fb      	strb	r3, [r7, #19]
 800e730:	e008      	b.n	800e744 <tcp_input+0x668>
 800e732:	4b35      	ldr	r3, [pc, #212]	; (800e808 <tcp_input+0x72c>)
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	2300      	movs	r3, #0
 800e738:	69f9      	ldr	r1, [r7, #28]
 800e73a:	2000      	movs	r0, #0
 800e73c:	f7ff f95e 	bl	800d9fc <tcp_recv_null>
 800e740:	4603      	mov	r3, r0
 800e742:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e744:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e748:	f113 0f0d 	cmn.w	r3, #13
 800e74c:	d053      	beq.n	800e7f6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e74e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d003      	beq.n	800e75e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e756:	4b2c      	ldr	r3, [pc, #176]	; (800e808 <tcp_input+0x72c>)
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	69fb      	ldr	r3, [r7, #28]
 800e75c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e75e:	4b2b      	ldr	r3, [pc, #172]	; (800e80c <tcp_input+0x730>)
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	f003 0320 	and.w	r3, r3, #32
 800e766:	2b00      	cmp	r3, #0
 800e768:	d030      	beq.n	800e7cc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d009      	beq.n	800e786 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e776:	7b5a      	ldrb	r2, [r3, #13]
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e77c:	f042 0220 	orr.w	r2, r2, #32
 800e780:	b2d2      	uxtb	r2, r2
 800e782:	735a      	strb	r2, [r3, #13]
 800e784:	e022      	b.n	800e7cc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e786:	69fb      	ldr	r3, [r7, #28]
 800e788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e78a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e78e:	d005      	beq.n	800e79c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e790:	69fb      	ldr	r3, [r7, #28]
 800e792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e794:	3301      	adds	r3, #1
 800e796:	b29a      	uxth	r2, r3
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d00b      	beq.n	800e7be <tcp_input+0x6e2>
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	6918      	ldr	r0, [r3, #16]
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	69f9      	ldr	r1, [r7, #28]
 800e7b6:	47a0      	blx	r4
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	74fb      	strb	r3, [r7, #19]
 800e7bc:	e001      	b.n	800e7c2 <tcp_input+0x6e6>
 800e7be:	2300      	movs	r3, #0
 800e7c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e7c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e7c6:	f113 0f0d 	cmn.w	r3, #13
 800e7ca:	d016      	beq.n	800e7fa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e7cc:	4b13      	ldr	r3, [pc, #76]	; (800e81c <tcp_input+0x740>)
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e7d2:	69f8      	ldr	r0, [r7, #28]
 800e7d4:	f000 f88e 	bl	800e8f4 <tcp_input_delayed_close>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d128      	bne.n	800e830 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e7de:	69f8      	ldr	r0, [r7, #28]
 800e7e0:	f002 fac8 	bl	8010d74 <tcp_output>
 800e7e4:	e025      	b.n	800e832 <tcp_input+0x756>
        goto aborted;
 800e7e6:	bf00      	nop
 800e7e8:	e023      	b.n	800e832 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e7ea:	bf00      	nop
 800e7ec:	e021      	b.n	800e832 <tcp_input+0x756>
              goto aborted;
 800e7ee:	bf00      	nop
 800e7f0:	e01f      	b.n	800e832 <tcp_input+0x756>
          goto aborted;
 800e7f2:	bf00      	nop
 800e7f4:	e01d      	b.n	800e832 <tcp_input+0x756>
            goto aborted;
 800e7f6:	bf00      	nop
 800e7f8:	e01b      	b.n	800e832 <tcp_input+0x756>
              goto aborted;
 800e7fa:	bf00      	nop
 800e7fc:	e019      	b.n	800e832 <tcp_input+0x756>
 800e7fe:	bf00      	nop
 800e800:	24007438 	.word	0x24007438
 800e804:	24007448 	.word	0x24007448
 800e808:	24007468 	.word	0x24007468
 800e80c:	24007465 	.word	0x24007465
 800e810:	24007460 	.word	0x24007460
 800e814:	24007464 	.word	0x24007464
 800e818:	24007462 	.word	0x24007462
 800e81c:	2400746c 	.word	0x2400746c
 800e820:	2400742c 	.word	0x2400742c
 800e824:	08015354 	.word	0x08015354
 800e828:	08015544 	.word	0x08015544
 800e82c:	080153dc 	.word	0x080153dc
          goto aborted;
 800e830:	bf00      	nop
    tcp_input_pcb = NULL;
 800e832:	4b27      	ldr	r3, [pc, #156]	; (800e8d0 <tcp_input+0x7f4>)
 800e834:	2200      	movs	r2, #0
 800e836:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e838:	4b26      	ldr	r3, [pc, #152]	; (800e8d4 <tcp_input+0x7f8>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e83e:	4b26      	ldr	r3, [pc, #152]	; (800e8d8 <tcp_input+0x7fc>)
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d03f      	beq.n	800e8c6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e846:	4b24      	ldr	r3, [pc, #144]	; (800e8d8 <tcp_input+0x7fc>)
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7fd fcfc 	bl	800c248 <pbuf_free>
      inseg.p = NULL;
 800e850:	4b21      	ldr	r3, [pc, #132]	; (800e8d8 <tcp_input+0x7fc>)
 800e852:	2200      	movs	r2, #0
 800e854:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e856:	e036      	b.n	800e8c6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e858:	4b20      	ldr	r3, [pc, #128]	; (800e8dc <tcp_input+0x800>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	899b      	ldrh	r3, [r3, #12]
 800e85e:	b29b      	uxth	r3, r3
 800e860:	4618      	mov	r0, r3
 800e862:	f7f9 fd4b 	bl	80082fc <lwip_htons>
 800e866:	4603      	mov	r3, r0
 800e868:	b2db      	uxtb	r3, r3
 800e86a:	f003 0304 	and.w	r3, r3, #4
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d118      	bne.n	800e8a4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e872:	4b1b      	ldr	r3, [pc, #108]	; (800e8e0 <tcp_input+0x804>)
 800e874:	6819      	ldr	r1, [r3, #0]
 800e876:	4b1b      	ldr	r3, [pc, #108]	; (800e8e4 <tcp_input+0x808>)
 800e878:	881b      	ldrh	r3, [r3, #0]
 800e87a:	461a      	mov	r2, r3
 800e87c:	4b1a      	ldr	r3, [pc, #104]	; (800e8e8 <tcp_input+0x80c>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e882:	4b16      	ldr	r3, [pc, #88]	; (800e8dc <tcp_input+0x800>)
 800e884:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e886:	885b      	ldrh	r3, [r3, #2]
 800e888:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e88a:	4a14      	ldr	r2, [pc, #80]	; (800e8dc <tcp_input+0x800>)
 800e88c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e88e:	8812      	ldrh	r2, [r2, #0]
 800e890:	b292      	uxth	r2, r2
 800e892:	9202      	str	r2, [sp, #8]
 800e894:	9301      	str	r3, [sp, #4]
 800e896:	4b15      	ldr	r3, [pc, #84]	; (800e8ec <tcp_input+0x810>)
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	4b15      	ldr	r3, [pc, #84]	; (800e8f0 <tcp_input+0x814>)
 800e89c:	4602      	mov	r2, r0
 800e89e:	2000      	movs	r0, #0
 800e8a0:	f003 f81c 	bl	80118dc <tcp_rst>
    pbuf_free(p);
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f7fd fccf 	bl	800c248 <pbuf_free>
  return;
 800e8aa:	e00c      	b.n	800e8c6 <tcp_input+0x7ea>
    goto dropped;
 800e8ac:	bf00      	nop
 800e8ae:	e006      	b.n	800e8be <tcp_input+0x7e2>
    goto dropped;
 800e8b0:	bf00      	nop
 800e8b2:	e004      	b.n	800e8be <tcp_input+0x7e2>
    goto dropped;
 800e8b4:	bf00      	nop
 800e8b6:	e002      	b.n	800e8be <tcp_input+0x7e2>
      goto dropped;
 800e8b8:	bf00      	nop
 800e8ba:	e000      	b.n	800e8be <tcp_input+0x7e2>
      goto dropped;
 800e8bc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f7fd fcc2 	bl	800c248 <pbuf_free>
 800e8c4:	e000      	b.n	800e8c8 <tcp_input+0x7ec>
  return;
 800e8c6:	bf00      	nop
}
 800e8c8:	3724      	adds	r7, #36	; 0x24
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd90      	pop	{r4, r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	2400746c 	.word	0x2400746c
 800e8d4:	24007468 	.word	0x24007468
 800e8d8:	24007438 	.word	0x24007438
 800e8dc:	24007448 	.word	0x24007448
 800e8e0:	2400745c 	.word	0x2400745c
 800e8e4:	24007462 	.word	0x24007462
 800e8e8:	24007458 	.word	0x24007458
 800e8ec:	2400431c 	.word	0x2400431c
 800e8f0:	24004320 	.word	0x24004320

0800e8f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d106      	bne.n	800e910 <tcp_input_delayed_close+0x1c>
 800e902:	4b17      	ldr	r3, [pc, #92]	; (800e960 <tcp_input_delayed_close+0x6c>)
 800e904:	f240 225a 	movw	r2, #602	; 0x25a
 800e908:	4916      	ldr	r1, [pc, #88]	; (800e964 <tcp_input_delayed_close+0x70>)
 800e90a:	4817      	ldr	r0, [pc, #92]	; (800e968 <tcp_input_delayed_close+0x74>)
 800e90c:	f003 fec8 	bl	80126a0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e910:	4b16      	ldr	r3, [pc, #88]	; (800e96c <tcp_input_delayed_close+0x78>)
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	f003 0310 	and.w	r3, r3, #16
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d01c      	beq.n	800e956 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	8b5b      	ldrh	r3, [r3, #26]
 800e920:	f003 0310 	and.w	r3, r3, #16
 800e924:	2b00      	cmp	r3, #0
 800e926:	d10d      	bne.n	800e944 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d008      	beq.n	800e944 <tcp_input_delayed_close+0x50>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e938:	687a      	ldr	r2, [r7, #4]
 800e93a:	6912      	ldr	r2, [r2, #16]
 800e93c:	f06f 010e 	mvn.w	r1, #14
 800e940:	4610      	mov	r0, r2
 800e942:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e944:	6879      	ldr	r1, [r7, #4]
 800e946:	480a      	ldr	r0, [pc, #40]	; (800e970 <tcp_input_delayed_close+0x7c>)
 800e948:	f7ff fa50 	bl	800ddec <tcp_pcb_remove>
    tcp_free(pcb);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f7fe f83d 	bl	800c9cc <tcp_free>
    return 1;
 800e952:	2301      	movs	r3, #1
 800e954:	e000      	b.n	800e958 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e956:	2300      	movs	r3, #0
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3708      	adds	r7, #8
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	08015354 	.word	0x08015354
 800e964:	08015560 	.word	0x08015560
 800e968:	080153dc 	.word	0x080153dc
 800e96c:	24007465 	.word	0x24007465
 800e970:	2400742c 	.word	0x2400742c

0800e974 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e974:	b590      	push	{r4, r7, lr}
 800e976:	b08b      	sub	sp, #44	; 0x2c
 800e978:	af04      	add	r7, sp, #16
 800e97a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e97c:	4b6f      	ldr	r3, [pc, #444]	; (800eb3c <tcp_listen_input+0x1c8>)
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	f003 0304 	and.w	r3, r3, #4
 800e984:	2b00      	cmp	r3, #0
 800e986:	f040 80d2 	bne.w	800eb2e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d106      	bne.n	800e99e <tcp_listen_input+0x2a>
 800e990:	4b6b      	ldr	r3, [pc, #428]	; (800eb40 <tcp_listen_input+0x1cc>)
 800e992:	f240 2281 	movw	r2, #641	; 0x281
 800e996:	496b      	ldr	r1, [pc, #428]	; (800eb44 <tcp_listen_input+0x1d0>)
 800e998:	486b      	ldr	r0, [pc, #428]	; (800eb48 <tcp_listen_input+0x1d4>)
 800e99a:	f003 fe81 	bl	80126a0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e99e:	4b67      	ldr	r3, [pc, #412]	; (800eb3c <tcp_listen_input+0x1c8>)
 800e9a0:	781b      	ldrb	r3, [r3, #0]
 800e9a2:	f003 0310 	and.w	r3, r3, #16
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d019      	beq.n	800e9de <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9aa:	4b68      	ldr	r3, [pc, #416]	; (800eb4c <tcp_listen_input+0x1d8>)
 800e9ac:	6819      	ldr	r1, [r3, #0]
 800e9ae:	4b68      	ldr	r3, [pc, #416]	; (800eb50 <tcp_listen_input+0x1dc>)
 800e9b0:	881b      	ldrh	r3, [r3, #0]
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	4b67      	ldr	r3, [pc, #412]	; (800eb54 <tcp_listen_input+0x1e0>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9ba:	4b67      	ldr	r3, [pc, #412]	; (800eb58 <tcp_listen_input+0x1e4>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9be:	885b      	ldrh	r3, [r3, #2]
 800e9c0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9c2:	4a65      	ldr	r2, [pc, #404]	; (800eb58 <tcp_listen_input+0x1e4>)
 800e9c4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9c6:	8812      	ldrh	r2, [r2, #0]
 800e9c8:	b292      	uxth	r2, r2
 800e9ca:	9202      	str	r2, [sp, #8]
 800e9cc:	9301      	str	r3, [sp, #4]
 800e9ce:	4b63      	ldr	r3, [pc, #396]	; (800eb5c <tcp_listen_input+0x1e8>)
 800e9d0:	9300      	str	r3, [sp, #0]
 800e9d2:	4b63      	ldr	r3, [pc, #396]	; (800eb60 <tcp_listen_input+0x1ec>)
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f002 ff80 	bl	80118dc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e9dc:	e0a9      	b.n	800eb32 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e9de:	4b57      	ldr	r3, [pc, #348]	; (800eb3c <tcp_listen_input+0x1c8>)
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	f003 0302 	and.w	r3, r3, #2
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	f000 80a3 	beq.w	800eb32 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	7d5b      	ldrb	r3, [r3, #21]
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7ff f927 	bl	800dc44 <tcp_alloc>
 800e9f6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d111      	bne.n	800ea22 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	699b      	ldr	r3, [r3, #24]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d00a      	beq.n	800ea1c <tcp_listen_input+0xa8>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	699b      	ldr	r3, [r3, #24]
 800ea0a:	687a      	ldr	r2, [r7, #4]
 800ea0c:	6910      	ldr	r0, [r2, #16]
 800ea0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea12:	2100      	movs	r1, #0
 800ea14:	4798      	blx	r3
 800ea16:	4603      	mov	r3, r0
 800ea18:	73bb      	strb	r3, [r7, #14]
      return;
 800ea1a:	e08b      	b.n	800eb34 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ea1c:	23f0      	movs	r3, #240	; 0xf0
 800ea1e:	73bb      	strb	r3, [r7, #14]
      return;
 800ea20:	e088      	b.n	800eb34 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ea22:	4b50      	ldr	r3, [pc, #320]	; (800eb64 <tcp_listen_input+0x1f0>)
 800ea24:	695a      	ldr	r2, [r3, #20]
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ea2a:	4b4e      	ldr	r3, [pc, #312]	; (800eb64 <tcp_listen_input+0x1f0>)
 800ea2c:	691a      	ldr	r2, [r3, #16]
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	8ada      	ldrh	r2, [r3, #22]
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ea3a:	4b47      	ldr	r3, [pc, #284]	; (800eb58 <tcp_listen_input+0x1e4>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	881b      	ldrh	r3, [r3, #0]
 800ea40:	b29a      	uxth	r2, r3
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	2203      	movs	r2, #3
 800ea4a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ea4c:	4b41      	ldr	r3, [pc, #260]	; (800eb54 <tcp_listen_input+0x1e0>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	1c5a      	adds	r2, r3, #1
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ea5e:	6978      	ldr	r0, [r7, #20]
 800ea60:	f7ff fa58 	bl	800df14 <tcp_next_iss>
 800ea64:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	693a      	ldr	r2, [r7, #16]
 800ea6a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	693a      	ldr	r2, [r7, #16]
 800ea70:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	693a      	ldr	r2, [r7, #16]
 800ea76:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	693a      	ldr	r2, [r7, #16]
 800ea7c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ea7e:	4b35      	ldr	r3, [pc, #212]	; (800eb54 <tcp_listen_input+0x1e0>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	1e5a      	subs	r2, r3, #1
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	691a      	ldr	r2, [r3, #16]
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	7a5b      	ldrb	r3, [r3, #9]
 800ea9a:	f003 030c 	and.w	r3, r3, #12
 800ea9e:	b2da      	uxtb	r2, r3
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	7a1a      	ldrb	r2, [r3, #8]
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800eaac:	4b2e      	ldr	r3, [pc, #184]	; (800eb68 <tcp_listen_input+0x1f4>)
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	60da      	str	r2, [r3, #12]
 800eab4:	4a2c      	ldr	r2, [pc, #176]	; (800eb68 <tcp_listen_input+0x1f4>)
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	6013      	str	r3, [r2, #0]
 800eaba:	f003 fa73 	bl	8011fa4 <tcp_timer_needed>
 800eabe:	4b2b      	ldr	r3, [pc, #172]	; (800eb6c <tcp_listen_input+0x1f8>)
 800eac0:	2201      	movs	r2, #1
 800eac2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800eac4:	6978      	ldr	r0, [r7, #20]
 800eac6:	f001 fd8f 	bl	80105e8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800eaca:	4b23      	ldr	r3, [pc, #140]	; (800eb58 <tcp_listen_input+0x1e4>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	89db      	ldrh	r3, [r3, #14]
 800ead0:	b29a      	uxth	r2, r3
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	3304      	adds	r3, #4
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7fa fedd 	bl	80098ac <ip4_route>
 800eaf2:	4601      	mov	r1, r0
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	3304      	adds	r3, #4
 800eaf8:	461a      	mov	r2, r3
 800eafa:	4620      	mov	r0, r4
 800eafc:	f7ff fa30 	bl	800df60 <tcp_eff_send_mss_netif>
 800eb00:	4603      	mov	r3, r0
 800eb02:	461a      	mov	r2, r3
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800eb08:	2112      	movs	r1, #18
 800eb0a:	6978      	ldr	r0, [r7, #20]
 800eb0c:	f002 f844 	bl	8010b98 <tcp_enqueue_flags>
 800eb10:	4603      	mov	r3, r0
 800eb12:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800eb14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d004      	beq.n	800eb26 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	6978      	ldr	r0, [r7, #20]
 800eb20:	f7fe f97e 	bl	800ce20 <tcp_abandon>
      return;
 800eb24:	e006      	b.n	800eb34 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800eb26:	6978      	ldr	r0, [r7, #20]
 800eb28:	f002 f924 	bl	8010d74 <tcp_output>
  return;
 800eb2c:	e001      	b.n	800eb32 <tcp_listen_input+0x1be>
    return;
 800eb2e:	bf00      	nop
 800eb30:	e000      	b.n	800eb34 <tcp_listen_input+0x1c0>
  return;
 800eb32:	bf00      	nop
}
 800eb34:	371c      	adds	r7, #28
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd90      	pop	{r4, r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	24007464 	.word	0x24007464
 800eb40:	08015354 	.word	0x08015354
 800eb44:	08015588 	.word	0x08015588
 800eb48:	080153dc 	.word	0x080153dc
 800eb4c:	2400745c 	.word	0x2400745c
 800eb50:	24007462 	.word	0x24007462
 800eb54:	24007458 	.word	0x24007458
 800eb58:	24007448 	.word	0x24007448
 800eb5c:	2400431c 	.word	0x2400431c
 800eb60:	24004320 	.word	0x24004320
 800eb64:	2400430c 	.word	0x2400430c
 800eb68:	2400742c 	.word	0x2400742c
 800eb6c:	24007434 	.word	0x24007434

0800eb70 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b086      	sub	sp, #24
 800eb74:	af04      	add	r7, sp, #16
 800eb76:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800eb78:	4b2f      	ldr	r3, [pc, #188]	; (800ec38 <tcp_timewait_input+0xc8>)
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	f003 0304 	and.w	r3, r3, #4
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d153      	bne.n	800ec2c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d106      	bne.n	800eb98 <tcp_timewait_input+0x28>
 800eb8a:	4b2c      	ldr	r3, [pc, #176]	; (800ec3c <tcp_timewait_input+0xcc>)
 800eb8c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800eb90:	492b      	ldr	r1, [pc, #172]	; (800ec40 <tcp_timewait_input+0xd0>)
 800eb92:	482c      	ldr	r0, [pc, #176]	; (800ec44 <tcp_timewait_input+0xd4>)
 800eb94:	f003 fd84 	bl	80126a0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800eb98:	4b27      	ldr	r3, [pc, #156]	; (800ec38 <tcp_timewait_input+0xc8>)
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	f003 0302 	and.w	r3, r3, #2
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d02a      	beq.n	800ebfa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800eba4:	4b28      	ldr	r3, [pc, #160]	; (800ec48 <tcp_timewait_input+0xd8>)
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebac:	1ad3      	subs	r3, r2, r3
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	db2d      	blt.n	800ec0e <tcp_timewait_input+0x9e>
 800ebb2:	4b25      	ldr	r3, [pc, #148]	; (800ec48 <tcp_timewait_input+0xd8>)
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebba:	6879      	ldr	r1, [r7, #4]
 800ebbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ebbe:	440b      	add	r3, r1
 800ebc0:	1ad3      	subs	r3, r2, r3
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	dc23      	bgt.n	800ec0e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebc6:	4b21      	ldr	r3, [pc, #132]	; (800ec4c <tcp_timewait_input+0xdc>)
 800ebc8:	6819      	ldr	r1, [r3, #0]
 800ebca:	4b21      	ldr	r3, [pc, #132]	; (800ec50 <tcp_timewait_input+0xe0>)
 800ebcc:	881b      	ldrh	r3, [r3, #0]
 800ebce:	461a      	mov	r2, r3
 800ebd0:	4b1d      	ldr	r3, [pc, #116]	; (800ec48 <tcp_timewait_input+0xd8>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebd6:	4b1f      	ldr	r3, [pc, #124]	; (800ec54 <tcp_timewait_input+0xe4>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebda:	885b      	ldrh	r3, [r3, #2]
 800ebdc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebde:	4a1d      	ldr	r2, [pc, #116]	; (800ec54 <tcp_timewait_input+0xe4>)
 800ebe0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebe2:	8812      	ldrh	r2, [r2, #0]
 800ebe4:	b292      	uxth	r2, r2
 800ebe6:	9202      	str	r2, [sp, #8]
 800ebe8:	9301      	str	r3, [sp, #4]
 800ebea:	4b1b      	ldr	r3, [pc, #108]	; (800ec58 <tcp_timewait_input+0xe8>)
 800ebec:	9300      	str	r3, [sp, #0]
 800ebee:	4b1b      	ldr	r3, [pc, #108]	; (800ec5c <tcp_timewait_input+0xec>)
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f002 fe72 	bl	80118dc <tcp_rst>
      return;
 800ebf8:	e01b      	b.n	800ec32 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ebfa:	4b0f      	ldr	r3, [pc, #60]	; (800ec38 <tcp_timewait_input+0xc8>)
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	f003 0301 	and.w	r3, r3, #1
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d003      	beq.n	800ec0e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ec06:	4b16      	ldr	r3, [pc, #88]	; (800ec60 <tcp_timewait_input+0xf0>)
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ec0e:	4b10      	ldr	r3, [pc, #64]	; (800ec50 <tcp_timewait_input+0xe0>)
 800ec10:	881b      	ldrh	r3, [r3, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d00c      	beq.n	800ec30 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	8b5b      	ldrh	r3, [r3, #26]
 800ec1a:	f043 0302 	orr.w	r3, r3, #2
 800ec1e:	b29a      	uxth	r2, r3
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f002 f8a5 	bl	8010d74 <tcp_output>
  }
  return;
 800ec2a:	e001      	b.n	800ec30 <tcp_timewait_input+0xc0>
    return;
 800ec2c:	bf00      	nop
 800ec2e:	e000      	b.n	800ec32 <tcp_timewait_input+0xc2>
  return;
 800ec30:	bf00      	nop
}
 800ec32:	3708      	adds	r7, #8
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}
 800ec38:	24007464 	.word	0x24007464
 800ec3c:	08015354 	.word	0x08015354
 800ec40:	080155a8 	.word	0x080155a8
 800ec44:	080153dc 	.word	0x080153dc
 800ec48:	24007458 	.word	0x24007458
 800ec4c:	2400745c 	.word	0x2400745c
 800ec50:	24007462 	.word	0x24007462
 800ec54:	24007448 	.word	0x24007448
 800ec58:	2400431c 	.word	0x2400431c
 800ec5c:	24004320 	.word	0x24004320
 800ec60:	24007420 	.word	0x24007420

0800ec64 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ec64:	b590      	push	{r4, r7, lr}
 800ec66:	b08d      	sub	sp, #52	; 0x34
 800ec68:	af04      	add	r7, sp, #16
 800ec6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ec70:	2300      	movs	r3, #0
 800ec72:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d106      	bne.n	800ec88 <tcp_process+0x24>
 800ec7a:	4b9d      	ldr	r3, [pc, #628]	; (800eef0 <tcp_process+0x28c>)
 800ec7c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ec80:	499c      	ldr	r1, [pc, #624]	; (800eef4 <tcp_process+0x290>)
 800ec82:	489d      	ldr	r0, [pc, #628]	; (800eef8 <tcp_process+0x294>)
 800ec84:	f003 fd0c 	bl	80126a0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ec88:	4b9c      	ldr	r3, [pc, #624]	; (800eefc <tcp_process+0x298>)
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	f003 0304 	and.w	r3, r3, #4
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d04e      	beq.n	800ed32 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	7d1b      	ldrb	r3, [r3, #20]
 800ec98:	2b02      	cmp	r3, #2
 800ec9a:	d108      	bne.n	800ecae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eca0:	4b97      	ldr	r3, [pc, #604]	; (800ef00 <tcp_process+0x29c>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d123      	bne.n	800ecf0 <tcp_process+0x8c>
        acceptable = 1;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	76fb      	strb	r3, [r7, #27]
 800ecac:	e020      	b.n	800ecf0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecb2:	4b94      	ldr	r3, [pc, #592]	; (800ef04 <tcp_process+0x2a0>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d102      	bne.n	800ecc0 <tcp_process+0x5c>
        acceptable = 1;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	76fb      	strb	r3, [r7, #27]
 800ecbe:	e017      	b.n	800ecf0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ecc0:	4b90      	ldr	r3, [pc, #576]	; (800ef04 <tcp_process+0x2a0>)
 800ecc2:	681a      	ldr	r2, [r3, #0]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc8:	1ad3      	subs	r3, r2, r3
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	db10      	blt.n	800ecf0 <tcp_process+0x8c>
 800ecce:	4b8d      	ldr	r3, [pc, #564]	; (800ef04 <tcp_process+0x2a0>)
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd6:	6879      	ldr	r1, [r7, #4]
 800ecd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ecda:	440b      	add	r3, r1
 800ecdc:	1ad3      	subs	r3, r2, r3
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	dc06      	bgt.n	800ecf0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	8b5b      	ldrh	r3, [r3, #26]
 800ece6:	f043 0302 	orr.w	r3, r3, #2
 800ecea:	b29a      	uxth	r2, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ecf0:	7efb      	ldrb	r3, [r7, #27]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d01b      	beq.n	800ed2e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	7d1b      	ldrb	r3, [r3, #20]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d106      	bne.n	800ed0c <tcp_process+0xa8>
 800ecfe:	4b7c      	ldr	r3, [pc, #496]	; (800eef0 <tcp_process+0x28c>)
 800ed00:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ed04:	4980      	ldr	r1, [pc, #512]	; (800ef08 <tcp_process+0x2a4>)
 800ed06:	487c      	ldr	r0, [pc, #496]	; (800eef8 <tcp_process+0x294>)
 800ed08:	f003 fcca 	bl	80126a0 <iprintf>
      recv_flags |= TF_RESET;
 800ed0c:	4b7f      	ldr	r3, [pc, #508]	; (800ef0c <tcp_process+0x2a8>)
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	f043 0308 	orr.w	r3, r3, #8
 800ed14:	b2da      	uxtb	r2, r3
 800ed16:	4b7d      	ldr	r3, [pc, #500]	; (800ef0c <tcp_process+0x2a8>)
 800ed18:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	8b5b      	ldrh	r3, [r3, #26]
 800ed1e:	f023 0301 	bic.w	r3, r3, #1
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ed28:	f06f 030d 	mvn.w	r3, #13
 800ed2c:	e37a      	b.n	800f424 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	e378      	b.n	800f424 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ed32:	4b72      	ldr	r3, [pc, #456]	; (800eefc <tcp_process+0x298>)
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	f003 0302 	and.w	r3, r3, #2
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d010      	beq.n	800ed60 <tcp_process+0xfc>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	7d1b      	ldrb	r3, [r3, #20]
 800ed42:	2b02      	cmp	r3, #2
 800ed44:	d00c      	beq.n	800ed60 <tcp_process+0xfc>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	7d1b      	ldrb	r3, [r3, #20]
 800ed4a:	2b03      	cmp	r3, #3
 800ed4c:	d008      	beq.n	800ed60 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	8b5b      	ldrh	r3, [r3, #26]
 800ed52:	f043 0302 	orr.w	r3, r3, #2
 800ed56:	b29a      	uxth	r2, r3
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	e361      	b.n	800f424 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	8b5b      	ldrh	r3, [r3, #26]
 800ed64:	f003 0310 	and.w	r3, r3, #16
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d103      	bne.n	800ed74 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ed6c:	4b68      	ldr	r3, [pc, #416]	; (800ef10 <tcp_process+0x2ac>)
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2200      	movs	r2, #0
 800ed78:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f001 fc2f 	bl	80105e8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	7d1b      	ldrb	r3, [r3, #20]
 800ed8e:	3b02      	subs	r3, #2
 800ed90:	2b07      	cmp	r3, #7
 800ed92:	f200 8337 	bhi.w	800f404 <tcp_process+0x7a0>
 800ed96:	a201      	add	r2, pc, #4	; (adr r2, 800ed9c <tcp_process+0x138>)
 800ed98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed9c:	0800edbd 	.word	0x0800edbd
 800eda0:	0800efed 	.word	0x0800efed
 800eda4:	0800f165 	.word	0x0800f165
 800eda8:	0800f18f 	.word	0x0800f18f
 800edac:	0800f2b3 	.word	0x0800f2b3
 800edb0:	0800f165 	.word	0x0800f165
 800edb4:	0800f33f 	.word	0x0800f33f
 800edb8:	0800f3cf 	.word	0x0800f3cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800edbc:	4b4f      	ldr	r3, [pc, #316]	; (800eefc <tcp_process+0x298>)
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	f003 0310 	and.w	r3, r3, #16
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f000 80e4 	beq.w	800ef92 <tcp_process+0x32e>
 800edca:	4b4c      	ldr	r3, [pc, #304]	; (800eefc <tcp_process+0x298>)
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	f003 0302 	and.w	r3, r3, #2
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	f000 80dd 	beq.w	800ef92 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eddc:	1c5a      	adds	r2, r3, #1
 800edde:	4b48      	ldr	r3, [pc, #288]	; (800ef00 <tcp_process+0x29c>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	f040 80d5 	bne.w	800ef92 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ede8:	4b46      	ldr	r3, [pc, #280]	; (800ef04 <tcp_process+0x2a0>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	1c5a      	adds	r2, r3, #1
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800edfa:	4b41      	ldr	r3, [pc, #260]	; (800ef00 <tcp_process+0x29c>)
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ee02:	4b44      	ldr	r3, [pc, #272]	; (800ef14 <tcp_process+0x2b0>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	89db      	ldrh	r3, [r3, #14]
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ee1c:	4b39      	ldr	r3, [pc, #228]	; (800ef04 <tcp_process+0x2a0>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	1e5a      	subs	r2, r3, #1
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2204      	movs	r2, #4
 800ee2a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	3304      	adds	r3, #4
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fa fd39 	bl	80098ac <ip4_route>
 800ee3a:	4601      	mov	r1, r0
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	3304      	adds	r3, #4
 800ee40:	461a      	mov	r2, r3
 800ee42:	4620      	mov	r0, r4
 800ee44:	f7ff f88c 	bl	800df60 <tcp_eff_send_mss_netif>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee54:	009a      	lsls	r2, r3, #2
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee5a:	005b      	lsls	r3, r3, #1
 800ee5c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ee60:	428b      	cmp	r3, r1
 800ee62:	bf38      	it	cc
 800ee64:	460b      	movcc	r3, r1
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d204      	bcs.n	800ee74 <tcp_process+0x210>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	e00d      	b.n	800ee90 <tcp_process+0x22c>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee78:	005b      	lsls	r3, r3, #1
 800ee7a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d904      	bls.n	800ee8c <tcp_process+0x228>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee86:	005b      	lsls	r3, r3, #1
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	e001      	b.n	800ee90 <tcp_process+0x22c>
 800ee8c:	f241 131c 	movw	r3, #4380	; 0x111c
 800ee90:	687a      	ldr	r2, [r7, #4]
 800ee92:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d106      	bne.n	800eeae <tcp_process+0x24a>
 800eea0:	4b13      	ldr	r3, [pc, #76]	; (800eef0 <tcp_process+0x28c>)
 800eea2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800eea6:	491c      	ldr	r1, [pc, #112]	; (800ef18 <tcp_process+0x2b4>)
 800eea8:	4813      	ldr	r0, [pc, #76]	; (800eef8 <tcp_process+0x294>)
 800eeaa:	f003 fbf9 	bl	80126a0 <iprintf>
        --pcb->snd_queuelen;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eeb4:	3b01      	subs	r3, #1
 800eeb6:	b29a      	uxth	r2, r3
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eec2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d12a      	bne.n	800ef20 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eece:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800eed0:	69fb      	ldr	r3, [r7, #28]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d106      	bne.n	800eee4 <tcp_process+0x280>
 800eed6:	4b06      	ldr	r3, [pc, #24]	; (800eef0 <tcp_process+0x28c>)
 800eed8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800eedc:	490f      	ldr	r1, [pc, #60]	; (800ef1c <tcp_process+0x2b8>)
 800eede:	4806      	ldr	r0, [pc, #24]	; (800eef8 <tcp_process+0x294>)
 800eee0:	f003 fbde 	bl	80126a0 <iprintf>
          pcb->unsent = rseg->next;
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	681a      	ldr	r2, [r3, #0]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	66da      	str	r2, [r3, #108]	; 0x6c
 800eeec:	e01c      	b.n	800ef28 <tcp_process+0x2c4>
 800eeee:	bf00      	nop
 800eef0:	08015354 	.word	0x08015354
 800eef4:	080155c8 	.word	0x080155c8
 800eef8:	080153dc 	.word	0x080153dc
 800eefc:	24007464 	.word	0x24007464
 800ef00:	2400745c 	.word	0x2400745c
 800ef04:	24007458 	.word	0x24007458
 800ef08:	080155e4 	.word	0x080155e4
 800ef0c:	24007465 	.word	0x24007465
 800ef10:	24007420 	.word	0x24007420
 800ef14:	24007448 	.word	0x24007448
 800ef18:	08015604 	.word	0x08015604
 800ef1c:	0801561c 	.word	0x0801561c
        } else {
          pcb->unacked = rseg->next;
 800ef20:	69fb      	ldr	r3, [r7, #28]
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ef28:	69f8      	ldr	r0, [r7, #28]
 800ef2a:	f7fe fd22 	bl	800d972 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d104      	bne.n	800ef40 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef3c:	861a      	strh	r2, [r3, #48]	; 0x30
 800ef3e:	e006      	b.n	800ef4e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d00a      	beq.n	800ef6e <tcp_process+0x30a>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	6910      	ldr	r0, [r2, #16]
 800ef62:	2200      	movs	r2, #0
 800ef64:	6879      	ldr	r1, [r7, #4]
 800ef66:	4798      	blx	r3
 800ef68:	4603      	mov	r3, r0
 800ef6a:	76bb      	strb	r3, [r7, #26]
 800ef6c:	e001      	b.n	800ef72 <tcp_process+0x30e>
 800ef6e:	2300      	movs	r3, #0
 800ef70:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ef72:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ef76:	f113 0f0d 	cmn.w	r3, #13
 800ef7a:	d102      	bne.n	800ef82 <tcp_process+0x31e>
          return ERR_ABRT;
 800ef7c:	f06f 030c 	mvn.w	r3, #12
 800ef80:	e250      	b.n	800f424 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	8b5b      	ldrh	r3, [r3, #26]
 800ef86:	f043 0302 	orr.w	r3, r3, #2
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ef90:	e23a      	b.n	800f408 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ef92:	4b98      	ldr	r3, [pc, #608]	; (800f1f4 <tcp_process+0x590>)
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	f003 0310 	and.w	r3, r3, #16
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	f000 8234 	beq.w	800f408 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800efa0:	4b95      	ldr	r3, [pc, #596]	; (800f1f8 <tcp_process+0x594>)
 800efa2:	6819      	ldr	r1, [r3, #0]
 800efa4:	4b95      	ldr	r3, [pc, #596]	; (800f1fc <tcp_process+0x598>)
 800efa6:	881b      	ldrh	r3, [r3, #0]
 800efa8:	461a      	mov	r2, r3
 800efaa:	4b95      	ldr	r3, [pc, #596]	; (800f200 <tcp_process+0x59c>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800efb0:	4b94      	ldr	r3, [pc, #592]	; (800f204 <tcp_process+0x5a0>)
 800efb2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800efb4:	885b      	ldrh	r3, [r3, #2]
 800efb6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800efb8:	4a92      	ldr	r2, [pc, #584]	; (800f204 <tcp_process+0x5a0>)
 800efba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800efbc:	8812      	ldrh	r2, [r2, #0]
 800efbe:	b292      	uxth	r2, r2
 800efc0:	9202      	str	r2, [sp, #8]
 800efc2:	9301      	str	r3, [sp, #4]
 800efc4:	4b90      	ldr	r3, [pc, #576]	; (800f208 <tcp_process+0x5a4>)
 800efc6:	9300      	str	r3, [sp, #0]
 800efc8:	4b90      	ldr	r3, [pc, #576]	; (800f20c <tcp_process+0x5a8>)
 800efca:	4602      	mov	r2, r0
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f002 fc85 	bl	80118dc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800efd8:	2b05      	cmp	r3, #5
 800efda:	f200 8215 	bhi.w	800f408 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2200      	movs	r2, #0
 800efe2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f002 fa4f 	bl	8011488 <tcp_rexmit_rto>
      break;
 800efea:	e20d      	b.n	800f408 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800efec:	4b81      	ldr	r3, [pc, #516]	; (800f1f4 <tcp_process+0x590>)
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	f003 0310 	and.w	r3, r3, #16
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	f000 80a1 	beq.w	800f13c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800effa:	4b7f      	ldr	r3, [pc, #508]	; (800f1f8 <tcp_process+0x594>)
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f002:	1ad3      	subs	r3, r2, r3
 800f004:	3b01      	subs	r3, #1
 800f006:	2b00      	cmp	r3, #0
 800f008:	db7e      	blt.n	800f108 <tcp_process+0x4a4>
 800f00a:	4b7b      	ldr	r3, [pc, #492]	; (800f1f8 <tcp_process+0x594>)
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f012:	1ad3      	subs	r3, r2, r3
 800f014:	2b00      	cmp	r3, #0
 800f016:	dc77      	bgt.n	800f108 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2204      	movs	r2, #4
 800f01c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f022:	2b00      	cmp	r3, #0
 800f024:	d102      	bne.n	800f02c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f026:	23fa      	movs	r3, #250	; 0xfa
 800f028:	76bb      	strb	r3, [r7, #26]
 800f02a:	e01d      	b.n	800f068 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f030:	699b      	ldr	r3, [r3, #24]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d106      	bne.n	800f044 <tcp_process+0x3e0>
 800f036:	4b76      	ldr	r3, [pc, #472]	; (800f210 <tcp_process+0x5ac>)
 800f038:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f03c:	4975      	ldr	r1, [pc, #468]	; (800f214 <tcp_process+0x5b0>)
 800f03e:	4876      	ldr	r0, [pc, #472]	; (800f218 <tcp_process+0x5b4>)
 800f040:	f003 fb2e 	bl	80126a0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f048:	699b      	ldr	r3, [r3, #24]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d00a      	beq.n	800f064 <tcp_process+0x400>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f052:	699b      	ldr	r3, [r3, #24]
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	6910      	ldr	r0, [r2, #16]
 800f058:	2200      	movs	r2, #0
 800f05a:	6879      	ldr	r1, [r7, #4]
 800f05c:	4798      	blx	r3
 800f05e:	4603      	mov	r3, r0
 800f060:	76bb      	strb	r3, [r7, #26]
 800f062:	e001      	b.n	800f068 <tcp_process+0x404>
 800f064:	23f0      	movs	r3, #240	; 0xf0
 800f066:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f068:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d00a      	beq.n	800f086 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f070:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f074:	f113 0f0d 	cmn.w	r3, #13
 800f078:	d002      	beq.n	800f080 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f7fd ff8e 	bl	800cf9c <tcp_abort>
            }
            return ERR_ABRT;
 800f080:	f06f 030c 	mvn.w	r3, #12
 800f084:	e1ce      	b.n	800f424 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f000 fae0 	bl	800f64c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f08c:	4b63      	ldr	r3, [pc, #396]	; (800f21c <tcp_process+0x5b8>)
 800f08e:	881b      	ldrh	r3, [r3, #0]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d005      	beq.n	800f0a0 <tcp_process+0x43c>
            recv_acked--;
 800f094:	4b61      	ldr	r3, [pc, #388]	; (800f21c <tcp_process+0x5b8>)
 800f096:	881b      	ldrh	r3, [r3, #0]
 800f098:	3b01      	subs	r3, #1
 800f09a:	b29a      	uxth	r2, r3
 800f09c:	4b5f      	ldr	r3, [pc, #380]	; (800f21c <tcp_process+0x5b8>)
 800f09e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0a4:	009a      	lsls	r2, r3, #2
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0aa:	005b      	lsls	r3, r3, #1
 800f0ac:	f241 111c 	movw	r1, #4380	; 0x111c
 800f0b0:	428b      	cmp	r3, r1
 800f0b2:	bf38      	it	cc
 800f0b4:	460b      	movcc	r3, r1
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d204      	bcs.n	800f0c4 <tcp_process+0x460>
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0be:	009b      	lsls	r3, r3, #2
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	e00d      	b.n	800f0e0 <tcp_process+0x47c>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0c8:	005b      	lsls	r3, r3, #1
 800f0ca:	f241 121c 	movw	r2, #4380	; 0x111c
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d904      	bls.n	800f0dc <tcp_process+0x478>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0d6:	005b      	lsls	r3, r3, #1
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	e001      	b.n	800f0e0 <tcp_process+0x47c>
 800f0dc:	f241 131c 	movw	r3, #4380	; 0x111c
 800f0e0:	687a      	ldr	r2, [r7, #4]
 800f0e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f0e6:	4b4e      	ldr	r3, [pc, #312]	; (800f220 <tcp_process+0x5bc>)
 800f0e8:	781b      	ldrb	r3, [r3, #0]
 800f0ea:	f003 0320 	and.w	r3, r3, #32
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d037      	beq.n	800f162 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	8b5b      	ldrh	r3, [r3, #26]
 800f0f6:	f043 0302 	orr.w	r3, r3, #2
 800f0fa:	b29a      	uxth	r2, r3
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2207      	movs	r2, #7
 800f104:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f106:	e02c      	b.n	800f162 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f108:	4b3b      	ldr	r3, [pc, #236]	; (800f1f8 <tcp_process+0x594>)
 800f10a:	6819      	ldr	r1, [r3, #0]
 800f10c:	4b3b      	ldr	r3, [pc, #236]	; (800f1fc <tcp_process+0x598>)
 800f10e:	881b      	ldrh	r3, [r3, #0]
 800f110:	461a      	mov	r2, r3
 800f112:	4b3b      	ldr	r3, [pc, #236]	; (800f200 <tcp_process+0x59c>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f118:	4b3a      	ldr	r3, [pc, #232]	; (800f204 <tcp_process+0x5a0>)
 800f11a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f11c:	885b      	ldrh	r3, [r3, #2]
 800f11e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f120:	4a38      	ldr	r2, [pc, #224]	; (800f204 <tcp_process+0x5a0>)
 800f122:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f124:	8812      	ldrh	r2, [r2, #0]
 800f126:	b292      	uxth	r2, r2
 800f128:	9202      	str	r2, [sp, #8]
 800f12a:	9301      	str	r3, [sp, #4]
 800f12c:	4b36      	ldr	r3, [pc, #216]	; (800f208 <tcp_process+0x5a4>)
 800f12e:	9300      	str	r3, [sp, #0]
 800f130:	4b36      	ldr	r3, [pc, #216]	; (800f20c <tcp_process+0x5a8>)
 800f132:	4602      	mov	r2, r0
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f002 fbd1 	bl	80118dc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f13a:	e167      	b.n	800f40c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f13c:	4b2d      	ldr	r3, [pc, #180]	; (800f1f4 <tcp_process+0x590>)
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	f003 0302 	and.w	r3, r3, #2
 800f144:	2b00      	cmp	r3, #0
 800f146:	f000 8161 	beq.w	800f40c <tcp_process+0x7a8>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f14e:	1e5a      	subs	r2, r3, #1
 800f150:	4b2b      	ldr	r3, [pc, #172]	; (800f200 <tcp_process+0x59c>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	429a      	cmp	r2, r3
 800f156:	f040 8159 	bne.w	800f40c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f002 f9b6 	bl	80114cc <tcp_rexmit>
      break;
 800f160:	e154      	b.n	800f40c <tcp_process+0x7a8>
 800f162:	e153      	b.n	800f40c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f000 fa71 	bl	800f64c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f16a:	4b2d      	ldr	r3, [pc, #180]	; (800f220 <tcp_process+0x5bc>)
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	f003 0320 	and.w	r3, r3, #32
 800f172:	2b00      	cmp	r3, #0
 800f174:	f000 814c 	beq.w	800f410 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	8b5b      	ldrh	r3, [r3, #26]
 800f17c:	f043 0302 	orr.w	r3, r3, #2
 800f180:	b29a      	uxth	r2, r3
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2207      	movs	r2, #7
 800f18a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f18c:	e140      	b.n	800f410 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f000 fa5c 	bl	800f64c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f194:	4b22      	ldr	r3, [pc, #136]	; (800f220 <tcp_process+0x5bc>)
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	f003 0320 	and.w	r3, r3, #32
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d071      	beq.n	800f284 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f1a0:	4b14      	ldr	r3, [pc, #80]	; (800f1f4 <tcp_process+0x590>)
 800f1a2:	781b      	ldrb	r3, [r3, #0]
 800f1a4:	f003 0310 	and.w	r3, r3, #16
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d060      	beq.n	800f26e <tcp_process+0x60a>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f1b0:	4b11      	ldr	r3, [pc, #68]	; (800f1f8 <tcp_process+0x594>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d15a      	bne.n	800f26e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d156      	bne.n	800f26e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	8b5b      	ldrh	r3, [r3, #26]
 800f1c4:	f043 0302 	orr.w	r3, r3, #2
 800f1c8:	b29a      	uxth	r2, r3
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f7fe fdbc 	bl	800dd4c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f1d4:	4b13      	ldr	r3, [pc, #76]	; (800f224 <tcp_process+0x5c0>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	687a      	ldr	r2, [r7, #4]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d105      	bne.n	800f1ea <tcp_process+0x586>
 800f1de:	4b11      	ldr	r3, [pc, #68]	; (800f224 <tcp_process+0x5c0>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	4a0f      	ldr	r2, [pc, #60]	; (800f224 <tcp_process+0x5c0>)
 800f1e6:	6013      	str	r3, [r2, #0]
 800f1e8:	e02e      	b.n	800f248 <tcp_process+0x5e4>
 800f1ea:	4b0e      	ldr	r3, [pc, #56]	; (800f224 <tcp_process+0x5c0>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	617b      	str	r3, [r7, #20]
 800f1f0:	e027      	b.n	800f242 <tcp_process+0x5de>
 800f1f2:	bf00      	nop
 800f1f4:	24007464 	.word	0x24007464
 800f1f8:	2400745c 	.word	0x2400745c
 800f1fc:	24007462 	.word	0x24007462
 800f200:	24007458 	.word	0x24007458
 800f204:	24007448 	.word	0x24007448
 800f208:	2400431c 	.word	0x2400431c
 800f20c:	24004320 	.word	0x24004320
 800f210:	08015354 	.word	0x08015354
 800f214:	08015630 	.word	0x08015630
 800f218:	080153dc 	.word	0x080153dc
 800f21c:	24007460 	.word	0x24007460
 800f220:	24007465 	.word	0x24007465
 800f224:	2400742c 	.word	0x2400742c
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	687a      	ldr	r2, [r7, #4]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d104      	bne.n	800f23c <tcp_process+0x5d8>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	68da      	ldr	r2, [r3, #12]
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	60da      	str	r2, [r3, #12]
 800f23a:	e005      	b.n	800f248 <tcp_process+0x5e4>
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	68db      	ldr	r3, [r3, #12]
 800f240:	617b      	str	r3, [r7, #20]
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d1ef      	bne.n	800f228 <tcp_process+0x5c4>
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2200      	movs	r2, #0
 800f24c:	60da      	str	r2, [r3, #12]
 800f24e:	4b77      	ldr	r3, [pc, #476]	; (800f42c <tcp_process+0x7c8>)
 800f250:	2201      	movs	r2, #1
 800f252:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	220a      	movs	r2, #10
 800f258:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f25a:	4b75      	ldr	r3, [pc, #468]	; (800f430 <tcp_process+0x7cc>)
 800f25c:	681a      	ldr	r2, [r3, #0]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	60da      	str	r2, [r3, #12]
 800f262:	4a73      	ldr	r2, [pc, #460]	; (800f430 <tcp_process+0x7cc>)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6013      	str	r3, [r2, #0]
 800f268:	f002 fe9c 	bl	8011fa4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f26c:	e0d2      	b.n	800f414 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	8b5b      	ldrh	r3, [r3, #26]
 800f272:	f043 0302 	orr.w	r3, r3, #2
 800f276:	b29a      	uxth	r2, r3
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2208      	movs	r2, #8
 800f280:	751a      	strb	r2, [r3, #20]
      break;
 800f282:	e0c7      	b.n	800f414 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f284:	4b6b      	ldr	r3, [pc, #428]	; (800f434 <tcp_process+0x7d0>)
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	f003 0310 	and.w	r3, r3, #16
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	f000 80c1 	beq.w	800f414 <tcp_process+0x7b0>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f296:	4b68      	ldr	r3, [pc, #416]	; (800f438 <tcp_process+0x7d4>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	f040 80ba 	bne.w	800f414 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f040 80b5 	bne.w	800f414 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2206      	movs	r2, #6
 800f2ae:	751a      	strb	r2, [r3, #20]
      break;
 800f2b0:	e0b0      	b.n	800f414 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f000 f9ca 	bl	800f64c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f2b8:	4b60      	ldr	r3, [pc, #384]	; (800f43c <tcp_process+0x7d8>)
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	f003 0320 	and.w	r3, r3, #32
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	f000 80a9 	beq.w	800f418 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	8b5b      	ldrh	r3, [r3, #26]
 800f2ca:	f043 0302 	orr.w	r3, r3, #2
 800f2ce:	b29a      	uxth	r2, r3
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f7fe fd39 	bl	800dd4c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f2da:	4b59      	ldr	r3, [pc, #356]	; (800f440 <tcp_process+0x7dc>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d105      	bne.n	800f2f0 <tcp_process+0x68c>
 800f2e4:	4b56      	ldr	r3, [pc, #344]	; (800f440 <tcp_process+0x7dc>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	68db      	ldr	r3, [r3, #12]
 800f2ea:	4a55      	ldr	r2, [pc, #340]	; (800f440 <tcp_process+0x7dc>)
 800f2ec:	6013      	str	r3, [r2, #0]
 800f2ee:	e013      	b.n	800f318 <tcp_process+0x6b4>
 800f2f0:	4b53      	ldr	r3, [pc, #332]	; (800f440 <tcp_process+0x7dc>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	613b      	str	r3, [r7, #16]
 800f2f6:	e00c      	b.n	800f312 <tcp_process+0x6ae>
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	68db      	ldr	r3, [r3, #12]
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d104      	bne.n	800f30c <tcp_process+0x6a8>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	68da      	ldr	r2, [r3, #12]
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	60da      	str	r2, [r3, #12]
 800f30a:	e005      	b.n	800f318 <tcp_process+0x6b4>
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	613b      	str	r3, [r7, #16]
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d1ef      	bne.n	800f2f8 <tcp_process+0x694>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2200      	movs	r2, #0
 800f31c:	60da      	str	r2, [r3, #12]
 800f31e:	4b43      	ldr	r3, [pc, #268]	; (800f42c <tcp_process+0x7c8>)
 800f320:	2201      	movs	r2, #1
 800f322:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	220a      	movs	r2, #10
 800f328:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f32a:	4b41      	ldr	r3, [pc, #260]	; (800f430 <tcp_process+0x7cc>)
 800f32c:	681a      	ldr	r2, [r3, #0]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	60da      	str	r2, [r3, #12]
 800f332:	4a3f      	ldr	r2, [pc, #252]	; (800f430 <tcp_process+0x7cc>)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6013      	str	r3, [r2, #0]
 800f338:	f002 fe34 	bl	8011fa4 <tcp_timer_needed>
      }
      break;
 800f33c:	e06c      	b.n	800f418 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f000 f984 	bl	800f64c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f344:	4b3b      	ldr	r3, [pc, #236]	; (800f434 <tcp_process+0x7d0>)
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	f003 0310 	and.w	r3, r3, #16
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d065      	beq.n	800f41c <tcp_process+0x7b8>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f354:	4b38      	ldr	r3, [pc, #224]	; (800f438 <tcp_process+0x7d4>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	429a      	cmp	r2, r3
 800f35a:	d15f      	bne.n	800f41c <tcp_process+0x7b8>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f360:	2b00      	cmp	r3, #0
 800f362:	d15b      	bne.n	800f41c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f7fe fcf1 	bl	800dd4c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f36a:	4b35      	ldr	r3, [pc, #212]	; (800f440 <tcp_process+0x7dc>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	687a      	ldr	r2, [r7, #4]
 800f370:	429a      	cmp	r2, r3
 800f372:	d105      	bne.n	800f380 <tcp_process+0x71c>
 800f374:	4b32      	ldr	r3, [pc, #200]	; (800f440 <tcp_process+0x7dc>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	68db      	ldr	r3, [r3, #12]
 800f37a:	4a31      	ldr	r2, [pc, #196]	; (800f440 <tcp_process+0x7dc>)
 800f37c:	6013      	str	r3, [r2, #0]
 800f37e:	e013      	b.n	800f3a8 <tcp_process+0x744>
 800f380:	4b2f      	ldr	r3, [pc, #188]	; (800f440 <tcp_process+0x7dc>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	60fb      	str	r3, [r7, #12]
 800f386:	e00c      	b.n	800f3a2 <tcp_process+0x73e>
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	68db      	ldr	r3, [r3, #12]
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	429a      	cmp	r2, r3
 800f390:	d104      	bne.n	800f39c <tcp_process+0x738>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	68da      	ldr	r2, [r3, #12]
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	60da      	str	r2, [r3, #12]
 800f39a:	e005      	b.n	800f3a8 <tcp_process+0x744>
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	68db      	ldr	r3, [r3, #12]
 800f3a0:	60fb      	str	r3, [r7, #12]
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d1ef      	bne.n	800f388 <tcp_process+0x724>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	60da      	str	r2, [r3, #12]
 800f3ae:	4b1f      	ldr	r3, [pc, #124]	; (800f42c <tcp_process+0x7c8>)
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	220a      	movs	r2, #10
 800f3b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f3ba:	4b1d      	ldr	r3, [pc, #116]	; (800f430 <tcp_process+0x7cc>)
 800f3bc:	681a      	ldr	r2, [r3, #0]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	60da      	str	r2, [r3, #12]
 800f3c2:	4a1b      	ldr	r2, [pc, #108]	; (800f430 <tcp_process+0x7cc>)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6013      	str	r3, [r2, #0]
 800f3c8:	f002 fdec 	bl	8011fa4 <tcp_timer_needed>
      }
      break;
 800f3cc:	e026      	b.n	800f41c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 f93c 	bl	800f64c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f3d4:	4b17      	ldr	r3, [pc, #92]	; (800f434 <tcp_process+0x7d0>)
 800f3d6:	781b      	ldrb	r3, [r3, #0]
 800f3d8:	f003 0310 	and.w	r3, r3, #16
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d01f      	beq.n	800f420 <tcp_process+0x7bc>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f3e4:	4b14      	ldr	r3, [pc, #80]	; (800f438 <tcp_process+0x7d4>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d119      	bne.n	800f420 <tcp_process+0x7bc>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d115      	bne.n	800f420 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f3f4:	4b11      	ldr	r3, [pc, #68]	; (800f43c <tcp_process+0x7d8>)
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	f043 0310 	orr.w	r3, r3, #16
 800f3fc:	b2da      	uxtb	r2, r3
 800f3fe:	4b0f      	ldr	r3, [pc, #60]	; (800f43c <tcp_process+0x7d8>)
 800f400:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f402:	e00d      	b.n	800f420 <tcp_process+0x7bc>
    default:
      break;
 800f404:	bf00      	nop
 800f406:	e00c      	b.n	800f422 <tcp_process+0x7be>
      break;
 800f408:	bf00      	nop
 800f40a:	e00a      	b.n	800f422 <tcp_process+0x7be>
      break;
 800f40c:	bf00      	nop
 800f40e:	e008      	b.n	800f422 <tcp_process+0x7be>
      break;
 800f410:	bf00      	nop
 800f412:	e006      	b.n	800f422 <tcp_process+0x7be>
      break;
 800f414:	bf00      	nop
 800f416:	e004      	b.n	800f422 <tcp_process+0x7be>
      break;
 800f418:	bf00      	nop
 800f41a:	e002      	b.n	800f422 <tcp_process+0x7be>
      break;
 800f41c:	bf00      	nop
 800f41e:	e000      	b.n	800f422 <tcp_process+0x7be>
      break;
 800f420:	bf00      	nop
  }
  return ERR_OK;
 800f422:	2300      	movs	r3, #0
}
 800f424:	4618      	mov	r0, r3
 800f426:	3724      	adds	r7, #36	; 0x24
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd90      	pop	{r4, r7, pc}
 800f42c:	24007434 	.word	0x24007434
 800f430:	24007430 	.word	0x24007430
 800f434:	24007464 	.word	0x24007464
 800f438:	2400745c 	.word	0x2400745c
 800f43c:	24007465 	.word	0x24007465
 800f440:	2400742c 	.word	0x2400742c

0800f444 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f444:	b590      	push	{r4, r7, lr}
 800f446:	b085      	sub	sp, #20
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d106      	bne.n	800f462 <tcp_oos_insert_segment+0x1e>
 800f454:	4b3b      	ldr	r3, [pc, #236]	; (800f544 <tcp_oos_insert_segment+0x100>)
 800f456:	f240 421f 	movw	r2, #1055	; 0x41f
 800f45a:	493b      	ldr	r1, [pc, #236]	; (800f548 <tcp_oos_insert_segment+0x104>)
 800f45c:	483b      	ldr	r0, [pc, #236]	; (800f54c <tcp_oos_insert_segment+0x108>)
 800f45e:	f003 f91f 	bl	80126a0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	68db      	ldr	r3, [r3, #12]
 800f466:	899b      	ldrh	r3, [r3, #12]
 800f468:	b29b      	uxth	r3, r3
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7f8 ff46 	bl	80082fc <lwip_htons>
 800f470:	4603      	mov	r3, r0
 800f472:	b2db      	uxtb	r3, r3
 800f474:	f003 0301 	and.w	r3, r3, #1
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d028      	beq.n	800f4ce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f47c:	6838      	ldr	r0, [r7, #0]
 800f47e:	f7fe fa63 	bl	800d948 <tcp_segs_free>
    next = NULL;
 800f482:	2300      	movs	r3, #0
 800f484:	603b      	str	r3, [r7, #0]
 800f486:	e056      	b.n	800f536 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	68db      	ldr	r3, [r3, #12]
 800f48c:	899b      	ldrh	r3, [r3, #12]
 800f48e:	b29b      	uxth	r3, r3
 800f490:	4618      	mov	r0, r3
 800f492:	f7f8 ff33 	bl	80082fc <lwip_htons>
 800f496:	4603      	mov	r3, r0
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	f003 0301 	and.w	r3, r3, #1
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d00d      	beq.n	800f4be <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	68db      	ldr	r3, [r3, #12]
 800f4a6:	899b      	ldrh	r3, [r3, #12]
 800f4a8:	b29c      	uxth	r4, r3
 800f4aa:	2001      	movs	r0, #1
 800f4ac:	f7f8 ff26 	bl	80082fc <lwip_htons>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	4322      	orrs	r2, r4
 800f4ba:	b292      	uxth	r2, r2
 800f4bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f4c8:	68f8      	ldr	r0, [r7, #12]
 800f4ca:	f7fe fa52 	bl	800d972 <tcp_seg_free>
    while (next &&
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d00e      	beq.n	800f4f2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	891b      	ldrh	r3, [r3, #8]
 800f4d8:	461a      	mov	r2, r3
 800f4da:	4b1d      	ldr	r3, [pc, #116]	; (800f550 <tcp_oos_insert_segment+0x10c>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	441a      	add	r2, r3
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	68db      	ldr	r3, [r3, #12]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	6839      	ldr	r1, [r7, #0]
 800f4e8:	8909      	ldrh	r1, [r1, #8]
 800f4ea:	440b      	add	r3, r1
 800f4ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	daca      	bge.n	800f488 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d01e      	beq.n	800f536 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	891b      	ldrh	r3, [r3, #8]
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	4b14      	ldr	r3, [pc, #80]	; (800f550 <tcp_oos_insert_segment+0x10c>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	441a      	add	r2, r3
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	dd12      	ble.n	800f536 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	b29a      	uxth	r2, r3
 800f518:	4b0d      	ldr	r3, [pc, #52]	; (800f550 <tcp_oos_insert_segment+0x10c>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	1ad3      	subs	r3, r2, r3
 800f520:	b29a      	uxth	r2, r3
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	685a      	ldr	r2, [r3, #4]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	891b      	ldrh	r3, [r3, #8]
 800f52e:	4619      	mov	r1, r3
 800f530:	4610      	mov	r0, r2
 800f532:	f7fc fd03 	bl	800bf3c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	683a      	ldr	r2, [r7, #0]
 800f53a:	601a      	str	r2, [r3, #0]
}
 800f53c:	bf00      	nop
 800f53e:	3714      	adds	r7, #20
 800f540:	46bd      	mov	sp, r7
 800f542:	bd90      	pop	{r4, r7, pc}
 800f544:	08015354 	.word	0x08015354
 800f548:	08015650 	.word	0x08015650
 800f54c:	080153dc 	.word	0x080153dc
 800f550:	24007458 	.word	0x24007458

0800f554 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f554:	b5b0      	push	{r4, r5, r7, lr}
 800f556:	b086      	sub	sp, #24
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	607a      	str	r2, [r7, #4]
 800f560:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f562:	e03e      	b.n	800f5e2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	685b      	ldr	r3, [r3, #4]
 800f572:	4618      	mov	r0, r3
 800f574:	f7fc fef6 	bl	800c364 <pbuf_clen>
 800f578:	4603      	mov	r3, r0
 800f57a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f582:	8a7a      	ldrh	r2, [r7, #18]
 800f584:	429a      	cmp	r2, r3
 800f586:	d906      	bls.n	800f596 <tcp_free_acked_segments+0x42>
 800f588:	4b2a      	ldr	r3, [pc, #168]	; (800f634 <tcp_free_acked_segments+0xe0>)
 800f58a:	f240 4257 	movw	r2, #1111	; 0x457
 800f58e:	492a      	ldr	r1, [pc, #168]	; (800f638 <tcp_free_acked_segments+0xe4>)
 800f590:	482a      	ldr	r0, [pc, #168]	; (800f63c <tcp_free_acked_segments+0xe8>)
 800f592:	f003 f885 	bl	80126a0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f59c:	8a7b      	ldrh	r3, [r7, #18]
 800f59e:	1ad3      	subs	r3, r2, r3
 800f5a0:	b29a      	uxth	r2, r3
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	891a      	ldrh	r2, [r3, #8]
 800f5ac:	4b24      	ldr	r3, [pc, #144]	; (800f640 <tcp_free_acked_segments+0xec>)
 800f5ae:	881b      	ldrh	r3, [r3, #0]
 800f5b0:	4413      	add	r3, r2
 800f5b2:	b29a      	uxth	r2, r3
 800f5b4:	4b22      	ldr	r3, [pc, #136]	; (800f640 <tcp_free_acked_segments+0xec>)
 800f5b6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f5b8:	6978      	ldr	r0, [r7, #20]
 800f5ba:	f7fe f9da 	bl	800d972 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d00c      	beq.n	800f5e2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d109      	bne.n	800f5e2 <tcp_free_acked_segments+0x8e>
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d106      	bne.n	800f5e2 <tcp_free_acked_segments+0x8e>
 800f5d4:	4b17      	ldr	r3, [pc, #92]	; (800f634 <tcp_free_acked_segments+0xe0>)
 800f5d6:	f240 4261 	movw	r2, #1121	; 0x461
 800f5da:	491a      	ldr	r1, [pc, #104]	; (800f644 <tcp_free_acked_segments+0xf0>)
 800f5dc:	4817      	ldr	r0, [pc, #92]	; (800f63c <tcp_free_acked_segments+0xe8>)
 800f5de:	f003 f85f 	bl	80126a0 <iprintf>
  while (seg_list != NULL &&
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d020      	beq.n	800f62a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	68db      	ldr	r3, [r3, #12]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7f8 fe99 	bl	8008326 <lwip_htonl>
 800f5f4:	4604      	mov	r4, r0
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	891b      	ldrh	r3, [r3, #8]
 800f5fa:	461d      	mov	r5, r3
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	899b      	ldrh	r3, [r3, #12]
 800f602:	b29b      	uxth	r3, r3
 800f604:	4618      	mov	r0, r3
 800f606:	f7f8 fe79 	bl	80082fc <lwip_htons>
 800f60a:	4603      	mov	r3, r0
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	f003 0303 	and.w	r3, r3, #3
 800f612:	2b00      	cmp	r3, #0
 800f614:	d001      	beq.n	800f61a <tcp_free_acked_segments+0xc6>
 800f616:	2301      	movs	r3, #1
 800f618:	e000      	b.n	800f61c <tcp_free_acked_segments+0xc8>
 800f61a:	2300      	movs	r3, #0
 800f61c:	442b      	add	r3, r5
 800f61e:	18e2      	adds	r2, r4, r3
 800f620:	4b09      	ldr	r3, [pc, #36]	; (800f648 <tcp_free_acked_segments+0xf4>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f626:	2b00      	cmp	r3, #0
 800f628:	dd9c      	ble.n	800f564 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f62a:	68bb      	ldr	r3, [r7, #8]
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3718      	adds	r7, #24
 800f630:	46bd      	mov	sp, r7
 800f632:	bdb0      	pop	{r4, r5, r7, pc}
 800f634:	08015354 	.word	0x08015354
 800f638:	08015678 	.word	0x08015678
 800f63c:	080153dc 	.word	0x080153dc
 800f640:	24007460 	.word	0x24007460
 800f644:	080156a0 	.word	0x080156a0
 800f648:	2400745c 	.word	0x2400745c

0800f64c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f64c:	b5b0      	push	{r4, r5, r7, lr}
 800f64e:	b094      	sub	sp, #80	; 0x50
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f654:	2300      	movs	r3, #0
 800f656:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d106      	bne.n	800f66c <tcp_receive+0x20>
 800f65e:	4b91      	ldr	r3, [pc, #580]	; (800f8a4 <tcp_receive+0x258>)
 800f660:	f240 427b 	movw	r2, #1147	; 0x47b
 800f664:	4990      	ldr	r1, [pc, #576]	; (800f8a8 <tcp_receive+0x25c>)
 800f666:	4891      	ldr	r0, [pc, #580]	; (800f8ac <tcp_receive+0x260>)
 800f668:	f003 f81a 	bl	80126a0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	7d1b      	ldrb	r3, [r3, #20]
 800f670:	2b03      	cmp	r3, #3
 800f672:	d806      	bhi.n	800f682 <tcp_receive+0x36>
 800f674:	4b8b      	ldr	r3, [pc, #556]	; (800f8a4 <tcp_receive+0x258>)
 800f676:	f240 427c 	movw	r2, #1148	; 0x47c
 800f67a:	498d      	ldr	r1, [pc, #564]	; (800f8b0 <tcp_receive+0x264>)
 800f67c:	488b      	ldr	r0, [pc, #556]	; (800f8ac <tcp_receive+0x260>)
 800f67e:	f003 f80f 	bl	80126a0 <iprintf>

  if (flags & TCP_ACK) {
 800f682:	4b8c      	ldr	r3, [pc, #560]	; (800f8b4 <tcp_receive+0x268>)
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	f003 0310 	and.w	r3, r3, #16
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	f000 8264 	beq.w	800fb58 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f696:	461a      	mov	r2, r3
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f69c:	4413      	add	r3, r2
 800f69e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f6a4:	4b84      	ldr	r3, [pc, #528]	; (800f8b8 <tcp_receive+0x26c>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	1ad3      	subs	r3, r2, r3
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	db1b      	blt.n	800f6e6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f6b2:	4b81      	ldr	r3, [pc, #516]	; (800f8b8 <tcp_receive+0x26c>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d106      	bne.n	800f6c8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f6be:	4b7f      	ldr	r3, [pc, #508]	; (800f8bc <tcp_receive+0x270>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	1ad3      	subs	r3, r2, r3
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	db0e      	blt.n	800f6e6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f6cc:	4b7b      	ldr	r3, [pc, #492]	; (800f8bc <tcp_receive+0x270>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d125      	bne.n	800f720 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f6d4:	4b7a      	ldr	r3, [pc, #488]	; (800f8c0 <tcp_receive+0x274>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	89db      	ldrh	r3, [r3, #14]
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f6e2:	429a      	cmp	r2, r3
 800f6e4:	d91c      	bls.n	800f720 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f6e6:	4b76      	ldr	r3, [pc, #472]	; (800f8c0 <tcp_receive+0x274>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	89db      	ldrh	r3, [r3, #14]
 800f6ec:	b29a      	uxth	r2, r3
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f700:	429a      	cmp	r2, r3
 800f702:	d205      	bcs.n	800f710 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f710:	4b69      	ldr	r3, [pc, #420]	; (800f8b8 <tcp_receive+0x26c>)
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f718:	4b68      	ldr	r3, [pc, #416]	; (800f8bc <tcp_receive+0x270>)
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f720:	4b66      	ldr	r3, [pc, #408]	; (800f8bc <tcp_receive+0x270>)
 800f722:	681a      	ldr	r2, [r3, #0]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f728:	1ad3      	subs	r3, r2, r3
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	dc58      	bgt.n	800f7e0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f72e:	4b65      	ldr	r3, [pc, #404]	; (800f8c4 <tcp_receive+0x278>)
 800f730:	881b      	ldrh	r3, [r3, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d14b      	bne.n	800f7ce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f73a:	687a      	ldr	r2, [r7, #4]
 800f73c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f740:	4413      	add	r3, r2
 800f742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f744:	429a      	cmp	r2, r3
 800f746:	d142      	bne.n	800f7ce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f74e:	2b00      	cmp	r3, #0
 800f750:	db3d      	blt.n	800f7ce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f756:	4b59      	ldr	r3, [pc, #356]	; (800f8bc <tcp_receive+0x270>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d137      	bne.n	800f7ce <tcp_receive+0x182>
              found_dupack = 1;
 800f75e:	2301      	movs	r3, #1
 800f760:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f768:	2bff      	cmp	r3, #255	; 0xff
 800f76a:	d007      	beq.n	800f77c <tcp_receive+0x130>
                ++pcb->dupacks;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f772:	3301      	adds	r3, #1
 800f774:	b2da      	uxtb	r2, r3
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f782:	2b03      	cmp	r3, #3
 800f784:	d91b      	bls.n	800f7be <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f790:	4413      	add	r3, r2
 800f792:	b29a      	uxth	r2, r3
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d30a      	bcc.n	800f7b4 <tcp_receive+0x168>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7a8:	4413      	add	r3, r2
 800f7aa:	b29a      	uxth	r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f7b2:	e004      	b.n	800f7be <tcp_receive+0x172>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f7c4:	2b02      	cmp	r3, #2
 800f7c6:	d902      	bls.n	800f7ce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f001 feeb 	bl	80115a4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f7ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	f040 8161 	bne.w	800fa98 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f7de:	e15b      	b.n	800fa98 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f7e0:	4b36      	ldr	r3, [pc, #216]	; (800f8bc <tcp_receive+0x270>)
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7e8:	1ad3      	subs	r3, r2, r3
 800f7ea:	3b01      	subs	r3, #1
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	f2c0 814e 	blt.w	800fa8e <tcp_receive+0x442>
 800f7f2:	4b32      	ldr	r3, [pc, #200]	; (800f8bc <tcp_receive+0x270>)
 800f7f4:	681a      	ldr	r2, [r3, #0]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7fa:	1ad3      	subs	r3, r2, r3
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f300 8146 	bgt.w	800fa8e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	8b5b      	ldrh	r3, [r3, #26]
 800f806:	f003 0304 	and.w	r3, r3, #4
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d010      	beq.n	800f830 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	8b5b      	ldrh	r3, [r3, #26]
 800f812:	f023 0304 	bic.w	r3, r3, #4
 800f816:	b29a      	uxth	r2, r3
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2200      	movs	r2, #0
 800f82c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2200      	movs	r2, #0
 800f834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f83e:	10db      	asrs	r3, r3, #3
 800f840:	b21b      	sxth	r3, r3
 800f842:	b29a      	uxth	r2, r3
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	4413      	add	r3, r2
 800f84e:	b29b      	uxth	r3, r3
 800f850:	b21a      	sxth	r2, r3
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f858:	4b18      	ldr	r3, [pc, #96]	; (800f8bc <tcp_receive+0x270>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	b29a      	uxth	r2, r3
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f862:	b29b      	uxth	r3, r3
 800f864:	1ad3      	subs	r3, r2, r3
 800f866:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2200      	movs	r2, #0
 800f86c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f870:	4b12      	ldr	r3, [pc, #72]	; (800f8bc <tcp_receive+0x270>)
 800f872:	681a      	ldr	r2, [r3, #0]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	7d1b      	ldrb	r3, [r3, #20]
 800f87c:	2b03      	cmp	r3, #3
 800f87e:	f240 8097 	bls.w	800f9b0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f88e:	429a      	cmp	r2, r3
 800f890:	d245      	bcs.n	800f91e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	8b5b      	ldrh	r3, [r3, #26]
 800f896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d014      	beq.n	800f8c8 <tcp_receive+0x27c>
 800f89e:	2301      	movs	r3, #1
 800f8a0:	e013      	b.n	800f8ca <tcp_receive+0x27e>
 800f8a2:	bf00      	nop
 800f8a4:	08015354 	.word	0x08015354
 800f8a8:	080156c0 	.word	0x080156c0
 800f8ac:	080153dc 	.word	0x080153dc
 800f8b0:	080156dc 	.word	0x080156dc
 800f8b4:	24007464 	.word	0x24007464
 800f8b8:	24007458 	.word	0x24007458
 800f8bc:	2400745c 	.word	0x2400745c
 800f8c0:	24007448 	.word	0x24007448
 800f8c4:	24007462 	.word	0x24007462
 800f8c8:	2302      	movs	r3, #2
 800f8ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f8ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f8d2:	b29a      	uxth	r2, r3
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8d8:	fb12 f303 	smulbb	r3, r2, r3
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	bf28      	it	cs
 800f8e4:	4613      	movcs	r3, r2
 800f8e6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f8ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f8f0:	4413      	add	r3, r2
 800f8f2:	b29a      	uxth	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d309      	bcc.n	800f912 <tcp_receive+0x2c6>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f904:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f906:	4413      	add	r3, r2
 800f908:	b29a      	uxth	r2, r3
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f910:	e04e      	b.n	800f9b0 <tcp_receive+0x364>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f918:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f91c:	e048      	b.n	800f9b0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f924:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f926:	4413      	add	r3, r2
 800f928:	b29a      	uxth	r2, r3
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f930:	429a      	cmp	r2, r3
 800f932:	d309      	bcc.n	800f948 <tcp_receive+0x2fc>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f93a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f93c:	4413      	add	r3, r2
 800f93e:	b29a      	uxth	r2, r3
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f946:	e004      	b.n	800f952 <tcp_receive+0x306>
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f94e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f95e:	429a      	cmp	r2, r3
 800f960:	d326      	bcc.n	800f9b0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f96e:	1ad3      	subs	r3, r2, r3
 800f970:	b29a      	uxth	r2, r3
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f982:	4413      	add	r3, r2
 800f984:	b29a      	uxth	r2, r3
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f98c:	429a      	cmp	r2, r3
 800f98e:	d30a      	bcc.n	800f9a6 <tcp_receive+0x35a>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f99a:	4413      	add	r3, r2
 800f99c:	b29a      	uxth	r2, r3
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f9a4:	e004      	b.n	800f9b0 <tcp_receive+0x364>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9b8:	4a98      	ldr	r2, [pc, #608]	; (800fc1c <tcp_receive+0x5d0>)
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f7ff fdca 	bl	800f554 <tcp_free_acked_segments>
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9ce:	4a94      	ldr	r2, [pc, #592]	; (800fc20 <tcp_receive+0x5d4>)
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f7ff fdbf 	bl	800f554 <tcp_free_acked_segments>
 800f9d6:	4602      	mov	r2, r0
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d104      	bne.n	800f9ee <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9ea:	861a      	strh	r2, [r3, #48]	; 0x30
 800f9ec:	e002      	b.n	800f9f4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d103      	bne.n	800fa0a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2200      	movs	r2, #0
 800fa06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fa10:	4b84      	ldr	r3, [pc, #528]	; (800fc24 <tcp_receive+0x5d8>)
 800fa12:	881b      	ldrh	r3, [r3, #0]
 800fa14:	4413      	add	r3, r2
 800fa16:	b29a      	uxth	r2, r3
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	8b5b      	ldrh	r3, [r3, #26]
 800fa22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d035      	beq.n	800fa96 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d118      	bne.n	800fa64 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d00c      	beq.n	800fa54 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa42:	68db      	ldr	r3, [r3, #12]
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7f8 fc6d 	bl	8008326 <lwip_htonl>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	dc20      	bgt.n	800fa96 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	8b5b      	ldrh	r3, [r3, #26]
 800fa58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa5c:	b29a      	uxth	r2, r3
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa62:	e018      	b.n	800fa96 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa6c:	68db      	ldr	r3, [r3, #12]
 800fa6e:	685b      	ldr	r3, [r3, #4]
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7f8 fc58 	bl	8008326 <lwip_htonl>
 800fa76:	4603      	mov	r3, r0
 800fa78:	1ae3      	subs	r3, r4, r3
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	dc0b      	bgt.n	800fa96 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	8b5b      	ldrh	r3, [r3, #26]
 800fa82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa8c:	e003      	b.n	800fa96 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f001 ff76 	bl	8011980 <tcp_send_empty_ack>
 800fa94:	e000      	b.n	800fa98 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa96:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d05b      	beq.n	800fb58 <tcp_receive+0x50c>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800faa4:	4b60      	ldr	r3, [pc, #384]	; (800fc28 <tcp_receive+0x5dc>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	1ad3      	subs	r3, r2, r3
 800faaa:	2b00      	cmp	r3, #0
 800faac:	da54      	bge.n	800fb58 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800faae:	4b5f      	ldr	r3, [pc, #380]	; (800fc2c <tcp_receive+0x5e0>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	b29a      	uxth	r2, r3
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fab8:	b29b      	uxth	r3, r3
 800faba:	1ad3      	subs	r3, r2, r3
 800fabc:	b29b      	uxth	r3, r3
 800fabe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fac2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800facc:	10db      	asrs	r3, r3, #3
 800face:	b21b      	sxth	r3, r3
 800fad0:	b29b      	uxth	r3, r3
 800fad2:	1ad3      	subs	r3, r2, r3
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fae0:	b29a      	uxth	r2, r3
 800fae2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fae6:	4413      	add	r3, r2
 800fae8:	b29b      	uxth	r3, r3
 800faea:	b21a      	sxth	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800faf0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	da05      	bge.n	800fb04 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800faf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fafc:	425b      	negs	r3, r3
 800fafe:	b29b      	uxth	r3, r3
 800fb00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fb04:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb0e:	109b      	asrs	r3, r3, #2
 800fb10:	b21b      	sxth	r3, r3
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	1ad3      	subs	r3, r2, r3
 800fb16:	b29b      	uxth	r3, r3
 800fb18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb22:	b29a      	uxth	r2, r3
 800fb24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fb28:	4413      	add	r3, r2
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	b21a      	sxth	r2, r3
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fb38:	10db      	asrs	r3, r3, #3
 800fb3a:	b21b      	sxth	r3, r3
 800fb3c:	b29a      	uxth	r2, r3
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	4413      	add	r3, r2
 800fb48:	b29b      	uxth	r3, r3
 800fb4a:	b21a      	sxth	r2, r3
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2200      	movs	r2, #0
 800fb56:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fb58:	4b35      	ldr	r3, [pc, #212]	; (800fc30 <tcp_receive+0x5e4>)
 800fb5a:	881b      	ldrh	r3, [r3, #0]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	f000 84e2 	beq.w	8010526 <tcp_receive+0xeda>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	7d1b      	ldrb	r3, [r3, #20]
 800fb66:	2b06      	cmp	r3, #6
 800fb68:	f200 84dd 	bhi.w	8010526 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb70:	4b30      	ldr	r3, [pc, #192]	; (800fc34 <tcp_receive+0x5e8>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	1ad3      	subs	r3, r2, r3
 800fb76:	3b01      	subs	r3, #1
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	f2c0 808f 	blt.w	800fc9c <tcp_receive+0x650>
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb82:	4b2b      	ldr	r3, [pc, #172]	; (800fc30 <tcp_receive+0x5e4>)
 800fb84:	881b      	ldrh	r3, [r3, #0]
 800fb86:	4619      	mov	r1, r3
 800fb88:	4b2a      	ldr	r3, [pc, #168]	; (800fc34 <tcp_receive+0x5e8>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	440b      	add	r3, r1
 800fb8e:	1ad3      	subs	r3, r2, r3
 800fb90:	3301      	adds	r3, #1
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	f300 8082 	bgt.w	800fc9c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fb98:	4b27      	ldr	r3, [pc, #156]	; (800fc38 <tcp_receive+0x5ec>)
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fba2:	4b24      	ldr	r3, [pc, #144]	; (800fc34 <tcp_receive+0x5e8>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	1ad3      	subs	r3, r2, r3
 800fba8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fbaa:	4b23      	ldr	r3, [pc, #140]	; (800fc38 <tcp_receive+0x5ec>)
 800fbac:	685b      	ldr	r3, [r3, #4]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d106      	bne.n	800fbc0 <tcp_receive+0x574>
 800fbb2:	4b22      	ldr	r3, [pc, #136]	; (800fc3c <tcp_receive+0x5f0>)
 800fbb4:	f240 5294 	movw	r2, #1428	; 0x594
 800fbb8:	4921      	ldr	r1, [pc, #132]	; (800fc40 <tcp_receive+0x5f4>)
 800fbba:	4822      	ldr	r0, [pc, #136]	; (800fc44 <tcp_receive+0x5f8>)
 800fbbc:	f002 fd70 	bl	80126a0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d906      	bls.n	800fbd8 <tcp_receive+0x58c>
 800fbca:	4b1c      	ldr	r3, [pc, #112]	; (800fc3c <tcp_receive+0x5f0>)
 800fbcc:	f240 5295 	movw	r2, #1429	; 0x595
 800fbd0:	491d      	ldr	r1, [pc, #116]	; (800fc48 <tcp_receive+0x5fc>)
 800fbd2:	481c      	ldr	r0, [pc, #112]	; (800fc44 <tcp_receive+0x5f8>)
 800fbd4:	f002 fd64 	bl	80126a0 <iprintf>
      off = (u16_t)off32;
 800fbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbda:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fbde:	4b16      	ldr	r3, [pc, #88]	; (800fc38 <tcp_receive+0x5ec>)
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	891b      	ldrh	r3, [r3, #8]
 800fbe4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d906      	bls.n	800fbfa <tcp_receive+0x5ae>
 800fbec:	4b13      	ldr	r3, [pc, #76]	; (800fc3c <tcp_receive+0x5f0>)
 800fbee:	f240 5297 	movw	r2, #1431	; 0x597
 800fbf2:	4916      	ldr	r1, [pc, #88]	; (800fc4c <tcp_receive+0x600>)
 800fbf4:	4813      	ldr	r0, [pc, #76]	; (800fc44 <tcp_receive+0x5f8>)
 800fbf6:	f002 fd53 	bl	80126a0 <iprintf>
      inseg.len -= off;
 800fbfa:	4b0f      	ldr	r3, [pc, #60]	; (800fc38 <tcp_receive+0x5ec>)
 800fbfc:	891a      	ldrh	r2, [r3, #8]
 800fbfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fc02:	1ad3      	subs	r3, r2, r3
 800fc04:	b29a      	uxth	r2, r3
 800fc06:	4b0c      	ldr	r3, [pc, #48]	; (800fc38 <tcp_receive+0x5ec>)
 800fc08:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fc0a:	4b0b      	ldr	r3, [pc, #44]	; (800fc38 <tcp_receive+0x5ec>)
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	891a      	ldrh	r2, [r3, #8]
 800fc10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fc14:	1ad3      	subs	r3, r2, r3
 800fc16:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800fc18:	e02a      	b.n	800fc70 <tcp_receive+0x624>
 800fc1a:	bf00      	nop
 800fc1c:	080156f8 	.word	0x080156f8
 800fc20:	08015700 	.word	0x08015700
 800fc24:	24007460 	.word	0x24007460
 800fc28:	2400745c 	.word	0x2400745c
 800fc2c:	24007420 	.word	0x24007420
 800fc30:	24007462 	.word	0x24007462
 800fc34:	24007458 	.word	0x24007458
 800fc38:	24007438 	.word	0x24007438
 800fc3c:	08015354 	.word	0x08015354
 800fc40:	08015708 	.word	0x08015708
 800fc44:	080153dc 	.word	0x080153dc
 800fc48:	08015718 	.word	0x08015718
 800fc4c:	08015728 	.word	0x08015728
        off -= p->len;
 800fc50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc52:	895b      	ldrh	r3, [r3, #10]
 800fc54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fc58:	1ad3      	subs	r3, r2, r3
 800fc5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fc5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fc62:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fc64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc66:	2200      	movs	r2, #0
 800fc68:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fc6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800fc70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc72:	895b      	ldrh	r3, [r3, #10]
 800fc74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d8e9      	bhi.n	800fc50 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fc7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fc80:	4619      	mov	r1, r3
 800fc82:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fc84:	f7fc fa5a 	bl	800c13c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc8c:	4a91      	ldr	r2, [pc, #580]	; (800fed4 <tcp_receive+0x888>)
 800fc8e:	6013      	str	r3, [r2, #0]
 800fc90:	4b91      	ldr	r3, [pc, #580]	; (800fed8 <tcp_receive+0x88c>)
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	4a8f      	ldr	r2, [pc, #572]	; (800fed4 <tcp_receive+0x888>)
 800fc96:	6812      	ldr	r2, [r2, #0]
 800fc98:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fc9a:	e00d      	b.n	800fcb8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fc9c:	4b8d      	ldr	r3, [pc, #564]	; (800fed4 <tcp_receive+0x888>)
 800fc9e:	681a      	ldr	r2, [r3, #0]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fca4:	1ad3      	subs	r3, r2, r3
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	da06      	bge.n	800fcb8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	8b5b      	ldrh	r3, [r3, #26]
 800fcae:	f043 0302 	orr.w	r3, r3, #2
 800fcb2:	b29a      	uxth	r2, r3
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fcb8:	4b86      	ldr	r3, [pc, #536]	; (800fed4 <tcp_receive+0x888>)
 800fcba:	681a      	ldr	r2, [r3, #0]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc0:	1ad3      	subs	r3, r2, r3
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	f2c0 842a 	blt.w	801051c <tcp_receive+0xed0>
 800fcc8:	4b82      	ldr	r3, [pc, #520]	; (800fed4 <tcp_receive+0x888>)
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd0:	6879      	ldr	r1, [r7, #4]
 800fcd2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fcd4:	440b      	add	r3, r1
 800fcd6:	1ad3      	subs	r3, r2, r3
 800fcd8:	3301      	adds	r3, #1
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	f300 841e 	bgt.w	801051c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fce4:	4b7b      	ldr	r3, [pc, #492]	; (800fed4 <tcp_receive+0x888>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	f040 829a 	bne.w	8010222 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fcee:	4b7a      	ldr	r3, [pc, #488]	; (800fed8 <tcp_receive+0x88c>)
 800fcf0:	891c      	ldrh	r4, [r3, #8]
 800fcf2:	4b79      	ldr	r3, [pc, #484]	; (800fed8 <tcp_receive+0x88c>)
 800fcf4:	68db      	ldr	r3, [r3, #12]
 800fcf6:	899b      	ldrh	r3, [r3, #12]
 800fcf8:	b29b      	uxth	r3, r3
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7f8 fafe 	bl	80082fc <lwip_htons>
 800fd00:	4603      	mov	r3, r0
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	f003 0303 	and.w	r3, r3, #3
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d001      	beq.n	800fd10 <tcp_receive+0x6c4>
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	e000      	b.n	800fd12 <tcp_receive+0x6c6>
 800fd10:	2300      	movs	r3, #0
 800fd12:	4423      	add	r3, r4
 800fd14:	b29a      	uxth	r2, r3
 800fd16:	4b71      	ldr	r3, [pc, #452]	; (800fedc <tcp_receive+0x890>)
 800fd18:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd1e:	4b6f      	ldr	r3, [pc, #444]	; (800fedc <tcp_receive+0x890>)
 800fd20:	881b      	ldrh	r3, [r3, #0]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d275      	bcs.n	800fe12 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fd26:	4b6c      	ldr	r3, [pc, #432]	; (800fed8 <tcp_receive+0x88c>)
 800fd28:	68db      	ldr	r3, [r3, #12]
 800fd2a:	899b      	ldrh	r3, [r3, #12]
 800fd2c:	b29b      	uxth	r3, r3
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7f8 fae4 	bl	80082fc <lwip_htons>
 800fd34:	4603      	mov	r3, r0
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	f003 0301 	and.w	r3, r3, #1
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d01f      	beq.n	800fd80 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fd40:	4b65      	ldr	r3, [pc, #404]	; (800fed8 <tcp_receive+0x88c>)
 800fd42:	68db      	ldr	r3, [r3, #12]
 800fd44:	899b      	ldrh	r3, [r3, #12]
 800fd46:	b29b      	uxth	r3, r3
 800fd48:	b21b      	sxth	r3, r3
 800fd4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fd4e:	b21c      	sxth	r4, r3
 800fd50:	4b61      	ldr	r3, [pc, #388]	; (800fed8 <tcp_receive+0x88c>)
 800fd52:	68db      	ldr	r3, [r3, #12]
 800fd54:	899b      	ldrh	r3, [r3, #12]
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f7f8 facf 	bl	80082fc <lwip_htons>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	b2db      	uxtb	r3, r3
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fd68:	b29b      	uxth	r3, r3
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7f8 fac6 	bl	80082fc <lwip_htons>
 800fd70:	4603      	mov	r3, r0
 800fd72:	b21b      	sxth	r3, r3
 800fd74:	4323      	orrs	r3, r4
 800fd76:	b21a      	sxth	r2, r3
 800fd78:	4b57      	ldr	r3, [pc, #348]	; (800fed8 <tcp_receive+0x88c>)
 800fd7a:	68db      	ldr	r3, [r3, #12]
 800fd7c:	b292      	uxth	r2, r2
 800fd7e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd84:	4b54      	ldr	r3, [pc, #336]	; (800fed8 <tcp_receive+0x88c>)
 800fd86:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fd88:	4b53      	ldr	r3, [pc, #332]	; (800fed8 <tcp_receive+0x88c>)
 800fd8a:	68db      	ldr	r3, [r3, #12]
 800fd8c:	899b      	ldrh	r3, [r3, #12]
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7f8 fab3 	bl	80082fc <lwip_htons>
 800fd96:	4603      	mov	r3, r0
 800fd98:	b2db      	uxtb	r3, r3
 800fd9a:	f003 0302 	and.w	r3, r3, #2
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d005      	beq.n	800fdae <tcp_receive+0x762>
            inseg.len -= 1;
 800fda2:	4b4d      	ldr	r3, [pc, #308]	; (800fed8 <tcp_receive+0x88c>)
 800fda4:	891b      	ldrh	r3, [r3, #8]
 800fda6:	3b01      	subs	r3, #1
 800fda8:	b29a      	uxth	r2, r3
 800fdaa:	4b4b      	ldr	r3, [pc, #300]	; (800fed8 <tcp_receive+0x88c>)
 800fdac:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fdae:	4b4a      	ldr	r3, [pc, #296]	; (800fed8 <tcp_receive+0x88c>)
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	4a49      	ldr	r2, [pc, #292]	; (800fed8 <tcp_receive+0x88c>)
 800fdb4:	8912      	ldrh	r2, [r2, #8]
 800fdb6:	4611      	mov	r1, r2
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7fc f8bf 	bl	800bf3c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fdbe:	4b46      	ldr	r3, [pc, #280]	; (800fed8 <tcp_receive+0x88c>)
 800fdc0:	891c      	ldrh	r4, [r3, #8]
 800fdc2:	4b45      	ldr	r3, [pc, #276]	; (800fed8 <tcp_receive+0x88c>)
 800fdc4:	68db      	ldr	r3, [r3, #12]
 800fdc6:	899b      	ldrh	r3, [r3, #12]
 800fdc8:	b29b      	uxth	r3, r3
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7f8 fa96 	bl	80082fc <lwip_htons>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	f003 0303 	and.w	r3, r3, #3
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d001      	beq.n	800fde0 <tcp_receive+0x794>
 800fddc:	2301      	movs	r3, #1
 800fdde:	e000      	b.n	800fde2 <tcp_receive+0x796>
 800fde0:	2300      	movs	r3, #0
 800fde2:	4423      	add	r3, r4
 800fde4:	b29a      	uxth	r2, r3
 800fde6:	4b3d      	ldr	r3, [pc, #244]	; (800fedc <tcp_receive+0x890>)
 800fde8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fdea:	4b3c      	ldr	r3, [pc, #240]	; (800fedc <tcp_receive+0x890>)
 800fdec:	881b      	ldrh	r3, [r3, #0]
 800fdee:	461a      	mov	r2, r3
 800fdf0:	4b38      	ldr	r3, [pc, #224]	; (800fed4 <tcp_receive+0x888>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	441a      	add	r2, r3
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdfa:	6879      	ldr	r1, [r7, #4]
 800fdfc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fdfe:	440b      	add	r3, r1
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d006      	beq.n	800fe12 <tcp_receive+0x7c6>
 800fe04:	4b36      	ldr	r3, [pc, #216]	; (800fee0 <tcp_receive+0x894>)
 800fe06:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800fe0a:	4936      	ldr	r1, [pc, #216]	; (800fee4 <tcp_receive+0x898>)
 800fe0c:	4836      	ldr	r0, [pc, #216]	; (800fee8 <tcp_receive+0x89c>)
 800fe0e:	f002 fc47 	bl	80126a0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	f000 80e7 	beq.w	800ffea <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fe1c:	4b2e      	ldr	r3, [pc, #184]	; (800fed8 <tcp_receive+0x88c>)
 800fe1e:	68db      	ldr	r3, [r3, #12]
 800fe20:	899b      	ldrh	r3, [r3, #12]
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7f8 fa69 	bl	80082fc <lwip_htons>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	b2db      	uxtb	r3, r3
 800fe2e:	f003 0301 	and.w	r3, r3, #1
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d010      	beq.n	800fe58 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fe36:	e00a      	b.n	800fe4e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe3c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fe48:	68f8      	ldr	r0, [r7, #12]
 800fe4a:	f7fd fd92 	bl	800d972 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d1f0      	bne.n	800fe38 <tcp_receive+0x7ec>
 800fe56:	e0c8      	b.n	800ffea <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe5c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fe5e:	e052      	b.n	800ff06 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fe60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	899b      	ldrh	r3, [r3, #12]
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7f8 fa47 	bl	80082fc <lwip_htons>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	f003 0301 	and.w	r3, r3, #1
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d03d      	beq.n	800fef6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fe7a:	4b17      	ldr	r3, [pc, #92]	; (800fed8 <tcp_receive+0x88c>)
 800fe7c:	68db      	ldr	r3, [r3, #12]
 800fe7e:	899b      	ldrh	r3, [r3, #12]
 800fe80:	b29b      	uxth	r3, r3
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7f8 fa3a 	bl	80082fc <lwip_htons>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	b2db      	uxtb	r3, r3
 800fe8c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d130      	bne.n	800fef6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fe94:	4b10      	ldr	r3, [pc, #64]	; (800fed8 <tcp_receive+0x88c>)
 800fe96:	68db      	ldr	r3, [r3, #12]
 800fe98:	899b      	ldrh	r3, [r3, #12]
 800fe9a:	b29c      	uxth	r4, r3
 800fe9c:	2001      	movs	r0, #1
 800fe9e:	f7f8 fa2d 	bl	80082fc <lwip_htons>
 800fea2:	4603      	mov	r3, r0
 800fea4:	461a      	mov	r2, r3
 800fea6:	4b0c      	ldr	r3, [pc, #48]	; (800fed8 <tcp_receive+0x88c>)
 800fea8:	68db      	ldr	r3, [r3, #12]
 800feaa:	4322      	orrs	r2, r4
 800feac:	b292      	uxth	r2, r2
 800feae:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800feb0:	4b09      	ldr	r3, [pc, #36]	; (800fed8 <tcp_receive+0x88c>)
 800feb2:	891c      	ldrh	r4, [r3, #8]
 800feb4:	4b08      	ldr	r3, [pc, #32]	; (800fed8 <tcp_receive+0x88c>)
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	899b      	ldrh	r3, [r3, #12]
 800feba:	b29b      	uxth	r3, r3
 800febc:	4618      	mov	r0, r3
 800febe:	f7f8 fa1d 	bl	80082fc <lwip_htons>
 800fec2:	4603      	mov	r3, r0
 800fec4:	b2db      	uxtb	r3, r3
 800fec6:	f003 0303 	and.w	r3, r3, #3
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d00e      	beq.n	800feec <tcp_receive+0x8a0>
 800fece:	2301      	movs	r3, #1
 800fed0:	e00d      	b.n	800feee <tcp_receive+0x8a2>
 800fed2:	bf00      	nop
 800fed4:	24007458 	.word	0x24007458
 800fed8:	24007438 	.word	0x24007438
 800fedc:	24007462 	.word	0x24007462
 800fee0:	08015354 	.word	0x08015354
 800fee4:	08015738 	.word	0x08015738
 800fee8:	080153dc 	.word	0x080153dc
 800feec:	2300      	movs	r3, #0
 800feee:	4423      	add	r3, r4
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	4b98      	ldr	r3, [pc, #608]	; (8010154 <tcp_receive+0xb08>)
 800fef4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fef8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fefa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ff00:	6938      	ldr	r0, [r7, #16]
 800ff02:	f7fd fd36 	bl	800d972 <tcp_seg_free>
            while (next &&
 800ff06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d00e      	beq.n	800ff2a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ff0c:	4b91      	ldr	r3, [pc, #580]	; (8010154 <tcp_receive+0xb08>)
 800ff0e:	881b      	ldrh	r3, [r3, #0]
 800ff10:	461a      	mov	r2, r3
 800ff12:	4b91      	ldr	r3, [pc, #580]	; (8010158 <tcp_receive+0xb0c>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	441a      	add	r2, r3
 800ff18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff1a:	68db      	ldr	r3, [r3, #12]
 800ff1c:	685b      	ldr	r3, [r3, #4]
 800ff1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ff20:	8909      	ldrh	r1, [r1, #8]
 800ff22:	440b      	add	r3, r1
 800ff24:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	da9a      	bge.n	800fe60 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ff2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d059      	beq.n	800ffe4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800ff30:	4b88      	ldr	r3, [pc, #544]	; (8010154 <tcp_receive+0xb08>)
 800ff32:	881b      	ldrh	r3, [r3, #0]
 800ff34:	461a      	mov	r2, r3
 800ff36:	4b88      	ldr	r3, [pc, #544]	; (8010158 <tcp_receive+0xb0c>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	441a      	add	r2, r3
 800ff3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff3e:	68db      	ldr	r3, [r3, #12]
 800ff40:	685b      	ldr	r3, [r3, #4]
 800ff42:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	dd4d      	ble.n	800ffe4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ff48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff4a:	68db      	ldr	r3, [r3, #12]
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	b29a      	uxth	r2, r3
 800ff50:	4b81      	ldr	r3, [pc, #516]	; (8010158 <tcp_receive+0xb0c>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	1ad3      	subs	r3, r2, r3
 800ff58:	b29a      	uxth	r2, r3
 800ff5a:	4b80      	ldr	r3, [pc, #512]	; (801015c <tcp_receive+0xb10>)
 800ff5c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ff5e:	4b7f      	ldr	r3, [pc, #508]	; (801015c <tcp_receive+0xb10>)
 800ff60:	68db      	ldr	r3, [r3, #12]
 800ff62:	899b      	ldrh	r3, [r3, #12]
 800ff64:	b29b      	uxth	r3, r3
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7f8 f9c8 	bl	80082fc <lwip_htons>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	b2db      	uxtb	r3, r3
 800ff70:	f003 0302 	and.w	r3, r3, #2
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d005      	beq.n	800ff84 <tcp_receive+0x938>
                inseg.len -= 1;
 800ff78:	4b78      	ldr	r3, [pc, #480]	; (801015c <tcp_receive+0xb10>)
 800ff7a:	891b      	ldrh	r3, [r3, #8]
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	b29a      	uxth	r2, r3
 800ff80:	4b76      	ldr	r3, [pc, #472]	; (801015c <tcp_receive+0xb10>)
 800ff82:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ff84:	4b75      	ldr	r3, [pc, #468]	; (801015c <tcp_receive+0xb10>)
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	4a74      	ldr	r2, [pc, #464]	; (801015c <tcp_receive+0xb10>)
 800ff8a:	8912      	ldrh	r2, [r2, #8]
 800ff8c:	4611      	mov	r1, r2
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7fb ffd4 	bl	800bf3c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ff94:	4b71      	ldr	r3, [pc, #452]	; (801015c <tcp_receive+0xb10>)
 800ff96:	891c      	ldrh	r4, [r3, #8]
 800ff98:	4b70      	ldr	r3, [pc, #448]	; (801015c <tcp_receive+0xb10>)
 800ff9a:	68db      	ldr	r3, [r3, #12]
 800ff9c:	899b      	ldrh	r3, [r3, #12]
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7f8 f9ab 	bl	80082fc <lwip_htons>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	b2db      	uxtb	r3, r3
 800ffaa:	f003 0303 	and.w	r3, r3, #3
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d001      	beq.n	800ffb6 <tcp_receive+0x96a>
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	e000      	b.n	800ffb8 <tcp_receive+0x96c>
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	4423      	add	r3, r4
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	4b65      	ldr	r3, [pc, #404]	; (8010154 <tcp_receive+0xb08>)
 800ffbe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ffc0:	4b64      	ldr	r3, [pc, #400]	; (8010154 <tcp_receive+0xb08>)
 800ffc2:	881b      	ldrh	r3, [r3, #0]
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	4b64      	ldr	r3, [pc, #400]	; (8010158 <tcp_receive+0xb0c>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	441a      	add	r2, r3
 800ffcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d006      	beq.n	800ffe4 <tcp_receive+0x998>
 800ffd6:	4b62      	ldr	r3, [pc, #392]	; (8010160 <tcp_receive+0xb14>)
 800ffd8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ffdc:	4961      	ldr	r1, [pc, #388]	; (8010164 <tcp_receive+0xb18>)
 800ffde:	4862      	ldr	r0, [pc, #392]	; (8010168 <tcp_receive+0xb1c>)
 800ffe0:	f002 fb5e 	bl	80126a0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ffe8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ffea:	4b5a      	ldr	r3, [pc, #360]	; (8010154 <tcp_receive+0xb08>)
 800ffec:	881b      	ldrh	r3, [r3, #0]
 800ffee:	461a      	mov	r2, r3
 800fff0:	4b59      	ldr	r3, [pc, #356]	; (8010158 <tcp_receive+0xb0c>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	441a      	add	r2, r3
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fffe:	4b55      	ldr	r3, [pc, #340]	; (8010154 <tcp_receive+0xb08>)
 8010000:	881b      	ldrh	r3, [r3, #0]
 8010002:	429a      	cmp	r2, r3
 8010004:	d206      	bcs.n	8010014 <tcp_receive+0x9c8>
 8010006:	4b56      	ldr	r3, [pc, #344]	; (8010160 <tcp_receive+0xb14>)
 8010008:	f240 6207 	movw	r2, #1543	; 0x607
 801000c:	4957      	ldr	r1, [pc, #348]	; (801016c <tcp_receive+0xb20>)
 801000e:	4856      	ldr	r0, [pc, #344]	; (8010168 <tcp_receive+0xb1c>)
 8010010:	f002 fb46 	bl	80126a0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010018:	4b4e      	ldr	r3, [pc, #312]	; (8010154 <tcp_receive+0xb08>)
 801001a:	881b      	ldrh	r3, [r3, #0]
 801001c:	1ad3      	subs	r3, r2, r3
 801001e:	b29a      	uxth	r2, r3
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f7fc ffc5 	bl	800cfb4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801002a:	4b4c      	ldr	r3, [pc, #304]	; (801015c <tcp_receive+0xb10>)
 801002c:	685b      	ldr	r3, [r3, #4]
 801002e:	891b      	ldrh	r3, [r3, #8]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d006      	beq.n	8010042 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8010034:	4b49      	ldr	r3, [pc, #292]	; (801015c <tcp_receive+0xb10>)
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	4a4d      	ldr	r2, [pc, #308]	; (8010170 <tcp_receive+0xb24>)
 801003a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801003c:	4b47      	ldr	r3, [pc, #284]	; (801015c <tcp_receive+0xb10>)
 801003e:	2200      	movs	r2, #0
 8010040:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010042:	4b46      	ldr	r3, [pc, #280]	; (801015c <tcp_receive+0xb10>)
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	899b      	ldrh	r3, [r3, #12]
 8010048:	b29b      	uxth	r3, r3
 801004a:	4618      	mov	r0, r3
 801004c:	f7f8 f956 	bl	80082fc <lwip_htons>
 8010050:	4603      	mov	r3, r0
 8010052:	b2db      	uxtb	r3, r3
 8010054:	f003 0301 	and.w	r3, r3, #1
 8010058:	2b00      	cmp	r3, #0
 801005a:	f000 80b8 	beq.w	80101ce <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801005e:	4b45      	ldr	r3, [pc, #276]	; (8010174 <tcp_receive+0xb28>)
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	f043 0320 	orr.w	r3, r3, #32
 8010066:	b2da      	uxtb	r2, r3
 8010068:	4b42      	ldr	r3, [pc, #264]	; (8010174 <tcp_receive+0xb28>)
 801006a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801006c:	e0af      	b.n	80101ce <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010072:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010078:	68db      	ldr	r3, [r3, #12]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	4a36      	ldr	r2, [pc, #216]	; (8010158 <tcp_receive+0xb0c>)
 801007e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	891b      	ldrh	r3, [r3, #8]
 8010084:	461c      	mov	r4, r3
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	68db      	ldr	r3, [r3, #12]
 801008a:	899b      	ldrh	r3, [r3, #12]
 801008c:	b29b      	uxth	r3, r3
 801008e:	4618      	mov	r0, r3
 8010090:	f7f8 f934 	bl	80082fc <lwip_htons>
 8010094:	4603      	mov	r3, r0
 8010096:	b2db      	uxtb	r3, r3
 8010098:	f003 0303 	and.w	r3, r3, #3
 801009c:	2b00      	cmp	r3, #0
 801009e:	d001      	beq.n	80100a4 <tcp_receive+0xa58>
 80100a0:	2301      	movs	r3, #1
 80100a2:	e000      	b.n	80100a6 <tcp_receive+0xa5a>
 80100a4:	2300      	movs	r3, #0
 80100a6:	191a      	adds	r2, r3, r4
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ac:	441a      	add	r2, r3
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100b6:	461c      	mov	r4, r3
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	891b      	ldrh	r3, [r3, #8]
 80100bc:	461d      	mov	r5, r3
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	68db      	ldr	r3, [r3, #12]
 80100c2:	899b      	ldrh	r3, [r3, #12]
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7f8 f918 	bl	80082fc <lwip_htons>
 80100cc:	4603      	mov	r3, r0
 80100ce:	b2db      	uxtb	r3, r3
 80100d0:	f003 0303 	and.w	r3, r3, #3
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d001      	beq.n	80100dc <tcp_receive+0xa90>
 80100d8:	2301      	movs	r3, #1
 80100da:	e000      	b.n	80100de <tcp_receive+0xa92>
 80100dc:	2300      	movs	r3, #0
 80100de:	442b      	add	r3, r5
 80100e0:	429c      	cmp	r4, r3
 80100e2:	d206      	bcs.n	80100f2 <tcp_receive+0xaa6>
 80100e4:	4b1e      	ldr	r3, [pc, #120]	; (8010160 <tcp_receive+0xb14>)
 80100e6:	f240 622b 	movw	r2, #1579	; 0x62b
 80100ea:	4923      	ldr	r1, [pc, #140]	; (8010178 <tcp_receive+0xb2c>)
 80100ec:	481e      	ldr	r0, [pc, #120]	; (8010168 <tcp_receive+0xb1c>)
 80100ee:	f002 fad7 	bl	80126a0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	891b      	ldrh	r3, [r3, #8]
 80100f6:	461c      	mov	r4, r3
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	68db      	ldr	r3, [r3, #12]
 80100fc:	899b      	ldrh	r3, [r3, #12]
 80100fe:	b29b      	uxth	r3, r3
 8010100:	4618      	mov	r0, r3
 8010102:	f7f8 f8fb 	bl	80082fc <lwip_htons>
 8010106:	4603      	mov	r3, r0
 8010108:	b2db      	uxtb	r3, r3
 801010a:	f003 0303 	and.w	r3, r3, #3
 801010e:	2b00      	cmp	r3, #0
 8010110:	d001      	beq.n	8010116 <tcp_receive+0xaca>
 8010112:	2301      	movs	r3, #1
 8010114:	e000      	b.n	8010118 <tcp_receive+0xacc>
 8010116:	2300      	movs	r3, #0
 8010118:	1919      	adds	r1, r3, r4
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801011e:	b28b      	uxth	r3, r1
 8010120:	1ad3      	subs	r3, r2, r3
 8010122:	b29a      	uxth	r2, r3
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f7fc ff43 	bl	800cfb4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	891b      	ldrh	r3, [r3, #8]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d028      	beq.n	801018a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010138:	4b0d      	ldr	r3, [pc, #52]	; (8010170 <tcp_receive+0xb24>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d01d      	beq.n	801017c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010140:	4b0b      	ldr	r3, [pc, #44]	; (8010170 <tcp_receive+0xb24>)
 8010142:	681a      	ldr	r2, [r3, #0]
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	4619      	mov	r1, r3
 801014a:	4610      	mov	r0, r2
 801014c:	f7fc f94a 	bl	800c3e4 <pbuf_cat>
 8010150:	e018      	b.n	8010184 <tcp_receive+0xb38>
 8010152:	bf00      	nop
 8010154:	24007462 	.word	0x24007462
 8010158:	24007458 	.word	0x24007458
 801015c:	24007438 	.word	0x24007438
 8010160:	08015354 	.word	0x08015354
 8010164:	08015770 	.word	0x08015770
 8010168:	080153dc 	.word	0x080153dc
 801016c:	080157ac 	.word	0x080157ac
 8010170:	24007468 	.word	0x24007468
 8010174:	24007465 	.word	0x24007465
 8010178:	080157cc 	.word	0x080157cc
            } else {
              recv_data = cseg->p;
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	4a70      	ldr	r2, [pc, #448]	; (8010344 <tcp_receive+0xcf8>)
 8010182:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	2200      	movs	r2, #0
 8010188:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	899b      	ldrh	r3, [r3, #12]
 8010190:	b29b      	uxth	r3, r3
 8010192:	4618      	mov	r0, r3
 8010194:	f7f8 f8b2 	bl	80082fc <lwip_htons>
 8010198:	4603      	mov	r3, r0
 801019a:	b2db      	uxtb	r3, r3
 801019c:	f003 0301 	and.w	r3, r3, #1
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d00d      	beq.n	80101c0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80101a4:	4b68      	ldr	r3, [pc, #416]	; (8010348 <tcp_receive+0xcfc>)
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	f043 0320 	orr.w	r3, r3, #32
 80101ac:	b2da      	uxtb	r2, r3
 80101ae:	4b66      	ldr	r3, [pc, #408]	; (8010348 <tcp_receive+0xcfc>)
 80101b0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	7d1b      	ldrb	r3, [r3, #20]
 80101b6:	2b04      	cmp	r3, #4
 80101b8:	d102      	bne.n	80101c0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2207      	movs	r2, #7
 80101be:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	681a      	ldr	r2, [r3, #0]
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80101c8:	68b8      	ldr	r0, [r7, #8]
 80101ca:	f7fd fbd2 	bl	800d972 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d008      	beq.n	80101e8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101da:	68db      	ldr	r3, [r3, #12]
 80101dc:	685a      	ldr	r2, [r3, #4]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80101e2:	429a      	cmp	r2, r3
 80101e4:	f43f af43 	beq.w	801006e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	8b5b      	ldrh	r3, [r3, #26]
 80101ec:	f003 0301 	and.w	r3, r3, #1
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d00e      	beq.n	8010212 <tcp_receive+0xbc6>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	8b5b      	ldrh	r3, [r3, #26]
 80101f8:	f023 0301 	bic.w	r3, r3, #1
 80101fc:	b29a      	uxth	r2, r3
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	835a      	strh	r2, [r3, #26]
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	8b5b      	ldrh	r3, [r3, #26]
 8010206:	f043 0302 	orr.w	r3, r3, #2
 801020a:	b29a      	uxth	r2, r3
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010210:	e188      	b.n	8010524 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	8b5b      	ldrh	r3, [r3, #26]
 8010216:	f043 0301 	orr.w	r3, r3, #1
 801021a:	b29a      	uxth	r2, r3
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010220:	e180      	b.n	8010524 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010226:	2b00      	cmp	r3, #0
 8010228:	d106      	bne.n	8010238 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801022a:	4848      	ldr	r0, [pc, #288]	; (801034c <tcp_receive+0xd00>)
 801022c:	f7fd fbba 	bl	800d9a4 <tcp_seg_copy>
 8010230:	4602      	mov	r2, r0
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	675a      	str	r2, [r3, #116]	; 0x74
 8010236:	e16d      	b.n	8010514 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010238:	2300      	movs	r3, #0
 801023a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010240:	63bb      	str	r3, [r7, #56]	; 0x38
 8010242:	e157      	b.n	80104f4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010246:	68db      	ldr	r3, [r3, #12]
 8010248:	685a      	ldr	r2, [r3, #4]
 801024a:	4b41      	ldr	r3, [pc, #260]	; (8010350 <tcp_receive+0xd04>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	429a      	cmp	r2, r3
 8010250:	d11d      	bne.n	801028e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010252:	4b3e      	ldr	r3, [pc, #248]	; (801034c <tcp_receive+0xd00>)
 8010254:	891a      	ldrh	r2, [r3, #8]
 8010256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010258:	891b      	ldrh	r3, [r3, #8]
 801025a:	429a      	cmp	r2, r3
 801025c:	f240 814f 	bls.w	80104fe <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010260:	483a      	ldr	r0, [pc, #232]	; (801034c <tcp_receive+0xd00>)
 8010262:	f7fd fb9f 	bl	800d9a4 <tcp_seg_copy>
 8010266:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	2b00      	cmp	r3, #0
 801026c:	f000 8149 	beq.w	8010502 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010272:	2b00      	cmp	r3, #0
 8010274:	d003      	beq.n	801027e <tcp_receive+0xc32>
                    prev->next = cseg;
 8010276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010278:	697a      	ldr	r2, [r7, #20]
 801027a:	601a      	str	r2, [r3, #0]
 801027c:	e002      	b.n	8010284 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	697a      	ldr	r2, [r7, #20]
 8010282:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010284:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010286:	6978      	ldr	r0, [r7, #20]
 8010288:	f7ff f8dc 	bl	800f444 <tcp_oos_insert_segment>
                }
                break;
 801028c:	e139      	b.n	8010502 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801028e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010290:	2b00      	cmp	r3, #0
 8010292:	d117      	bne.n	80102c4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010294:	4b2e      	ldr	r3, [pc, #184]	; (8010350 <tcp_receive+0xd04>)
 8010296:	681a      	ldr	r2, [r3, #0]
 8010298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	685b      	ldr	r3, [r3, #4]
 801029e:	1ad3      	subs	r3, r2, r3
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	da57      	bge.n	8010354 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80102a4:	4829      	ldr	r0, [pc, #164]	; (801034c <tcp_receive+0xd00>)
 80102a6:	f7fd fb7d 	bl	800d9a4 <tcp_seg_copy>
 80102aa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80102ac:	69bb      	ldr	r3, [r7, #24]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	f000 8129 	beq.w	8010506 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	69ba      	ldr	r2, [r7, #24]
 80102b8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80102ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80102bc:	69b8      	ldr	r0, [r7, #24]
 80102be:	f7ff f8c1 	bl	800f444 <tcp_oos_insert_segment>
                  }
                  break;
 80102c2:	e120      	b.n	8010506 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80102c4:	4b22      	ldr	r3, [pc, #136]	; (8010350 <tcp_receive+0xd04>)
 80102c6:	681a      	ldr	r2, [r3, #0]
 80102c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	1ad3      	subs	r3, r2, r3
 80102d0:	3b01      	subs	r3, #1
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	db3e      	blt.n	8010354 <tcp_receive+0xd08>
 80102d6:	4b1e      	ldr	r3, [pc, #120]	; (8010350 <tcp_receive+0xd04>)
 80102d8:	681a      	ldr	r2, [r3, #0]
 80102da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102dc:	68db      	ldr	r3, [r3, #12]
 80102de:	685b      	ldr	r3, [r3, #4]
 80102e0:	1ad3      	subs	r3, r2, r3
 80102e2:	3301      	adds	r3, #1
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	dc35      	bgt.n	8010354 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80102e8:	4818      	ldr	r0, [pc, #96]	; (801034c <tcp_receive+0xd00>)
 80102ea:	f7fd fb5b 	bl	800d9a4 <tcp_seg_copy>
 80102ee:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	f000 8109 	beq.w	801050a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80102f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102fa:	68db      	ldr	r3, [r3, #12]
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010300:	8912      	ldrh	r2, [r2, #8]
 8010302:	441a      	add	r2, r3
 8010304:	4b12      	ldr	r3, [pc, #72]	; (8010350 <tcp_receive+0xd04>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	1ad3      	subs	r3, r2, r3
 801030a:	2b00      	cmp	r3, #0
 801030c:	dd12      	ble.n	8010334 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801030e:	4b10      	ldr	r3, [pc, #64]	; (8010350 <tcp_receive+0xd04>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	b29a      	uxth	r2, r3
 8010314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010316:	68db      	ldr	r3, [r3, #12]
 8010318:	685b      	ldr	r3, [r3, #4]
 801031a:	b29b      	uxth	r3, r3
 801031c:	1ad3      	subs	r3, r2, r3
 801031e:	b29a      	uxth	r2, r3
 8010320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010322:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010326:	685a      	ldr	r2, [r3, #4]
 8010328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801032a:	891b      	ldrh	r3, [r3, #8]
 801032c:	4619      	mov	r1, r3
 801032e:	4610      	mov	r0, r2
 8010330:	f7fb fe04 	bl	800bf3c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010336:	69fa      	ldr	r2, [r7, #28]
 8010338:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801033a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801033c:	69f8      	ldr	r0, [r7, #28]
 801033e:	f7ff f881 	bl	800f444 <tcp_oos_insert_segment>
                  }
                  break;
 8010342:	e0e2      	b.n	801050a <tcp_receive+0xebe>
 8010344:	24007468 	.word	0x24007468
 8010348:	24007465 	.word	0x24007465
 801034c:	24007438 	.word	0x24007438
 8010350:	24007458 	.word	0x24007458
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010356:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	2b00      	cmp	r3, #0
 801035e:	f040 80c6 	bne.w	80104ee <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010362:	4b80      	ldr	r3, [pc, #512]	; (8010564 <tcp_receive+0xf18>)
 8010364:	681a      	ldr	r2, [r3, #0]
 8010366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010368:	68db      	ldr	r3, [r3, #12]
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801036e:	2b00      	cmp	r3, #0
 8010370:	f340 80bd 	ble.w	80104ee <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010376:	68db      	ldr	r3, [r3, #12]
 8010378:	899b      	ldrh	r3, [r3, #12]
 801037a:	b29b      	uxth	r3, r3
 801037c:	4618      	mov	r0, r3
 801037e:	f7f7 ffbd 	bl	80082fc <lwip_htons>
 8010382:	4603      	mov	r3, r0
 8010384:	b2db      	uxtb	r3, r3
 8010386:	f003 0301 	and.w	r3, r3, #1
 801038a:	2b00      	cmp	r3, #0
 801038c:	f040 80bf 	bne.w	801050e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010390:	4875      	ldr	r0, [pc, #468]	; (8010568 <tcp_receive+0xf1c>)
 8010392:	f7fd fb07 	bl	800d9a4 <tcp_seg_copy>
 8010396:	4602      	mov	r2, r0
 8010398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801039a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801039c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f000 80b6 	beq.w	8010512 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80103a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a8:	68db      	ldr	r3, [r3, #12]
 80103aa:	685b      	ldr	r3, [r3, #4]
 80103ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103ae:	8912      	ldrh	r2, [r2, #8]
 80103b0:	441a      	add	r2, r3
 80103b2:	4b6c      	ldr	r3, [pc, #432]	; (8010564 <tcp_receive+0xf18>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	1ad3      	subs	r3, r2, r3
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	dd12      	ble.n	80103e2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80103bc:	4b69      	ldr	r3, [pc, #420]	; (8010564 <tcp_receive+0xf18>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	b29a      	uxth	r2, r3
 80103c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c4:	68db      	ldr	r3, [r3, #12]
 80103c6:	685b      	ldr	r3, [r3, #4]
 80103c8:	b29b      	uxth	r3, r3
 80103ca:	1ad3      	subs	r3, r2, r3
 80103cc:	b29a      	uxth	r2, r3
 80103ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80103d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d4:	685a      	ldr	r2, [r3, #4]
 80103d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d8:	891b      	ldrh	r3, [r3, #8]
 80103da:	4619      	mov	r1, r3
 80103dc:	4610      	mov	r0, r2
 80103de:	f7fb fdad 	bl	800bf3c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80103e2:	4b62      	ldr	r3, [pc, #392]	; (801056c <tcp_receive+0xf20>)
 80103e4:	881b      	ldrh	r3, [r3, #0]
 80103e6:	461a      	mov	r2, r3
 80103e8:	4b5e      	ldr	r3, [pc, #376]	; (8010564 <tcp_receive+0xf18>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	441a      	add	r2, r3
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f2:	6879      	ldr	r1, [r7, #4]
 80103f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80103f6:	440b      	add	r3, r1
 80103f8:	1ad3      	subs	r3, r2, r3
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	f340 8089 	ble.w	8010512 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	68db      	ldr	r3, [r3, #12]
 8010406:	899b      	ldrh	r3, [r3, #12]
 8010408:	b29b      	uxth	r3, r3
 801040a:	4618      	mov	r0, r3
 801040c:	f7f7 ff76 	bl	80082fc <lwip_htons>
 8010410:	4603      	mov	r3, r0
 8010412:	b2db      	uxtb	r3, r3
 8010414:	f003 0301 	and.w	r3, r3, #1
 8010418:	2b00      	cmp	r3, #0
 801041a:	d022      	beq.n	8010462 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801041c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	68db      	ldr	r3, [r3, #12]
 8010422:	899b      	ldrh	r3, [r3, #12]
 8010424:	b29b      	uxth	r3, r3
 8010426:	b21b      	sxth	r3, r3
 8010428:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801042c:	b21c      	sxth	r4, r3
 801042e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	68db      	ldr	r3, [r3, #12]
 8010434:	899b      	ldrh	r3, [r3, #12]
 8010436:	b29b      	uxth	r3, r3
 8010438:	4618      	mov	r0, r3
 801043a:	f7f7 ff5f 	bl	80082fc <lwip_htons>
 801043e:	4603      	mov	r3, r0
 8010440:	b2db      	uxtb	r3, r3
 8010442:	b29b      	uxth	r3, r3
 8010444:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010448:	b29b      	uxth	r3, r3
 801044a:	4618      	mov	r0, r3
 801044c:	f7f7 ff56 	bl	80082fc <lwip_htons>
 8010450:	4603      	mov	r3, r0
 8010452:	b21b      	sxth	r3, r3
 8010454:	4323      	orrs	r3, r4
 8010456:	b21a      	sxth	r2, r3
 8010458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	68db      	ldr	r3, [r3, #12]
 801045e:	b292      	uxth	r2, r2
 8010460:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010466:	b29a      	uxth	r2, r3
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801046c:	4413      	add	r3, r2
 801046e:	b299      	uxth	r1, r3
 8010470:	4b3c      	ldr	r3, [pc, #240]	; (8010564 <tcp_receive+0xf18>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	b29a      	uxth	r2, r3
 8010476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	1a8a      	subs	r2, r1, r2
 801047c:	b292      	uxth	r2, r2
 801047e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	685a      	ldr	r2, [r3, #4]
 8010486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	891b      	ldrh	r3, [r3, #8]
 801048c:	4619      	mov	r1, r3
 801048e:	4610      	mov	r0, r2
 8010490:	f7fb fd54 	bl	800bf3c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	891c      	ldrh	r4, [r3, #8]
 801049a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	68db      	ldr	r3, [r3, #12]
 80104a0:	899b      	ldrh	r3, [r3, #12]
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7f7 ff29 	bl	80082fc <lwip_htons>
 80104aa:	4603      	mov	r3, r0
 80104ac:	b2db      	uxtb	r3, r3
 80104ae:	f003 0303 	and.w	r3, r3, #3
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d001      	beq.n	80104ba <tcp_receive+0xe6e>
 80104b6:	2301      	movs	r3, #1
 80104b8:	e000      	b.n	80104bc <tcp_receive+0xe70>
 80104ba:	2300      	movs	r3, #0
 80104bc:	4423      	add	r3, r4
 80104be:	b29a      	uxth	r2, r3
 80104c0:	4b2a      	ldr	r3, [pc, #168]	; (801056c <tcp_receive+0xf20>)
 80104c2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80104c4:	4b29      	ldr	r3, [pc, #164]	; (801056c <tcp_receive+0xf20>)
 80104c6:	881b      	ldrh	r3, [r3, #0]
 80104c8:	461a      	mov	r2, r3
 80104ca:	4b26      	ldr	r3, [pc, #152]	; (8010564 <tcp_receive+0xf18>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	441a      	add	r2, r3
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104d4:	6879      	ldr	r1, [r7, #4]
 80104d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80104d8:	440b      	add	r3, r1
 80104da:	429a      	cmp	r2, r3
 80104dc:	d019      	beq.n	8010512 <tcp_receive+0xec6>
 80104de:	4b24      	ldr	r3, [pc, #144]	; (8010570 <tcp_receive+0xf24>)
 80104e0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80104e4:	4923      	ldr	r1, [pc, #140]	; (8010574 <tcp_receive+0xf28>)
 80104e6:	4824      	ldr	r0, [pc, #144]	; (8010578 <tcp_receive+0xf2c>)
 80104e8:	f002 f8da 	bl	80126a0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80104ec:	e011      	b.n	8010512 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80104ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80104f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	f47f aea4 	bne.w	8010244 <tcp_receive+0xbf8>
 80104fc:	e00a      	b.n	8010514 <tcp_receive+0xec8>
                break;
 80104fe:	bf00      	nop
 8010500:	e008      	b.n	8010514 <tcp_receive+0xec8>
                break;
 8010502:	bf00      	nop
 8010504:	e006      	b.n	8010514 <tcp_receive+0xec8>
                  break;
 8010506:	bf00      	nop
 8010508:	e004      	b.n	8010514 <tcp_receive+0xec8>
                  break;
 801050a:	bf00      	nop
 801050c:	e002      	b.n	8010514 <tcp_receive+0xec8>
                  break;
 801050e:	bf00      	nop
 8010510:	e000      	b.n	8010514 <tcp_receive+0xec8>
                break;
 8010512:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f001 fa33 	bl	8011980 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801051a:	e003      	b.n	8010524 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f001 fa2f 	bl	8011980 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010522:	e01a      	b.n	801055a <tcp_receive+0xf0e>
 8010524:	e019      	b.n	801055a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010526:	4b0f      	ldr	r3, [pc, #60]	; (8010564 <tcp_receive+0xf18>)
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801052e:	1ad3      	subs	r3, r2, r3
 8010530:	2b00      	cmp	r3, #0
 8010532:	db0a      	blt.n	801054a <tcp_receive+0xefe>
 8010534:	4b0b      	ldr	r3, [pc, #44]	; (8010564 <tcp_receive+0xf18>)
 8010536:	681a      	ldr	r2, [r3, #0]
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801053c:	6879      	ldr	r1, [r7, #4]
 801053e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010540:	440b      	add	r3, r1
 8010542:	1ad3      	subs	r3, r2, r3
 8010544:	3301      	adds	r3, #1
 8010546:	2b00      	cmp	r3, #0
 8010548:	dd07      	ble.n	801055a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	8b5b      	ldrh	r3, [r3, #26]
 801054e:	f043 0302 	orr.w	r3, r3, #2
 8010552:	b29a      	uxth	r2, r3
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010558:	e7ff      	b.n	801055a <tcp_receive+0xf0e>
 801055a:	bf00      	nop
 801055c:	3750      	adds	r7, #80	; 0x50
 801055e:	46bd      	mov	sp, r7
 8010560:	bdb0      	pop	{r4, r5, r7, pc}
 8010562:	bf00      	nop
 8010564:	24007458 	.word	0x24007458
 8010568:	24007438 	.word	0x24007438
 801056c:	24007462 	.word	0x24007462
 8010570:	08015354 	.word	0x08015354
 8010574:	08015738 	.word	0x08015738
 8010578:	080153dc 	.word	0x080153dc

0801057c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801057c:	b480      	push	{r7}
 801057e:	b083      	sub	sp, #12
 8010580:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010582:	4b15      	ldr	r3, [pc, #84]	; (80105d8 <tcp_get_next_optbyte+0x5c>)
 8010584:	881b      	ldrh	r3, [r3, #0]
 8010586:	1c5a      	adds	r2, r3, #1
 8010588:	b291      	uxth	r1, r2
 801058a:	4a13      	ldr	r2, [pc, #76]	; (80105d8 <tcp_get_next_optbyte+0x5c>)
 801058c:	8011      	strh	r1, [r2, #0]
 801058e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010590:	4b12      	ldr	r3, [pc, #72]	; (80105dc <tcp_get_next_optbyte+0x60>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d004      	beq.n	80105a2 <tcp_get_next_optbyte+0x26>
 8010598:	4b11      	ldr	r3, [pc, #68]	; (80105e0 <tcp_get_next_optbyte+0x64>)
 801059a:	881b      	ldrh	r3, [r3, #0]
 801059c:	88fa      	ldrh	r2, [r7, #6]
 801059e:	429a      	cmp	r2, r3
 80105a0:	d208      	bcs.n	80105b4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80105a2:	4b10      	ldr	r3, [pc, #64]	; (80105e4 <tcp_get_next_optbyte+0x68>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	3314      	adds	r3, #20
 80105a8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80105aa:	88fb      	ldrh	r3, [r7, #6]
 80105ac:	683a      	ldr	r2, [r7, #0]
 80105ae:	4413      	add	r3, r2
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	e00b      	b.n	80105cc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80105b4:	88fb      	ldrh	r3, [r7, #6]
 80105b6:	b2da      	uxtb	r2, r3
 80105b8:	4b09      	ldr	r3, [pc, #36]	; (80105e0 <tcp_get_next_optbyte+0x64>)
 80105ba:	881b      	ldrh	r3, [r3, #0]
 80105bc:	b2db      	uxtb	r3, r3
 80105be:	1ad3      	subs	r3, r2, r3
 80105c0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80105c2:	4b06      	ldr	r3, [pc, #24]	; (80105dc <tcp_get_next_optbyte+0x60>)
 80105c4:	681a      	ldr	r2, [r3, #0]
 80105c6:	797b      	ldrb	r3, [r7, #5]
 80105c8:	4413      	add	r3, r2
 80105ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	370c      	adds	r7, #12
 80105d0:	46bd      	mov	sp, r7
 80105d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d6:	4770      	bx	lr
 80105d8:	24007454 	.word	0x24007454
 80105dc:	24007450 	.word	0x24007450
 80105e0:	2400744e 	.word	0x2400744e
 80105e4:	24007448 	.word	0x24007448

080105e8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b084      	sub	sp, #16
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d106      	bne.n	8010604 <tcp_parseopt+0x1c>
 80105f6:	4b32      	ldr	r3, [pc, #200]	; (80106c0 <tcp_parseopt+0xd8>)
 80105f8:	f240 727d 	movw	r2, #1917	; 0x77d
 80105fc:	4931      	ldr	r1, [pc, #196]	; (80106c4 <tcp_parseopt+0xdc>)
 80105fe:	4832      	ldr	r0, [pc, #200]	; (80106c8 <tcp_parseopt+0xe0>)
 8010600:	f002 f84e 	bl	80126a0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010604:	4b31      	ldr	r3, [pc, #196]	; (80106cc <tcp_parseopt+0xe4>)
 8010606:	881b      	ldrh	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d055      	beq.n	80106b8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801060c:	4b30      	ldr	r3, [pc, #192]	; (80106d0 <tcp_parseopt+0xe8>)
 801060e:	2200      	movs	r2, #0
 8010610:	801a      	strh	r2, [r3, #0]
 8010612:	e045      	b.n	80106a0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010614:	f7ff ffb2 	bl	801057c <tcp_get_next_optbyte>
 8010618:	4603      	mov	r3, r0
 801061a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801061c:	7bfb      	ldrb	r3, [r7, #15]
 801061e:	2b02      	cmp	r3, #2
 8010620:	d006      	beq.n	8010630 <tcp_parseopt+0x48>
 8010622:	2b02      	cmp	r3, #2
 8010624:	dc2b      	bgt.n	801067e <tcp_parseopt+0x96>
 8010626:	2b00      	cmp	r3, #0
 8010628:	d041      	beq.n	80106ae <tcp_parseopt+0xc6>
 801062a:	2b01      	cmp	r3, #1
 801062c:	d127      	bne.n	801067e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801062e:	e037      	b.n	80106a0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010630:	f7ff ffa4 	bl	801057c <tcp_get_next_optbyte>
 8010634:	4603      	mov	r3, r0
 8010636:	2b04      	cmp	r3, #4
 8010638:	d13b      	bne.n	80106b2 <tcp_parseopt+0xca>
 801063a:	4b25      	ldr	r3, [pc, #148]	; (80106d0 <tcp_parseopt+0xe8>)
 801063c:	881b      	ldrh	r3, [r3, #0]
 801063e:	3301      	adds	r3, #1
 8010640:	4a22      	ldr	r2, [pc, #136]	; (80106cc <tcp_parseopt+0xe4>)
 8010642:	8812      	ldrh	r2, [r2, #0]
 8010644:	4293      	cmp	r3, r2
 8010646:	da34      	bge.n	80106b2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010648:	f7ff ff98 	bl	801057c <tcp_get_next_optbyte>
 801064c:	4603      	mov	r3, r0
 801064e:	b29b      	uxth	r3, r3
 8010650:	021b      	lsls	r3, r3, #8
 8010652:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010654:	f7ff ff92 	bl	801057c <tcp_get_next_optbyte>
 8010658:	4603      	mov	r3, r0
 801065a:	b29a      	uxth	r2, r3
 801065c:	89bb      	ldrh	r3, [r7, #12]
 801065e:	4313      	orrs	r3, r2
 8010660:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010662:	89bb      	ldrh	r3, [r7, #12]
 8010664:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010668:	d804      	bhi.n	8010674 <tcp_parseopt+0x8c>
 801066a:	89bb      	ldrh	r3, [r7, #12]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d001      	beq.n	8010674 <tcp_parseopt+0x8c>
 8010670:	89ba      	ldrh	r2, [r7, #12]
 8010672:	e001      	b.n	8010678 <tcp_parseopt+0x90>
 8010674:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801067c:	e010      	b.n	80106a0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801067e:	f7ff ff7d 	bl	801057c <tcp_get_next_optbyte>
 8010682:	4603      	mov	r3, r0
 8010684:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010686:	7afb      	ldrb	r3, [r7, #11]
 8010688:	2b01      	cmp	r3, #1
 801068a:	d914      	bls.n	80106b6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801068c:	7afb      	ldrb	r3, [r7, #11]
 801068e:	b29a      	uxth	r2, r3
 8010690:	4b0f      	ldr	r3, [pc, #60]	; (80106d0 <tcp_parseopt+0xe8>)
 8010692:	881b      	ldrh	r3, [r3, #0]
 8010694:	4413      	add	r3, r2
 8010696:	b29b      	uxth	r3, r3
 8010698:	3b02      	subs	r3, #2
 801069a:	b29a      	uxth	r2, r3
 801069c:	4b0c      	ldr	r3, [pc, #48]	; (80106d0 <tcp_parseopt+0xe8>)
 801069e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80106a0:	4b0b      	ldr	r3, [pc, #44]	; (80106d0 <tcp_parseopt+0xe8>)
 80106a2:	881a      	ldrh	r2, [r3, #0]
 80106a4:	4b09      	ldr	r3, [pc, #36]	; (80106cc <tcp_parseopt+0xe4>)
 80106a6:	881b      	ldrh	r3, [r3, #0]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d3b3      	bcc.n	8010614 <tcp_parseopt+0x2c>
 80106ac:	e004      	b.n	80106b8 <tcp_parseopt+0xd0>
          return;
 80106ae:	bf00      	nop
 80106b0:	e002      	b.n	80106b8 <tcp_parseopt+0xd0>
            return;
 80106b2:	bf00      	nop
 80106b4:	e000      	b.n	80106b8 <tcp_parseopt+0xd0>
            return;
 80106b6:	bf00      	nop
      }
    }
  }
}
 80106b8:	3710      	adds	r7, #16
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}
 80106be:	bf00      	nop
 80106c0:	08015354 	.word	0x08015354
 80106c4:	080157f4 	.word	0x080157f4
 80106c8:	080153dc 	.word	0x080153dc
 80106cc:	2400744c 	.word	0x2400744c
 80106d0:	24007454 	.word	0x24007454

080106d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80106d4:	b480      	push	{r7}
 80106d6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80106d8:	4b05      	ldr	r3, [pc, #20]	; (80106f0 <tcp_trigger_input_pcb_close+0x1c>)
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	f043 0310 	orr.w	r3, r3, #16
 80106e0:	b2da      	uxtb	r2, r3
 80106e2:	4b03      	ldr	r3, [pc, #12]	; (80106f0 <tcp_trigger_input_pcb_close+0x1c>)
 80106e4:	701a      	strb	r2, [r3, #0]
}
 80106e6:	bf00      	nop
 80106e8:	46bd      	mov	sp, r7
 80106ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ee:	4770      	bx	lr
 80106f0:	24007465 	.word	0x24007465

080106f4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b084      	sub	sp, #16
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	60f8      	str	r0, [r7, #12]
 80106fc:	60b9      	str	r1, [r7, #8]
 80106fe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d00a      	beq.n	801071c <tcp_route+0x28>
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	7a1b      	ldrb	r3, [r3, #8]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d006      	beq.n	801071c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	7a1b      	ldrb	r3, [r3, #8]
 8010712:	4618      	mov	r0, r3
 8010714:	f7fb fa0a 	bl	800bb2c <netif_get_by_index>
 8010718:	4603      	mov	r3, r0
 801071a:	e003      	b.n	8010724 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f7f9 f8c5 	bl	80098ac <ip4_route>
 8010722:	4603      	mov	r3, r0
  }
}
 8010724:	4618      	mov	r0, r3
 8010726:	3710      	adds	r7, #16
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}

0801072c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801072c:	b590      	push	{r4, r7, lr}
 801072e:	b087      	sub	sp, #28
 8010730:	af00      	add	r7, sp, #0
 8010732:	60f8      	str	r0, [r7, #12]
 8010734:	60b9      	str	r1, [r7, #8]
 8010736:	603b      	str	r3, [r7, #0]
 8010738:	4613      	mov	r3, r2
 801073a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d105      	bne.n	801074e <tcp_create_segment+0x22>
 8010742:	4b44      	ldr	r3, [pc, #272]	; (8010854 <tcp_create_segment+0x128>)
 8010744:	22a3      	movs	r2, #163	; 0xa3
 8010746:	4944      	ldr	r1, [pc, #272]	; (8010858 <tcp_create_segment+0x12c>)
 8010748:	4844      	ldr	r0, [pc, #272]	; (801085c <tcp_create_segment+0x130>)
 801074a:	f001 ffa9 	bl	80126a0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d105      	bne.n	8010760 <tcp_create_segment+0x34>
 8010754:	4b3f      	ldr	r3, [pc, #252]	; (8010854 <tcp_create_segment+0x128>)
 8010756:	22a4      	movs	r2, #164	; 0xa4
 8010758:	4941      	ldr	r1, [pc, #260]	; (8010860 <tcp_create_segment+0x134>)
 801075a:	4840      	ldr	r0, [pc, #256]	; (801085c <tcp_create_segment+0x130>)
 801075c:	f001 ffa0 	bl	80126a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010760:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	b2db      	uxtb	r3, r3
 8010768:	f003 0304 	and.w	r3, r3, #4
 801076c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801076e:	2003      	movs	r0, #3
 8010770:	f7fa fe50 	bl	800b414 <memp_malloc>
 8010774:	6138      	str	r0, [r7, #16]
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d104      	bne.n	8010786 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801077c:	68b8      	ldr	r0, [r7, #8]
 801077e:	f7fb fd63 	bl	800c248 <pbuf_free>
    return NULL;
 8010782:	2300      	movs	r3, #0
 8010784:	e061      	b.n	801084a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010786:	693b      	ldr	r3, [r7, #16]
 8010788:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801078c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	2200      	movs	r2, #0
 8010792:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	68ba      	ldr	r2, [r7, #8]
 8010798:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	891a      	ldrh	r2, [r3, #8]
 801079e:	7dfb      	ldrb	r3, [r7, #23]
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d205      	bcs.n	80107b2 <tcp_create_segment+0x86>
 80107a6:	4b2b      	ldr	r3, [pc, #172]	; (8010854 <tcp_create_segment+0x128>)
 80107a8:	22b0      	movs	r2, #176	; 0xb0
 80107aa:	492e      	ldr	r1, [pc, #184]	; (8010864 <tcp_create_segment+0x138>)
 80107ac:	482b      	ldr	r0, [pc, #172]	; (801085c <tcp_create_segment+0x130>)
 80107ae:	f001 ff77 	bl	80126a0 <iprintf>
  seg->len = p->tot_len - optlen;
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	891a      	ldrh	r2, [r3, #8]
 80107b6:	7dfb      	ldrb	r3, [r7, #23]
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	1ad3      	subs	r3, r2, r3
 80107bc:	b29a      	uxth	r2, r3
 80107be:	693b      	ldr	r3, [r7, #16]
 80107c0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80107c2:	2114      	movs	r1, #20
 80107c4:	68b8      	ldr	r0, [r7, #8]
 80107c6:	f7fb fca9 	bl	800c11c <pbuf_add_header>
 80107ca:	4603      	mov	r3, r0
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d004      	beq.n	80107da <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80107d0:	6938      	ldr	r0, [r7, #16]
 80107d2:	f7fd f8ce 	bl	800d972 <tcp_seg_free>
    return NULL;
 80107d6:	2300      	movs	r3, #0
 80107d8:	e037      	b.n	801084a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	685a      	ldr	r2, [r3, #4]
 80107e0:	693b      	ldr	r3, [r7, #16]
 80107e2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	8ada      	ldrh	r2, [r3, #22]
 80107e8:	693b      	ldr	r3, [r7, #16]
 80107ea:	68dc      	ldr	r4, [r3, #12]
 80107ec:	4610      	mov	r0, r2
 80107ee:	f7f7 fd85 	bl	80082fc <lwip_htons>
 80107f2:	4603      	mov	r3, r0
 80107f4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	8b1a      	ldrh	r2, [r3, #24]
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	68dc      	ldr	r4, [r3, #12]
 80107fe:	4610      	mov	r0, r2
 8010800:	f7f7 fd7c 	bl	80082fc <lwip_htons>
 8010804:	4603      	mov	r3, r0
 8010806:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	68dc      	ldr	r4, [r3, #12]
 801080c:	6838      	ldr	r0, [r7, #0]
 801080e:	f7f7 fd8a 	bl	8008326 <lwip_htonl>
 8010812:	4603      	mov	r3, r0
 8010814:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010816:	7dfb      	ldrb	r3, [r7, #23]
 8010818:	089b      	lsrs	r3, r3, #2
 801081a:	b2db      	uxtb	r3, r3
 801081c:	b29b      	uxth	r3, r3
 801081e:	3305      	adds	r3, #5
 8010820:	b29b      	uxth	r3, r3
 8010822:	031b      	lsls	r3, r3, #12
 8010824:	b29a      	uxth	r2, r3
 8010826:	79fb      	ldrb	r3, [r7, #7]
 8010828:	b29b      	uxth	r3, r3
 801082a:	4313      	orrs	r3, r2
 801082c:	b29a      	uxth	r2, r3
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	68dc      	ldr	r4, [r3, #12]
 8010832:	4610      	mov	r0, r2
 8010834:	f7f7 fd62 	bl	80082fc <lwip_htons>
 8010838:	4603      	mov	r3, r0
 801083a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	68db      	ldr	r3, [r3, #12]
 8010840:	2200      	movs	r2, #0
 8010842:	749a      	strb	r2, [r3, #18]
 8010844:	2200      	movs	r2, #0
 8010846:	74da      	strb	r2, [r3, #19]
  return seg;
 8010848:	693b      	ldr	r3, [r7, #16]
}
 801084a:	4618      	mov	r0, r3
 801084c:	371c      	adds	r7, #28
 801084e:	46bd      	mov	sp, r7
 8010850:	bd90      	pop	{r4, r7, pc}
 8010852:	bf00      	nop
 8010854:	08015810 	.word	0x08015810
 8010858:	08015884 	.word	0x08015884
 801085c:	080158a4 	.word	0x080158a4
 8010860:	080158cc 	.word	0x080158cc
 8010864:	080158f0 	.word	0x080158f0

08010868 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010868:	b590      	push	{r4, r7, lr}
 801086a:	b08b      	sub	sp, #44	; 0x2c
 801086c:	af02      	add	r7, sp, #8
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	460b      	mov	r3, r1
 8010872:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010874:	2300      	movs	r3, #0
 8010876:	61fb      	str	r3, [r7, #28]
 8010878:	2300      	movs	r3, #0
 801087a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801087c:	2300      	movs	r3, #0
 801087e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d106      	bne.n	8010894 <tcp_split_unsent_seg+0x2c>
 8010886:	4b95      	ldr	r3, [pc, #596]	; (8010adc <tcp_split_unsent_seg+0x274>)
 8010888:	f240 324b 	movw	r2, #843	; 0x34b
 801088c:	4994      	ldr	r1, [pc, #592]	; (8010ae0 <tcp_split_unsent_seg+0x278>)
 801088e:	4895      	ldr	r0, [pc, #596]	; (8010ae4 <tcp_split_unsent_seg+0x27c>)
 8010890:	f001 ff06 	bl	80126a0 <iprintf>

  useg = pcb->unsent;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010898:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d102      	bne.n	80108a6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80108a0:	f04f 33ff 	mov.w	r3, #4294967295
 80108a4:	e116      	b.n	8010ad4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80108a6:	887b      	ldrh	r3, [r7, #2]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d109      	bne.n	80108c0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80108ac:	4b8b      	ldr	r3, [pc, #556]	; (8010adc <tcp_split_unsent_seg+0x274>)
 80108ae:	f240 3253 	movw	r2, #851	; 0x353
 80108b2:	498d      	ldr	r1, [pc, #564]	; (8010ae8 <tcp_split_unsent_seg+0x280>)
 80108b4:	488b      	ldr	r0, [pc, #556]	; (8010ae4 <tcp_split_unsent_seg+0x27c>)
 80108b6:	f001 fef3 	bl	80126a0 <iprintf>
    return ERR_VAL;
 80108ba:	f06f 0305 	mvn.w	r3, #5
 80108be:	e109      	b.n	8010ad4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	891b      	ldrh	r3, [r3, #8]
 80108c4:	887a      	ldrh	r2, [r7, #2]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d301      	bcc.n	80108ce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80108ca:	2300      	movs	r3, #0
 80108cc:	e102      	b.n	8010ad4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108d2:	887a      	ldrh	r2, [r7, #2]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d906      	bls.n	80108e6 <tcp_split_unsent_seg+0x7e>
 80108d8:	4b80      	ldr	r3, [pc, #512]	; (8010adc <tcp_split_unsent_seg+0x274>)
 80108da:	f240 325b 	movw	r2, #859	; 0x35b
 80108de:	4983      	ldr	r1, [pc, #524]	; (8010aec <tcp_split_unsent_seg+0x284>)
 80108e0:	4880      	ldr	r0, [pc, #512]	; (8010ae4 <tcp_split_unsent_seg+0x27c>)
 80108e2:	f001 fedd 	bl	80126a0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	891b      	ldrh	r3, [r3, #8]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d106      	bne.n	80108fc <tcp_split_unsent_seg+0x94>
 80108ee:	4b7b      	ldr	r3, [pc, #492]	; (8010adc <tcp_split_unsent_seg+0x274>)
 80108f0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80108f4:	497e      	ldr	r1, [pc, #504]	; (8010af0 <tcp_split_unsent_seg+0x288>)
 80108f6:	487b      	ldr	r0, [pc, #492]	; (8010ae4 <tcp_split_unsent_seg+0x27c>)
 80108f8:	f001 fed2 	bl	80126a0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	7a9b      	ldrb	r3, [r3, #10]
 8010900:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010902:	7bfb      	ldrb	r3, [r7, #15]
 8010904:	009b      	lsls	r3, r3, #2
 8010906:	b2db      	uxtb	r3, r3
 8010908:	f003 0304 	and.w	r3, r3, #4
 801090c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	891a      	ldrh	r2, [r3, #8]
 8010912:	887b      	ldrh	r3, [r7, #2]
 8010914:	1ad3      	subs	r3, r2, r3
 8010916:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010918:	7bbb      	ldrb	r3, [r7, #14]
 801091a:	b29a      	uxth	r2, r3
 801091c:	89bb      	ldrh	r3, [r7, #12]
 801091e:	4413      	add	r3, r2
 8010920:	b29b      	uxth	r3, r3
 8010922:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010926:	4619      	mov	r1, r3
 8010928:	2036      	movs	r0, #54	; 0x36
 801092a:	f7fb f9a9 	bl	800bc80 <pbuf_alloc>
 801092e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	2b00      	cmp	r3, #0
 8010934:	f000 80b7 	beq.w	8010aa6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	685b      	ldr	r3, [r3, #4]
 801093c:	891a      	ldrh	r2, [r3, #8]
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	891b      	ldrh	r3, [r3, #8]
 8010942:	1ad3      	subs	r3, r2, r3
 8010944:	b29a      	uxth	r2, r3
 8010946:	887b      	ldrh	r3, [r7, #2]
 8010948:	4413      	add	r3, r2
 801094a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	6858      	ldr	r0, [r3, #4]
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	685a      	ldr	r2, [r3, #4]
 8010954:	7bbb      	ldrb	r3, [r7, #14]
 8010956:	18d1      	adds	r1, r2, r3
 8010958:	897b      	ldrh	r3, [r7, #10]
 801095a:	89ba      	ldrh	r2, [r7, #12]
 801095c:	f7fb fe6a 	bl	800c634 <pbuf_copy_partial>
 8010960:	4603      	mov	r3, r0
 8010962:	461a      	mov	r2, r3
 8010964:	89bb      	ldrh	r3, [r7, #12]
 8010966:	4293      	cmp	r3, r2
 8010968:	f040 809f 	bne.w	8010aaa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	899b      	ldrh	r3, [r3, #12]
 8010972:	b29b      	uxth	r3, r3
 8010974:	4618      	mov	r0, r3
 8010976:	f7f7 fcc1 	bl	80082fc <lwip_htons>
 801097a:	4603      	mov	r3, r0
 801097c:	b2db      	uxtb	r3, r3
 801097e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010982:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010984:	2300      	movs	r3, #0
 8010986:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010988:	7efb      	ldrb	r3, [r7, #27]
 801098a:	f003 0308 	and.w	r3, r3, #8
 801098e:	2b00      	cmp	r3, #0
 8010990:	d007      	beq.n	80109a2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010992:	7efb      	ldrb	r3, [r7, #27]
 8010994:	f023 0308 	bic.w	r3, r3, #8
 8010998:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801099a:	7ebb      	ldrb	r3, [r7, #26]
 801099c:	f043 0308 	orr.w	r3, r3, #8
 80109a0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80109a2:	7efb      	ldrb	r3, [r7, #27]
 80109a4:	f003 0301 	and.w	r3, r3, #1
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d007      	beq.n	80109bc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80109ac:	7efb      	ldrb	r3, [r7, #27]
 80109ae:	f023 0301 	bic.w	r3, r3, #1
 80109b2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80109b4:	7ebb      	ldrb	r3, [r7, #26]
 80109b6:	f043 0301 	orr.w	r3, r3, #1
 80109ba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	68db      	ldr	r3, [r3, #12]
 80109c0:	685b      	ldr	r3, [r3, #4]
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7f7 fcaf 	bl	8008326 <lwip_htonl>
 80109c8:	4602      	mov	r2, r0
 80109ca:	887b      	ldrh	r3, [r7, #2]
 80109cc:	18d1      	adds	r1, r2, r3
 80109ce:	7eba      	ldrb	r2, [r7, #26]
 80109d0:	7bfb      	ldrb	r3, [r7, #15]
 80109d2:	9300      	str	r3, [sp, #0]
 80109d4:	460b      	mov	r3, r1
 80109d6:	6939      	ldr	r1, [r7, #16]
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f7ff fea7 	bl	801072c <tcp_create_segment>
 80109de:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80109e0:	69fb      	ldr	r3, [r7, #28]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d063      	beq.n	8010aae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fb fcba 	bl	800c364 <pbuf_clen>
 80109f0:	4603      	mov	r3, r0
 80109f2:	461a      	mov	r2, r3
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109fa:	1a9b      	subs	r3, r3, r2
 80109fc:	b29a      	uxth	r2, r3
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	6858      	ldr	r0, [r3, #4]
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	685b      	ldr	r3, [r3, #4]
 8010a0c:	891a      	ldrh	r2, [r3, #8]
 8010a0e:	89bb      	ldrh	r3, [r7, #12]
 8010a10:	1ad3      	subs	r3, r2, r3
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	4619      	mov	r1, r3
 8010a16:	f7fb fa91 	bl	800bf3c <pbuf_realloc>
  useg->len -= remainder;
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	891a      	ldrh	r2, [r3, #8]
 8010a1e:	89bb      	ldrh	r3, [r7, #12]
 8010a20:	1ad3      	subs	r3, r2, r3
 8010a22:	b29a      	uxth	r2, r3
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010a28:	697b      	ldr	r3, [r7, #20]
 8010a2a:	68db      	ldr	r3, [r3, #12]
 8010a2c:	899b      	ldrh	r3, [r3, #12]
 8010a2e:	b29c      	uxth	r4, r3
 8010a30:	7efb      	ldrb	r3, [r7, #27]
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	4618      	mov	r0, r3
 8010a36:	f7f7 fc61 	bl	80082fc <lwip_htons>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	68db      	ldr	r3, [r3, #12]
 8010a42:	4322      	orrs	r2, r4
 8010a44:	b292      	uxth	r2, r2
 8010a46:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	685b      	ldr	r3, [r3, #4]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7fb fc89 	bl	800c364 <pbuf_clen>
 8010a52:	4603      	mov	r3, r0
 8010a54:	461a      	mov	r2, r3
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a5c:	4413      	add	r3, r2
 8010a5e:	b29a      	uxth	r2, r3
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010a66:	69fb      	ldr	r3, [r7, #28]
 8010a68:	685b      	ldr	r3, [r3, #4]
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7fb fc7a 	bl	800c364 <pbuf_clen>
 8010a70:	4603      	mov	r3, r0
 8010a72:	461a      	mov	r2, r3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a7a:	4413      	add	r3, r2
 8010a7c:	b29a      	uxth	r2, r3
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	69fa      	ldr	r2, [r7, #28]
 8010a90:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010a92:	69fb      	ldr	r3, [r7, #28]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d103      	bne.n	8010aa2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	e016      	b.n	8010ad4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010aa6:	bf00      	nop
 8010aa8:	e002      	b.n	8010ab0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010aaa:	bf00      	nop
 8010aac:	e000      	b.n	8010ab0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010aae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d006      	beq.n	8010ac4 <tcp_split_unsent_seg+0x25c>
 8010ab6:	4b09      	ldr	r3, [pc, #36]	; (8010adc <tcp_split_unsent_seg+0x274>)
 8010ab8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010abc:	490d      	ldr	r1, [pc, #52]	; (8010af4 <tcp_split_unsent_seg+0x28c>)
 8010abe:	4809      	ldr	r0, [pc, #36]	; (8010ae4 <tcp_split_unsent_seg+0x27c>)
 8010ac0:	f001 fdee 	bl	80126a0 <iprintf>
  if (p != NULL) {
 8010ac4:	693b      	ldr	r3, [r7, #16]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d002      	beq.n	8010ad0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010aca:	6938      	ldr	r0, [r7, #16]
 8010acc:	f7fb fbbc 	bl	800c248 <pbuf_free>
  }

  return ERR_MEM;
 8010ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3724      	adds	r7, #36	; 0x24
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd90      	pop	{r4, r7, pc}
 8010adc:	08015810 	.word	0x08015810
 8010ae0:	08015be4 	.word	0x08015be4
 8010ae4:	080158a4 	.word	0x080158a4
 8010ae8:	08015c08 	.word	0x08015c08
 8010aec:	08015c2c 	.word	0x08015c2c
 8010af0:	08015c3c 	.word	0x08015c3c
 8010af4:	08015c4c 	.word	0x08015c4c

08010af8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010af8:	b590      	push	{r4, r7, lr}
 8010afa:	b085      	sub	sp, #20
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d106      	bne.n	8010b14 <tcp_send_fin+0x1c>
 8010b06:	4b21      	ldr	r3, [pc, #132]	; (8010b8c <tcp_send_fin+0x94>)
 8010b08:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010b0c:	4920      	ldr	r1, [pc, #128]	; (8010b90 <tcp_send_fin+0x98>)
 8010b0e:	4821      	ldr	r0, [pc, #132]	; (8010b94 <tcp_send_fin+0x9c>)
 8010b10:	f001 fdc6 	bl	80126a0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d02e      	beq.n	8010b7a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b20:	60fb      	str	r3, [r7, #12]
 8010b22:	e002      	b.n	8010b2a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d1f8      	bne.n	8010b24 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	68db      	ldr	r3, [r3, #12]
 8010b36:	899b      	ldrh	r3, [r3, #12]
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7f7 fbde 	bl	80082fc <lwip_htons>
 8010b40:	4603      	mov	r3, r0
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	f003 0307 	and.w	r3, r3, #7
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d116      	bne.n	8010b7a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	899b      	ldrh	r3, [r3, #12]
 8010b52:	b29c      	uxth	r4, r3
 8010b54:	2001      	movs	r0, #1
 8010b56:	f7f7 fbd1 	bl	80082fc <lwip_htons>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	68db      	ldr	r3, [r3, #12]
 8010b62:	4322      	orrs	r2, r4
 8010b64:	b292      	uxth	r2, r2
 8010b66:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	8b5b      	ldrh	r3, [r3, #26]
 8010b6c:	f043 0320 	orr.w	r3, r3, #32
 8010b70:	b29a      	uxth	r2, r3
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010b76:	2300      	movs	r3, #0
 8010b78:	e004      	b.n	8010b84 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010b7a:	2101      	movs	r1, #1
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f000 f80b 	bl	8010b98 <tcp_enqueue_flags>
 8010b82:	4603      	mov	r3, r0
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3714      	adds	r7, #20
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd90      	pop	{r4, r7, pc}
 8010b8c:	08015810 	.word	0x08015810
 8010b90:	08015c58 	.word	0x08015c58
 8010b94:	080158a4 	.word	0x080158a4

08010b98 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b08a      	sub	sp, #40	; 0x28
 8010b9c:	af02      	add	r7, sp, #8
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	460b      	mov	r3, r1
 8010ba2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010bac:	78fb      	ldrb	r3, [r7, #3]
 8010bae:	f003 0303 	and.w	r3, r3, #3
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d106      	bne.n	8010bc4 <tcp_enqueue_flags+0x2c>
 8010bb6:	4b67      	ldr	r3, [pc, #412]	; (8010d54 <tcp_enqueue_flags+0x1bc>)
 8010bb8:	f240 4211 	movw	r2, #1041	; 0x411
 8010bbc:	4966      	ldr	r1, [pc, #408]	; (8010d58 <tcp_enqueue_flags+0x1c0>)
 8010bbe:	4867      	ldr	r0, [pc, #412]	; (8010d5c <tcp_enqueue_flags+0x1c4>)
 8010bc0:	f001 fd6e 	bl	80126a0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d106      	bne.n	8010bd8 <tcp_enqueue_flags+0x40>
 8010bca:	4b62      	ldr	r3, [pc, #392]	; (8010d54 <tcp_enqueue_flags+0x1bc>)
 8010bcc:	f240 4213 	movw	r2, #1043	; 0x413
 8010bd0:	4963      	ldr	r1, [pc, #396]	; (8010d60 <tcp_enqueue_flags+0x1c8>)
 8010bd2:	4862      	ldr	r0, [pc, #392]	; (8010d5c <tcp_enqueue_flags+0x1c4>)
 8010bd4:	f001 fd64 	bl	80126a0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010bd8:	78fb      	ldrb	r3, [r7, #3]
 8010bda:	f003 0302 	and.w	r3, r3, #2
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d001      	beq.n	8010be6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010be2:	2301      	movs	r3, #1
 8010be4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010be6:	7ffb      	ldrb	r3, [r7, #31]
 8010be8:	009b      	lsls	r3, r3, #2
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	f003 0304 	and.w	r3, r3, #4
 8010bf0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010bf2:	7dfb      	ldrb	r3, [r7, #23]
 8010bf4:	b29b      	uxth	r3, r3
 8010bf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	2036      	movs	r0, #54	; 0x36
 8010bfe:	f7fb f83f 	bl	800bc80 <pbuf_alloc>
 8010c02:	6138      	str	r0, [r7, #16]
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d109      	bne.n	8010c1e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	8b5b      	ldrh	r3, [r3, #26]
 8010c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c12:	b29a      	uxth	r2, r3
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010c18:	f04f 33ff 	mov.w	r3, #4294967295
 8010c1c:	e095      	b.n	8010d4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	895a      	ldrh	r2, [r3, #10]
 8010c22:	7dfb      	ldrb	r3, [r7, #23]
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	429a      	cmp	r2, r3
 8010c28:	d206      	bcs.n	8010c38 <tcp_enqueue_flags+0xa0>
 8010c2a:	4b4a      	ldr	r3, [pc, #296]	; (8010d54 <tcp_enqueue_flags+0x1bc>)
 8010c2c:	f240 4239 	movw	r2, #1081	; 0x439
 8010c30:	494c      	ldr	r1, [pc, #304]	; (8010d64 <tcp_enqueue_flags+0x1cc>)
 8010c32:	484a      	ldr	r0, [pc, #296]	; (8010d5c <tcp_enqueue_flags+0x1c4>)
 8010c34:	f001 fd34 	bl	80126a0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010c3c:	78fa      	ldrb	r2, [r7, #3]
 8010c3e:	7ffb      	ldrb	r3, [r7, #31]
 8010c40:	9300      	str	r3, [sp, #0]
 8010c42:	460b      	mov	r3, r1
 8010c44:	6939      	ldr	r1, [r7, #16]
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f7ff fd70 	bl	801072c <tcp_create_segment>
 8010c4c:	60f8      	str	r0, [r7, #12]
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d109      	bne.n	8010c68 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	8b5b      	ldrh	r3, [r3, #26]
 8010c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c5c:	b29a      	uxth	r2, r3
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010c62:	f04f 33ff 	mov.w	r3, #4294967295
 8010c66:	e070      	b.n	8010d4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	68db      	ldr	r3, [r3, #12]
 8010c6c:	f003 0303 	and.w	r3, r3, #3
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d006      	beq.n	8010c82 <tcp_enqueue_flags+0xea>
 8010c74:	4b37      	ldr	r3, [pc, #220]	; (8010d54 <tcp_enqueue_flags+0x1bc>)
 8010c76:	f240 4242 	movw	r2, #1090	; 0x442
 8010c7a:	493b      	ldr	r1, [pc, #236]	; (8010d68 <tcp_enqueue_flags+0x1d0>)
 8010c7c:	4837      	ldr	r0, [pc, #220]	; (8010d5c <tcp_enqueue_flags+0x1c4>)
 8010c7e:	f001 fd0f 	bl	80126a0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	891b      	ldrh	r3, [r3, #8]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d006      	beq.n	8010c98 <tcp_enqueue_flags+0x100>
 8010c8a:	4b32      	ldr	r3, [pc, #200]	; (8010d54 <tcp_enqueue_flags+0x1bc>)
 8010c8c:	f240 4243 	movw	r2, #1091	; 0x443
 8010c90:	4936      	ldr	r1, [pc, #216]	; (8010d6c <tcp_enqueue_flags+0x1d4>)
 8010c92:	4832      	ldr	r0, [pc, #200]	; (8010d5c <tcp_enqueue_flags+0x1c4>)
 8010c94:	f001 fd04 	bl	80126a0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d103      	bne.n	8010ca8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	68fa      	ldr	r2, [r7, #12]
 8010ca4:	66da      	str	r2, [r3, #108]	; 0x6c
 8010ca6:	e00d      	b.n	8010cc4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cac:	61bb      	str	r3, [r7, #24]
 8010cae:	e002      	b.n	8010cb6 <tcp_enqueue_flags+0x11e>
 8010cb0:	69bb      	ldr	r3, [r7, #24]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	61bb      	str	r3, [r7, #24]
 8010cb6:	69bb      	ldr	r3, [r7, #24]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d1f8      	bne.n	8010cb0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010cbe:	69bb      	ldr	r3, [r7, #24]
 8010cc0:	68fa      	ldr	r2, [r7, #12]
 8010cc2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010ccc:	78fb      	ldrb	r3, [r7, #3]
 8010cce:	f003 0302 	and.w	r3, r3, #2
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d104      	bne.n	8010ce0 <tcp_enqueue_flags+0x148>
 8010cd6:	78fb      	ldrb	r3, [r7, #3]
 8010cd8:	f003 0301 	and.w	r3, r3, #1
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d004      	beq.n	8010cea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ce4:	1c5a      	adds	r2, r3, #1
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010cea:	78fb      	ldrb	r3, [r7, #3]
 8010cec:	f003 0301 	and.w	r3, r3, #1
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d006      	beq.n	8010d02 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	8b5b      	ldrh	r3, [r3, #26]
 8010cf8:	f043 0320 	orr.w	r3, r3, #32
 8010cfc:	b29a      	uxth	r2, r3
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fb fb2c 	bl	800c364 <pbuf_clen>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	461a      	mov	r2, r3
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d16:	4413      	add	r3, r2
 8010d18:	b29a      	uxth	r2, r3
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d00e      	beq.n	8010d48 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d10a      	bne.n	8010d48 <tcp_enqueue_flags+0x1b0>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d106      	bne.n	8010d48 <tcp_enqueue_flags+0x1b0>
 8010d3a:	4b06      	ldr	r3, [pc, #24]	; (8010d54 <tcp_enqueue_flags+0x1bc>)
 8010d3c:	f240 4265 	movw	r2, #1125	; 0x465
 8010d40:	490b      	ldr	r1, [pc, #44]	; (8010d70 <tcp_enqueue_flags+0x1d8>)
 8010d42:	4806      	ldr	r0, [pc, #24]	; (8010d5c <tcp_enqueue_flags+0x1c4>)
 8010d44:	f001 fcac 	bl	80126a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010d48:	2300      	movs	r3, #0
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3720      	adds	r7, #32
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	08015810 	.word	0x08015810
 8010d58:	08015c74 	.word	0x08015c74
 8010d5c:	080158a4 	.word	0x080158a4
 8010d60:	08015ccc 	.word	0x08015ccc
 8010d64:	08015cec 	.word	0x08015cec
 8010d68:	08015d28 	.word	0x08015d28
 8010d6c:	08015d40 	.word	0x08015d40
 8010d70:	08015d6c 	.word	0x08015d6c

08010d74 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010d74:	b5b0      	push	{r4, r5, r7, lr}
 8010d76:	b08a      	sub	sp, #40	; 0x28
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d106      	bne.n	8010d90 <tcp_output+0x1c>
 8010d82:	4b8a      	ldr	r3, [pc, #552]	; (8010fac <tcp_output+0x238>)
 8010d84:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010d88:	4989      	ldr	r1, [pc, #548]	; (8010fb0 <tcp_output+0x23c>)
 8010d8a:	488a      	ldr	r0, [pc, #552]	; (8010fb4 <tcp_output+0x240>)
 8010d8c:	f001 fc88 	bl	80126a0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	7d1b      	ldrb	r3, [r3, #20]
 8010d94:	2b01      	cmp	r3, #1
 8010d96:	d106      	bne.n	8010da6 <tcp_output+0x32>
 8010d98:	4b84      	ldr	r3, [pc, #528]	; (8010fac <tcp_output+0x238>)
 8010d9a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010d9e:	4986      	ldr	r1, [pc, #536]	; (8010fb8 <tcp_output+0x244>)
 8010da0:	4884      	ldr	r0, [pc, #528]	; (8010fb4 <tcp_output+0x240>)
 8010da2:	f001 fc7d 	bl	80126a0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010da6:	4b85      	ldr	r3, [pc, #532]	; (8010fbc <tcp_output+0x248>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	687a      	ldr	r2, [r7, #4]
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d101      	bne.n	8010db4 <tcp_output+0x40>
    return ERR_OK;
 8010db0:	2300      	movs	r3, #0
 8010db2:	e1ce      	b.n	8011152 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010dc0:	4293      	cmp	r3, r2
 8010dc2:	bf28      	it	cs
 8010dc4:	4613      	movcs	r3, r2
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dce:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d10b      	bne.n	8010dee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	8b5b      	ldrh	r3, [r3, #26]
 8010dda:	f003 0302 	and.w	r3, r3, #2
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	f000 81aa 	beq.w	8011138 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f000 fdcb 	bl	8011980 <tcp_send_empty_ack>
 8010dea:	4603      	mov	r3, r0
 8010dec:	e1b1      	b.n	8011152 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010dee:	6879      	ldr	r1, [r7, #4]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	3304      	adds	r3, #4
 8010df4:	461a      	mov	r2, r3
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f7ff fc7c 	bl	80106f4 <tcp_route>
 8010dfc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d102      	bne.n	8010e0a <tcp_output+0x96>
    return ERR_RTE;
 8010e04:	f06f 0303 	mvn.w	r3, #3
 8010e08:	e1a3      	b.n	8011152 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d003      	beq.n	8010e18 <tcp_output+0xa4>
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d111      	bne.n	8010e3c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d002      	beq.n	8010e24 <tcp_output+0xb0>
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	3304      	adds	r3, #4
 8010e22:	e000      	b.n	8010e26 <tcp_output+0xb2>
 8010e24:	2300      	movs	r3, #0
 8010e26:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010e28:	693b      	ldr	r3, [r7, #16]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d102      	bne.n	8010e34 <tcp_output+0xc0>
      return ERR_RTE;
 8010e2e:	f06f 0303 	mvn.w	r3, #3
 8010e32:	e18e      	b.n	8011152 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010e34:	693b      	ldr	r3, [r7, #16]
 8010e36:	681a      	ldr	r2, [r3, #0]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3e:	68db      	ldr	r3, [r3, #12]
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7f7 fa6f 	bl	8008326 <lwip_htonl>
 8010e48:	4602      	mov	r2, r0
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e4e:	1ad3      	subs	r3, r2, r3
 8010e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e52:	8912      	ldrh	r2, [r2, #8]
 8010e54:	4413      	add	r3, r2
 8010e56:	69ba      	ldr	r2, [r7, #24]
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	d227      	bcs.n	8010eac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010e62:	461a      	mov	r2, r3
 8010e64:	69bb      	ldr	r3, [r7, #24]
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d114      	bne.n	8010e94 <tcp_output+0x120>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d110      	bne.n	8010e94 <tcp_output+0x120>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d10b      	bne.n	8010e94 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2201      	movs	r2, #1
 8010e88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	8b5b      	ldrh	r3, [r3, #26]
 8010e98:	f003 0302 	and.w	r3, r3, #2
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	f000 814d 	beq.w	801113c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f000 fd6c 	bl	8011980 <tcp_send_empty_ack>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	e152      	b.n	8011152 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2200      	movs	r2, #0
 8010eb0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010eb8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010eba:	6a3b      	ldr	r3, [r7, #32]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	f000 811c 	beq.w	80110fa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010ec2:	e002      	b.n	8010eca <tcp_output+0x156>
 8010ec4:	6a3b      	ldr	r3, [r7, #32]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	623b      	str	r3, [r7, #32]
 8010eca:	6a3b      	ldr	r3, [r7, #32]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d1f8      	bne.n	8010ec4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010ed2:	e112      	b.n	80110fa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed6:	68db      	ldr	r3, [r3, #12]
 8010ed8:	899b      	ldrh	r3, [r3, #12]
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7f7 fa0d 	bl	80082fc <lwip_htons>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	f003 0304 	and.w	r3, r3, #4
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d006      	beq.n	8010efc <tcp_output+0x188>
 8010eee:	4b2f      	ldr	r3, [pc, #188]	; (8010fac <tcp_output+0x238>)
 8010ef0:	f240 5236 	movw	r2, #1334	; 0x536
 8010ef4:	4932      	ldr	r1, [pc, #200]	; (8010fc0 <tcp_output+0x24c>)
 8010ef6:	482f      	ldr	r0, [pc, #188]	; (8010fb4 <tcp_output+0x240>)
 8010ef8:	f001 fbd2 	bl	80126a0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d01f      	beq.n	8010f44 <tcp_output+0x1d0>
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	8b5b      	ldrh	r3, [r3, #26]
 8010f08:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d119      	bne.n	8010f44 <tcp_output+0x1d0>
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d00b      	beq.n	8010f30 <tcp_output+0x1bc>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d110      	bne.n	8010f44 <tcp_output+0x1d0>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f26:	891a      	ldrh	r2, [r3, #8]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d209      	bcs.n	8010f44 <tcp_output+0x1d0>
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d004      	beq.n	8010f44 <tcp_output+0x1d0>
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f40:	2b08      	cmp	r3, #8
 8010f42:	d901      	bls.n	8010f48 <tcp_output+0x1d4>
 8010f44:	2301      	movs	r3, #1
 8010f46:	e000      	b.n	8010f4a <tcp_output+0x1d6>
 8010f48:	2300      	movs	r3, #0
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d106      	bne.n	8010f5c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	8b5b      	ldrh	r3, [r3, #26]
 8010f52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	f000 80e4 	beq.w	8011124 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	7d1b      	ldrb	r3, [r3, #20]
 8010f60:	2b02      	cmp	r3, #2
 8010f62:	d00d      	beq.n	8010f80 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f66:	68db      	ldr	r3, [r3, #12]
 8010f68:	899b      	ldrh	r3, [r3, #12]
 8010f6a:	b29c      	uxth	r4, r3
 8010f6c:	2010      	movs	r0, #16
 8010f6e:	f7f7 f9c5 	bl	80082fc <lwip_htons>
 8010f72:	4603      	mov	r3, r0
 8010f74:	461a      	mov	r2, r3
 8010f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f78:	68db      	ldr	r3, [r3, #12]
 8010f7a:	4322      	orrs	r2, r4
 8010f7c:	b292      	uxth	r2, r2
 8010f7e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010f80:	697a      	ldr	r2, [r7, #20]
 8010f82:	6879      	ldr	r1, [r7, #4]
 8010f84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f86:	f000 f909 	bl	801119c <tcp_output_segment>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d016      	beq.n	8010fc4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	8b5b      	ldrh	r3, [r3, #26]
 8010f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f9e:	b29a      	uxth	r2, r3
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	835a      	strh	r2, [r3, #26]
      return err;
 8010fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fa8:	e0d3      	b.n	8011152 <tcp_output+0x3de>
 8010faa:	bf00      	nop
 8010fac:	08015810 	.word	0x08015810
 8010fb0:	08015d94 	.word	0x08015d94
 8010fb4:	080158a4 	.word	0x080158a4
 8010fb8:	08015dac 	.word	0x08015dac
 8010fbc:	2400746c 	.word	0x2400746c
 8010fc0:	08015dd4 	.word	0x08015dd4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc6:	681a      	ldr	r2, [r3, #0]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	7d1b      	ldrb	r3, [r3, #20]
 8010fd0:	2b02      	cmp	r3, #2
 8010fd2:	d006      	beq.n	8010fe2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	8b5b      	ldrh	r3, [r3, #26]
 8010fd8:	f023 0303 	bic.w	r3, r3, #3
 8010fdc:	b29a      	uxth	r2, r3
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe4:	68db      	ldr	r3, [r3, #12]
 8010fe6:	685b      	ldr	r3, [r3, #4]
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7f7 f99c 	bl	8008326 <lwip_htonl>
 8010fee:	4604      	mov	r4, r0
 8010ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff2:	891b      	ldrh	r3, [r3, #8]
 8010ff4:	461d      	mov	r5, r3
 8010ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff8:	68db      	ldr	r3, [r3, #12]
 8010ffa:	899b      	ldrh	r3, [r3, #12]
 8010ffc:	b29b      	uxth	r3, r3
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7f7 f97c 	bl	80082fc <lwip_htons>
 8011004:	4603      	mov	r3, r0
 8011006:	b2db      	uxtb	r3, r3
 8011008:	f003 0303 	and.w	r3, r3, #3
 801100c:	2b00      	cmp	r3, #0
 801100e:	d001      	beq.n	8011014 <tcp_output+0x2a0>
 8011010:	2301      	movs	r3, #1
 8011012:	e000      	b.n	8011016 <tcp_output+0x2a2>
 8011014:	2300      	movs	r3, #0
 8011016:	442b      	add	r3, r5
 8011018:	4423      	add	r3, r4
 801101a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	1ad3      	subs	r3, r2, r3
 8011024:	2b00      	cmp	r3, #0
 8011026:	da02      	bge.n	801102e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	68ba      	ldr	r2, [r7, #8]
 801102c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011030:	891b      	ldrh	r3, [r3, #8]
 8011032:	461c      	mov	r4, r3
 8011034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	899b      	ldrh	r3, [r3, #12]
 801103a:	b29b      	uxth	r3, r3
 801103c:	4618      	mov	r0, r3
 801103e:	f7f7 f95d 	bl	80082fc <lwip_htons>
 8011042:	4603      	mov	r3, r0
 8011044:	b2db      	uxtb	r3, r3
 8011046:	f003 0303 	and.w	r3, r3, #3
 801104a:	2b00      	cmp	r3, #0
 801104c:	d001      	beq.n	8011052 <tcp_output+0x2de>
 801104e:	2301      	movs	r3, #1
 8011050:	e000      	b.n	8011054 <tcp_output+0x2e0>
 8011052:	2300      	movs	r3, #0
 8011054:	4423      	add	r3, r4
 8011056:	2b00      	cmp	r3, #0
 8011058:	d049      	beq.n	80110ee <tcp_output+0x37a>
      seg->next = NULL;
 801105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105c:	2200      	movs	r2, #0
 801105e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011064:	2b00      	cmp	r3, #0
 8011066:	d105      	bne.n	8011074 <tcp_output+0x300>
        pcb->unacked = seg;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801106c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011070:	623b      	str	r3, [r7, #32]
 8011072:	e03f      	b.n	80110f4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011076:	68db      	ldr	r3, [r3, #12]
 8011078:	685b      	ldr	r3, [r3, #4]
 801107a:	4618      	mov	r0, r3
 801107c:	f7f7 f953 	bl	8008326 <lwip_htonl>
 8011080:	4604      	mov	r4, r0
 8011082:	6a3b      	ldr	r3, [r7, #32]
 8011084:	68db      	ldr	r3, [r3, #12]
 8011086:	685b      	ldr	r3, [r3, #4]
 8011088:	4618      	mov	r0, r3
 801108a:	f7f7 f94c 	bl	8008326 <lwip_htonl>
 801108e:	4603      	mov	r3, r0
 8011090:	1ae3      	subs	r3, r4, r3
 8011092:	2b00      	cmp	r3, #0
 8011094:	da24      	bge.n	80110e0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	3370      	adds	r3, #112	; 0x70
 801109a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801109c:	e002      	b.n	80110a4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801109e:	69fb      	ldr	r3, [r7, #28]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80110a4:	69fb      	ldr	r3, [r7, #28]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d011      	beq.n	80110d0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80110ac:	69fb      	ldr	r3, [r7, #28]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	68db      	ldr	r3, [r3, #12]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7f7 f936 	bl	8008326 <lwip_htonl>
 80110ba:	4604      	mov	r4, r0
 80110bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7f7 f92f 	bl	8008326 <lwip_htonl>
 80110c8:	4603      	mov	r3, r0
 80110ca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	dbe6      	blt.n	801109e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80110d0:	69fb      	ldr	r3, [r7, #28]
 80110d2:	681a      	ldr	r2, [r3, #0]
 80110d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80110d8:	69fb      	ldr	r3, [r7, #28]
 80110da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110dc:	601a      	str	r2, [r3, #0]
 80110de:	e009      	b.n	80110f4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80110e0:	6a3b      	ldr	r3, [r7, #32]
 80110e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110e4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80110e6:	6a3b      	ldr	r3, [r7, #32]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	623b      	str	r3, [r7, #32]
 80110ec:	e002      	b.n	80110f4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80110ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80110f0:	f7fc fc3f 	bl	800d972 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80110fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d012      	beq.n	8011126 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	4618      	mov	r0, r3
 8011108:	f7f7 f90d 	bl	8008326 <lwip_htonl>
 801110c:	4602      	mov	r2, r0
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011112:	1ad3      	subs	r3, r2, r3
 8011114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011116:	8912      	ldrh	r2, [r2, #8]
 8011118:	4413      	add	r3, r2
  while (seg != NULL &&
 801111a:	69ba      	ldr	r2, [r7, #24]
 801111c:	429a      	cmp	r2, r3
 801111e:	f4bf aed9 	bcs.w	8010ed4 <tcp_output+0x160>
 8011122:	e000      	b.n	8011126 <tcp_output+0x3b2>
      break;
 8011124:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801112a:	2b00      	cmp	r3, #0
 801112c:	d108      	bne.n	8011140 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2200      	movs	r2, #0
 8011132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011136:	e004      	b.n	8011142 <tcp_output+0x3ce>
    goto output_done;
 8011138:	bf00      	nop
 801113a:	e002      	b.n	8011142 <tcp_output+0x3ce>
    goto output_done;
 801113c:	bf00      	nop
 801113e:	e000      	b.n	8011142 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011140:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	8b5b      	ldrh	r3, [r3, #26]
 8011146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801114a:	b29a      	uxth	r2, r3
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011150:	2300      	movs	r3, #0
}
 8011152:	4618      	mov	r0, r3
 8011154:	3728      	adds	r7, #40	; 0x28
 8011156:	46bd      	mov	sp, r7
 8011158:	bdb0      	pop	{r4, r5, r7, pc}
 801115a:	bf00      	nop

0801115c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d106      	bne.n	8011178 <tcp_output_segment_busy+0x1c>
 801116a:	4b09      	ldr	r3, [pc, #36]	; (8011190 <tcp_output_segment_busy+0x34>)
 801116c:	f240 529a 	movw	r2, #1434	; 0x59a
 8011170:	4908      	ldr	r1, [pc, #32]	; (8011194 <tcp_output_segment_busy+0x38>)
 8011172:	4809      	ldr	r0, [pc, #36]	; (8011198 <tcp_output_segment_busy+0x3c>)
 8011174:	f001 fa94 	bl	80126a0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	685b      	ldr	r3, [r3, #4]
 801117c:	7b9b      	ldrb	r3, [r3, #14]
 801117e:	2b01      	cmp	r3, #1
 8011180:	d001      	beq.n	8011186 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011182:	2301      	movs	r3, #1
 8011184:	e000      	b.n	8011188 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011186:	2300      	movs	r3, #0
}
 8011188:	4618      	mov	r0, r3
 801118a:	3708      	adds	r7, #8
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}
 8011190:	08015810 	.word	0x08015810
 8011194:	08015dec 	.word	0x08015dec
 8011198:	080158a4 	.word	0x080158a4

0801119c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801119c:	b5b0      	push	{r4, r5, r7, lr}
 801119e:	b08c      	sub	sp, #48	; 0x30
 80111a0:	af04      	add	r7, sp, #16
 80111a2:	60f8      	str	r0, [r7, #12]
 80111a4:	60b9      	str	r1, [r7, #8]
 80111a6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d106      	bne.n	80111bc <tcp_output_segment+0x20>
 80111ae:	4b63      	ldr	r3, [pc, #396]	; (801133c <tcp_output_segment+0x1a0>)
 80111b0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80111b4:	4962      	ldr	r1, [pc, #392]	; (8011340 <tcp_output_segment+0x1a4>)
 80111b6:	4863      	ldr	r0, [pc, #396]	; (8011344 <tcp_output_segment+0x1a8>)
 80111b8:	f001 fa72 	bl	80126a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d106      	bne.n	80111d0 <tcp_output_segment+0x34>
 80111c2:	4b5e      	ldr	r3, [pc, #376]	; (801133c <tcp_output_segment+0x1a0>)
 80111c4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80111c8:	495f      	ldr	r1, [pc, #380]	; (8011348 <tcp_output_segment+0x1ac>)
 80111ca:	485e      	ldr	r0, [pc, #376]	; (8011344 <tcp_output_segment+0x1a8>)
 80111cc:	f001 fa68 	bl	80126a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d106      	bne.n	80111e4 <tcp_output_segment+0x48>
 80111d6:	4b59      	ldr	r3, [pc, #356]	; (801133c <tcp_output_segment+0x1a0>)
 80111d8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80111dc:	495b      	ldr	r1, [pc, #364]	; (801134c <tcp_output_segment+0x1b0>)
 80111de:	4859      	ldr	r0, [pc, #356]	; (8011344 <tcp_output_segment+0x1a8>)
 80111e0:	f001 fa5e 	bl	80126a0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80111e4:	68f8      	ldr	r0, [r7, #12]
 80111e6:	f7ff ffb9 	bl	801115c <tcp_output_segment_busy>
 80111ea:	4603      	mov	r3, r0
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d001      	beq.n	80111f4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80111f0:	2300      	movs	r3, #0
 80111f2:	e09f      	b.n	8011334 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	68dc      	ldr	r4, [r3, #12]
 80111fc:	4610      	mov	r0, r2
 80111fe:	f7f7 f892 	bl	8008326 <lwip_htonl>
 8011202:	4603      	mov	r3, r0
 8011204:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	68dc      	ldr	r4, [r3, #12]
 801120e:	4610      	mov	r0, r2
 8011210:	f7f7 f874 	bl	80082fc <lwip_htons>
 8011214:	4603      	mov	r3, r0
 8011216:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801121c:	68ba      	ldr	r2, [r7, #8]
 801121e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011220:	441a      	add	r2, r3
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	3314      	adds	r3, #20
 801122c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	7a9b      	ldrb	r3, [r3, #10]
 8011232:	f003 0301 	and.w	r3, r3, #1
 8011236:	2b00      	cmp	r3, #0
 8011238:	d015      	beq.n	8011266 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	3304      	adds	r3, #4
 801123e:	461a      	mov	r2, r3
 8011240:	6879      	ldr	r1, [r7, #4]
 8011242:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011246:	f7fc fe8b 	bl	800df60 <tcp_eff_send_mss_netif>
 801124a:	4603      	mov	r3, r0
 801124c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801124e:	8b7b      	ldrh	r3, [r7, #26]
 8011250:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011254:	4618      	mov	r0, r3
 8011256:	f7f7 f866 	bl	8008326 <lwip_htonl>
 801125a:	4602      	mov	r2, r0
 801125c:	69fb      	ldr	r3, [r7, #28]
 801125e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	3304      	adds	r3, #4
 8011264:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801126c:	2b00      	cmp	r3, #0
 801126e:	da02      	bge.n	8011276 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	2200      	movs	r2, #0
 8011274:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801127a:	2b00      	cmp	r3, #0
 801127c:	d10c      	bne.n	8011298 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801127e:	4b34      	ldr	r3, [pc, #208]	; (8011350 <tcp_output_segment+0x1b4>)
 8011280:	681a      	ldr	r2, [r3, #0]
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	68db      	ldr	r3, [r3, #12]
 801128a:	685b      	ldr	r3, [r3, #4]
 801128c:	4618      	mov	r0, r3
 801128e:	f7f7 f84a 	bl	8008326 <lwip_htonl>
 8011292:	4602      	mov	r2, r0
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	68da      	ldr	r2, [r3, #12]
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	685b      	ldr	r3, [r3, #4]
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	1ad3      	subs	r3, r2, r3
 80112a4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	8959      	ldrh	r1, [r3, #10]
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	8b3a      	ldrh	r2, [r7, #24]
 80112b2:	1a8a      	subs	r2, r1, r2
 80112b4:	b292      	uxth	r2, r2
 80112b6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	8919      	ldrh	r1, [r3, #8]
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	685b      	ldr	r3, [r3, #4]
 80112c2:	8b3a      	ldrh	r2, [r7, #24]
 80112c4:	1a8a      	subs	r2, r1, r2
 80112c6:	b292      	uxth	r2, r2
 80112c8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	685b      	ldr	r3, [r3, #4]
 80112ce:	68fa      	ldr	r2, [r7, #12]
 80112d0:	68d2      	ldr	r2, [r2, #12]
 80112d2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	68db      	ldr	r3, [r3, #12]
 80112d8:	2200      	movs	r2, #0
 80112da:	741a      	strb	r2, [r3, #16]
 80112dc:	2200      	movs	r2, #0
 80112de:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	68db      	ldr	r3, [r3, #12]
 80112e4:	f103 0214 	add.w	r2, r3, #20
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	7a9b      	ldrb	r3, [r3, #10]
 80112ec:	009b      	lsls	r3, r3, #2
 80112ee:	f003 0304 	and.w	r3, r3, #4
 80112f2:	4413      	add	r3, r2
 80112f4:	69fa      	ldr	r2, [r7, #28]
 80112f6:	429a      	cmp	r2, r3
 80112f8:	d006      	beq.n	8011308 <tcp_output_segment+0x16c>
 80112fa:	4b10      	ldr	r3, [pc, #64]	; (801133c <tcp_output_segment+0x1a0>)
 80112fc:	f240 621c 	movw	r2, #1564	; 0x61c
 8011300:	4914      	ldr	r1, [pc, #80]	; (8011354 <tcp_output_segment+0x1b8>)
 8011302:	4810      	ldr	r0, [pc, #64]	; (8011344 <tcp_output_segment+0x1a8>)
 8011304:	f001 f9cc 	bl	80126a0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	6858      	ldr	r0, [r3, #4]
 801130c:	68b9      	ldr	r1, [r7, #8]
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	1d1c      	adds	r4, r3, #4
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	7add      	ldrb	r5, [r3, #11]
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	7a9b      	ldrb	r3, [r3, #10]
 801131a:	687a      	ldr	r2, [r7, #4]
 801131c:	9202      	str	r2, [sp, #8]
 801131e:	2206      	movs	r2, #6
 8011320:	9201      	str	r2, [sp, #4]
 8011322:	9300      	str	r3, [sp, #0]
 8011324:	462b      	mov	r3, r5
 8011326:	4622      	mov	r2, r4
 8011328:	f7f8 fc7e 	bl	8009c28 <ip4_output_if>
 801132c:	4603      	mov	r3, r0
 801132e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011330:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011334:	4618      	mov	r0, r3
 8011336:	3720      	adds	r7, #32
 8011338:	46bd      	mov	sp, r7
 801133a:	bdb0      	pop	{r4, r5, r7, pc}
 801133c:	08015810 	.word	0x08015810
 8011340:	08015e14 	.word	0x08015e14
 8011344:	080158a4 	.word	0x080158a4
 8011348:	08015e34 	.word	0x08015e34
 801134c:	08015e54 	.word	0x08015e54
 8011350:	24007420 	.word	0x24007420
 8011354:	08015e78 	.word	0x08015e78

08011358 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011358:	b5b0      	push	{r4, r5, r7, lr}
 801135a:	b084      	sub	sp, #16
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d106      	bne.n	8011374 <tcp_rexmit_rto_prepare+0x1c>
 8011366:	4b31      	ldr	r3, [pc, #196]	; (801142c <tcp_rexmit_rto_prepare+0xd4>)
 8011368:	f240 6263 	movw	r2, #1635	; 0x663
 801136c:	4930      	ldr	r1, [pc, #192]	; (8011430 <tcp_rexmit_rto_prepare+0xd8>)
 801136e:	4831      	ldr	r0, [pc, #196]	; (8011434 <tcp_rexmit_rto_prepare+0xdc>)
 8011370:	f001 f996 	bl	80126a0 <iprintf>

  if (pcb->unacked == NULL) {
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011378:	2b00      	cmp	r3, #0
 801137a:	d102      	bne.n	8011382 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801137c:	f06f 0305 	mvn.w	r3, #5
 8011380:	e050      	b.n	8011424 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011386:	60fb      	str	r3, [r7, #12]
 8011388:	e00b      	b.n	80113a2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	f7ff fee6 	bl	801115c <tcp_output_segment_busy>
 8011390:	4603      	mov	r3, r0
 8011392:	2b00      	cmp	r3, #0
 8011394:	d002      	beq.n	801139c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011396:	f06f 0305 	mvn.w	r3, #5
 801139a:	e043      	b.n	8011424 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	60fb      	str	r3, [r7, #12]
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d1ef      	bne.n	801138a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80113aa:	68f8      	ldr	r0, [r7, #12]
 80113ac:	f7ff fed6 	bl	801115c <tcp_output_segment_busy>
 80113b0:	4603      	mov	r3, r0
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d002      	beq.n	80113bc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80113b6:	f06f 0305 	mvn.w	r3, #5
 80113ba:	e033      	b.n	8011424 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2200      	movs	r2, #0
 80113d0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	8b5b      	ldrh	r3, [r3, #26]
 80113d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80113da:	b29a      	uxth	r2, r3
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7f6 ff9d 	bl	8008326 <lwip_htonl>
 80113ec:	4604      	mov	r4, r0
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	891b      	ldrh	r3, [r3, #8]
 80113f2:	461d      	mov	r5, r3
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	68db      	ldr	r3, [r3, #12]
 80113f8:	899b      	ldrh	r3, [r3, #12]
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7f6 ff7d 	bl	80082fc <lwip_htons>
 8011402:	4603      	mov	r3, r0
 8011404:	b2db      	uxtb	r3, r3
 8011406:	f003 0303 	and.w	r3, r3, #3
 801140a:	2b00      	cmp	r3, #0
 801140c:	d001      	beq.n	8011412 <tcp_rexmit_rto_prepare+0xba>
 801140e:	2301      	movs	r3, #1
 8011410:	e000      	b.n	8011414 <tcp_rexmit_rto_prepare+0xbc>
 8011412:	2300      	movs	r3, #0
 8011414:	442b      	add	r3, r5
 8011416:	18e2      	adds	r2, r4, r3
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2200      	movs	r2, #0
 8011420:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011422:	2300      	movs	r3, #0
}
 8011424:	4618      	mov	r0, r3
 8011426:	3710      	adds	r7, #16
 8011428:	46bd      	mov	sp, r7
 801142a:	bdb0      	pop	{r4, r5, r7, pc}
 801142c:	08015810 	.word	0x08015810
 8011430:	08015e8c 	.word	0x08015e8c
 8011434:	080158a4 	.word	0x080158a4

08011438 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d106      	bne.n	8011454 <tcp_rexmit_rto_commit+0x1c>
 8011446:	4b0d      	ldr	r3, [pc, #52]	; (801147c <tcp_rexmit_rto_commit+0x44>)
 8011448:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801144c:	490c      	ldr	r1, [pc, #48]	; (8011480 <tcp_rexmit_rto_commit+0x48>)
 801144e:	480d      	ldr	r0, [pc, #52]	; (8011484 <tcp_rexmit_rto_commit+0x4c>)
 8011450:	f001 f926 	bl	80126a0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801145a:	2bff      	cmp	r3, #255	; 0xff
 801145c:	d007      	beq.n	801146e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011464:	3301      	adds	r3, #1
 8011466:	b2da      	uxtb	r2, r3
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f7ff fc80 	bl	8010d74 <tcp_output>
}
 8011474:	bf00      	nop
 8011476:	3708      	adds	r7, #8
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}
 801147c:	08015810 	.word	0x08015810
 8011480:	08015eb0 	.word	0x08015eb0
 8011484:	080158a4 	.word	0x080158a4

08011488 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b082      	sub	sp, #8
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d106      	bne.n	80114a4 <tcp_rexmit_rto+0x1c>
 8011496:	4b0a      	ldr	r3, [pc, #40]	; (80114c0 <tcp_rexmit_rto+0x38>)
 8011498:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801149c:	4909      	ldr	r1, [pc, #36]	; (80114c4 <tcp_rexmit_rto+0x3c>)
 801149e:	480a      	ldr	r0, [pc, #40]	; (80114c8 <tcp_rexmit_rto+0x40>)
 80114a0:	f001 f8fe 	bl	80126a0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f7ff ff57 	bl	8011358 <tcp_rexmit_rto_prepare>
 80114aa:	4603      	mov	r3, r0
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d102      	bne.n	80114b6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f7ff ffc1 	bl	8011438 <tcp_rexmit_rto_commit>
  }
}
 80114b6:	bf00      	nop
 80114b8:	3708      	adds	r7, #8
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
 80114be:	bf00      	nop
 80114c0:	08015810 	.word	0x08015810
 80114c4:	08015ed4 	.word	0x08015ed4
 80114c8:	080158a4 	.word	0x080158a4

080114cc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80114cc:	b590      	push	{r4, r7, lr}
 80114ce:	b085      	sub	sp, #20
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d106      	bne.n	80114e8 <tcp_rexmit+0x1c>
 80114da:	4b2f      	ldr	r3, [pc, #188]	; (8011598 <tcp_rexmit+0xcc>)
 80114dc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80114e0:	492e      	ldr	r1, [pc, #184]	; (801159c <tcp_rexmit+0xd0>)
 80114e2:	482f      	ldr	r0, [pc, #188]	; (80115a0 <tcp_rexmit+0xd4>)
 80114e4:	f001 f8dc 	bl	80126a0 <iprintf>

  if (pcb->unacked == NULL) {
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d102      	bne.n	80114f6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80114f0:	f06f 0305 	mvn.w	r3, #5
 80114f4:	e04c      	b.n	8011590 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114fa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80114fc:	68b8      	ldr	r0, [r7, #8]
 80114fe:	f7ff fe2d 	bl	801115c <tcp_output_segment_busy>
 8011502:	4603      	mov	r3, r0
 8011504:	2b00      	cmp	r3, #0
 8011506:	d002      	beq.n	801150e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011508:	f06f 0305 	mvn.w	r3, #5
 801150c:	e040      	b.n	8011590 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	336c      	adds	r3, #108	; 0x6c
 801151a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801151c:	e002      	b.n	8011524 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d011      	beq.n	8011550 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	4618      	mov	r0, r3
 8011536:	f7f6 fef6 	bl	8008326 <lwip_htonl>
 801153a:	4604      	mov	r4, r0
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	685b      	ldr	r3, [r3, #4]
 8011542:	4618      	mov	r0, r3
 8011544:	f7f6 feef 	bl	8008326 <lwip_htonl>
 8011548:	4603      	mov	r3, r0
 801154a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801154c:	2b00      	cmp	r3, #0
 801154e:	dbe6      	blt.n	801151e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	681a      	ldr	r2, [r3, #0]
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	68ba      	ldr	r2, [r7, #8]
 801155c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d103      	bne.n	801156e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	2200      	movs	r2, #0
 801156a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011574:	2bff      	cmp	r3, #255	; 0xff
 8011576:	d007      	beq.n	8011588 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801157e:	3301      	adds	r3, #1
 8011580:	b2da      	uxtb	r2, r3
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2200      	movs	r2, #0
 801158c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801158e:	2300      	movs	r3, #0
}
 8011590:	4618      	mov	r0, r3
 8011592:	3714      	adds	r7, #20
 8011594:	46bd      	mov	sp, r7
 8011596:	bd90      	pop	{r4, r7, pc}
 8011598:	08015810 	.word	0x08015810
 801159c:	08015ef0 	.word	0x08015ef0
 80115a0:	080158a4 	.word	0x080158a4

080115a4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d106      	bne.n	80115c0 <tcp_rexmit_fast+0x1c>
 80115b2:	4b2a      	ldr	r3, [pc, #168]	; (801165c <tcp_rexmit_fast+0xb8>)
 80115b4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80115b8:	4929      	ldr	r1, [pc, #164]	; (8011660 <tcp_rexmit_fast+0xbc>)
 80115ba:	482a      	ldr	r0, [pc, #168]	; (8011664 <tcp_rexmit_fast+0xc0>)
 80115bc:	f001 f870 	bl	80126a0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d045      	beq.n	8011654 <tcp_rexmit_fast+0xb0>
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	8b5b      	ldrh	r3, [r3, #26]
 80115cc:	f003 0304 	and.w	r3, r3, #4
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d13f      	bne.n	8011654 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f7ff ff79 	bl	80114cc <tcp_rexmit>
 80115da:	4603      	mov	r3, r0
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d139      	bne.n	8011654 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80115ec:	4293      	cmp	r3, r2
 80115ee:	bf28      	it	cs
 80115f0:	4613      	movcs	r3, r2
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	da00      	bge.n	80115fa <tcp_rexmit_fast+0x56>
 80115f8:	3301      	adds	r3, #1
 80115fa:	105b      	asrs	r3, r3, #1
 80115fc:	b29a      	uxth	r2, r3
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801160a:	461a      	mov	r2, r3
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011610:	005b      	lsls	r3, r3, #1
 8011612:	429a      	cmp	r2, r3
 8011614:	d206      	bcs.n	8011624 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801161a:	005b      	lsls	r3, r3, #1
 801161c:	b29a      	uxth	r2, r3
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801162e:	4619      	mov	r1, r3
 8011630:	0049      	lsls	r1, r1, #1
 8011632:	440b      	add	r3, r1
 8011634:	b29b      	uxth	r3, r3
 8011636:	4413      	add	r3, r2
 8011638:	b29a      	uxth	r2, r3
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	8b5b      	ldrh	r3, [r3, #26]
 8011644:	f043 0304 	orr.w	r3, r3, #4
 8011648:	b29a      	uxth	r2, r3
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2200      	movs	r2, #0
 8011652:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011654:	bf00      	nop
 8011656:	3708      	adds	r7, #8
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}
 801165c:	08015810 	.word	0x08015810
 8011660:	08015f08 	.word	0x08015f08
 8011664:	080158a4 	.word	0x080158a4

08011668 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b086      	sub	sp, #24
 801166c:	af00      	add	r7, sp, #0
 801166e:	60f8      	str	r0, [r7, #12]
 8011670:	607b      	str	r3, [r7, #4]
 8011672:	460b      	mov	r3, r1
 8011674:	817b      	strh	r3, [r7, #10]
 8011676:	4613      	mov	r3, r2
 8011678:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801167a:	897a      	ldrh	r2, [r7, #10]
 801167c:	893b      	ldrh	r3, [r7, #8]
 801167e:	4413      	add	r3, r2
 8011680:	b29b      	uxth	r3, r3
 8011682:	3314      	adds	r3, #20
 8011684:	b29b      	uxth	r3, r3
 8011686:	f44f 7220 	mov.w	r2, #640	; 0x280
 801168a:	4619      	mov	r1, r3
 801168c:	2022      	movs	r0, #34	; 0x22
 801168e:	f7fa faf7 	bl	800bc80 <pbuf_alloc>
 8011692:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d04d      	beq.n	8011736 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801169a:	897b      	ldrh	r3, [r7, #10]
 801169c:	3313      	adds	r3, #19
 801169e:	697a      	ldr	r2, [r7, #20]
 80116a0:	8952      	ldrh	r2, [r2, #10]
 80116a2:	4293      	cmp	r3, r2
 80116a4:	db06      	blt.n	80116b4 <tcp_output_alloc_header_common+0x4c>
 80116a6:	4b26      	ldr	r3, [pc, #152]	; (8011740 <tcp_output_alloc_header_common+0xd8>)
 80116a8:	f240 7223 	movw	r2, #1827	; 0x723
 80116ac:	4925      	ldr	r1, [pc, #148]	; (8011744 <tcp_output_alloc_header_common+0xdc>)
 80116ae:	4826      	ldr	r0, [pc, #152]	; (8011748 <tcp_output_alloc_header_common+0xe0>)
 80116b0:	f000 fff6 	bl	80126a0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	685b      	ldr	r3, [r3, #4]
 80116b8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80116ba:	8c3b      	ldrh	r3, [r7, #32]
 80116bc:	4618      	mov	r0, r3
 80116be:	f7f6 fe1d 	bl	80082fc <lwip_htons>
 80116c2:	4603      	mov	r3, r0
 80116c4:	461a      	mov	r2, r3
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80116ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116cc:	4618      	mov	r0, r3
 80116ce:	f7f6 fe15 	bl	80082fc <lwip_htons>
 80116d2:	4603      	mov	r3, r0
 80116d4:	461a      	mov	r2, r3
 80116d6:	693b      	ldr	r3, [r7, #16]
 80116d8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80116e0:	68f8      	ldr	r0, [r7, #12]
 80116e2:	f7f6 fe20 	bl	8008326 <lwip_htonl>
 80116e6:	4602      	mov	r2, r0
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80116ec:	897b      	ldrh	r3, [r7, #10]
 80116ee:	089b      	lsrs	r3, r3, #2
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	3305      	adds	r3, #5
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	031b      	lsls	r3, r3, #12
 80116f8:	b29a      	uxth	r2, r3
 80116fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80116fe:	b29b      	uxth	r3, r3
 8011700:	4313      	orrs	r3, r2
 8011702:	b29b      	uxth	r3, r3
 8011704:	4618      	mov	r0, r3
 8011706:	f7f6 fdf9 	bl	80082fc <lwip_htons>
 801170a:	4603      	mov	r3, r0
 801170c:	461a      	mov	r2, r3
 801170e:	693b      	ldr	r3, [r7, #16]
 8011710:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011712:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011714:	4618      	mov	r0, r3
 8011716:	f7f6 fdf1 	bl	80082fc <lwip_htons>
 801171a:	4603      	mov	r3, r0
 801171c:	461a      	mov	r2, r3
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	2200      	movs	r2, #0
 8011726:	741a      	strb	r2, [r3, #16]
 8011728:	2200      	movs	r2, #0
 801172a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801172c:	693b      	ldr	r3, [r7, #16]
 801172e:	2200      	movs	r2, #0
 8011730:	749a      	strb	r2, [r3, #18]
 8011732:	2200      	movs	r2, #0
 8011734:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011736:	697b      	ldr	r3, [r7, #20]
}
 8011738:	4618      	mov	r0, r3
 801173a:	3718      	adds	r7, #24
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	08015810 	.word	0x08015810
 8011744:	08015f28 	.word	0x08015f28
 8011748:	080158a4 	.word	0x080158a4

0801174c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801174c:	b5b0      	push	{r4, r5, r7, lr}
 801174e:	b08a      	sub	sp, #40	; 0x28
 8011750:	af04      	add	r7, sp, #16
 8011752:	60f8      	str	r0, [r7, #12]
 8011754:	607b      	str	r3, [r7, #4]
 8011756:	460b      	mov	r3, r1
 8011758:	817b      	strh	r3, [r7, #10]
 801175a:	4613      	mov	r3, r2
 801175c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d106      	bne.n	8011772 <tcp_output_alloc_header+0x26>
 8011764:	4b15      	ldr	r3, [pc, #84]	; (80117bc <tcp_output_alloc_header+0x70>)
 8011766:	f240 7242 	movw	r2, #1858	; 0x742
 801176a:	4915      	ldr	r1, [pc, #84]	; (80117c0 <tcp_output_alloc_header+0x74>)
 801176c:	4815      	ldr	r0, [pc, #84]	; (80117c4 <tcp_output_alloc_header+0x78>)
 801176e:	f000 ff97 	bl	80126a0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	8adb      	ldrh	r3, [r3, #22]
 801177a:	68fa      	ldr	r2, [r7, #12]
 801177c:	8b12      	ldrh	r2, [r2, #24]
 801177e:	68f9      	ldr	r1, [r7, #12]
 8011780:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011782:	893d      	ldrh	r5, [r7, #8]
 8011784:	897c      	ldrh	r4, [r7, #10]
 8011786:	9103      	str	r1, [sp, #12]
 8011788:	2110      	movs	r1, #16
 801178a:	9102      	str	r1, [sp, #8]
 801178c:	9201      	str	r2, [sp, #4]
 801178e:	9300      	str	r3, [sp, #0]
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	462a      	mov	r2, r5
 8011794:	4621      	mov	r1, r4
 8011796:	f7ff ff67 	bl	8011668 <tcp_output_alloc_header_common>
 801179a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801179c:	697b      	ldr	r3, [r7, #20]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d006      	beq.n	80117b0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117a6:	68fa      	ldr	r2, [r7, #12]
 80117a8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80117aa:	441a      	add	r2, r3
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80117b0:	697b      	ldr	r3, [r7, #20]
}
 80117b2:	4618      	mov	r0, r3
 80117b4:	3718      	adds	r7, #24
 80117b6:	46bd      	mov	sp, r7
 80117b8:	bdb0      	pop	{r4, r5, r7, pc}
 80117ba:	bf00      	nop
 80117bc:	08015810 	.word	0x08015810
 80117c0:	08015f58 	.word	0x08015f58
 80117c4:	080158a4 	.word	0x080158a4

080117c8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b088      	sub	sp, #32
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	60f8      	str	r0, [r7, #12]
 80117d0:	60b9      	str	r1, [r7, #8]
 80117d2:	4611      	mov	r1, r2
 80117d4:	461a      	mov	r2, r3
 80117d6:	460b      	mov	r3, r1
 80117d8:	71fb      	strb	r3, [r7, #7]
 80117da:	4613      	mov	r3, r2
 80117dc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80117de:	2300      	movs	r3, #0
 80117e0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d106      	bne.n	80117f6 <tcp_output_fill_options+0x2e>
 80117e8:	4b13      	ldr	r3, [pc, #76]	; (8011838 <tcp_output_fill_options+0x70>)
 80117ea:	f240 7256 	movw	r2, #1878	; 0x756
 80117ee:	4913      	ldr	r1, [pc, #76]	; (801183c <tcp_output_fill_options+0x74>)
 80117f0:	4813      	ldr	r0, [pc, #76]	; (8011840 <tcp_output_fill_options+0x78>)
 80117f2:	f000 ff55 	bl	80126a0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80117f6:	68bb      	ldr	r3, [r7, #8]
 80117f8:	685b      	ldr	r3, [r3, #4]
 80117fa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80117fc:	69bb      	ldr	r3, [r7, #24]
 80117fe:	3314      	adds	r3, #20
 8011800:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011802:	69bb      	ldr	r3, [r7, #24]
 8011804:	f103 0214 	add.w	r2, r3, #20
 8011808:	8bfb      	ldrh	r3, [r7, #30]
 801180a:	009b      	lsls	r3, r3, #2
 801180c:	4619      	mov	r1, r3
 801180e:	79fb      	ldrb	r3, [r7, #7]
 8011810:	009b      	lsls	r3, r3, #2
 8011812:	f003 0304 	and.w	r3, r3, #4
 8011816:	440b      	add	r3, r1
 8011818:	4413      	add	r3, r2
 801181a:	697a      	ldr	r2, [r7, #20]
 801181c:	429a      	cmp	r2, r3
 801181e:	d006      	beq.n	801182e <tcp_output_fill_options+0x66>
 8011820:	4b05      	ldr	r3, [pc, #20]	; (8011838 <tcp_output_fill_options+0x70>)
 8011822:	f240 7275 	movw	r2, #1909	; 0x775
 8011826:	4907      	ldr	r1, [pc, #28]	; (8011844 <tcp_output_fill_options+0x7c>)
 8011828:	4805      	ldr	r0, [pc, #20]	; (8011840 <tcp_output_fill_options+0x78>)
 801182a:	f000 ff39 	bl	80126a0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801182e:	bf00      	nop
 8011830:	3720      	adds	r7, #32
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
 8011836:	bf00      	nop
 8011838:	08015810 	.word	0x08015810
 801183c:	08015f80 	.word	0x08015f80
 8011840:	080158a4 	.word	0x080158a4
 8011844:	08015e78 	.word	0x08015e78

08011848 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b08a      	sub	sp, #40	; 0x28
 801184c:	af04      	add	r7, sp, #16
 801184e:	60f8      	str	r0, [r7, #12]
 8011850:	60b9      	str	r1, [r7, #8]
 8011852:	607a      	str	r2, [r7, #4]
 8011854:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d106      	bne.n	801186a <tcp_output_control_segment+0x22>
 801185c:	4b1c      	ldr	r3, [pc, #112]	; (80118d0 <tcp_output_control_segment+0x88>)
 801185e:	f240 7287 	movw	r2, #1927	; 0x787
 8011862:	491c      	ldr	r1, [pc, #112]	; (80118d4 <tcp_output_control_segment+0x8c>)
 8011864:	481c      	ldr	r0, [pc, #112]	; (80118d8 <tcp_output_control_segment+0x90>)
 8011866:	f000 ff1b 	bl	80126a0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801186a:	683a      	ldr	r2, [r7, #0]
 801186c:	6879      	ldr	r1, [r7, #4]
 801186e:	68f8      	ldr	r0, [r7, #12]
 8011870:	f7fe ff40 	bl	80106f4 <tcp_route>
 8011874:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d102      	bne.n	8011882 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801187c:	23fc      	movs	r3, #252	; 0xfc
 801187e:	75fb      	strb	r3, [r7, #23]
 8011880:	e01c      	b.n	80118bc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d006      	beq.n	8011896 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	7adb      	ldrb	r3, [r3, #11]
 801188c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	7a9b      	ldrb	r3, [r3, #10]
 8011892:	757b      	strb	r3, [r7, #21]
 8011894:	e003      	b.n	801189e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011896:	23ff      	movs	r3, #255	; 0xff
 8011898:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801189a:	2300      	movs	r3, #0
 801189c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801189e:	7dba      	ldrb	r2, [r7, #22]
 80118a0:	693b      	ldr	r3, [r7, #16]
 80118a2:	9302      	str	r3, [sp, #8]
 80118a4:	2306      	movs	r3, #6
 80118a6:	9301      	str	r3, [sp, #4]
 80118a8:	7d7b      	ldrb	r3, [r7, #21]
 80118aa:	9300      	str	r3, [sp, #0]
 80118ac:	4613      	mov	r3, r2
 80118ae:	683a      	ldr	r2, [r7, #0]
 80118b0:	6879      	ldr	r1, [r7, #4]
 80118b2:	68b8      	ldr	r0, [r7, #8]
 80118b4:	f7f8 f9b8 	bl	8009c28 <ip4_output_if>
 80118b8:	4603      	mov	r3, r0
 80118ba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80118bc:	68b8      	ldr	r0, [r7, #8]
 80118be:	f7fa fcc3 	bl	800c248 <pbuf_free>
  return err;
 80118c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3718      	adds	r7, #24
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}
 80118ce:	bf00      	nop
 80118d0:	08015810 	.word	0x08015810
 80118d4:	08015fa8 	.word	0x08015fa8
 80118d8:	080158a4 	.word	0x080158a4

080118dc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80118dc:	b590      	push	{r4, r7, lr}
 80118de:	b08b      	sub	sp, #44	; 0x2c
 80118e0:	af04      	add	r7, sp, #16
 80118e2:	60f8      	str	r0, [r7, #12]
 80118e4:	60b9      	str	r1, [r7, #8]
 80118e6:	607a      	str	r2, [r7, #4]
 80118e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d106      	bne.n	80118fe <tcp_rst+0x22>
 80118f0:	4b1f      	ldr	r3, [pc, #124]	; (8011970 <tcp_rst+0x94>)
 80118f2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80118f6:	491f      	ldr	r1, [pc, #124]	; (8011974 <tcp_rst+0x98>)
 80118f8:	481f      	ldr	r0, [pc, #124]	; (8011978 <tcp_rst+0x9c>)
 80118fa:	f000 fed1 	bl	80126a0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80118fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011900:	2b00      	cmp	r3, #0
 8011902:	d106      	bne.n	8011912 <tcp_rst+0x36>
 8011904:	4b1a      	ldr	r3, [pc, #104]	; (8011970 <tcp_rst+0x94>)
 8011906:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801190a:	491c      	ldr	r1, [pc, #112]	; (801197c <tcp_rst+0xa0>)
 801190c:	481a      	ldr	r0, [pc, #104]	; (8011978 <tcp_rst+0x9c>)
 801190e:	f000 fec7 	bl	80126a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011912:	2300      	movs	r3, #0
 8011914:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011916:	f246 0308 	movw	r3, #24584	; 0x6008
 801191a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801191c:	7dfb      	ldrb	r3, [r7, #23]
 801191e:	b29c      	uxth	r4, r3
 8011920:	68b8      	ldr	r0, [r7, #8]
 8011922:	f7f6 fd00 	bl	8008326 <lwip_htonl>
 8011926:	4602      	mov	r2, r0
 8011928:	8abb      	ldrh	r3, [r7, #20]
 801192a:	9303      	str	r3, [sp, #12]
 801192c:	2314      	movs	r3, #20
 801192e:	9302      	str	r3, [sp, #8]
 8011930:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011932:	9301      	str	r3, [sp, #4]
 8011934:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011936:	9300      	str	r3, [sp, #0]
 8011938:	4613      	mov	r3, r2
 801193a:	2200      	movs	r2, #0
 801193c:	4621      	mov	r1, r4
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f7ff fe92 	bl	8011668 <tcp_output_alloc_header_common>
 8011944:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d00c      	beq.n	8011966 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801194c:	7dfb      	ldrb	r3, [r7, #23]
 801194e:	2200      	movs	r2, #0
 8011950:	6939      	ldr	r1, [r7, #16]
 8011952:	68f8      	ldr	r0, [r7, #12]
 8011954:	f7ff ff38 	bl	80117c8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801195a:	683a      	ldr	r2, [r7, #0]
 801195c:	6939      	ldr	r1, [r7, #16]
 801195e:	68f8      	ldr	r0, [r7, #12]
 8011960:	f7ff ff72 	bl	8011848 <tcp_output_control_segment>
 8011964:	e000      	b.n	8011968 <tcp_rst+0x8c>
    return;
 8011966:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011968:	371c      	adds	r7, #28
 801196a:	46bd      	mov	sp, r7
 801196c:	bd90      	pop	{r4, r7, pc}
 801196e:	bf00      	nop
 8011970:	08015810 	.word	0x08015810
 8011974:	08015fd4 	.word	0x08015fd4
 8011978:	080158a4 	.word	0x080158a4
 801197c:	08015ff0 	.word	0x08015ff0

08011980 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011980:	b590      	push	{r4, r7, lr}
 8011982:	b087      	sub	sp, #28
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011988:	2300      	movs	r3, #0
 801198a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801198c:	2300      	movs	r3, #0
 801198e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d106      	bne.n	80119a4 <tcp_send_empty_ack+0x24>
 8011996:	4b28      	ldr	r3, [pc, #160]	; (8011a38 <tcp_send_empty_ack+0xb8>)
 8011998:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801199c:	4927      	ldr	r1, [pc, #156]	; (8011a3c <tcp_send_empty_ack+0xbc>)
 801199e:	4828      	ldr	r0, [pc, #160]	; (8011a40 <tcp_send_empty_ack+0xc0>)
 80119a0:	f000 fe7e 	bl	80126a0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80119a4:	7dfb      	ldrb	r3, [r7, #23]
 80119a6:	009b      	lsls	r3, r3, #2
 80119a8:	b2db      	uxtb	r3, r3
 80119aa:	f003 0304 	and.w	r3, r3, #4
 80119ae:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80119b0:	7d7b      	ldrb	r3, [r7, #21]
 80119b2:	b29c      	uxth	r4, r3
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7f6 fcb4 	bl	8008326 <lwip_htonl>
 80119be:	4603      	mov	r3, r0
 80119c0:	2200      	movs	r2, #0
 80119c2:	4621      	mov	r1, r4
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f7ff fec1 	bl	801174c <tcp_output_alloc_header>
 80119ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d109      	bne.n	80119e6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	8b5b      	ldrh	r3, [r3, #26]
 80119d6:	f043 0303 	orr.w	r3, r3, #3
 80119da:	b29a      	uxth	r2, r3
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80119e0:	f06f 0301 	mvn.w	r3, #1
 80119e4:	e023      	b.n	8011a2e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80119e6:	7dbb      	ldrb	r3, [r7, #22]
 80119e8:	7dfa      	ldrb	r2, [r7, #23]
 80119ea:	6939      	ldr	r1, [r7, #16]
 80119ec:	6878      	ldr	r0, [r7, #4]
 80119ee:	f7ff feeb 	bl	80117c8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80119f2:	687a      	ldr	r2, [r7, #4]
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	3304      	adds	r3, #4
 80119f8:	6939      	ldr	r1, [r7, #16]
 80119fa:	6878      	ldr	r0, [r7, #4]
 80119fc:	f7ff ff24 	bl	8011848 <tcp_output_control_segment>
 8011a00:	4603      	mov	r3, r0
 8011a02:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d007      	beq.n	8011a1c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	8b5b      	ldrh	r3, [r3, #26]
 8011a10:	f043 0303 	orr.w	r3, r3, #3
 8011a14:	b29a      	uxth	r2, r3
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	835a      	strh	r2, [r3, #26]
 8011a1a:	e006      	b.n	8011a2a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	8b5b      	ldrh	r3, [r3, #26]
 8011a20:	f023 0303 	bic.w	r3, r3, #3
 8011a24:	b29a      	uxth	r2, r3
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	371c      	adds	r7, #28
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd90      	pop	{r4, r7, pc}
 8011a36:	bf00      	nop
 8011a38:	08015810 	.word	0x08015810
 8011a3c:	0801600c 	.word	0x0801600c
 8011a40:	080158a4 	.word	0x080158a4

08011a44 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011a44:	b590      	push	{r4, r7, lr}
 8011a46:	b087      	sub	sp, #28
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d106      	bne.n	8011a64 <tcp_keepalive+0x20>
 8011a56:	4b18      	ldr	r3, [pc, #96]	; (8011ab8 <tcp_keepalive+0x74>)
 8011a58:	f640 0224 	movw	r2, #2084	; 0x824
 8011a5c:	4917      	ldr	r1, [pc, #92]	; (8011abc <tcp_keepalive+0x78>)
 8011a5e:	4818      	ldr	r0, [pc, #96]	; (8011ac0 <tcp_keepalive+0x7c>)
 8011a60:	f000 fe1e 	bl	80126a0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011a64:	7dfb      	ldrb	r3, [r7, #23]
 8011a66:	b29c      	uxth	r4, r3
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a6c:	3b01      	subs	r3, #1
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7f6 fc59 	bl	8008326 <lwip_htonl>
 8011a74:	4603      	mov	r3, r0
 8011a76:	2200      	movs	r2, #0
 8011a78:	4621      	mov	r1, r4
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f7ff fe66 	bl	801174c <tcp_output_alloc_header>
 8011a80:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d102      	bne.n	8011a8e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011a88:	f04f 33ff 	mov.w	r3, #4294967295
 8011a8c:	e010      	b.n	8011ab0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011a8e:	7dfb      	ldrb	r3, [r7, #23]
 8011a90:	2200      	movs	r2, #0
 8011a92:	6939      	ldr	r1, [r7, #16]
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f7ff fe97 	bl	80117c8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011a9a:	687a      	ldr	r2, [r7, #4]
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	3304      	adds	r3, #4
 8011aa0:	6939      	ldr	r1, [r7, #16]
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f7ff fed0 	bl	8011848 <tcp_output_control_segment>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	371c      	adds	r7, #28
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd90      	pop	{r4, r7, pc}
 8011ab8:	08015810 	.word	0x08015810
 8011abc:	0801602c 	.word	0x0801602c
 8011ac0:	080158a4 	.word	0x080158a4

08011ac4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011ac4:	b590      	push	{r4, r7, lr}
 8011ac6:	b08b      	sub	sp, #44	; 0x2c
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011acc:	2300      	movs	r3, #0
 8011ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d106      	bne.n	8011ae6 <tcp_zero_window_probe+0x22>
 8011ad8:	4b4c      	ldr	r3, [pc, #304]	; (8011c0c <tcp_zero_window_probe+0x148>)
 8011ada:	f640 024f 	movw	r2, #2127	; 0x84f
 8011ade:	494c      	ldr	r1, [pc, #304]	; (8011c10 <tcp_zero_window_probe+0x14c>)
 8011ae0:	484c      	ldr	r0, [pc, #304]	; (8011c14 <tcp_zero_window_probe+0x150>)
 8011ae2:	f000 fddd 	bl	80126a0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aea:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011aec:	6a3b      	ldr	r3, [r7, #32]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d101      	bne.n	8011af6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011af2:	2300      	movs	r3, #0
 8011af4:	e086      	b.n	8011c04 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011afc:	2bff      	cmp	r3, #255	; 0xff
 8011afe:	d007      	beq.n	8011b10 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011b06:	3301      	adds	r3, #1
 8011b08:	b2da      	uxtb	r2, r3
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011b10:	6a3b      	ldr	r3, [r7, #32]
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	899b      	ldrh	r3, [r3, #12]
 8011b16:	b29b      	uxth	r3, r3
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7f6 fbef 	bl	80082fc <lwip_htons>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	b2db      	uxtb	r3, r3
 8011b22:	f003 0301 	and.w	r3, r3, #1
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d005      	beq.n	8011b36 <tcp_zero_window_probe+0x72>
 8011b2a:	6a3b      	ldr	r3, [r7, #32]
 8011b2c:	891b      	ldrh	r3, [r3, #8]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d101      	bne.n	8011b36 <tcp_zero_window_probe+0x72>
 8011b32:	2301      	movs	r3, #1
 8011b34:	e000      	b.n	8011b38 <tcp_zero_window_probe+0x74>
 8011b36:	2300      	movs	r3, #0
 8011b38:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011b3a:	7ffb      	ldrb	r3, [r7, #31]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	bf0c      	ite	eq
 8011b40:	2301      	moveq	r3, #1
 8011b42:	2300      	movne	r3, #0
 8011b44:	b2db      	uxtb	r3, r3
 8011b46:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b4c:	b299      	uxth	r1, r3
 8011b4e:	6a3b      	ldr	r3, [r7, #32]
 8011b50:	68db      	ldr	r3, [r3, #12]
 8011b52:	685b      	ldr	r3, [r3, #4]
 8011b54:	8bba      	ldrh	r2, [r7, #28]
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f7ff fdf8 	bl	801174c <tcp_output_alloc_header>
 8011b5c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011b5e:	69bb      	ldr	r3, [r7, #24]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d102      	bne.n	8011b6a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011b64:	f04f 33ff 	mov.w	r3, #4294967295
 8011b68:	e04c      	b.n	8011c04 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011b6a:	69bb      	ldr	r3, [r7, #24]
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011b70:	7ffb      	ldrb	r3, [r7, #31]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d011      	beq.n	8011b9a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	899b      	ldrh	r3, [r3, #12]
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	b21b      	sxth	r3, r3
 8011b7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011b82:	b21c      	sxth	r4, r3
 8011b84:	2011      	movs	r0, #17
 8011b86:	f7f6 fbb9 	bl	80082fc <lwip_htons>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	b21b      	sxth	r3, r3
 8011b8e:	4323      	orrs	r3, r4
 8011b90:	b21b      	sxth	r3, r3
 8011b92:	b29a      	uxth	r2, r3
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	819a      	strh	r2, [r3, #12]
 8011b98:	e010      	b.n	8011bbc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011b9a:	69bb      	ldr	r3, [r7, #24]
 8011b9c:	685b      	ldr	r3, [r3, #4]
 8011b9e:	3314      	adds	r3, #20
 8011ba0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011ba2:	6a3b      	ldr	r3, [r7, #32]
 8011ba4:	6858      	ldr	r0, [r3, #4]
 8011ba6:	6a3b      	ldr	r3, [r7, #32]
 8011ba8:	685b      	ldr	r3, [r3, #4]
 8011baa:	891a      	ldrh	r2, [r3, #8]
 8011bac:	6a3b      	ldr	r3, [r7, #32]
 8011bae:	891b      	ldrh	r3, [r3, #8]
 8011bb0:	1ad3      	subs	r3, r2, r3
 8011bb2:	b29b      	uxth	r3, r3
 8011bb4:	2201      	movs	r2, #1
 8011bb6:	6939      	ldr	r1, [r7, #16]
 8011bb8:	f7fa fd3c 	bl	800c634 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011bbc:	6a3b      	ldr	r3, [r7, #32]
 8011bbe:	68db      	ldr	r3, [r3, #12]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7f6 fbaf 	bl	8008326 <lwip_htonl>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	3301      	adds	r3, #1
 8011bcc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	1ad3      	subs	r3, r2, r3
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	da02      	bge.n	8011be0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	68fa      	ldr	r2, [r7, #12]
 8011bde:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011be4:	2200      	movs	r2, #0
 8011be6:	69b9      	ldr	r1, [r7, #24]
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f7ff fded 	bl	80117c8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011bee:	687a      	ldr	r2, [r7, #4]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	3304      	adds	r3, #4
 8011bf4:	69b9      	ldr	r1, [r7, #24]
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f7ff fe26 	bl	8011848 <tcp_output_control_segment>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011c00:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	372c      	adds	r7, #44	; 0x2c
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd90      	pop	{r4, r7, pc}
 8011c0c:	08015810 	.word	0x08015810
 8011c10:	08016048 	.word	0x08016048
 8011c14:	080158a4 	.word	0x080158a4

08011c18 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b084      	sub	sp, #16
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8011c22:	f000 fb01 	bl	8012228 <sys_timeouts_sleeptime>
 8011c26:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c2e:	d10b      	bne.n	8011c48 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011c30:	4813      	ldr	r0, [pc, #76]	; (8011c80 <tcpip_timeouts_mbox_fetch+0x68>)
 8011c32:	f7fa fe68 	bl	800c906 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011c36:	2200      	movs	r2, #0
 8011c38:	6839      	ldr	r1, [r7, #0]
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f7fa fdda 	bl	800c7f4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011c40:	480f      	ldr	r0, [pc, #60]	; (8011c80 <tcpip_timeouts_mbox_fetch+0x68>)
 8011c42:	f7fa fe51 	bl	800c8e8 <sys_mutex_lock>
    return;
 8011c46:	e018      	b.n	8011c7a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d102      	bne.n	8011c54 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011c4e:	f000 fab1 	bl	80121b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011c52:	e7e6      	b.n	8011c22 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011c54:	480a      	ldr	r0, [pc, #40]	; (8011c80 <tcpip_timeouts_mbox_fetch+0x68>)
 8011c56:	f7fa fe56 	bl	800c906 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8011c5a:	68fa      	ldr	r2, [r7, #12]
 8011c5c:	6839      	ldr	r1, [r7, #0]
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f7fa fdc8 	bl	800c7f4 <sys_arch_mbox_fetch>
 8011c64:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8011c66:	4806      	ldr	r0, [pc, #24]	; (8011c80 <tcpip_timeouts_mbox_fetch+0x68>)
 8011c68:	f7fa fe3e 	bl	800c8e8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c72:	d102      	bne.n	8011c7a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011c74:	f000 fa9e 	bl	80121b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011c78:	e7d3      	b.n	8011c22 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8011c7a:	3710      	adds	r7, #16
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}
 8011c80:	2400747c 	.word	0x2400747c

08011c84 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b084      	sub	sp, #16
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011c8c:	4810      	ldr	r0, [pc, #64]	; (8011cd0 <tcpip_thread+0x4c>)
 8011c8e:	f7fa fe2b 	bl	800c8e8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8011c92:	4b10      	ldr	r3, [pc, #64]	; (8011cd4 <tcpip_thread+0x50>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d005      	beq.n	8011ca6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8011c9a:	4b0e      	ldr	r3, [pc, #56]	; (8011cd4 <tcpip_thread+0x50>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	4a0e      	ldr	r2, [pc, #56]	; (8011cd8 <tcpip_thread+0x54>)
 8011ca0:	6812      	ldr	r2, [r2, #0]
 8011ca2:	4610      	mov	r0, r2
 8011ca4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011ca6:	f107 030c 	add.w	r3, r7, #12
 8011caa:	4619      	mov	r1, r3
 8011cac:	480b      	ldr	r0, [pc, #44]	; (8011cdc <tcpip_thread+0x58>)
 8011cae:	f7ff ffb3 	bl	8011c18 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d106      	bne.n	8011cc6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011cb8:	4b09      	ldr	r3, [pc, #36]	; (8011ce0 <tcpip_thread+0x5c>)
 8011cba:	2291      	movs	r2, #145	; 0x91
 8011cbc:	4909      	ldr	r1, [pc, #36]	; (8011ce4 <tcpip_thread+0x60>)
 8011cbe:	480a      	ldr	r0, [pc, #40]	; (8011ce8 <tcpip_thread+0x64>)
 8011cc0:	f000 fcee 	bl	80126a0 <iprintf>
      continue;
 8011cc4:	e003      	b.n	8011cce <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f000 f80f 	bl	8011cec <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011cce:	e7ea      	b.n	8011ca6 <tcpip_thread+0x22>
 8011cd0:	2400747c 	.word	0x2400747c
 8011cd4:	24007470 	.word	0x24007470
 8011cd8:	24007474 	.word	0x24007474
 8011cdc:	24007478 	.word	0x24007478
 8011ce0:	0801606c 	.word	0x0801606c
 8011ce4:	080160dc 	.word	0x080160dc
 8011ce8:	080160fc 	.word	0x080160fc

08011cec <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	781b      	ldrb	r3, [r3, #0]
 8011cf8:	2b02      	cmp	r3, #2
 8011cfa:	d026      	beq.n	8011d4a <tcpip_thread_handle_msg+0x5e>
 8011cfc:	2b02      	cmp	r3, #2
 8011cfe:	dc2b      	bgt.n	8011d58 <tcpip_thread_handle_msg+0x6c>
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d002      	beq.n	8011d0a <tcpip_thread_handle_msg+0x1e>
 8011d04:	2b01      	cmp	r3, #1
 8011d06:	d015      	beq.n	8011d34 <tcpip_thread_handle_msg+0x48>
 8011d08:	e026      	b.n	8011d58 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	68db      	ldr	r3, [r3, #12]
 8011d0e:	687a      	ldr	r2, [r7, #4]
 8011d10:	6850      	ldr	r0, [r2, #4]
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	6892      	ldr	r2, [r2, #8]
 8011d16:	4611      	mov	r1, r2
 8011d18:	4798      	blx	r3
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d004      	beq.n	8011d2a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	685b      	ldr	r3, [r3, #4]
 8011d24:	4618      	mov	r0, r3
 8011d26:	f7fa fa8f 	bl	800c248 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011d2a:	6879      	ldr	r1, [r7, #4]
 8011d2c:	2009      	movs	r0, #9
 8011d2e:	f7f9 fbe7 	bl	800b500 <memp_free>
      break;
 8011d32:	e018      	b.n	8011d66 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	687a      	ldr	r2, [r7, #4]
 8011d3a:	6892      	ldr	r2, [r2, #8]
 8011d3c:	4610      	mov	r0, r2
 8011d3e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011d40:	6879      	ldr	r1, [r7, #4]
 8011d42:	2008      	movs	r0, #8
 8011d44:	f7f9 fbdc 	bl	800b500 <memp_free>
      break;
 8011d48:	e00d      	b.n	8011d66 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	685b      	ldr	r3, [r3, #4]
 8011d4e:	687a      	ldr	r2, [r7, #4]
 8011d50:	6892      	ldr	r2, [r2, #8]
 8011d52:	4610      	mov	r0, r2
 8011d54:	4798      	blx	r3
      break;
 8011d56:	e006      	b.n	8011d66 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011d58:	4b05      	ldr	r3, [pc, #20]	; (8011d70 <tcpip_thread_handle_msg+0x84>)
 8011d5a:	22cf      	movs	r2, #207	; 0xcf
 8011d5c:	4905      	ldr	r1, [pc, #20]	; (8011d74 <tcpip_thread_handle_msg+0x88>)
 8011d5e:	4806      	ldr	r0, [pc, #24]	; (8011d78 <tcpip_thread_handle_msg+0x8c>)
 8011d60:	f000 fc9e 	bl	80126a0 <iprintf>
      break;
 8011d64:	bf00      	nop
  }
}
 8011d66:	bf00      	nop
 8011d68:	3708      	adds	r7, #8
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}
 8011d6e:	bf00      	nop
 8011d70:	0801606c 	.word	0x0801606c
 8011d74:	080160dc 	.word	0x080160dc
 8011d78:	080160fc 	.word	0x080160fc

08011d7c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b086      	sub	sp, #24
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	60f8      	str	r0, [r7, #12]
 8011d84:	60b9      	str	r1, [r7, #8]
 8011d86:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011d88:	481a      	ldr	r0, [pc, #104]	; (8011df4 <tcpip_inpkt+0x78>)
 8011d8a:	f7fa fd72 	bl	800c872 <sys_mbox_valid>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d105      	bne.n	8011da0 <tcpip_inpkt+0x24>
 8011d94:	4b18      	ldr	r3, [pc, #96]	; (8011df8 <tcpip_inpkt+0x7c>)
 8011d96:	22fc      	movs	r2, #252	; 0xfc
 8011d98:	4918      	ldr	r1, [pc, #96]	; (8011dfc <tcpip_inpkt+0x80>)
 8011d9a:	4819      	ldr	r0, [pc, #100]	; (8011e00 <tcpip_inpkt+0x84>)
 8011d9c:	f000 fc80 	bl	80126a0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011da0:	2009      	movs	r0, #9
 8011da2:	f7f9 fb37 	bl	800b414 <memp_malloc>
 8011da6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d102      	bne.n	8011db4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011dae:	f04f 33ff 	mov.w	r3, #4294967295
 8011db2:	e01a      	b.n	8011dea <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	2200      	movs	r2, #0
 8011db8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	68fa      	ldr	r2, [r7, #12]
 8011dbe:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	68ba      	ldr	r2, [r7, #8]
 8011dc4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011dcc:	6979      	ldr	r1, [r7, #20]
 8011dce:	4809      	ldr	r0, [pc, #36]	; (8011df4 <tcpip_inpkt+0x78>)
 8011dd0:	f7fa fcf6 	bl	800c7c0 <sys_mbox_trypost>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d006      	beq.n	8011de8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011dda:	6979      	ldr	r1, [r7, #20]
 8011ddc:	2009      	movs	r0, #9
 8011dde:	f7f9 fb8f 	bl	800b500 <memp_free>
    return ERR_MEM;
 8011de2:	f04f 33ff 	mov.w	r3, #4294967295
 8011de6:	e000      	b.n	8011dea <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8011de8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3718      	adds	r7, #24
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
 8011df2:	bf00      	nop
 8011df4:	24007478 	.word	0x24007478
 8011df8:	0801606c 	.word	0x0801606c
 8011dfc:	08016124 	.word	0x08016124
 8011e00:	080160fc 	.word	0x080160fc

08011e04 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b082      	sub	sp, #8
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011e14:	f003 0318 	and.w	r3, r3, #24
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d006      	beq.n	8011e2a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011e1c:	4a08      	ldr	r2, [pc, #32]	; (8011e40 <tcpip_input+0x3c>)
 8011e1e:	6839      	ldr	r1, [r7, #0]
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f7ff ffab 	bl	8011d7c <tcpip_inpkt>
 8011e26:	4603      	mov	r3, r0
 8011e28:	e005      	b.n	8011e36 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8011e2a:	4a06      	ldr	r2, [pc, #24]	; (8011e44 <tcpip_input+0x40>)
 8011e2c:	6839      	ldr	r1, [r7, #0]
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f7ff ffa4 	bl	8011d7c <tcpip_inpkt>
 8011e34:	4603      	mov	r3, r0
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3708      	adds	r7, #8
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}
 8011e3e:	bf00      	nop
 8011e40:	080091f1 	.word	0x080091f1
 8011e44:	080099e1 	.word	0x080099e1

08011e48 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b084      	sub	sp, #16
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
 8011e50:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011e52:	4819      	ldr	r0, [pc, #100]	; (8011eb8 <tcpip_try_callback+0x70>)
 8011e54:	f7fa fd0d 	bl	800c872 <sys_mbox_valid>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d106      	bne.n	8011e6c <tcpip_try_callback+0x24>
 8011e5e:	4b17      	ldr	r3, [pc, #92]	; (8011ebc <tcpip_try_callback+0x74>)
 8011e60:	f240 125d 	movw	r2, #349	; 0x15d
 8011e64:	4916      	ldr	r1, [pc, #88]	; (8011ec0 <tcpip_try_callback+0x78>)
 8011e66:	4817      	ldr	r0, [pc, #92]	; (8011ec4 <tcpip_try_callback+0x7c>)
 8011e68:	f000 fc1a 	bl	80126a0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011e6c:	2008      	movs	r0, #8
 8011e6e:	f7f9 fad1 	bl	800b414 <memp_malloc>
 8011e72:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d102      	bne.n	8011e80 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8011e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8011e7e:	e017      	b.n	8011eb0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	2201      	movs	r2, #1
 8011e84:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	687a      	ldr	r2, [r7, #4]
 8011e8a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	683a      	ldr	r2, [r7, #0]
 8011e90:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011e92:	68f9      	ldr	r1, [r7, #12]
 8011e94:	4808      	ldr	r0, [pc, #32]	; (8011eb8 <tcpip_try_callback+0x70>)
 8011e96:	f7fa fc93 	bl	800c7c0 <sys_mbox_trypost>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d006      	beq.n	8011eae <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8011ea0:	68f9      	ldr	r1, [r7, #12]
 8011ea2:	2008      	movs	r0, #8
 8011ea4:	f7f9 fb2c 	bl	800b500 <memp_free>
    return ERR_MEM;
 8011ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8011eac:	e000      	b.n	8011eb0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8011eae:	2300      	movs	r3, #0
}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3710      	adds	r7, #16
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}
 8011eb8:	24007478 	.word	0x24007478
 8011ebc:	0801606c 	.word	0x0801606c
 8011ec0:	08016124 	.word	0x08016124
 8011ec4:	080160fc 	.word	0x080160fc

08011ec8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b084      	sub	sp, #16
 8011ecc:	af02      	add	r7, sp, #8
 8011ece:	6078      	str	r0, [r7, #4]
 8011ed0:	6039      	str	r1, [r7, #0]
  lwip_init();
 8011ed2:	f7f7 fcd3 	bl	800987c <lwip_init>

  tcpip_init_done = initfunc;
 8011ed6:	4a17      	ldr	r2, [pc, #92]	; (8011f34 <tcpip_init+0x6c>)
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8011edc:	4a16      	ldr	r2, [pc, #88]	; (8011f38 <tcpip_init+0x70>)
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011ee2:	2106      	movs	r1, #6
 8011ee4:	4815      	ldr	r0, [pc, #84]	; (8011f3c <tcpip_init+0x74>)
 8011ee6:	f7fa fc49 	bl	800c77c <sys_mbox_new>
 8011eea:	4603      	mov	r3, r0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d006      	beq.n	8011efe <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011ef0:	4b13      	ldr	r3, [pc, #76]	; (8011f40 <tcpip_init+0x78>)
 8011ef2:	f240 2261 	movw	r2, #609	; 0x261
 8011ef6:	4913      	ldr	r1, [pc, #76]	; (8011f44 <tcpip_init+0x7c>)
 8011ef8:	4813      	ldr	r0, [pc, #76]	; (8011f48 <tcpip_init+0x80>)
 8011efa:	f000 fbd1 	bl	80126a0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011efe:	4813      	ldr	r0, [pc, #76]	; (8011f4c <tcpip_init+0x84>)
 8011f00:	f7fa fcd6 	bl	800c8b0 <sys_mutex_new>
 8011f04:	4603      	mov	r3, r0
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d006      	beq.n	8011f18 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8011f0a:	4b0d      	ldr	r3, [pc, #52]	; (8011f40 <tcpip_init+0x78>)
 8011f0c:	f240 2265 	movw	r2, #613	; 0x265
 8011f10:	490f      	ldr	r1, [pc, #60]	; (8011f50 <tcpip_init+0x88>)
 8011f12:	480d      	ldr	r0, [pc, #52]	; (8011f48 <tcpip_init+0x80>)
 8011f14:	f000 fbc4 	bl	80126a0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011f18:	2300      	movs	r3, #0
 8011f1a:	9300      	str	r3, [sp, #0]
 8011f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f20:	2200      	movs	r2, #0
 8011f22:	490c      	ldr	r1, [pc, #48]	; (8011f54 <tcpip_init+0x8c>)
 8011f24:	480c      	ldr	r0, [pc, #48]	; (8011f58 <tcpip_init+0x90>)
 8011f26:	f7fa fcfb 	bl	800c920 <sys_thread_new>
}
 8011f2a:	bf00      	nop
 8011f2c:	3708      	adds	r7, #8
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}
 8011f32:	bf00      	nop
 8011f34:	24007470 	.word	0x24007470
 8011f38:	24007474 	.word	0x24007474
 8011f3c:	24007478 	.word	0x24007478
 8011f40:	0801606c 	.word	0x0801606c
 8011f44:	08016134 	.word	0x08016134
 8011f48:	080160fc 	.word	0x080160fc
 8011f4c:	2400747c 	.word	0x2400747c
 8011f50:	08016158 	.word	0x08016158
 8011f54:	08011c85 	.word	0x08011c85
 8011f58:	0801617c 	.word	0x0801617c

08011f5c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011f64:	f7fa fd6a 	bl	800ca3c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011f68:	4b0a      	ldr	r3, [pc, #40]	; (8011f94 <tcpip_tcp_timer+0x38>)
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d103      	bne.n	8011f78 <tcpip_tcp_timer+0x1c>
 8011f70:	4b09      	ldr	r3, [pc, #36]	; (8011f98 <tcpip_tcp_timer+0x3c>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d005      	beq.n	8011f84 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011f78:	2200      	movs	r2, #0
 8011f7a:	4908      	ldr	r1, [pc, #32]	; (8011f9c <tcpip_tcp_timer+0x40>)
 8011f7c:	20fa      	movs	r0, #250	; 0xfa
 8011f7e:	f000 f8f3 	bl	8012168 <sys_timeout>
 8011f82:	e003      	b.n	8011f8c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011f84:	4b06      	ldr	r3, [pc, #24]	; (8011fa0 <tcpip_tcp_timer+0x44>)
 8011f86:	2200      	movs	r2, #0
 8011f88:	601a      	str	r2, [r3, #0]
  }
}
 8011f8a:	bf00      	nop
 8011f8c:	bf00      	nop
 8011f8e:	3708      	adds	r7, #8
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}
 8011f94:	2400742c 	.word	0x2400742c
 8011f98:	24007430 	.word	0x24007430
 8011f9c:	08011f5d 	.word	0x08011f5d
 8011fa0:	24007488 	.word	0x24007488

08011fa4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011fa8:	4b0a      	ldr	r3, [pc, #40]	; (8011fd4 <tcp_timer_needed+0x30>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d10f      	bne.n	8011fd0 <tcp_timer_needed+0x2c>
 8011fb0:	4b09      	ldr	r3, [pc, #36]	; (8011fd8 <tcp_timer_needed+0x34>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d103      	bne.n	8011fc0 <tcp_timer_needed+0x1c>
 8011fb8:	4b08      	ldr	r3, [pc, #32]	; (8011fdc <tcp_timer_needed+0x38>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d007      	beq.n	8011fd0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011fc0:	4b04      	ldr	r3, [pc, #16]	; (8011fd4 <tcp_timer_needed+0x30>)
 8011fc2:	2201      	movs	r2, #1
 8011fc4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	4905      	ldr	r1, [pc, #20]	; (8011fe0 <tcp_timer_needed+0x3c>)
 8011fca:	20fa      	movs	r0, #250	; 0xfa
 8011fcc:	f000 f8cc 	bl	8012168 <sys_timeout>
  }
}
 8011fd0:	bf00      	nop
 8011fd2:	bd80      	pop	{r7, pc}
 8011fd4:	24007488 	.word	0x24007488
 8011fd8:	2400742c 	.word	0x2400742c
 8011fdc:	24007430 	.word	0x24007430
 8011fe0:	08011f5d 	.word	0x08011f5d

08011fe4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b086      	sub	sp, #24
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	60f8      	str	r0, [r7, #12]
 8011fec:	60b9      	str	r1, [r7, #8]
 8011fee:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011ff0:	200a      	movs	r0, #10
 8011ff2:	f7f9 fa0f 	bl	800b414 <memp_malloc>
 8011ff6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011ff8:	693b      	ldr	r3, [r7, #16]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d109      	bne.n	8012012 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d151      	bne.n	80120a8 <sys_timeout_abs+0xc4>
 8012004:	4b2a      	ldr	r3, [pc, #168]	; (80120b0 <sys_timeout_abs+0xcc>)
 8012006:	22be      	movs	r2, #190	; 0xbe
 8012008:	492a      	ldr	r1, [pc, #168]	; (80120b4 <sys_timeout_abs+0xd0>)
 801200a:	482b      	ldr	r0, [pc, #172]	; (80120b8 <sys_timeout_abs+0xd4>)
 801200c:	f000 fb48 	bl	80126a0 <iprintf>
    return;
 8012010:	e04a      	b.n	80120a8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	2200      	movs	r2, #0
 8012016:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	68ba      	ldr	r2, [r7, #8]
 801201c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801201e:	693b      	ldr	r3, [r7, #16]
 8012020:	687a      	ldr	r2, [r7, #4]
 8012022:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	68fa      	ldr	r2, [r7, #12]
 8012028:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801202a:	4b24      	ldr	r3, [pc, #144]	; (80120bc <sys_timeout_abs+0xd8>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d103      	bne.n	801203a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012032:	4a22      	ldr	r2, [pc, #136]	; (80120bc <sys_timeout_abs+0xd8>)
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	6013      	str	r3, [r2, #0]
    return;
 8012038:	e037      	b.n	80120aa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801203a:	693b      	ldr	r3, [r7, #16]
 801203c:	685a      	ldr	r2, [r3, #4]
 801203e:	4b1f      	ldr	r3, [pc, #124]	; (80120bc <sys_timeout_abs+0xd8>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	685b      	ldr	r3, [r3, #4]
 8012044:	1ad3      	subs	r3, r2, r3
 8012046:	0fdb      	lsrs	r3, r3, #31
 8012048:	f003 0301 	and.w	r3, r3, #1
 801204c:	b2db      	uxtb	r3, r3
 801204e:	2b00      	cmp	r3, #0
 8012050:	d007      	beq.n	8012062 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012052:	4b1a      	ldr	r3, [pc, #104]	; (80120bc <sys_timeout_abs+0xd8>)
 8012054:	681a      	ldr	r2, [r3, #0]
 8012056:	693b      	ldr	r3, [r7, #16]
 8012058:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801205a:	4a18      	ldr	r2, [pc, #96]	; (80120bc <sys_timeout_abs+0xd8>)
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	6013      	str	r3, [r2, #0]
 8012060:	e023      	b.n	80120aa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012062:	4b16      	ldr	r3, [pc, #88]	; (80120bc <sys_timeout_abs+0xd8>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	617b      	str	r3, [r7, #20]
 8012068:	e01a      	b.n	80120a0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d00b      	beq.n	801208a <sys_timeout_abs+0xa6>
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	685a      	ldr	r2, [r3, #4]
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	685b      	ldr	r3, [r3, #4]
 801207c:	1ad3      	subs	r3, r2, r3
 801207e:	0fdb      	lsrs	r3, r3, #31
 8012080:	f003 0301 	and.w	r3, r3, #1
 8012084:	b2db      	uxtb	r3, r3
 8012086:	2b00      	cmp	r3, #0
 8012088:	d007      	beq.n	801209a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801208a:	697b      	ldr	r3, [r7, #20]
 801208c:	681a      	ldr	r2, [r3, #0]
 801208e:	693b      	ldr	r3, [r7, #16]
 8012090:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	693a      	ldr	r2, [r7, #16]
 8012096:	601a      	str	r2, [r3, #0]
        break;
 8012098:	e007      	b.n	80120aa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	617b      	str	r3, [r7, #20]
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d1e1      	bne.n	801206a <sys_timeout_abs+0x86>
 80120a6:	e000      	b.n	80120aa <sys_timeout_abs+0xc6>
    return;
 80120a8:	bf00      	nop
      }
    }
  }
}
 80120aa:	3718      	adds	r7, #24
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}
 80120b0:	0801618c 	.word	0x0801618c
 80120b4:	08016200 	.word	0x08016200
 80120b8:	08016240 	.word	0x08016240
 80120bc:	24007480 	.word	0x24007480

080120c0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b086      	sub	sp, #24
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	685b      	ldr	r3, [r3, #4]
 80120d0:	4798      	blx	r3

  now = sys_now();
 80120d2:	f7f2 ffdf 	bl	8005094 <sys_now>
 80120d6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	4b0f      	ldr	r3, [pc, #60]	; (801211c <lwip_cyclic_timer+0x5c>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	4413      	add	r3, r2
 80120e2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80120e4:	68fa      	ldr	r2, [r7, #12]
 80120e6:	693b      	ldr	r3, [r7, #16]
 80120e8:	1ad3      	subs	r3, r2, r3
 80120ea:	0fdb      	lsrs	r3, r3, #31
 80120ec:	f003 0301 	and.w	r3, r3, #1
 80120f0:	b2db      	uxtb	r3, r3
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d009      	beq.n	801210a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	681a      	ldr	r2, [r3, #0]
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	4413      	add	r3, r2
 80120fe:	687a      	ldr	r2, [r7, #4]
 8012100:	4907      	ldr	r1, [pc, #28]	; (8012120 <lwip_cyclic_timer+0x60>)
 8012102:	4618      	mov	r0, r3
 8012104:	f7ff ff6e 	bl	8011fe4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012108:	e004      	b.n	8012114 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801210a:	687a      	ldr	r2, [r7, #4]
 801210c:	4904      	ldr	r1, [pc, #16]	; (8012120 <lwip_cyclic_timer+0x60>)
 801210e:	68f8      	ldr	r0, [r7, #12]
 8012110:	f7ff ff68 	bl	8011fe4 <sys_timeout_abs>
}
 8012114:	bf00      	nop
 8012116:	3718      	adds	r7, #24
 8012118:	46bd      	mov	sp, r7
 801211a:	bd80      	pop	{r7, pc}
 801211c:	24007484 	.word	0x24007484
 8012120:	080120c1 	.word	0x080120c1

08012124 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b082      	sub	sp, #8
 8012128:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801212a:	2301      	movs	r3, #1
 801212c:	607b      	str	r3, [r7, #4]
 801212e:	e00e      	b.n	801214e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012130:	4a0b      	ldr	r2, [pc, #44]	; (8012160 <sys_timeouts_init+0x3c>)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	00db      	lsls	r3, r3, #3
 801213c:	4a08      	ldr	r2, [pc, #32]	; (8012160 <sys_timeouts_init+0x3c>)
 801213e:	4413      	add	r3, r2
 8012140:	461a      	mov	r2, r3
 8012142:	4908      	ldr	r1, [pc, #32]	; (8012164 <sys_timeouts_init+0x40>)
 8012144:	f000 f810 	bl	8012168 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	3301      	adds	r3, #1
 801214c:	607b      	str	r3, [r7, #4]
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	2b02      	cmp	r3, #2
 8012152:	d9ed      	bls.n	8012130 <sys_timeouts_init+0xc>
  }
}
 8012154:	bf00      	nop
 8012156:	bf00      	nop
 8012158:	3708      	adds	r7, #8
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop
 8012160:	08016788 	.word	0x08016788
 8012164:	080120c1 	.word	0x080120c1

08012168 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b086      	sub	sp, #24
 801216c:	af00      	add	r7, sp, #0
 801216e:	60f8      	str	r0, [r7, #12]
 8012170:	60b9      	str	r1, [r7, #8]
 8012172:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801217a:	d306      	bcc.n	801218a <sys_timeout+0x22>
 801217c:	4b0a      	ldr	r3, [pc, #40]	; (80121a8 <sys_timeout+0x40>)
 801217e:	f240 1229 	movw	r2, #297	; 0x129
 8012182:	490a      	ldr	r1, [pc, #40]	; (80121ac <sys_timeout+0x44>)
 8012184:	480a      	ldr	r0, [pc, #40]	; (80121b0 <sys_timeout+0x48>)
 8012186:	f000 fa8b 	bl	80126a0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801218a:	f7f2 ff83 	bl	8005094 <sys_now>
 801218e:	4602      	mov	r2, r0
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	4413      	add	r3, r2
 8012194:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012196:	687a      	ldr	r2, [r7, #4]
 8012198:	68b9      	ldr	r1, [r7, #8]
 801219a:	6978      	ldr	r0, [r7, #20]
 801219c:	f7ff ff22 	bl	8011fe4 <sys_timeout_abs>
#endif
}
 80121a0:	bf00      	nop
 80121a2:	3718      	adds	r7, #24
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}
 80121a8:	0801618c 	.word	0x0801618c
 80121ac:	08016268 	.word	0x08016268
 80121b0:	08016240 	.word	0x08016240

080121b4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b084      	sub	sp, #16
 80121b8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80121ba:	f7f2 ff6b 	bl	8005094 <sys_now>
 80121be:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80121c0:	4b17      	ldr	r3, [pc, #92]	; (8012220 <sys_check_timeouts+0x6c>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d022      	beq.n	8012212 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80121cc:	68bb      	ldr	r3, [r7, #8]
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	68fa      	ldr	r2, [r7, #12]
 80121d2:	1ad3      	subs	r3, r2, r3
 80121d4:	0fdb      	lsrs	r3, r3, #31
 80121d6:	f003 0301 	and.w	r3, r3, #1
 80121da:	b2db      	uxtb	r3, r3
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d11a      	bne.n	8012216 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	4a0e      	ldr	r2, [pc, #56]	; (8012220 <sys_check_timeouts+0x6c>)
 80121e6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	689b      	ldr	r3, [r3, #8]
 80121ec:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	4a0a      	ldr	r2, [pc, #40]	; (8012224 <sys_check_timeouts+0x70>)
 80121fa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80121fc:	68b9      	ldr	r1, [r7, #8]
 80121fe:	200a      	movs	r0, #10
 8012200:	f7f9 f97e 	bl	800b500 <memp_free>
    if (handler != NULL) {
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d0da      	beq.n	80121c0 <sys_check_timeouts+0xc>
      handler(arg);
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	6838      	ldr	r0, [r7, #0]
 801220e:	4798      	blx	r3
  do {
 8012210:	e7d6      	b.n	80121c0 <sys_check_timeouts+0xc>
      return;
 8012212:	bf00      	nop
 8012214:	e000      	b.n	8012218 <sys_check_timeouts+0x64>
      return;
 8012216:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012218:	3710      	adds	r7, #16
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
 801221e:	bf00      	nop
 8012220:	24007480 	.word	0x24007480
 8012224:	24007484 	.word	0x24007484

08012228 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b082      	sub	sp, #8
 801222c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801222e:	4b16      	ldr	r3, [pc, #88]	; (8012288 <sys_timeouts_sleeptime+0x60>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d102      	bne.n	801223c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012236:	f04f 33ff 	mov.w	r3, #4294967295
 801223a:	e020      	b.n	801227e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801223c:	f7f2 ff2a 	bl	8005094 <sys_now>
 8012240:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012242:	4b11      	ldr	r3, [pc, #68]	; (8012288 <sys_timeouts_sleeptime+0x60>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	685a      	ldr	r2, [r3, #4]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	1ad3      	subs	r3, r2, r3
 801224c:	0fdb      	lsrs	r3, r3, #31
 801224e:	f003 0301 	and.w	r3, r3, #1
 8012252:	b2db      	uxtb	r3, r3
 8012254:	2b00      	cmp	r3, #0
 8012256:	d001      	beq.n	801225c <sys_timeouts_sleeptime+0x34>
    return 0;
 8012258:	2300      	movs	r3, #0
 801225a:	e010      	b.n	801227e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801225c:	4b0a      	ldr	r3, [pc, #40]	; (8012288 <sys_timeouts_sleeptime+0x60>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	685a      	ldr	r2, [r3, #4]
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	1ad3      	subs	r3, r2, r3
 8012266:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	2b00      	cmp	r3, #0
 801226c:	da06      	bge.n	801227c <sys_timeouts_sleeptime+0x54>
 801226e:	4b07      	ldr	r3, [pc, #28]	; (801228c <sys_timeouts_sleeptime+0x64>)
 8012270:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012274:	4906      	ldr	r1, [pc, #24]	; (8012290 <sys_timeouts_sleeptime+0x68>)
 8012276:	4807      	ldr	r0, [pc, #28]	; (8012294 <sys_timeouts_sleeptime+0x6c>)
 8012278:	f000 fa12 	bl	80126a0 <iprintf>
    return ret;
 801227c:	683b      	ldr	r3, [r7, #0]
  }
}
 801227e:	4618      	mov	r0, r3
 8012280:	3708      	adds	r7, #8
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
 8012286:	bf00      	nop
 8012288:	24007480 	.word	0x24007480
 801228c:	0801618c 	.word	0x0801618c
 8012290:	080162a0 	.word	0x080162a0
 8012294:	08016240 	.word	0x08016240

08012298 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801229c:	f000 fa18 	bl	80126d0 <rand>
 80122a0:	4603      	mov	r3, r0
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80122a8:	b29b      	uxth	r3, r3
 80122aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80122ae:	b29a      	uxth	r2, r3
 80122b0:	4b01      	ldr	r3, [pc, #4]	; (80122b8 <udp_init+0x20>)
 80122b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80122b4:	bf00      	nop
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	24000030 	.word	0x24000030

080122bc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b084      	sub	sp, #16
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	60f8      	str	r0, [r7, #12]
 80122c4:	60b9      	str	r1, [r7, #8]
 80122c6:	4613      	mov	r3, r2
 80122c8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d105      	bne.n	80122dc <udp_input_local_match+0x20>
 80122d0:	4b27      	ldr	r3, [pc, #156]	; (8012370 <udp_input_local_match+0xb4>)
 80122d2:	2287      	movs	r2, #135	; 0x87
 80122d4:	4927      	ldr	r1, [pc, #156]	; (8012374 <udp_input_local_match+0xb8>)
 80122d6:	4828      	ldr	r0, [pc, #160]	; (8012378 <udp_input_local_match+0xbc>)
 80122d8:	f000 f9e2 	bl	80126a0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d105      	bne.n	80122ee <udp_input_local_match+0x32>
 80122e2:	4b23      	ldr	r3, [pc, #140]	; (8012370 <udp_input_local_match+0xb4>)
 80122e4:	2288      	movs	r2, #136	; 0x88
 80122e6:	4925      	ldr	r1, [pc, #148]	; (801237c <udp_input_local_match+0xc0>)
 80122e8:	4823      	ldr	r0, [pc, #140]	; (8012378 <udp_input_local_match+0xbc>)
 80122ea:	f000 f9d9 	bl	80126a0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	7a1b      	ldrb	r3, [r3, #8]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d00b      	beq.n	801230e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	7a1a      	ldrb	r2, [r3, #8]
 80122fa:	4b21      	ldr	r3, [pc, #132]	; (8012380 <udp_input_local_match+0xc4>)
 80122fc:	685b      	ldr	r3, [r3, #4]
 80122fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012302:	3301      	adds	r3, #1
 8012304:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012306:	429a      	cmp	r2, r3
 8012308:	d001      	beq.n	801230e <udp_input_local_match+0x52>
    return 0;
 801230a:	2300      	movs	r3, #0
 801230c:	e02b      	b.n	8012366 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801230e:	79fb      	ldrb	r3, [r7, #7]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d018      	beq.n	8012346 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d013      	beq.n	8012342 <udp_input_local_match+0x86>
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d00f      	beq.n	8012342 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012322:	4b17      	ldr	r3, [pc, #92]	; (8012380 <udp_input_local_match+0xc4>)
 8012324:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801232a:	d00a      	beq.n	8012342 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	681a      	ldr	r2, [r3, #0]
 8012330:	4b13      	ldr	r3, [pc, #76]	; (8012380 <udp_input_local_match+0xc4>)
 8012332:	695b      	ldr	r3, [r3, #20]
 8012334:	405a      	eors	r2, r3
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	3308      	adds	r3, #8
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801233e:	2b00      	cmp	r3, #0
 8012340:	d110      	bne.n	8012364 <udp_input_local_match+0xa8>
          return 1;
 8012342:	2301      	movs	r3, #1
 8012344:	e00f      	b.n	8012366 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d009      	beq.n	8012360 <udp_input_local_match+0xa4>
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d005      	beq.n	8012360 <udp_input_local_match+0xa4>
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	681a      	ldr	r2, [r3, #0]
 8012358:	4b09      	ldr	r3, [pc, #36]	; (8012380 <udp_input_local_match+0xc4>)
 801235a:	695b      	ldr	r3, [r3, #20]
 801235c:	429a      	cmp	r2, r3
 801235e:	d101      	bne.n	8012364 <udp_input_local_match+0xa8>
        return 1;
 8012360:	2301      	movs	r3, #1
 8012362:	e000      	b.n	8012366 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012364:	2300      	movs	r3, #0
}
 8012366:	4618      	mov	r0, r3
 8012368:	3710      	adds	r7, #16
 801236a:	46bd      	mov	sp, r7
 801236c:	bd80      	pop	{r7, pc}
 801236e:	bf00      	nop
 8012370:	080162b4 	.word	0x080162b4
 8012374:	08016324 	.word	0x08016324
 8012378:	08016348 	.word	0x08016348
 801237c:	08016370 	.word	0x08016370
 8012380:	2400430c 	.word	0x2400430c

08012384 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012384:	b590      	push	{r4, r7, lr}
 8012386:	b08d      	sub	sp, #52	; 0x34
 8012388:	af02      	add	r7, sp, #8
 801238a:	6078      	str	r0, [r7, #4]
 801238c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801238e:	2300      	movs	r3, #0
 8012390:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d105      	bne.n	80123a4 <udp_input+0x20>
 8012398:	4b7c      	ldr	r3, [pc, #496]	; (801258c <udp_input+0x208>)
 801239a:	22cf      	movs	r2, #207	; 0xcf
 801239c:	497c      	ldr	r1, [pc, #496]	; (8012590 <udp_input+0x20c>)
 801239e:	487d      	ldr	r0, [pc, #500]	; (8012594 <udp_input+0x210>)
 80123a0:	f000 f97e 	bl	80126a0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d105      	bne.n	80123b6 <udp_input+0x32>
 80123aa:	4b78      	ldr	r3, [pc, #480]	; (801258c <udp_input+0x208>)
 80123ac:	22d0      	movs	r2, #208	; 0xd0
 80123ae:	497a      	ldr	r1, [pc, #488]	; (8012598 <udp_input+0x214>)
 80123b0:	4878      	ldr	r0, [pc, #480]	; (8012594 <udp_input+0x210>)
 80123b2:	f000 f975 	bl	80126a0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	895b      	ldrh	r3, [r3, #10]
 80123ba:	2b07      	cmp	r3, #7
 80123bc:	d803      	bhi.n	80123c6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f7f9 ff42 	bl	800c248 <pbuf_free>
    goto end;
 80123c4:	e0de      	b.n	8012584 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80123cc:	4b73      	ldr	r3, [pc, #460]	; (801259c <udp_input+0x218>)
 80123ce:	695b      	ldr	r3, [r3, #20]
 80123d0:	4a72      	ldr	r2, [pc, #456]	; (801259c <udp_input+0x218>)
 80123d2:	6812      	ldr	r2, [r2, #0]
 80123d4:	4611      	mov	r1, r2
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7f7 fcfe 	bl	8009dd8 <ip4_addr_isbroadcast_u32>
 80123dc:	4603      	mov	r3, r0
 80123de:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80123e0:	697b      	ldr	r3, [r7, #20]
 80123e2:	881b      	ldrh	r3, [r3, #0]
 80123e4:	b29b      	uxth	r3, r3
 80123e6:	4618      	mov	r0, r3
 80123e8:	f7f5 ff88 	bl	80082fc <lwip_htons>
 80123ec:	4603      	mov	r3, r0
 80123ee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80123f0:	697b      	ldr	r3, [r7, #20]
 80123f2:	885b      	ldrh	r3, [r3, #2]
 80123f4:	b29b      	uxth	r3, r3
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7f5 ff80 	bl	80082fc <lwip_htons>
 80123fc:	4603      	mov	r3, r0
 80123fe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012400:	2300      	movs	r3, #0
 8012402:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012404:	2300      	movs	r3, #0
 8012406:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012408:	2300      	movs	r3, #0
 801240a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801240c:	4b64      	ldr	r3, [pc, #400]	; (80125a0 <udp_input+0x21c>)
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	627b      	str	r3, [r7, #36]	; 0x24
 8012412:	e054      	b.n	80124be <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012416:	8a5b      	ldrh	r3, [r3, #18]
 8012418:	89fa      	ldrh	r2, [r7, #14]
 801241a:	429a      	cmp	r2, r3
 801241c:	d14a      	bne.n	80124b4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801241e:	7cfb      	ldrb	r3, [r7, #19]
 8012420:	461a      	mov	r2, r3
 8012422:	6839      	ldr	r1, [r7, #0]
 8012424:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012426:	f7ff ff49 	bl	80122bc <udp_input_local_match>
 801242a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801242c:	2b00      	cmp	r3, #0
 801242e:	d041      	beq.n	80124b4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012432:	7c1b      	ldrb	r3, [r3, #16]
 8012434:	f003 0304 	and.w	r3, r3, #4
 8012438:	2b00      	cmp	r3, #0
 801243a:	d11d      	bne.n	8012478 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801243c:	69fb      	ldr	r3, [r7, #28]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d102      	bne.n	8012448 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012444:	61fb      	str	r3, [r7, #28]
 8012446:	e017      	b.n	8012478 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012448:	7cfb      	ldrb	r3, [r7, #19]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d014      	beq.n	8012478 <udp_input+0xf4>
 801244e:	4b53      	ldr	r3, [pc, #332]	; (801259c <udp_input+0x218>)
 8012450:	695b      	ldr	r3, [r3, #20]
 8012452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012456:	d10f      	bne.n	8012478 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012458:	69fb      	ldr	r3, [r7, #28]
 801245a:	681a      	ldr	r2, [r3, #0]
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	3304      	adds	r3, #4
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	429a      	cmp	r2, r3
 8012464:	d008      	beq.n	8012478 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	3304      	adds	r3, #4
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	429a      	cmp	r2, r3
 8012472:	d101      	bne.n	8012478 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012476:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247a:	8a9b      	ldrh	r3, [r3, #20]
 801247c:	8a3a      	ldrh	r2, [r7, #16]
 801247e:	429a      	cmp	r2, r3
 8012480:	d118      	bne.n	80124b4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012484:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012486:	2b00      	cmp	r3, #0
 8012488:	d005      	beq.n	8012496 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248c:	685a      	ldr	r2, [r3, #4]
 801248e:	4b43      	ldr	r3, [pc, #268]	; (801259c <udp_input+0x218>)
 8012490:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012492:	429a      	cmp	r2, r3
 8012494:	d10e      	bne.n	80124b4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012496:	6a3b      	ldr	r3, [r7, #32]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d014      	beq.n	80124c6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249e:	68da      	ldr	r2, [r3, #12]
 80124a0:	6a3b      	ldr	r3, [r7, #32]
 80124a2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80124a4:	4b3e      	ldr	r3, [pc, #248]	; (80125a0 <udp_input+0x21c>)
 80124a6:	681a      	ldr	r2, [r3, #0]
 80124a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124aa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80124ac:	4a3c      	ldr	r2, [pc, #240]	; (80125a0 <udp_input+0x21c>)
 80124ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80124b2:	e008      	b.n	80124c6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80124b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80124b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ba:	68db      	ldr	r3, [r3, #12]
 80124bc:	627b      	str	r3, [r7, #36]	; 0x24
 80124be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d1a7      	bne.n	8012414 <udp_input+0x90>
 80124c4:	e000      	b.n	80124c8 <udp_input+0x144>
        break;
 80124c6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80124c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d101      	bne.n	80124d2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80124ce:	69fb      	ldr	r3, [r7, #28]
 80124d0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80124d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d002      	beq.n	80124de <udp_input+0x15a>
    for_us = 1;
 80124d8:	2301      	movs	r3, #1
 80124da:	76fb      	strb	r3, [r7, #27]
 80124dc:	e00a      	b.n	80124f4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	3304      	adds	r3, #4
 80124e2:	681a      	ldr	r2, [r3, #0]
 80124e4:	4b2d      	ldr	r3, [pc, #180]	; (801259c <udp_input+0x218>)
 80124e6:	695b      	ldr	r3, [r3, #20]
 80124e8:	429a      	cmp	r2, r3
 80124ea:	bf0c      	ite	eq
 80124ec:	2301      	moveq	r3, #1
 80124ee:	2300      	movne	r3, #0
 80124f0:	b2db      	uxtb	r3, r3
 80124f2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80124f4:	7efb      	ldrb	r3, [r7, #27]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d041      	beq.n	801257e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80124fa:	2108      	movs	r1, #8
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f7f9 fe1d 	bl	800c13c <pbuf_remove_header>
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	d00a      	beq.n	801251e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012508:	4b20      	ldr	r3, [pc, #128]	; (801258c <udp_input+0x208>)
 801250a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801250e:	4925      	ldr	r1, [pc, #148]	; (80125a4 <udp_input+0x220>)
 8012510:	4820      	ldr	r0, [pc, #128]	; (8012594 <udp_input+0x210>)
 8012512:	f000 f8c5 	bl	80126a0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f7f9 fe96 	bl	800c248 <pbuf_free>
      goto end;
 801251c:	e032      	b.n	8012584 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012520:	2b00      	cmp	r3, #0
 8012522:	d012      	beq.n	801254a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012526:	699b      	ldr	r3, [r3, #24]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d00a      	beq.n	8012542 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801252e:	699c      	ldr	r4, [r3, #24]
 8012530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012532:	69d8      	ldr	r0, [r3, #28]
 8012534:	8a3b      	ldrh	r3, [r7, #16]
 8012536:	9300      	str	r3, [sp, #0]
 8012538:	4b1b      	ldr	r3, [pc, #108]	; (80125a8 <udp_input+0x224>)
 801253a:	687a      	ldr	r2, [r7, #4]
 801253c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801253e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012540:	e021      	b.n	8012586 <udp_input+0x202>
        pbuf_free(p);
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f7f9 fe80 	bl	800c248 <pbuf_free>
        goto end;
 8012548:	e01c      	b.n	8012584 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801254a:	7cfb      	ldrb	r3, [r7, #19]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d112      	bne.n	8012576 <udp_input+0x1f2>
 8012550:	4b12      	ldr	r3, [pc, #72]	; (801259c <udp_input+0x218>)
 8012552:	695b      	ldr	r3, [r3, #20]
 8012554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012558:	2be0      	cmp	r3, #224	; 0xe0
 801255a:	d00c      	beq.n	8012576 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801255c:	4b0f      	ldr	r3, [pc, #60]	; (801259c <udp_input+0x218>)
 801255e:	899b      	ldrh	r3, [r3, #12]
 8012560:	3308      	adds	r3, #8
 8012562:	b29b      	uxth	r3, r3
 8012564:	b21b      	sxth	r3, r3
 8012566:	4619      	mov	r1, r3
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f7f9 fe5a 	bl	800c222 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801256e:	2103      	movs	r1, #3
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f7f7 f833 	bl	80095dc <icmp_dest_unreach>
      pbuf_free(p);
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	f7f9 fe66 	bl	800c248 <pbuf_free>
  return;
 801257c:	e003      	b.n	8012586 <udp_input+0x202>
    pbuf_free(p);
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f7f9 fe62 	bl	800c248 <pbuf_free>
  return;
 8012584:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012586:	372c      	adds	r7, #44	; 0x2c
 8012588:	46bd      	mov	sp, r7
 801258a:	bd90      	pop	{r4, r7, pc}
 801258c:	080162b4 	.word	0x080162b4
 8012590:	08016398 	.word	0x08016398
 8012594:	08016348 	.word	0x08016348
 8012598:	080163b0 	.word	0x080163b0
 801259c:	2400430c 	.word	0x2400430c
 80125a0:	2400748c 	.word	0x2400748c
 80125a4:	080163cc 	.word	0x080163cc
 80125a8:	2400431c 	.word	0x2400431c

080125ac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b085      	sub	sp, #20
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d01e      	beq.n	80125fa <udp_netif_ip_addr_changed+0x4e>
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d01a      	beq.n	80125fa <udp_netif_ip_addr_changed+0x4e>
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d017      	beq.n	80125fa <udp_netif_ip_addr_changed+0x4e>
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d013      	beq.n	80125fa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80125d2:	4b0d      	ldr	r3, [pc, #52]	; (8012608 <udp_netif_ip_addr_changed+0x5c>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	60fb      	str	r3, [r7, #12]
 80125d8:	e00c      	b.n	80125f4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	681a      	ldr	r2, [r3, #0]
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d103      	bne.n	80125ee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	681a      	ldr	r2, [r3, #0]
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	68db      	ldr	r3, [r3, #12]
 80125f2:	60fb      	str	r3, [r7, #12]
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d1ef      	bne.n	80125da <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80125fa:	bf00      	nop
 80125fc:	3714      	adds	r7, #20
 80125fe:	46bd      	mov	sp, r7
 8012600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012604:	4770      	bx	lr
 8012606:	bf00      	nop
 8012608:	2400748c 	.word	0x2400748c

0801260c <__libc_init_array>:
 801260c:	b570      	push	{r4, r5, r6, lr}
 801260e:	4d0d      	ldr	r5, [pc, #52]	; (8012644 <__libc_init_array+0x38>)
 8012610:	4c0d      	ldr	r4, [pc, #52]	; (8012648 <__libc_init_array+0x3c>)
 8012612:	1b64      	subs	r4, r4, r5
 8012614:	10a4      	asrs	r4, r4, #2
 8012616:	2600      	movs	r6, #0
 8012618:	42a6      	cmp	r6, r4
 801261a:	d109      	bne.n	8012630 <__libc_init_array+0x24>
 801261c:	4d0b      	ldr	r5, [pc, #44]	; (801264c <__libc_init_array+0x40>)
 801261e:	4c0c      	ldr	r4, [pc, #48]	; (8012650 <__libc_init_array+0x44>)
 8012620:	f001 f88e 	bl	8013740 <_init>
 8012624:	1b64      	subs	r4, r4, r5
 8012626:	10a4      	asrs	r4, r4, #2
 8012628:	2600      	movs	r6, #0
 801262a:	42a6      	cmp	r6, r4
 801262c:	d105      	bne.n	801263a <__libc_init_array+0x2e>
 801262e:	bd70      	pop	{r4, r5, r6, pc}
 8012630:	f855 3b04 	ldr.w	r3, [r5], #4
 8012634:	4798      	blx	r3
 8012636:	3601      	adds	r6, #1
 8012638:	e7ee      	b.n	8012618 <__libc_init_array+0xc>
 801263a:	f855 3b04 	ldr.w	r3, [r5], #4
 801263e:	4798      	blx	r3
 8012640:	3601      	adds	r6, #1
 8012642:	e7f2      	b.n	801262a <__libc_init_array+0x1e>
 8012644:	080168e8 	.word	0x080168e8
 8012648:	080168e8 	.word	0x080168e8
 801264c:	080168e8 	.word	0x080168e8
 8012650:	080168ec 	.word	0x080168ec

08012654 <memcmp>:
 8012654:	b510      	push	{r4, lr}
 8012656:	3901      	subs	r1, #1
 8012658:	4402      	add	r2, r0
 801265a:	4290      	cmp	r0, r2
 801265c:	d101      	bne.n	8012662 <memcmp+0xe>
 801265e:	2000      	movs	r0, #0
 8012660:	e005      	b.n	801266e <memcmp+0x1a>
 8012662:	7803      	ldrb	r3, [r0, #0]
 8012664:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012668:	42a3      	cmp	r3, r4
 801266a:	d001      	beq.n	8012670 <memcmp+0x1c>
 801266c:	1b18      	subs	r0, r3, r4
 801266e:	bd10      	pop	{r4, pc}
 8012670:	3001      	adds	r0, #1
 8012672:	e7f2      	b.n	801265a <memcmp+0x6>

08012674 <memcpy>:
 8012674:	440a      	add	r2, r1
 8012676:	4291      	cmp	r1, r2
 8012678:	f100 33ff 	add.w	r3, r0, #4294967295
 801267c:	d100      	bne.n	8012680 <memcpy+0xc>
 801267e:	4770      	bx	lr
 8012680:	b510      	push	{r4, lr}
 8012682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012686:	f803 4f01 	strb.w	r4, [r3, #1]!
 801268a:	4291      	cmp	r1, r2
 801268c:	d1f9      	bne.n	8012682 <memcpy+0xe>
 801268e:	bd10      	pop	{r4, pc}

08012690 <memset>:
 8012690:	4402      	add	r2, r0
 8012692:	4603      	mov	r3, r0
 8012694:	4293      	cmp	r3, r2
 8012696:	d100      	bne.n	801269a <memset+0xa>
 8012698:	4770      	bx	lr
 801269a:	f803 1b01 	strb.w	r1, [r3], #1
 801269e:	e7f9      	b.n	8012694 <memset+0x4>

080126a0 <iprintf>:
 80126a0:	b40f      	push	{r0, r1, r2, r3}
 80126a2:	4b0a      	ldr	r3, [pc, #40]	; (80126cc <iprintf+0x2c>)
 80126a4:	b513      	push	{r0, r1, r4, lr}
 80126a6:	681c      	ldr	r4, [r3, #0]
 80126a8:	b124      	cbz	r4, 80126b4 <iprintf+0x14>
 80126aa:	69a3      	ldr	r3, [r4, #24]
 80126ac:	b913      	cbnz	r3, 80126b4 <iprintf+0x14>
 80126ae:	4620      	mov	r0, r4
 80126b0:	f000 f8c2 	bl	8012838 <__sinit>
 80126b4:	ab05      	add	r3, sp, #20
 80126b6:	9a04      	ldr	r2, [sp, #16]
 80126b8:	68a1      	ldr	r1, [r4, #8]
 80126ba:	9301      	str	r3, [sp, #4]
 80126bc:	4620      	mov	r0, r4
 80126be:	f000 fa7f 	bl	8012bc0 <_vfiprintf_r>
 80126c2:	b002      	add	sp, #8
 80126c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126c8:	b004      	add	sp, #16
 80126ca:	4770      	bx	lr
 80126cc:	24000034 	.word	0x24000034

080126d0 <rand>:
 80126d0:	4b16      	ldr	r3, [pc, #88]	; (801272c <rand+0x5c>)
 80126d2:	b510      	push	{r4, lr}
 80126d4:	681c      	ldr	r4, [r3, #0]
 80126d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80126d8:	b9b3      	cbnz	r3, 8012708 <rand+0x38>
 80126da:	2018      	movs	r0, #24
 80126dc:	f000 f95e 	bl	801299c <malloc>
 80126e0:	63a0      	str	r0, [r4, #56]	; 0x38
 80126e2:	b928      	cbnz	r0, 80126f0 <rand+0x20>
 80126e4:	4602      	mov	r2, r0
 80126e6:	4b12      	ldr	r3, [pc, #72]	; (8012730 <rand+0x60>)
 80126e8:	4812      	ldr	r0, [pc, #72]	; (8012734 <rand+0x64>)
 80126ea:	214e      	movs	r1, #78	; 0x4e
 80126ec:	f000 f82e 	bl	801274c <__assert_func>
 80126f0:	4a11      	ldr	r2, [pc, #68]	; (8012738 <rand+0x68>)
 80126f2:	4b12      	ldr	r3, [pc, #72]	; (801273c <rand+0x6c>)
 80126f4:	e9c0 2300 	strd	r2, r3, [r0]
 80126f8:	4b11      	ldr	r3, [pc, #68]	; (8012740 <rand+0x70>)
 80126fa:	6083      	str	r3, [r0, #8]
 80126fc:	230b      	movs	r3, #11
 80126fe:	8183      	strh	r3, [r0, #12]
 8012700:	2201      	movs	r2, #1
 8012702:	2300      	movs	r3, #0
 8012704:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012708:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801270a:	4a0e      	ldr	r2, [pc, #56]	; (8012744 <rand+0x74>)
 801270c:	6920      	ldr	r0, [r4, #16]
 801270e:	6963      	ldr	r3, [r4, #20]
 8012710:	490d      	ldr	r1, [pc, #52]	; (8012748 <rand+0x78>)
 8012712:	4342      	muls	r2, r0
 8012714:	fb01 2203 	mla	r2, r1, r3, r2
 8012718:	fba0 0101 	umull	r0, r1, r0, r1
 801271c:	1c43      	adds	r3, r0, #1
 801271e:	eb42 0001 	adc.w	r0, r2, r1
 8012722:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8012726:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801272a:	bd10      	pop	{r4, pc}
 801272c:	24000034 	.word	0x24000034
 8012730:	080167a4 	.word	0x080167a4
 8012734:	080167bb 	.word	0x080167bb
 8012738:	abcd330e 	.word	0xabcd330e
 801273c:	e66d1234 	.word	0xe66d1234
 8012740:	0005deec 	.word	0x0005deec
 8012744:	5851f42d 	.word	0x5851f42d
 8012748:	4c957f2d 	.word	0x4c957f2d

0801274c <__assert_func>:
 801274c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801274e:	4614      	mov	r4, r2
 8012750:	461a      	mov	r2, r3
 8012752:	4b09      	ldr	r3, [pc, #36]	; (8012778 <__assert_func+0x2c>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	4605      	mov	r5, r0
 8012758:	68d8      	ldr	r0, [r3, #12]
 801275a:	b14c      	cbz	r4, 8012770 <__assert_func+0x24>
 801275c:	4b07      	ldr	r3, [pc, #28]	; (801277c <__assert_func+0x30>)
 801275e:	9100      	str	r1, [sp, #0]
 8012760:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012764:	4906      	ldr	r1, [pc, #24]	; (8012780 <__assert_func+0x34>)
 8012766:	462b      	mov	r3, r5
 8012768:	f000 f8e4 	bl	8012934 <fiprintf>
 801276c:	f000 fe12 	bl	8013394 <abort>
 8012770:	4b04      	ldr	r3, [pc, #16]	; (8012784 <__assert_func+0x38>)
 8012772:	461c      	mov	r4, r3
 8012774:	e7f3      	b.n	801275e <__assert_func+0x12>
 8012776:	bf00      	nop
 8012778:	24000034 	.word	0x24000034
 801277c:	08016816 	.word	0x08016816
 8012780:	08016823 	.word	0x08016823
 8012784:	08016851 	.word	0x08016851

08012788 <std>:
 8012788:	2300      	movs	r3, #0
 801278a:	b510      	push	{r4, lr}
 801278c:	4604      	mov	r4, r0
 801278e:	e9c0 3300 	strd	r3, r3, [r0]
 8012792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012796:	6083      	str	r3, [r0, #8]
 8012798:	8181      	strh	r1, [r0, #12]
 801279a:	6643      	str	r3, [r0, #100]	; 0x64
 801279c:	81c2      	strh	r2, [r0, #14]
 801279e:	6183      	str	r3, [r0, #24]
 80127a0:	4619      	mov	r1, r3
 80127a2:	2208      	movs	r2, #8
 80127a4:	305c      	adds	r0, #92	; 0x5c
 80127a6:	f7ff ff73 	bl	8012690 <memset>
 80127aa:	4b05      	ldr	r3, [pc, #20]	; (80127c0 <std+0x38>)
 80127ac:	6263      	str	r3, [r4, #36]	; 0x24
 80127ae:	4b05      	ldr	r3, [pc, #20]	; (80127c4 <std+0x3c>)
 80127b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80127b2:	4b05      	ldr	r3, [pc, #20]	; (80127c8 <std+0x40>)
 80127b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80127b6:	4b05      	ldr	r3, [pc, #20]	; (80127cc <std+0x44>)
 80127b8:	6224      	str	r4, [r4, #32]
 80127ba:	6323      	str	r3, [r4, #48]	; 0x30
 80127bc:	bd10      	pop	{r4, pc}
 80127be:	bf00      	nop
 80127c0:	08013169 	.word	0x08013169
 80127c4:	0801318b 	.word	0x0801318b
 80127c8:	080131c3 	.word	0x080131c3
 80127cc:	080131e7 	.word	0x080131e7

080127d0 <_cleanup_r>:
 80127d0:	4901      	ldr	r1, [pc, #4]	; (80127d8 <_cleanup_r+0x8>)
 80127d2:	f000 b8c1 	b.w	8012958 <_fwalk_reent>
 80127d6:	bf00      	nop
 80127d8:	080134d1 	.word	0x080134d1

080127dc <__sfmoreglue>:
 80127dc:	b570      	push	{r4, r5, r6, lr}
 80127de:	2268      	movs	r2, #104	; 0x68
 80127e0:	1e4d      	subs	r5, r1, #1
 80127e2:	4355      	muls	r5, r2
 80127e4:	460e      	mov	r6, r1
 80127e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80127ea:	f000 f94b 	bl	8012a84 <_malloc_r>
 80127ee:	4604      	mov	r4, r0
 80127f0:	b140      	cbz	r0, 8012804 <__sfmoreglue+0x28>
 80127f2:	2100      	movs	r1, #0
 80127f4:	e9c0 1600 	strd	r1, r6, [r0]
 80127f8:	300c      	adds	r0, #12
 80127fa:	60a0      	str	r0, [r4, #8]
 80127fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012800:	f7ff ff46 	bl	8012690 <memset>
 8012804:	4620      	mov	r0, r4
 8012806:	bd70      	pop	{r4, r5, r6, pc}

08012808 <__sfp_lock_acquire>:
 8012808:	4801      	ldr	r0, [pc, #4]	; (8012810 <__sfp_lock_acquire+0x8>)
 801280a:	f000 b8c5 	b.w	8012998 <__retarget_lock_acquire_recursive>
 801280e:	bf00      	nop
 8012810:	24007491 	.word	0x24007491

08012814 <__sfp_lock_release>:
 8012814:	4801      	ldr	r0, [pc, #4]	; (801281c <__sfp_lock_release+0x8>)
 8012816:	f000 b8c0 	b.w	801299a <__retarget_lock_release_recursive>
 801281a:	bf00      	nop
 801281c:	24007491 	.word	0x24007491

08012820 <__sinit_lock_acquire>:
 8012820:	4801      	ldr	r0, [pc, #4]	; (8012828 <__sinit_lock_acquire+0x8>)
 8012822:	f000 b8b9 	b.w	8012998 <__retarget_lock_acquire_recursive>
 8012826:	bf00      	nop
 8012828:	24007492 	.word	0x24007492

0801282c <__sinit_lock_release>:
 801282c:	4801      	ldr	r0, [pc, #4]	; (8012834 <__sinit_lock_release+0x8>)
 801282e:	f000 b8b4 	b.w	801299a <__retarget_lock_release_recursive>
 8012832:	bf00      	nop
 8012834:	24007492 	.word	0x24007492

08012838 <__sinit>:
 8012838:	b510      	push	{r4, lr}
 801283a:	4604      	mov	r4, r0
 801283c:	f7ff fff0 	bl	8012820 <__sinit_lock_acquire>
 8012840:	69a3      	ldr	r3, [r4, #24]
 8012842:	b11b      	cbz	r3, 801284c <__sinit+0x14>
 8012844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012848:	f7ff bff0 	b.w	801282c <__sinit_lock_release>
 801284c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012850:	6523      	str	r3, [r4, #80]	; 0x50
 8012852:	4b13      	ldr	r3, [pc, #76]	; (80128a0 <__sinit+0x68>)
 8012854:	4a13      	ldr	r2, [pc, #76]	; (80128a4 <__sinit+0x6c>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	62a2      	str	r2, [r4, #40]	; 0x28
 801285a:	42a3      	cmp	r3, r4
 801285c:	bf04      	itt	eq
 801285e:	2301      	moveq	r3, #1
 8012860:	61a3      	streq	r3, [r4, #24]
 8012862:	4620      	mov	r0, r4
 8012864:	f000 f820 	bl	80128a8 <__sfp>
 8012868:	6060      	str	r0, [r4, #4]
 801286a:	4620      	mov	r0, r4
 801286c:	f000 f81c 	bl	80128a8 <__sfp>
 8012870:	60a0      	str	r0, [r4, #8]
 8012872:	4620      	mov	r0, r4
 8012874:	f000 f818 	bl	80128a8 <__sfp>
 8012878:	2200      	movs	r2, #0
 801287a:	60e0      	str	r0, [r4, #12]
 801287c:	2104      	movs	r1, #4
 801287e:	6860      	ldr	r0, [r4, #4]
 8012880:	f7ff ff82 	bl	8012788 <std>
 8012884:	68a0      	ldr	r0, [r4, #8]
 8012886:	2201      	movs	r2, #1
 8012888:	2109      	movs	r1, #9
 801288a:	f7ff ff7d 	bl	8012788 <std>
 801288e:	68e0      	ldr	r0, [r4, #12]
 8012890:	2202      	movs	r2, #2
 8012892:	2112      	movs	r1, #18
 8012894:	f7ff ff78 	bl	8012788 <std>
 8012898:	2301      	movs	r3, #1
 801289a:	61a3      	str	r3, [r4, #24]
 801289c:	e7d2      	b.n	8012844 <__sinit+0xc>
 801289e:	bf00      	nop
 80128a0:	080167a0 	.word	0x080167a0
 80128a4:	080127d1 	.word	0x080127d1

080128a8 <__sfp>:
 80128a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128aa:	4607      	mov	r7, r0
 80128ac:	f7ff ffac 	bl	8012808 <__sfp_lock_acquire>
 80128b0:	4b1e      	ldr	r3, [pc, #120]	; (801292c <__sfp+0x84>)
 80128b2:	681e      	ldr	r6, [r3, #0]
 80128b4:	69b3      	ldr	r3, [r6, #24]
 80128b6:	b913      	cbnz	r3, 80128be <__sfp+0x16>
 80128b8:	4630      	mov	r0, r6
 80128ba:	f7ff ffbd 	bl	8012838 <__sinit>
 80128be:	3648      	adds	r6, #72	; 0x48
 80128c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80128c4:	3b01      	subs	r3, #1
 80128c6:	d503      	bpl.n	80128d0 <__sfp+0x28>
 80128c8:	6833      	ldr	r3, [r6, #0]
 80128ca:	b30b      	cbz	r3, 8012910 <__sfp+0x68>
 80128cc:	6836      	ldr	r6, [r6, #0]
 80128ce:	e7f7      	b.n	80128c0 <__sfp+0x18>
 80128d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80128d4:	b9d5      	cbnz	r5, 801290c <__sfp+0x64>
 80128d6:	4b16      	ldr	r3, [pc, #88]	; (8012930 <__sfp+0x88>)
 80128d8:	60e3      	str	r3, [r4, #12]
 80128da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80128de:	6665      	str	r5, [r4, #100]	; 0x64
 80128e0:	f000 f859 	bl	8012996 <__retarget_lock_init_recursive>
 80128e4:	f7ff ff96 	bl	8012814 <__sfp_lock_release>
 80128e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80128ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80128f0:	6025      	str	r5, [r4, #0]
 80128f2:	61a5      	str	r5, [r4, #24]
 80128f4:	2208      	movs	r2, #8
 80128f6:	4629      	mov	r1, r5
 80128f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80128fc:	f7ff fec8 	bl	8012690 <memset>
 8012900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012908:	4620      	mov	r0, r4
 801290a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801290c:	3468      	adds	r4, #104	; 0x68
 801290e:	e7d9      	b.n	80128c4 <__sfp+0x1c>
 8012910:	2104      	movs	r1, #4
 8012912:	4638      	mov	r0, r7
 8012914:	f7ff ff62 	bl	80127dc <__sfmoreglue>
 8012918:	4604      	mov	r4, r0
 801291a:	6030      	str	r0, [r6, #0]
 801291c:	2800      	cmp	r0, #0
 801291e:	d1d5      	bne.n	80128cc <__sfp+0x24>
 8012920:	f7ff ff78 	bl	8012814 <__sfp_lock_release>
 8012924:	230c      	movs	r3, #12
 8012926:	603b      	str	r3, [r7, #0]
 8012928:	e7ee      	b.n	8012908 <__sfp+0x60>
 801292a:	bf00      	nop
 801292c:	080167a0 	.word	0x080167a0
 8012930:	ffff0001 	.word	0xffff0001

08012934 <fiprintf>:
 8012934:	b40e      	push	{r1, r2, r3}
 8012936:	b503      	push	{r0, r1, lr}
 8012938:	4601      	mov	r1, r0
 801293a:	ab03      	add	r3, sp, #12
 801293c:	4805      	ldr	r0, [pc, #20]	; (8012954 <fiprintf+0x20>)
 801293e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012942:	6800      	ldr	r0, [r0, #0]
 8012944:	9301      	str	r3, [sp, #4]
 8012946:	f000 f93b 	bl	8012bc0 <_vfiprintf_r>
 801294a:	b002      	add	sp, #8
 801294c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012950:	b003      	add	sp, #12
 8012952:	4770      	bx	lr
 8012954:	24000034 	.word	0x24000034

08012958 <_fwalk_reent>:
 8012958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801295c:	4606      	mov	r6, r0
 801295e:	4688      	mov	r8, r1
 8012960:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012964:	2700      	movs	r7, #0
 8012966:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801296a:	f1b9 0901 	subs.w	r9, r9, #1
 801296e:	d505      	bpl.n	801297c <_fwalk_reent+0x24>
 8012970:	6824      	ldr	r4, [r4, #0]
 8012972:	2c00      	cmp	r4, #0
 8012974:	d1f7      	bne.n	8012966 <_fwalk_reent+0xe>
 8012976:	4638      	mov	r0, r7
 8012978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801297c:	89ab      	ldrh	r3, [r5, #12]
 801297e:	2b01      	cmp	r3, #1
 8012980:	d907      	bls.n	8012992 <_fwalk_reent+0x3a>
 8012982:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012986:	3301      	adds	r3, #1
 8012988:	d003      	beq.n	8012992 <_fwalk_reent+0x3a>
 801298a:	4629      	mov	r1, r5
 801298c:	4630      	mov	r0, r6
 801298e:	47c0      	blx	r8
 8012990:	4307      	orrs	r7, r0
 8012992:	3568      	adds	r5, #104	; 0x68
 8012994:	e7e9      	b.n	801296a <_fwalk_reent+0x12>

08012996 <__retarget_lock_init_recursive>:
 8012996:	4770      	bx	lr

08012998 <__retarget_lock_acquire_recursive>:
 8012998:	4770      	bx	lr

0801299a <__retarget_lock_release_recursive>:
 801299a:	4770      	bx	lr

0801299c <malloc>:
 801299c:	4b02      	ldr	r3, [pc, #8]	; (80129a8 <malloc+0xc>)
 801299e:	4601      	mov	r1, r0
 80129a0:	6818      	ldr	r0, [r3, #0]
 80129a2:	f000 b86f 	b.w	8012a84 <_malloc_r>
 80129a6:	bf00      	nop
 80129a8:	24000034 	.word	0x24000034

080129ac <_free_r>:
 80129ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129ae:	2900      	cmp	r1, #0
 80129b0:	d044      	beq.n	8012a3c <_free_r+0x90>
 80129b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129b6:	9001      	str	r0, [sp, #4]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	f1a1 0404 	sub.w	r4, r1, #4
 80129be:	bfb8      	it	lt
 80129c0:	18e4      	addlt	r4, r4, r3
 80129c2:	f000 fe39 	bl	8013638 <__malloc_lock>
 80129c6:	4a1e      	ldr	r2, [pc, #120]	; (8012a40 <_free_r+0x94>)
 80129c8:	9801      	ldr	r0, [sp, #4]
 80129ca:	6813      	ldr	r3, [r2, #0]
 80129cc:	b933      	cbnz	r3, 80129dc <_free_r+0x30>
 80129ce:	6063      	str	r3, [r4, #4]
 80129d0:	6014      	str	r4, [r2, #0]
 80129d2:	b003      	add	sp, #12
 80129d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80129d8:	f000 be34 	b.w	8013644 <__malloc_unlock>
 80129dc:	42a3      	cmp	r3, r4
 80129de:	d908      	bls.n	80129f2 <_free_r+0x46>
 80129e0:	6825      	ldr	r5, [r4, #0]
 80129e2:	1961      	adds	r1, r4, r5
 80129e4:	428b      	cmp	r3, r1
 80129e6:	bf01      	itttt	eq
 80129e8:	6819      	ldreq	r1, [r3, #0]
 80129ea:	685b      	ldreq	r3, [r3, #4]
 80129ec:	1949      	addeq	r1, r1, r5
 80129ee:	6021      	streq	r1, [r4, #0]
 80129f0:	e7ed      	b.n	80129ce <_free_r+0x22>
 80129f2:	461a      	mov	r2, r3
 80129f4:	685b      	ldr	r3, [r3, #4]
 80129f6:	b10b      	cbz	r3, 80129fc <_free_r+0x50>
 80129f8:	42a3      	cmp	r3, r4
 80129fa:	d9fa      	bls.n	80129f2 <_free_r+0x46>
 80129fc:	6811      	ldr	r1, [r2, #0]
 80129fe:	1855      	adds	r5, r2, r1
 8012a00:	42a5      	cmp	r5, r4
 8012a02:	d10b      	bne.n	8012a1c <_free_r+0x70>
 8012a04:	6824      	ldr	r4, [r4, #0]
 8012a06:	4421      	add	r1, r4
 8012a08:	1854      	adds	r4, r2, r1
 8012a0a:	42a3      	cmp	r3, r4
 8012a0c:	6011      	str	r1, [r2, #0]
 8012a0e:	d1e0      	bne.n	80129d2 <_free_r+0x26>
 8012a10:	681c      	ldr	r4, [r3, #0]
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	6053      	str	r3, [r2, #4]
 8012a16:	4421      	add	r1, r4
 8012a18:	6011      	str	r1, [r2, #0]
 8012a1a:	e7da      	b.n	80129d2 <_free_r+0x26>
 8012a1c:	d902      	bls.n	8012a24 <_free_r+0x78>
 8012a1e:	230c      	movs	r3, #12
 8012a20:	6003      	str	r3, [r0, #0]
 8012a22:	e7d6      	b.n	80129d2 <_free_r+0x26>
 8012a24:	6825      	ldr	r5, [r4, #0]
 8012a26:	1961      	adds	r1, r4, r5
 8012a28:	428b      	cmp	r3, r1
 8012a2a:	bf04      	itt	eq
 8012a2c:	6819      	ldreq	r1, [r3, #0]
 8012a2e:	685b      	ldreq	r3, [r3, #4]
 8012a30:	6063      	str	r3, [r4, #4]
 8012a32:	bf04      	itt	eq
 8012a34:	1949      	addeq	r1, r1, r5
 8012a36:	6021      	streq	r1, [r4, #0]
 8012a38:	6054      	str	r4, [r2, #4]
 8012a3a:	e7ca      	b.n	80129d2 <_free_r+0x26>
 8012a3c:	b003      	add	sp, #12
 8012a3e:	bd30      	pop	{r4, r5, pc}
 8012a40:	24007494 	.word	0x24007494

08012a44 <sbrk_aligned>:
 8012a44:	b570      	push	{r4, r5, r6, lr}
 8012a46:	4e0e      	ldr	r6, [pc, #56]	; (8012a80 <sbrk_aligned+0x3c>)
 8012a48:	460c      	mov	r4, r1
 8012a4a:	6831      	ldr	r1, [r6, #0]
 8012a4c:	4605      	mov	r5, r0
 8012a4e:	b911      	cbnz	r1, 8012a56 <sbrk_aligned+0x12>
 8012a50:	f000 fb7a 	bl	8013148 <_sbrk_r>
 8012a54:	6030      	str	r0, [r6, #0]
 8012a56:	4621      	mov	r1, r4
 8012a58:	4628      	mov	r0, r5
 8012a5a:	f000 fb75 	bl	8013148 <_sbrk_r>
 8012a5e:	1c43      	adds	r3, r0, #1
 8012a60:	d00a      	beq.n	8012a78 <sbrk_aligned+0x34>
 8012a62:	1cc4      	adds	r4, r0, #3
 8012a64:	f024 0403 	bic.w	r4, r4, #3
 8012a68:	42a0      	cmp	r0, r4
 8012a6a:	d007      	beq.n	8012a7c <sbrk_aligned+0x38>
 8012a6c:	1a21      	subs	r1, r4, r0
 8012a6e:	4628      	mov	r0, r5
 8012a70:	f000 fb6a 	bl	8013148 <_sbrk_r>
 8012a74:	3001      	adds	r0, #1
 8012a76:	d101      	bne.n	8012a7c <sbrk_aligned+0x38>
 8012a78:	f04f 34ff 	mov.w	r4, #4294967295
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	bd70      	pop	{r4, r5, r6, pc}
 8012a80:	24007498 	.word	0x24007498

08012a84 <_malloc_r>:
 8012a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a88:	1ccd      	adds	r5, r1, #3
 8012a8a:	f025 0503 	bic.w	r5, r5, #3
 8012a8e:	3508      	adds	r5, #8
 8012a90:	2d0c      	cmp	r5, #12
 8012a92:	bf38      	it	cc
 8012a94:	250c      	movcc	r5, #12
 8012a96:	2d00      	cmp	r5, #0
 8012a98:	4607      	mov	r7, r0
 8012a9a:	db01      	blt.n	8012aa0 <_malloc_r+0x1c>
 8012a9c:	42a9      	cmp	r1, r5
 8012a9e:	d905      	bls.n	8012aac <_malloc_r+0x28>
 8012aa0:	230c      	movs	r3, #12
 8012aa2:	603b      	str	r3, [r7, #0]
 8012aa4:	2600      	movs	r6, #0
 8012aa6:	4630      	mov	r0, r6
 8012aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aac:	4e2e      	ldr	r6, [pc, #184]	; (8012b68 <_malloc_r+0xe4>)
 8012aae:	f000 fdc3 	bl	8013638 <__malloc_lock>
 8012ab2:	6833      	ldr	r3, [r6, #0]
 8012ab4:	461c      	mov	r4, r3
 8012ab6:	bb34      	cbnz	r4, 8012b06 <_malloc_r+0x82>
 8012ab8:	4629      	mov	r1, r5
 8012aba:	4638      	mov	r0, r7
 8012abc:	f7ff ffc2 	bl	8012a44 <sbrk_aligned>
 8012ac0:	1c43      	adds	r3, r0, #1
 8012ac2:	4604      	mov	r4, r0
 8012ac4:	d14d      	bne.n	8012b62 <_malloc_r+0xde>
 8012ac6:	6834      	ldr	r4, [r6, #0]
 8012ac8:	4626      	mov	r6, r4
 8012aca:	2e00      	cmp	r6, #0
 8012acc:	d140      	bne.n	8012b50 <_malloc_r+0xcc>
 8012ace:	6823      	ldr	r3, [r4, #0]
 8012ad0:	4631      	mov	r1, r6
 8012ad2:	4638      	mov	r0, r7
 8012ad4:	eb04 0803 	add.w	r8, r4, r3
 8012ad8:	f000 fb36 	bl	8013148 <_sbrk_r>
 8012adc:	4580      	cmp	r8, r0
 8012ade:	d13a      	bne.n	8012b56 <_malloc_r+0xd2>
 8012ae0:	6821      	ldr	r1, [r4, #0]
 8012ae2:	3503      	adds	r5, #3
 8012ae4:	1a6d      	subs	r5, r5, r1
 8012ae6:	f025 0503 	bic.w	r5, r5, #3
 8012aea:	3508      	adds	r5, #8
 8012aec:	2d0c      	cmp	r5, #12
 8012aee:	bf38      	it	cc
 8012af0:	250c      	movcc	r5, #12
 8012af2:	4629      	mov	r1, r5
 8012af4:	4638      	mov	r0, r7
 8012af6:	f7ff ffa5 	bl	8012a44 <sbrk_aligned>
 8012afa:	3001      	adds	r0, #1
 8012afc:	d02b      	beq.n	8012b56 <_malloc_r+0xd2>
 8012afe:	6823      	ldr	r3, [r4, #0]
 8012b00:	442b      	add	r3, r5
 8012b02:	6023      	str	r3, [r4, #0]
 8012b04:	e00e      	b.n	8012b24 <_malloc_r+0xa0>
 8012b06:	6822      	ldr	r2, [r4, #0]
 8012b08:	1b52      	subs	r2, r2, r5
 8012b0a:	d41e      	bmi.n	8012b4a <_malloc_r+0xc6>
 8012b0c:	2a0b      	cmp	r2, #11
 8012b0e:	d916      	bls.n	8012b3e <_malloc_r+0xba>
 8012b10:	1961      	adds	r1, r4, r5
 8012b12:	42a3      	cmp	r3, r4
 8012b14:	6025      	str	r5, [r4, #0]
 8012b16:	bf18      	it	ne
 8012b18:	6059      	strne	r1, [r3, #4]
 8012b1a:	6863      	ldr	r3, [r4, #4]
 8012b1c:	bf08      	it	eq
 8012b1e:	6031      	streq	r1, [r6, #0]
 8012b20:	5162      	str	r2, [r4, r5]
 8012b22:	604b      	str	r3, [r1, #4]
 8012b24:	4638      	mov	r0, r7
 8012b26:	f104 060b 	add.w	r6, r4, #11
 8012b2a:	f000 fd8b 	bl	8013644 <__malloc_unlock>
 8012b2e:	f026 0607 	bic.w	r6, r6, #7
 8012b32:	1d23      	adds	r3, r4, #4
 8012b34:	1af2      	subs	r2, r6, r3
 8012b36:	d0b6      	beq.n	8012aa6 <_malloc_r+0x22>
 8012b38:	1b9b      	subs	r3, r3, r6
 8012b3a:	50a3      	str	r3, [r4, r2]
 8012b3c:	e7b3      	b.n	8012aa6 <_malloc_r+0x22>
 8012b3e:	6862      	ldr	r2, [r4, #4]
 8012b40:	42a3      	cmp	r3, r4
 8012b42:	bf0c      	ite	eq
 8012b44:	6032      	streq	r2, [r6, #0]
 8012b46:	605a      	strne	r2, [r3, #4]
 8012b48:	e7ec      	b.n	8012b24 <_malloc_r+0xa0>
 8012b4a:	4623      	mov	r3, r4
 8012b4c:	6864      	ldr	r4, [r4, #4]
 8012b4e:	e7b2      	b.n	8012ab6 <_malloc_r+0x32>
 8012b50:	4634      	mov	r4, r6
 8012b52:	6876      	ldr	r6, [r6, #4]
 8012b54:	e7b9      	b.n	8012aca <_malloc_r+0x46>
 8012b56:	230c      	movs	r3, #12
 8012b58:	603b      	str	r3, [r7, #0]
 8012b5a:	4638      	mov	r0, r7
 8012b5c:	f000 fd72 	bl	8013644 <__malloc_unlock>
 8012b60:	e7a1      	b.n	8012aa6 <_malloc_r+0x22>
 8012b62:	6025      	str	r5, [r4, #0]
 8012b64:	e7de      	b.n	8012b24 <_malloc_r+0xa0>
 8012b66:	bf00      	nop
 8012b68:	24007494 	.word	0x24007494

08012b6c <__sfputc_r>:
 8012b6c:	6893      	ldr	r3, [r2, #8]
 8012b6e:	3b01      	subs	r3, #1
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	b410      	push	{r4}
 8012b74:	6093      	str	r3, [r2, #8]
 8012b76:	da08      	bge.n	8012b8a <__sfputc_r+0x1e>
 8012b78:	6994      	ldr	r4, [r2, #24]
 8012b7a:	42a3      	cmp	r3, r4
 8012b7c:	db01      	blt.n	8012b82 <__sfputc_r+0x16>
 8012b7e:	290a      	cmp	r1, #10
 8012b80:	d103      	bne.n	8012b8a <__sfputc_r+0x1e>
 8012b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b86:	f000 bb33 	b.w	80131f0 <__swbuf_r>
 8012b8a:	6813      	ldr	r3, [r2, #0]
 8012b8c:	1c58      	adds	r0, r3, #1
 8012b8e:	6010      	str	r0, [r2, #0]
 8012b90:	7019      	strb	r1, [r3, #0]
 8012b92:	4608      	mov	r0, r1
 8012b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b98:	4770      	bx	lr

08012b9a <__sfputs_r>:
 8012b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b9c:	4606      	mov	r6, r0
 8012b9e:	460f      	mov	r7, r1
 8012ba0:	4614      	mov	r4, r2
 8012ba2:	18d5      	adds	r5, r2, r3
 8012ba4:	42ac      	cmp	r4, r5
 8012ba6:	d101      	bne.n	8012bac <__sfputs_r+0x12>
 8012ba8:	2000      	movs	r0, #0
 8012baa:	e007      	b.n	8012bbc <__sfputs_r+0x22>
 8012bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bb0:	463a      	mov	r2, r7
 8012bb2:	4630      	mov	r0, r6
 8012bb4:	f7ff ffda 	bl	8012b6c <__sfputc_r>
 8012bb8:	1c43      	adds	r3, r0, #1
 8012bba:	d1f3      	bne.n	8012ba4 <__sfputs_r+0xa>
 8012bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012bc0 <_vfiprintf_r>:
 8012bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bc4:	460d      	mov	r5, r1
 8012bc6:	b09d      	sub	sp, #116	; 0x74
 8012bc8:	4614      	mov	r4, r2
 8012bca:	4698      	mov	r8, r3
 8012bcc:	4606      	mov	r6, r0
 8012bce:	b118      	cbz	r0, 8012bd8 <_vfiprintf_r+0x18>
 8012bd0:	6983      	ldr	r3, [r0, #24]
 8012bd2:	b90b      	cbnz	r3, 8012bd8 <_vfiprintf_r+0x18>
 8012bd4:	f7ff fe30 	bl	8012838 <__sinit>
 8012bd8:	4b89      	ldr	r3, [pc, #548]	; (8012e00 <_vfiprintf_r+0x240>)
 8012bda:	429d      	cmp	r5, r3
 8012bdc:	d11b      	bne.n	8012c16 <_vfiprintf_r+0x56>
 8012bde:	6875      	ldr	r5, [r6, #4]
 8012be0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012be2:	07d9      	lsls	r1, r3, #31
 8012be4:	d405      	bmi.n	8012bf2 <_vfiprintf_r+0x32>
 8012be6:	89ab      	ldrh	r3, [r5, #12]
 8012be8:	059a      	lsls	r2, r3, #22
 8012bea:	d402      	bmi.n	8012bf2 <_vfiprintf_r+0x32>
 8012bec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012bee:	f7ff fed3 	bl	8012998 <__retarget_lock_acquire_recursive>
 8012bf2:	89ab      	ldrh	r3, [r5, #12]
 8012bf4:	071b      	lsls	r3, r3, #28
 8012bf6:	d501      	bpl.n	8012bfc <_vfiprintf_r+0x3c>
 8012bf8:	692b      	ldr	r3, [r5, #16]
 8012bfa:	b9eb      	cbnz	r3, 8012c38 <_vfiprintf_r+0x78>
 8012bfc:	4629      	mov	r1, r5
 8012bfe:	4630      	mov	r0, r6
 8012c00:	f000 fb5a 	bl	80132b8 <__swsetup_r>
 8012c04:	b1c0      	cbz	r0, 8012c38 <_vfiprintf_r+0x78>
 8012c06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c08:	07dc      	lsls	r4, r3, #31
 8012c0a:	d50e      	bpl.n	8012c2a <_vfiprintf_r+0x6a>
 8012c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c10:	b01d      	add	sp, #116	; 0x74
 8012c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c16:	4b7b      	ldr	r3, [pc, #492]	; (8012e04 <_vfiprintf_r+0x244>)
 8012c18:	429d      	cmp	r5, r3
 8012c1a:	d101      	bne.n	8012c20 <_vfiprintf_r+0x60>
 8012c1c:	68b5      	ldr	r5, [r6, #8]
 8012c1e:	e7df      	b.n	8012be0 <_vfiprintf_r+0x20>
 8012c20:	4b79      	ldr	r3, [pc, #484]	; (8012e08 <_vfiprintf_r+0x248>)
 8012c22:	429d      	cmp	r5, r3
 8012c24:	bf08      	it	eq
 8012c26:	68f5      	ldreq	r5, [r6, #12]
 8012c28:	e7da      	b.n	8012be0 <_vfiprintf_r+0x20>
 8012c2a:	89ab      	ldrh	r3, [r5, #12]
 8012c2c:	0598      	lsls	r0, r3, #22
 8012c2e:	d4ed      	bmi.n	8012c0c <_vfiprintf_r+0x4c>
 8012c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c32:	f7ff feb2 	bl	801299a <__retarget_lock_release_recursive>
 8012c36:	e7e9      	b.n	8012c0c <_vfiprintf_r+0x4c>
 8012c38:	2300      	movs	r3, #0
 8012c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8012c3c:	2320      	movs	r3, #32
 8012c3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c42:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c46:	2330      	movs	r3, #48	; 0x30
 8012c48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012e0c <_vfiprintf_r+0x24c>
 8012c4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c50:	f04f 0901 	mov.w	r9, #1
 8012c54:	4623      	mov	r3, r4
 8012c56:	469a      	mov	sl, r3
 8012c58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c5c:	b10a      	cbz	r2, 8012c62 <_vfiprintf_r+0xa2>
 8012c5e:	2a25      	cmp	r2, #37	; 0x25
 8012c60:	d1f9      	bne.n	8012c56 <_vfiprintf_r+0x96>
 8012c62:	ebba 0b04 	subs.w	fp, sl, r4
 8012c66:	d00b      	beq.n	8012c80 <_vfiprintf_r+0xc0>
 8012c68:	465b      	mov	r3, fp
 8012c6a:	4622      	mov	r2, r4
 8012c6c:	4629      	mov	r1, r5
 8012c6e:	4630      	mov	r0, r6
 8012c70:	f7ff ff93 	bl	8012b9a <__sfputs_r>
 8012c74:	3001      	adds	r0, #1
 8012c76:	f000 80aa 	beq.w	8012dce <_vfiprintf_r+0x20e>
 8012c7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c7c:	445a      	add	r2, fp
 8012c7e:	9209      	str	r2, [sp, #36]	; 0x24
 8012c80:	f89a 3000 	ldrb.w	r3, [sl]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	f000 80a2 	beq.w	8012dce <_vfiprintf_r+0x20e>
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8012c90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c94:	f10a 0a01 	add.w	sl, sl, #1
 8012c98:	9304      	str	r3, [sp, #16]
 8012c9a:	9307      	str	r3, [sp, #28]
 8012c9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ca0:	931a      	str	r3, [sp, #104]	; 0x68
 8012ca2:	4654      	mov	r4, sl
 8012ca4:	2205      	movs	r2, #5
 8012ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012caa:	4858      	ldr	r0, [pc, #352]	; (8012e0c <_vfiprintf_r+0x24c>)
 8012cac:	f7ed fb18 	bl	80002e0 <memchr>
 8012cb0:	9a04      	ldr	r2, [sp, #16]
 8012cb2:	b9d8      	cbnz	r0, 8012cec <_vfiprintf_r+0x12c>
 8012cb4:	06d1      	lsls	r1, r2, #27
 8012cb6:	bf44      	itt	mi
 8012cb8:	2320      	movmi	r3, #32
 8012cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cbe:	0713      	lsls	r3, r2, #28
 8012cc0:	bf44      	itt	mi
 8012cc2:	232b      	movmi	r3, #43	; 0x2b
 8012cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8012ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8012cce:	d015      	beq.n	8012cfc <_vfiprintf_r+0x13c>
 8012cd0:	9a07      	ldr	r2, [sp, #28]
 8012cd2:	4654      	mov	r4, sl
 8012cd4:	2000      	movs	r0, #0
 8012cd6:	f04f 0c0a 	mov.w	ip, #10
 8012cda:	4621      	mov	r1, r4
 8012cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ce0:	3b30      	subs	r3, #48	; 0x30
 8012ce2:	2b09      	cmp	r3, #9
 8012ce4:	d94e      	bls.n	8012d84 <_vfiprintf_r+0x1c4>
 8012ce6:	b1b0      	cbz	r0, 8012d16 <_vfiprintf_r+0x156>
 8012ce8:	9207      	str	r2, [sp, #28]
 8012cea:	e014      	b.n	8012d16 <_vfiprintf_r+0x156>
 8012cec:	eba0 0308 	sub.w	r3, r0, r8
 8012cf0:	fa09 f303 	lsl.w	r3, r9, r3
 8012cf4:	4313      	orrs	r3, r2
 8012cf6:	9304      	str	r3, [sp, #16]
 8012cf8:	46a2      	mov	sl, r4
 8012cfa:	e7d2      	b.n	8012ca2 <_vfiprintf_r+0xe2>
 8012cfc:	9b03      	ldr	r3, [sp, #12]
 8012cfe:	1d19      	adds	r1, r3, #4
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	9103      	str	r1, [sp, #12]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	bfbb      	ittet	lt
 8012d08:	425b      	neglt	r3, r3
 8012d0a:	f042 0202 	orrlt.w	r2, r2, #2
 8012d0e:	9307      	strge	r3, [sp, #28]
 8012d10:	9307      	strlt	r3, [sp, #28]
 8012d12:	bfb8      	it	lt
 8012d14:	9204      	strlt	r2, [sp, #16]
 8012d16:	7823      	ldrb	r3, [r4, #0]
 8012d18:	2b2e      	cmp	r3, #46	; 0x2e
 8012d1a:	d10c      	bne.n	8012d36 <_vfiprintf_r+0x176>
 8012d1c:	7863      	ldrb	r3, [r4, #1]
 8012d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8012d20:	d135      	bne.n	8012d8e <_vfiprintf_r+0x1ce>
 8012d22:	9b03      	ldr	r3, [sp, #12]
 8012d24:	1d1a      	adds	r2, r3, #4
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	9203      	str	r2, [sp, #12]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	bfb8      	it	lt
 8012d2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012d32:	3402      	adds	r4, #2
 8012d34:	9305      	str	r3, [sp, #20]
 8012d36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012e1c <_vfiprintf_r+0x25c>
 8012d3a:	7821      	ldrb	r1, [r4, #0]
 8012d3c:	2203      	movs	r2, #3
 8012d3e:	4650      	mov	r0, sl
 8012d40:	f7ed face 	bl	80002e0 <memchr>
 8012d44:	b140      	cbz	r0, 8012d58 <_vfiprintf_r+0x198>
 8012d46:	2340      	movs	r3, #64	; 0x40
 8012d48:	eba0 000a 	sub.w	r0, r0, sl
 8012d4c:	fa03 f000 	lsl.w	r0, r3, r0
 8012d50:	9b04      	ldr	r3, [sp, #16]
 8012d52:	4303      	orrs	r3, r0
 8012d54:	3401      	adds	r4, #1
 8012d56:	9304      	str	r3, [sp, #16]
 8012d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d5c:	482c      	ldr	r0, [pc, #176]	; (8012e10 <_vfiprintf_r+0x250>)
 8012d5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d62:	2206      	movs	r2, #6
 8012d64:	f7ed fabc 	bl	80002e0 <memchr>
 8012d68:	2800      	cmp	r0, #0
 8012d6a:	d03f      	beq.n	8012dec <_vfiprintf_r+0x22c>
 8012d6c:	4b29      	ldr	r3, [pc, #164]	; (8012e14 <_vfiprintf_r+0x254>)
 8012d6e:	bb1b      	cbnz	r3, 8012db8 <_vfiprintf_r+0x1f8>
 8012d70:	9b03      	ldr	r3, [sp, #12]
 8012d72:	3307      	adds	r3, #7
 8012d74:	f023 0307 	bic.w	r3, r3, #7
 8012d78:	3308      	adds	r3, #8
 8012d7a:	9303      	str	r3, [sp, #12]
 8012d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d7e:	443b      	add	r3, r7
 8012d80:	9309      	str	r3, [sp, #36]	; 0x24
 8012d82:	e767      	b.n	8012c54 <_vfiprintf_r+0x94>
 8012d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d88:	460c      	mov	r4, r1
 8012d8a:	2001      	movs	r0, #1
 8012d8c:	e7a5      	b.n	8012cda <_vfiprintf_r+0x11a>
 8012d8e:	2300      	movs	r3, #0
 8012d90:	3401      	adds	r4, #1
 8012d92:	9305      	str	r3, [sp, #20]
 8012d94:	4619      	mov	r1, r3
 8012d96:	f04f 0c0a 	mov.w	ip, #10
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012da0:	3a30      	subs	r2, #48	; 0x30
 8012da2:	2a09      	cmp	r2, #9
 8012da4:	d903      	bls.n	8012dae <_vfiprintf_r+0x1ee>
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d0c5      	beq.n	8012d36 <_vfiprintf_r+0x176>
 8012daa:	9105      	str	r1, [sp, #20]
 8012dac:	e7c3      	b.n	8012d36 <_vfiprintf_r+0x176>
 8012dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8012db2:	4604      	mov	r4, r0
 8012db4:	2301      	movs	r3, #1
 8012db6:	e7f0      	b.n	8012d9a <_vfiprintf_r+0x1da>
 8012db8:	ab03      	add	r3, sp, #12
 8012dba:	9300      	str	r3, [sp, #0]
 8012dbc:	462a      	mov	r2, r5
 8012dbe:	4b16      	ldr	r3, [pc, #88]	; (8012e18 <_vfiprintf_r+0x258>)
 8012dc0:	a904      	add	r1, sp, #16
 8012dc2:	4630      	mov	r0, r6
 8012dc4:	f3af 8000 	nop.w
 8012dc8:	4607      	mov	r7, r0
 8012dca:	1c78      	adds	r0, r7, #1
 8012dcc:	d1d6      	bne.n	8012d7c <_vfiprintf_r+0x1bc>
 8012dce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012dd0:	07d9      	lsls	r1, r3, #31
 8012dd2:	d405      	bmi.n	8012de0 <_vfiprintf_r+0x220>
 8012dd4:	89ab      	ldrh	r3, [r5, #12]
 8012dd6:	059a      	lsls	r2, r3, #22
 8012dd8:	d402      	bmi.n	8012de0 <_vfiprintf_r+0x220>
 8012dda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ddc:	f7ff fddd 	bl	801299a <__retarget_lock_release_recursive>
 8012de0:	89ab      	ldrh	r3, [r5, #12]
 8012de2:	065b      	lsls	r3, r3, #25
 8012de4:	f53f af12 	bmi.w	8012c0c <_vfiprintf_r+0x4c>
 8012de8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012dea:	e711      	b.n	8012c10 <_vfiprintf_r+0x50>
 8012dec:	ab03      	add	r3, sp, #12
 8012dee:	9300      	str	r3, [sp, #0]
 8012df0:	462a      	mov	r2, r5
 8012df2:	4b09      	ldr	r3, [pc, #36]	; (8012e18 <_vfiprintf_r+0x258>)
 8012df4:	a904      	add	r1, sp, #16
 8012df6:	4630      	mov	r0, r6
 8012df8:	f000 f880 	bl	8012efc <_printf_i>
 8012dfc:	e7e4      	b.n	8012dc8 <_vfiprintf_r+0x208>
 8012dfe:	bf00      	nop
 8012e00:	08016874 	.word	0x08016874
 8012e04:	08016894 	.word	0x08016894
 8012e08:	08016854 	.word	0x08016854
 8012e0c:	080168b4 	.word	0x080168b4
 8012e10:	080168be 	.word	0x080168be
 8012e14:	00000000 	.word	0x00000000
 8012e18:	08012b9b 	.word	0x08012b9b
 8012e1c:	080168ba 	.word	0x080168ba

08012e20 <_printf_common>:
 8012e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e24:	4616      	mov	r6, r2
 8012e26:	4699      	mov	r9, r3
 8012e28:	688a      	ldr	r2, [r1, #8]
 8012e2a:	690b      	ldr	r3, [r1, #16]
 8012e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012e30:	4293      	cmp	r3, r2
 8012e32:	bfb8      	it	lt
 8012e34:	4613      	movlt	r3, r2
 8012e36:	6033      	str	r3, [r6, #0]
 8012e38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012e3c:	4607      	mov	r7, r0
 8012e3e:	460c      	mov	r4, r1
 8012e40:	b10a      	cbz	r2, 8012e46 <_printf_common+0x26>
 8012e42:	3301      	adds	r3, #1
 8012e44:	6033      	str	r3, [r6, #0]
 8012e46:	6823      	ldr	r3, [r4, #0]
 8012e48:	0699      	lsls	r1, r3, #26
 8012e4a:	bf42      	ittt	mi
 8012e4c:	6833      	ldrmi	r3, [r6, #0]
 8012e4e:	3302      	addmi	r3, #2
 8012e50:	6033      	strmi	r3, [r6, #0]
 8012e52:	6825      	ldr	r5, [r4, #0]
 8012e54:	f015 0506 	ands.w	r5, r5, #6
 8012e58:	d106      	bne.n	8012e68 <_printf_common+0x48>
 8012e5a:	f104 0a19 	add.w	sl, r4, #25
 8012e5e:	68e3      	ldr	r3, [r4, #12]
 8012e60:	6832      	ldr	r2, [r6, #0]
 8012e62:	1a9b      	subs	r3, r3, r2
 8012e64:	42ab      	cmp	r3, r5
 8012e66:	dc26      	bgt.n	8012eb6 <_printf_common+0x96>
 8012e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012e6c:	1e13      	subs	r3, r2, #0
 8012e6e:	6822      	ldr	r2, [r4, #0]
 8012e70:	bf18      	it	ne
 8012e72:	2301      	movne	r3, #1
 8012e74:	0692      	lsls	r2, r2, #26
 8012e76:	d42b      	bmi.n	8012ed0 <_printf_common+0xb0>
 8012e78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e7c:	4649      	mov	r1, r9
 8012e7e:	4638      	mov	r0, r7
 8012e80:	47c0      	blx	r8
 8012e82:	3001      	adds	r0, #1
 8012e84:	d01e      	beq.n	8012ec4 <_printf_common+0xa4>
 8012e86:	6823      	ldr	r3, [r4, #0]
 8012e88:	68e5      	ldr	r5, [r4, #12]
 8012e8a:	6832      	ldr	r2, [r6, #0]
 8012e8c:	f003 0306 	and.w	r3, r3, #6
 8012e90:	2b04      	cmp	r3, #4
 8012e92:	bf08      	it	eq
 8012e94:	1aad      	subeq	r5, r5, r2
 8012e96:	68a3      	ldr	r3, [r4, #8]
 8012e98:	6922      	ldr	r2, [r4, #16]
 8012e9a:	bf0c      	ite	eq
 8012e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012ea0:	2500      	movne	r5, #0
 8012ea2:	4293      	cmp	r3, r2
 8012ea4:	bfc4      	itt	gt
 8012ea6:	1a9b      	subgt	r3, r3, r2
 8012ea8:	18ed      	addgt	r5, r5, r3
 8012eaa:	2600      	movs	r6, #0
 8012eac:	341a      	adds	r4, #26
 8012eae:	42b5      	cmp	r5, r6
 8012eb0:	d11a      	bne.n	8012ee8 <_printf_common+0xc8>
 8012eb2:	2000      	movs	r0, #0
 8012eb4:	e008      	b.n	8012ec8 <_printf_common+0xa8>
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	4652      	mov	r2, sl
 8012eba:	4649      	mov	r1, r9
 8012ebc:	4638      	mov	r0, r7
 8012ebe:	47c0      	blx	r8
 8012ec0:	3001      	adds	r0, #1
 8012ec2:	d103      	bne.n	8012ecc <_printf_common+0xac>
 8012ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ecc:	3501      	adds	r5, #1
 8012ece:	e7c6      	b.n	8012e5e <_printf_common+0x3e>
 8012ed0:	18e1      	adds	r1, r4, r3
 8012ed2:	1c5a      	adds	r2, r3, #1
 8012ed4:	2030      	movs	r0, #48	; 0x30
 8012ed6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012eda:	4422      	add	r2, r4
 8012edc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012ee0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ee4:	3302      	adds	r3, #2
 8012ee6:	e7c7      	b.n	8012e78 <_printf_common+0x58>
 8012ee8:	2301      	movs	r3, #1
 8012eea:	4622      	mov	r2, r4
 8012eec:	4649      	mov	r1, r9
 8012eee:	4638      	mov	r0, r7
 8012ef0:	47c0      	blx	r8
 8012ef2:	3001      	adds	r0, #1
 8012ef4:	d0e6      	beq.n	8012ec4 <_printf_common+0xa4>
 8012ef6:	3601      	adds	r6, #1
 8012ef8:	e7d9      	b.n	8012eae <_printf_common+0x8e>
	...

08012efc <_printf_i>:
 8012efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f00:	7e0f      	ldrb	r7, [r1, #24]
 8012f02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012f04:	2f78      	cmp	r7, #120	; 0x78
 8012f06:	4691      	mov	r9, r2
 8012f08:	4680      	mov	r8, r0
 8012f0a:	460c      	mov	r4, r1
 8012f0c:	469a      	mov	sl, r3
 8012f0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012f12:	d807      	bhi.n	8012f24 <_printf_i+0x28>
 8012f14:	2f62      	cmp	r7, #98	; 0x62
 8012f16:	d80a      	bhi.n	8012f2e <_printf_i+0x32>
 8012f18:	2f00      	cmp	r7, #0
 8012f1a:	f000 80d8 	beq.w	80130ce <_printf_i+0x1d2>
 8012f1e:	2f58      	cmp	r7, #88	; 0x58
 8012f20:	f000 80a3 	beq.w	801306a <_printf_i+0x16e>
 8012f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012f2c:	e03a      	b.n	8012fa4 <_printf_i+0xa8>
 8012f2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012f32:	2b15      	cmp	r3, #21
 8012f34:	d8f6      	bhi.n	8012f24 <_printf_i+0x28>
 8012f36:	a101      	add	r1, pc, #4	; (adr r1, 8012f3c <_printf_i+0x40>)
 8012f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012f3c:	08012f95 	.word	0x08012f95
 8012f40:	08012fa9 	.word	0x08012fa9
 8012f44:	08012f25 	.word	0x08012f25
 8012f48:	08012f25 	.word	0x08012f25
 8012f4c:	08012f25 	.word	0x08012f25
 8012f50:	08012f25 	.word	0x08012f25
 8012f54:	08012fa9 	.word	0x08012fa9
 8012f58:	08012f25 	.word	0x08012f25
 8012f5c:	08012f25 	.word	0x08012f25
 8012f60:	08012f25 	.word	0x08012f25
 8012f64:	08012f25 	.word	0x08012f25
 8012f68:	080130b5 	.word	0x080130b5
 8012f6c:	08012fd9 	.word	0x08012fd9
 8012f70:	08013097 	.word	0x08013097
 8012f74:	08012f25 	.word	0x08012f25
 8012f78:	08012f25 	.word	0x08012f25
 8012f7c:	080130d7 	.word	0x080130d7
 8012f80:	08012f25 	.word	0x08012f25
 8012f84:	08012fd9 	.word	0x08012fd9
 8012f88:	08012f25 	.word	0x08012f25
 8012f8c:	08012f25 	.word	0x08012f25
 8012f90:	0801309f 	.word	0x0801309f
 8012f94:	682b      	ldr	r3, [r5, #0]
 8012f96:	1d1a      	adds	r2, r3, #4
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	602a      	str	r2, [r5, #0]
 8012f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	e0a3      	b.n	80130f0 <_printf_i+0x1f4>
 8012fa8:	6820      	ldr	r0, [r4, #0]
 8012faa:	6829      	ldr	r1, [r5, #0]
 8012fac:	0606      	lsls	r6, r0, #24
 8012fae:	f101 0304 	add.w	r3, r1, #4
 8012fb2:	d50a      	bpl.n	8012fca <_printf_i+0xce>
 8012fb4:	680e      	ldr	r6, [r1, #0]
 8012fb6:	602b      	str	r3, [r5, #0]
 8012fb8:	2e00      	cmp	r6, #0
 8012fba:	da03      	bge.n	8012fc4 <_printf_i+0xc8>
 8012fbc:	232d      	movs	r3, #45	; 0x2d
 8012fbe:	4276      	negs	r6, r6
 8012fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fc4:	485e      	ldr	r0, [pc, #376]	; (8013140 <_printf_i+0x244>)
 8012fc6:	230a      	movs	r3, #10
 8012fc8:	e019      	b.n	8012ffe <_printf_i+0x102>
 8012fca:	680e      	ldr	r6, [r1, #0]
 8012fcc:	602b      	str	r3, [r5, #0]
 8012fce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012fd2:	bf18      	it	ne
 8012fd4:	b236      	sxthne	r6, r6
 8012fd6:	e7ef      	b.n	8012fb8 <_printf_i+0xbc>
 8012fd8:	682b      	ldr	r3, [r5, #0]
 8012fda:	6820      	ldr	r0, [r4, #0]
 8012fdc:	1d19      	adds	r1, r3, #4
 8012fde:	6029      	str	r1, [r5, #0]
 8012fe0:	0601      	lsls	r1, r0, #24
 8012fe2:	d501      	bpl.n	8012fe8 <_printf_i+0xec>
 8012fe4:	681e      	ldr	r6, [r3, #0]
 8012fe6:	e002      	b.n	8012fee <_printf_i+0xf2>
 8012fe8:	0646      	lsls	r6, r0, #25
 8012fea:	d5fb      	bpl.n	8012fe4 <_printf_i+0xe8>
 8012fec:	881e      	ldrh	r6, [r3, #0]
 8012fee:	4854      	ldr	r0, [pc, #336]	; (8013140 <_printf_i+0x244>)
 8012ff0:	2f6f      	cmp	r7, #111	; 0x6f
 8012ff2:	bf0c      	ite	eq
 8012ff4:	2308      	moveq	r3, #8
 8012ff6:	230a      	movne	r3, #10
 8012ff8:	2100      	movs	r1, #0
 8012ffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012ffe:	6865      	ldr	r5, [r4, #4]
 8013000:	60a5      	str	r5, [r4, #8]
 8013002:	2d00      	cmp	r5, #0
 8013004:	bfa2      	ittt	ge
 8013006:	6821      	ldrge	r1, [r4, #0]
 8013008:	f021 0104 	bicge.w	r1, r1, #4
 801300c:	6021      	strge	r1, [r4, #0]
 801300e:	b90e      	cbnz	r6, 8013014 <_printf_i+0x118>
 8013010:	2d00      	cmp	r5, #0
 8013012:	d04d      	beq.n	80130b0 <_printf_i+0x1b4>
 8013014:	4615      	mov	r5, r2
 8013016:	fbb6 f1f3 	udiv	r1, r6, r3
 801301a:	fb03 6711 	mls	r7, r3, r1, r6
 801301e:	5dc7      	ldrb	r7, [r0, r7]
 8013020:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013024:	4637      	mov	r7, r6
 8013026:	42bb      	cmp	r3, r7
 8013028:	460e      	mov	r6, r1
 801302a:	d9f4      	bls.n	8013016 <_printf_i+0x11a>
 801302c:	2b08      	cmp	r3, #8
 801302e:	d10b      	bne.n	8013048 <_printf_i+0x14c>
 8013030:	6823      	ldr	r3, [r4, #0]
 8013032:	07de      	lsls	r6, r3, #31
 8013034:	d508      	bpl.n	8013048 <_printf_i+0x14c>
 8013036:	6923      	ldr	r3, [r4, #16]
 8013038:	6861      	ldr	r1, [r4, #4]
 801303a:	4299      	cmp	r1, r3
 801303c:	bfde      	ittt	le
 801303e:	2330      	movle	r3, #48	; 0x30
 8013040:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013044:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013048:	1b52      	subs	r2, r2, r5
 801304a:	6122      	str	r2, [r4, #16]
 801304c:	f8cd a000 	str.w	sl, [sp]
 8013050:	464b      	mov	r3, r9
 8013052:	aa03      	add	r2, sp, #12
 8013054:	4621      	mov	r1, r4
 8013056:	4640      	mov	r0, r8
 8013058:	f7ff fee2 	bl	8012e20 <_printf_common>
 801305c:	3001      	adds	r0, #1
 801305e:	d14c      	bne.n	80130fa <_printf_i+0x1fe>
 8013060:	f04f 30ff 	mov.w	r0, #4294967295
 8013064:	b004      	add	sp, #16
 8013066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801306a:	4835      	ldr	r0, [pc, #212]	; (8013140 <_printf_i+0x244>)
 801306c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013070:	6829      	ldr	r1, [r5, #0]
 8013072:	6823      	ldr	r3, [r4, #0]
 8013074:	f851 6b04 	ldr.w	r6, [r1], #4
 8013078:	6029      	str	r1, [r5, #0]
 801307a:	061d      	lsls	r5, r3, #24
 801307c:	d514      	bpl.n	80130a8 <_printf_i+0x1ac>
 801307e:	07df      	lsls	r7, r3, #31
 8013080:	bf44      	itt	mi
 8013082:	f043 0320 	orrmi.w	r3, r3, #32
 8013086:	6023      	strmi	r3, [r4, #0]
 8013088:	b91e      	cbnz	r6, 8013092 <_printf_i+0x196>
 801308a:	6823      	ldr	r3, [r4, #0]
 801308c:	f023 0320 	bic.w	r3, r3, #32
 8013090:	6023      	str	r3, [r4, #0]
 8013092:	2310      	movs	r3, #16
 8013094:	e7b0      	b.n	8012ff8 <_printf_i+0xfc>
 8013096:	6823      	ldr	r3, [r4, #0]
 8013098:	f043 0320 	orr.w	r3, r3, #32
 801309c:	6023      	str	r3, [r4, #0]
 801309e:	2378      	movs	r3, #120	; 0x78
 80130a0:	4828      	ldr	r0, [pc, #160]	; (8013144 <_printf_i+0x248>)
 80130a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80130a6:	e7e3      	b.n	8013070 <_printf_i+0x174>
 80130a8:	0659      	lsls	r1, r3, #25
 80130aa:	bf48      	it	mi
 80130ac:	b2b6      	uxthmi	r6, r6
 80130ae:	e7e6      	b.n	801307e <_printf_i+0x182>
 80130b0:	4615      	mov	r5, r2
 80130b2:	e7bb      	b.n	801302c <_printf_i+0x130>
 80130b4:	682b      	ldr	r3, [r5, #0]
 80130b6:	6826      	ldr	r6, [r4, #0]
 80130b8:	6961      	ldr	r1, [r4, #20]
 80130ba:	1d18      	adds	r0, r3, #4
 80130bc:	6028      	str	r0, [r5, #0]
 80130be:	0635      	lsls	r5, r6, #24
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	d501      	bpl.n	80130c8 <_printf_i+0x1cc>
 80130c4:	6019      	str	r1, [r3, #0]
 80130c6:	e002      	b.n	80130ce <_printf_i+0x1d2>
 80130c8:	0670      	lsls	r0, r6, #25
 80130ca:	d5fb      	bpl.n	80130c4 <_printf_i+0x1c8>
 80130cc:	8019      	strh	r1, [r3, #0]
 80130ce:	2300      	movs	r3, #0
 80130d0:	6123      	str	r3, [r4, #16]
 80130d2:	4615      	mov	r5, r2
 80130d4:	e7ba      	b.n	801304c <_printf_i+0x150>
 80130d6:	682b      	ldr	r3, [r5, #0]
 80130d8:	1d1a      	adds	r2, r3, #4
 80130da:	602a      	str	r2, [r5, #0]
 80130dc:	681d      	ldr	r5, [r3, #0]
 80130de:	6862      	ldr	r2, [r4, #4]
 80130e0:	2100      	movs	r1, #0
 80130e2:	4628      	mov	r0, r5
 80130e4:	f7ed f8fc 	bl	80002e0 <memchr>
 80130e8:	b108      	cbz	r0, 80130ee <_printf_i+0x1f2>
 80130ea:	1b40      	subs	r0, r0, r5
 80130ec:	6060      	str	r0, [r4, #4]
 80130ee:	6863      	ldr	r3, [r4, #4]
 80130f0:	6123      	str	r3, [r4, #16]
 80130f2:	2300      	movs	r3, #0
 80130f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130f8:	e7a8      	b.n	801304c <_printf_i+0x150>
 80130fa:	6923      	ldr	r3, [r4, #16]
 80130fc:	462a      	mov	r2, r5
 80130fe:	4649      	mov	r1, r9
 8013100:	4640      	mov	r0, r8
 8013102:	47d0      	blx	sl
 8013104:	3001      	adds	r0, #1
 8013106:	d0ab      	beq.n	8013060 <_printf_i+0x164>
 8013108:	6823      	ldr	r3, [r4, #0]
 801310a:	079b      	lsls	r3, r3, #30
 801310c:	d413      	bmi.n	8013136 <_printf_i+0x23a>
 801310e:	68e0      	ldr	r0, [r4, #12]
 8013110:	9b03      	ldr	r3, [sp, #12]
 8013112:	4298      	cmp	r0, r3
 8013114:	bfb8      	it	lt
 8013116:	4618      	movlt	r0, r3
 8013118:	e7a4      	b.n	8013064 <_printf_i+0x168>
 801311a:	2301      	movs	r3, #1
 801311c:	4632      	mov	r2, r6
 801311e:	4649      	mov	r1, r9
 8013120:	4640      	mov	r0, r8
 8013122:	47d0      	blx	sl
 8013124:	3001      	adds	r0, #1
 8013126:	d09b      	beq.n	8013060 <_printf_i+0x164>
 8013128:	3501      	adds	r5, #1
 801312a:	68e3      	ldr	r3, [r4, #12]
 801312c:	9903      	ldr	r1, [sp, #12]
 801312e:	1a5b      	subs	r3, r3, r1
 8013130:	42ab      	cmp	r3, r5
 8013132:	dcf2      	bgt.n	801311a <_printf_i+0x21e>
 8013134:	e7eb      	b.n	801310e <_printf_i+0x212>
 8013136:	2500      	movs	r5, #0
 8013138:	f104 0619 	add.w	r6, r4, #25
 801313c:	e7f5      	b.n	801312a <_printf_i+0x22e>
 801313e:	bf00      	nop
 8013140:	080168c5 	.word	0x080168c5
 8013144:	080168d6 	.word	0x080168d6

08013148 <_sbrk_r>:
 8013148:	b538      	push	{r3, r4, r5, lr}
 801314a:	4d06      	ldr	r5, [pc, #24]	; (8013164 <_sbrk_r+0x1c>)
 801314c:	2300      	movs	r3, #0
 801314e:	4604      	mov	r4, r0
 8013150:	4608      	mov	r0, r1
 8013152:	602b      	str	r3, [r5, #0]
 8013154:	f7ed fd3e 	bl	8000bd4 <_sbrk>
 8013158:	1c43      	adds	r3, r0, #1
 801315a:	d102      	bne.n	8013162 <_sbrk_r+0x1a>
 801315c:	682b      	ldr	r3, [r5, #0]
 801315e:	b103      	cbz	r3, 8013162 <_sbrk_r+0x1a>
 8013160:	6023      	str	r3, [r4, #0]
 8013162:	bd38      	pop	{r3, r4, r5, pc}
 8013164:	24007418 	.word	0x24007418

08013168 <__sread>:
 8013168:	b510      	push	{r4, lr}
 801316a:	460c      	mov	r4, r1
 801316c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013170:	f000 fa6e 	bl	8013650 <_read_r>
 8013174:	2800      	cmp	r0, #0
 8013176:	bfab      	itete	ge
 8013178:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801317a:	89a3      	ldrhlt	r3, [r4, #12]
 801317c:	181b      	addge	r3, r3, r0
 801317e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013182:	bfac      	ite	ge
 8013184:	6563      	strge	r3, [r4, #84]	; 0x54
 8013186:	81a3      	strhlt	r3, [r4, #12]
 8013188:	bd10      	pop	{r4, pc}

0801318a <__swrite>:
 801318a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801318e:	461f      	mov	r7, r3
 8013190:	898b      	ldrh	r3, [r1, #12]
 8013192:	05db      	lsls	r3, r3, #23
 8013194:	4605      	mov	r5, r0
 8013196:	460c      	mov	r4, r1
 8013198:	4616      	mov	r6, r2
 801319a:	d505      	bpl.n	80131a8 <__swrite+0x1e>
 801319c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131a0:	2302      	movs	r3, #2
 80131a2:	2200      	movs	r2, #0
 80131a4:	f000 f9d0 	bl	8013548 <_lseek_r>
 80131a8:	89a3      	ldrh	r3, [r4, #12]
 80131aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80131ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80131b2:	81a3      	strh	r3, [r4, #12]
 80131b4:	4632      	mov	r2, r6
 80131b6:	463b      	mov	r3, r7
 80131b8:	4628      	mov	r0, r5
 80131ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131be:	f000 b869 	b.w	8013294 <_write_r>

080131c2 <__sseek>:
 80131c2:	b510      	push	{r4, lr}
 80131c4:	460c      	mov	r4, r1
 80131c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131ca:	f000 f9bd 	bl	8013548 <_lseek_r>
 80131ce:	1c43      	adds	r3, r0, #1
 80131d0:	89a3      	ldrh	r3, [r4, #12]
 80131d2:	bf15      	itete	ne
 80131d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80131d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80131da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80131de:	81a3      	strheq	r3, [r4, #12]
 80131e0:	bf18      	it	ne
 80131e2:	81a3      	strhne	r3, [r4, #12]
 80131e4:	bd10      	pop	{r4, pc}

080131e6 <__sclose>:
 80131e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131ea:	f000 b8db 	b.w	80133a4 <_close_r>
	...

080131f0 <__swbuf_r>:
 80131f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131f2:	460e      	mov	r6, r1
 80131f4:	4614      	mov	r4, r2
 80131f6:	4605      	mov	r5, r0
 80131f8:	b118      	cbz	r0, 8013202 <__swbuf_r+0x12>
 80131fa:	6983      	ldr	r3, [r0, #24]
 80131fc:	b90b      	cbnz	r3, 8013202 <__swbuf_r+0x12>
 80131fe:	f7ff fb1b 	bl	8012838 <__sinit>
 8013202:	4b21      	ldr	r3, [pc, #132]	; (8013288 <__swbuf_r+0x98>)
 8013204:	429c      	cmp	r4, r3
 8013206:	d12b      	bne.n	8013260 <__swbuf_r+0x70>
 8013208:	686c      	ldr	r4, [r5, #4]
 801320a:	69a3      	ldr	r3, [r4, #24]
 801320c:	60a3      	str	r3, [r4, #8]
 801320e:	89a3      	ldrh	r3, [r4, #12]
 8013210:	071a      	lsls	r2, r3, #28
 8013212:	d52f      	bpl.n	8013274 <__swbuf_r+0x84>
 8013214:	6923      	ldr	r3, [r4, #16]
 8013216:	b36b      	cbz	r3, 8013274 <__swbuf_r+0x84>
 8013218:	6923      	ldr	r3, [r4, #16]
 801321a:	6820      	ldr	r0, [r4, #0]
 801321c:	1ac0      	subs	r0, r0, r3
 801321e:	6963      	ldr	r3, [r4, #20]
 8013220:	b2f6      	uxtb	r6, r6
 8013222:	4283      	cmp	r3, r0
 8013224:	4637      	mov	r7, r6
 8013226:	dc04      	bgt.n	8013232 <__swbuf_r+0x42>
 8013228:	4621      	mov	r1, r4
 801322a:	4628      	mov	r0, r5
 801322c:	f000 f950 	bl	80134d0 <_fflush_r>
 8013230:	bb30      	cbnz	r0, 8013280 <__swbuf_r+0x90>
 8013232:	68a3      	ldr	r3, [r4, #8]
 8013234:	3b01      	subs	r3, #1
 8013236:	60a3      	str	r3, [r4, #8]
 8013238:	6823      	ldr	r3, [r4, #0]
 801323a:	1c5a      	adds	r2, r3, #1
 801323c:	6022      	str	r2, [r4, #0]
 801323e:	701e      	strb	r6, [r3, #0]
 8013240:	6963      	ldr	r3, [r4, #20]
 8013242:	3001      	adds	r0, #1
 8013244:	4283      	cmp	r3, r0
 8013246:	d004      	beq.n	8013252 <__swbuf_r+0x62>
 8013248:	89a3      	ldrh	r3, [r4, #12]
 801324a:	07db      	lsls	r3, r3, #31
 801324c:	d506      	bpl.n	801325c <__swbuf_r+0x6c>
 801324e:	2e0a      	cmp	r6, #10
 8013250:	d104      	bne.n	801325c <__swbuf_r+0x6c>
 8013252:	4621      	mov	r1, r4
 8013254:	4628      	mov	r0, r5
 8013256:	f000 f93b 	bl	80134d0 <_fflush_r>
 801325a:	b988      	cbnz	r0, 8013280 <__swbuf_r+0x90>
 801325c:	4638      	mov	r0, r7
 801325e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013260:	4b0a      	ldr	r3, [pc, #40]	; (801328c <__swbuf_r+0x9c>)
 8013262:	429c      	cmp	r4, r3
 8013264:	d101      	bne.n	801326a <__swbuf_r+0x7a>
 8013266:	68ac      	ldr	r4, [r5, #8]
 8013268:	e7cf      	b.n	801320a <__swbuf_r+0x1a>
 801326a:	4b09      	ldr	r3, [pc, #36]	; (8013290 <__swbuf_r+0xa0>)
 801326c:	429c      	cmp	r4, r3
 801326e:	bf08      	it	eq
 8013270:	68ec      	ldreq	r4, [r5, #12]
 8013272:	e7ca      	b.n	801320a <__swbuf_r+0x1a>
 8013274:	4621      	mov	r1, r4
 8013276:	4628      	mov	r0, r5
 8013278:	f000 f81e 	bl	80132b8 <__swsetup_r>
 801327c:	2800      	cmp	r0, #0
 801327e:	d0cb      	beq.n	8013218 <__swbuf_r+0x28>
 8013280:	f04f 37ff 	mov.w	r7, #4294967295
 8013284:	e7ea      	b.n	801325c <__swbuf_r+0x6c>
 8013286:	bf00      	nop
 8013288:	08016874 	.word	0x08016874
 801328c:	08016894 	.word	0x08016894
 8013290:	08016854 	.word	0x08016854

08013294 <_write_r>:
 8013294:	b538      	push	{r3, r4, r5, lr}
 8013296:	4d07      	ldr	r5, [pc, #28]	; (80132b4 <_write_r+0x20>)
 8013298:	4604      	mov	r4, r0
 801329a:	4608      	mov	r0, r1
 801329c:	4611      	mov	r1, r2
 801329e:	2200      	movs	r2, #0
 80132a0:	602a      	str	r2, [r5, #0]
 80132a2:	461a      	mov	r2, r3
 80132a4:	f7ed fc45 	bl	8000b32 <_write>
 80132a8:	1c43      	adds	r3, r0, #1
 80132aa:	d102      	bne.n	80132b2 <_write_r+0x1e>
 80132ac:	682b      	ldr	r3, [r5, #0]
 80132ae:	b103      	cbz	r3, 80132b2 <_write_r+0x1e>
 80132b0:	6023      	str	r3, [r4, #0]
 80132b2:	bd38      	pop	{r3, r4, r5, pc}
 80132b4:	24007418 	.word	0x24007418

080132b8 <__swsetup_r>:
 80132b8:	4b32      	ldr	r3, [pc, #200]	; (8013384 <__swsetup_r+0xcc>)
 80132ba:	b570      	push	{r4, r5, r6, lr}
 80132bc:	681d      	ldr	r5, [r3, #0]
 80132be:	4606      	mov	r6, r0
 80132c0:	460c      	mov	r4, r1
 80132c2:	b125      	cbz	r5, 80132ce <__swsetup_r+0x16>
 80132c4:	69ab      	ldr	r3, [r5, #24]
 80132c6:	b913      	cbnz	r3, 80132ce <__swsetup_r+0x16>
 80132c8:	4628      	mov	r0, r5
 80132ca:	f7ff fab5 	bl	8012838 <__sinit>
 80132ce:	4b2e      	ldr	r3, [pc, #184]	; (8013388 <__swsetup_r+0xd0>)
 80132d0:	429c      	cmp	r4, r3
 80132d2:	d10f      	bne.n	80132f4 <__swsetup_r+0x3c>
 80132d4:	686c      	ldr	r4, [r5, #4]
 80132d6:	89a3      	ldrh	r3, [r4, #12]
 80132d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80132dc:	0719      	lsls	r1, r3, #28
 80132de:	d42c      	bmi.n	801333a <__swsetup_r+0x82>
 80132e0:	06dd      	lsls	r5, r3, #27
 80132e2:	d411      	bmi.n	8013308 <__swsetup_r+0x50>
 80132e4:	2309      	movs	r3, #9
 80132e6:	6033      	str	r3, [r6, #0]
 80132e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80132ec:	81a3      	strh	r3, [r4, #12]
 80132ee:	f04f 30ff 	mov.w	r0, #4294967295
 80132f2:	e03e      	b.n	8013372 <__swsetup_r+0xba>
 80132f4:	4b25      	ldr	r3, [pc, #148]	; (801338c <__swsetup_r+0xd4>)
 80132f6:	429c      	cmp	r4, r3
 80132f8:	d101      	bne.n	80132fe <__swsetup_r+0x46>
 80132fa:	68ac      	ldr	r4, [r5, #8]
 80132fc:	e7eb      	b.n	80132d6 <__swsetup_r+0x1e>
 80132fe:	4b24      	ldr	r3, [pc, #144]	; (8013390 <__swsetup_r+0xd8>)
 8013300:	429c      	cmp	r4, r3
 8013302:	bf08      	it	eq
 8013304:	68ec      	ldreq	r4, [r5, #12]
 8013306:	e7e6      	b.n	80132d6 <__swsetup_r+0x1e>
 8013308:	0758      	lsls	r0, r3, #29
 801330a:	d512      	bpl.n	8013332 <__swsetup_r+0x7a>
 801330c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801330e:	b141      	cbz	r1, 8013322 <__swsetup_r+0x6a>
 8013310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013314:	4299      	cmp	r1, r3
 8013316:	d002      	beq.n	801331e <__swsetup_r+0x66>
 8013318:	4630      	mov	r0, r6
 801331a:	f7ff fb47 	bl	80129ac <_free_r>
 801331e:	2300      	movs	r3, #0
 8013320:	6363      	str	r3, [r4, #52]	; 0x34
 8013322:	89a3      	ldrh	r3, [r4, #12]
 8013324:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013328:	81a3      	strh	r3, [r4, #12]
 801332a:	2300      	movs	r3, #0
 801332c:	6063      	str	r3, [r4, #4]
 801332e:	6923      	ldr	r3, [r4, #16]
 8013330:	6023      	str	r3, [r4, #0]
 8013332:	89a3      	ldrh	r3, [r4, #12]
 8013334:	f043 0308 	orr.w	r3, r3, #8
 8013338:	81a3      	strh	r3, [r4, #12]
 801333a:	6923      	ldr	r3, [r4, #16]
 801333c:	b94b      	cbnz	r3, 8013352 <__swsetup_r+0x9a>
 801333e:	89a3      	ldrh	r3, [r4, #12]
 8013340:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013348:	d003      	beq.n	8013352 <__swsetup_r+0x9a>
 801334a:	4621      	mov	r1, r4
 801334c:	4630      	mov	r0, r6
 801334e:	f000 f933 	bl	80135b8 <__smakebuf_r>
 8013352:	89a0      	ldrh	r0, [r4, #12]
 8013354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013358:	f010 0301 	ands.w	r3, r0, #1
 801335c:	d00a      	beq.n	8013374 <__swsetup_r+0xbc>
 801335e:	2300      	movs	r3, #0
 8013360:	60a3      	str	r3, [r4, #8]
 8013362:	6963      	ldr	r3, [r4, #20]
 8013364:	425b      	negs	r3, r3
 8013366:	61a3      	str	r3, [r4, #24]
 8013368:	6923      	ldr	r3, [r4, #16]
 801336a:	b943      	cbnz	r3, 801337e <__swsetup_r+0xc6>
 801336c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013370:	d1ba      	bne.n	80132e8 <__swsetup_r+0x30>
 8013372:	bd70      	pop	{r4, r5, r6, pc}
 8013374:	0781      	lsls	r1, r0, #30
 8013376:	bf58      	it	pl
 8013378:	6963      	ldrpl	r3, [r4, #20]
 801337a:	60a3      	str	r3, [r4, #8]
 801337c:	e7f4      	b.n	8013368 <__swsetup_r+0xb0>
 801337e:	2000      	movs	r0, #0
 8013380:	e7f7      	b.n	8013372 <__swsetup_r+0xba>
 8013382:	bf00      	nop
 8013384:	24000034 	.word	0x24000034
 8013388:	08016874 	.word	0x08016874
 801338c:	08016894 	.word	0x08016894
 8013390:	08016854 	.word	0x08016854

08013394 <abort>:
 8013394:	b508      	push	{r3, lr}
 8013396:	2006      	movs	r0, #6
 8013398:	f000 f994 	bl	80136c4 <raise>
 801339c:	2001      	movs	r0, #1
 801339e:	f7ed fba1 	bl	8000ae4 <_exit>
	...

080133a4 <_close_r>:
 80133a4:	b538      	push	{r3, r4, r5, lr}
 80133a6:	4d06      	ldr	r5, [pc, #24]	; (80133c0 <_close_r+0x1c>)
 80133a8:	2300      	movs	r3, #0
 80133aa:	4604      	mov	r4, r0
 80133ac:	4608      	mov	r0, r1
 80133ae:	602b      	str	r3, [r5, #0]
 80133b0:	f7ed fbdb 	bl	8000b6a <_close>
 80133b4:	1c43      	adds	r3, r0, #1
 80133b6:	d102      	bne.n	80133be <_close_r+0x1a>
 80133b8:	682b      	ldr	r3, [r5, #0]
 80133ba:	b103      	cbz	r3, 80133be <_close_r+0x1a>
 80133bc:	6023      	str	r3, [r4, #0]
 80133be:	bd38      	pop	{r3, r4, r5, pc}
 80133c0:	24007418 	.word	0x24007418

080133c4 <__sflush_r>:
 80133c4:	898a      	ldrh	r2, [r1, #12]
 80133c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133ca:	4605      	mov	r5, r0
 80133cc:	0710      	lsls	r0, r2, #28
 80133ce:	460c      	mov	r4, r1
 80133d0:	d458      	bmi.n	8013484 <__sflush_r+0xc0>
 80133d2:	684b      	ldr	r3, [r1, #4]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	dc05      	bgt.n	80133e4 <__sflush_r+0x20>
 80133d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80133da:	2b00      	cmp	r3, #0
 80133dc:	dc02      	bgt.n	80133e4 <__sflush_r+0x20>
 80133de:	2000      	movs	r0, #0
 80133e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80133e6:	2e00      	cmp	r6, #0
 80133e8:	d0f9      	beq.n	80133de <__sflush_r+0x1a>
 80133ea:	2300      	movs	r3, #0
 80133ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80133f0:	682f      	ldr	r7, [r5, #0]
 80133f2:	602b      	str	r3, [r5, #0]
 80133f4:	d032      	beq.n	801345c <__sflush_r+0x98>
 80133f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80133f8:	89a3      	ldrh	r3, [r4, #12]
 80133fa:	075a      	lsls	r2, r3, #29
 80133fc:	d505      	bpl.n	801340a <__sflush_r+0x46>
 80133fe:	6863      	ldr	r3, [r4, #4]
 8013400:	1ac0      	subs	r0, r0, r3
 8013402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013404:	b10b      	cbz	r3, 801340a <__sflush_r+0x46>
 8013406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013408:	1ac0      	subs	r0, r0, r3
 801340a:	2300      	movs	r3, #0
 801340c:	4602      	mov	r2, r0
 801340e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013410:	6a21      	ldr	r1, [r4, #32]
 8013412:	4628      	mov	r0, r5
 8013414:	47b0      	blx	r6
 8013416:	1c43      	adds	r3, r0, #1
 8013418:	89a3      	ldrh	r3, [r4, #12]
 801341a:	d106      	bne.n	801342a <__sflush_r+0x66>
 801341c:	6829      	ldr	r1, [r5, #0]
 801341e:	291d      	cmp	r1, #29
 8013420:	d82c      	bhi.n	801347c <__sflush_r+0xb8>
 8013422:	4a2a      	ldr	r2, [pc, #168]	; (80134cc <__sflush_r+0x108>)
 8013424:	40ca      	lsrs	r2, r1
 8013426:	07d6      	lsls	r6, r2, #31
 8013428:	d528      	bpl.n	801347c <__sflush_r+0xb8>
 801342a:	2200      	movs	r2, #0
 801342c:	6062      	str	r2, [r4, #4]
 801342e:	04d9      	lsls	r1, r3, #19
 8013430:	6922      	ldr	r2, [r4, #16]
 8013432:	6022      	str	r2, [r4, #0]
 8013434:	d504      	bpl.n	8013440 <__sflush_r+0x7c>
 8013436:	1c42      	adds	r2, r0, #1
 8013438:	d101      	bne.n	801343e <__sflush_r+0x7a>
 801343a:	682b      	ldr	r3, [r5, #0]
 801343c:	b903      	cbnz	r3, 8013440 <__sflush_r+0x7c>
 801343e:	6560      	str	r0, [r4, #84]	; 0x54
 8013440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013442:	602f      	str	r7, [r5, #0]
 8013444:	2900      	cmp	r1, #0
 8013446:	d0ca      	beq.n	80133de <__sflush_r+0x1a>
 8013448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801344c:	4299      	cmp	r1, r3
 801344e:	d002      	beq.n	8013456 <__sflush_r+0x92>
 8013450:	4628      	mov	r0, r5
 8013452:	f7ff faab 	bl	80129ac <_free_r>
 8013456:	2000      	movs	r0, #0
 8013458:	6360      	str	r0, [r4, #52]	; 0x34
 801345a:	e7c1      	b.n	80133e0 <__sflush_r+0x1c>
 801345c:	6a21      	ldr	r1, [r4, #32]
 801345e:	2301      	movs	r3, #1
 8013460:	4628      	mov	r0, r5
 8013462:	47b0      	blx	r6
 8013464:	1c41      	adds	r1, r0, #1
 8013466:	d1c7      	bne.n	80133f8 <__sflush_r+0x34>
 8013468:	682b      	ldr	r3, [r5, #0]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d0c4      	beq.n	80133f8 <__sflush_r+0x34>
 801346e:	2b1d      	cmp	r3, #29
 8013470:	d001      	beq.n	8013476 <__sflush_r+0xb2>
 8013472:	2b16      	cmp	r3, #22
 8013474:	d101      	bne.n	801347a <__sflush_r+0xb6>
 8013476:	602f      	str	r7, [r5, #0]
 8013478:	e7b1      	b.n	80133de <__sflush_r+0x1a>
 801347a:	89a3      	ldrh	r3, [r4, #12]
 801347c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013480:	81a3      	strh	r3, [r4, #12]
 8013482:	e7ad      	b.n	80133e0 <__sflush_r+0x1c>
 8013484:	690f      	ldr	r7, [r1, #16]
 8013486:	2f00      	cmp	r7, #0
 8013488:	d0a9      	beq.n	80133de <__sflush_r+0x1a>
 801348a:	0793      	lsls	r3, r2, #30
 801348c:	680e      	ldr	r6, [r1, #0]
 801348e:	bf08      	it	eq
 8013490:	694b      	ldreq	r3, [r1, #20]
 8013492:	600f      	str	r7, [r1, #0]
 8013494:	bf18      	it	ne
 8013496:	2300      	movne	r3, #0
 8013498:	eba6 0807 	sub.w	r8, r6, r7
 801349c:	608b      	str	r3, [r1, #8]
 801349e:	f1b8 0f00 	cmp.w	r8, #0
 80134a2:	dd9c      	ble.n	80133de <__sflush_r+0x1a>
 80134a4:	6a21      	ldr	r1, [r4, #32]
 80134a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80134a8:	4643      	mov	r3, r8
 80134aa:	463a      	mov	r2, r7
 80134ac:	4628      	mov	r0, r5
 80134ae:	47b0      	blx	r6
 80134b0:	2800      	cmp	r0, #0
 80134b2:	dc06      	bgt.n	80134c2 <__sflush_r+0xfe>
 80134b4:	89a3      	ldrh	r3, [r4, #12]
 80134b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134ba:	81a3      	strh	r3, [r4, #12]
 80134bc:	f04f 30ff 	mov.w	r0, #4294967295
 80134c0:	e78e      	b.n	80133e0 <__sflush_r+0x1c>
 80134c2:	4407      	add	r7, r0
 80134c4:	eba8 0800 	sub.w	r8, r8, r0
 80134c8:	e7e9      	b.n	801349e <__sflush_r+0xda>
 80134ca:	bf00      	nop
 80134cc:	20400001 	.word	0x20400001

080134d0 <_fflush_r>:
 80134d0:	b538      	push	{r3, r4, r5, lr}
 80134d2:	690b      	ldr	r3, [r1, #16]
 80134d4:	4605      	mov	r5, r0
 80134d6:	460c      	mov	r4, r1
 80134d8:	b913      	cbnz	r3, 80134e0 <_fflush_r+0x10>
 80134da:	2500      	movs	r5, #0
 80134dc:	4628      	mov	r0, r5
 80134de:	bd38      	pop	{r3, r4, r5, pc}
 80134e0:	b118      	cbz	r0, 80134ea <_fflush_r+0x1a>
 80134e2:	6983      	ldr	r3, [r0, #24]
 80134e4:	b90b      	cbnz	r3, 80134ea <_fflush_r+0x1a>
 80134e6:	f7ff f9a7 	bl	8012838 <__sinit>
 80134ea:	4b14      	ldr	r3, [pc, #80]	; (801353c <_fflush_r+0x6c>)
 80134ec:	429c      	cmp	r4, r3
 80134ee:	d11b      	bne.n	8013528 <_fflush_r+0x58>
 80134f0:	686c      	ldr	r4, [r5, #4]
 80134f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d0ef      	beq.n	80134da <_fflush_r+0xa>
 80134fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80134fc:	07d0      	lsls	r0, r2, #31
 80134fe:	d404      	bmi.n	801350a <_fflush_r+0x3a>
 8013500:	0599      	lsls	r1, r3, #22
 8013502:	d402      	bmi.n	801350a <_fflush_r+0x3a>
 8013504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013506:	f7ff fa47 	bl	8012998 <__retarget_lock_acquire_recursive>
 801350a:	4628      	mov	r0, r5
 801350c:	4621      	mov	r1, r4
 801350e:	f7ff ff59 	bl	80133c4 <__sflush_r>
 8013512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013514:	07da      	lsls	r2, r3, #31
 8013516:	4605      	mov	r5, r0
 8013518:	d4e0      	bmi.n	80134dc <_fflush_r+0xc>
 801351a:	89a3      	ldrh	r3, [r4, #12]
 801351c:	059b      	lsls	r3, r3, #22
 801351e:	d4dd      	bmi.n	80134dc <_fflush_r+0xc>
 8013520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013522:	f7ff fa3a 	bl	801299a <__retarget_lock_release_recursive>
 8013526:	e7d9      	b.n	80134dc <_fflush_r+0xc>
 8013528:	4b05      	ldr	r3, [pc, #20]	; (8013540 <_fflush_r+0x70>)
 801352a:	429c      	cmp	r4, r3
 801352c:	d101      	bne.n	8013532 <_fflush_r+0x62>
 801352e:	68ac      	ldr	r4, [r5, #8]
 8013530:	e7df      	b.n	80134f2 <_fflush_r+0x22>
 8013532:	4b04      	ldr	r3, [pc, #16]	; (8013544 <_fflush_r+0x74>)
 8013534:	429c      	cmp	r4, r3
 8013536:	bf08      	it	eq
 8013538:	68ec      	ldreq	r4, [r5, #12]
 801353a:	e7da      	b.n	80134f2 <_fflush_r+0x22>
 801353c:	08016874 	.word	0x08016874
 8013540:	08016894 	.word	0x08016894
 8013544:	08016854 	.word	0x08016854

08013548 <_lseek_r>:
 8013548:	b538      	push	{r3, r4, r5, lr}
 801354a:	4d07      	ldr	r5, [pc, #28]	; (8013568 <_lseek_r+0x20>)
 801354c:	4604      	mov	r4, r0
 801354e:	4608      	mov	r0, r1
 8013550:	4611      	mov	r1, r2
 8013552:	2200      	movs	r2, #0
 8013554:	602a      	str	r2, [r5, #0]
 8013556:	461a      	mov	r2, r3
 8013558:	f7ed fb2e 	bl	8000bb8 <_lseek>
 801355c:	1c43      	adds	r3, r0, #1
 801355e:	d102      	bne.n	8013566 <_lseek_r+0x1e>
 8013560:	682b      	ldr	r3, [r5, #0]
 8013562:	b103      	cbz	r3, 8013566 <_lseek_r+0x1e>
 8013564:	6023      	str	r3, [r4, #0]
 8013566:	bd38      	pop	{r3, r4, r5, pc}
 8013568:	24007418 	.word	0x24007418

0801356c <__swhatbuf_r>:
 801356c:	b570      	push	{r4, r5, r6, lr}
 801356e:	460e      	mov	r6, r1
 8013570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013574:	2900      	cmp	r1, #0
 8013576:	b096      	sub	sp, #88	; 0x58
 8013578:	4614      	mov	r4, r2
 801357a:	461d      	mov	r5, r3
 801357c:	da08      	bge.n	8013590 <__swhatbuf_r+0x24>
 801357e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013582:	2200      	movs	r2, #0
 8013584:	602a      	str	r2, [r5, #0]
 8013586:	061a      	lsls	r2, r3, #24
 8013588:	d410      	bmi.n	80135ac <__swhatbuf_r+0x40>
 801358a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801358e:	e00e      	b.n	80135ae <__swhatbuf_r+0x42>
 8013590:	466a      	mov	r2, sp
 8013592:	f000 f8b3 	bl	80136fc <_fstat_r>
 8013596:	2800      	cmp	r0, #0
 8013598:	dbf1      	blt.n	801357e <__swhatbuf_r+0x12>
 801359a:	9a01      	ldr	r2, [sp, #4]
 801359c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80135a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80135a4:	425a      	negs	r2, r3
 80135a6:	415a      	adcs	r2, r3
 80135a8:	602a      	str	r2, [r5, #0]
 80135aa:	e7ee      	b.n	801358a <__swhatbuf_r+0x1e>
 80135ac:	2340      	movs	r3, #64	; 0x40
 80135ae:	2000      	movs	r0, #0
 80135b0:	6023      	str	r3, [r4, #0]
 80135b2:	b016      	add	sp, #88	; 0x58
 80135b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080135b8 <__smakebuf_r>:
 80135b8:	898b      	ldrh	r3, [r1, #12]
 80135ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80135bc:	079d      	lsls	r5, r3, #30
 80135be:	4606      	mov	r6, r0
 80135c0:	460c      	mov	r4, r1
 80135c2:	d507      	bpl.n	80135d4 <__smakebuf_r+0x1c>
 80135c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80135c8:	6023      	str	r3, [r4, #0]
 80135ca:	6123      	str	r3, [r4, #16]
 80135cc:	2301      	movs	r3, #1
 80135ce:	6163      	str	r3, [r4, #20]
 80135d0:	b002      	add	sp, #8
 80135d2:	bd70      	pop	{r4, r5, r6, pc}
 80135d4:	ab01      	add	r3, sp, #4
 80135d6:	466a      	mov	r2, sp
 80135d8:	f7ff ffc8 	bl	801356c <__swhatbuf_r>
 80135dc:	9900      	ldr	r1, [sp, #0]
 80135de:	4605      	mov	r5, r0
 80135e0:	4630      	mov	r0, r6
 80135e2:	f7ff fa4f 	bl	8012a84 <_malloc_r>
 80135e6:	b948      	cbnz	r0, 80135fc <__smakebuf_r+0x44>
 80135e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135ec:	059a      	lsls	r2, r3, #22
 80135ee:	d4ef      	bmi.n	80135d0 <__smakebuf_r+0x18>
 80135f0:	f023 0303 	bic.w	r3, r3, #3
 80135f4:	f043 0302 	orr.w	r3, r3, #2
 80135f8:	81a3      	strh	r3, [r4, #12]
 80135fa:	e7e3      	b.n	80135c4 <__smakebuf_r+0xc>
 80135fc:	4b0d      	ldr	r3, [pc, #52]	; (8013634 <__smakebuf_r+0x7c>)
 80135fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8013600:	89a3      	ldrh	r3, [r4, #12]
 8013602:	6020      	str	r0, [r4, #0]
 8013604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013608:	81a3      	strh	r3, [r4, #12]
 801360a:	9b00      	ldr	r3, [sp, #0]
 801360c:	6163      	str	r3, [r4, #20]
 801360e:	9b01      	ldr	r3, [sp, #4]
 8013610:	6120      	str	r0, [r4, #16]
 8013612:	b15b      	cbz	r3, 801362c <__smakebuf_r+0x74>
 8013614:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013618:	4630      	mov	r0, r6
 801361a:	f000 f881 	bl	8013720 <_isatty_r>
 801361e:	b128      	cbz	r0, 801362c <__smakebuf_r+0x74>
 8013620:	89a3      	ldrh	r3, [r4, #12]
 8013622:	f023 0303 	bic.w	r3, r3, #3
 8013626:	f043 0301 	orr.w	r3, r3, #1
 801362a:	81a3      	strh	r3, [r4, #12]
 801362c:	89a0      	ldrh	r0, [r4, #12]
 801362e:	4305      	orrs	r5, r0
 8013630:	81a5      	strh	r5, [r4, #12]
 8013632:	e7cd      	b.n	80135d0 <__smakebuf_r+0x18>
 8013634:	080127d1 	.word	0x080127d1

08013638 <__malloc_lock>:
 8013638:	4801      	ldr	r0, [pc, #4]	; (8013640 <__malloc_lock+0x8>)
 801363a:	f7ff b9ad 	b.w	8012998 <__retarget_lock_acquire_recursive>
 801363e:	bf00      	nop
 8013640:	24007490 	.word	0x24007490

08013644 <__malloc_unlock>:
 8013644:	4801      	ldr	r0, [pc, #4]	; (801364c <__malloc_unlock+0x8>)
 8013646:	f7ff b9a8 	b.w	801299a <__retarget_lock_release_recursive>
 801364a:	bf00      	nop
 801364c:	24007490 	.word	0x24007490

08013650 <_read_r>:
 8013650:	b538      	push	{r3, r4, r5, lr}
 8013652:	4d07      	ldr	r5, [pc, #28]	; (8013670 <_read_r+0x20>)
 8013654:	4604      	mov	r4, r0
 8013656:	4608      	mov	r0, r1
 8013658:	4611      	mov	r1, r2
 801365a:	2200      	movs	r2, #0
 801365c:	602a      	str	r2, [r5, #0]
 801365e:	461a      	mov	r2, r3
 8013660:	f7ed fa4a 	bl	8000af8 <_read>
 8013664:	1c43      	adds	r3, r0, #1
 8013666:	d102      	bne.n	801366e <_read_r+0x1e>
 8013668:	682b      	ldr	r3, [r5, #0]
 801366a:	b103      	cbz	r3, 801366e <_read_r+0x1e>
 801366c:	6023      	str	r3, [r4, #0]
 801366e:	bd38      	pop	{r3, r4, r5, pc}
 8013670:	24007418 	.word	0x24007418

08013674 <_raise_r>:
 8013674:	291f      	cmp	r1, #31
 8013676:	b538      	push	{r3, r4, r5, lr}
 8013678:	4604      	mov	r4, r0
 801367a:	460d      	mov	r5, r1
 801367c:	d904      	bls.n	8013688 <_raise_r+0x14>
 801367e:	2316      	movs	r3, #22
 8013680:	6003      	str	r3, [r0, #0]
 8013682:	f04f 30ff 	mov.w	r0, #4294967295
 8013686:	bd38      	pop	{r3, r4, r5, pc}
 8013688:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801368a:	b112      	cbz	r2, 8013692 <_raise_r+0x1e>
 801368c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013690:	b94b      	cbnz	r3, 80136a6 <_raise_r+0x32>
 8013692:	4620      	mov	r0, r4
 8013694:	f000 f830 	bl	80136f8 <_getpid_r>
 8013698:	462a      	mov	r2, r5
 801369a:	4601      	mov	r1, r0
 801369c:	4620      	mov	r0, r4
 801369e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80136a2:	f000 b817 	b.w	80136d4 <_kill_r>
 80136a6:	2b01      	cmp	r3, #1
 80136a8:	d00a      	beq.n	80136c0 <_raise_r+0x4c>
 80136aa:	1c59      	adds	r1, r3, #1
 80136ac:	d103      	bne.n	80136b6 <_raise_r+0x42>
 80136ae:	2316      	movs	r3, #22
 80136b0:	6003      	str	r3, [r0, #0]
 80136b2:	2001      	movs	r0, #1
 80136b4:	e7e7      	b.n	8013686 <_raise_r+0x12>
 80136b6:	2400      	movs	r4, #0
 80136b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80136bc:	4628      	mov	r0, r5
 80136be:	4798      	blx	r3
 80136c0:	2000      	movs	r0, #0
 80136c2:	e7e0      	b.n	8013686 <_raise_r+0x12>

080136c4 <raise>:
 80136c4:	4b02      	ldr	r3, [pc, #8]	; (80136d0 <raise+0xc>)
 80136c6:	4601      	mov	r1, r0
 80136c8:	6818      	ldr	r0, [r3, #0]
 80136ca:	f7ff bfd3 	b.w	8013674 <_raise_r>
 80136ce:	bf00      	nop
 80136d0:	24000034 	.word	0x24000034

080136d4 <_kill_r>:
 80136d4:	b538      	push	{r3, r4, r5, lr}
 80136d6:	4d07      	ldr	r5, [pc, #28]	; (80136f4 <_kill_r+0x20>)
 80136d8:	2300      	movs	r3, #0
 80136da:	4604      	mov	r4, r0
 80136dc:	4608      	mov	r0, r1
 80136de:	4611      	mov	r1, r2
 80136e0:	602b      	str	r3, [r5, #0]
 80136e2:	f7ed f9ed 	bl	8000ac0 <_kill>
 80136e6:	1c43      	adds	r3, r0, #1
 80136e8:	d102      	bne.n	80136f0 <_kill_r+0x1c>
 80136ea:	682b      	ldr	r3, [r5, #0]
 80136ec:	b103      	cbz	r3, 80136f0 <_kill_r+0x1c>
 80136ee:	6023      	str	r3, [r4, #0]
 80136f0:	bd38      	pop	{r3, r4, r5, pc}
 80136f2:	bf00      	nop
 80136f4:	24007418 	.word	0x24007418

080136f8 <_getpid_r>:
 80136f8:	f7ed b9da 	b.w	8000ab0 <_getpid>

080136fc <_fstat_r>:
 80136fc:	b538      	push	{r3, r4, r5, lr}
 80136fe:	4d07      	ldr	r5, [pc, #28]	; (801371c <_fstat_r+0x20>)
 8013700:	2300      	movs	r3, #0
 8013702:	4604      	mov	r4, r0
 8013704:	4608      	mov	r0, r1
 8013706:	4611      	mov	r1, r2
 8013708:	602b      	str	r3, [r5, #0]
 801370a:	f7ed fa3a 	bl	8000b82 <_fstat>
 801370e:	1c43      	adds	r3, r0, #1
 8013710:	d102      	bne.n	8013718 <_fstat_r+0x1c>
 8013712:	682b      	ldr	r3, [r5, #0]
 8013714:	b103      	cbz	r3, 8013718 <_fstat_r+0x1c>
 8013716:	6023      	str	r3, [r4, #0]
 8013718:	bd38      	pop	{r3, r4, r5, pc}
 801371a:	bf00      	nop
 801371c:	24007418 	.word	0x24007418

08013720 <_isatty_r>:
 8013720:	b538      	push	{r3, r4, r5, lr}
 8013722:	4d06      	ldr	r5, [pc, #24]	; (801373c <_isatty_r+0x1c>)
 8013724:	2300      	movs	r3, #0
 8013726:	4604      	mov	r4, r0
 8013728:	4608      	mov	r0, r1
 801372a:	602b      	str	r3, [r5, #0]
 801372c:	f7ed fa39 	bl	8000ba2 <_isatty>
 8013730:	1c43      	adds	r3, r0, #1
 8013732:	d102      	bne.n	801373a <_isatty_r+0x1a>
 8013734:	682b      	ldr	r3, [r5, #0]
 8013736:	b103      	cbz	r3, 801373a <_isatty_r+0x1a>
 8013738:	6023      	str	r3, [r4, #0]
 801373a:	bd38      	pop	{r3, r4, r5, pc}
 801373c:	24007418 	.word	0x24007418

08013740 <_init>:
 8013740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013742:	bf00      	nop
 8013744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013746:	bc08      	pop	{r3}
 8013748:	469e      	mov	lr, r3
 801374a:	4770      	bx	lr

0801374c <_fini>:
 801374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801374e:	bf00      	nop
 8013750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013752:	bc08      	pop	{r3}
 8013754:	469e      	mov	lr, r3
 8013756:	4770      	bx	lr
