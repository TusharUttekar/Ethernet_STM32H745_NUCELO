
Ethernet_TCP_Client_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014b54  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031f8  08014df4  08014df4  00024df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017fec  08017fec  00030098  2**0
                  CONTENTS
  4 .ARM          00000000  08017fec  08017fec  00030098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017fec  08017fec  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017fec  08017fec  00027fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017ff0  08017ff0  00027ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  08017ff4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007424  24000098  0801808c  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240074bc  0801808c  000374bc  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f6cd  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007256  00000000  00000000  0005f793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021e0  00000000  00000000  000669f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002050  00000000  00000000  00068bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00049ad2  00000000  00000000  0006ac20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035565  00000000  00000000  000b46f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a25b0  00000000  00000000  000e9c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0028c207  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000094d8  00000000  00000000  0028c258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014ddc 	.word	0x08014ddc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08014ddc 	.word	0x08014ddc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3d      	ldr	r3, [pc, #244]	; (800047c <SystemInit+0xfc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3c      	ldr	r2, [pc, #240]	; (800047c <SystemInit+0xfc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b39      	ldr	r3, [pc, #228]	; (800047c <SystemInit+0xfc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a38      	ldr	r2, [pc, #224]	; (800047c <SystemInit+0xfc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b34      	ldr	r3, [pc, #208]	; (8000480 <SystemInit+0x100>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a32      	ldr	r2, [pc, #200]	; (8000480 <SystemInit+0x100>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <SystemInit+0x104>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a30      	ldr	r2, [pc, #192]	; (8000484 <SystemInit+0x104>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <SystemInit+0x104>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <SystemInit+0x104>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492c      	ldr	r1, [pc, #176]	; (8000484 <SystemInit+0x104>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <SystemInit+0x108>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <SystemInit+0x100>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a24      	ldr	r2, [pc, #144]	; (8000480 <SystemInit+0x100>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <SystemInit+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <SystemInit+0x104>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <SystemInit+0x104>)
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SystemInit+0x104>)
 8000410:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <SystemInit+0x110>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SystemInit+0x104>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	; (8000494 <SystemInit+0x114>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <SystemInit+0x104>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <SystemInit+0x114>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SystemInit+0x104>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <SystemInit+0x114>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x104>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <SystemInit+0x104>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SystemInit+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <SystemInit+0x118>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <SystemInit+0x118>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x11c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <SystemInit+0x120>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x124>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <SystemInit+0x128>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	52002000 	.word	0x52002000
 8000484:	58024400 	.word	0x58024400
 8000488:	eaf6ed7f 	.word	0xeaf6ed7f
 800048c:	02020200 	.word	0x02020200
 8000490:	01ff0000 	.word	0x01ff0000
 8000494:	01010280 	.word	0x01010280
 8000498:	580000c0 	.word	0x580000c0
 800049c:	5c001000 	.word	0x5c001000
 80004a0:	ffff0000 	.word	0xffff0000
 80004a4:	51008108 	.word	0x51008108
 80004a8:	52004000 	.word	0x52004000

080004ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80004bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	4a06      	ldr	r2, [pc, #24]	; (80004dc <vApplicationGetIdleTaskMemory+0x30>)
 80004c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	240000b4 	.word	0x240000b4
 80004dc:	24000108 	.word	0x24000108

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b5b0      	push	{r4, r5, r7, lr}
 80004e2:	b08c      	sub	sp, #48	; 0x30
 80004e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80004e6:	f000 f9dd 	bl	80008a4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004ea:	4b5d      	ldr	r3, [pc, #372]	; (8000660 <main+0x180>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d11b      	bne.n	800052e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004f6:	f3bf 8f4f 	dsb	sy
}
 80004fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004fc:	f3bf 8f6f 	isb	sy
}
 8000500:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000502:	4b57      	ldr	r3, [pc, #348]	; (8000660 <main+0x180>)
 8000504:	2200      	movs	r2, #0
 8000506:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800050a:	f3bf 8f4f 	dsb	sy
}
 800050e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000510:	f3bf 8f6f 	isb	sy
}
 8000514:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000516:	4b52      	ldr	r3, [pc, #328]	; (8000660 <main+0x180>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a51      	ldr	r2, [pc, #324]	; (8000660 <main+0x180>)
 800051c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000520:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000522:	f3bf 8f4f 	dsb	sy
}
 8000526:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000528:	f3bf 8f6f 	isb	sy
}
 800052c:	e000      	b.n	8000530 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800052e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000530:	4b4b      	ldr	r3, [pc, #300]	; (8000660 <main+0x180>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000538:	2b00      	cmp	r3, #0
 800053a:	d138      	bne.n	80005ae <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800053c:	4b48      	ldr	r3, [pc, #288]	; (8000660 <main+0x180>)
 800053e:	2200      	movs	r2, #0
 8000540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000544:	f3bf 8f4f 	dsb	sy
}
 8000548:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800054a:	4b45      	ldr	r3, [pc, #276]	; (8000660 <main+0x180>)
 800054c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000554:	0b5b      	lsrs	r3, r3, #13
 8000556:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800055a:	627b      	str	r3, [r7, #36]	; 0x24
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800055c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800055e:	08db      	lsrs	r3, r3, #3
 8000560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000564:	623b      	str	r3, [r7, #32]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	015a      	lsls	r2, r3, #5
 800056a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800056e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000570:	6a3a      	ldr	r2, [r7, #32]
 8000572:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000574:	493a      	ldr	r1, [pc, #232]	; (8000660 <main+0x180>)
 8000576:	4313      	orrs	r3, r2
 8000578:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800057c:	6a3b      	ldr	r3, [r7, #32]
 800057e:	1e5a      	subs	r2, r3, #1
 8000580:	623a      	str	r2, [r7, #32]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1ef      	bne.n	8000566 <main+0x86>
    } while(sets-- != 0U);
 8000586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000588:	1e5a      	subs	r2, r3, #1
 800058a:	627a      	str	r2, [r7, #36]	; 0x24
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1e5      	bne.n	800055c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000590:	f3bf 8f4f 	dsb	sy
}
 8000594:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000596:	4b32      	ldr	r3, [pc, #200]	; (8000660 <main+0x180>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a31      	ldr	r2, [pc, #196]	; (8000660 <main+0x180>)
 800059c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005a2:	f3bf 8f4f 	dsb	sy
}
 80005a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005a8:	f3bf 8f6f 	isb	sy
}
 80005ac:	e000      	b.n	80005b0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005ae:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80005b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80005b6:	bf00      	nop
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <main+0x184>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d004      	beq.n	80005ce <main+0xee>
 80005c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c6:	1e5a      	subs	r2, r3, #1
 80005c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	dcf4      	bgt.n	80005b8 <main+0xd8>
  if ( timeout < 0 )
 80005ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	da01      	bge.n	80005d8 <main+0xf8>
  {
  Error_Handler();
 80005d4:	f000 f9a2 	bl	800091c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fcae 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f848 	bl	8000670 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <main+0x184>)
 80005e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e6:	4a1f      	ldr	r2, [pc, #124]	; (8000664 <main+0x184>)
 80005e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <main+0x184>)
 80005f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80005fe:	2000      	movs	r0, #0
 8000600:	f002 fe0e 	bl	8003220 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000604:	2100      	movs	r1, #0
 8000606:	2000      	movs	r0, #0
 8000608:	f002 fe24 	bl	8003254 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800060c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000610:	62fb      	str	r3, [r7, #44]	; 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000612:	bf00      	nop
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <main+0x184>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800061c:	2b00      	cmp	r3, #0
 800061e:	d104      	bne.n	800062a <main+0x14a>
 8000620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000622:	1e5a      	subs	r2, r3, #1
 8000624:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000626:	2b00      	cmp	r3, #0
 8000628:	dcf4      	bgt.n	8000614 <main+0x134>
if ( timeout < 0 )
 800062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062c:	2b00      	cmp	r3, #0
 800062e:	da01      	bge.n	8000634 <main+0x154>
{
Error_Handler();
 8000630:	f000 f974 	bl	800091c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 f898 	bl	8000768 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <main+0x188>)
 800063a:	1d3c      	adds	r4, r7, #4
 800063c:	461d      	mov	r5, r3
 800063e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f005 f9b6 	bl	80059c0 <osThreadCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <main+0x18c>)
 8000658:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065a:	f005 f99a 	bl	8005992 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0x17e>
 8000660:	e000ed00 	.word	0xe000ed00
 8000664:	58024400 	.word	0x58024400
 8000668:	08014e00 	.word	0x08014e00
 800066c:	24000308 	.word	0x24000308

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09c      	sub	sp, #112	; 0x70
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067a:	224c      	movs	r2, #76	; 0x4c
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f013 f9a0 	bl	80139c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2220      	movs	r2, #32
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f013 f99a 	bl	80139c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000690:	2004      	movs	r0, #4
 8000692:	f002 fdf3 	bl	800327c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	4b31      	ldr	r3, [pc, #196]	; (8000760 <SystemClock_Config+0xf0>)
 800069c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069e:	4a30      	ldr	r2, [pc, #192]	; (8000760 <SystemClock_Config+0xf0>)
 80006a0:	f023 0301 	bic.w	r3, r3, #1
 80006a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006a6:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <SystemClock_Config+0xf0>)
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <SystemClock_Config+0xf4>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a2b      	ldr	r2, [pc, #172]	; (8000764 <SystemClock_Config+0xf4>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <SystemClock_Config+0xf4>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c8:	bf00      	nop
 80006ca:	4b26      	ldr	r3, [pc, #152]	; (8000764 <SystemClock_Config+0xf4>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d6:	d1f8      	bne.n	80006ca <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006dc:	2301      	movs	r3, #1
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2340      	movs	r3, #64	; 0x40
 80006e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006f0:	2332      	movs	r3, #50	; 0x32
 80006f2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000700:	230c      	movs	r3, #12
 8000702:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000704:	2300      	movs	r3, #0
 8000706:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000710:	4618      	mov	r0, r3
 8000712:	f002 fe0d 	bl	8003330 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800071c:	f000 f8fe 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	233f      	movs	r3, #63	; 0x3f
 8000722:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2303      	movs	r3, #3
 8000726:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800072c:	2308      	movs	r3, #8
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000730:	2340      	movs	r3, #64	; 0x40
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800073e:	2340      	movs	r3, #64	; 0x40
 8000740:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2102      	movs	r1, #2
 8000746:	4618      	mov	r0, r3
 8000748:	f003 fa20 	bl	8003b8c <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000752:	f000 f8e3 	bl	800091c <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3770      	adds	r7, #112	; 0x70
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	58000400 	.word	0x58000400
 8000764:	58024800 	.word	0x58024800

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	4b40      	ldr	r3, [pc, #256]	; (8000880 <MX_GPIO_Init+0x118>)
 8000780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000784:	4a3e      	ldr	r2, [pc, #248]	; (8000880 <MX_GPIO_Init+0x118>)
 8000786:	f043 0304 	orr.w	r3, r3, #4
 800078a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078e:	4b3c      	ldr	r3, [pc, #240]	; (8000880 <MX_GPIO_Init+0x118>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079c:	4b38      	ldr	r3, [pc, #224]	; (8000880 <MX_GPIO_Init+0x118>)
 800079e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a2:	4a37      	ldr	r2, [pc, #220]	; (8000880 <MX_GPIO_Init+0x118>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ac:	4b34      	ldr	r3, [pc, #208]	; (8000880 <MX_GPIO_Init+0x118>)
 80007ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <MX_GPIO_Init+0x118>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c0:	4a2f      	ldr	r2, [pc, #188]	; (8000880 <MX_GPIO_Init+0x118>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <MX_GPIO_Init+0x118>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <MX_GPIO_Init+0x118>)
 80007da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007de:	4a28      	ldr	r2, [pc, #160]	; (8000880 <MX_GPIO_Init+0x118>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <MX_GPIO_Init+0x118>)
 80007ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MX_GPIO_Init+0x118>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a20      	ldr	r2, [pc, #128]	; (8000880 <MX_GPIO_Init+0x118>)
 80007fe:	f043 0308 	orr.w	r3, r3, #8
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_GPIO_Init+0x118>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 0308 	and.w	r3, r3, #8
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_GPIO_Init+0x118>)
 8000816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081a:	4a19      	ldr	r2, [pc, #100]	; (8000880 <MX_GPIO_Init+0x118>)
 800081c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_GPIO_Init+0x118>)
 8000826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000832:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000844:	2307      	movs	r3, #7
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_GPIO_Init+0x11c>)
 8000850:	f002 fb36 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000854:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000866:	230a      	movs	r3, #10
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_GPIO_Init+0x120>)
 8000872:	f002 fb25 	bl	8002ec0 <HAL_GPIO_Init>

}
 8000876:	bf00      	nop
 8000878:	3730      	adds	r7, #48	; 0x30
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	58024400 	.word	0x58024400
 8000884:	58020c00 	.word	0x58020c00
 8000888:	58020000 	.word	0x58020000

0800088c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000894:	f004 fa14 	bl	8004cc0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcp_client_init();
 8000898:	f004 f864 	bl	8004964 <tcp_client_init>
  /* Infinite loop */
  for(;;)
  {
		osDelay(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f005 f8db 	bl	8005a58 <osDelay>
 80008a2:	e7fb      	b.n	800089c <StartDefaultTask+0x10>

080008a4 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008aa:	463b      	mov	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008b6:	f000 fc9b 	bl	80011f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008ba:	2301      	movs	r3, #1
 80008bc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008be:	2300      	movs	r3, #0
 80008c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MPU_Config+0x74>)
 80008c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80008c6:	230e      	movs	r3, #14
 80008c8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008d2:	2303      	movs	r3, #3
 80008d4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008d6:	2301      	movs	r3, #1
 80008d8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008e6:	463b      	mov	r3, r7
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fcb9 	bl	8001260 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80008f2:	2307      	movs	r3, #7
 80008f4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008fa:	2301      	movs	r3, #1
 80008fc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80008fe:	2301      	movs	r3, #1
 8000900:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000902:	463b      	mov	r3, r7
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fcab 	bl	8001260 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800090a:	2004      	movs	r0, #4
 800090c:	f000 fc88 	bl	8001220 <HAL_MPU_Enable>

}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	30040000 	.word	0x30040000

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_MspInit+0x38>)
 8000930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000934:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_MspInit+0x38>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_MspInit+0x38>)
 8000940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000944:	f003 0302 	and.w	r3, r3, #2
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	210f      	movs	r1, #15
 8000950:	f06f 0001 	mvn.w	r0, #1
 8000954:	f000 fc24 	bl	80011a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	58024400 	.word	0x58024400

08000964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b090      	sub	sp, #64	; 0x40
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b0f      	cmp	r3, #15
 8000970:	d827      	bhi.n	80009c2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0U);
 8000972:	2200      	movs	r2, #0
 8000974:	6879      	ldr	r1, [r7, #4]
 8000976:	201d      	movs	r0, #29
 8000978:	f000 fc12 	bl	80011a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800097c:	201d      	movs	r0, #29
 800097e:	f000 fc29 	bl	80011d4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000982:	4a29      	ldr	r2, [pc, #164]	; (8000a28 <HAL_InitTick+0xc4>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000988:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <HAL_InitTick+0xc8>)
 800098a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800098e:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <HAL_InitTick+0xc8>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <HAL_InitTick+0xc8>)
 800099a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a6:	f107 0210 	add.w	r2, r7, #16
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f003 fc61 	bl	8004278 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d106      	bne.n	80009ce <HAL_InitTick+0x6a>
 80009c0:	e001      	b.n	80009c6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e02b      	b.n	8000a1e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009c6:	f003 fc41 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 80009ca:	63f8      	str	r0, [r7, #60]	; 0x3c
 80009cc:	e004      	b.n	80009d8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009ce:	f003 fc3d 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 80009d2:	4603      	mov	r3, r0
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009da:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <HAL_InitTick+0xcc>)
 80009dc:	fba2 2303 	umull	r2, r3, r2, r3
 80009e0:	0c9b      	lsrs	r3, r3, #18
 80009e2:	3b01      	subs	r3, #1
 80009e4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <HAL_InitTick+0xd0>)
 80009e8:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <HAL_InitTick+0xd4>)
 80009ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_InitTick+0xd0>)
 80009ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f2:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80009f4:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_InitTick+0xd0>)
 80009f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009f8:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_InitTick+0xd0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <HAL_InitTick+0xd0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <HAL_InitTick+0xd0>)
 8000a08:	f003 fc78 	bl	80042fc <HAL_TIM_Base_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d104      	bne.n	8000a1c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000a12:	4808      	ldr	r0, [pc, #32]	; (8000a34 <HAL_InitTick+0xd0>)
 8000a14:	f003 fcd4 	bl	80043c0 <HAL_TIM_Base_Start_IT>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	e000      	b.n	8000a1e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3740      	adds	r7, #64	; 0x40
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	24000008 	.word	0x24000008
 8000a2c:	58024400 	.word	0x58024400
 8000a30:	431bde83 	.word	0x431bde83
 8000a34:	24000310 	.word	0x24000310
 8000a38:	40000400 	.word	0x40000400

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <TIM3_IRQHandler+0x10>)
 8000a6e:	f003 fd1f 	bl	80044b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	24000310 	.word	0x24000310

08000a7c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <ETH_IRQHandler+0x10>)
 8000a82:	f001 f86b 	bl	8001b5c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	240003cc 	.word	0x240003cc

08000a90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
	return 1;
 8000a94:	2301      	movs	r3, #1
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <_kill>:

int _kill(int pid, int sig)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <_kill+0x20>)
 8000aac:	2216      	movs	r2, #22
 8000aae:	601a      	str	r2, [r3, #0]
	return -1;
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	24007438 	.word	0x24007438

08000ac4 <_exit>:

void _exit (int status)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000acc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ffe5 	bl	8000aa0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ad6:	e7fe      	b.n	8000ad6 <_exit+0x12>

08000ad8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	e00a      	b.n	8000b00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000aea:	f3af 8000 	nop.w
 8000aee:	4601      	mov	r1, r0
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	60ba      	str	r2, [r7, #8]
 8000af6:	b2ca      	uxtb	r2, r1
 8000af8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	3301      	adds	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	dbf0      	blt.n	8000aea <_read+0x12>
	}

return len;
 8000b08:	687b      	ldr	r3, [r7, #4]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	60f8      	str	r0, [r7, #12]
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	e009      	b.n	8000b38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	60ba      	str	r2, [r7, #8]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	dbf1      	blt.n	8000b24 <_write+0x12>
	}
	return len;
 8000b40:	687b      	ldr	r3, [r7, #4]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_close>:

int _close(int file)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
	return -1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b72:	605a      	str	r2, [r3, #4]
	return 0;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <_isatty>:

int _isatty(int file)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
	return 1;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b087      	sub	sp, #28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bbc:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <_sbrk+0x5c>)
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <_sbrk+0x60>)
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <_sbrk+0x64>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <_sbrk+0x68>)
 8000bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d205      	bcs.n	8000bf0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <_sbrk+0x6c>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <_sbrk+0x64>)
 8000c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	371c      	adds	r7, #28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	24080000 	.word	0x24080000
 8000c14:	00000400 	.word	0x00000400
 8000c18:	2400035c 	.word	0x2400035c
 8000c1c:	240074c0 	.word	0x240074c0
 8000c20:	24007438 	.word	0x24007438

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c28:	f7ff fbaa 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	; (8000c70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c52:	f012 fe5b 	bl	801390c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fc43 	bl	80004e0 <main>
  bx  lr
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c5c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c64:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8000c68:	08017ff4 	.word	0x08017ff4
  ldr r2, =_sbss
 8000c6c:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8000c70:	240074bc 	.word	0x240074bc

08000c74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC3_IRQHandler>

08000c76 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00b      	beq.n	8000c9e <LAN8742_RegisterBusIO+0x28>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d007      	beq.n	8000c9e <LAN8742_RegisterBusIO+0x28>
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <LAN8742_RegisterBusIO+0x28>
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e014      	b.n	8000cce <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	691a      	ldr	r2, [r3, #16]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d17c      	bne.n	8000df4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d002      	beq.n	8000d08 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e01c      	b.n	8000d4e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	f107 0208 	add.w	r2, r7, #8
 8000d1c:	2112      	movs	r1, #18
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	4798      	blx	r3
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	da03      	bge.n	8000d30 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000d28:	f06f 0304 	mvn.w	r3, #4
 8000d2c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000d2e:	e00b      	b.n	8000d48 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	f003 031f 	and.w	r3, r3, #31
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d105      	bne.n	8000d48 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
         break;
 8000d46:	e005      	b.n	8000d54 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	2b1f      	cmp	r3, #31
 8000d52:	d9df      	bls.n	8000d14 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b1f      	cmp	r3, #31
 8000d5a:	d902      	bls.n	8000d62 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d5c:	f06f 0302 	mvn.w	r3, #2
 8000d60:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d145      	bne.n	8000df4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	6810      	ldr	r0, [r2, #0]
 8000d70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d74:	2100      	movs	r1, #0
 8000d76:	4798      	blx	r3
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db37      	blt.n	8000dee <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6810      	ldr	r0, [r2, #0]
 8000d86:	f107 0208 	add.w	r2, r7, #8
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4798      	blx	r3
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db28      	blt.n	8000de6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4798      	blx	r3
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d9e:	e01c      	b.n	8000dda <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4798      	blx	r3
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000db2:	d80e      	bhi.n	8000dd2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	6810      	ldr	r0, [r2, #0]
 8000dbc:	f107 0208 	add.w	r2, r7, #8
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4798      	blx	r3
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	da07      	bge.n	8000dda <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000dca:	f06f 0304 	mvn.w	r3, #4
 8000dce:	613b      	str	r3, [r7, #16]
                 break;
 8000dd0:	e010      	b.n	8000df4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000dd2:	f06f 0301 	mvn.w	r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]
               break;
 8000dd8:	e00c      	b.n	8000df4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1dd      	bne.n	8000da0 <LAN8742_Init+0xc6>
 8000de4:	e006      	b.n	8000df4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000de6:	f06f 0304 	mvn.w	r3, #4
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	e002      	b.n	8000df4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000dee:	f06f 0303 	mvn.w	r3, #3
 8000df2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d112      	bne.n	8000e20 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	4798      	blx	r3
 8000e00:	4603      	mov	r3, r0
 8000e02:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e04:	bf00      	nop
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	4798      	blx	r3
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e18:	d9f5      	bls.n	8000e06 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000e20:	693b      	ldr	r3, [r7, #16]
 }
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	6810      	ldr	r0, [r2, #0]
 8000e3e:	f107 020c 	add.w	r2, r7, #12
 8000e42:	2101      	movs	r1, #1
 8000e44:	4798      	blx	r3
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	da02      	bge.n	8000e52 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e4c:	f06f 0304 	mvn.w	r3, #4
 8000e50:	e06e      	b.n	8000f30 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6810      	ldr	r0, [r2, #0]
 8000e5a:	f107 020c 	add.w	r2, r7, #12
 8000e5e:	2101      	movs	r1, #1
 8000e60:	4798      	blx	r3
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	da02      	bge.n	8000e6e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e68:	f06f 0304 	mvn.w	r3, #4
 8000e6c:	e060      	b.n	8000f30 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e059      	b.n	8000f30 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	6810      	ldr	r0, [r2, #0]
 8000e84:	f107 020c 	add.w	r2, r7, #12
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4798      	blx	r3
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	da02      	bge.n	8000e98 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e92:	f06f 0304 	mvn.w	r3, #4
 8000e96:	e04b      	b.n	8000f30 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d11b      	bne.n	8000eda <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d006      	beq.n	8000eba <LAN8742_GetLinkState+0x90>
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e03a      	b.n	8000f30 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e033      	b.n	8000f30 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	e02c      	b.n	8000f30 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	e02a      	b.n	8000f30 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	6810      	ldr	r0, [r2, #0]
 8000ee2:	f107 020c 	add.w	r2, r7, #12
 8000ee6:	211f      	movs	r1, #31
 8000ee8:	4798      	blx	r3
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	da02      	bge.n	8000ef6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000ef0:	f06f 0304 	mvn.w	r3, #4
 8000ef4:	e01c      	b.n	8000f30 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f00:	2306      	movs	r3, #6
 8000f02:	e015      	b.n	8000f30 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 031c 	and.w	r3, r3, #28
 8000f0a:	2b18      	cmp	r3, #24
 8000f0c:	d101      	bne.n	8000f12 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e00e      	b.n	8000f30 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f003 031c 	and.w	r3, r3, #28
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d101      	bne.n	8000f20 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e007      	b.n	8000f30 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 031c 	and.w	r3, r3, #28
 8000f26:	2b14      	cmp	r3, #20
 8000f28:	d101      	bne.n	8000f2e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	e000      	b.n	8000f30 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f2e:	2305      	movs	r3, #5
    }				
  }
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f000 f923 	bl	800118a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f44:	f002 ffd8 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_Init+0x68>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	0a1b      	lsrs	r3, r3, #8
 8000f50:	f003 030f 	and.w	r3, r3, #15
 8000f54:	4913      	ldr	r1, [pc, #76]	; (8000fa4 <HAL_Init+0x6c>)
 8000f56:	5ccb      	ldrb	r3, [r1, r3]
 8000f58:	f003 031f 	and.w	r3, r3, #31
 8000f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_Init+0x68>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <HAL_Init+0x6c>)
 8000f6c:	5cd3      	ldrb	r3, [r2, r3]
 8000f6e:	f003 031f 	and.w	r3, r3, #31
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	fa22 f303 	lsr.w	r3, r2, r3
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_Init+0x70>)
 8000f7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <HAL_Init+0x74>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f82:	200f      	movs	r0, #15
 8000f84:	f7ff fcee 	bl	8000964 <HAL_InitTick>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e002      	b.n	8000f98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f92:	f7ff fcc9 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	58024400 	.word	0x58024400
 8000fa4:	08017d5c 	.word	0x08017d5c
 8000fa8:	24000004 	.word	0x24000004
 8000fac:	24000000 	.word	0x24000000

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2400000c 	.word	0x2400000c
 8000fd4:	24000360 	.word	0x24000360

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	24000360 	.word	0x24000360

08000ff0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetREVID+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	0c1b      	lsrs	r3, r3, #16
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	5c001000 	.word	0x5c001000

08001008 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001018:	4904      	ldr	r1, [pc, #16]	; (800102c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	58000400 	.word	0x58000400

08001030 <__NVIC_SetPriorityGrouping>:
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <__NVIC_SetPriorityGrouping+0x40>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	4313      	orrs	r3, r2
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <__NVIC_SetPriorityGrouping+0x40>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	05fa0000 	.word	0x05fa0000

08001078 <__NVIC_GetPriorityGrouping>:
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	88fb      	ldrh	r3, [r7, #6]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff4c 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011ae:	f7ff ff63 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	68b9      	ldr	r1, [r7, #8]
 80011b8:	6978      	ldr	r0, [r7, #20]
 80011ba:	f7ff ffb3 	bl	8001124 <NVIC_EncodePriority>
 80011be:	4602      	mov	r2, r0
 80011c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff82 	bl	80010d0 <__NVIC_SetPriority>
}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff ff56 	bl	8001094 <__NVIC_EnableIRQ>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80011f4:	f3bf 8f5f 	dmb	sy
}
 80011f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_MPU_Disable+0x28>)
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_MPU_Disable+0x28>)
 8001200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001204:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_MPU_Disable+0x2c>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00
 800121c:	e000ed90 	.word	0xe000ed90

08001220 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001228:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_MPU_Enable+0x38>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_MPU_Enable+0x3c>)
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <HAL_MPU_Enable+0x3c>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800123e:	f3bf 8f4f 	dsb	sy
}
 8001242:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001244:	f3bf 8f6f 	isb	sy
}
 8001248:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed90 	.word	0xe000ed90
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	785a      	ldrb	r2, [r3, #1]
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <HAL_MPU_ConfigRegion+0x84>)
 800126e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d029      	beq.n	80012cc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001278:	4a1a      	ldr	r2, [pc, #104]	; (80012e4 <HAL_MPU_ConfigRegion+0x84>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7b1b      	ldrb	r3, [r3, #12]
 8001284:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7adb      	ldrb	r3, [r3, #11]
 800128a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800128c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7a9b      	ldrb	r3, [r3, #10]
 8001292:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001294:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	7b5b      	ldrb	r3, [r3, #13]
 800129a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800129c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7b9b      	ldrb	r3, [r3, #14]
 80012a2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7bdb      	ldrb	r3, [r3, #15]
 80012aa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7a5b      	ldrb	r3, [r3, #9]
 80012b2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7a1b      	ldrb	r3, [r3, #8]
 80012ba:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012bc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	7812      	ldrb	r2, [r2, #0]
 80012c2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012c6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012c8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80012ca:	e005      	b.n	80012d8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_MPU_ConfigRegion+0x84>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <HAL_MPU_ConfigRegion+0x84>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed90 	.word	0xe000ed90

080012e8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <HAL_GetCurrentCPUID+0x24>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	2b07      	cmp	r3, #7
 80012f8:	d101      	bne.n	80012fe <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e000      	b.n	8001300 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80012fe:	2301      	movs	r3, #1
  }
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e0cf      	b.n	80014c2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001328:	2b00      	cmp	r3, #0
 800132a:	d106      	bne.n	800133a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2223      	movs	r2, #35	; 0x23
 8001330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f004 f8ad 	bl	8005494 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	4b64      	ldr	r3, [pc, #400]	; (80014cc <HAL_ETH_Init+0x1bc>)
 800133c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001340:	4a62      	ldr	r2, [pc, #392]	; (80014cc <HAL_ETH_Init+0x1bc>)
 8001342:	f043 0302 	orr.w	r3, r3, #2
 8001346:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800134a:	4b60      	ldr	r3, [pc, #384]	; (80014cc <HAL_ETH_Init+0x1bc>)
 800134c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7a1b      	ldrb	r3, [r3, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d103      	bne.n	8001368 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fe51 	bl	8001008 <HAL_SYSCFG_ETHInterfaceSelect>
 8001366:	e003      	b.n	8001370 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001368:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800136c:	f7ff fe4c 	bl	8001008 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001370:	4b57      	ldr	r3, [pc, #348]	; (80014d0 <HAL_ETH_Init+0x1c0>)
 8001372:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800138a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800138c:	f7ff fe24 	bl	8000fd8 <HAL_GetTick>
 8001390:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001392:	e011      	b.n	80013b8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001394:	f7ff fe20 	bl	8000fd8 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013a2:	d909      	bls.n	80013b8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2204      	movs	r2, #4
 80013a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	22e0      	movs	r2, #224	; 0xe0
 80013b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e084      	b.n	80014c2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1e4      	bne.n	8001394 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 ff9e 	bl	800230c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013d0:	f002 ff0c 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a3f      	ldr	r2, [pc, #252]	; (80014d4 <HAL_ETH_Init+0x1c4>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	0c9a      	lsrs	r2, r3, #18
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3a01      	subs	r2, #1
 80013e4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f001 f997 	bl	800271c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80013fa:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001406:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800140a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d009      	beq.n	800142e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	22e0      	movs	r2, #224	; 0xe0
 8001426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e049      	b.n	80014c2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001436:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800143a:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <HAL_ETH_Init+0x1c8>)
 800143c:	4013      	ands	r3, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6952      	ldr	r2, [r2, #20]
 8001442:	0051      	lsls	r1, r2, #1
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	430b      	orrs	r3, r1
 800144a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800144e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f001 f9ff 	bl	8002856 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f001 fa45 	bl	80028e8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	3305      	adds	r3, #5
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	021a      	lsls	r2, r3, #8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	3304      	adds	r3, #4
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	3303      	adds	r3, #3
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	061a      	lsls	r2, r3, #24
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	3302      	adds	r3, #2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	041b      	lsls	r3, r3, #16
 8001490:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	3301      	adds	r3, #1
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800149c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014aa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2210      	movs	r2, #16
 80014bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	58024400 	.word	0x58024400
 80014d0:	58000400 	.word	0x58000400
 80014d4:	431bde83 	.word	0x431bde83
 80014d8:	ffff8001 	.word	0xffff8001

080014dc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014ea:	2b10      	cmp	r3, #16
 80014ec:	d153      	bne.n	8001596 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2223      	movs	r2, #35	; 0x23
 80014f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2204      	movs	r2, #4
 80014fa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fa64 	bl	80019ca <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 0202 	orr.w	r2, r2, #2
 8001510:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 0201 	orr.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0201 	orr.w	r2, r2, #1
 8001532:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800154e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800155a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800156a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001576:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001582:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001586:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2223      	movs	r2, #35	; 0x23
 800158e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
  }
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015ae:	2b10      	cmp	r3, #16
 80015b0:	d179      	bne.n	80016a6 <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2223      	movs	r2, #35	; 0x23
 80015b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <HAL_ETH_Start_IT+0x110>)
 80015ce:	430b      	orrs	r3, r1
 80015d0:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <HAL_ETH_Start_IT+0x114>)
 80015e2:	430b      	orrs	r3, r1
 80015e4:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2204      	movs	r2, #4
 80015ec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f9eb 	bl	80019ca <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0202 	orr.w	r2, r2, #2
 8001602:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f042 0201 	orr.w	r2, r2, #1
 8001624:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001630:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001640:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800165c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001668:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001674:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001678:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001684:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8001690:	430b      	orrs	r3, r1
 8001692:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001696:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2223      	movs	r2, #35	; 0x23
 800169e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
  }
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	0c020060 	.word	0x0c020060
 80016b4:	0c20c000 	.word	0x0c20c000

080016b8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016c6:	2b23      	cmp	r3, #35	; 0x23
 80016c8:	d165      	bne.n	8001796 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2223      	movs	r2, #35	; 0x23
 80016ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016da:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <HAL_ETH_Stop_IT+0xec>)
 80016e4:	400b      	ands	r3, r1
 80016e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ea:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001706:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001712:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001722:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0201 	bic.w	r2, r2, #1
 8001734:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0202 	bic.w	r2, r2, #2
 8001758:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	e00e      	b.n	800177e <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	3212      	adds	r2, #18
 8001766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176a:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	3301      	adds	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b03      	cmp	r3, #3
 8001782:	d9ed      	bls.n	8001760 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2210      	movs	r2, #16
 800178e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
  }
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	ffff2f3e 	.word	0xffff2f3e

080017a8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d109      	bne.n	80017cc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017be:	f043 0201 	orr.w	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e03a      	b.n	8001842 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017d2:	2b23      	cmp	r3, #35	; 0x23
 80017d4:	d134      	bne.n	8001840 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80017de:	2201      	movs	r2, #1
 80017e0:	6839      	ldr	r1, [r7, #0]
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f001 f8de 	bl	80029a4 <ETH_Prepare_Tx_Descriptors>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f4:	f043 0202 	orr.w	r2, r3, #2
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e01f      	b.n	8001842 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001802:	f3bf 8f4f 	dsb	sy
}
 8001806:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	2b03      	cmp	r3, #3
 8001818:	d904      	bls.n	8001824 <HAL_ETH_Transmit_IT+0x7c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	1f1a      	subs	r2, r3, #4
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3106      	adds	r1, #6
 8001830:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001834:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001838:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	e000      	b.n	8001842 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
  }
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b088      	sub	sp, #32
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e0a5      	b.n	80019c2 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800187c:	2b23      	cmp	r3, #35	; 0x23
 800187e:	d001      	beq.n	8001884 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e09e      	b.n	80019c2 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001888:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	3212      	adds	r2, #18
 8001890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001894:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800189a:	f1c3 0304 	rsb	r3, r3, #4
 800189e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018a0:	e067      	b.n	8001972 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d103      	bne.n	80018d2 <HAL_ETH_ReadData+0x88>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d03d      	beq.n	800194e <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00d      	beq.n	8001918 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001928:	461a      	mov	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	b29b      	uxth	r3, r3
 800192e:	f003 ff93 	bl	8005858 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	441a      	add	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3301      	adds	r3, #1
 8001952:	61fb      	str	r3, [r7, #28]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d902      	bls.n	8001960 <HAL_ETH_ReadData+0x116>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b04      	subs	r3, #4
 800195e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	3212      	adds	r2, #18
 8001966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db06      	blt.n	8001988 <HAL_ETH_ReadData+0x13e>
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	429a      	cmp	r2, r3
 8001980:	d202      	bcs.n	8001988 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d08c      	beq.n	80018a2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	441a      	add	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f814 	bl	80019ca <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d108      	bne.n	80019c0 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	e000      	b.n	80019c2 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3720      	adds	r7, #32
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b088      	sub	sp, #32
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80019d6:	2301      	movs	r3, #1
 80019d8:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019de:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	3212      	adds	r2, #18
 80019e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ea:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019f0:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80019f2:	e03b      	b.n	8001a6c <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d112      	bne.n	8001a22 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	4618      	mov	r0, r3
 8001a02:	f003 fef9 	bl	80057f8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	74fb      	strb	r3, [r7, #19]
 8001a10:	e007      	b.n	8001a22 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	461a      	mov	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001a22:	7cfb      	ldrb	r3, [r7, #19]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d021      	beq.n	8001a6c <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001a28:	f3bf 8f5f 	dmb	sy
}
 8001a2c:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d004      	beq.n	8001a40 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	e003      	b.n	8001a48 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001a46:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d902      	bls.n	8001a5a <ETH_UpdateDescriptor+0x90>
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	3b04      	subs	r3, #4
 8001a58:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	3212      	adds	r2, #18
 8001a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a64:	617b      	str	r3, [r7, #20]
      desccount--;
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <ETH_UpdateDescriptor+0xae>
 8001a72:	7cfb      	ldrb	r3, [r7, #19]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1bd      	bne.n	80019f4 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d00d      	beq.n	8001a9e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3318      	adds	r3, #24
 8001ab2:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abe:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001ac4:	e03f      	b.n	8001b46 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d106      	bne.n	8001aee <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001aee:	7bbb      	ldrb	r3, [r7, #14]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d028      	beq.n	8001b46 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68d9      	ldr	r1, [r3, #12]
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	440b      	add	r3, r1
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	db1b      	blt.n	8001b42 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 ff06 	bl	8005928 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	3304      	adds	r3, #4
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	2200      	movs	r2, #0
 8001b28:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b40:	e001      	b.n	8001b46 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <HAL_ETH_ReleaseTxPacket+0xac>
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1b9      	bne.n	8001ac6 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b74:	2b40      	cmp	r3, #64	; 0x40
 8001b76:	d115      	bne.n	8001ba4 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b80:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b88:	2b40      	cmp	r3, #64	; 0x40
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b94:	461a      	mov	r2, r3
 8001b96:	f248 0340 	movw	r3, #32832	; 0x8040
 8001b9a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f003 f9de 	bl	8004f60 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bac:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d115      	bne.n	8001be4 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d10b      	bne.n	8001be4 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	f248 0301 	movw	r3, #32769	; 0x8001
 8001bda:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f003 f9ce 	bl	8004f80 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bec:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bf8:	d153      	bne.n	8001ca2 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c02:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c0e:	d148      	bne.n	8001ca2 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c16:	f043 0208 	orr.w	r2, r3, #8
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c28:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c34:	d11e      	bne.n	8001c74 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001c42:	f241 1302 	movw	r3, #4354	; 0x1102
 8001c46:	4013      	ands	r3, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c56:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c66:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	22e0      	movs	r2, #224	; 0xe0
 8001c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001c72:	e013      	b.n	8001c9c <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c80:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c92:	461a      	mov	r2, r3
 8001c94:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001c98:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f003 f97f 	bl	8004fa0 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001caa:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d104      	bne.n	8001cc0 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d019      	beq.n	8001cf4 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc6:	f043 0210 	orr.w	r2, r3, #16
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	22e0      	movs	r2, #224	; 0xe0
 8001ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f003 f95a 	bl	8004fa0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b10      	cmp	r3, #16
 8001d02:	d10f      	bne.n	8001d24 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d0c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f844 	bl	8001da4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d2c:	f003 0320 	and.w	r3, r3, #32
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d10f      	bne.n	8001d54 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d3c:	f003 020f 	and.w	r2, r3, #15
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f836 	bl	8001db8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001d54:	f7ff fac8 	bl	80012e8 <HAL_GetCurrentCPUID>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d10d      	bne.n	8001d7a <HAL_ETH_IRQHandler+0x21e>
  {
    /* check ETH WAKEUP exti flag */
    if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_ETH_IRQHandler+0x240>)
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d014      	beq.n	8001d94 <HAL_ETH_IRQHandler+0x238>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_ETH_IRQHandler+0x240>)
 8001d6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f82a 	bl	8001dcc <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8001d78:	e00c      	b.n	8001d94 <HAL_ETH_IRQHandler+0x238>
    if (__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_ETH_IRQHandler+0x244>)
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d006      	beq.n	8001d94 <HAL_ETH_IRQHandler+0x238>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_ETH_IRQHandler+0x244>)
 8001d88:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d8c:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f81c 	bl	8001dcc <HAL_ETH_WakeUpCallback>
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	58000080 	.word	0x58000080
 8001da0:	580000c0 	.word	0x580000c0

08001da4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e03e      	b.n	8001e80 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e0a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	055b      	lsls	r3, r3, #21
 8001e16:	4313      	orrs	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	041b      	lsls	r3, r3, #16
 8001e24:	4313      	orrs	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f043 030c 	orr.w	r3, r3, #12
 8001e2e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001e42:	f7ff f8c9 	bl	8000fd8 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e48:	e009      	b.n	8001e5e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001e4a:	f7ff f8c5 	bl	8000fd8 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e58:	d901      	bls.n	8001e5e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e010      	b.n	8001e80 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ed      	bne.n	8001e4a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e03c      	b.n	8001f24 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eb2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	055b      	lsls	r3, r3, #21
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	041b      	lsls	r3, r3, #16
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f023 030c 	bic.w	r3, r3, #12
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_ETH_WritePHYRegister+0xa4>)
 8001eea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001eee:	4a0f      	ldr	r2, [pc, #60]	; (8001f2c <HAL_ETH_WritePHYRegister+0xa4>)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001ef6:	f7ff f86f 	bl	8000fd8 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001efc:	e009      	b.n	8001f12 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001efe:	f7ff f86b 	bl	8000fd8 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f0c:	d901      	bls.n	8001f12 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e008      	b.n	8001f24 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1ed      	bne.n	8001efe <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40028000 	.word	0x40028000

08001f30 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e1c3      	b.n	80022cc <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 020c 	and.w	r2, r3, #12
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	bf0c      	ite	eq
 8001f8a:	2301      	moveq	r3, #1
 8001f8c:	2300      	movne	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf14      	ite	ne
 8001fa6:	2301      	movne	r3, #1
 8001fa8:	2300      	moveq	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf0c      	ite	eq
 8001fc0:	2301      	moveq	r3, #1
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bf14      	ite	ne
 8001fda:	2301      	movne	r3, #1
 8001fdc:	2300      	moveq	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf14      	ite	ne
 8001ff4:	2301      	movne	r3, #1
 8001ff6:	2300      	moveq	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002026:	2b00      	cmp	r3, #0
 8002028:	bf14      	ite	ne
 800202a:	2301      	movne	r3, #1
 800202c:	2300      	moveq	r3, #0
 800202e:	b2db      	uxtb	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf0c      	ite	eq
 800205e:	2301      	moveq	r3, #1
 8002060:	2300      	movne	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf14      	ite	ne
 8002078:	2301      	movne	r3, #1
 800207a:	2300      	moveq	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80020be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bf14      	ite	ne
 80020c6:	2301      	movne	r3, #1
 80020c8:	2300      	moveq	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf14      	ite	ne
 80020ee:	2301      	movne	r3, #1
 80020f0:	2300      	moveq	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf14      	ite	ne
 800215c:	2301      	movne	r3, #1
 800215e:	2300      	moveq	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf14      	ite	ne
 8002178:	2301      	movne	r3, #1
 800217a:	2300      	moveq	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	0e5b      	lsrs	r3, r3, #25
 800218e:	f003 021f 	and.w	r2, r3, #31
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf14      	ite	ne
 80021a4:	2301      	movne	r3, #1
 80021a6:	2300      	moveq	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 020f 	and.w	r2, r3, #15
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf14      	ite	ne
 80021ce:	2301      	movne	r3, #1
 80021d0:	2300      	moveq	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	0c1b      	lsrs	r3, r3, #16
 800220e:	b29a      	uxth	r2, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf14      	ite	ne
 8002224:	2301      	movne	r3, #1
 8002226:	2300      	moveq	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800223e:	2b00      	cmp	r3, #0
 8002240:	bf14      	ite	ne
 8002242:	2301      	movne	r3, #1
 8002244:	2300      	moveq	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002258:	f003 0272 	and.w	r2, r3, #114	; 0x72
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002268:	f003 0223 	and.w	r2, r3, #35	; 0x23
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf14      	ite	ne
 8002280:	2301      	movne	r3, #1
 8002282:	2300      	moveq	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	bf14      	ite	ne
 800229e:	2301      	movne	r3, #1
 80022a0:	2300      	moveq	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80022b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e00b      	b.n	8002304 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f2:	2b10      	cmp	r3, #16
 80022f4:	d105      	bne.n	8002302 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80022f6:	6839      	ldr	r1, [r7, #0]
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f86d 	bl	80023d8 <ETH_SetMACConfig>

    return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
  }
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800231c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002324:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002326:	f001 ff61 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 800232a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4a1e      	ldr	r2, [pc, #120]	; (80023a8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d908      	bls.n	8002346 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d804      	bhi.n	8002346 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	e027      	b.n	8002396 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	4a18      	ldr	r2, [pc, #96]	; (80023ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d908      	bls.n	8002360 <HAL_ETH_SetMDIOClockRange+0x54>
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d204      	bcs.n	8002360 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	e01a      	b.n	8002396 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4a13      	ldr	r2, [pc, #76]	; (80023b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d303      	bcc.n	8002370 <HAL_ETH_SetMDIOClockRange+0x64>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d911      	bls.n	8002394 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d908      	bls.n	800238a <HAL_ETH_SetMDIOClockRange+0x7e>
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4a0f      	ldr	r2, [pc, #60]	; (80023b8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d804      	bhi.n	800238a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e005      	b.n	8002396 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	e000      	b.n	8002396 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002394:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	01312cff 	.word	0x01312cff
 80023ac:	02160ebf 	.word	0x02160ebf
 80023b0:	03938700 	.word	0x03938700
 80023b4:	05f5e0ff 	.word	0x05f5e0ff
 80023b8:	08f0d17f 	.word	0x08f0d17f

080023bc <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80023ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	791b      	ldrb	r3, [r3, #4]
 80023f0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80023f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	7b1b      	ldrb	r3, [r3, #12]
 80023f8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80023fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	7b5b      	ldrb	r3, [r3, #13]
 8002400:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002402:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	7b9b      	ldrb	r3, [r3, #14]
 8002408:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800240a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	7bdb      	ldrb	r3, [r3, #15]
 8002410:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002412:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	7c12      	ldrb	r2, [r2, #16]
 8002418:	2a00      	cmp	r2, #0
 800241a:	d102      	bne.n	8002422 <ETH_SetMACConfig+0x4a>
 800241c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002420:	e000      	b.n	8002424 <ETH_SetMACConfig+0x4c>
 8002422:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002424:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	7c52      	ldrb	r2, [r2, #17]
 800242a:	2a00      	cmp	r2, #0
 800242c:	d102      	bne.n	8002434 <ETH_SetMACConfig+0x5c>
 800242e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002432:	e000      	b.n	8002436 <ETH_SetMACConfig+0x5e>
 8002434:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002436:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	7c9b      	ldrb	r3, [r3, #18]
 800243c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800243e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002444:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800244a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	7f1b      	ldrb	r3, [r3, #28]
 8002450:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002452:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	7f5b      	ldrb	r3, [r3, #29]
 8002458:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800245a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	7f92      	ldrb	r2, [r2, #30]
 8002460:	2a00      	cmp	r2, #0
 8002462:	d102      	bne.n	800246a <ETH_SetMACConfig+0x92>
 8002464:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002468:	e000      	b.n	800246c <ETH_SetMACConfig+0x94>
 800246a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800246c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	7fdb      	ldrb	r3, [r3, #31]
 8002472:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002474:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	f892 2020 	ldrb.w	r2, [r2, #32]
 800247c:	2a00      	cmp	r2, #0
 800247e:	d102      	bne.n	8002486 <ETH_SetMACConfig+0xae>
 8002480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002484:	e000      	b.n	8002488 <ETH_SetMACConfig+0xb0>
 8002486:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002488:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800248e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002496:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002498:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b56      	ldr	r3, [pc, #344]	; (8002604 <ETH_SetMACConfig+0x22c>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	68f9      	ldr	r1, [r7, #12]
 80024b2:	430b      	orrs	r3, r1
 80024b4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024c2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80024c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024cc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80024ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80024d6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80024d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	d102      	bne.n	80024ea <ETH_SetMACConfig+0x112>
 80024e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024e8:	e000      	b.n	80024ec <ETH_SetMACConfig+0x114>
 80024ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80024ec:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	4b42      	ldr	r3, [pc, #264]	; (8002608 <ETH_SetMACConfig+0x230>)
 80024fe:	4013      	ands	r3, r2
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	430b      	orrs	r3, r1
 8002508:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002510:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	4b3a      	ldr	r3, [pc, #232]	; (800260c <ETH_SetMACConfig+0x234>)
 8002522:	4013      	ands	r3, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	68f9      	ldr	r1, [r7, #12]
 800252a:	430b      	orrs	r3, r1
 800252c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002534:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800253a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002542:	2a00      	cmp	r2, #0
 8002544:	d101      	bne.n	800254a <ETH_SetMACConfig+0x172>
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	e000      	b.n	800254c <ETH_SetMACConfig+0x174>
 800254a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800254c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002552:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800255e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002562:	4013      	ands	r3, r2
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	68f9      	ldr	r1, [r7, #12]
 800256a:	430b      	orrs	r3, r1
 800256c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002574:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800257c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f023 0103 	bic.w	r1, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	430a      	orrs	r2, r1
 8002596:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80025a2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80025be:	2a00      	cmp	r2, #0
 80025c0:	d101      	bne.n	80025c6 <ETH_SetMACConfig+0x1ee>
 80025c2:	2240      	movs	r2, #64	; 0x40
 80025c4:	e000      	b.n	80025c8 <ETH_SetMACConfig+0x1f0>
 80025c6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80025c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80025d0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80025d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80025da:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80025dc:	4313      	orrs	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80025e8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	00048083 	.word	0x00048083
 8002608:	c0f88000 	.word	0xc0f88000
 800260c:	fffffef0 	.word	0xfffffef0

08002610 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b38      	ldr	r3, [pc, #224]	; (8002708 <ETH_SetDMAConfig+0xf8>)
 8002626:	4013      	ands	r3, r2
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	6811      	ldr	r1, [r2, #0]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	430b      	orrs	r3, r1
 8002632:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002636:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	791b      	ldrb	r3, [r3, #4]
 800263c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002642:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	7b1b      	ldrb	r3, [r3, #12]
 8002648:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <ETH_SetDMAConfig+0xfc>)
 800265a:	4013      	ands	r3, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	68f9      	ldr	r1, [r7, #12]
 8002662:	430b      	orrs	r3, r1
 8002664:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002668:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	7b5b      	ldrb	r3, [r3, #13]
 800266e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002680:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002684:	4b22      	ldr	r3, [pc, #136]	; (8002710 <ETH_SetDMAConfig+0x100>)
 8002686:	4013      	ands	r3, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	68f9      	ldr	r1, [r7, #12]
 800268e:	430b      	orrs	r3, r1
 8002690:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002694:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	7d1b      	ldrb	r3, [r3, #20]
 80026a0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80026a2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	7f5b      	ldrb	r3, [r3, #29]
 80026a8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <ETH_SetDMAConfig+0x104>)
 80026bc:	4013      	ands	r3, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	68f9      	ldr	r1, [r7, #12]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026ca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	7f1b      	ldrb	r3, [r3, #28]
 80026d2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <ETH_SetDMAConfig+0x108>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	430b      	orrs	r3, r1
 80026f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026f8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	ffff87fd 	.word	0xffff87fd
 800270c:	ffff2ffe 	.word	0xffff2ffe
 8002710:	fffec000 	.word	0xfffec000
 8002714:	ffc0efef 	.word	0xffc0efef
 8002718:	7fc0ffff 	.word	0x7fc0ffff

0800271c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b0a4      	sub	sp, #144	; 0x90
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002724:	2301      	movs	r3, #1
 8002726:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800272a:	2300      	movs	r3, #0
 800272c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002734:	2300      	movs	r3, #0
 8002736:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800273a:	2301      	movs	r3, #1
 800273c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002740:	2301      	movs	r3, #1
 8002742:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002746:	2301      	movs	r3, #1
 8002748:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002752:	2301      	movs	r3, #1
 8002754:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800275c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002764:	2300      	movs	r3, #0
 8002766:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002768:	2300      	movs	r3, #0
 800276a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002774:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002778:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002780:	2300      	movs	r3, #0
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002784:	2301      	movs	r3, #1
 8002786:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800278a:	2300      	movs	r3, #0
 800278c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002796:	2300      	movs	r3, #0
 8002798:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800279a:	2300      	movs	r3, #0
 800279c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800279e:	2300      	movs	r3, #0
 80027a0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80027ae:	2301      	movs	r3, #1
 80027b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80027b4:	2320      	movs	r3, #32
 80027b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80027ba:	2301      	movs	r3, #1
 80027bc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80027c6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027d0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80027d8:	2302      	movs	r3, #2
 80027da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80027f0:	2301      	movs	r3, #1
 80027f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80027f6:	2300      	movs	r3, #0
 80027f8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002804:	4619      	mov	r1, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff fde6 	bl	80023d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800280c:	2301      	movs	r3, #1
 800280e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002810:	2301      	movs	r3, #1
 8002812:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002822:	2300      	movs	r3, #0
 8002824:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002826:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800282a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800282c:	2300      	movs	r3, #0
 800282e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002830:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002834:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800283c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002842:	f107 0308 	add.w	r3, r7, #8
 8002846:	4619      	mov	r1, r3
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff fee1 	bl	8002610 <ETH_SetDMAConfig>
}
 800284e:	bf00      	nop
 8002850:	3790      	adds	r7, #144	; 0x90
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002856:	b480      	push	{r7}
 8002858:	b085      	sub	sp, #20
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	e01d      	b.n	80028a0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68d9      	ldr	r1, [r3, #12]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2200      	movs	r2, #0
 8002880:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800288e:	68b9      	ldr	r1, [r7, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	3206      	adds	r2, #6
 8002896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3301      	adds	r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d9de      	bls.n	8002864 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b4:	461a      	mov	r2, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e023      	b.n	800293e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6919      	ldr	r1, [r3, #16]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2200      	movs	r2, #0
 8002912:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2200      	movs	r2, #0
 800291e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2200      	movs	r2, #0
 800292a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	3212      	adds	r2, #18
 8002934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	3301      	adds	r3, #1
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d9d8      	bls.n	80028f6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800296a:	461a      	mov	r2, r3
 800296c:	2303      	movs	r3, #3
 800296e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800297e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002992:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b08d      	sub	sp, #52	; 0x34
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3318      	adds	r3, #24
 80029b4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ce:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029e6:	d007      	beq.n	80029f8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	3304      	adds	r3, #4
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80029f8:	2302      	movs	r3, #2
 80029fa:	e259      	b.n	8002eb0 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d044      	beq.n	8002a92 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a14:	431a      	orrs	r2, r3
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a34:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d027      	beq.n	8002a92 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	041b      	lsls	r3, r3, #16
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a80:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a90:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00e      	beq.n	8002abc <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	4b51      	ldr	r3, [pc, #324]	; (8002be8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	6992      	ldr	r2, [r2, #24]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d105      	bne.n	8002ad4 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d036      	beq.n	8002b42 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ae0:	f3bf 8f5f 	dmb	sy
}
 8002ae4:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af4:	3301      	adds	r3, #1
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d902      	bls.n	8002b04 <ETH_Prepare_Tx_Descriptors+0x160>
 8002afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b00:	3b04      	subs	r3, #4
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0c:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	3301      	adds	r3, #1
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b20:	d10f      	bne.n	8002b42 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b2c:	f3bf 8f5f 	dmb	sy
}
 8002b30:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e1b6      	b.n	8002eb0 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	3301      	adds	r3, #1
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	6852      	ldr	r2, [r2, #4]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d012      	beq.n	8002b92 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <ETH_Prepare_Tx_Descriptors+0x248>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	6852      	ldr	r2, [r2, #4]
 8002b88:	0412      	lsls	r2, r2, #16
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	e008      	b.n	8002ba4 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	2200      	movs	r2, #0
 8002b96:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	4b13      	ldr	r3, [pc, #76]	; (8002bec <ETH_Prepare_Tx_Descriptors+0x248>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	6a3a      	ldr	r2, [r7, #32]
 8002ba2:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d021      	beq.n	8002bf4 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	04db      	lsls	r3, r3, #19
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	69d2      	ldr	r2, [r2, #28]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	e02e      	b.n	8002c42 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002be4:	ffff0000 	.word	0xffff0000
 8002be8:	ffffc000 	.word	0xffffc000
 8002bec:	c000ffff 	.word	0xc000ffff
 8002bf0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	4b7b      	ldr	r3, [pc, #492]	; (8002de8 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	6852      	ldr	r2, [r2, #4]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c78:	f3bf 8f5f 	dmb	sy
}
 8002c7c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 80da 	beq.w	8002e4c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002caa:	e0cf      	b.n	8002e4c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cba:	3301      	adds	r3, #1
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d902      	bls.n	8002cca <ETH_Prepare_Tx_Descriptors+0x326>
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	3b04      	subs	r3, #4
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd2:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cec:	d007      	beq.n	8002cfe <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d029      	beq.n	8002d52 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0a:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d10:	e019      	b.n	8002d46 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d12:	f3bf 8f5f 	dmb	sy
}
 8002d16:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d26:	3301      	adds	r3, #1
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d902      	bls.n	8002d36 <ETH_Prepare_Tx_Descriptors+0x392>
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	3b04      	subs	r3, #4
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3e:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	3301      	adds	r3, #1
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d3e1      	bcc.n	8002d12 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e0ae      	b.n	8002eb0 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	3301      	adds	r3, #1
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <ETH_Prepare_Tx_Descriptors+0x448>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	6852      	ldr	r2, [r2, #4]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d012      	beq.n	8002da8 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	6852      	ldr	r2, [r2, #4]
 8002d9e:	0412      	lsls	r2, r2, #16
 8002da0:	431a      	orrs	r2, r3
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	e008      	b.n	8002dba <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	2200      	movs	r2, #0
 8002dac:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	6a3a      	ldr	r2, [r7, #32]
 8002db8:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d018      	beq.n	8002df8 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	69d2      	ldr	r2, [r2, #28]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	e020      	b.n	8002e28 <ETH_Prepare_Tx_Descriptors+0x484>
 8002de6:	bf00      	nop
 8002de8:	ffff8000 	.word	0xffff8000
 8002dec:	ffffc000 	.word	0xffffc000
 8002df0:	c000ffff 	.word	0xc000ffff
 8002df4:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	68da      	ldr	r2, [r3, #12]
 8002dfc:	4b2f      	ldr	r3, [pc, #188]	; (8002ebc <ETH_Prepare_Tx_Descriptors+0x518>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	6852      	ldr	r2, [r2, #4]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e2e:	f3bf 8f5f 	dmb	sy
}
 8002e32:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f47f af2b 	bne.w	8002cac <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d006      	beq.n	8002e6a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	e005      	b.n	8002e76 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e86:	6979      	ldr	r1, [r7, #20]
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e96:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e98:	b672      	cpsid	i
}
 8002e9a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002eaa:	b662      	cpsie	i
}
 8002eac:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3734      	adds	r7, #52	; 0x34
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	ffff8000 	.word	0xffff8000

08002ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ece:	4b89      	ldr	r3, [pc, #548]	; (80030f4 <HAL_GPIO_Init+0x234>)
 8002ed0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ed2:	e194      	b.n	80031fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	2101      	movs	r1, #1
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8186 	beq.w	80031f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d005      	beq.n	8002f04 <HAL_GPIO_Init+0x44>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d130      	bne.n	8002f66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2203      	movs	r2, #3
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	091b      	lsrs	r3, r3, #4
 8002f50:	f003 0201 	and.w	r2, r3, #1
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d017      	beq.n	8002fa2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d123      	bne.n	8002ff6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	08da      	lsrs	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3208      	adds	r2, #8
 8002fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	220f      	movs	r2, #15
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	08da      	lsrs	r2, r3, #3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3208      	adds	r2, #8
 8002ff0:	69b9      	ldr	r1, [r7, #24]
 8002ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	2203      	movs	r2, #3
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0203 	and.w	r2, r3, #3
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80e0 	beq.w	80031f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003038:	4b2f      	ldr	r3, [pc, #188]	; (80030f8 <HAL_GPIO_Init+0x238>)
 800303a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800303e:	4a2e      	ldr	r2, [pc, #184]	; (80030f8 <HAL_GPIO_Init+0x238>)
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003048:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <HAL_GPIO_Init+0x238>)
 800304a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003056:	4a29      	ldr	r2, [pc, #164]	; (80030fc <HAL_GPIO_Init+0x23c>)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	089b      	lsrs	r3, r3, #2
 800305c:	3302      	adds	r3, #2
 800305e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	220f      	movs	r2, #15
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a20      	ldr	r2, [pc, #128]	; (8003100 <HAL_GPIO_Init+0x240>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d052      	beq.n	8003128 <HAL_GPIO_Init+0x268>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1f      	ldr	r2, [pc, #124]	; (8003104 <HAL_GPIO_Init+0x244>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d031      	beq.n	80030ee <HAL_GPIO_Init+0x22e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a1e      	ldr	r2, [pc, #120]	; (8003108 <HAL_GPIO_Init+0x248>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d02b      	beq.n	80030ea <HAL_GPIO_Init+0x22a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a1d      	ldr	r2, [pc, #116]	; (800310c <HAL_GPIO_Init+0x24c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d025      	beq.n	80030e6 <HAL_GPIO_Init+0x226>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <HAL_GPIO_Init+0x250>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d01f      	beq.n	80030e2 <HAL_GPIO_Init+0x222>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a1b      	ldr	r2, [pc, #108]	; (8003114 <HAL_GPIO_Init+0x254>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d019      	beq.n	80030de <HAL_GPIO_Init+0x21e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a1a      	ldr	r2, [pc, #104]	; (8003118 <HAL_GPIO_Init+0x258>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_GPIO_Init+0x21a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a19      	ldr	r2, [pc, #100]	; (800311c <HAL_GPIO_Init+0x25c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00d      	beq.n	80030d6 <HAL_GPIO_Init+0x216>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a18      	ldr	r2, [pc, #96]	; (8003120 <HAL_GPIO_Init+0x260>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <HAL_GPIO_Init+0x212>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a17      	ldr	r2, [pc, #92]	; (8003124 <HAL_GPIO_Init+0x264>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <HAL_GPIO_Init+0x20e>
 80030ca:	2309      	movs	r3, #9
 80030cc:	e02d      	b.n	800312a <HAL_GPIO_Init+0x26a>
 80030ce:	230a      	movs	r3, #10
 80030d0:	e02b      	b.n	800312a <HAL_GPIO_Init+0x26a>
 80030d2:	2308      	movs	r3, #8
 80030d4:	e029      	b.n	800312a <HAL_GPIO_Init+0x26a>
 80030d6:	2307      	movs	r3, #7
 80030d8:	e027      	b.n	800312a <HAL_GPIO_Init+0x26a>
 80030da:	2306      	movs	r3, #6
 80030dc:	e025      	b.n	800312a <HAL_GPIO_Init+0x26a>
 80030de:	2305      	movs	r3, #5
 80030e0:	e023      	b.n	800312a <HAL_GPIO_Init+0x26a>
 80030e2:	2304      	movs	r3, #4
 80030e4:	e021      	b.n	800312a <HAL_GPIO_Init+0x26a>
 80030e6:	2303      	movs	r3, #3
 80030e8:	e01f      	b.n	800312a <HAL_GPIO_Init+0x26a>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e01d      	b.n	800312a <HAL_GPIO_Init+0x26a>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e01b      	b.n	800312a <HAL_GPIO_Init+0x26a>
 80030f2:	bf00      	nop
 80030f4:	58000080 	.word	0x58000080
 80030f8:	58024400 	.word	0x58024400
 80030fc:	58000400 	.word	0x58000400
 8003100:	58020000 	.word	0x58020000
 8003104:	58020400 	.word	0x58020400
 8003108:	58020800 	.word	0x58020800
 800310c:	58020c00 	.word	0x58020c00
 8003110:	58021000 	.word	0x58021000
 8003114:	58021400 	.word	0x58021400
 8003118:	58021800 	.word	0x58021800
 800311c:	58021c00 	.word	0x58021c00
 8003120:	58022000 	.word	0x58022000
 8003124:	58022400 	.word	0x58022400
 8003128:	2300      	movs	r3, #0
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	f002 0203 	and.w	r2, r2, #3
 8003130:	0092      	lsls	r2, r2, #2
 8003132:	4093      	lsls	r3, r2
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800313a:	4938      	ldr	r1, [pc, #224]	; (800321c <HAL_GPIO_Init+0x35c>)
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	3302      	adds	r3, #2
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	43db      	mvns	r3, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4013      	ands	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800316e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800319c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	3301      	adds	r3, #1
 80031fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	f47f ae63 	bne.w	8002ed4 <HAL_GPIO_Init+0x14>
  }
}
 800320e:	bf00      	nop
 8003210:	bf00      	nop
 8003212:	3724      	adds	r7, #36	; 0x24
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	58000400 	.word	0x58000400

08003220 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003228:	4a08      	ldr	r2, [pc, #32]	; (800324c <HAL_HSEM_FastTake+0x2c>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3320      	adds	r3, #32
 800322e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003232:	4a07      	ldr	r2, [pc, #28]	; (8003250 <HAL_HSEM_FastTake+0x30>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e000      	b.n	800323e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	58026400 	.word	0x58026400
 8003250:	80000300 	.word	0x80000300

08003254 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800325e:	4906      	ldr	r1, [pc, #24]	; (8003278 <HAL_HSEM_Release+0x24>)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	58026400 	.word	0x58026400

0800327c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003284:	4b29      	ldr	r3, [pc, #164]	; (800332c <HAL_PWREx_ConfigSupply+0xb0>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	2b06      	cmp	r3, #6
 800328e:	d00a      	beq.n	80032a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003290:	4b26      	ldr	r3, [pc, #152]	; (800332c <HAL_PWREx_ConfigSupply+0xb0>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	429a      	cmp	r2, r3
 800329c:	d001      	beq.n	80032a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e040      	b.n	8003324 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e03e      	b.n	8003324 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032a6:	4b21      	ldr	r3, [pc, #132]	; (800332c <HAL_PWREx_ConfigSupply+0xb0>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80032ae:	491f      	ldr	r1, [pc, #124]	; (800332c <HAL_PWREx_ConfigSupply+0xb0>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80032b6:	f7fd fe8f 	bl	8000fd8 <HAL_GetTick>
 80032ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032bc:	e009      	b.n	80032d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032be:	f7fd fe8b 	bl	8000fd8 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032cc:	d901      	bls.n	80032d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e028      	b.n	8003324 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032d2:	4b16      	ldr	r3, [pc, #88]	; (800332c <HAL_PWREx_ConfigSupply+0xb0>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032de:	d1ee      	bne.n	80032be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b1e      	cmp	r3, #30
 80032e4:	d008      	beq.n	80032f8 <HAL_PWREx_ConfigSupply+0x7c>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b2e      	cmp	r3, #46	; 0x2e
 80032ea:	d005      	beq.n	80032f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b1d      	cmp	r3, #29
 80032f0:	d002      	beq.n	80032f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b2d      	cmp	r3, #45	; 0x2d
 80032f6:	d114      	bne.n	8003322 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80032f8:	f7fd fe6e 	bl	8000fd8 <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80032fe:	e009      	b.n	8003314 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003300:	f7fd fe6a 	bl	8000fd8 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800330e:	d901      	bls.n	8003314 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e007      	b.n	8003324 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_PWREx_ConfigSupply+0xb0>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d1ee      	bne.n	8003300 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	58024800 	.word	0x58024800

08003330 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08c      	sub	sp, #48	; 0x30
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d102      	bne.n	8003344 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	f000 bc1d 	b.w	8003b7e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8087 	beq.w	8003460 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003352:	4b99      	ldr	r3, [pc, #612]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800335c:	4b96      	ldr	r3, [pc, #600]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	2b10      	cmp	r3, #16
 8003366:	d007      	beq.n	8003378 <HAL_RCC_OscConfig+0x48>
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	2b18      	cmp	r3, #24
 800336c:	d110      	bne.n	8003390 <HAL_RCC_OscConfig+0x60>
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d10b      	bne.n	8003390 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003378:	4b8f      	ldr	r3, [pc, #572]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d06c      	beq.n	800345e <HAL_RCC_OscConfig+0x12e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d168      	bne.n	800345e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e3f6      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d106      	bne.n	80033a8 <HAL_RCC_OscConfig+0x78>
 800339a:	4b87      	ldr	r3, [pc, #540]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a86      	ldr	r2, [pc, #536]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e02e      	b.n	8003406 <HAL_RCC_OscConfig+0xd6>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10c      	bne.n	80033ca <HAL_RCC_OscConfig+0x9a>
 80033b0:	4b81      	ldr	r3, [pc, #516]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a80      	ldr	r2, [pc, #512]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b7e      	ldr	r3, [pc, #504]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a7d      	ldr	r2, [pc, #500]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e01d      	b.n	8003406 <HAL_RCC_OscConfig+0xd6>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d2:	d10c      	bne.n	80033ee <HAL_RCC_OscConfig+0xbe>
 80033d4:	4b78      	ldr	r3, [pc, #480]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a77      	ldr	r2, [pc, #476]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b75      	ldr	r3, [pc, #468]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a74      	ldr	r2, [pc, #464]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e00b      	b.n	8003406 <HAL_RCC_OscConfig+0xd6>
 80033ee:	4b72      	ldr	r3, [pc, #456]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a71      	ldr	r2, [pc, #452]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b6f      	ldr	r3, [pc, #444]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6e      	ldr	r2, [pc, #440]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003404:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d013      	beq.n	8003436 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7fd fde3 	bl	8000fd8 <HAL_GetTick>
 8003412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003416:	f7fd fddf 	bl	8000fd8 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b64      	cmp	r3, #100	; 0x64
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e3aa      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003428:	4b63      	ldr	r3, [pc, #396]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0xe6>
 8003434:	e014      	b.n	8003460 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fd fdcf 	bl	8000fd8 <HAL_GetTick>
 800343a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800343e:	f7fd fdcb 	bl	8000fd8 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b64      	cmp	r3, #100	; 0x64
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e396      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003450:	4b59      	ldr	r3, [pc, #356]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0x10e>
 800345c:	e000      	b.n	8003460 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80cb 	beq.w	8003604 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346e:	4b52      	ldr	r3, [pc, #328]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003476:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003478:	4b4f      	ldr	r3, [pc, #316]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_RCC_OscConfig+0x164>
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	2b18      	cmp	r3, #24
 8003488:	d156      	bne.n	8003538 <HAL_RCC_OscConfig+0x208>
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	2b00      	cmp	r3, #0
 8003492:	d151      	bne.n	8003538 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003494:	4b48      	ldr	r3, [pc, #288]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_RCC_OscConfig+0x17c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e368      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034ac:	4b42      	ldr	r3, [pc, #264]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f023 0219 	bic.w	r2, r3, #25
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	493f      	ldr	r1, [pc, #252]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034be:	f7fd fd8b 	bl	8000fd8 <HAL_GetTick>
 80034c2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c6:	f7fd fd87 	bl	8000fd8 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e352      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034d8:	4b37      	ldr	r3, [pc, #220]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e4:	f7fd fd84 	bl	8000ff0 <HAL_GetREVID>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d817      	bhi.n	8003522 <HAL_RCC_OscConfig+0x1f2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2b40      	cmp	r3, #64	; 0x40
 80034f8:	d108      	bne.n	800350c <HAL_RCC_OscConfig+0x1dc>
 80034fa:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003502:	4a2d      	ldr	r2, [pc, #180]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003508:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800350a:	e07b      	b.n	8003604 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350c:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	031b      	lsls	r3, r3, #12
 800351a:	4927      	ldr	r1, [pc, #156]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003520:	e070      	b.n	8003604 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003522:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	061b      	lsls	r3, r3, #24
 8003530:	4921      	ldr	r1, [pc, #132]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003536:	e065      	b.n	8003604 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d048      	beq.n	80035d2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003540:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f023 0219 	bic.w	r2, r3, #25
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	491a      	ldr	r1, [pc, #104]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003552:	f7fd fd41 	bl	8000fd8 <HAL_GetTick>
 8003556:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355a:	f7fd fd3d 	bl	8000fd8 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e308      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800356c:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003578:	f7fd fd3a 	bl	8000ff0 <HAL_GetREVID>
 800357c:	4603      	mov	r3, r0
 800357e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003582:	4293      	cmp	r3, r2
 8003584:	d81a      	bhi.n	80035bc <HAL_RCC_OscConfig+0x28c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d108      	bne.n	80035a0 <HAL_RCC_OscConfig+0x270>
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003596:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 8003598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359c:	6053      	str	r3, [r2, #4]
 800359e:	e031      	b.n	8003604 <HAL_RCC_OscConfig+0x2d4>
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	031b      	lsls	r3, r3, #12
 80035ae:	4902      	ldr	r1, [pc, #8]	; (80035b8 <HAL_RCC_OscConfig+0x288>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]
 80035b4:	e026      	b.n	8003604 <HAL_RCC_OscConfig+0x2d4>
 80035b6:	bf00      	nop
 80035b8:	58024400 	.word	0x58024400
 80035bc:	4b9a      	ldr	r3, [pc, #616]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	4997      	ldr	r1, [pc, #604]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]
 80035d0:	e018      	b.n	8003604 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d2:	4b95      	ldr	r3, [pc, #596]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a94      	ldr	r2, [pc, #592]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fd fcfb 	bl	8000fd8 <HAL_GetTick>
 80035e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e6:	f7fd fcf7 	bl	8000fd8 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e2c2      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035f8:	4b8b      	ldr	r3, [pc, #556]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f0      	bne.n	80035e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80a9 	beq.w	8003764 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003612:	4b85      	ldr	r3, [pc, #532]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800361a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800361c:	4b82      	ldr	r3, [pc, #520]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b08      	cmp	r3, #8
 8003626:	d007      	beq.n	8003638 <HAL_RCC_OscConfig+0x308>
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2b18      	cmp	r3, #24
 800362c:	d13a      	bne.n	80036a4 <HAL_RCC_OscConfig+0x374>
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d135      	bne.n	80036a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003638:	4b7b      	ldr	r3, [pc, #492]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_RCC_OscConfig+0x320>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	2b80      	cmp	r3, #128	; 0x80
 800364a:	d001      	beq.n	8003650 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e296      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003650:	f7fd fcce 	bl	8000ff0 <HAL_GetREVID>
 8003654:	4603      	mov	r3, r0
 8003656:	f241 0203 	movw	r2, #4099	; 0x1003
 800365a:	4293      	cmp	r3, r2
 800365c:	d817      	bhi.n	800368e <HAL_RCC_OscConfig+0x35e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	2b20      	cmp	r3, #32
 8003664:	d108      	bne.n	8003678 <HAL_RCC_OscConfig+0x348>
 8003666:	4b70      	ldr	r3, [pc, #448]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800366e:	4a6e      	ldr	r2, [pc, #440]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 8003670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003674:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003676:	e075      	b.n	8003764 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003678:	4b6b      	ldr	r3, [pc, #428]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	069b      	lsls	r3, r3, #26
 8003686:	4968      	ldr	r1, [pc, #416]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 8003688:	4313      	orrs	r3, r2
 800368a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800368c:	e06a      	b.n	8003764 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800368e:	4b66      	ldr	r3, [pc, #408]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	061b      	lsls	r3, r3, #24
 800369c:	4962      	ldr	r1, [pc, #392]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036a2:	e05f      	b.n	8003764 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d042      	beq.n	8003732 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036ac:	4b5e      	ldr	r3, [pc, #376]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a5d      	ldr	r2, [pc, #372]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80036b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fd fc8e 	bl	8000fd8 <HAL_GetTick>
 80036bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80036c0:	f7fd fc8a 	bl	8000fd8 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e255      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036d2:	4b55      	ldr	r3, [pc, #340]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036de:	f7fd fc87 	bl	8000ff0 <HAL_GetREVID>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d817      	bhi.n	800371c <HAL_RCC_OscConfig+0x3ec>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d108      	bne.n	8003706 <HAL_RCC_OscConfig+0x3d6>
 80036f4:	4b4c      	ldr	r3, [pc, #304]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80036fc:	4a4a      	ldr	r2, [pc, #296]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80036fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003702:	6053      	str	r3, [r2, #4]
 8003704:	e02e      	b.n	8003764 <HAL_RCC_OscConfig+0x434>
 8003706:	4b48      	ldr	r3, [pc, #288]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	069b      	lsls	r3, r3, #26
 8003714:	4944      	ldr	r1, [pc, #272]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 8003716:	4313      	orrs	r3, r2
 8003718:	604b      	str	r3, [r1, #4]
 800371a:	e023      	b.n	8003764 <HAL_RCC_OscConfig+0x434>
 800371c:	4b42      	ldr	r3, [pc, #264]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	061b      	lsls	r3, r3, #24
 800372a:	493f      	ldr	r1, [pc, #252]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 800372c:	4313      	orrs	r3, r2
 800372e:	60cb      	str	r3, [r1, #12]
 8003730:	e018      	b.n	8003764 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003732:	4b3d      	ldr	r3, [pc, #244]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a3c      	ldr	r2, [pc, #240]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 8003738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800373c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373e:	f7fd fc4b 	bl	8000fd8 <HAL_GetTick>
 8003742:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003746:	f7fd fc47 	bl	8000fd8 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e212      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003758:	4b33      	ldr	r3, [pc, #204]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1f0      	bne.n	8003746 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d036      	beq.n	80037de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d019      	beq.n	80037ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003778:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 800377a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377c:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fd fc28 	bl	8000fd8 <HAL_GetTick>
 8003788:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378c:	f7fd fc24 	bl	8000fd8 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1ef      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800379e:	4b22      	ldr	r3, [pc, #136]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80037a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x45c>
 80037aa:	e018      	b.n	80037de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ac:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80037ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b0:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b8:	f7fd fc0e 	bl	8000fd8 <HAL_GetTick>
 80037bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c0:	f7fd fc0a 	bl	8000fd8 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e1d5      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80037d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d039      	beq.n	800385e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01c      	beq.n	800382c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037f2:	4b0d      	ldr	r3, [pc, #52]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a0c      	ldr	r2, [pc, #48]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 80037f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037fe:	f7fd fbeb 	bl	8000fd8 <HAL_GetTick>
 8003802:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003806:	f7fd fbe7 	bl	8000fd8 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e1b2      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <HAL_RCC_OscConfig+0x4f8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x4d6>
 8003824:	e01b      	b.n	800385e <HAL_RCC_OscConfig+0x52e>
 8003826:	bf00      	nop
 8003828:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800382c:	4b9b      	ldr	r3, [pc, #620]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a9a      	ldr	r2, [pc, #616]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003836:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003838:	f7fd fbce 	bl	8000fd8 <HAL_GetTick>
 800383c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003840:	f7fd fbca 	bl	8000fd8 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e195      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003852:	4b92      	ldr	r3, [pc, #584]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f0      	bne.n	8003840 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 8081 	beq.w	800396e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800386c:	4b8c      	ldr	r3, [pc, #560]	; (8003aa0 <HAL_RCC_OscConfig+0x770>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a8b      	ldr	r2, [pc, #556]	; (8003aa0 <HAL_RCC_OscConfig+0x770>)
 8003872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003876:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003878:	f7fd fbae 	bl	8000fd8 <HAL_GetTick>
 800387c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003880:	f7fd fbaa 	bl	8000fd8 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b64      	cmp	r3, #100	; 0x64
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e175      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003892:	4b83      	ldr	r3, [pc, #524]	; (8003aa0 <HAL_RCC_OscConfig+0x770>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d106      	bne.n	80038b4 <HAL_RCC_OscConfig+0x584>
 80038a6:	4b7d      	ldr	r3, [pc, #500]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	4a7c      	ldr	r2, [pc, #496]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	6713      	str	r3, [r2, #112]	; 0x70
 80038b2:	e02d      	b.n	8003910 <HAL_RCC_OscConfig+0x5e0>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10c      	bne.n	80038d6 <HAL_RCC_OscConfig+0x5a6>
 80038bc:	4b77      	ldr	r3, [pc, #476]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 80038be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c0:	4a76      	ldr	r2, [pc, #472]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	6713      	str	r3, [r2, #112]	; 0x70
 80038c8:	4b74      	ldr	r3, [pc, #464]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038cc:	4a73      	ldr	r2, [pc, #460]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 80038ce:	f023 0304 	bic.w	r3, r3, #4
 80038d2:	6713      	str	r3, [r2, #112]	; 0x70
 80038d4:	e01c      	b.n	8003910 <HAL_RCC_OscConfig+0x5e0>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b05      	cmp	r3, #5
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x5c8>
 80038de:	4b6f      	ldr	r3, [pc, #444]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 80038e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e2:	4a6e      	ldr	r2, [pc, #440]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 80038e4:	f043 0304 	orr.w	r3, r3, #4
 80038e8:	6713      	str	r3, [r2, #112]	; 0x70
 80038ea:	4b6c      	ldr	r3, [pc, #432]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	4a6b      	ldr	r2, [pc, #428]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6713      	str	r3, [r2, #112]	; 0x70
 80038f6:	e00b      	b.n	8003910 <HAL_RCC_OscConfig+0x5e0>
 80038f8:	4b68      	ldr	r3, [pc, #416]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	4a67      	ldr	r2, [pc, #412]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 80038fe:	f023 0301 	bic.w	r3, r3, #1
 8003902:	6713      	str	r3, [r2, #112]	; 0x70
 8003904:	4b65      	ldr	r3, [pc, #404]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4a64      	ldr	r2, [pc, #400]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 800390a:	f023 0304 	bic.w	r3, r3, #4
 800390e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d015      	beq.n	8003944 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fd fb5e 	bl	8000fd8 <HAL_GetTick>
 800391c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800391e:	e00a      	b.n	8003936 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003920:	f7fd fb5a 	bl	8000fd8 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	; 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e123      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003936:	4b59      	ldr	r3, [pc, #356]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0ee      	beq.n	8003920 <HAL_RCC_OscConfig+0x5f0>
 8003942:	e014      	b.n	800396e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7fd fb48 	bl	8000fd8 <HAL_GetTick>
 8003948:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800394a:	e00a      	b.n	8003962 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394c:	f7fd fb44 	bl	8000fd8 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e10d      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003962:	4b4e      	ldr	r3, [pc, #312]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1ee      	bne.n	800394c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 8102 	beq.w	8003b7c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003978:	4b48      	ldr	r3, [pc, #288]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003980:	2b18      	cmp	r3, #24
 8003982:	f000 80bd 	beq.w	8003b00 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	2b02      	cmp	r3, #2
 800398c:	f040 809e 	bne.w	8003acc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003990:	4b42      	ldr	r3, [pc, #264]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a41      	ldr	r2, [pc, #260]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800399a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fd fb1c 	bl	8000fd8 <HAL_GetTick>
 80039a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fd fb18 	bl	8000fd8 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e0e3      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039b6:	4b39      	ldr	r3, [pc, #228]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c2:	4b36      	ldr	r3, [pc, #216]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 80039c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c6:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <HAL_RCC_OscConfig+0x774>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039d2:	0112      	lsls	r2, r2, #4
 80039d4:	430a      	orrs	r2, r1
 80039d6:	4931      	ldr	r1, [pc, #196]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	628b      	str	r3, [r1, #40]	; 0x28
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	3b01      	subs	r3, #1
 80039e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ea:	3b01      	subs	r3, #1
 80039ec:	025b      	lsls	r3, r3, #9
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	3b01      	subs	r3, #1
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	3b01      	subs	r3, #1
 8003a06:	061b      	lsls	r3, r3, #24
 8003a08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a0c:	4923      	ldr	r1, [pc, #140]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	4a21      	ldr	r2, [pc, #132]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a1e:	4b1f      	ldr	r3, [pc, #124]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a22:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <HAL_RCC_OscConfig+0x778>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a2a:	00d2      	lsls	r2, r2, #3
 8003a2c:	491b      	ldr	r1, [pc, #108]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a32:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	f023 020c 	bic.w	r2, r3, #12
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	4917      	ldr	r1, [pc, #92]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a44:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	f023 0202 	bic.w	r2, r3, #2
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a50:	4912      	ldr	r1, [pc, #72]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a56:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	4a10      	ldr	r2, [pc, #64]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a62:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	4a0d      	ldr	r2, [pc, #52]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	4a0a      	ldr	r2, [pc, #40]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a04      	ldr	r2, [pc, #16]	; (8003a9c <HAL_RCC_OscConfig+0x76c>)
 8003a8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a92:	f7fd faa1 	bl	8000fd8 <HAL_GetTick>
 8003a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a98:	e011      	b.n	8003abe <HAL_RCC_OscConfig+0x78e>
 8003a9a:	bf00      	nop
 8003a9c:	58024400 	.word	0x58024400
 8003aa0:	58024800 	.word	0x58024800
 8003aa4:	fffffc0c 	.word	0xfffffc0c
 8003aa8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aac:	f7fd fa94 	bl	8000fd8 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e05f      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003abe:	4b32      	ldr	r3, [pc, #200]	; (8003b88 <HAL_RCC_OscConfig+0x858>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0x77c>
 8003aca:	e057      	b.n	8003b7c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003acc:	4b2e      	ldr	r3, [pc, #184]	; (8003b88 <HAL_RCC_OscConfig+0x858>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a2d      	ldr	r2, [pc, #180]	; (8003b88 <HAL_RCC_OscConfig+0x858>)
 8003ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7fd fa7e 	bl	8000fd8 <HAL_GetTick>
 8003adc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fd fa7a 	bl	8000fd8 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e045      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003af2:	4b25      	ldr	r3, [pc, #148]	; (8003b88 <HAL_RCC_OscConfig+0x858>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x7b0>
 8003afe:	e03d      	b.n	8003b7c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b00:	4b21      	ldr	r3, [pc, #132]	; (8003b88 <HAL_RCC_OscConfig+0x858>)
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <HAL_RCC_OscConfig+0x858>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d031      	beq.n	8003b78 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f003 0203 	and.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d12a      	bne.n	8003b78 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d122      	bne.n	8003b78 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d11a      	bne.n	8003b78 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	0a5b      	lsrs	r3, r3, #9
 8003b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d111      	bne.n	8003b78 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	0c1b      	lsrs	r3, r3, #16
 8003b58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d108      	bne.n	8003b78 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	0e1b      	lsrs	r3, r3, #24
 8003b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b72:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3730      	adds	r7, #48	; 0x30
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	58024400 	.word	0x58024400

08003b8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e19c      	b.n	8003eda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba0:	4b8a      	ldr	r3, [pc, #552]	; (8003dcc <HAL_RCC_ClockConfig+0x240>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d910      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bae:	4b87      	ldr	r3, [pc, #540]	; (8003dcc <HAL_RCC_ClockConfig+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f023 020f 	bic.w	r2, r3, #15
 8003bb6:	4985      	ldr	r1, [pc, #532]	; (8003dcc <HAL_RCC_ClockConfig+0x240>)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b83      	ldr	r3, [pc, #524]	; (8003dcc <HAL_RCC_ClockConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e184      	b.n	8003eda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d010      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	4b7b      	ldr	r3, [pc, #492]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d908      	bls.n	8003bfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bec:	4b78      	ldr	r3, [pc, #480]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	4975      	ldr	r1, [pc, #468]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d010      	beq.n	8003c2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	4b70      	ldr	r3, [pc, #448]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d908      	bls.n	8003c2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c1a:	4b6d      	ldr	r3, [pc, #436]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	496a      	ldr	r1, [pc, #424]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d010      	beq.n	8003c5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699a      	ldr	r2, [r3, #24]
 8003c3c:	4b64      	ldr	r3, [pc, #400]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d908      	bls.n	8003c5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c48:	4b61      	ldr	r3, [pc, #388]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	495e      	ldr	r1, [pc, #376]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d010      	beq.n	8003c88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	4b59      	ldr	r3, [pc, #356]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d908      	bls.n	8003c88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c76:	4b56      	ldr	r3, [pc, #344]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	4953      	ldr	r1, [pc, #332]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d010      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	4b4d      	ldr	r3, [pc, #308]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d908      	bls.n	8003cb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca4:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	f023 020f 	bic.w	r2, r3, #15
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4947      	ldr	r1, [pc, #284]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d055      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003cc2:	4b43      	ldr	r3, [pc, #268]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	4940      	ldr	r1, [pc, #256]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d107      	bne.n	8003cec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cdc:	4b3c      	ldr	r3, [pc, #240]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d121      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e0f6      	b.n	8003eda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d107      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cf4:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d115      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0ea      	b.n	8003eda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d107      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d0c:	4b30      	ldr	r3, [pc, #192]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d109      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0de      	b.n	8003eda <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d1c:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0d6      	b.n	8003eda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d2c:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	f023 0207 	bic.w	r2, r3, #7
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4925      	ldr	r1, [pc, #148]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3e:	f7fd f94b 	bl	8000fd8 <HAL_GetTick>
 8003d42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d44:	e00a      	b.n	8003d5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d46:	f7fd f947 	bl	8000fd8 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e0be      	b.n	8003eda <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5c:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d1eb      	bne.n	8003d46 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d010      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d208      	bcs.n	8003d9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d8a:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f023 020f 	bic.w	r2, r3, #15
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	490e      	ldr	r1, [pc, #56]	; (8003dd0 <HAL_RCC_ClockConfig+0x244>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCC_ClockConfig+0x240>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d214      	bcs.n	8003dd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <HAL_RCC_ClockConfig+0x240>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 020f 	bic.w	r2, r3, #15
 8003db2:	4906      	ldr	r1, [pc, #24]	; (8003dcc <HAL_RCC_ClockConfig+0x240>)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dba:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <HAL_RCC_ClockConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d005      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e086      	b.n	8003eda <HAL_RCC_ClockConfig+0x34e>
 8003dcc:	52002000 	.word	0x52002000
 8003dd0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d010      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	4b3f      	ldr	r3, [pc, #252]	; (8003ee4 <HAL_RCC_ClockConfig+0x358>)
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d208      	bcs.n	8003e02 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003df0:	4b3c      	ldr	r3, [pc, #240]	; (8003ee4 <HAL_RCC_ClockConfig+0x358>)
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	4939      	ldr	r1, [pc, #228]	; (8003ee4 <HAL_RCC_ClockConfig+0x358>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d010      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <HAL_RCC_ClockConfig+0x358>)
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d208      	bcs.n	8003e30 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e1e:	4b31      	ldr	r3, [pc, #196]	; (8003ee4 <HAL_RCC_ClockConfig+0x358>)
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	492e      	ldr	r1, [pc, #184]	; (8003ee4 <HAL_RCC_ClockConfig+0x358>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d010      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699a      	ldr	r2, [r3, #24]
 8003e40:	4b28      	ldr	r3, [pc, #160]	; (8003ee4 <HAL_RCC_ClockConfig+0x358>)
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d208      	bcs.n	8003e5e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e4c:	4b25      	ldr	r3, [pc, #148]	; (8003ee4 <HAL_RCC_ClockConfig+0x358>)
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	4922      	ldr	r1, [pc, #136]	; (8003ee4 <HAL_RCC_ClockConfig+0x358>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d010      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69da      	ldr	r2, [r3, #28]
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <HAL_RCC_ClockConfig+0x358>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d208      	bcs.n	8003e8c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003e7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ee4 <HAL_RCC_ClockConfig+0x358>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	4917      	ldr	r1, [pc, #92]	; (8003ee4 <HAL_RCC_ClockConfig+0x358>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e8c:	f000 f834 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <HAL_RCC_ClockConfig+0x358>)
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	0a1b      	lsrs	r3, r3, #8
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	4912      	ldr	r1, [pc, #72]	; (8003ee8 <HAL_RCC_ClockConfig+0x35c>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003eaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <HAL_RCC_ClockConfig+0x358>)
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	4a0d      	ldr	r2, [pc, #52]	; (8003ee8 <HAL_RCC_ClockConfig+0x35c>)
 8003eb4:	5cd3      	ldrb	r3, [r2, r3]
 8003eb6:	f003 031f 	and.w	r3, r3, #31
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec0:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <HAL_RCC_ClockConfig+0x360>)
 8003ec2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ec4:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <HAL_RCC_ClockConfig+0x364>)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <HAL_RCC_ClockConfig+0x368>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fc fd48 	bl	8000964 <HAL_InitTick>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	58024400 	.word	0x58024400
 8003ee8:	08017d5c 	.word	0x08017d5c
 8003eec:	24000004 	.word	0x24000004
 8003ef0:	24000000 	.word	0x24000000
 8003ef4:	24000008 	.word	0x24000008

08003ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b089      	sub	sp, #36	; 0x24
 8003efc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003efe:	4bb3      	ldr	r3, [pc, #716]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f06:	2b18      	cmp	r3, #24
 8003f08:	f200 8155 	bhi.w	80041b6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003f0c:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f79 	.word	0x08003f79
 8003f18:	080041b7 	.word	0x080041b7
 8003f1c:	080041b7 	.word	0x080041b7
 8003f20:	080041b7 	.word	0x080041b7
 8003f24:	080041b7 	.word	0x080041b7
 8003f28:	080041b7 	.word	0x080041b7
 8003f2c:	080041b7 	.word	0x080041b7
 8003f30:	080041b7 	.word	0x080041b7
 8003f34:	08003f9f 	.word	0x08003f9f
 8003f38:	080041b7 	.word	0x080041b7
 8003f3c:	080041b7 	.word	0x080041b7
 8003f40:	080041b7 	.word	0x080041b7
 8003f44:	080041b7 	.word	0x080041b7
 8003f48:	080041b7 	.word	0x080041b7
 8003f4c:	080041b7 	.word	0x080041b7
 8003f50:	080041b7 	.word	0x080041b7
 8003f54:	08003fa5 	.word	0x08003fa5
 8003f58:	080041b7 	.word	0x080041b7
 8003f5c:	080041b7 	.word	0x080041b7
 8003f60:	080041b7 	.word	0x080041b7
 8003f64:	080041b7 	.word	0x080041b7
 8003f68:	080041b7 	.word	0x080041b7
 8003f6c:	080041b7 	.word	0x080041b7
 8003f70:	080041b7 	.word	0x080041b7
 8003f74:	08003fab 	.word	0x08003fab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f78:	4b94      	ldr	r3, [pc, #592]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d009      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f84:	4b91      	ldr	r3, [pc, #580]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	08db      	lsrs	r3, r3, #3
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	4a90      	ldr	r2, [pc, #576]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
 8003f94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003f96:	e111      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f98:	4b8d      	ldr	r3, [pc, #564]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f9a:	61bb      	str	r3, [r7, #24]
    break;
 8003f9c:	e10e      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003f9e:	4b8d      	ldr	r3, [pc, #564]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fa0:	61bb      	str	r3, [r7, #24]
    break;
 8003fa2:	e10b      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003fa4:	4b8c      	ldr	r3, [pc, #560]	; (80041d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003fa6:	61bb      	str	r3, [r7, #24]
    break;
 8003fa8:	e108      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003faa:	4b88      	ldr	r3, [pc, #544]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003fb4:	4b85      	ldr	r3, [pc, #532]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fbe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003fc0:	4b82      	ldr	r3, [pc, #520]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003fca:	4b80      	ldr	r3, [pc, #512]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fce:	08db      	lsrs	r3, r3, #3
 8003fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	fb02 f303 	mul.w	r3, r2, r3
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80e1 	beq.w	80041b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	f000 8083 	beq.w	80040fc <HAL_RCC_GetSysClockFreq+0x204>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	f200 80a1 	bhi.w	8004140 <HAL_RCC_GetSysClockFreq+0x248>
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x114>
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d056      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800400a:	e099      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800400c:	4b6f      	ldr	r3, [pc, #444]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d02d      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004018:	4b6c      	ldr	r3, [pc, #432]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	08db      	lsrs	r3, r3, #3
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	4a6b      	ldr	r2, [pc, #428]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
 8004028:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	ee07 3a90 	vmov	s15, r3
 8004030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004042:	4b62      	ldr	r3, [pc, #392]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004052:	ed97 6a02 	vldr	s12, [r7, #8]
 8004056:	eddf 5a61 	vldr	s11, [pc, #388]	; 80041dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800405a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800405e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800406a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004072:	e087      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80041e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004086:	4b51      	ldr	r3, [pc, #324]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004096:	ed97 6a02 	vldr	s12, [r7, #8]
 800409a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80041dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800409e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040b6:	e065      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80041e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80040c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ca:	4b40      	ldr	r3, [pc, #256]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d2:	ee07 3a90 	vmov	s15, r3
 80040d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040da:	ed97 6a02 	vldr	s12, [r7, #8]
 80040de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80041dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80040e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040fa:	e043      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004106:	eddf 6a38 	vldr	s13, [pc, #224]	; 80041e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800410a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800410e:	4b2f      	ldr	r3, [pc, #188]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800411e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004122:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80041dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800412a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800412e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800413e:	e021      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80041e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800414e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004152:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415a:	ee07 3a90 	vmov	s15, r3
 800415e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004162:	ed97 6a02 	vldr	s12, [r7, #8]
 8004166:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80041dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800416a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800416e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800417a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800417e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004182:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004184:	4b11      	ldr	r3, [pc, #68]	; (80041cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	0a5b      	lsrs	r3, r3, #9
 800418a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800418e:	3301      	adds	r3, #1
 8004190:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800419c:	edd7 6a07 	vldr	s13, [r7, #28]
 80041a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a8:	ee17 3a90 	vmov	r3, s15
 80041ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80041ae:	e005      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61bb      	str	r3, [r7, #24]
    break;
 80041b4:	e002      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80041b6:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041b8:	61bb      	str	r3, [r7, #24]
    break;
 80041ba:	bf00      	nop
  }

  return sysclockfreq;
 80041bc:	69bb      	ldr	r3, [r7, #24]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3724      	adds	r7, #36	; 0x24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	58024400 	.word	0x58024400
 80041d0:	03d09000 	.word	0x03d09000
 80041d4:	003d0900 	.word	0x003d0900
 80041d8:	017d7840 	.word	0x017d7840
 80041dc:	46000000 	.word	0x46000000
 80041e0:	4c742400 	.word	0x4c742400
 80041e4:	4a742400 	.word	0x4a742400
 80041e8:	4bbebc20 	.word	0x4bbebc20

080041ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80041f2:	f7ff fe81 	bl	8003ef8 <HAL_RCC_GetSysClockFreq>
 80041f6:	4602      	mov	r2, r0
 80041f8:	4b10      	ldr	r3, [pc, #64]	; (800423c <HAL_RCC_GetHCLKFreq+0x50>)
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	490f      	ldr	r1, [pc, #60]	; (8004240 <HAL_RCC_GetHCLKFreq+0x54>)
 8004204:	5ccb      	ldrb	r3, [r1, r3]
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	fa22 f303 	lsr.w	r3, r2, r3
 800420e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004210:	4b0a      	ldr	r3, [pc, #40]	; (800423c <HAL_RCC_GetHCLKFreq+0x50>)
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	4a09      	ldr	r2, [pc, #36]	; (8004240 <HAL_RCC_GetHCLKFreq+0x54>)
 800421a:	5cd3      	ldrb	r3, [r2, r3]
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	fa22 f303 	lsr.w	r3, r2, r3
 8004226:	4a07      	ldr	r2, [pc, #28]	; (8004244 <HAL_RCC_GetHCLKFreq+0x58>)
 8004228:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800422a:	4a07      	ldr	r2, [pc, #28]	; (8004248 <HAL_RCC_GetHCLKFreq+0x5c>)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004230:	4b04      	ldr	r3, [pc, #16]	; (8004244 <HAL_RCC_GetHCLKFreq+0x58>)
 8004232:	681b      	ldr	r3, [r3, #0]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	58024400 	.word	0x58024400
 8004240:	08017d5c 	.word	0x08017d5c
 8004244:	24000004 	.word	0x24000004
 8004248:	24000000 	.word	0x24000000

0800424c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004250:	f7ff ffcc 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	091b      	lsrs	r3, r3, #4
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	4904      	ldr	r1, [pc, #16]	; (8004274 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	58024400 	.word	0x58024400
 8004274:	08017d5c 	.word	0x08017d5c

08004278 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	223f      	movs	r2, #63	; 0x3f
 8004286:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004288:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <HAL_RCC_GetClockConfig+0x7c>)
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f003 0207 	and.w	r2, r3, #7
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004294:	4b17      	ldr	r3, [pc, #92]	; (80042f4 <HAL_RCC_GetClockConfig+0x7c>)
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80042a0:	4b14      	ldr	r3, [pc, #80]	; (80042f4 <HAL_RCC_GetClockConfig+0x7c>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f003 020f 	and.w	r2, r3, #15
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80042ac:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <HAL_RCC_GetClockConfig+0x7c>)
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80042b8:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <HAL_RCC_GetClockConfig+0x7c>)
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <HAL_RCC_GetClockConfig+0x7c>)
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80042d0:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <HAL_RCC_GetClockConfig+0x7c>)
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_RCC_GetClockConfig+0x80>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 020f 	and.w	r2, r3, #15
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	601a      	str	r2, [r3, #0]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	58024400 	.word	0x58024400
 80042f8:	52002000 	.word	0x52002000

080042fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e049      	b.n	80043a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f841 	bl	80043aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	4619      	mov	r1, r3
 800433a:	4610      	mov	r0, r2
 800433c:	f000 fa00 	bl	8004740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d001      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e054      	b.n	8004482 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a26      	ldr	r2, [pc, #152]	; (8004490 <HAL_TIM_Base_Start_IT+0xd0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d022      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0x80>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004402:	d01d      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0x80>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a22      	ldr	r2, [pc, #136]	; (8004494 <HAL_TIM_Base_Start_IT+0xd4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d018      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0x80>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a21      	ldr	r2, [pc, #132]	; (8004498 <HAL_TIM_Base_Start_IT+0xd8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d013      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0x80>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1f      	ldr	r2, [pc, #124]	; (800449c <HAL_TIM_Base_Start_IT+0xdc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00e      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0x80>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d009      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0x80>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1c      	ldr	r2, [pc, #112]	; (80044a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d004      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0x80>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1b      	ldr	r2, [pc, #108]	; (80044a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d115      	bne.n	800446c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	4b19      	ldr	r3, [pc, #100]	; (80044ac <HAL_TIM_Base_Start_IT+0xec>)
 8004448:	4013      	ands	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b06      	cmp	r3, #6
 8004450:	d015      	beq.n	800447e <HAL_TIM_Base_Start_IT+0xbe>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004458:	d011      	beq.n	800447e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 0201 	orr.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446a:	e008      	b.n	800447e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e000      	b.n	8004480 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40010000 	.word	0x40010000
 8004494:	40000400 	.word	0x40000400
 8004498:	40000800 	.word	0x40000800
 800449c:	40000c00 	.word	0x40000c00
 80044a0:	40010400 	.word	0x40010400
 80044a4:	40001800 	.word	0x40001800
 80044a8:	40014000 	.word	0x40014000
 80044ac:	00010007 	.word	0x00010007

080044b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d122      	bne.n	800450c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d11b      	bne.n	800450c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0202 	mvn.w	r2, #2
 80044dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f905 	bl	8004702 <HAL_TIM_IC_CaptureCallback>
 80044f8:	e005      	b.n	8004506 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f8f7 	bl	80046ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f908 	bl	8004716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b04      	cmp	r3, #4
 8004518:	d122      	bne.n	8004560 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b04      	cmp	r3, #4
 8004526:	d11b      	bne.n	8004560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f06f 0204 	mvn.w	r2, #4
 8004530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2202      	movs	r2, #2
 8004536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f8db 	bl	8004702 <HAL_TIM_IC_CaptureCallback>
 800454c:	e005      	b.n	800455a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f8cd 	bl	80046ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f8de 	bl	8004716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b08      	cmp	r3, #8
 800456c:	d122      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b08      	cmp	r3, #8
 800457a:	d11b      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0208 	mvn.w	r2, #8
 8004584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2204      	movs	r2, #4
 800458a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f8b1 	bl	8004702 <HAL_TIM_IC_CaptureCallback>
 80045a0:	e005      	b.n	80045ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f8a3 	bl	80046ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f8b4 	bl	8004716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 0310 	and.w	r3, r3, #16
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d122      	bne.n	8004608 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b10      	cmp	r3, #16
 80045ce:	d11b      	bne.n	8004608 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0210 	mvn.w	r2, #16
 80045d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2208      	movs	r2, #8
 80045de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f887 	bl	8004702 <HAL_TIM_IC_CaptureCallback>
 80045f4:	e005      	b.n	8004602 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f879 	bl	80046ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f88a 	bl	8004716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b01      	cmp	r3, #1
 8004614:	d10e      	bne.n	8004634 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b01      	cmp	r3, #1
 8004622:	d107      	bne.n	8004634 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0201 	mvn.w	r2, #1
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f93e 	bl	80048b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463e:	2b80      	cmp	r3, #128	; 0x80
 8004640:	d10e      	bne.n	8004660 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464c:	2b80      	cmp	r3, #128	; 0x80
 800464e:	d107      	bne.n	8004660 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f914 	bl	8004888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466e:	d10e      	bne.n	800468e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467a:	2b80      	cmp	r3, #128	; 0x80
 800467c:	d107      	bne.n	800468e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f907 	bl	800489c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b40      	cmp	r3, #64	; 0x40
 800469a:	d10e      	bne.n	80046ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d107      	bne.n	80046ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f838 	bl	800472a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d10e      	bne.n	80046e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	d107      	bne.n	80046e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f06f 0220 	mvn.w	r2, #32
 80046de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f8c7 	bl	8004874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a40      	ldr	r2, [pc, #256]	; (8004854 <TIM_Base_SetConfig+0x114>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d013      	beq.n	8004780 <TIM_Base_SetConfig+0x40>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475e:	d00f      	beq.n	8004780 <TIM_Base_SetConfig+0x40>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a3d      	ldr	r2, [pc, #244]	; (8004858 <TIM_Base_SetConfig+0x118>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00b      	beq.n	8004780 <TIM_Base_SetConfig+0x40>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a3c      	ldr	r2, [pc, #240]	; (800485c <TIM_Base_SetConfig+0x11c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d007      	beq.n	8004780 <TIM_Base_SetConfig+0x40>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a3b      	ldr	r2, [pc, #236]	; (8004860 <TIM_Base_SetConfig+0x120>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_Base_SetConfig+0x40>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a3a      	ldr	r2, [pc, #232]	; (8004864 <TIM_Base_SetConfig+0x124>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d108      	bne.n	8004792 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a2f      	ldr	r2, [pc, #188]	; (8004854 <TIM_Base_SetConfig+0x114>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d01f      	beq.n	80047da <TIM_Base_SetConfig+0x9a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a0:	d01b      	beq.n	80047da <TIM_Base_SetConfig+0x9a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a2c      	ldr	r2, [pc, #176]	; (8004858 <TIM_Base_SetConfig+0x118>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d017      	beq.n	80047da <TIM_Base_SetConfig+0x9a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a2b      	ldr	r2, [pc, #172]	; (800485c <TIM_Base_SetConfig+0x11c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d013      	beq.n	80047da <TIM_Base_SetConfig+0x9a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a2a      	ldr	r2, [pc, #168]	; (8004860 <TIM_Base_SetConfig+0x120>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00f      	beq.n	80047da <TIM_Base_SetConfig+0x9a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a29      	ldr	r2, [pc, #164]	; (8004864 <TIM_Base_SetConfig+0x124>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00b      	beq.n	80047da <TIM_Base_SetConfig+0x9a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a28      	ldr	r2, [pc, #160]	; (8004868 <TIM_Base_SetConfig+0x128>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d007      	beq.n	80047da <TIM_Base_SetConfig+0x9a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a27      	ldr	r2, [pc, #156]	; (800486c <TIM_Base_SetConfig+0x12c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d003      	beq.n	80047da <TIM_Base_SetConfig+0x9a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a26      	ldr	r2, [pc, #152]	; (8004870 <TIM_Base_SetConfig+0x130>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d108      	bne.n	80047ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a10      	ldr	r2, [pc, #64]	; (8004854 <TIM_Base_SetConfig+0x114>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00f      	beq.n	8004838 <TIM_Base_SetConfig+0xf8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a12      	ldr	r2, [pc, #72]	; (8004864 <TIM_Base_SetConfig+0x124>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00b      	beq.n	8004838 <TIM_Base_SetConfig+0xf8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a11      	ldr	r2, [pc, #68]	; (8004868 <TIM_Base_SetConfig+0x128>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d007      	beq.n	8004838 <TIM_Base_SetConfig+0xf8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a10      	ldr	r2, [pc, #64]	; (800486c <TIM_Base_SetConfig+0x12c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_Base_SetConfig+0xf8>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a0f      	ldr	r2, [pc, #60]	; (8004870 <TIM_Base_SetConfig+0x130>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d103      	bne.n	8004840 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	615a      	str	r2, [r3, #20]
}
 8004846:	bf00      	nop
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40010000 	.word	0x40010000
 8004858:	40000400 	.word	0x40000400
 800485c:	40000800 	.word	0x40000800
 8004860:	40000c00 	.word	0x40000c00
 8004864:	40010400 	.word	0x40010400
 8004868:	40014000 	.word	0x40014000
 800486c:	40014400 	.word	0x40014400
 8004870:	40014800 	.word	0x40014800

08004874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_TIM_PeriodElapsedCallback>:
struct tcp_client_struct *esTx = 0;

struct tcp_pcb *pcbTx = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b590      	push	{r4, r7, lr}
 80048b2:	b09d      	sub	sp, #116	; 0x74
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a23      	ldr	r2, [pc, #140]	; (800494c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d140      	bne.n	8004944 <HAL_TIM_PeriodElapsedCallback+0x94>
    HAL_IncTick();
 80048c2:	f7fc fb75 	bl	8000fb0 <HAL_IncTick>
    Tick_Counter++;
 80048c6:	4b22      	ldr	r3, [pc, #136]	; (8004950 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	3301      	adds	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	4b20      	ldr	r3, [pc, #128]	; (8004950 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80048d0:	801a      	strh	r2, [r3, #0]

	if(Tick_Counter == 1000)
 80048d2:	4b1f      	ldr	r3, [pc, #124]	; (8004950 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048da:	d133      	bne.n	8004944 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		char buf[100];

		/* Prepare the first message to send to the server */
		int len = sprintf (buf, "Sending TCPclient Message %d\n", counter);
 80048dc:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	f107 0308 	add.w	r3, r7, #8
 80048e4:	491c      	ldr	r1, [pc, #112]	; (8004958 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80048e6:	4618      	mov	r0, r3
 80048e8:	f00f f8ca 	bl	8013a80 <siprintf>
 80048ec:	66f8      	str	r0, [r7, #108]	; 0x6c

		if (counter !=0)
 80048ee:	4b19      	ldr	r3, [pc, #100]	; (8004954 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d023      	beq.n	800493e <HAL_TIM_PeriodElapsedCallback+0x8e>
		{
			/* allocate pbuf */
			esTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL);
 80048f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	4a18      	ldr	r2, [pc, #96]	; (800495c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80048fc:	6814      	ldr	r4, [r2, #0]
 80048fe:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004902:	4619      	mov	r1, r3
 8004904:	2036      	movs	r0, #54	; 0x36
 8004906:	f007 fc43 	bl	800c190 <pbuf_alloc>
 800490a:	4603      	mov	r3, r0
 800490c:	60a3      	str	r3, [r4, #8]


			/* copy data to pbuf */
			pbuf_take(esTx->p, (char*)buf, len);
 800490e:	4b13      	ldr	r3, [pc, #76]	; (800495c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004916:	b292      	uxth	r2, r2
 8004918:	f107 0108 	add.w	r1, r7, #8
 800491c:	4618      	mov	r0, r3
 800491e:	f008 f983 	bl	800cc28 <pbuf_take>

			tcp_client_send(pcbTx, esTx);
 8004922:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a0d      	ldr	r2, [pc, #52]	; (800495c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004928:	6812      	ldr	r2, [r2, #0]
 800492a:	4611      	mov	r1, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f000 f92c 	bl	8004b8a <tcp_client_send>

			pbuf_free(esTx->p);
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	4618      	mov	r0, r3
 800493a:	f007 ff0d 	bl	800c758 <pbuf_free>
		}

		Tick_Counter = 0;
 800493e:	4b04      	ldr	r3, [pc, #16]	; (8004950 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004940:	2200      	movs	r2, #0
 8004942:	801a      	strh	r2, [r3, #0]
	}
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004944:	bf00      	nop
 8004946:	3774      	adds	r7, #116	; 0x74
 8004948:	46bd      	mov	sp, r7
 800494a:	bd90      	pop	{r4, r7, pc}
 800494c:	40000400 	.word	0x40000400
 8004950:	2400030c 	.word	0x2400030c
 8004954:	24000364 	.word	0x24000364
 8004958:	08014e1c 	.word	0x08014e1c
 800495c:	24000368 	.word	0x24000368
 8004960:	2400036c 	.word	0x2400036c

08004964 <tcp_client_init>:
2. connect to the server
3. start communicating
*/

void tcp_client_init(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 800496a:	f009 fe67 	bl	800e63c <tcp_new>
 800496e:	6078      	str	r0, [r7, #4]

	/* 2. Connect to the server */
	ip_addr_t destIPADDR;
	IP_ADDR4(&destIPADDR, 192, 168, 1, 100);
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <tcp_client_init+0x24>)
 8004972:	603b      	str	r3, [r7, #0]
	tcp_connect(tpcb, &destIPADDR, 31, tcp_client_connected);
 8004974:	4639      	mov	r1, r7
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <tcp_client_init+0x28>)
 8004978:	221f      	movs	r2, #31
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f008 ff24 	bl	800d7c8 <tcp_connect>
}
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	6401a8c0 	.word	0x6401a8c0
 800498c:	08004991 	.word	0x08004991

08004990 <tcp_client_connected>:
/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
  */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	4613      	mov	r3, r2
 800499c:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_client_struct *)mem_malloc(sizeof(struct tcp_client_struct));
 800499e:	200c      	movs	r0, #12
 80049a0:	f006 fe18 	bl	800b5d4 <mem_malloc>
 80049a4:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d023      	beq.n	80049f4 <tcp_client_connected+0x64>
  {
    es->state = ES_CONNECTED;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2200      	movs	r2, #0
 80049bc:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2200      	movs	r2, #0
 80049c2:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 80049c4:	6939      	ldr	r1, [r7, #16]
 80049c6:	68b8      	ldr	r0, [r7, #8]
 80049c8:	f009 fe40 	bl	800e64c <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_client_recv);
 80049cc:	490f      	ldr	r1, [pc, #60]	; (8004a0c <tcp_client_connected+0x7c>)
 80049ce:	68b8      	ldr	r0, [r7, #8]
 80049d0:	f009 fe4e 	bl	800e670 <tcp_recv>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_client_poll, 0);
 80049d4:	2200      	movs	r2, #0
 80049d6:	490e      	ldr	r1, [pc, #56]	; (8004a10 <tcp_client_connected+0x80>)
 80049d8:	68b8      	ldr	r0, [r7, #8]
 80049da:	f009 feaf 	bl	800e73c <tcp_poll>


    /* initialize LwIP tcp_sent callback function */
    tcp_sent(newpcb, tcp_client_sent);
 80049de:	490d      	ldr	r1, [pc, #52]	; (8004a14 <tcp_client_connected+0x84>)
 80049e0:	68b8      	ldr	r0, [r7, #8]
 80049e2:	f009 fe67 	bl	800e6b4 <tcp_sent>

    /* handle the TCP data */
    tcp_client_handle(newpcb, es);
 80049e6:	6939      	ldr	r1, [r7, #16]
 80049e8:	68b8      	ldr	r0, [r7, #8]
 80049ea:	f000 f943 	bl	8004c74 <tcp_client_handle>

    ret_err = ERR_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	75fb      	strb	r3, [r7, #23]
 80049f2:	e005      	b.n	8004a00 <tcp_client_connected+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_client_connection_close(newpcb, es);
 80049f4:	6939      	ldr	r1, [r7, #16]
 80049f6:	68b8      	ldr	r0, [r7, #8]
 80049f8:	f000 f915 	bl	8004c26 <tcp_client_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 80049fc:	23ff      	movs	r3, #255	; 0xff
 80049fe:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8004a00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	08004a19 	.word	0x08004a19
 8004a10:	08004b09 	.word	0x08004b09
 8004a14:	08004b51 	.word	0x08004b51

08004a18 <tcp_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
  */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	70fb      	strb	r3, [r7, #3]
  struct tcp_client_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d105      	bne.n	8004a38 <tcp_client_recv+0x20>
 8004a2c:	4b33      	ldr	r3, [pc, #204]	; (8004afc <tcp_client_recv+0xe4>)
 8004a2e:	22cf      	movs	r2, #207	; 0xcf
 8004a30:	4933      	ldr	r1, [pc, #204]	; (8004b00 <tcp_client_recv+0xe8>)
 8004a32:	4834      	ldr	r0, [pc, #208]	; (8004b04 <tcp_client_recv+0xec>)
 8004a34:	f00e ffce 	bl	80139d4 <iprintf>

  es = (struct tcp_client_struct *)arg;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10d      	bne.n	8004a5e <tcp_client_recv+0x46>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2203      	movs	r2, #3
 8004a46:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d103      	bne.n	8004a58 <tcp_client_recv+0x40>
    {
       /* we're done sending, close connection */
       tcp_client_connection_close(tpcb, es);
 8004a50:	6939      	ldr	r1, [r7, #16]
 8004a52:	68b8      	ldr	r0, [r7, #8]
 8004a54:	f000 f8e7 	bl	8004c26 <tcp_client_connection_close>
//      tcp_sent(tpcb, tcp_client_sent);

      /* send remaining data*/
//      tcp_client_send(tpcb, es);
    }
    ret_err = ERR_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	75fb      	strb	r3, [r7, #23]
 8004a5c:	e047      	b.n	8004aee <tcp_client_recv+0xd6>
  }
  /* else : a non empty frame was received from server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8004a5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00b      	beq.n	8004a7e <tcp_client_recv+0x66>
  {
    /* free received pbuf*/
    if (p != NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <tcp_client_recv+0x60>
    {
      es->p = NULL;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f007 fe70 	bl	800c758 <pbuf_free>
    }
    ret_err = err;
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	75fb      	strb	r3, [r7, #23]
 8004a7c:	e037      	b.n	8004aee <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CONNECTED)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d112      	bne.n	8004aac <tcp_client_recv+0x94>
  {
   /* store reference to incoming pbuf (chain) */
    es->p = p;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	609a      	str	r2, [r3, #8]
    // tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, tcp_client_sent);

    /* Acknowledge the received data */
    tcp_recved(tpcb, p->tot_len);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	891b      	ldrh	r3, [r3, #8]
 8004a90:	4619      	mov	r1, r3
 8004a92:	68b8      	ldr	r0, [r7, #8]
 8004a94:	f008 fe02 	bl	800d69c <tcp_recved>

    /* handle the received data */
    tcp_client_handle(tpcb, es);
 8004a98:	6939      	ldr	r1, [r7, #16]
 8004a9a:	68b8      	ldr	r0, [r7, #8]
 8004a9c:	f000 f8ea 	bl	8004c74 <tcp_client_handle>

    pbuf_free(p);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f007 fe59 	bl	800c758 <pbuf_free>

    ret_err = ERR_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	75fb      	strb	r3, [r7, #23]
 8004aaa:	e020      	b.n	8004aee <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CLOSING)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d10e      	bne.n	8004ad2 <tcp_client_recv+0xba>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	891b      	ldrh	r3, [r3, #8]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	68b8      	ldr	r0, [r7, #8]
 8004abc:	f008 fdee 	bl	800d69c <tcp_recved>
    es->p = NULL;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f007 fe46 	bl	800c758 <pbuf_free>
    ret_err = ERR_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	75fb      	strb	r3, [r7, #23]
 8004ad0:	e00d      	b.n	8004aee <tcp_client_recv+0xd6>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	891b      	ldrh	r3, [r3, #8]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	68b8      	ldr	r0, [r7, #8]
 8004ada:	f008 fddf 	bl	800d69c <tcp_recved>
    es->p = NULL;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f007 fe37 	bl	800c758 <pbuf_free>
    ret_err = ERR_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8004aee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	08014e3c 	.word	0x08014e3c
 8004b00:	08014e64 	.word	0x08014e64
 8004b04:	08014e70 	.word	0x08014e70

08004b08 <tcp_client_poll>:


static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_client_struct *es;

  es = (struct tcp_client_struct *)arg;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00e      	beq.n	8004b3a <tcp_client_poll+0x32>
  {
    if (es->p != NULL)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d107      	bne.n	8004b34 <tcp_client_poll+0x2c>
//      tcp_client_send(tpcb, es);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d103      	bne.n	8004b34 <tcp_client_poll+0x2c>
      {
        /*  close tcp connection */
        tcp_client_connection_close(tpcb, es);
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	6838      	ldr	r0, [r7, #0]
 8004b30:	f000 f879 	bl	8004c26 <tcp_client_connection_close>
      }
    }
    ret_err = ERR_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	73fb      	strb	r3, [r7, #15]
 8004b38:	e004      	b.n	8004b44 <tcp_client_poll+0x3c>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8004b3a:	6838      	ldr	r0, [r7, #0]
 8004b3c:	f008 fd48 	bl	800d5d0 <tcp_abort>
    ret_err = ERR_ABRT;
 8004b40:	23f3      	movs	r3, #243	; 0xf3
 8004b42:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8004b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <tcp_client_sent>:

/** This callback is called, when the server acknowledges the data sent by the client
 * If there is no more data left to sent, we will simply close the connection
  */
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	80fb      	strh	r3, [r7, #6]
  struct tcp_client_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_client_struct *)arg;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2200      	movs	r2, #0
 8004b66:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d107      	bne.n	8004b80 <tcp_client_sent+0x30>
//    tcp_client_send(tpcb, es);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d103      	bne.n	8004b80 <tcp_client_sent+0x30>
      tcp_client_connection_close(tpcb, es);
 8004b78:	6979      	ldr	r1, [r7, #20]
 8004b7a:	68b8      	ldr	r0, [r7, #8]
 8004b7c:	f000 f853 	bl	8004c26 <tcp_client_connection_close>
  }
  return ERR_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <tcp_client_send>:


/** A function to send the data to the server
  */
static void tcp_client_send(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b086      	sub	sp, #24
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8004b98:	e031      	b.n	8004bfe <tcp_client_send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	895a      	ldrh	r2, [r3, #10]
 8004ba8:	2301      	movs	r3, #1
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f00c fc78 	bl	80114a0 <tcp_write>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8004bb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d118      	bne.n	8004bee <tcp_client_send+0x64>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	895b      	ldrh	r3, [r3, #10]
 8004bc0:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <tcp_client_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f007 fe64 	bl	800c8a4 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8004bdc:	6938      	ldr	r0, [r7, #16]
 8004bde:	f007 fdbb 	bl	800c758 <pbuf_free>
 8004be2:	4603      	mov	r3, r0
 8004be4:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8004be6:	7b7b      	ldrb	r3, [r7, #13]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f7      	beq.n	8004bdc <tcp_client_send+0x52>
 8004bec:	e007      	b.n	8004bfe <tcp_client_send+0x74>
     /* we can read more data now */
//     tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
 8004bee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d102      	bne.n	8004bfe <tcp_client_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8004bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10b      	bne.n	8004c1e <tcp_client_send+0x94>
         (es->p != NULL) &&
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d007      	beq.n	8004c1e <tcp_client_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	895a      	ldrh	r2, [r3, #10]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d9bd      	bls.n	8004b9a <tcp_client_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8004c1e:	bf00      	nop
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <tcp_client_connection_close>:


static void tcp_client_connection_close(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8004c30:	2100      	movs	r1, #0
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f009 fd0a 	bl	800e64c <tcp_arg>
  tcp_sent(tpcb, NULL);
 8004c38:	2100      	movs	r1, #0
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f009 fd3a 	bl	800e6b4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8004c40:	2100      	movs	r1, #0
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f009 fd14 	bl	800e670 <tcp_recv>
  tcp_err(tpcb, NULL);
 8004c48:	2100      	movs	r1, #0
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f009 fd54 	bl	800e6f8 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8004c50:	2200      	movs	r2, #0
 8004c52:	2100      	movs	r1, #0
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f009 fd71 	bl	800e73c <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <tcp_client_connection_close+0x40>
  {
    mem_free(es);
 8004c60:	6838      	ldr	r0, [r7, #0]
 8004c62:	f006 fb17 	bl	800b294 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f008 fbc8 	bl	800d3fc <tcp_close>
}
 8004c6c:	bf00      	nop
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <tcp_client_handle>:

/* Handle the incoming TCP Data */

static void tcp_client_handle (struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	60fb      	str	r3, [r7, #12]
	uint16_t inPort = tpcb->remote_port;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8b1b      	ldrh	r3, [r3, #24]
 8004c88:	82fb      	strh	r3, [r7, #22]

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8004c8a:	f107 030c 	add.w	r3, r7, #12
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f005 fadc 	bl	800a24c <ip4addr_ntoa>
 8004c94:	6138      	str	r0, [r7, #16]

//	esTx->state = es->state;
//	esTx->pcb = es->pcb;
//	esTx->p = es->p;

	esTx = es;
 8004c96:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <tcp_client_handle+0x40>)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
 8004c9c:	4a06      	ldr	r2, [pc, #24]	; (8004cb8 <tcp_client_handle+0x44>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6013      	str	r3, [r2, #0]

	counter++;
 8004ca2:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <tcp_client_handle+0x48>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	4a04      	ldr	r2, [pc, #16]	; (8004cbc <tcp_client_handle+0x48>)
 8004caa:	6013      	str	r3, [r2, #0]

}
 8004cac:	bf00      	nop
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	24000368 	.word	0x24000368
 8004cb8:	2400036c 	.word	0x2400036c
 8004cbc:	24000364 	.word	0x24000364

08004cc0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004cc0:	b5b0      	push	{r4, r5, r7, lr}
 8004cc2:	b08c      	sub	sp, #48	; 0x30
 8004cc4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004cc6:	4b96      	ldr	r3, [pc, #600]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004cc8:	22c0      	movs	r2, #192	; 0xc0
 8004cca:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004ccc:	4b94      	ldr	r3, [pc, #592]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004cce:	22a8      	movs	r2, #168	; 0xa8
 8004cd0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004cd2:	4b93      	ldr	r3, [pc, #588]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 8004cd8:	4b91      	ldr	r3, [pc, #580]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004cde:	4b91      	ldr	r3, [pc, #580]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004ce0:	22ff      	movs	r2, #255	; 0xff
 8004ce2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004ce4:	4b8f      	ldr	r3, [pc, #572]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004ce6:	22ff      	movs	r2, #255	; 0xff
 8004ce8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004cea:	4b8e      	ldr	r3, [pc, #568]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004cec:	22ff      	movs	r2, #255	; 0xff
 8004cee:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004cf0:	4b8c      	ldr	r3, [pc, #560]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004cf6:	4b8c      	ldr	r3, [pc, #560]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004cf8:	22c0      	movs	r2, #192	; 0xc0
 8004cfa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004cfc:	4b8a      	ldr	r3, [pc, #552]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004cfe:	22a8      	movs	r2, #168	; 0xa8
 8004d00:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004d02:	4b89      	ldr	r3, [pc, #548]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004d04:	2201      	movs	r2, #1
 8004d06:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 8004d08:	4b87      	ldr	r3, [pc, #540]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004d0a:	2264      	movs	r2, #100	; 0x64
 8004d0c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004d0e:	2100      	movs	r1, #0
 8004d10:	2000      	movs	r0, #0
 8004d12:	f00e fa59 	bl	80131c8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004d16:	4b82      	ldr	r3, [pc, #520]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	061a      	lsls	r2, r3, #24
 8004d1c:	4b80      	ldr	r3, [pc, #512]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	041b      	lsls	r3, r3, #16
 8004d22:	431a      	orrs	r2, r3
 8004d24:	4b7e      	ldr	r3, [pc, #504]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d26:	789b      	ldrb	r3, [r3, #2]
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	4a7c      	ldr	r2, [pc, #496]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d2e:	78d2      	ldrb	r2, [r2, #3]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	061a      	lsls	r2, r3, #24
 8004d34:	4b7a      	ldr	r3, [pc, #488]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	0619      	lsls	r1, r3, #24
 8004d3a:	4b79      	ldr	r3, [pc, #484]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d3c:	785b      	ldrb	r3, [r3, #1]
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	4319      	orrs	r1, r3
 8004d42:	4b77      	ldr	r3, [pc, #476]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d44:	789b      	ldrb	r3, [r3, #2]
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	4975      	ldr	r1, [pc, #468]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d4c:	78c9      	ldrb	r1, [r1, #3]
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d56:	431a      	orrs	r2, r3
 8004d58:	4b71      	ldr	r3, [pc, #452]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	0619      	lsls	r1, r3, #24
 8004d5e:	4b70      	ldr	r3, [pc, #448]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	041b      	lsls	r3, r3, #16
 8004d64:	4319      	orrs	r1, r3
 8004d66:	4b6e      	ldr	r3, [pc, #440]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d68:	789b      	ldrb	r3, [r3, #2]
 8004d6a:	021b      	lsls	r3, r3, #8
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	496c      	ldr	r1, [pc, #432]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d70:	78c9      	ldrb	r1, [r1, #3]
 8004d72:	430b      	orrs	r3, r1
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	4b68      	ldr	r3, [pc, #416]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	0619      	lsls	r1, r3, #24
 8004d82:	4b67      	ldr	r3, [pc, #412]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d84:	785b      	ldrb	r3, [r3, #1]
 8004d86:	041b      	lsls	r3, r3, #16
 8004d88:	4319      	orrs	r1, r3
 8004d8a:	4b65      	ldr	r3, [pc, #404]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d8c:	789b      	ldrb	r3, [r3, #2]
 8004d8e:	021b      	lsls	r3, r3, #8
 8004d90:	430b      	orrs	r3, r1
 8004d92:	4963      	ldr	r1, [pc, #396]	; (8004f20 <MX_LWIP_Init+0x260>)
 8004d94:	78c9      	ldrb	r1, [r1, #3]
 8004d96:	430b      	orrs	r3, r1
 8004d98:	0e1b      	lsrs	r3, r3, #24
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	4a63      	ldr	r2, [pc, #396]	; (8004f2c <MX_LWIP_Init+0x26c>)
 8004d9e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004da0:	4b60      	ldr	r3, [pc, #384]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	061a      	lsls	r2, r3, #24
 8004da6:	4b5f      	ldr	r3, [pc, #380]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	041b      	lsls	r3, r3, #16
 8004dac:	431a      	orrs	r2, r3
 8004dae:	4b5d      	ldr	r3, [pc, #372]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004db0:	789b      	ldrb	r3, [r3, #2]
 8004db2:	021b      	lsls	r3, r3, #8
 8004db4:	4313      	orrs	r3, r2
 8004db6:	4a5b      	ldr	r2, [pc, #364]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004db8:	78d2      	ldrb	r2, [r2, #3]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	061a      	lsls	r2, r3, #24
 8004dbe:	4b59      	ldr	r3, [pc, #356]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	0619      	lsls	r1, r3, #24
 8004dc4:	4b57      	ldr	r3, [pc, #348]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004dc6:	785b      	ldrb	r3, [r3, #1]
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	4319      	orrs	r1, r3
 8004dcc:	4b55      	ldr	r3, [pc, #340]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004dce:	789b      	ldrb	r3, [r3, #2]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	4953      	ldr	r1, [pc, #332]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004dd6:	78c9      	ldrb	r1, [r1, #3]
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004de0:	431a      	orrs	r2, r3
 8004de2:	4b50      	ldr	r3, [pc, #320]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	0619      	lsls	r1, r3, #24
 8004de8:	4b4e      	ldr	r3, [pc, #312]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	041b      	lsls	r3, r3, #16
 8004dee:	4319      	orrs	r1, r3
 8004df0:	4b4c      	ldr	r3, [pc, #304]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004df2:	789b      	ldrb	r3, [r3, #2]
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	430b      	orrs	r3, r1
 8004df8:	494a      	ldr	r1, [pc, #296]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004dfa:	78c9      	ldrb	r1, [r1, #3]
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e04:	431a      	orrs	r2, r3
 8004e06:	4b47      	ldr	r3, [pc, #284]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	0619      	lsls	r1, r3, #24
 8004e0c:	4b45      	ldr	r3, [pc, #276]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004e0e:	785b      	ldrb	r3, [r3, #1]
 8004e10:	041b      	lsls	r3, r3, #16
 8004e12:	4319      	orrs	r1, r3
 8004e14:	4b43      	ldr	r3, [pc, #268]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004e16:	789b      	ldrb	r3, [r3, #2]
 8004e18:	021b      	lsls	r3, r3, #8
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	4941      	ldr	r1, [pc, #260]	; (8004f24 <MX_LWIP_Init+0x264>)
 8004e1e:	78c9      	ldrb	r1, [r1, #3]
 8004e20:	430b      	orrs	r3, r1
 8004e22:	0e1b      	lsrs	r3, r3, #24
 8004e24:	4313      	orrs	r3, r2
 8004e26:	4a42      	ldr	r2, [pc, #264]	; (8004f30 <MX_LWIP_Init+0x270>)
 8004e28:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004e2a:	4b3f      	ldr	r3, [pc, #252]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	061a      	lsls	r2, r3, #24
 8004e30:	4b3d      	ldr	r3, [pc, #244]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004e32:	785b      	ldrb	r3, [r3, #1]
 8004e34:	041b      	lsls	r3, r3, #16
 8004e36:	431a      	orrs	r2, r3
 8004e38:	4b3b      	ldr	r3, [pc, #236]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004e3a:	789b      	ldrb	r3, [r3, #2]
 8004e3c:	021b      	lsls	r3, r3, #8
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	4a39      	ldr	r2, [pc, #228]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004e42:	78d2      	ldrb	r2, [r2, #3]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	061a      	lsls	r2, r3, #24
 8004e48:	4b37      	ldr	r3, [pc, #220]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	0619      	lsls	r1, r3, #24
 8004e4e:	4b36      	ldr	r3, [pc, #216]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	4319      	orrs	r1, r3
 8004e56:	4b34      	ldr	r3, [pc, #208]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004e58:	789b      	ldrb	r3, [r3, #2]
 8004e5a:	021b      	lsls	r3, r3, #8
 8004e5c:	430b      	orrs	r3, r1
 8004e5e:	4932      	ldr	r1, [pc, #200]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004e60:	78c9      	ldrb	r1, [r1, #3]
 8004e62:	430b      	orrs	r3, r1
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	4b2e      	ldr	r3, [pc, #184]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	0619      	lsls	r1, r3, #24
 8004e72:	4b2d      	ldr	r3, [pc, #180]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004e74:	785b      	ldrb	r3, [r3, #1]
 8004e76:	041b      	lsls	r3, r3, #16
 8004e78:	4319      	orrs	r1, r3
 8004e7a:	4b2b      	ldr	r3, [pc, #172]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004e7c:	789b      	ldrb	r3, [r3, #2]
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	430b      	orrs	r3, r1
 8004e82:	4929      	ldr	r1, [pc, #164]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004e84:	78c9      	ldrb	r1, [r1, #3]
 8004e86:	430b      	orrs	r3, r1
 8004e88:	0a1b      	lsrs	r3, r3, #8
 8004e8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	4b25      	ldr	r3, [pc, #148]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	0619      	lsls	r1, r3, #24
 8004e96:	4b24      	ldr	r3, [pc, #144]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004e98:	785b      	ldrb	r3, [r3, #1]
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	4319      	orrs	r1, r3
 8004e9e:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004ea0:	789b      	ldrb	r3, [r3, #2]
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	4920      	ldr	r1, [pc, #128]	; (8004f28 <MX_LWIP_Init+0x268>)
 8004ea8:	78c9      	ldrb	r1, [r1, #3]
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	0e1b      	lsrs	r3, r3, #24
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	4a20      	ldr	r2, [pc, #128]	; (8004f34 <MX_LWIP_Init+0x274>)
 8004eb2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004eb4:	4b20      	ldr	r3, [pc, #128]	; (8004f38 <MX_LWIP_Init+0x278>)
 8004eb6:	9302      	str	r3, [sp, #8]
 8004eb8:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <MX_LWIP_Init+0x27c>)
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <MX_LWIP_Init+0x274>)
 8004ec2:	4a1b      	ldr	r2, [pc, #108]	; (8004f30 <MX_LWIP_Init+0x270>)
 8004ec4:	4919      	ldr	r1, [pc, #100]	; (8004f2c <MX_LWIP_Init+0x26c>)
 8004ec6:	481e      	ldr	r0, [pc, #120]	; (8004f40 <MX_LWIP_Init+0x280>)
 8004ec8:	f006 fdd4 	bl	800ba74 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004ecc:	481c      	ldr	r0, [pc, #112]	; (8004f40 <MX_LWIP_Init+0x280>)
 8004ece:	f006 ff83 	bl	800bdd8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004ed2:	4b1b      	ldr	r3, [pc, #108]	; (8004f40 <MX_LWIP_Init+0x280>)
 8004ed4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ed8:	089b      	lsrs	r3, r3, #2
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004ee4:	4816      	ldr	r0, [pc, #88]	; (8004f40 <MX_LWIP_Init+0x280>)
 8004ee6:	f006 ff87 	bl	800bdf8 <netif_set_up>
 8004eea:	e002      	b.n	8004ef2 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004eec:	4814      	ldr	r0, [pc, #80]	; (8004f40 <MX_LWIP_Init+0x280>)
 8004eee:	f006 ffef 	bl	800bed0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004ef2:	4914      	ldr	r1, [pc, #80]	; (8004f44 <MX_LWIP_Init+0x284>)
 8004ef4:	4812      	ldr	r0, [pc, #72]	; (8004f40 <MX_LWIP_Init+0x280>)
 8004ef6:	f007 f881 	bl	800bffc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004efa:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <MX_LWIP_Init+0x288>)
 8004efc:	1d3c      	adds	r4, r7, #4
 8004efe:	461d      	mov	r5, r3
 8004f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004f08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	490c      	ldr	r1, [pc, #48]	; (8004f40 <MX_LWIP_Init+0x280>)
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fd55 	bl	80059c0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004f16:	bf00      	nop
 8004f18:	3720      	adds	r7, #32
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	240003b0 	.word	0x240003b0
 8004f24:	240003b4 	.word	0x240003b4
 8004f28:	240003b8 	.word	0x240003b8
 8004f2c:	240003a4 	.word	0x240003a4
 8004f30:	240003a8 	.word	0x240003a8
 8004f34:	240003ac 	.word	0x240003ac
 8004f38:	08013105 	.word	0x08013105
 8004f3c:	080053e9 	.word	0x080053e9
 8004f40:	24000370 	.word	0x24000370
 8004f44:	08004f4d 	.word	0x08004f4d
 8004f48:	08014ea0 	.word	0x08014ea0

08004f4c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004f68:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <HAL_ETH_RxCpltCallback+0x1c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fe71 	bl	8005c54 <osSemaphoreRelease>
}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	240003c4 	.word	0x240003c4

08004f80 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004f88:	4b04      	ldr	r3, [pc, #16]	; (8004f9c <HAL_ETH_TxCpltCallback+0x1c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fe61 	bl	8005c54 <osSemaphoreRelease>
}
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	240003c8 	.word	0x240003c8

08004fa0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7fd fa07 	bl	80023bc <HAL_ETH_GetDMAError>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb4:	2b80      	cmp	r3, #128	; 0x80
 8004fb6:	d104      	bne.n	8004fc2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <HAL_ETH_ErrorCallback+0x2c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fe49 	bl	8005c54 <osSemaphoreRelease>
  }
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	240003c4 	.word	0x240003c4

08004fd0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004fd0:	b5b0      	push	{r4, r5, r7, lr}
 8004fd2:	b0a8      	sub	sp, #160	; 0xa0
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fee:	2264      	movs	r2, #100	; 0x64
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f00e fce6 	bl	80139c4 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004ff8:	4b84      	ldr	r3, [pc, #528]	; (800520c <low_level_init+0x23c>)
 8004ffa:	4a85      	ldr	r2, [pc, #532]	; (8005210 <low_level_init+0x240>)
 8004ffc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004ffe:	2300      	movs	r3, #0
 8005000:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8005004:	2380      	movs	r3, #128	; 0x80
 8005006:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800500a:	23e1      	movs	r3, #225	; 0xe1
 800500c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8005010:	2300      	movs	r3, #0
 8005012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8005016:	2300      	movs	r3, #0
 8005018:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 800501c:	2300      	movs	r3, #0
 800501e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8005022:	4a7a      	ldr	r2, [pc, #488]	; (800520c <low_level_init+0x23c>)
 8005024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005028:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800502a:	4b78      	ldr	r3, [pc, #480]	; (800520c <low_level_init+0x23c>)
 800502c:	2201      	movs	r2, #1
 800502e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005030:	4b76      	ldr	r3, [pc, #472]	; (800520c <low_level_init+0x23c>)
 8005032:	4a78      	ldr	r2, [pc, #480]	; (8005214 <low_level_init+0x244>)
 8005034:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005036:	4b75      	ldr	r3, [pc, #468]	; (800520c <low_level_init+0x23c>)
 8005038:	4a77      	ldr	r2, [pc, #476]	; (8005218 <low_level_init+0x248>)
 800503a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800503c:	4b73      	ldr	r3, [pc, #460]	; (800520c <low_level_init+0x23c>)
 800503e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005042:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005044:	4871      	ldr	r0, [pc, #452]	; (800520c <low_level_init+0x23c>)
 8005046:	f7fc f963 	bl	8001310 <HAL_ETH_Init>
 800504a:	4603      	mov	r3, r0
 800504c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005050:	2238      	movs	r2, #56	; 0x38
 8005052:	2100      	movs	r1, #0
 8005054:	4871      	ldr	r0, [pc, #452]	; (800521c <low_level_init+0x24c>)
 8005056:	f00e fcb5 	bl	80139c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800505a:	4b70      	ldr	r3, [pc, #448]	; (800521c <low_level_init+0x24c>)
 800505c:	2221      	movs	r2, #33	; 0x21
 800505e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005060:	4b6e      	ldr	r3, [pc, #440]	; (800521c <low_level_init+0x24c>)
 8005062:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005066:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005068:	4b6c      	ldr	r3, [pc, #432]	; (800521c <low_level_init+0x24c>)
 800506a:	2200      	movs	r2, #0
 800506c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800506e:	486c      	ldr	r0, [pc, #432]	; (8005220 <low_level_init+0x250>)
 8005070:	f006 fbba 	bl	800b7e8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2206      	movs	r2, #6
 8005078:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800507c:	4b63      	ldr	r3, [pc, #396]	; (800520c <low_level_init+0x23c>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	781a      	ldrb	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005088:	4b60      	ldr	r3, [pc, #384]	; (800520c <low_level_init+0x23c>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	785a      	ldrb	r2, [r3, #1]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005094:	4b5d      	ldr	r3, [pc, #372]	; (800520c <low_level_init+0x23c>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	789a      	ldrb	r2, [r3, #2]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80050a0:	4b5a      	ldr	r3, [pc, #360]	; (800520c <low_level_init+0x23c>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	78da      	ldrb	r2, [r3, #3]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80050ac:	4b57      	ldr	r3, [pc, #348]	; (800520c <low_level_init+0x23c>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	791a      	ldrb	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80050b8:	4b54      	ldr	r3, [pc, #336]	; (800520c <low_level_init+0x23c>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	795a      	ldrb	r2, [r3, #5]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80050ca:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050d2:	f043 030a 	orr.w	r3, r3, #10
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 80050de:	2203      	movs	r2, #3
 80050e0:	2100      	movs	r1, #0
 80050e2:	2001      	movs	r0, #1
 80050e4:	f001 fc98 	bl	8006a18 <xQueueGenericCreate>
 80050e8:	4603      	mov	r3, r0
 80050ea:	4a4e      	ldr	r2, [pc, #312]	; (8005224 <low_level_init+0x254>)
 80050ec:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 80050ee:	2203      	movs	r2, #3
 80050f0:	2100      	movs	r1, #0
 80050f2:	2001      	movs	r0, #1
 80050f4:	f001 fc90 	bl	8006a18 <xQueueGenericCreate>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4a4b      	ldr	r2, [pc, #300]	; (8005228 <low_level_init+0x258>)
 80050fc:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80050fe:	4b4b      	ldr	r3, [pc, #300]	; (800522c <low_level_init+0x25c>)
 8005100:	f107 0408 	add.w	r4, r7, #8
 8005104:	461d      	mov	r5, r3
 8005106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800510a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800510e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005112:	f107 0308 	add.w	r3, r7, #8
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fc51 	bl	80059c0 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800511e:	4944      	ldr	r1, [pc, #272]	; (8005230 <low_level_init+0x260>)
 8005120:	4844      	ldr	r0, [pc, #272]	; (8005234 <low_level_init+0x264>)
 8005122:	f7fb fda8 	bl	8000c76 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005126:	4843      	ldr	r0, [pc, #268]	; (8005234 <low_level_init+0x264>)
 8005128:	f7fb fdd7 	bl	8000cda <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800512c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005130:	2b00      	cmp	r3, #0
 8005132:	d164      	bne.n	80051fe <low_level_init+0x22e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005134:	483f      	ldr	r0, [pc, #252]	; (8005234 <low_level_init+0x264>)
 8005136:	f7fb fe78 	bl	8000e2a <LAN8742_GetLinkState>
 800513a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800513e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005142:	2b01      	cmp	r3, #1
 8005144:	dc06      	bgt.n	8005154 <low_level_init+0x184>
    {
      netif_set_link_down(netif);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f006 ff28 	bl	800bf9c <netif_set_link_down>
      netif_set_down(netif);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f006 febf 	bl	800bed0 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005152:	e056      	b.n	8005202 <low_level_init+0x232>
      switch (PHYLinkState)
 8005154:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005158:	3b02      	subs	r3, #2
 800515a:	2b03      	cmp	r3, #3
 800515c:	d82a      	bhi.n	80051b4 <low_level_init+0x1e4>
 800515e:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <low_level_init+0x194>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	08005175 	.word	0x08005175
 8005168:	08005187 	.word	0x08005187
 800516c:	08005197 	.word	0x08005197
 8005170:	080051a7 	.word	0x080051a7
        duplex = ETH_FULLDUPLEX_MODE;
 8005174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005178:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800517c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005184:	e01f      	b.n	80051c6 <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 8005186:	2300      	movs	r3, #0
 8005188:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800518c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005194:	e017      	b.n	80051c6 <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 8005196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800519a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800519e:	2300      	movs	r3, #0
 80051a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80051a4:	e00f      	b.n	80051c6 <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80051ac:	2300      	movs	r3, #0
 80051ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80051b2:	e008      	b.n	80051c6 <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 80051b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80051bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80051c4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80051c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051ca:	4619      	mov	r1, r3
 80051cc:	480f      	ldr	r0, [pc, #60]	; (800520c <low_level_init+0x23c>)
 80051ce:	f7fc feaf 	bl	8001f30 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80051d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051d6:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 80051d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051dc:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80051de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051e2:	4619      	mov	r1, r3
 80051e4:	4809      	ldr	r0, [pc, #36]	; (800520c <low_level_init+0x23c>)
 80051e6:	f7fd f877 	bl	80022d8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80051ea:	4808      	ldr	r0, [pc, #32]	; (800520c <low_level_init+0x23c>)
 80051ec:	f7fc f9d8 	bl	80015a0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f006 fe01 	bl	800bdf8 <netif_set_up>
    netif_set_link_up(netif);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f006 fe9c 	bl	800bf34 <netif_set_link_up>
}
 80051fc:	e001      	b.n	8005202 <low_level_init+0x232>
    Error_Handler();
 80051fe:	f7fb fb8d 	bl	800091c <Error_Handler>
}
 8005202:	bf00      	nop
 8005204:	37a0      	adds	r7, #160	; 0xa0
 8005206:	46bd      	mov	sp, r7
 8005208:	bdb0      	pop	{r4, r5, r7, pc}
 800520a:	bf00      	nop
 800520c:	240003cc 	.word	0x240003cc
 8005210:	40028000 	.word	0x40028000
 8005214:	30040060 	.word	0x30040060
 8005218:	30040000 	.word	0x30040000
 800521c:	2400047c 	.word	0x2400047c
 8005220:	08017d6c 	.word	0x08017d6c
 8005224:	240003c4 	.word	0x240003c4
 8005228:	240003c8 	.word	0x240003c8
 800522c:	08014ec4 	.word	0x08014ec4
 8005230:	24000010 	.word	0x24000010
 8005234:	240004b4 	.word	0x240004b4

08005238 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b092      	sub	sp, #72	; 0x48
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005246:	2300      	movs	r3, #0
 8005248:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005250:	f107 030c 	add.w	r3, r7, #12
 8005254:	2230      	movs	r2, #48	; 0x30
 8005256:	2100      	movs	r1, #0
 8005258:	4618      	mov	r0, r3
 800525a:	f00e fbb3 	bl	80139c4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800525e:	f107 030c 	add.w	r3, r7, #12
 8005262:	2230      	movs	r2, #48	; 0x30
 8005264:	2100      	movs	r1, #0
 8005266:	4618      	mov	r0, r3
 8005268:	f00e fbac 	bl	80139c4 <memset>

  for(q = p; q != NULL; q = q->next)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	643b      	str	r3, [r7, #64]	; 0x40
 8005270:	e045      	b.n	80052fe <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005274:	2b03      	cmp	r3, #3
 8005276:	d902      	bls.n	800527e <low_level_output+0x46>
      return ERR_IF;
 8005278:	f06f 030b 	mvn.w	r3, #11
 800527c:	e065      	b.n	800534a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800527e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005280:	6859      	ldr	r1, [r3, #4]
 8005282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005284:	4613      	mov	r3, r2
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	4413      	add	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	3348      	adds	r3, #72	; 0x48
 800528e:	443b      	add	r3, r7
 8005290:	3b3c      	subs	r3, #60	; 0x3c
 8005292:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005296:	895b      	ldrh	r3, [r3, #10]
 8005298:	4619      	mov	r1, r3
 800529a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800529c:	4613      	mov	r3, r2
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	3348      	adds	r3, #72	; 0x48
 80052a6:	443b      	add	r3, r7
 80052a8:	3b38      	subs	r3, #56	; 0x38
 80052aa:	6019      	str	r1, [r3, #0]

    if(i>0)
 80052ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d011      	beq.n	80052d6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80052b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b4:	1e5a      	subs	r2, r3, #1
 80052b6:	f107 000c 	add.w	r0, r7, #12
 80052ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052bc:	460b      	mov	r3, r1
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	440b      	add	r3, r1
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	18c1      	adds	r1, r0, r3
 80052c6:	4613      	mov	r3, r2
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	3348      	adds	r3, #72	; 0x48
 80052d0:	443b      	add	r3, r7
 80052d2:	3b34      	subs	r3, #52	; 0x34
 80052d4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80052d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d109      	bne.n	80052f2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80052de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052e0:	4613      	mov	r3, r2
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	3348      	adds	r3, #72	; 0x48
 80052ea:	443b      	add	r3, r7
 80052ec:	3b34      	subs	r3, #52	; 0x34
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
    }

    i++;
 80052f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f4:	3301      	adds	r3, #1
 80052f6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80052f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	643b      	str	r3, [r7, #64]	; 0x40
 80052fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1b6      	bne.n	8005272 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	891b      	ldrh	r3, [r3, #8]
 8005308:	461a      	mov	r2, r3
 800530a:	4b12      	ldr	r3, [pc, #72]	; (8005354 <low_level_output+0x11c>)
 800530c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800530e:	4a11      	ldr	r2, [pc, #68]	; (8005354 <low_level_output+0x11c>)
 8005310:	f107 030c 	add.w	r3, r7, #12
 8005314:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005316:	4a0f      	ldr	r2, [pc, #60]	; (8005354 <low_level_output+0x11c>)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800531c:	6838      	ldr	r0, [r7, #0]
 800531e:	f007 fac1 	bl	800c8a4 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005322:	490c      	ldr	r1, [pc, #48]	; (8005354 <low_level_output+0x11c>)
 8005324:	480c      	ldr	r0, [pc, #48]	; (8005358 <low_level_output+0x120>)
 8005326:	f7fc fa3f 	bl	80017a8 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800532a:	bf00      	nop
 800532c:	4b0b      	ldr	r3, [pc, #44]	; (800535c <low_level_output+0x124>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f04f 31ff 	mov.w	r1, #4294967295
 8005334:	4618      	mov	r0, r3
 8005336:	f000 fc3f 	bl	8005bb8 <osSemaphoreWait>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1f5      	bne.n	800532c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005340:	4805      	ldr	r0, [pc, #20]	; (8005358 <low_level_output+0x120>)
 8005342:	f7fc fbb0 	bl	8001aa6 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005346:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800534a:	4618      	mov	r0, r3
 800534c:	3748      	adds	r7, #72	; 0x48
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	2400047c 	.word	0x2400047c
 8005358:	240003cc 	.word	0x240003cc
 800535c:	240003c8 	.word	0x240003c8

08005360 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005368:	2300      	movs	r3, #0
 800536a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800536c:	4b07      	ldr	r3, [pc, #28]	; (800538c <low_level_input+0x2c>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005374:	f107 030c 	add.w	r3, r7, #12
 8005378:	4619      	mov	r1, r3
 800537a:	4805      	ldr	r0, [pc, #20]	; (8005390 <low_level_input+0x30>)
 800537c:	f7fc fa65 	bl	800184a <HAL_ETH_ReadData>
  }

  return p;
 8005380:	68fb      	ldr	r3, [r7, #12]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	240003c0 	.word	0x240003c0
 8005390:	240003cc 	.word	0x240003cc

08005394 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80053a4:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <ethernetif_input+0x50>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f04f 31ff 	mov.w	r1, #4294967295
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fc03 	bl	8005bb8 <osSemaphoreWait>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f5      	bne.n	80053a4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80053b8:	68b8      	ldr	r0, [r7, #8]
 80053ba:	f7ff ffd1 	bl	8005360 <low_level_input>
 80053be:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	4798      	blx	r3
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f007 f9be 	bl	800c758 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1ea      	bne.n	80053b8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80053e2:	e7df      	b.n	80053a4 <ethernetif_input+0x10>
 80053e4:	240003c4 	.word	0x240003c4

080053e8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <ethernetif_init+0x1c>
 80053f6:	4b0e      	ldr	r3, [pc, #56]	; (8005430 <ethernetif_init+0x48>)
 80053f8:	f240 12f9 	movw	r2, #505	; 0x1f9
 80053fc:	490d      	ldr	r1, [pc, #52]	; (8005434 <ethernetif_init+0x4c>)
 80053fe:	480e      	ldr	r0, [pc, #56]	; (8005438 <ethernetif_init+0x50>)
 8005400:	f00e fae8 	bl	80139d4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2273      	movs	r2, #115	; 0x73
 8005408:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2274      	movs	r2, #116	; 0x74
 8005410:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a09      	ldr	r2, [pc, #36]	; (800543c <ethernetif_init+0x54>)
 8005418:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a08      	ldr	r2, [pc, #32]	; (8005440 <ethernetif_init+0x58>)
 800541e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fdd5 	bl	8004fd0 <low_level_init>

  return ERR_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	08014ee0 	.word	0x08014ee0
 8005434:	08014efc 	.word	0x08014efc
 8005438:	08014f0c 	.word	0x08014f0c
 800543c:	08008fe1 	.word	0x08008fe1
 8005440:	08005239 	.word	0x08005239

08005444 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005450:	68f9      	ldr	r1, [r7, #12]
 8005452:	4809      	ldr	r0, [pc, #36]	; (8005478 <pbuf_free_custom+0x34>)
 8005454:	f006 fab8 	bl	800b9c8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005458:	4b08      	ldr	r3, [pc, #32]	; (800547c <pbuf_free_custom+0x38>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d107      	bne.n	8005470 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005460:	4b06      	ldr	r3, [pc, #24]	; (800547c <pbuf_free_custom+0x38>)
 8005462:	2200      	movs	r2, #0
 8005464:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005466:	4b06      	ldr	r3, [pc, #24]	; (8005480 <pbuf_free_custom+0x3c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fbf2 	bl	8005c54 <osSemaphoreRelease>
  }
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	08017d6c 	.word	0x08017d6c
 800547c:	240003c0 	.word	0x240003c0
 8005480:	240003c4 	.word	0x240003c4

08005484 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005488:	f7fb fda6 	bl	8000fd8 <HAL_GetTick>
 800548c:	4603      	mov	r3, r0
}
 800548e:	4618      	mov	r0, r3
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08e      	sub	sp, #56	; 0x38
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	60da      	str	r2, [r3, #12]
 80054aa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a5d      	ldr	r2, [pc, #372]	; (8005628 <HAL_ETH_MspInit+0x194>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	f040 80b3 	bne.w	800561e <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80054b8:	4b5c      	ldr	r3, [pc, #368]	; (800562c <HAL_ETH_MspInit+0x198>)
 80054ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054be:	4a5b      	ldr	r2, [pc, #364]	; (800562c <HAL_ETH_MspInit+0x198>)
 80054c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80054c8:	4b58      	ldr	r3, [pc, #352]	; (800562c <HAL_ETH_MspInit+0x198>)
 80054ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054d2:	623b      	str	r3, [r7, #32]
 80054d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80054d6:	4b55      	ldr	r3, [pc, #340]	; (800562c <HAL_ETH_MspInit+0x198>)
 80054d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054dc:	4a53      	ldr	r2, [pc, #332]	; (800562c <HAL_ETH_MspInit+0x198>)
 80054de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80054e6:	4b51      	ldr	r3, [pc, #324]	; (800562c <HAL_ETH_MspInit+0x198>)
 80054e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80054f4:	4b4d      	ldr	r3, [pc, #308]	; (800562c <HAL_ETH_MspInit+0x198>)
 80054f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054fa:	4a4c      	ldr	r2, [pc, #304]	; (800562c <HAL_ETH_MspInit+0x198>)
 80054fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005500:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005504:	4b49      	ldr	r3, [pc, #292]	; (800562c <HAL_ETH_MspInit+0x198>)
 8005506:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800550a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550e:	61bb      	str	r3, [r7, #24]
 8005510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005512:	4b46      	ldr	r3, [pc, #280]	; (800562c <HAL_ETH_MspInit+0x198>)
 8005514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005518:	4a44      	ldr	r2, [pc, #272]	; (800562c <HAL_ETH_MspInit+0x198>)
 800551a:	f043 0304 	orr.w	r3, r3, #4
 800551e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005522:	4b42      	ldr	r3, [pc, #264]	; (800562c <HAL_ETH_MspInit+0x198>)
 8005524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005530:	4b3e      	ldr	r3, [pc, #248]	; (800562c <HAL_ETH_MspInit+0x198>)
 8005532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005536:	4a3d      	ldr	r2, [pc, #244]	; (800562c <HAL_ETH_MspInit+0x198>)
 8005538:	f043 0301 	orr.w	r3, r3, #1
 800553c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005540:	4b3a      	ldr	r3, [pc, #232]	; (800562c <HAL_ETH_MspInit+0x198>)
 8005542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800554e:	4b37      	ldr	r3, [pc, #220]	; (800562c <HAL_ETH_MspInit+0x198>)
 8005550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005554:	4a35      	ldr	r2, [pc, #212]	; (800562c <HAL_ETH_MspInit+0x198>)
 8005556:	f043 0302 	orr.w	r3, r3, #2
 800555a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800555e:	4b33      	ldr	r3, [pc, #204]	; (800562c <HAL_ETH_MspInit+0x198>)
 8005560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800556c:	4b2f      	ldr	r3, [pc, #188]	; (800562c <HAL_ETH_MspInit+0x198>)
 800556e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005572:	4a2e      	ldr	r2, [pc, #184]	; (800562c <HAL_ETH_MspInit+0x198>)
 8005574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800557c:	4b2b      	ldr	r3, [pc, #172]	; (800562c <HAL_ETH_MspInit+0x198>)
 800557e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005586:	60bb      	str	r3, [r7, #8]
 8005588:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800558a:	2332      	movs	r3, #50	; 0x32
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800558e:	2302      	movs	r3, #2
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005592:	2300      	movs	r3, #0
 8005594:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005596:	2303      	movs	r3, #3
 8005598:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800559a:	230b      	movs	r3, #11
 800559c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800559e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055a2:	4619      	mov	r1, r3
 80055a4:	4822      	ldr	r0, [pc, #136]	; (8005630 <HAL_ETH_MspInit+0x19c>)
 80055a6:	f7fd fc8b 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80055aa:	2386      	movs	r3, #134	; 0x86
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ae:	2302      	movs	r3, #2
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055b6:	2303      	movs	r3, #3
 80055b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055ba:	230b      	movs	r3, #11
 80055bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055c2:	4619      	mov	r1, r3
 80055c4:	481b      	ldr	r0, [pc, #108]	; (8005634 <HAL_ETH_MspInit+0x1a0>)
 80055c6:	f7fd fc7b 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80055ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d0:	2302      	movs	r3, #2
 80055d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055d8:	2303      	movs	r3, #3
 80055da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055dc:	230b      	movs	r3, #11
 80055de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055e4:	4619      	mov	r1, r3
 80055e6:	4814      	ldr	r0, [pc, #80]	; (8005638 <HAL_ETH_MspInit+0x1a4>)
 80055e8:	f7fd fc6a 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80055ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f2:	2302      	movs	r3, #2
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055fa:	2303      	movs	r3, #3
 80055fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80055fe:	230b      	movs	r3, #11
 8005600:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005606:	4619      	mov	r1, r3
 8005608:	480c      	ldr	r0, [pc, #48]	; (800563c <HAL_ETH_MspInit+0x1a8>)
 800560a:	f7fd fc59 	bl	8002ec0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800560e:	2200      	movs	r2, #0
 8005610:	2105      	movs	r1, #5
 8005612:	203d      	movs	r0, #61	; 0x3d
 8005614:	f7fb fdc4 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005618:	203d      	movs	r0, #61	; 0x3d
 800561a:	f7fb fddb 	bl	80011d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800561e:	bf00      	nop
 8005620:	3738      	adds	r7, #56	; 0x38
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40028000 	.word	0x40028000
 800562c:	58024400 	.word	0x58024400
 8005630:	58020800 	.word	0x58020800
 8005634:	58020000 	.word	0x58020000
 8005638:	58020400 	.word	0x58020400
 800563c:	58021800 	.word	0x58021800

08005640 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005644:	4802      	ldr	r0, [pc, #8]	; (8005650 <ETH_PHY_IO_Init+0x10>)
 8005646:	f7fc fe61 	bl	800230c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	bd80      	pop	{r7, pc}
 8005650:	240003cc 	.word	0x240003cc

08005654 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  return 0;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	68f9      	ldr	r1, [r7, #12]
 8005676:	4807      	ldr	r0, [pc, #28]	; (8005694 <ETH_PHY_IO_ReadReg+0x30>)
 8005678:	f7fc fbb2 	bl	8001de0 <HAL_ETH_ReadPHYRegister>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005682:	f04f 33ff 	mov.w	r3, #4294967295
 8005686:	e000      	b.n	800568a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	240003cc 	.word	0x240003cc

08005698 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	68f9      	ldr	r1, [r7, #12]
 80056aa:	4807      	ldr	r0, [pc, #28]	; (80056c8 <ETH_PHY_IO_WriteReg+0x30>)
 80056ac:	f7fc fbec 	bl	8001e88 <HAL_ETH_WritePHYRegister>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80056b6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ba:	e000      	b.n	80056be <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	240003cc 	.word	0x240003cc

080056cc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80056d0:	f7fb fc82 	bl	8000fd8 <HAL_GetTick>
 80056d4:	4603      	mov	r3, r0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b0a0      	sub	sp, #128	; 0x80
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80056e4:	f107 0308 	add.w	r3, r7, #8
 80056e8:	2264      	movs	r2, #100	; 0x64
 80056ea:	2100      	movs	r1, #0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f00e f969 	bl	80139c4 <memset>
  int32_t PHYLinkState = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056fa:	2300      	movs	r3, #0
 80056fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80056fe:	2300      	movs	r3, #0
 8005700:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005706:	483a      	ldr	r0, [pc, #232]	; (80057f0 <ethernet_link_thread+0x114>)
 8005708:	f7fb fb8f 	bl	8000e2a <LAN8742_GetLinkState>
 800570c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800570e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005710:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005714:	089b      	lsrs	r3, r3, #2
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00c      	beq.n	800573a <ethernet_link_thread+0x5e>
 8005720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005722:	2b01      	cmp	r3, #1
 8005724:	dc09      	bgt.n	800573a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005726:	4833      	ldr	r0, [pc, #204]	; (80057f4 <ethernet_link_thread+0x118>)
 8005728:	f7fb ffc6 	bl	80016b8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800572c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800572e:	f006 fbcf 	bl	800bed0 <netif_set_down>
    netif_set_link_down(netif);
 8005732:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005734:	f006 fc32 	bl	800bf9c <netif_set_link_down>
 8005738:	e055      	b.n	80057e6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800573a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d14e      	bne.n	80057e6 <ethernet_link_thread+0x10a>
 8005748:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800574a:	2b01      	cmp	r3, #1
 800574c:	dd4b      	ble.n	80057e6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800574e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005750:	3b02      	subs	r3, #2
 8005752:	2b03      	cmp	r3, #3
 8005754:	d82a      	bhi.n	80057ac <ethernet_link_thread+0xd0>
 8005756:	a201      	add	r2, pc, #4	; (adr r2, 800575c <ethernet_link_thread+0x80>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	0800576d 	.word	0x0800576d
 8005760:	0800577f 	.word	0x0800577f
 8005764:	0800578f 	.word	0x0800578f
 8005768:	0800579f 	.word	0x0800579f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800576c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005770:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005772:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005776:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005778:	2301      	movs	r3, #1
 800577a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800577c:	e017      	b.n	80057ae <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800577e:	2300      	movs	r3, #0
 8005780:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005782:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005786:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005788:	2301      	movs	r3, #1
 800578a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800578c:	e00f      	b.n	80057ae <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800578e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005792:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005794:	2300      	movs	r3, #0
 8005796:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005798:	2301      	movs	r3, #1
 800579a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800579c:	e007      	b.n	80057ae <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800579e:	2300      	movs	r3, #0
 80057a0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80057a2:	2300      	movs	r3, #0
 80057a4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80057a6:	2301      	movs	r3, #1
 80057a8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80057aa:	e000      	b.n	80057ae <ethernet_link_thread+0xd2>
    default:
      break;
 80057ac:	bf00      	nop
    }

    if(linkchanged)
 80057ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d018      	beq.n	80057e6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80057b4:	f107 0308 	add.w	r3, r7, #8
 80057b8:	4619      	mov	r1, r3
 80057ba:	480e      	ldr	r0, [pc, #56]	; (80057f4 <ethernet_link_thread+0x118>)
 80057bc:	f7fc fbb8 	bl	8001f30 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80057c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80057c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057c6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80057c8:	f107 0308 	add.w	r3, r7, #8
 80057cc:	4619      	mov	r1, r3
 80057ce:	4809      	ldr	r0, [pc, #36]	; (80057f4 <ethernet_link_thread+0x118>)
 80057d0:	f7fc fd82 	bl	80022d8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80057d4:	4807      	ldr	r0, [pc, #28]	; (80057f4 <ethernet_link_thread+0x118>)
 80057d6:	f7fb fe81 	bl	80014dc <HAL_ETH_Start>
      netif_set_up(netif);
 80057da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80057dc:	f006 fb0c 	bl	800bdf8 <netif_set_up>
      netif_set_link_up(netif);
 80057e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80057e2:	f006 fba7 	bl	800bf34 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80057e6:	2064      	movs	r0, #100	; 0x64
 80057e8:	f000 f936 	bl	8005a58 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80057ec:	e78b      	b.n	8005706 <ethernet_link_thread+0x2a>
 80057ee:	bf00      	nop
 80057f0:	240004b4 	.word	0x240004b4
 80057f4:	240003cc 	.word	0x240003cc

080057f8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005800:	4812      	ldr	r0, [pc, #72]	; (800584c <HAL_ETH_RxAllocateCallback+0x54>)
 8005802:	f006 f86d 	bl	800b8e0 <memp_malloc_pool>
 8005806:	60f8      	str	r0, [r7, #12]
  if (p)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d014      	beq.n	8005838 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f103 0220 	add.w	r2, r3, #32
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4a0d      	ldr	r2, [pc, #52]	; (8005850 <HAL_ETH_RxAllocateCallback+0x58>)
 800581c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005826:	9201      	str	r2, [sp, #4]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2241      	movs	r2, #65	; 0x41
 800582e:	2100      	movs	r1, #0
 8005830:	2000      	movs	r0, #0
 8005832:	f006 fdd7 	bl	800c3e4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005836:	e005      	b.n	8005844 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005838:	4b06      	ldr	r3, [pc, #24]	; (8005854 <HAL_ETH_RxAllocateCallback+0x5c>)
 800583a:	2201      	movs	r2, #1
 800583c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	08017d6c 	.word	0x08017d6c
 8005850:	08005445 	.word	0x08005445
 8005854:	240003c0 	.word	0x240003c0

08005858 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005858:	b480      	push	{r7}
 800585a:	b08d      	sub	sp, #52	; 0x34
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800586e:	2300      	movs	r3, #0
 8005870:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	3b20      	subs	r3, #32
 8005876:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	2200      	movs	r2, #0
 8005882:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005886:	887a      	ldrh	r2, [r7, #2]
 8005888:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d103      	bne.n	800589a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	e003      	b.n	80058a2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80058a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ae:	e009      	b.n	80058c4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80058b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b2:	891a      	ldrh	r2, [r3, #8]
 80058b4:	887b      	ldrh	r3, [r7, #2]
 80058b6:	4413      	add	r3, r2
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058bc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80058be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f2      	bne.n	80058b0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80058ca:	887b      	ldrh	r3, [r7, #2]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	623a      	str	r2, [r7, #32]
 80058d0:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	dd1d      	ble.n	8005914 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	f003 021f 	and.w	r2, r3, #31
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80058e8:	f3bf 8f4f 	dsb	sy
}
 80058ec:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80058ee:	4a0d      	ldr	r2, [pc, #52]	; (8005924 <HAL_ETH_RxLinkCallback+0xcc>)
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	3320      	adds	r3, #32
 80058fa:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	3b20      	subs	r3, #32
 8005900:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b00      	cmp	r3, #0
 8005906:	dcf2      	bgt.n	80058ee <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8005908:	f3bf 8f4f 	dsb	sy
}
 800590c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800590e:	f3bf 8f6f 	isb	sy
}
 8005912:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005914:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005916:	bf00      	nop
 8005918:	3734      	adds	r7, #52	; 0x34
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	e000ed00 	.word	0xe000ed00

08005928 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f006 ff11 	bl	800c758 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800593e:	b480      	push	{r7}
 8005940:	b085      	sub	sp, #20
 8005942:	af00      	add	r7, sp, #0
 8005944:	4603      	mov	r3, r0
 8005946:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800594c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005950:	2b84      	cmp	r3, #132	; 0x84
 8005952:	d005      	beq.n	8005960 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005954:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	3303      	adds	r3, #3
 800595e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005960:	68fb      	ldr	r3, [r7, #12]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005974:	f3ef 8305 	mrs	r3, IPSR
 8005978:	607b      	str	r3, [r7, #4]
  return(result);
 800597a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800597c:	2b00      	cmp	r3, #0
 800597e:	bf14      	ite	ne
 8005980:	2301      	movne	r3, #1
 8005982:	2300      	moveq	r3, #0
 8005984:	b2db      	uxtb	r3, r3
}
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005996:	f002 f867 	bl	8007a68 <vTaskStartScheduler>
  
  return osOK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	bd80      	pop	{r7, pc}

080059a0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80059a4:	f7ff ffe3 	bl	800596e <inHandlerMode>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80059ae:	f002 f975 	bl	8007c9c <xTaskGetTickCountFromISR>
 80059b2:	4603      	mov	r3, r0
 80059b4:	e002      	b.n	80059bc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80059b6:	f002 f961 	bl	8007c7c <xTaskGetTickCount>
 80059ba:	4603      	mov	r3, r0
  }
}
 80059bc:	4618      	mov	r0, r3
 80059be:	bd80      	pop	{r7, pc}

080059c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80059c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059c2:	b089      	sub	sp, #36	; 0x24
 80059c4:	af04      	add	r7, sp, #16
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d020      	beq.n	8005a14 <osThreadCreate+0x54>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d01c      	beq.n	8005a14 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685c      	ldr	r4, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681d      	ldr	r5, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691e      	ldr	r6, [r3, #16]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff ffa6 	bl	800593e <makeFreeRtosPriority>
 80059f2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80059fc:	9202      	str	r2, [sp, #8]
 80059fe:	9301      	str	r3, [sp, #4]
 8005a00:	9100      	str	r1, [sp, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	4632      	mov	r2, r6
 8005a06:	4629      	mov	r1, r5
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f001 fe65 	bl	80076d8 <xTaskCreateStatic>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	e01c      	b.n	8005a4e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685c      	ldr	r4, [r3, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a20:	b29e      	uxth	r6, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff ff88 	bl	800593e <makeFreeRtosPriority>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	f107 030c 	add.w	r3, r7, #12
 8005a34:	9301      	str	r3, [sp, #4]
 8005a36:	9200      	str	r2, [sp, #0]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	4632      	mov	r2, r6
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f001 fea7 	bl	8007792 <xTaskCreate>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d001      	beq.n	8005a4e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e000      	b.n	8005a50 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a58 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <osDelay+0x16>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	e000      	b.n	8005a70 <osDelay+0x18>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 ffc5 	bl	8007a00 <vTaskDelay>
  
  return osOK;
 8005a76:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d007      	beq.n	8005aa0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	4619      	mov	r1, r3
 8005a96:	2001      	movs	r0, #1
 8005a98:	f001 f849 	bl	8006b2e <xQueueCreateMutexStatic>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	e003      	b.n	8005aa8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005aa0:	2001      	movs	r0, #1
 8005aa2:	f001 f82c 	bl	8006afe <xQueueCreateMutex>
 8005aa6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005aba:	2300      	movs	r3, #0
 8005abc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <osMutexWait+0x18>
    return osErrorParameter;
 8005ac4:	2380      	movs	r3, #128	; 0x80
 8005ac6:	e03a      	b.n	8005b3e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d103      	bne.n	8005adc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	e009      	b.n	8005af0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d006      	beq.n	8005af0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <osMutexWait+0x40>
      ticks = 1;
 8005aec:	2301      	movs	r3, #1
 8005aee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005af0:	f7ff ff3d 	bl	800596e <inHandlerMode>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d017      	beq.n	8005b2a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005afa:	f107 0308 	add.w	r3, r7, #8
 8005afe:	461a      	mov	r2, r3
 8005b00:	2100      	movs	r1, #0
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f001 fc40 	bl	8007388 <xQueueReceiveFromISR>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d001      	beq.n	8005b12 <osMutexWait+0x62>
      return osErrorOS;
 8005b0e:	23ff      	movs	r3, #255	; 0xff
 8005b10:	e015      	b.n	8005b3e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d011      	beq.n	8005b3c <osMutexWait+0x8c>
 8005b18:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <osMutexWait+0x98>)
 8005b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	e008      	b.n	8005b3c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005b2a:	68f9      	ldr	r1, [r7, #12]
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 fb1f 	bl	8007170 <xQueueSemaphoreTake>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d001      	beq.n	8005b3c <osMutexWait+0x8c>
    return osErrorOS;
 8005b38:	23ff      	movs	r3, #255	; 0xff
 8005b3a:	e000      	b.n	8005b3e <osMutexWait+0x8e>
  }
  
  return osOK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005b5c:	f7ff ff07 	bl	800596e <inHandlerMode>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d016      	beq.n	8005b94 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005b66:	f107 0308 	add.w	r3, r7, #8
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f001 f992 	bl	8006e96 <xQueueGiveFromISR>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d001      	beq.n	8005b7c <osMutexRelease+0x30>
      return osErrorOS;
 8005b78:	23ff      	movs	r3, #255	; 0xff
 8005b7a:	e017      	b.n	8005bac <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d013      	beq.n	8005baa <osMutexRelease+0x5e>
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <osMutexRelease+0x68>)
 8005b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	e00a      	b.n	8005baa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005b94:	2300      	movs	r3, #0
 8005b96:	2200      	movs	r2, #0
 8005b98:	2100      	movs	r1, #0
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 ffe2 	bl	8006b64 <xQueueGenericSend>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d001      	beq.n	8005baa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005ba6:	23ff      	movs	r3, #255	; 0xff
 8005ba8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005baa:	68fb      	ldr	r3, [r7, #12]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	e000ed04 	.word	0xe000ed04

08005bb8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005bcc:	2380      	movs	r3, #128	; 0x80
 8005bce:	e03a      	b.n	8005c46 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bda:	d103      	bne.n	8005be4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	e009      	b.n	8005bf8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d006      	beq.n	8005bf8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <osSemaphoreWait+0x40>
      ticks = 1;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005bf8:	f7ff feb9 	bl	800596e <inHandlerMode>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d017      	beq.n	8005c32 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005c02:	f107 0308 	add.w	r3, r7, #8
 8005c06:	461a      	mov	r2, r3
 8005c08:	2100      	movs	r1, #0
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f001 fbbc 	bl	8007388 <xQueueReceiveFromISR>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d001      	beq.n	8005c1a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005c16:	23ff      	movs	r3, #255	; 0xff
 8005c18:	e015      	b.n	8005c46 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d011      	beq.n	8005c44 <osSemaphoreWait+0x8c>
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <osSemaphoreWait+0x98>)
 8005c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	e008      	b.n	8005c44 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005c32:	68f9      	ldr	r1, [r7, #12]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 fa9b 	bl	8007170 <xQueueSemaphoreTake>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d001      	beq.n	8005c44 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005c40:	23ff      	movs	r3, #255	; 0xff
 8005c42:	e000      	b.n	8005c46 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	e000ed04 	.word	0xe000ed04

08005c54 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005c64:	f7ff fe83 	bl	800596e <inHandlerMode>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d016      	beq.n	8005c9c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005c6e:	f107 0308 	add.w	r3, r7, #8
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 f90e 	bl	8006e96 <xQueueGiveFromISR>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d001      	beq.n	8005c84 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005c80:	23ff      	movs	r3, #255	; 0xff
 8005c82:	e017      	b.n	8005cb4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d013      	beq.n	8005cb2 <osSemaphoreRelease+0x5e>
 8005c8a:	4b0c      	ldr	r3, [pc, #48]	; (8005cbc <osSemaphoreRelease+0x68>)
 8005c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	e00a      	b.n	8005cb2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 ff5e 	bl	8006b64 <xQueueGenericSend>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d001      	beq.n	8005cb2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005cae:	23ff      	movs	r3, #255	; 0xff
 8005cb0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	e000ed04 	.word	0xe000ed04

08005cc0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d011      	beq.n	8005cf6 <osMessageCreate+0x36>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00d      	beq.n	8005cf6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6859      	ldr	r1, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	2400      	movs	r4, #0
 8005cec:	9400      	str	r4, [sp, #0]
 8005cee:	f000 fe1b 	bl	8006928 <xQueueGenericCreateStatic>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	e008      	b.n	8005d08 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	4619      	mov	r1, r3
 8005d02:	f000 fe89 	bl	8006a18 <xQueueGenericCreate>
 8005d06:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd90      	pop	{r4, r7, pc}

08005d10 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <osMessagePut+0x1e>
    ticks = 1;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005d2e:	f7ff fe1e 	bl	800596e <inHandlerMode>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d018      	beq.n	8005d6a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005d38:	f107 0210 	add.w	r2, r7, #16
 8005d3c:	f107 0108 	add.w	r1, r7, #8
 8005d40:	2300      	movs	r3, #0
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f001 f80c 	bl	8006d60 <xQueueGenericSendFromISR>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d001      	beq.n	8005d52 <osMessagePut+0x42>
      return osErrorOS;
 8005d4e:	23ff      	movs	r3, #255	; 0xff
 8005d50:	e018      	b.n	8005d84 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d014      	beq.n	8005d82 <osMessagePut+0x72>
 8005d58:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <osMessagePut+0x7c>)
 8005d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	e00b      	b.n	8005d82 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005d6a:	f107 0108 	add.w	r1, r7, #8
 8005d6e:	2300      	movs	r3, #0
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 fef6 	bl	8006b64 <xQueueGenericSend>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d001      	beq.n	8005d82 <osMessagePut+0x72>
      return osErrorOS;
 8005d7e:	23ff      	movs	r3, #255	; 0xff
 8005d80:	e000      	b.n	8005d84 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	e000ed04 	.word	0xe000ed04

08005d90 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b08b      	sub	sp, #44	; 0x2c
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10a      	bne.n	8005dc0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005daa:	2380      	movs	r3, #128	; 0x80
 8005dac:	617b      	str	r3, [r7, #20]
    return event;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	461c      	mov	r4, r3
 8005db2:	f107 0314 	add.w	r3, r7, #20
 8005db6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005dba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005dbe:	e054      	b.n	8005e6a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d103      	bne.n	8005dd8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd6:	e009      	b.n	8005dec <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d006      	beq.n	8005dec <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <osMessageGet+0x5c>
      ticks = 1;
 8005de8:	2301      	movs	r3, #1
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005dec:	f7ff fdbf 	bl	800596e <inHandlerMode>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d01c      	beq.n	8005e30 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005df6:	f107 0220 	add.w	r2, r7, #32
 8005dfa:	f107 0314 	add.w	r3, r7, #20
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4619      	mov	r1, r3
 8005e02:	68b8      	ldr	r0, [r7, #8]
 8005e04:	f001 fac0 	bl	8007388 <xQueueReceiveFromISR>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d102      	bne.n	8005e14 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005e0e:	2310      	movs	r3, #16
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	e001      	b.n	8005e18 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d01d      	beq.n	8005e5a <osMessageGet+0xca>
 8005e1e:	4b15      	ldr	r3, [pc, #84]	; (8005e74 <osMessageGet+0xe4>)
 8005e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	e014      	b.n	8005e5a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005e30:	f107 0314 	add.w	r3, r7, #20
 8005e34:	3304      	adds	r3, #4
 8005e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e38:	4619      	mov	r1, r3
 8005e3a:	68b8      	ldr	r0, [r7, #8]
 8005e3c:	f001 f8b8 	bl	8006fb0 <xQueueReceive>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d102      	bne.n	8005e4c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005e46:	2310      	movs	r3, #16
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	e006      	b.n	8005e5a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <osMessageGet+0xc6>
 8005e52:	2300      	movs	r3, #0
 8005e54:	e000      	b.n	8005e58 <osMessageGet+0xc8>
 8005e56:	2340      	movs	r3, #64	; 0x40
 8005e58:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	461c      	mov	r4, r3
 8005e5e:	f107 0314 	add.w	r3, r7, #20
 8005e62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	372c      	adds	r7, #44	; 0x2c
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd90      	pop	{r4, r7, pc}
 8005e72:	bf00      	nop
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e84:	f001 fe50 	bl	8007b28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e88:	4b5b      	ldr	r3, [pc, #364]	; (8005ff8 <pvPortMalloc+0x180>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e90:	f000 f920 	bl	80060d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e94:	4b59      	ldr	r3, [pc, #356]	; (8005ffc <pvPortMalloc+0x184>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f040 8093 	bne.w	8005fc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01d      	beq.n	8005ee4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ea8:	2208      	movs	r2, #8
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4413      	add	r3, r2
 8005eae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d014      	beq.n	8005ee4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f023 0307 	bic.w	r3, r3, #7
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ee0:	bf00      	nop
 8005ee2:	e7fe      	b.n	8005ee2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d06e      	beq.n	8005fc8 <pvPortMalloc+0x150>
 8005eea:	4b45      	ldr	r3, [pc, #276]	; (8006000 <pvPortMalloc+0x188>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d869      	bhi.n	8005fc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ef4:	4b43      	ldr	r3, [pc, #268]	; (8006004 <pvPortMalloc+0x18c>)
 8005ef6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ef8:	4b42      	ldr	r3, [pc, #264]	; (8006004 <pvPortMalloc+0x18c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005efe:	e004      	b.n	8005f0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d903      	bls.n	8005f1c <pvPortMalloc+0xa4>
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1f1      	bne.n	8005f00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f1c:	4b36      	ldr	r3, [pc, #216]	; (8005ff8 <pvPortMalloc+0x180>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d050      	beq.n	8005fc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2208      	movs	r2, #8
 8005f2c:	4413      	add	r3, r2
 8005f2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	2308      	movs	r3, #8
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d91f      	bls.n	8005f88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <pvPortMalloc+0xf8>
	__asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	613b      	str	r3, [r7, #16]
}
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	1ad2      	subs	r2, r2, r3
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f82:	69b8      	ldr	r0, [r7, #24]
 8005f84:	f000 f908 	bl	8006198 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f88:	4b1d      	ldr	r3, [pc, #116]	; (8006000 <pvPortMalloc+0x188>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	4a1b      	ldr	r2, [pc, #108]	; (8006000 <pvPortMalloc+0x188>)
 8005f94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f96:	4b1a      	ldr	r3, [pc, #104]	; (8006000 <pvPortMalloc+0x188>)
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4b1b      	ldr	r3, [pc, #108]	; (8006008 <pvPortMalloc+0x190>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d203      	bcs.n	8005faa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fa2:	4b17      	ldr	r3, [pc, #92]	; (8006000 <pvPortMalloc+0x188>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a18      	ldr	r2, [pc, #96]	; (8006008 <pvPortMalloc+0x190>)
 8005fa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <pvPortMalloc+0x184>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005fbe:	4b13      	ldr	r3, [pc, #76]	; (800600c <pvPortMalloc+0x194>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	4a11      	ldr	r2, [pc, #68]	; (800600c <pvPortMalloc+0x194>)
 8005fc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fc8:	f001 fdbc 	bl	8007b44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <pvPortMalloc+0x174>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	60fb      	str	r3, [r7, #12]
}
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <pvPortMalloc+0x172>
	return pvReturn;
 8005fec:	69fb      	ldr	r3, [r7, #28]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3728      	adds	r7, #40	; 0x28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	240040dc 	.word	0x240040dc
 8005ffc:	240040f0 	.word	0x240040f0
 8006000:	240040e0 	.word	0x240040e0
 8006004:	240040d4 	.word	0x240040d4
 8006008:	240040e4 	.word	0x240040e4
 800600c:	240040e8 	.word	0x240040e8

08006010 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d04d      	beq.n	80060be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006022:	2308      	movs	r3, #8
 8006024:	425b      	negs	r3, r3
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	4413      	add	r3, r2
 800602a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	4b24      	ldr	r3, [pc, #144]	; (80060c8 <vPortFree+0xb8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4013      	ands	r3, r2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10a      	bne.n	8006054 <vPortFree+0x44>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	60fb      	str	r3, [r7, #12]
}
 8006050:	bf00      	nop
 8006052:	e7fe      	b.n	8006052 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00a      	beq.n	8006072 <vPortFree+0x62>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	60bb      	str	r3, [r7, #8]
}
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <vPortFree+0xb8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d01e      	beq.n	80060be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d11a      	bne.n	80060be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	4b0e      	ldr	r3, [pc, #56]	; (80060c8 <vPortFree+0xb8>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	43db      	mvns	r3, r3
 8006092:	401a      	ands	r2, r3
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006098:	f001 fd46 	bl	8007b28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <vPortFree+0xbc>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4413      	add	r3, r2
 80060a6:	4a09      	ldr	r2, [pc, #36]	; (80060cc <vPortFree+0xbc>)
 80060a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060aa:	6938      	ldr	r0, [r7, #16]
 80060ac:	f000 f874 	bl	8006198 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80060b0:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <vPortFree+0xc0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	4a06      	ldr	r2, [pc, #24]	; (80060d0 <vPortFree+0xc0>)
 80060b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80060ba:	f001 fd43 	bl	8007b44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060be:	bf00      	nop
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	240040f0 	.word	0x240040f0
 80060cc:	240040e0 	.word	0x240040e0
 80060d0:	240040ec 	.word	0x240040ec

080060d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060e0:	4b27      	ldr	r3, [pc, #156]	; (8006180 <prvHeapInit+0xac>)
 80060e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00c      	beq.n	8006108 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3307      	adds	r3, #7
 80060f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0307 	bic.w	r3, r3, #7
 80060fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	4a1f      	ldr	r2, [pc, #124]	; (8006180 <prvHeapInit+0xac>)
 8006104:	4413      	add	r3, r2
 8006106:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800610c:	4a1d      	ldr	r2, [pc, #116]	; (8006184 <prvHeapInit+0xb0>)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006112:	4b1c      	ldr	r3, [pc, #112]	; (8006184 <prvHeapInit+0xb0>)
 8006114:	2200      	movs	r2, #0
 8006116:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4413      	add	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006120:	2208      	movs	r2, #8
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1a9b      	subs	r3, r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0307 	bic.w	r3, r3, #7
 800612e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4a15      	ldr	r2, [pc, #84]	; (8006188 <prvHeapInit+0xb4>)
 8006134:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006136:	4b14      	ldr	r3, [pc, #80]	; (8006188 <prvHeapInit+0xb4>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2200      	movs	r2, #0
 800613c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800613e:	4b12      	ldr	r3, [pc, #72]	; (8006188 <prvHeapInit+0xb4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	1ad2      	subs	r2, r2, r3
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006154:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <prvHeapInit+0xb4>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	4a0a      	ldr	r2, [pc, #40]	; (800618c <prvHeapInit+0xb8>)
 8006162:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	4a09      	ldr	r2, [pc, #36]	; (8006190 <prvHeapInit+0xbc>)
 800616a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800616c:	4b09      	ldr	r3, [pc, #36]	; (8006194 <prvHeapInit+0xc0>)
 800616e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006172:	601a      	str	r2, [r3, #0]
}
 8006174:	bf00      	nop
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	240004d4 	.word	0x240004d4
 8006184:	240040d4 	.word	0x240040d4
 8006188:	240040dc 	.word	0x240040dc
 800618c:	240040e4 	.word	0x240040e4
 8006190:	240040e0 	.word	0x240040e0
 8006194:	240040f0 	.word	0x240040f0

08006198 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061a0:	4b28      	ldr	r3, [pc, #160]	; (8006244 <prvInsertBlockIntoFreeList+0xac>)
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	e002      	b.n	80061ac <prvInsertBlockIntoFreeList+0x14>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d8f7      	bhi.n	80061a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	4413      	add	r3, r2
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d108      	bne.n	80061da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	441a      	add	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	441a      	add	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d118      	bne.n	8006220 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4b15      	ldr	r3, [pc, #84]	; (8006248 <prvInsertBlockIntoFreeList+0xb0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d00d      	beq.n	8006216 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	441a      	add	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	e008      	b.n	8006228 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006216:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <prvInsertBlockIntoFreeList+0xb0>)
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	e003      	b.n	8006228 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	429a      	cmp	r2, r3
 800622e:	d002      	beq.n	8006236 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006236:	bf00      	nop
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	240040d4 	.word	0x240040d4
 8006248:	240040dc 	.word	0x240040dc

0800624c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f103 0208 	add.w	r2, r3, #8
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f04f 32ff 	mov.w	r2, #4294967295
 8006264:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f103 0208 	add.w	r2, r3, #8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f103 0208 	add.w	r2, r3, #8
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062a6:	b480      	push	{r7}
 80062a8:	b085      	sub	sp, #20
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	1c5a      	adds	r2, r3, #1
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	601a      	str	r2, [r3, #0]
}
 80062e2:	bf00      	nop
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062ee:	b480      	push	{r7}
 80062f0:	b085      	sub	sp, #20
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d103      	bne.n	800630e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	e00c      	b.n	8006328 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3308      	adds	r3, #8
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	e002      	b.n	800631c <vListInsert+0x2e>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	429a      	cmp	r2, r3
 8006326:	d2f6      	bcs.n	8006316 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6892      	ldr	r2, [r2, #8]
 8006376:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6852      	ldr	r2, [r2, #4]
 8006380:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	429a      	cmp	r2, r3
 800638a:	d103      	bne.n	8006394 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	1e5a      	subs	r2, r3, #1
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	3b04      	subs	r3, #4
 80063c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3b04      	subs	r3, #4
 80063d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f023 0201 	bic.w	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3b04      	subs	r3, #4
 80063e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063e4:	4a0c      	ldr	r2, [pc, #48]	; (8006418 <pxPortInitialiseStack+0x64>)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3b14      	subs	r3, #20
 80063ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3b04      	subs	r3, #4
 80063fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f06f 0202 	mvn.w	r2, #2
 8006402:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3b20      	subs	r3, #32
 8006408:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800640a:	68fb      	ldr	r3, [r7, #12]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	0800641d 	.word	0x0800641d

0800641c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006422:	2300      	movs	r3, #0
 8006424:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006426:	4b12      	ldr	r3, [pc, #72]	; (8006470 <prvTaskExitError+0x54>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642e:	d00a      	beq.n	8006446 <prvTaskExitError+0x2a>
	__asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	60fb      	str	r3, [r7, #12]
}
 8006442:	bf00      	nop
 8006444:	e7fe      	b.n	8006444 <prvTaskExitError+0x28>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	60bb      	str	r3, [r7, #8]
}
 8006458:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800645a:	bf00      	nop
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0fc      	beq.n	800645c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006462:	bf00      	nop
 8006464:	bf00      	nop
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	24000024 	.word	0x24000024
	...

08006480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006480:	4b07      	ldr	r3, [pc, #28]	; (80064a0 <pxCurrentTCBConst2>)
 8006482:	6819      	ldr	r1, [r3, #0]
 8006484:	6808      	ldr	r0, [r1, #0]
 8006486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648a:	f380 8809 	msr	PSP, r0
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f04f 0000 	mov.w	r0, #0
 8006496:	f380 8811 	msr	BASEPRI, r0
 800649a:	4770      	bx	lr
 800649c:	f3af 8000 	nop.w

080064a0 <pxCurrentTCBConst2>:
 80064a0:	240040fc 	.word	0x240040fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop

080064a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064a8:	4808      	ldr	r0, [pc, #32]	; (80064cc <prvPortStartFirstTask+0x24>)
 80064aa:	6800      	ldr	r0, [r0, #0]
 80064ac:	6800      	ldr	r0, [r0, #0]
 80064ae:	f380 8808 	msr	MSP, r0
 80064b2:	f04f 0000 	mov.w	r0, #0
 80064b6:	f380 8814 	msr	CONTROL, r0
 80064ba:	b662      	cpsie	i
 80064bc:	b661      	cpsie	f
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	df00      	svc	0
 80064c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064ca:	bf00      	nop
 80064cc:	e000ed08 	.word	0xe000ed08

080064d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064d6:	4b46      	ldr	r3, [pc, #280]	; (80065f0 <xPortStartScheduler+0x120>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a46      	ldr	r2, [pc, #280]	; (80065f4 <xPortStartScheduler+0x124>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d10a      	bne.n	80064f6 <xPortStartScheduler+0x26>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	613b      	str	r3, [r7, #16]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064f6:	4b3e      	ldr	r3, [pc, #248]	; (80065f0 <xPortStartScheduler+0x120>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a3f      	ldr	r2, [pc, #252]	; (80065f8 <xPortStartScheduler+0x128>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d10a      	bne.n	8006516 <xPortStartScheduler+0x46>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	60fb      	str	r3, [r7, #12]
}
 8006512:	bf00      	nop
 8006514:	e7fe      	b.n	8006514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006516:	4b39      	ldr	r3, [pc, #228]	; (80065fc <xPortStartScheduler+0x12c>)
 8006518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	22ff      	movs	r2, #255	; 0xff
 8006526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006538:	b2da      	uxtb	r2, r3
 800653a:	4b31      	ldr	r3, [pc, #196]	; (8006600 <xPortStartScheduler+0x130>)
 800653c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800653e:	4b31      	ldr	r3, [pc, #196]	; (8006604 <xPortStartScheduler+0x134>)
 8006540:	2207      	movs	r2, #7
 8006542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006544:	e009      	b.n	800655a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006546:	4b2f      	ldr	r3, [pc, #188]	; (8006604 <xPortStartScheduler+0x134>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3b01      	subs	r3, #1
 800654c:	4a2d      	ldr	r2, [pc, #180]	; (8006604 <xPortStartScheduler+0x134>)
 800654e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006550:	78fb      	ldrb	r3, [r7, #3]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	b2db      	uxtb	r3, r3
 8006558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800655a:	78fb      	ldrb	r3, [r7, #3]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006562:	2b80      	cmp	r3, #128	; 0x80
 8006564:	d0ef      	beq.n	8006546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006566:	4b27      	ldr	r3, [pc, #156]	; (8006604 <xPortStartScheduler+0x134>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f1c3 0307 	rsb	r3, r3, #7
 800656e:	2b04      	cmp	r3, #4
 8006570:	d00a      	beq.n	8006588 <xPortStartScheduler+0xb8>
	__asm volatile
 8006572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	60bb      	str	r3, [r7, #8]
}
 8006584:	bf00      	nop
 8006586:	e7fe      	b.n	8006586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006588:	4b1e      	ldr	r3, [pc, #120]	; (8006604 <xPortStartScheduler+0x134>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	4a1d      	ldr	r2, [pc, #116]	; (8006604 <xPortStartScheduler+0x134>)
 8006590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006592:	4b1c      	ldr	r3, [pc, #112]	; (8006604 <xPortStartScheduler+0x134>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800659a:	4a1a      	ldr	r2, [pc, #104]	; (8006604 <xPortStartScheduler+0x134>)
 800659c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065a6:	4b18      	ldr	r3, [pc, #96]	; (8006608 <xPortStartScheduler+0x138>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a17      	ldr	r2, [pc, #92]	; (8006608 <xPortStartScheduler+0x138>)
 80065ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065b2:	4b15      	ldr	r3, [pc, #84]	; (8006608 <xPortStartScheduler+0x138>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a14      	ldr	r2, [pc, #80]	; (8006608 <xPortStartScheduler+0x138>)
 80065b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80065bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065be:	f000 f8dd 	bl	800677c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065c2:	4b12      	ldr	r3, [pc, #72]	; (800660c <xPortStartScheduler+0x13c>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065c8:	f000 f8fc 	bl	80067c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065cc:	4b10      	ldr	r3, [pc, #64]	; (8006610 <xPortStartScheduler+0x140>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a0f      	ldr	r2, [pc, #60]	; (8006610 <xPortStartScheduler+0x140>)
 80065d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065d8:	f7ff ff66 	bl	80064a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065dc:	f001 fc28 	bl	8007e30 <vTaskSwitchContext>
	prvTaskExitError();
 80065e0:	f7ff ff1c 	bl	800641c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3718      	adds	r7, #24
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	e000ed00 	.word	0xe000ed00
 80065f4:	410fc271 	.word	0x410fc271
 80065f8:	410fc270 	.word	0x410fc270
 80065fc:	e000e400 	.word	0xe000e400
 8006600:	240040f4 	.word	0x240040f4
 8006604:	240040f8 	.word	0x240040f8
 8006608:	e000ed20 	.word	0xe000ed20
 800660c:	24000024 	.word	0x24000024
 8006610:	e000ef34 	.word	0xe000ef34

08006614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	607b      	str	r3, [r7, #4]
}
 800662c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800662e:	4b0f      	ldr	r3, [pc, #60]	; (800666c <vPortEnterCritical+0x58>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3301      	adds	r3, #1
 8006634:	4a0d      	ldr	r2, [pc, #52]	; (800666c <vPortEnterCritical+0x58>)
 8006636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006638:	4b0c      	ldr	r3, [pc, #48]	; (800666c <vPortEnterCritical+0x58>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d10f      	bne.n	8006660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006640:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <vPortEnterCritical+0x5c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <vPortEnterCritical+0x4c>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	603b      	str	r3, [r7, #0]
}
 800665c:	bf00      	nop
 800665e:	e7fe      	b.n	800665e <vPortEnterCritical+0x4a>
	}
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	24000024 	.word	0x24000024
 8006670:	e000ed04 	.word	0xe000ed04

08006674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800667a:	4b12      	ldr	r3, [pc, #72]	; (80066c4 <vPortExitCritical+0x50>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10a      	bne.n	8006698 <vPortExitCritical+0x24>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	607b      	str	r3, [r7, #4]
}
 8006694:	bf00      	nop
 8006696:	e7fe      	b.n	8006696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006698:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <vPortExitCritical+0x50>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3b01      	subs	r3, #1
 800669e:	4a09      	ldr	r2, [pc, #36]	; (80066c4 <vPortExitCritical+0x50>)
 80066a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <vPortExitCritical+0x50>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d105      	bne.n	80066b6 <vPortExitCritical+0x42>
 80066aa:	2300      	movs	r3, #0
 80066ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	24000024 	.word	0x24000024
	...

080066d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066d0:	f3ef 8009 	mrs	r0, PSP
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	4b15      	ldr	r3, [pc, #84]	; (8006730 <pxCurrentTCBConst>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	f01e 0f10 	tst.w	lr, #16
 80066e0:	bf08      	it	eq
 80066e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ea:	6010      	str	r0, [r2, #0]
 80066ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066f4:	f380 8811 	msr	BASEPRI, r0
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f001 fb96 	bl	8007e30 <vTaskSwitchContext>
 8006704:	f04f 0000 	mov.w	r0, #0
 8006708:	f380 8811 	msr	BASEPRI, r0
 800670c:	bc09      	pop	{r0, r3}
 800670e:	6819      	ldr	r1, [r3, #0]
 8006710:	6808      	ldr	r0, [r1, #0]
 8006712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006716:	f01e 0f10 	tst.w	lr, #16
 800671a:	bf08      	it	eq
 800671c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006720:	f380 8809 	msr	PSP, r0
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	f3af 8000 	nop.w

08006730 <pxCurrentTCBConst>:
 8006730:	240040fc 	.word	0x240040fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop

08006738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	607b      	str	r3, [r7, #4]
}
 8006750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006752:	f001 fab5 	bl	8007cc0 <xTaskIncrementTick>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800675c:	4b06      	ldr	r3, [pc, #24]	; (8006778 <SysTick_Handler+0x40>)
 800675e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	2300      	movs	r3, #0
 8006766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	f383 8811 	msr	BASEPRI, r3
}
 800676e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	e000ed04 	.word	0xe000ed04

0800677c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006780:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <vPortSetupTimerInterrupt+0x34>)
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006786:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <vPortSetupTimerInterrupt+0x38>)
 8006788:	2200      	movs	r2, #0
 800678a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800678c:	4b0a      	ldr	r3, [pc, #40]	; (80067b8 <vPortSetupTimerInterrupt+0x3c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a0a      	ldr	r2, [pc, #40]	; (80067bc <vPortSetupTimerInterrupt+0x40>)
 8006792:	fba2 2303 	umull	r2, r3, r2, r3
 8006796:	099b      	lsrs	r3, r3, #6
 8006798:	4a09      	ldr	r2, [pc, #36]	; (80067c0 <vPortSetupTimerInterrupt+0x44>)
 800679a:	3b01      	subs	r3, #1
 800679c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800679e:	4b04      	ldr	r3, [pc, #16]	; (80067b0 <vPortSetupTimerInterrupt+0x34>)
 80067a0:	2207      	movs	r2, #7
 80067a2:	601a      	str	r2, [r3, #0]
}
 80067a4:	bf00      	nop
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	e000e010 	.word	0xe000e010
 80067b4:	e000e018 	.word	0xe000e018
 80067b8:	24000000 	.word	0x24000000
 80067bc:	10624dd3 	.word	0x10624dd3
 80067c0:	e000e014 	.word	0xe000e014

080067c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067d4 <vPortEnableVFP+0x10>
 80067c8:	6801      	ldr	r1, [r0, #0]
 80067ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067ce:	6001      	str	r1, [r0, #0]
 80067d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067d2:	bf00      	nop
 80067d4:	e000ed88 	.word	0xe000ed88

080067d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067de:	f3ef 8305 	mrs	r3, IPSR
 80067e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2b0f      	cmp	r3, #15
 80067e8:	d914      	bls.n	8006814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067ea:	4a17      	ldr	r2, [pc, #92]	; (8006848 <vPortValidateInterruptPriority+0x70>)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4413      	add	r3, r2
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067f4:	4b15      	ldr	r3, [pc, #84]	; (800684c <vPortValidateInterruptPriority+0x74>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	7afa      	ldrb	r2, [r7, #11]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d20a      	bcs.n	8006814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	607b      	str	r3, [r7, #4]
}
 8006810:	bf00      	nop
 8006812:	e7fe      	b.n	8006812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006814:	4b0e      	ldr	r3, [pc, #56]	; (8006850 <vPortValidateInterruptPriority+0x78>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800681c:	4b0d      	ldr	r3, [pc, #52]	; (8006854 <vPortValidateInterruptPriority+0x7c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d90a      	bls.n	800683a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	603b      	str	r3, [r7, #0]
}
 8006836:	bf00      	nop
 8006838:	e7fe      	b.n	8006838 <vPortValidateInterruptPriority+0x60>
	}
 800683a:	bf00      	nop
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	e000e3f0 	.word	0xe000e3f0
 800684c:	240040f4 	.word	0x240040f4
 8006850:	e000ed0c 	.word	0xe000ed0c
 8006854:	240040f8 	.word	0x240040f8

08006858 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <xQueueGenericReset+0x2a>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	60bb      	str	r3, [r7, #8]
}
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006882:	f7ff fec7 	bl	8006614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006892:	fb01 f303 	mul.w	r3, r1, r3
 8006896:	441a      	add	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b2:	3b01      	subs	r3, #1
 80068b4:	68f9      	ldr	r1, [r7, #12]
 80068b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068b8:	fb01 f303 	mul.w	r3, r1, r3
 80068bc:	441a      	add	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	22ff      	movs	r2, #255	; 0xff
 80068c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	22ff      	movs	r2, #255	; 0xff
 80068ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d114      	bne.n	8006902 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01a      	beq.n	8006916 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3310      	adds	r3, #16
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 fb23 	bl	8007f30 <xTaskRemoveFromEventList>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d012      	beq.n	8006916 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068f0:	4b0c      	ldr	r3, [pc, #48]	; (8006924 <xQueueGenericReset+0xcc>)
 80068f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	e009      	b.n	8006916 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3310      	adds	r3, #16
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff fca0 	bl	800624c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3324      	adds	r3, #36	; 0x24
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff fc9b 	bl	800624c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006916:	f7ff fead 	bl	8006674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800691a:	2301      	movs	r3, #1
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08e      	sub	sp, #56	; 0x38
 800692c:	af02      	add	r7, sp, #8
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10a      	bne.n	8006952 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
}
 800696a:	bf00      	nop
 800696c:	e7fe      	b.n	800696c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <xQueueGenericCreateStatic+0x52>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <xQueueGenericCreateStatic+0x56>
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <xQueueGenericCreateStatic+0x58>
 800697e:	2300      	movs	r3, #0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	623b      	str	r3, [r7, #32]
}
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d102      	bne.n	80069a6 <xQueueGenericCreateStatic+0x7e>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <xQueueGenericCreateStatic+0x82>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <xQueueGenericCreateStatic+0x84>
 80069aa:	2300      	movs	r3, #0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10a      	bne.n	80069c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	61fb      	str	r3, [r7, #28]
}
 80069c2:	bf00      	nop
 80069c4:	e7fe      	b.n	80069c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069c6:	2348      	movs	r3, #72	; 0x48
 80069c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b48      	cmp	r3, #72	; 0x48
 80069ce:	d00a      	beq.n	80069e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	61bb      	str	r3, [r7, #24]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80069e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00d      	beq.n	8006a0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	4613      	mov	r3, r2
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	68b9      	ldr	r1, [r7, #8]
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 f83f 	bl	8006a8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3730      	adds	r7, #48	; 0x30
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08a      	sub	sp, #40	; 0x28
 8006a1c:	af02      	add	r7, sp, #8
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	4613      	mov	r3, r2
 8006a24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	613b      	str	r3, [r7, #16]
}
 8006a3e:	bf00      	nop
 8006a40:	e7fe      	b.n	8006a40 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	fb02 f303 	mul.w	r3, r2, r3
 8006a4a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	3348      	adds	r3, #72	; 0x48
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff fa11 	bl	8005e78 <pvPortMalloc>
 8006a56:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d011      	beq.n	8006a82 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	3348      	adds	r3, #72	; 0x48
 8006a66:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a70:	79fa      	ldrb	r2, [r7, #7]
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	4613      	mov	r3, r2
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f805 	bl	8006a8c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a82:	69bb      	ldr	r3, [r7, #24]
	}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3720      	adds	r7, #32
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d103      	bne.n	8006aa8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	e002      	b.n	8006aae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006aba:	2101      	movs	r1, #1
 8006abc:	69b8      	ldr	r0, [r7, #24]
 8006abe:	f7ff fecb 	bl	8006858 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ac2:	bf00      	nop
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b082      	sub	sp, #8
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00e      	beq.n	8006af6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006aea:	2300      	movs	r3, #0
 8006aec:	2200      	movs	r2, #0
 8006aee:	2100      	movs	r1, #0
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f837 	bl	8006b64 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006af6:	bf00      	nop
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	4603      	mov	r3, r0
 8006b06:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006b10:	79fb      	ldrb	r3, [r7, #7]
 8006b12:	461a      	mov	r2, r3
 8006b14:	6939      	ldr	r1, [r7, #16]
 8006b16:	6978      	ldr	r0, [r7, #20]
 8006b18:	f7ff ff7e 	bl	8006a18 <xQueueGenericCreate>
 8006b1c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f7ff ffd3 	bl	8006aca <prvInitialiseMutex>

		return xNewQueue;
 8006b24:	68fb      	ldr	r3, [r7, #12]
	}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b088      	sub	sp, #32
 8006b32:	af02      	add	r7, sp, #8
 8006b34:	4603      	mov	r3, r0
 8006b36:	6039      	str	r1, [r7, #0]
 8006b38:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	6939      	ldr	r1, [r7, #16]
 8006b4c:	6978      	ldr	r0, [r7, #20]
 8006b4e:	f7ff feeb 	bl	8006928 <xQueueGenericCreateStatic>
 8006b52:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f7ff ffb8 	bl	8006aca <prvInitialiseMutex>

		return xNewQueue;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
	}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08e      	sub	sp, #56	; 0x38
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
 8006b70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b72:	2300      	movs	r3, #0
 8006b74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <xQueueGenericSend+0x32>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d103      	bne.n	8006ba4 <xQueueGenericSend+0x40>
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <xQueueGenericSend+0x44>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <xQueueGenericSend+0x46>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10a      	bne.n	8006bc4 <xQueueGenericSend+0x60>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bc0:	bf00      	nop
 8006bc2:	e7fe      	b.n	8006bc2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d103      	bne.n	8006bd2 <xQueueGenericSend+0x6e>
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <xQueueGenericSend+0x72>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <xQueueGenericSend+0x74>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <xQueueGenericSend+0x8e>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	623b      	str	r3, [r7, #32]
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bf2:	f001 fb59 	bl	80082a8 <xTaskGetSchedulerState>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d102      	bne.n	8006c02 <xQueueGenericSend+0x9e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <xQueueGenericSend+0xa2>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e000      	b.n	8006c08 <xQueueGenericSend+0xa4>
 8006c06:	2300      	movs	r3, #0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10a      	bne.n	8006c22 <xQueueGenericSend+0xbe>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	61fb      	str	r3, [r7, #28]
}
 8006c1e:	bf00      	nop
 8006c20:	e7fe      	b.n	8006c20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c22:	f7ff fcf7 	bl	8006614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d302      	bcc.n	8006c38 <xQueueGenericSend+0xd4>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d129      	bne.n	8006c8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c3e:	f000 fc3b 	bl	80074b8 <prvCopyDataToQueue>
 8006c42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d010      	beq.n	8006c6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	3324      	adds	r3, #36	; 0x24
 8006c50:	4618      	mov	r0, r3
 8006c52:	f001 f96d 	bl	8007f30 <xTaskRemoveFromEventList>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d013      	beq.n	8006c84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c5c:	4b3f      	ldr	r3, [pc, #252]	; (8006d5c <xQueueGenericSend+0x1f8>)
 8006c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	e00a      	b.n	8006c84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d007      	beq.n	8006c84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c74:	4b39      	ldr	r3, [pc, #228]	; (8006d5c <xQueueGenericSend+0x1f8>)
 8006c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c84:	f7ff fcf6 	bl	8006674 <vPortExitCritical>
				return pdPASS;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e063      	b.n	8006d54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d103      	bne.n	8006c9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c92:	f7ff fcef 	bl	8006674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	e05c      	b.n	8006d54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d106      	bne.n	8006cae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ca0:	f107 0314 	add.w	r3, r7, #20
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f001 f9a5 	bl	8007ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006caa:	2301      	movs	r3, #1
 8006cac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cae:	f7ff fce1 	bl	8006674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cb2:	f000 ff39 	bl	8007b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cb6:	f7ff fcad 	bl	8006614 <vPortEnterCritical>
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cc0:	b25b      	sxtb	r3, r3
 8006cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc6:	d103      	bne.n	8006cd0 <xQueueGenericSend+0x16c>
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cd6:	b25b      	sxtb	r3, r3
 8006cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cdc:	d103      	bne.n	8006ce6 <xQueueGenericSend+0x182>
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ce6:	f7ff fcc5 	bl	8006674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cea:	1d3a      	adds	r2, r7, #4
 8006cec:	f107 0314 	add.w	r3, r7, #20
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f001 f994 	bl	8008020 <xTaskCheckForTimeOut>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d124      	bne.n	8006d48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d00:	f000 fcd2 	bl	80076a8 <prvIsQueueFull>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d018      	beq.n	8006d3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	3310      	adds	r3, #16
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	4611      	mov	r1, r2
 8006d12:	4618      	mov	r0, r3
 8006d14:	f001 f8e8 	bl	8007ee8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d1a:	f000 fc5d 	bl	80075d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d1e:	f000 ff11 	bl	8007b44 <xTaskResumeAll>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f47f af7c 	bne.w	8006c22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d2a:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <xQueueGenericSend+0x1f8>)
 8006d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	e772      	b.n	8006c22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d3e:	f000 fc4b 	bl	80075d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d42:	f000 feff 	bl	8007b44 <xTaskResumeAll>
 8006d46:	e76c      	b.n	8006c22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d4a:	f000 fc45 	bl	80075d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d4e:	f000 fef9 	bl	8007b44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3738      	adds	r7, #56	; 0x38
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b090      	sub	sp, #64	; 0x40
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d103      	bne.n	8006d9c <xQueueGenericSendFromISR+0x3c>
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <xQueueGenericSendFromISR+0x40>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e000      	b.n	8006da2 <xQueueGenericSendFromISR+0x42>
 8006da0:	2300      	movs	r3, #0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10a      	bne.n	8006dbc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006db8:	bf00      	nop
 8006dba:	e7fe      	b.n	8006dba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d103      	bne.n	8006dca <xQueueGenericSendFromISR+0x6a>
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <xQueueGenericSendFromISR+0x6e>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e000      	b.n	8006dd0 <xQueueGenericSendFromISR+0x70>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10a      	bne.n	8006dea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	623b      	str	r3, [r7, #32]
}
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dea:	f7ff fcf5 	bl	80067d8 <vPortValidateInterruptPriority>
	__asm volatile
 8006dee:	f3ef 8211 	mrs	r2, BASEPRI
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	61fa      	str	r2, [r7, #28]
 8006e04:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006e06:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d302      	bcc.n	8006e1c <xQueueGenericSendFromISR+0xbc>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d12f      	bne.n	8006e7c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e32:	f000 fb41 	bl	80074b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3e:	d112      	bne.n	8006e66 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d016      	beq.n	8006e76 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	3324      	adds	r3, #36	; 0x24
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 f86f 	bl	8007f30 <xTaskRemoveFromEventList>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00e      	beq.n	8006e76 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00b      	beq.n	8006e76 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	e007      	b.n	8006e76 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	b25a      	sxtb	r2, r3
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e76:	2301      	movs	r3, #1
 8006e78:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006e7a:	e001      	b.n	8006e80 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e82:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f383 8811 	msr	BASEPRI, r3
}
 8006e8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3740      	adds	r7, #64	; 0x40
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b08e      	sub	sp, #56	; 0x38
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10a      	bne.n	8006ec0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	623b      	str	r3, [r7, #32]
}
 8006ebc:	bf00      	nop
 8006ebe:	e7fe      	b.n	8006ebe <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00a      	beq.n	8006ede <xQueueGiveFromISR+0x48>
	__asm volatile
 8006ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	61fb      	str	r3, [r7, #28]
}
 8006eda:	bf00      	nop
 8006edc:	e7fe      	b.n	8006edc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d103      	bne.n	8006eee <xQueueGiveFromISR+0x58>
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <xQueueGiveFromISR+0x5c>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e000      	b.n	8006ef4 <xQueueGiveFromISR+0x5e>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	61bb      	str	r3, [r7, #24]
}
 8006f0a:	bf00      	nop
 8006f0c:	e7fe      	b.n	8006f0c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f0e:	f7ff fc63 	bl	80067d8 <vPortValidateInterruptPriority>
	__asm volatile
 8006f12:	f3ef 8211 	mrs	r2, BASEPRI
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	617a      	str	r2, [r7, #20]
 8006f28:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006f2a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d22b      	bcs.n	8006f96 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f58:	d112      	bne.n	8006f80 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d016      	beq.n	8006f90 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f64:	3324      	adds	r3, #36	; 0x24
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 ffe2 	bl	8007f30 <xTaskRemoveFromEventList>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00e      	beq.n	8006f90 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e007      	b.n	8006f90 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f84:	3301      	adds	r3, #1
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	b25a      	sxtb	r2, r3
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f90:	2301      	movs	r3, #1
 8006f92:	637b      	str	r3, [r7, #52]	; 0x34
 8006f94:	e001      	b.n	8006f9a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f383 8811 	msr	BASEPRI, r3
}
 8006fa4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3738      	adds	r7, #56	; 0x38
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08c      	sub	sp, #48	; 0x30
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <xQueueReceive+0x30>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	623b      	str	r3, [r7, #32]
}
 8006fdc:	bf00      	nop
 8006fde:	e7fe      	b.n	8006fde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d103      	bne.n	8006fee <xQueueReceive+0x3e>
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <xQueueReceive+0x42>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e000      	b.n	8006ff4 <xQueueReceive+0x44>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10a      	bne.n	800700e <xQueueReceive+0x5e>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	61fb      	str	r3, [r7, #28]
}
 800700a:	bf00      	nop
 800700c:	e7fe      	b.n	800700c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800700e:	f001 f94b 	bl	80082a8 <xTaskGetSchedulerState>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d102      	bne.n	800701e <xQueueReceive+0x6e>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <xQueueReceive+0x72>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <xQueueReceive+0x74>
 8007022:	2300      	movs	r3, #0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10a      	bne.n	800703e <xQueueReceive+0x8e>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	61bb      	str	r3, [r7, #24]
}
 800703a:	bf00      	nop
 800703c:	e7fe      	b.n	800703c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800703e:	f7ff fae9 	bl	8006614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	2b00      	cmp	r3, #0
 800704c:	d01f      	beq.n	800708e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800704e:	68b9      	ldr	r1, [r7, #8]
 8007050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007052:	f000 fa9b 	bl	800758c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	1e5a      	subs	r2, r3, #1
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00f      	beq.n	8007086 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	3310      	adds	r3, #16
 800706a:	4618      	mov	r0, r3
 800706c:	f000 ff60 	bl	8007f30 <xTaskRemoveFromEventList>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d007      	beq.n	8007086 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007076:	4b3d      	ldr	r3, [pc, #244]	; (800716c <xQueueReceive+0x1bc>)
 8007078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007086:	f7ff faf5 	bl	8006674 <vPortExitCritical>
				return pdPASS;
 800708a:	2301      	movs	r3, #1
 800708c:	e069      	b.n	8007162 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d103      	bne.n	800709c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007094:	f7ff faee 	bl	8006674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007098:	2300      	movs	r3, #0
 800709a:	e062      	b.n	8007162 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800709c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d106      	bne.n	80070b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070a2:	f107 0310 	add.w	r3, r7, #16
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 ffa4 	bl	8007ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070ac:	2301      	movs	r3, #1
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070b0:	f7ff fae0 	bl	8006674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070b4:	f000 fd38 	bl	8007b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070b8:	f7ff faac 	bl	8006614 <vPortEnterCritical>
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070c2:	b25b      	sxtb	r3, r3
 80070c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c8:	d103      	bne.n	80070d2 <xQueueReceive+0x122>
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070d8:	b25b      	sxtb	r3, r3
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070de:	d103      	bne.n	80070e8 <xQueueReceive+0x138>
 80070e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070e8:	f7ff fac4 	bl	8006674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070ec:	1d3a      	adds	r2, r7, #4
 80070ee:	f107 0310 	add.w	r3, r7, #16
 80070f2:	4611      	mov	r1, r2
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 ff93 	bl	8008020 <xTaskCheckForTimeOut>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d123      	bne.n	8007148 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007102:	f000 fabb 	bl	800767c <prvIsQueueEmpty>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d017      	beq.n	800713c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	3324      	adds	r3, #36	; 0x24
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	4611      	mov	r1, r2
 8007114:	4618      	mov	r0, r3
 8007116:	f000 fee7 	bl	8007ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800711a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800711c:	f000 fa5c 	bl	80075d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007120:	f000 fd10 	bl	8007b44 <xTaskResumeAll>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d189      	bne.n	800703e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800712a:	4b10      	ldr	r3, [pc, #64]	; (800716c <xQueueReceive+0x1bc>)
 800712c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	e780      	b.n	800703e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800713c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800713e:	f000 fa4b 	bl	80075d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007142:	f000 fcff 	bl	8007b44 <xTaskResumeAll>
 8007146:	e77a      	b.n	800703e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800714a:	f000 fa45 	bl	80075d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800714e:	f000 fcf9 	bl	8007b44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007154:	f000 fa92 	bl	800767c <prvIsQueueEmpty>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	f43f af6f 	beq.w	800703e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007160:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007162:	4618      	mov	r0, r3
 8007164:	3730      	adds	r7, #48	; 0x30
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	e000ed04 	.word	0xe000ed04

08007170 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b08e      	sub	sp, #56	; 0x38
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800717a:	2300      	movs	r3, #0
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007182:	2300      	movs	r3, #0
 8007184:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10a      	bne.n	80071a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	623b      	str	r3, [r7, #32]
}
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	61fb      	str	r3, [r7, #28]
}
 80071bc:	bf00      	nop
 80071be:	e7fe      	b.n	80071be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071c0:	f001 f872 	bl	80082a8 <xTaskGetSchedulerState>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d102      	bne.n	80071d0 <xQueueSemaphoreTake+0x60>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <xQueueSemaphoreTake+0x64>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e000      	b.n	80071d6 <xQueueSemaphoreTake+0x66>
 80071d4:	2300      	movs	r3, #0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	61bb      	str	r3, [r7, #24]
}
 80071ec:	bf00      	nop
 80071ee:	e7fe      	b.n	80071ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071f0:	f7ff fa10 	bl	8006614 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d024      	beq.n	800724a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007202:	1e5a      	subs	r2, r3, #1
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d104      	bne.n	800721a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007210:	f001 f9f2 	bl	80085f8 <pvTaskIncrementMutexHeldCount>
 8007214:	4602      	mov	r2, r0
 8007216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007218:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00f      	beq.n	8007242 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007224:	3310      	adds	r3, #16
 8007226:	4618      	mov	r0, r3
 8007228:	f000 fe82 	bl	8007f30 <xTaskRemoveFromEventList>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d007      	beq.n	8007242 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007232:	4b54      	ldr	r3, [pc, #336]	; (8007384 <xQueueSemaphoreTake+0x214>)
 8007234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007242:	f7ff fa17 	bl	8006674 <vPortExitCritical>
				return pdPASS;
 8007246:	2301      	movs	r3, #1
 8007248:	e097      	b.n	800737a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d111      	bne.n	8007274 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	617b      	str	r3, [r7, #20]
}
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800726c:	f7ff fa02 	bl	8006674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007270:	2300      	movs	r3, #0
 8007272:	e082      	b.n	800737a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007276:	2b00      	cmp	r3, #0
 8007278:	d106      	bne.n	8007288 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800727a:	f107 030c 	add.w	r3, r7, #12
 800727e:	4618      	mov	r0, r3
 8007280:	f000 feb8 	bl	8007ff4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007284:	2301      	movs	r3, #1
 8007286:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007288:	f7ff f9f4 	bl	8006674 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800728c:	f000 fc4c 	bl	8007b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007290:	f7ff f9c0 	bl	8006614 <vPortEnterCritical>
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800729a:	b25b      	sxtb	r3, r3
 800729c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a0:	d103      	bne.n	80072aa <xQueueSemaphoreTake+0x13a>
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072b0:	b25b      	sxtb	r3, r3
 80072b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b6:	d103      	bne.n	80072c0 <xQueueSemaphoreTake+0x150>
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072c0:	f7ff f9d8 	bl	8006674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072c4:	463a      	mov	r2, r7
 80072c6:	f107 030c 	add.w	r3, r7, #12
 80072ca:	4611      	mov	r1, r2
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 fea7 	bl	8008020 <xTaskCheckForTimeOut>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d132      	bne.n	800733e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072da:	f000 f9cf 	bl	800767c <prvIsQueueEmpty>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d026      	beq.n	8007332 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d109      	bne.n	8007300 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80072ec:	f7ff f992 	bl	8006614 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 fff5 	bl	80082e4 <xTaskPriorityInherit>
 80072fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80072fc:	f7ff f9ba 	bl	8006674 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007302:	3324      	adds	r3, #36	; 0x24
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	4611      	mov	r1, r2
 8007308:	4618      	mov	r0, r3
 800730a:	f000 fded 	bl	8007ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800730e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007310:	f000 f962 	bl	80075d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007314:	f000 fc16 	bl	8007b44 <xTaskResumeAll>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	f47f af68 	bne.w	80071f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007320:	4b18      	ldr	r3, [pc, #96]	; (8007384 <xQueueSemaphoreTake+0x214>)
 8007322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	e75e      	b.n	80071f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007334:	f000 f950 	bl	80075d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007338:	f000 fc04 	bl	8007b44 <xTaskResumeAll>
 800733c:	e758      	b.n	80071f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800733e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007340:	f000 f94a 	bl	80075d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007344:	f000 fbfe 	bl	8007b44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007348:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800734a:	f000 f997 	bl	800767c <prvIsQueueEmpty>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	f43f af4d 	beq.w	80071f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00d      	beq.n	8007378 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800735c:	f7ff f95a 	bl	8006614 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007360:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007362:	f000 f891 	bl	8007488 <prvGetDisinheritPriorityAfterTimeout>
 8007366:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800736e:	4618      	mov	r0, r3
 8007370:	f001 f8b4 	bl	80084dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007374:	f7ff f97e 	bl	8006674 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007378:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800737a:	4618      	mov	r0, r3
 800737c:	3738      	adds	r7, #56	; 0x38
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	e000ed04 	.word	0xe000ed04

08007388 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08e      	sub	sp, #56	; 0x38
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	623b      	str	r3, [r7, #32]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d103      	bne.n	80073c2 <xQueueReceiveFromISR+0x3a>
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <xQueueReceiveFromISR+0x3e>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <xQueueReceiveFromISR+0x40>
 80073c6:	2300      	movs	r3, #0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10a      	bne.n	80073e2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	61fb      	str	r3, [r7, #28]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073e2:	f7ff f9f9 	bl	80067d8 <vPortValidateInterruptPriority>
	__asm volatile
 80073e6:	f3ef 8211 	mrs	r2, BASEPRI
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	61ba      	str	r2, [r7, #24]
 80073fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80073fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007400:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	2b00      	cmp	r3, #0
 800740c:	d02f      	beq.n	800746e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007418:	68b9      	ldr	r1, [r7, #8]
 800741a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800741c:	f000 f8b6 	bl	800758c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	1e5a      	subs	r2, r3, #1
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007428:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007430:	d112      	bne.n	8007458 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d016      	beq.n	8007468 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	3310      	adds	r3, #16
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fd76 	bl	8007f30 <xTaskRemoveFromEventList>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00e      	beq.n	8007468 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00b      	beq.n	8007468 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	e007      	b.n	8007468 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800745c:	3301      	adds	r3, #1
 800745e:	b2db      	uxtb	r3, r3
 8007460:	b25a      	sxtb	r2, r3
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007468:	2301      	movs	r3, #1
 800746a:	637b      	str	r3, [r7, #52]	; 0x34
 800746c:	e001      	b.n	8007472 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800746e:	2300      	movs	r3, #0
 8007470:	637b      	str	r3, [r7, #52]	; 0x34
 8007472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007474:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f383 8811 	msr	BASEPRI, r3
}
 800747c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800747e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007480:	4618      	mov	r0, r3
 8007482:	3738      	adds	r7, #56	; 0x38
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	d006      	beq.n	80074a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f1c3 0307 	rsb	r3, r3, #7
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	e001      	b.n	80074aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80074aa:	68fb      	ldr	r3, [r7, #12]
	}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10d      	bne.n	80074f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d14d      	bne.n	800757a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 ff74 	bl	80083d0 <xTaskPriorityDisinherit>
 80074e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	609a      	str	r2, [r3, #8]
 80074f0:	e043      	b.n	800757a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d119      	bne.n	800752c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6858      	ldr	r0, [r3, #4]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007500:	461a      	mov	r2, r3
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	f00c fa36 	bl	8013974 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007510:	441a      	add	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	429a      	cmp	r2, r3
 8007520:	d32b      	bcc.n	800757a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	605a      	str	r2, [r3, #4]
 800752a:	e026      	b.n	800757a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	68d8      	ldr	r0, [r3, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007534:	461a      	mov	r2, r3
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	f00c fa1c 	bl	8013974 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	425b      	negs	r3, r3
 8007546:	441a      	add	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	429a      	cmp	r2, r3
 8007556:	d207      	bcs.n	8007568 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	689a      	ldr	r2, [r3, #8]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007560:	425b      	negs	r3, r3
 8007562:	441a      	add	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b02      	cmp	r3, #2
 800756c:	d105      	bne.n	800757a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	3b01      	subs	r3, #1
 8007578:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007582:	697b      	ldr	r3, [r7, #20]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	2b00      	cmp	r3, #0
 800759c:	d018      	beq.n	80075d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	441a      	add	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d303      	bcc.n	80075c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68d9      	ldr	r1, [r3, #12]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	461a      	mov	r2, r3
 80075ca:	6838      	ldr	r0, [r7, #0]
 80075cc:	f00c f9d2 	bl	8013974 <memcpy>
	}
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80075e0:	f7ff f818 	bl	8006614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075ec:	e011      	b.n	8007612 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d012      	beq.n	800761c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3324      	adds	r3, #36	; 0x24
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 fc98 	bl	8007f30 <xTaskRemoveFromEventList>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007606:	f000 fd6d 	bl	80080e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	3b01      	subs	r3, #1
 800760e:	b2db      	uxtb	r3, r3
 8007610:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007616:	2b00      	cmp	r3, #0
 8007618:	dce9      	bgt.n	80075ee <prvUnlockQueue+0x16>
 800761a:	e000      	b.n	800761e <prvUnlockQueue+0x46>
					break;
 800761c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	22ff      	movs	r2, #255	; 0xff
 8007622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007626:	f7ff f825 	bl	8006674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800762a:	f7fe fff3 	bl	8006614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007634:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007636:	e011      	b.n	800765c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d012      	beq.n	8007666 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	3310      	adds	r3, #16
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fc73 	bl	8007f30 <xTaskRemoveFromEventList>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007650:	f000 fd48 	bl	80080e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007654:	7bbb      	ldrb	r3, [r7, #14]
 8007656:	3b01      	subs	r3, #1
 8007658:	b2db      	uxtb	r3, r3
 800765a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800765c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007660:	2b00      	cmp	r3, #0
 8007662:	dce9      	bgt.n	8007638 <prvUnlockQueue+0x60>
 8007664:	e000      	b.n	8007668 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007666:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	22ff      	movs	r2, #255	; 0xff
 800766c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007670:	f7ff f800 	bl	8006674 <vPortExitCritical>
}
 8007674:	bf00      	nop
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007684:	f7fe ffc6 	bl	8006614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	2b00      	cmp	r3, #0
 800768e:	d102      	bne.n	8007696 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007690:	2301      	movs	r3, #1
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	e001      	b.n	800769a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007696:	2300      	movs	r3, #0
 8007698:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800769a:	f7fe ffeb 	bl	8006674 <vPortExitCritical>

	return xReturn;
 800769e:	68fb      	ldr	r3, [r7, #12]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076b0:	f7fe ffb0 	bl	8006614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076bc:	429a      	cmp	r2, r3
 80076be:	d102      	bne.n	80076c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80076c0:	2301      	movs	r3, #1
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	e001      	b.n	80076ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076ca:	f7fe ffd3 	bl	8006674 <vPortExitCritical>

	return xReturn;
 80076ce:	68fb      	ldr	r3, [r7, #12]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08e      	sub	sp, #56	; 0x38
 80076dc:	af04      	add	r7, sp, #16
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80076e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10a      	bne.n	8007702 <xTaskCreateStatic+0x2a>
	__asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	623b      	str	r3, [r7, #32]
}
 80076fe:	bf00      	nop
 8007700:	e7fe      	b.n	8007700 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10a      	bne.n	800771e <xTaskCreateStatic+0x46>
	__asm volatile
 8007708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	61fb      	str	r3, [r7, #28]
}
 800771a:	bf00      	nop
 800771c:	e7fe      	b.n	800771c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800771e:	2354      	movs	r3, #84	; 0x54
 8007720:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	2b54      	cmp	r3, #84	; 0x54
 8007726:	d00a      	beq.n	800773e <xTaskCreateStatic+0x66>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	61bb      	str	r3, [r7, #24]
}
 800773a:	bf00      	nop
 800773c:	e7fe      	b.n	800773c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800773e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007742:	2b00      	cmp	r3, #0
 8007744:	d01e      	beq.n	8007784 <xTaskCreateStatic+0xac>
 8007746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01b      	beq.n	8007784 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007754:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	2202      	movs	r2, #2
 800775a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800775e:	2300      	movs	r3, #0
 8007760:	9303      	str	r3, [sp, #12]
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	9302      	str	r3, [sp, #8]
 8007766:	f107 0314 	add.w	r3, r7, #20
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	68b9      	ldr	r1, [r7, #8]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 f850 	bl	800781c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800777c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800777e:	f000 f8d5 	bl	800792c <prvAddNewTaskToReadyList>
 8007782:	e001      	b.n	8007788 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007784:	2300      	movs	r3, #0
 8007786:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007788:	697b      	ldr	r3, [r7, #20]
	}
 800778a:	4618      	mov	r0, r3
 800778c:	3728      	adds	r7, #40	; 0x28
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007792:	b580      	push	{r7, lr}
 8007794:	b08c      	sub	sp, #48	; 0x30
 8007796:	af04      	add	r7, sp, #16
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	603b      	str	r3, [r7, #0]
 800779e:	4613      	mov	r3, r2
 80077a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80077a2:	88fb      	ldrh	r3, [r7, #6]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fe fb66 	bl	8005e78 <pvPortMalloc>
 80077ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00e      	beq.n	80077d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80077b4:	2054      	movs	r0, #84	; 0x54
 80077b6:	f7fe fb5f 	bl	8005e78 <pvPortMalloc>
 80077ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	631a      	str	r2, [r3, #48]	; 0x30
 80077c8:	e005      	b.n	80077d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80077ca:	6978      	ldr	r0, [r7, #20]
 80077cc:	f7fe fc20 	bl	8006010 <vPortFree>
 80077d0:	e001      	b.n	80077d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d017      	beq.n	800780c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80077e4:	88fa      	ldrh	r2, [r7, #6]
 80077e6:	2300      	movs	r3, #0
 80077e8:	9303      	str	r3, [sp, #12]
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	9302      	str	r3, [sp, #8]
 80077ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f0:	9301      	str	r3, [sp, #4]
 80077f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	68b9      	ldr	r1, [r7, #8]
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 f80e 	bl	800781c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007800:	69f8      	ldr	r0, [r7, #28]
 8007802:	f000 f893 	bl	800792c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007806:	2301      	movs	r3, #1
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	e002      	b.n	8007812 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800780c:	f04f 33ff 	mov.w	r3, #4294967295
 8007810:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007812:	69bb      	ldr	r3, [r7, #24]
	}
 8007814:	4618      	mov	r0, r3
 8007816:	3720      	adds	r7, #32
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007834:	440b      	add	r3, r1
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	f023 0307 	bic.w	r3, r3, #7
 8007842:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	f003 0307 	and.w	r3, r3, #7
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <prvInitialiseNewTask+0x48>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	617b      	str	r3, [r7, #20]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d01f      	beq.n	80078aa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800786a:	2300      	movs	r3, #0
 800786c:	61fb      	str	r3, [r7, #28]
 800786e:	e012      	b.n	8007896 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	4413      	add	r3, r2
 8007876:	7819      	ldrb	r1, [r3, #0]
 8007878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	4413      	add	r3, r2
 800787e:	3334      	adds	r3, #52	; 0x34
 8007880:	460a      	mov	r2, r1
 8007882:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	4413      	add	r3, r2
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d006      	beq.n	800789e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	3301      	adds	r3, #1
 8007894:	61fb      	str	r3, [r7, #28]
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	2b0f      	cmp	r3, #15
 800789a:	d9e9      	bls.n	8007870 <prvInitialiseNewTask+0x54>
 800789c:	e000      	b.n	80078a0 <prvInitialiseNewTask+0x84>
			{
				break;
 800789e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078a8:	e003      	b.n	80078b2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	2b06      	cmp	r3, #6
 80078b6:	d901      	bls.n	80078bc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078b8:	2306      	movs	r3, #6
 80078ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80078bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80078c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ca:	2200      	movs	r2, #0
 80078cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d0:	3304      	adds	r3, #4
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fe fcda 	bl	800628c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078da:	3318      	adds	r3, #24
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fe fcd5 	bl	800628c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	f1c3 0207 	rsb	r2, r3, #7
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	2200      	movs	r2, #0
 80078fc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	68f9      	ldr	r1, [r7, #12]
 800790a:	69b8      	ldr	r0, [r7, #24]
 800790c:	f7fe fd52 	bl	80063b4 <pxPortInitialiseStack>
 8007910:	4602      	mov	r2, r0
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007922:	bf00      	nop
 8007924:	3720      	adds	r7, #32
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007934:	f7fe fe6e 	bl	8006614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007938:	4b2a      	ldr	r3, [pc, #168]	; (80079e4 <prvAddNewTaskToReadyList+0xb8>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3301      	adds	r3, #1
 800793e:	4a29      	ldr	r2, [pc, #164]	; (80079e4 <prvAddNewTaskToReadyList+0xb8>)
 8007940:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007942:	4b29      	ldr	r3, [pc, #164]	; (80079e8 <prvAddNewTaskToReadyList+0xbc>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d109      	bne.n	800795e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800794a:	4a27      	ldr	r2, [pc, #156]	; (80079e8 <prvAddNewTaskToReadyList+0xbc>)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007950:	4b24      	ldr	r3, [pc, #144]	; (80079e4 <prvAddNewTaskToReadyList+0xb8>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d110      	bne.n	800797a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007958:	f000 fbe8 	bl	800812c <prvInitialiseTaskLists>
 800795c:	e00d      	b.n	800797a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800795e:	4b23      	ldr	r3, [pc, #140]	; (80079ec <prvAddNewTaskToReadyList+0xc0>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d109      	bne.n	800797a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007966:	4b20      	ldr	r3, [pc, #128]	; (80079e8 <prvAddNewTaskToReadyList+0xbc>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	429a      	cmp	r2, r3
 8007972:	d802      	bhi.n	800797a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007974:	4a1c      	ldr	r2, [pc, #112]	; (80079e8 <prvAddNewTaskToReadyList+0xbc>)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800797a:	4b1d      	ldr	r3, [pc, #116]	; (80079f0 <prvAddNewTaskToReadyList+0xc4>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3301      	adds	r3, #1
 8007980:	4a1b      	ldr	r2, [pc, #108]	; (80079f0 <prvAddNewTaskToReadyList+0xc4>)
 8007982:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	2201      	movs	r2, #1
 800798a:	409a      	lsls	r2, r3
 800798c:	4b19      	ldr	r3, [pc, #100]	; (80079f4 <prvAddNewTaskToReadyList+0xc8>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4313      	orrs	r3, r2
 8007992:	4a18      	ldr	r2, [pc, #96]	; (80079f4 <prvAddNewTaskToReadyList+0xc8>)
 8007994:	6013      	str	r3, [r2, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799a:	4613      	mov	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4a15      	ldr	r2, [pc, #84]	; (80079f8 <prvAddNewTaskToReadyList+0xcc>)
 80079a4:	441a      	add	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	3304      	adds	r3, #4
 80079aa:	4619      	mov	r1, r3
 80079ac:	4610      	mov	r0, r2
 80079ae:	f7fe fc7a 	bl	80062a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079b2:	f7fe fe5f 	bl	8006674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80079b6:	4b0d      	ldr	r3, [pc, #52]	; (80079ec <prvAddNewTaskToReadyList+0xc0>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00e      	beq.n	80079dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80079be:	4b0a      	ldr	r3, [pc, #40]	; (80079e8 <prvAddNewTaskToReadyList+0xbc>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d207      	bcs.n	80079dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079cc:	4b0b      	ldr	r3, [pc, #44]	; (80079fc <prvAddNewTaskToReadyList+0xd0>)
 80079ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079dc:	bf00      	nop
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	240041fc 	.word	0x240041fc
 80079e8:	240040fc 	.word	0x240040fc
 80079ec:	24004208 	.word	0x24004208
 80079f0:	24004218 	.word	0x24004218
 80079f4:	24004204 	.word	0x24004204
 80079f8:	24004100 	.word	0x24004100
 80079fc:	e000ed04 	.word	0xe000ed04

08007a00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d017      	beq.n	8007a42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a12:	4b13      	ldr	r3, [pc, #76]	; (8007a60 <vTaskDelay+0x60>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <vTaskDelay+0x30>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	60bb      	str	r3, [r7, #8]
}
 8007a2c:	bf00      	nop
 8007a2e:	e7fe      	b.n	8007a2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a30:	f000 f87a 	bl	8007b28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a34:	2100      	movs	r1, #0
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fdf2 	bl	8008620 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a3c:	f000 f882 	bl	8007b44 <xTaskResumeAll>
 8007a40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d107      	bne.n	8007a58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007a48:	4b06      	ldr	r3, [pc, #24]	; (8007a64 <vTaskDelay+0x64>)
 8007a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a58:	bf00      	nop
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	24004224 	.word	0x24004224
 8007a64:	e000ed04 	.word	0xe000ed04

08007a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08a      	sub	sp, #40	; 0x28
 8007a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a72:	2300      	movs	r3, #0
 8007a74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a76:	463a      	mov	r2, r7
 8007a78:	1d39      	adds	r1, r7, #4
 8007a7a:	f107 0308 	add.w	r3, r7, #8
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7f8 fd14 	bl	80004ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	9202      	str	r2, [sp, #8]
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	2300      	movs	r3, #0
 8007a94:	460a      	mov	r2, r1
 8007a96:	491e      	ldr	r1, [pc, #120]	; (8007b10 <vTaskStartScheduler+0xa8>)
 8007a98:	481e      	ldr	r0, [pc, #120]	; (8007b14 <vTaskStartScheduler+0xac>)
 8007a9a:	f7ff fe1d 	bl	80076d8 <xTaskCreateStatic>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	4a1d      	ldr	r2, [pc, #116]	; (8007b18 <vTaskStartScheduler+0xb0>)
 8007aa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007aa4:	4b1c      	ldr	r3, [pc, #112]	; (8007b18 <vTaskStartScheduler+0xb0>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007aac:	2301      	movs	r3, #1
 8007aae:	617b      	str	r3, [r7, #20]
 8007ab0:	e001      	b.n	8007ab6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d116      	bne.n	8007aea <vTaskStartScheduler+0x82>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	613b      	str	r3, [r7, #16]
}
 8007ace:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ad0:	4b12      	ldr	r3, [pc, #72]	; (8007b1c <vTaskStartScheduler+0xb4>)
 8007ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ad8:	4b11      	ldr	r3, [pc, #68]	; (8007b20 <vTaskStartScheduler+0xb8>)
 8007ada:	2201      	movs	r2, #1
 8007adc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ade:	4b11      	ldr	r3, [pc, #68]	; (8007b24 <vTaskStartScheduler+0xbc>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ae4:	f7fe fcf4 	bl	80064d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ae8:	e00e      	b.n	8007b08 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af0:	d10a      	bne.n	8007b08 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	60fb      	str	r3, [r7, #12]
}
 8007b04:	bf00      	nop
 8007b06:	e7fe      	b.n	8007b06 <vTaskStartScheduler+0x9e>
}
 8007b08:	bf00      	nop
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	08014f34 	.word	0x08014f34
 8007b14:	080080fd 	.word	0x080080fd
 8007b18:	24004220 	.word	0x24004220
 8007b1c:	2400421c 	.word	0x2400421c
 8007b20:	24004208 	.word	0x24004208
 8007b24:	24004200 	.word	0x24004200

08007b28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b2c:	4b04      	ldr	r3, [pc, #16]	; (8007b40 <vTaskSuspendAll+0x18>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3301      	adds	r3, #1
 8007b32:	4a03      	ldr	r2, [pc, #12]	; (8007b40 <vTaskSuspendAll+0x18>)
 8007b34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b36:	bf00      	nop
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	24004224 	.word	0x24004224

08007b44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b52:	4b41      	ldr	r3, [pc, #260]	; (8007c58 <xTaskResumeAll+0x114>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10a      	bne.n	8007b70 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	603b      	str	r3, [r7, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	e7fe      	b.n	8007b6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b70:	f7fe fd50 	bl	8006614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b74:	4b38      	ldr	r3, [pc, #224]	; (8007c58 <xTaskResumeAll+0x114>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	4a37      	ldr	r2, [pc, #220]	; (8007c58 <xTaskResumeAll+0x114>)
 8007b7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b7e:	4b36      	ldr	r3, [pc, #216]	; (8007c58 <xTaskResumeAll+0x114>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d161      	bne.n	8007c4a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b86:	4b35      	ldr	r3, [pc, #212]	; (8007c5c <xTaskResumeAll+0x118>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d05d      	beq.n	8007c4a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b8e:	e02e      	b.n	8007bee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b90:	4b33      	ldr	r3, [pc, #204]	; (8007c60 <xTaskResumeAll+0x11c>)
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3318      	adds	r3, #24
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fe fbdf 	bl	8006360 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe fbda 	bl	8006360 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	409a      	lsls	r2, r3
 8007bb4:	4b2b      	ldr	r3, [pc, #172]	; (8007c64 <xTaskResumeAll+0x120>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	4a2a      	ldr	r2, [pc, #168]	; (8007c64 <xTaskResumeAll+0x120>)
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4a27      	ldr	r2, [pc, #156]	; (8007c68 <xTaskResumeAll+0x124>)
 8007bcc:	441a      	add	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	f7fe fb66 	bl	80062a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bde:	4b23      	ldr	r3, [pc, #140]	; (8007c6c <xTaskResumeAll+0x128>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d302      	bcc.n	8007bee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007be8:	4b21      	ldr	r3, [pc, #132]	; (8007c70 <xTaskResumeAll+0x12c>)
 8007bea:	2201      	movs	r2, #1
 8007bec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bee:	4b1c      	ldr	r3, [pc, #112]	; (8007c60 <xTaskResumeAll+0x11c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1cc      	bne.n	8007b90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bfc:	f000 fb34 	bl	8008268 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c00:	4b1c      	ldr	r3, [pc, #112]	; (8007c74 <xTaskResumeAll+0x130>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d010      	beq.n	8007c2e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c0c:	f000 f858 	bl	8007cc0 <xTaskIncrementTick>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007c16:	4b16      	ldr	r3, [pc, #88]	; (8007c70 <xTaskResumeAll+0x12c>)
 8007c18:	2201      	movs	r2, #1
 8007c1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1f1      	bne.n	8007c0c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007c28:	4b12      	ldr	r3, [pc, #72]	; (8007c74 <xTaskResumeAll+0x130>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c2e:	4b10      	ldr	r3, [pc, #64]	; (8007c70 <xTaskResumeAll+0x12c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d009      	beq.n	8007c4a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c36:	2301      	movs	r3, #1
 8007c38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c3a:	4b0f      	ldr	r3, [pc, #60]	; (8007c78 <xTaskResumeAll+0x134>)
 8007c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c4a:	f7fe fd13 	bl	8006674 <vPortExitCritical>

	return xAlreadyYielded;
 8007c4e:	68bb      	ldr	r3, [r7, #8]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	24004224 	.word	0x24004224
 8007c5c:	240041fc 	.word	0x240041fc
 8007c60:	240041bc 	.word	0x240041bc
 8007c64:	24004204 	.word	0x24004204
 8007c68:	24004100 	.word	0x24004100
 8007c6c:	240040fc 	.word	0x240040fc
 8007c70:	24004210 	.word	0x24004210
 8007c74:	2400420c 	.word	0x2400420c
 8007c78:	e000ed04 	.word	0xe000ed04

08007c7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c82:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <xTaskGetTickCount+0x1c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c88:	687b      	ldr	r3, [r7, #4]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	24004200 	.word	0x24004200

08007c9c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ca2:	f7fe fd99 	bl	80067d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007caa:	4b04      	ldr	r3, [pc, #16]	; (8007cbc <xTaskGetTickCountFromISR+0x20>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cb0:	683b      	ldr	r3, [r7, #0]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	24004200 	.word	0x24004200

08007cc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cca:	4b4e      	ldr	r3, [pc, #312]	; (8007e04 <xTaskIncrementTick+0x144>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f040 808e 	bne.w	8007df0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007cd4:	4b4c      	ldr	r3, [pc, #304]	; (8007e08 <xTaskIncrementTick+0x148>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007cdc:	4a4a      	ldr	r2, [pc, #296]	; (8007e08 <xTaskIncrementTick+0x148>)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d120      	bne.n	8007d2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ce8:	4b48      	ldr	r3, [pc, #288]	; (8007e0c <xTaskIncrementTick+0x14c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00a      	beq.n	8007d08 <xTaskIncrementTick+0x48>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	603b      	str	r3, [r7, #0]
}
 8007d04:	bf00      	nop
 8007d06:	e7fe      	b.n	8007d06 <xTaskIncrementTick+0x46>
 8007d08:	4b40      	ldr	r3, [pc, #256]	; (8007e0c <xTaskIncrementTick+0x14c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	4b40      	ldr	r3, [pc, #256]	; (8007e10 <xTaskIncrementTick+0x150>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a3e      	ldr	r2, [pc, #248]	; (8007e0c <xTaskIncrementTick+0x14c>)
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	4a3e      	ldr	r2, [pc, #248]	; (8007e10 <xTaskIncrementTick+0x150>)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	4b3d      	ldr	r3, [pc, #244]	; (8007e14 <xTaskIncrementTick+0x154>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3301      	adds	r3, #1
 8007d22:	4a3c      	ldr	r2, [pc, #240]	; (8007e14 <xTaskIncrementTick+0x154>)
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	f000 fa9f 	bl	8008268 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d2a:	4b3b      	ldr	r3, [pc, #236]	; (8007e18 <xTaskIncrementTick+0x158>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d348      	bcc.n	8007dc6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d34:	4b35      	ldr	r3, [pc, #212]	; (8007e0c <xTaskIncrementTick+0x14c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d104      	bne.n	8007d48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d3e:	4b36      	ldr	r3, [pc, #216]	; (8007e18 <xTaskIncrementTick+0x158>)
 8007d40:	f04f 32ff 	mov.w	r2, #4294967295
 8007d44:	601a      	str	r2, [r3, #0]
					break;
 8007d46:	e03e      	b.n	8007dc6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d48:	4b30      	ldr	r3, [pc, #192]	; (8007e0c <xTaskIncrementTick+0x14c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d203      	bcs.n	8007d68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d60:	4a2d      	ldr	r2, [pc, #180]	; (8007e18 <xTaskIncrementTick+0x158>)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d66:	e02e      	b.n	8007dc6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fe faf7 	bl	8006360 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d004      	beq.n	8007d84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	3318      	adds	r3, #24
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fe faee 	bl	8006360 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	2201      	movs	r2, #1
 8007d8a:	409a      	lsls	r2, r3
 8007d8c:	4b23      	ldr	r3, [pc, #140]	; (8007e1c <xTaskIncrementTick+0x15c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	4a22      	ldr	r2, [pc, #136]	; (8007e1c <xTaskIncrementTick+0x15c>)
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4a1f      	ldr	r2, [pc, #124]	; (8007e20 <xTaskIncrementTick+0x160>)
 8007da4:	441a      	add	r2, r3
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	3304      	adds	r3, #4
 8007daa:	4619      	mov	r1, r3
 8007dac:	4610      	mov	r0, r2
 8007dae:	f7fe fa7a 	bl	80062a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db6:	4b1b      	ldr	r3, [pc, #108]	; (8007e24 <xTaskIncrementTick+0x164>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d3b9      	bcc.n	8007d34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dc4:	e7b6      	b.n	8007d34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007dc6:	4b17      	ldr	r3, [pc, #92]	; (8007e24 <xTaskIncrementTick+0x164>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dcc:	4914      	ldr	r1, [pc, #80]	; (8007e20 <xTaskIncrementTick+0x160>)
 8007dce:	4613      	mov	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	440b      	add	r3, r1
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d901      	bls.n	8007de2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007dde:	2301      	movs	r3, #1
 8007de0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007de2:	4b11      	ldr	r3, [pc, #68]	; (8007e28 <xTaskIncrementTick+0x168>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d007      	beq.n	8007dfa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007dea:	2301      	movs	r3, #1
 8007dec:	617b      	str	r3, [r7, #20]
 8007dee:	e004      	b.n	8007dfa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007df0:	4b0e      	ldr	r3, [pc, #56]	; (8007e2c <xTaskIncrementTick+0x16c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3301      	adds	r3, #1
 8007df6:	4a0d      	ldr	r2, [pc, #52]	; (8007e2c <xTaskIncrementTick+0x16c>)
 8007df8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007dfa:	697b      	ldr	r3, [r7, #20]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	24004224 	.word	0x24004224
 8007e08:	24004200 	.word	0x24004200
 8007e0c:	240041b4 	.word	0x240041b4
 8007e10:	240041b8 	.word	0x240041b8
 8007e14:	24004214 	.word	0x24004214
 8007e18:	2400421c 	.word	0x2400421c
 8007e1c:	24004204 	.word	0x24004204
 8007e20:	24004100 	.word	0x24004100
 8007e24:	240040fc 	.word	0x240040fc
 8007e28:	24004210 	.word	0x24004210
 8007e2c:	2400420c 	.word	0x2400420c

08007e30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e36:	4b27      	ldr	r3, [pc, #156]	; (8007ed4 <vTaskSwitchContext+0xa4>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e3e:	4b26      	ldr	r3, [pc, #152]	; (8007ed8 <vTaskSwitchContext+0xa8>)
 8007e40:	2201      	movs	r2, #1
 8007e42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e44:	e03f      	b.n	8007ec6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007e46:	4b24      	ldr	r3, [pc, #144]	; (8007ed8 <vTaskSwitchContext+0xa8>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e4c:	4b23      	ldr	r3, [pc, #140]	; (8007edc <vTaskSwitchContext+0xac>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	fab3 f383 	clz	r3, r3
 8007e58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007e5a:	7afb      	ldrb	r3, [r7, #11]
 8007e5c:	f1c3 031f 	rsb	r3, r3, #31
 8007e60:	617b      	str	r3, [r7, #20]
 8007e62:	491f      	ldr	r1, [pc, #124]	; (8007ee0 <vTaskSwitchContext+0xb0>)
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	4613      	mov	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	440b      	add	r3, r1
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10a      	bne.n	8007e8c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	607b      	str	r3, [r7, #4]
}
 8007e88:	bf00      	nop
 8007e8a:	e7fe      	b.n	8007e8a <vTaskSwitchContext+0x5a>
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4a12      	ldr	r2, [pc, #72]	; (8007ee0 <vTaskSwitchContext+0xb0>)
 8007e98:	4413      	add	r3, r2
 8007e9a:	613b      	str	r3, [r7, #16]
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	605a      	str	r2, [r3, #4]
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	3308      	adds	r3, #8
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d104      	bne.n	8007ebc <vTaskSwitchContext+0x8c>
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	605a      	str	r2, [r3, #4]
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	4a08      	ldr	r2, [pc, #32]	; (8007ee4 <vTaskSwitchContext+0xb4>)
 8007ec4:	6013      	str	r3, [r2, #0]
}
 8007ec6:	bf00      	nop
 8007ec8:	371c      	adds	r7, #28
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	24004224 	.word	0x24004224
 8007ed8:	24004210 	.word	0x24004210
 8007edc:	24004204 	.word	0x24004204
 8007ee0:	24004100 	.word	0x24004100
 8007ee4:	240040fc 	.word	0x240040fc

08007ee8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10a      	bne.n	8007f0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	60fb      	str	r3, [r7, #12]
}
 8007f0a:	bf00      	nop
 8007f0c:	e7fe      	b.n	8007f0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f0e:	4b07      	ldr	r3, [pc, #28]	; (8007f2c <vTaskPlaceOnEventList+0x44>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3318      	adds	r3, #24
 8007f14:	4619      	mov	r1, r3
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7fe f9e9 	bl	80062ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	6838      	ldr	r0, [r7, #0]
 8007f20:	f000 fb7e 	bl	8008620 <prvAddCurrentTaskToDelayedList>
}
 8007f24:	bf00      	nop
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	240040fc 	.word	0x240040fc

08007f30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10a      	bne.n	8007f5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4a:	f383 8811 	msr	BASEPRI, r3
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f3bf 8f4f 	dsb	sy
 8007f56:	60fb      	str	r3, [r7, #12]
}
 8007f58:	bf00      	nop
 8007f5a:	e7fe      	b.n	8007f5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	3318      	adds	r3, #24
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fe f9fd 	bl	8006360 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f66:	4b1d      	ldr	r3, [pc, #116]	; (8007fdc <xTaskRemoveFromEventList+0xac>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d11c      	bne.n	8007fa8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	3304      	adds	r3, #4
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe f9f4 	bl	8006360 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	409a      	lsls	r2, r3
 8007f80:	4b17      	ldr	r3, [pc, #92]	; (8007fe0 <xTaskRemoveFromEventList+0xb0>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	4a16      	ldr	r2, [pc, #88]	; (8007fe0 <xTaskRemoveFromEventList+0xb0>)
 8007f88:	6013      	str	r3, [r2, #0]
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8e:	4613      	mov	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4a13      	ldr	r2, [pc, #76]	; (8007fe4 <xTaskRemoveFromEventList+0xb4>)
 8007f98:	441a      	add	r2, r3
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	f7fe f980 	bl	80062a6 <vListInsertEnd>
 8007fa6:	e005      	b.n	8007fb4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	3318      	adds	r3, #24
 8007fac:	4619      	mov	r1, r3
 8007fae:	480e      	ldr	r0, [pc, #56]	; (8007fe8 <xTaskRemoveFromEventList+0xb8>)
 8007fb0:	f7fe f979 	bl	80062a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb8:	4b0c      	ldr	r3, [pc, #48]	; (8007fec <xTaskRemoveFromEventList+0xbc>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d905      	bls.n	8007fce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fc6:	4b0a      	ldr	r3, [pc, #40]	; (8007ff0 <xTaskRemoveFromEventList+0xc0>)
 8007fc8:	2201      	movs	r2, #1
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	e001      	b.n	8007fd2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007fd2:	697b      	ldr	r3, [r7, #20]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3718      	adds	r7, #24
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	24004224 	.word	0x24004224
 8007fe0:	24004204 	.word	0x24004204
 8007fe4:	24004100 	.word	0x24004100
 8007fe8:	240041bc 	.word	0x240041bc
 8007fec:	240040fc 	.word	0x240040fc
 8007ff0:	24004210 	.word	0x24004210

08007ff4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ffc:	4b06      	ldr	r3, [pc, #24]	; (8008018 <vTaskInternalSetTimeOutState+0x24>)
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008004:	4b05      	ldr	r3, [pc, #20]	; (800801c <vTaskInternalSetTimeOutState+0x28>)
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	605a      	str	r2, [r3, #4]
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	24004214 	.word	0x24004214
 800801c:	24004200 	.word	0x24004200

08008020 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b088      	sub	sp, #32
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10a      	bne.n	8008046 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	613b      	str	r3, [r7, #16]
}
 8008042:	bf00      	nop
 8008044:	e7fe      	b.n	8008044 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10a      	bne.n	8008062 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	60fb      	str	r3, [r7, #12]
}
 800805e:	bf00      	nop
 8008060:	e7fe      	b.n	8008060 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008062:	f7fe fad7 	bl	8006614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008066:	4b1d      	ldr	r3, [pc, #116]	; (80080dc <xTaskCheckForTimeOut+0xbc>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807e:	d102      	bne.n	8008086 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008080:	2300      	movs	r3, #0
 8008082:	61fb      	str	r3, [r7, #28]
 8008084:	e023      	b.n	80080ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	4b15      	ldr	r3, [pc, #84]	; (80080e0 <xTaskCheckForTimeOut+0xc0>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	429a      	cmp	r2, r3
 8008090:	d007      	beq.n	80080a2 <xTaskCheckForTimeOut+0x82>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	429a      	cmp	r2, r3
 800809a:	d302      	bcc.n	80080a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800809c:	2301      	movs	r3, #1
 800809e:	61fb      	str	r3, [r7, #28]
 80080a0:	e015      	b.n	80080ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d20b      	bcs.n	80080c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	1ad2      	subs	r2, r2, r3
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7ff ff9b 	bl	8007ff4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080be:	2300      	movs	r3, #0
 80080c0:	61fb      	str	r3, [r7, #28]
 80080c2:	e004      	b.n	80080ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	2200      	movs	r2, #0
 80080c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080ca:	2301      	movs	r3, #1
 80080cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080ce:	f7fe fad1 	bl	8006674 <vPortExitCritical>

	return xReturn;
 80080d2:	69fb      	ldr	r3, [r7, #28]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3720      	adds	r7, #32
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	24004200 	.word	0x24004200
 80080e0:	24004214 	.word	0x24004214

080080e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080e4:	b480      	push	{r7}
 80080e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080e8:	4b03      	ldr	r3, [pc, #12]	; (80080f8 <vTaskMissedYield+0x14>)
 80080ea:	2201      	movs	r2, #1
 80080ec:	601a      	str	r2, [r3, #0]
}
 80080ee:	bf00      	nop
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	24004210 	.word	0x24004210

080080fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008104:	f000 f852 	bl	80081ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008108:	4b06      	ldr	r3, [pc, #24]	; (8008124 <prvIdleTask+0x28>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d9f9      	bls.n	8008104 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008110:	4b05      	ldr	r3, [pc, #20]	; (8008128 <prvIdleTask+0x2c>)
 8008112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008120:	e7f0      	b.n	8008104 <prvIdleTask+0x8>
 8008122:	bf00      	nop
 8008124:	24004100 	.word	0x24004100
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008132:	2300      	movs	r3, #0
 8008134:	607b      	str	r3, [r7, #4]
 8008136:	e00c      	b.n	8008152 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	4613      	mov	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4a12      	ldr	r2, [pc, #72]	; (800818c <prvInitialiseTaskLists+0x60>)
 8008144:	4413      	add	r3, r2
 8008146:	4618      	mov	r0, r3
 8008148:	f7fe f880 	bl	800624c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3301      	adds	r3, #1
 8008150:	607b      	str	r3, [r7, #4]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b06      	cmp	r3, #6
 8008156:	d9ef      	bls.n	8008138 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008158:	480d      	ldr	r0, [pc, #52]	; (8008190 <prvInitialiseTaskLists+0x64>)
 800815a:	f7fe f877 	bl	800624c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800815e:	480d      	ldr	r0, [pc, #52]	; (8008194 <prvInitialiseTaskLists+0x68>)
 8008160:	f7fe f874 	bl	800624c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008164:	480c      	ldr	r0, [pc, #48]	; (8008198 <prvInitialiseTaskLists+0x6c>)
 8008166:	f7fe f871 	bl	800624c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800816a:	480c      	ldr	r0, [pc, #48]	; (800819c <prvInitialiseTaskLists+0x70>)
 800816c:	f7fe f86e 	bl	800624c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008170:	480b      	ldr	r0, [pc, #44]	; (80081a0 <prvInitialiseTaskLists+0x74>)
 8008172:	f7fe f86b 	bl	800624c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008176:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <prvInitialiseTaskLists+0x78>)
 8008178:	4a05      	ldr	r2, [pc, #20]	; (8008190 <prvInitialiseTaskLists+0x64>)
 800817a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800817c:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <prvInitialiseTaskLists+0x7c>)
 800817e:	4a05      	ldr	r2, [pc, #20]	; (8008194 <prvInitialiseTaskLists+0x68>)
 8008180:	601a      	str	r2, [r3, #0]
}
 8008182:	bf00      	nop
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	24004100 	.word	0x24004100
 8008190:	2400418c 	.word	0x2400418c
 8008194:	240041a0 	.word	0x240041a0
 8008198:	240041bc 	.word	0x240041bc
 800819c:	240041d0 	.word	0x240041d0
 80081a0:	240041e8 	.word	0x240041e8
 80081a4:	240041b4 	.word	0x240041b4
 80081a8:	240041b8 	.word	0x240041b8

080081ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081b2:	e019      	b.n	80081e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081b4:	f7fe fa2e 	bl	8006614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b8:	4b10      	ldr	r3, [pc, #64]	; (80081fc <prvCheckTasksWaitingTermination+0x50>)
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fe f8cb 	bl	8006360 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081ca:	4b0d      	ldr	r3, [pc, #52]	; (8008200 <prvCheckTasksWaitingTermination+0x54>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3b01      	subs	r3, #1
 80081d0:	4a0b      	ldr	r2, [pc, #44]	; (8008200 <prvCheckTasksWaitingTermination+0x54>)
 80081d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081d4:	4b0b      	ldr	r3, [pc, #44]	; (8008204 <prvCheckTasksWaitingTermination+0x58>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3b01      	subs	r3, #1
 80081da:	4a0a      	ldr	r2, [pc, #40]	; (8008204 <prvCheckTasksWaitingTermination+0x58>)
 80081dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081de:	f7fe fa49 	bl	8006674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f810 	bl	8008208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081e8:	4b06      	ldr	r3, [pc, #24]	; (8008204 <prvCheckTasksWaitingTermination+0x58>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1e1      	bne.n	80081b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	240041d0 	.word	0x240041d0
 8008200:	240041fc 	.word	0x240041fc
 8008204:	240041e4 	.word	0x240041e4

08008208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008216:	2b00      	cmp	r3, #0
 8008218:	d108      	bne.n	800822c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821e:	4618      	mov	r0, r3
 8008220:	f7fd fef6 	bl	8006010 <vPortFree>
				vPortFree( pxTCB );
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7fd fef3 	bl	8006010 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800822a:	e018      	b.n	800825e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008232:	2b01      	cmp	r3, #1
 8008234:	d103      	bne.n	800823e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7fd feea 	bl	8006010 <vPortFree>
	}
 800823c:	e00f      	b.n	800825e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008244:	2b02      	cmp	r3, #2
 8008246:	d00a      	beq.n	800825e <prvDeleteTCB+0x56>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	60fb      	str	r3, [r7, #12]
}
 800825a:	bf00      	nop
 800825c:	e7fe      	b.n	800825c <prvDeleteTCB+0x54>
	}
 800825e:	bf00      	nop
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800826e:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <prvResetNextTaskUnblockTime+0x38>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d104      	bne.n	8008282 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008278:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <prvResetNextTaskUnblockTime+0x3c>)
 800827a:	f04f 32ff 	mov.w	r2, #4294967295
 800827e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008280:	e008      	b.n	8008294 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008282:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <prvResetNextTaskUnblockTime+0x38>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	4a04      	ldr	r2, [pc, #16]	; (80082a4 <prvResetNextTaskUnblockTime+0x3c>)
 8008292:	6013      	str	r3, [r2, #0]
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	240041b4 	.word	0x240041b4
 80082a4:	2400421c 	.word	0x2400421c

080082a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082ae:	4b0b      	ldr	r3, [pc, #44]	; (80082dc <xTaskGetSchedulerState+0x34>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d102      	bne.n	80082bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082b6:	2301      	movs	r3, #1
 80082b8:	607b      	str	r3, [r7, #4]
 80082ba:	e008      	b.n	80082ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082bc:	4b08      	ldr	r3, [pc, #32]	; (80082e0 <xTaskGetSchedulerState+0x38>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d102      	bne.n	80082ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082c4:	2302      	movs	r3, #2
 80082c6:	607b      	str	r3, [r7, #4]
 80082c8:	e001      	b.n	80082ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082ca:	2300      	movs	r3, #0
 80082cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082ce:	687b      	ldr	r3, [r7, #4]
	}
 80082d0:	4618      	mov	r0, r3
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	24004208 	.word	0x24004208
 80082e0:	24004224 	.word	0x24004224

080082e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d05e      	beq.n	80083b8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fe:	4b31      	ldr	r3, [pc, #196]	; (80083c4 <xTaskPriorityInherit+0xe0>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	429a      	cmp	r2, r3
 8008306:	d24e      	bcs.n	80083a6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	2b00      	cmp	r3, #0
 800830e:	db06      	blt.n	800831e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008310:	4b2c      	ldr	r3, [pc, #176]	; (80083c4 <xTaskPriorityInherit+0xe0>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008316:	f1c3 0207 	rsb	r2, r3, #7
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	6959      	ldr	r1, [r3, #20]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008326:	4613      	mov	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4a26      	ldr	r2, [pc, #152]	; (80083c8 <xTaskPriorityInherit+0xe4>)
 8008330:	4413      	add	r3, r2
 8008332:	4299      	cmp	r1, r3
 8008334:	d12f      	bne.n	8008396 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	3304      	adds	r3, #4
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe f810 	bl	8006360 <uxListRemove>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10a      	bne.n	800835c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834a:	2201      	movs	r2, #1
 800834c:	fa02 f303 	lsl.w	r3, r2, r3
 8008350:	43da      	mvns	r2, r3
 8008352:	4b1e      	ldr	r3, [pc, #120]	; (80083cc <xTaskPriorityInherit+0xe8>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4013      	ands	r3, r2
 8008358:	4a1c      	ldr	r2, [pc, #112]	; (80083cc <xTaskPriorityInherit+0xe8>)
 800835a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800835c:	4b19      	ldr	r3, [pc, #100]	; (80083c4 <xTaskPriorityInherit+0xe0>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836a:	2201      	movs	r2, #1
 800836c:	409a      	lsls	r2, r3
 800836e:	4b17      	ldr	r3, [pc, #92]	; (80083cc <xTaskPriorityInherit+0xe8>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4313      	orrs	r3, r2
 8008374:	4a15      	ldr	r2, [pc, #84]	; (80083cc <xTaskPriorityInherit+0xe8>)
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837c:	4613      	mov	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4a10      	ldr	r2, [pc, #64]	; (80083c8 <xTaskPriorityInherit+0xe4>)
 8008386:	441a      	add	r2, r3
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	3304      	adds	r3, #4
 800838c:	4619      	mov	r1, r3
 800838e:	4610      	mov	r0, r2
 8008390:	f7fd ff89 	bl	80062a6 <vListInsertEnd>
 8008394:	e004      	b.n	80083a0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008396:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <xTaskPriorityInherit+0xe0>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80083a0:	2301      	movs	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]
 80083a4:	e008      	b.n	80083b8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083aa:	4b06      	ldr	r3, [pc, #24]	; (80083c4 <xTaskPriorityInherit+0xe0>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d201      	bcs.n	80083b8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80083b4:	2301      	movs	r3, #1
 80083b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083b8:	68fb      	ldr	r3, [r7, #12]
	}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	240040fc 	.word	0x240040fc
 80083c8:	24004100 	.word	0x24004100
 80083cc:	24004204 	.word	0x24004204

080083d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80083dc:	2300      	movs	r3, #0
 80083de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d06e      	beq.n	80084c4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80083e6:	4b3a      	ldr	r3, [pc, #232]	; (80084d0 <xTaskPriorityDisinherit+0x100>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d00a      	beq.n	8008406 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	60fb      	str	r3, [r7, #12]
}
 8008402:	bf00      	nop
 8008404:	e7fe      	b.n	8008404 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10a      	bne.n	8008424 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	60bb      	str	r3, [r7, #8]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008428:	1e5a      	subs	r2, r3, #1
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008436:	429a      	cmp	r2, r3
 8008438:	d044      	beq.n	80084c4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800843e:	2b00      	cmp	r3, #0
 8008440:	d140      	bne.n	80084c4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	3304      	adds	r3, #4
 8008446:	4618      	mov	r0, r3
 8008448:	f7fd ff8a 	bl	8006360 <uxListRemove>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d115      	bne.n	800847e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008456:	491f      	ldr	r1, [pc, #124]	; (80084d4 <xTaskPriorityDisinherit+0x104>)
 8008458:	4613      	mov	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	440b      	add	r3, r1
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <xTaskPriorityDisinherit+0xae>
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846c:	2201      	movs	r2, #1
 800846e:	fa02 f303 	lsl.w	r3, r2, r3
 8008472:	43da      	mvns	r2, r3
 8008474:	4b18      	ldr	r3, [pc, #96]	; (80084d8 <xTaskPriorityDisinherit+0x108>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4013      	ands	r3, r2
 800847a:	4a17      	ldr	r2, [pc, #92]	; (80084d8 <xTaskPriorityDisinherit+0x108>)
 800847c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848a:	f1c3 0207 	rsb	r2, r3, #7
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008496:	2201      	movs	r2, #1
 8008498:	409a      	lsls	r2, r3
 800849a:	4b0f      	ldr	r3, [pc, #60]	; (80084d8 <xTaskPriorityDisinherit+0x108>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4313      	orrs	r3, r2
 80084a0:	4a0d      	ldr	r2, [pc, #52]	; (80084d8 <xTaskPriorityDisinherit+0x108>)
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a8:	4613      	mov	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4a08      	ldr	r2, [pc, #32]	; (80084d4 <xTaskPriorityDisinherit+0x104>)
 80084b2:	441a      	add	r2, r3
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	3304      	adds	r3, #4
 80084b8:	4619      	mov	r1, r3
 80084ba:	4610      	mov	r0, r2
 80084bc:	f7fd fef3 	bl	80062a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80084c0:	2301      	movs	r3, #1
 80084c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084c4:	697b      	ldr	r3, [r7, #20]
	}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	240040fc 	.word	0x240040fc
 80084d4:	24004100 	.word	0x24004100
 80084d8:	24004204 	.word	0x24004204

080084dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80084ea:	2301      	movs	r3, #1
 80084ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d077      	beq.n	80085e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10a      	bne.n	8008512 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80084fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	60fb      	str	r3, [r7, #12]
}
 800850e:	bf00      	nop
 8008510:	e7fe      	b.n	8008510 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	429a      	cmp	r2, r3
 800851a:	d902      	bls.n	8008522 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	61fb      	str	r3, [r7, #28]
 8008520:	e002      	b.n	8008528 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008526:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	69fa      	ldr	r2, [r7, #28]
 800852e:	429a      	cmp	r2, r3
 8008530:	d058      	beq.n	80085e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	429a      	cmp	r2, r3
 800853a:	d153      	bne.n	80085e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800853c:	4b2b      	ldr	r3, [pc, #172]	; (80085ec <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	429a      	cmp	r2, r3
 8008544:	d10a      	bne.n	800855c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854a:	f383 8811 	msr	BASEPRI, r3
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	60bb      	str	r3, [r7, #8]
}
 8008558:	bf00      	nop
 800855a:	e7fe      	b.n	800855a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	69fa      	ldr	r2, [r7, #28]
 8008566:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	db04      	blt.n	800857a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	f1c3 0207 	rsb	r2, r3, #7
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	6959      	ldr	r1, [r3, #20]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4a19      	ldr	r2, [pc, #100]	; (80085f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800858a:	4413      	add	r3, r2
 800858c:	4299      	cmp	r1, r3
 800858e:	d129      	bne.n	80085e4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	3304      	adds	r3, #4
 8008594:	4618      	mov	r0, r3
 8008596:	f7fd fee3 	bl	8006360 <uxListRemove>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10a      	bne.n	80085b6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a4:	2201      	movs	r2, #1
 80085a6:	fa02 f303 	lsl.w	r3, r2, r3
 80085aa:	43da      	mvns	r2, r3
 80085ac:	4b11      	ldr	r3, [pc, #68]	; (80085f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4013      	ands	r3, r2
 80085b2:	4a10      	ldr	r2, [pc, #64]	; (80085f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80085b4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ba:	2201      	movs	r2, #1
 80085bc:	409a      	lsls	r2, r3
 80085be:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	4a0b      	ldr	r2, [pc, #44]	; (80085f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80085c6:	6013      	str	r3, [r2, #0]
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085cc:	4613      	mov	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	4a06      	ldr	r2, [pc, #24]	; (80085f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80085d6:	441a      	add	r2, r3
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	3304      	adds	r3, #4
 80085dc:	4619      	mov	r1, r3
 80085de:	4610      	mov	r0, r2
 80085e0:	f7fd fe61 	bl	80062a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085e4:	bf00      	nop
 80085e6:	3720      	adds	r7, #32
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	240040fc 	.word	0x240040fc
 80085f0:	24004100 	.word	0x24004100
 80085f4:	24004204 	.word	0x24004204

080085f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80085fc:	4b07      	ldr	r3, [pc, #28]	; (800861c <pvTaskIncrementMutexHeldCount+0x24>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d004      	beq.n	800860e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008604:	4b05      	ldr	r3, [pc, #20]	; (800861c <pvTaskIncrementMutexHeldCount+0x24>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800860a:	3201      	adds	r2, #1
 800860c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800860e:	4b03      	ldr	r3, [pc, #12]	; (800861c <pvTaskIncrementMutexHeldCount+0x24>)
 8008610:	681b      	ldr	r3, [r3, #0]
	}
 8008612:	4618      	mov	r0, r3
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	240040fc 	.word	0x240040fc

08008620 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800862a:	4b29      	ldr	r3, [pc, #164]	; (80086d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008630:	4b28      	ldr	r3, [pc, #160]	; (80086d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3304      	adds	r3, #4
 8008636:	4618      	mov	r0, r3
 8008638:	f7fd fe92 	bl	8006360 <uxListRemove>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10b      	bne.n	800865a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008642:	4b24      	ldr	r3, [pc, #144]	; (80086d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	2201      	movs	r2, #1
 800864a:	fa02 f303 	lsl.w	r3, r2, r3
 800864e:	43da      	mvns	r2, r3
 8008650:	4b21      	ldr	r3, [pc, #132]	; (80086d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4013      	ands	r3, r2
 8008656:	4a20      	ldr	r2, [pc, #128]	; (80086d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008658:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008660:	d10a      	bne.n	8008678 <prvAddCurrentTaskToDelayedList+0x58>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d007      	beq.n	8008678 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008668:	4b1a      	ldr	r3, [pc, #104]	; (80086d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3304      	adds	r3, #4
 800866e:	4619      	mov	r1, r3
 8008670:	481a      	ldr	r0, [pc, #104]	; (80086dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008672:	f7fd fe18 	bl	80062a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008676:	e026      	b.n	80086c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4413      	add	r3, r2
 800867e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008680:	4b14      	ldr	r3, [pc, #80]	; (80086d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	429a      	cmp	r2, r3
 800868e:	d209      	bcs.n	80086a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008690:	4b13      	ldr	r3, [pc, #76]	; (80086e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	3304      	adds	r3, #4
 800869a:	4619      	mov	r1, r3
 800869c:	4610      	mov	r0, r2
 800869e:	f7fd fe26 	bl	80062ee <vListInsert>
}
 80086a2:	e010      	b.n	80086c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086a4:	4b0f      	ldr	r3, [pc, #60]	; (80086e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3304      	adds	r3, #4
 80086ae:	4619      	mov	r1, r3
 80086b0:	4610      	mov	r0, r2
 80086b2:	f7fd fe1c 	bl	80062ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086b6:	4b0c      	ldr	r3, [pc, #48]	; (80086e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d202      	bcs.n	80086c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80086c0:	4a09      	ldr	r2, [pc, #36]	; (80086e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	6013      	str	r3, [r2, #0]
}
 80086c6:	bf00      	nop
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	24004200 	.word	0x24004200
 80086d4:	240040fc 	.word	0x240040fc
 80086d8:	24004204 	.word	0x24004204
 80086dc:	240041e8 	.word	0x240041e8
 80086e0:	240041b8 	.word	0x240041b8
 80086e4:	240041b4 	.word	0x240041b4
 80086e8:	2400421c 	.word	0x2400421c

080086ec <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80086f6:	88fb      	ldrh	r3, [r7, #6]
 80086f8:	021b      	lsls	r3, r3, #8
 80086fa:	b21a      	sxth	r2, r3
 80086fc:	88fb      	ldrh	r3, [r7, #6]
 80086fe:	0a1b      	lsrs	r3, r3, #8
 8008700:	b29b      	uxth	r3, r3
 8008702:	b21b      	sxth	r3, r3
 8008704:	4313      	orrs	r3, r2
 8008706:	b21b      	sxth	r3, r3
 8008708:	b29b      	uxth	r3, r3
}
 800870a:	4618      	mov	r0, r3
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	061a      	lsls	r2, r3, #24
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	021b      	lsls	r3, r3, #8
 8008726:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800872a:	431a      	orrs	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	0a1b      	lsrs	r3, r3, #8
 8008730:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008734:	431a      	orrs	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	0e1b      	lsrs	r3, r3, #24
 800873a:	4313      	orrs	r3, r2
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8008750:	4915      	ldr	r1, [pc, #84]	; (80087a8 <etharp_free_entry+0x60>)
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	4613      	mov	r3, r2
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	4413      	add	r3, r2
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	440b      	add	r3, r1
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d013      	beq.n	800878c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8008764:	4910      	ldr	r1, [pc, #64]	; (80087a8 <etharp_free_entry+0x60>)
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	4613      	mov	r3, r2
 800876a:	005b      	lsls	r3, r3, #1
 800876c:	4413      	add	r3, r2
 800876e:	00db      	lsls	r3, r3, #3
 8008770:	440b      	add	r3, r1
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4618      	mov	r0, r3
 8008776:	f003 ffef 	bl	800c758 <pbuf_free>
    arp_table[i].q = NULL;
 800877a:	490b      	ldr	r1, [pc, #44]	; (80087a8 <etharp_free_entry+0x60>)
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	4613      	mov	r3, r2
 8008780:	005b      	lsls	r3, r3, #1
 8008782:	4413      	add	r3, r2
 8008784:	00db      	lsls	r3, r3, #3
 8008786:	440b      	add	r3, r1
 8008788:	2200      	movs	r2, #0
 800878a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800878c:	4906      	ldr	r1, [pc, #24]	; (80087a8 <etharp_free_entry+0x60>)
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	4613      	mov	r3, r2
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	4413      	add	r3, r2
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	440b      	add	r3, r1
 800879a:	3314      	adds	r3, #20
 800879c:	2200      	movs	r2, #0
 800879e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	24004228 	.word	0x24004228

080087ac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80087b2:	2300      	movs	r3, #0
 80087b4:	607b      	str	r3, [r7, #4]
 80087b6:	e096      	b.n	80088e6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80087b8:	494f      	ldr	r1, [pc, #316]	; (80088f8 <etharp_tmr+0x14c>)
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	4613      	mov	r3, r2
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	4413      	add	r3, r2
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	440b      	add	r3, r1
 80087c6:	3314      	adds	r3, #20
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80087cc:	78fb      	ldrb	r3, [r7, #3]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 8086 	beq.w	80088e0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80087d4:	4948      	ldr	r1, [pc, #288]	; (80088f8 <etharp_tmr+0x14c>)
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	4613      	mov	r3, r2
 80087da:	005b      	lsls	r3, r3, #1
 80087dc:	4413      	add	r3, r2
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	440b      	add	r3, r1
 80087e2:	3312      	adds	r3, #18
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	3301      	adds	r3, #1
 80087e8:	b298      	uxth	r0, r3
 80087ea:	4943      	ldr	r1, [pc, #268]	; (80088f8 <etharp_tmr+0x14c>)
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	4613      	mov	r3, r2
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	4413      	add	r3, r2
 80087f4:	00db      	lsls	r3, r3, #3
 80087f6:	440b      	add	r3, r1
 80087f8:	3312      	adds	r3, #18
 80087fa:	4602      	mov	r2, r0
 80087fc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80087fe:	493e      	ldr	r1, [pc, #248]	; (80088f8 <etharp_tmr+0x14c>)
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	4613      	mov	r3, r2
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	4413      	add	r3, r2
 8008808:	00db      	lsls	r3, r3, #3
 800880a:	440b      	add	r3, r1
 800880c:	3312      	adds	r3, #18
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008814:	d215      	bcs.n	8008842 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008816:	4938      	ldr	r1, [pc, #224]	; (80088f8 <etharp_tmr+0x14c>)
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	4613      	mov	r3, r2
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	4413      	add	r3, r2
 8008820:	00db      	lsls	r3, r3, #3
 8008822:	440b      	add	r3, r1
 8008824:	3314      	adds	r3, #20
 8008826:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008828:	2b01      	cmp	r3, #1
 800882a:	d10e      	bne.n	800884a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800882c:	4932      	ldr	r1, [pc, #200]	; (80088f8 <etharp_tmr+0x14c>)
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	4613      	mov	r3, r2
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	4413      	add	r3, r2
 8008836:	00db      	lsls	r3, r3, #3
 8008838:	440b      	add	r3, r1
 800883a:	3312      	adds	r3, #18
 800883c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800883e:	2b04      	cmp	r3, #4
 8008840:	d903      	bls.n	800884a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff ff80 	bl	8008748 <etharp_free_entry>
 8008848:	e04a      	b.n	80088e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800884a:	492b      	ldr	r1, [pc, #172]	; (80088f8 <etharp_tmr+0x14c>)
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	4613      	mov	r3, r2
 8008850:	005b      	lsls	r3, r3, #1
 8008852:	4413      	add	r3, r2
 8008854:	00db      	lsls	r3, r3, #3
 8008856:	440b      	add	r3, r1
 8008858:	3314      	adds	r3, #20
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b03      	cmp	r3, #3
 800885e:	d10a      	bne.n	8008876 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8008860:	4925      	ldr	r1, [pc, #148]	; (80088f8 <etharp_tmr+0x14c>)
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	4613      	mov	r3, r2
 8008866:	005b      	lsls	r3, r3, #1
 8008868:	4413      	add	r3, r2
 800886a:	00db      	lsls	r3, r3, #3
 800886c:	440b      	add	r3, r1
 800886e:	3314      	adds	r3, #20
 8008870:	2204      	movs	r2, #4
 8008872:	701a      	strb	r2, [r3, #0]
 8008874:	e034      	b.n	80088e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8008876:	4920      	ldr	r1, [pc, #128]	; (80088f8 <etharp_tmr+0x14c>)
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	4613      	mov	r3, r2
 800887c:	005b      	lsls	r3, r3, #1
 800887e:	4413      	add	r3, r2
 8008880:	00db      	lsls	r3, r3, #3
 8008882:	440b      	add	r3, r1
 8008884:	3314      	adds	r3, #20
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2b04      	cmp	r3, #4
 800888a:	d10a      	bne.n	80088a2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800888c:	491a      	ldr	r1, [pc, #104]	; (80088f8 <etharp_tmr+0x14c>)
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	4613      	mov	r3, r2
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	4413      	add	r3, r2
 8008896:	00db      	lsls	r3, r3, #3
 8008898:	440b      	add	r3, r1
 800889a:	3314      	adds	r3, #20
 800889c:	2202      	movs	r2, #2
 800889e:	701a      	strb	r2, [r3, #0]
 80088a0:	e01e      	b.n	80088e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80088a2:	4915      	ldr	r1, [pc, #84]	; (80088f8 <etharp_tmr+0x14c>)
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	4613      	mov	r3, r2
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	4413      	add	r3, r2
 80088ac:	00db      	lsls	r3, r3, #3
 80088ae:	440b      	add	r3, r1
 80088b0:	3314      	adds	r3, #20
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d113      	bne.n	80088e0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80088b8:	490f      	ldr	r1, [pc, #60]	; (80088f8 <etharp_tmr+0x14c>)
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	4613      	mov	r3, r2
 80088be:	005b      	lsls	r3, r3, #1
 80088c0:	4413      	add	r3, r2
 80088c2:	00db      	lsls	r3, r3, #3
 80088c4:	440b      	add	r3, r1
 80088c6:	3308      	adds	r3, #8
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	4613      	mov	r3, r2
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	4413      	add	r3, r2
 80088d2:	00db      	lsls	r3, r3, #3
 80088d4:	4a08      	ldr	r2, [pc, #32]	; (80088f8 <etharp_tmr+0x14c>)
 80088d6:	4413      	add	r3, r2
 80088d8:	3304      	adds	r3, #4
 80088da:	4619      	mov	r1, r3
 80088dc:	f000 fe6e 	bl	80095bc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3301      	adds	r3, #1
 80088e4:	607b      	str	r3, [r7, #4]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b09      	cmp	r3, #9
 80088ea:	f77f af65 	ble.w	80087b8 <etharp_tmr+0xc>
      }
    }
  }
}
 80088ee:	bf00      	nop
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	24004228 	.word	0x24004228

080088fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08a      	sub	sp, #40	; 0x28
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	460b      	mov	r3, r1
 8008906:	607a      	str	r2, [r7, #4]
 8008908:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800890a:	230a      	movs	r3, #10
 800890c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800890e:	230a      	movs	r3, #10
 8008910:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8008912:	230a      	movs	r3, #10
 8008914:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8008916:	2300      	movs	r3, #0
 8008918:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800891a:	230a      	movs	r3, #10
 800891c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	83bb      	strh	r3, [r7, #28]
 8008922:	2300      	movs	r3, #0
 8008924:	837b      	strh	r3, [r7, #26]
 8008926:	2300      	movs	r3, #0
 8008928:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800892a:	2300      	movs	r3, #0
 800892c:	843b      	strh	r3, [r7, #32]
 800892e:	e0ae      	b.n	8008a8e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8008930:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008934:	49a6      	ldr	r1, [pc, #664]	; (8008bd0 <etharp_find_entry+0x2d4>)
 8008936:	4613      	mov	r3, r2
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	4413      	add	r3, r2
 800893c:	00db      	lsls	r3, r3, #3
 800893e:	440b      	add	r3, r1
 8008940:	3314      	adds	r3, #20
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008946:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800894a:	2b0a      	cmp	r3, #10
 800894c:	d105      	bne.n	800895a <etharp_find_entry+0x5e>
 800894e:	7dfb      	ldrb	r3, [r7, #23]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d102      	bne.n	800895a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8008954:	8c3b      	ldrh	r3, [r7, #32]
 8008956:	847b      	strh	r3, [r7, #34]	; 0x22
 8008958:	e095      	b.n	8008a86 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800895a:	7dfb      	ldrb	r3, [r7, #23]
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 8092 	beq.w	8008a86 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8008962:	7dfb      	ldrb	r3, [r7, #23]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d009      	beq.n	800897c <etharp_find_entry+0x80>
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d806      	bhi.n	800897c <etharp_find_entry+0x80>
 800896e:	4b99      	ldr	r3, [pc, #612]	; (8008bd4 <etharp_find_entry+0x2d8>)
 8008970:	f240 1223 	movw	r2, #291	; 0x123
 8008974:	4998      	ldr	r1, [pc, #608]	; (8008bd8 <etharp_find_entry+0x2dc>)
 8008976:	4899      	ldr	r0, [pc, #612]	; (8008bdc <etharp_find_entry+0x2e0>)
 8008978:	f00b f82c 	bl	80139d4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d020      	beq.n	80089c4 <etharp_find_entry+0xc8>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6819      	ldr	r1, [r3, #0]
 8008986:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800898a:	4891      	ldr	r0, [pc, #580]	; (8008bd0 <etharp_find_entry+0x2d4>)
 800898c:	4613      	mov	r3, r2
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	4413      	add	r3, r2
 8008992:	00db      	lsls	r3, r3, #3
 8008994:	4403      	add	r3, r0
 8008996:	3304      	adds	r3, #4
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4299      	cmp	r1, r3
 800899c:	d112      	bne.n	80089c4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00c      	beq.n	80089be <etharp_find_entry+0xc2>
 80089a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80089a8:	4989      	ldr	r1, [pc, #548]	; (8008bd0 <etharp_find_entry+0x2d4>)
 80089aa:	4613      	mov	r3, r2
 80089ac:	005b      	lsls	r3, r3, #1
 80089ae:	4413      	add	r3, r2
 80089b0:	00db      	lsls	r3, r3, #3
 80089b2:	440b      	add	r3, r1
 80089b4:	3308      	adds	r3, #8
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d102      	bne.n	80089c4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80089be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80089c2:	e100      	b.n	8008bc6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d140      	bne.n	8008a4c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80089ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80089ce:	4980      	ldr	r1, [pc, #512]	; (8008bd0 <etharp_find_entry+0x2d4>)
 80089d0:	4613      	mov	r3, r2
 80089d2:	005b      	lsls	r3, r3, #1
 80089d4:	4413      	add	r3, r2
 80089d6:	00db      	lsls	r3, r3, #3
 80089d8:	440b      	add	r3, r1
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01a      	beq.n	8008a16 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80089e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80089e4:	497a      	ldr	r1, [pc, #488]	; (8008bd0 <etharp_find_entry+0x2d4>)
 80089e6:	4613      	mov	r3, r2
 80089e8:	005b      	lsls	r3, r3, #1
 80089ea:	4413      	add	r3, r2
 80089ec:	00db      	lsls	r3, r3, #3
 80089ee:	440b      	add	r3, r1
 80089f0:	3312      	adds	r3, #18
 80089f2:	881b      	ldrh	r3, [r3, #0]
 80089f4:	8bba      	ldrh	r2, [r7, #28]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d845      	bhi.n	8008a86 <etharp_find_entry+0x18a>
            old_queue = i;
 80089fa:	8c3b      	ldrh	r3, [r7, #32]
 80089fc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80089fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008a02:	4973      	ldr	r1, [pc, #460]	; (8008bd0 <etharp_find_entry+0x2d4>)
 8008a04:	4613      	mov	r3, r2
 8008a06:	005b      	lsls	r3, r3, #1
 8008a08:	4413      	add	r3, r2
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	440b      	add	r3, r1
 8008a0e:	3312      	adds	r3, #18
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	83bb      	strh	r3, [r7, #28]
 8008a14:	e037      	b.n	8008a86 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8008a16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008a1a:	496d      	ldr	r1, [pc, #436]	; (8008bd0 <etharp_find_entry+0x2d4>)
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	005b      	lsls	r3, r3, #1
 8008a20:	4413      	add	r3, r2
 8008a22:	00db      	lsls	r3, r3, #3
 8008a24:	440b      	add	r3, r1
 8008a26:	3312      	adds	r3, #18
 8008a28:	881b      	ldrh	r3, [r3, #0]
 8008a2a:	8b7a      	ldrh	r2, [r7, #26]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d82a      	bhi.n	8008a86 <etharp_find_entry+0x18a>
            old_pending = i;
 8008a30:	8c3b      	ldrh	r3, [r7, #32]
 8008a32:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8008a34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008a38:	4965      	ldr	r1, [pc, #404]	; (8008bd0 <etharp_find_entry+0x2d4>)
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	005b      	lsls	r3, r3, #1
 8008a3e:	4413      	add	r3, r2
 8008a40:	00db      	lsls	r3, r3, #3
 8008a42:	440b      	add	r3, r1
 8008a44:	3312      	adds	r3, #18
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	837b      	strh	r3, [r7, #26]
 8008a4a:	e01c      	b.n	8008a86 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8008a4c:	7dfb      	ldrb	r3, [r7, #23]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d919      	bls.n	8008a86 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8008a52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008a56:	495e      	ldr	r1, [pc, #376]	; (8008bd0 <etharp_find_entry+0x2d4>)
 8008a58:	4613      	mov	r3, r2
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	4413      	add	r3, r2
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	440b      	add	r3, r1
 8008a62:	3312      	adds	r3, #18
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	8b3a      	ldrh	r2, [r7, #24]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d80c      	bhi.n	8008a86 <etharp_find_entry+0x18a>
            old_stable = i;
 8008a6c:	8c3b      	ldrh	r3, [r7, #32]
 8008a6e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8008a70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008a74:	4956      	ldr	r1, [pc, #344]	; (8008bd0 <etharp_find_entry+0x2d4>)
 8008a76:	4613      	mov	r3, r2
 8008a78:	005b      	lsls	r3, r3, #1
 8008a7a:	4413      	add	r3, r2
 8008a7c:	00db      	lsls	r3, r3, #3
 8008a7e:	440b      	add	r3, r1
 8008a80:	3312      	adds	r3, #18
 8008a82:	881b      	ldrh	r3, [r3, #0]
 8008a84:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008a86:	8c3b      	ldrh	r3, [r7, #32]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	843b      	strh	r3, [r7, #32]
 8008a8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008a92:	2b09      	cmp	r3, #9
 8008a94:	f77f af4c 	ble.w	8008930 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8008a98:	7afb      	ldrb	r3, [r7, #11]
 8008a9a:	f003 0302 	and.w	r3, r3, #2
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d108      	bne.n	8008ab4 <etharp_find_entry+0x1b8>
 8008aa2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008aa6:	2b0a      	cmp	r3, #10
 8008aa8:	d107      	bne.n	8008aba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8008aaa:	7afb      	ldrb	r3, [r7, #11]
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d102      	bne.n	8008aba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8008ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab8:	e085      	b.n	8008bc6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8008aba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008abe:	2b09      	cmp	r3, #9
 8008ac0:	dc02      	bgt.n	8008ac8 <etharp_find_entry+0x1cc>
    i = empty;
 8008ac2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008ac4:	843b      	strh	r3, [r7, #32]
 8008ac6:	e039      	b.n	8008b3c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8008ac8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008acc:	2b09      	cmp	r3, #9
 8008ace:	dc14      	bgt.n	8008afa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8008ad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ad2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8008ad4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008ad8:	493d      	ldr	r1, [pc, #244]	; (8008bd0 <etharp_find_entry+0x2d4>)
 8008ada:	4613      	mov	r3, r2
 8008adc:	005b      	lsls	r3, r3, #1
 8008ade:	4413      	add	r3, r2
 8008ae0:	00db      	lsls	r3, r3, #3
 8008ae2:	440b      	add	r3, r1
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d018      	beq.n	8008b1c <etharp_find_entry+0x220>
 8008aea:	4b3a      	ldr	r3, [pc, #232]	; (8008bd4 <etharp_find_entry+0x2d8>)
 8008aec:	f240 126d 	movw	r2, #365	; 0x16d
 8008af0:	493b      	ldr	r1, [pc, #236]	; (8008be0 <etharp_find_entry+0x2e4>)
 8008af2:	483a      	ldr	r0, [pc, #232]	; (8008bdc <etharp_find_entry+0x2e0>)
 8008af4:	f00a ff6e 	bl	80139d4 <iprintf>
 8008af8:	e010      	b.n	8008b1c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8008afa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008afe:	2b09      	cmp	r3, #9
 8008b00:	dc02      	bgt.n	8008b08 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8008b02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b04:	843b      	strh	r3, [r7, #32]
 8008b06:	e009      	b.n	8008b1c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8008b08:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008b0c:	2b09      	cmp	r3, #9
 8008b0e:	dc02      	bgt.n	8008b16 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8008b10:	8bfb      	ldrh	r3, [r7, #30]
 8008b12:	843b      	strh	r3, [r7, #32]
 8008b14:	e002      	b.n	8008b1c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8008b16:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1a:	e054      	b.n	8008bc6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8008b1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008b20:	2b09      	cmp	r3, #9
 8008b22:	dd06      	ble.n	8008b32 <etharp_find_entry+0x236>
 8008b24:	4b2b      	ldr	r3, [pc, #172]	; (8008bd4 <etharp_find_entry+0x2d8>)
 8008b26:	f240 127f 	movw	r2, #383	; 0x17f
 8008b2a:	492e      	ldr	r1, [pc, #184]	; (8008be4 <etharp_find_entry+0x2e8>)
 8008b2c:	482b      	ldr	r0, [pc, #172]	; (8008bdc <etharp_find_entry+0x2e0>)
 8008b2e:	f00a ff51 	bl	80139d4 <iprintf>
    etharp_free_entry(i);
 8008b32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff fe06 	bl	8008748 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8008b3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008b40:	2b09      	cmp	r3, #9
 8008b42:	dd06      	ble.n	8008b52 <etharp_find_entry+0x256>
 8008b44:	4b23      	ldr	r3, [pc, #140]	; (8008bd4 <etharp_find_entry+0x2d8>)
 8008b46:	f240 1283 	movw	r2, #387	; 0x183
 8008b4a:	4926      	ldr	r1, [pc, #152]	; (8008be4 <etharp_find_entry+0x2e8>)
 8008b4c:	4823      	ldr	r0, [pc, #140]	; (8008bdc <etharp_find_entry+0x2e0>)
 8008b4e:	f00a ff41 	bl	80139d4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8008b52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008b56:	491e      	ldr	r1, [pc, #120]	; (8008bd0 <etharp_find_entry+0x2d4>)
 8008b58:	4613      	mov	r3, r2
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	4413      	add	r3, r2
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	440b      	add	r3, r1
 8008b62:	3314      	adds	r3, #20
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d006      	beq.n	8008b78 <etharp_find_entry+0x27c>
 8008b6a:	4b1a      	ldr	r3, [pc, #104]	; (8008bd4 <etharp_find_entry+0x2d8>)
 8008b6c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8008b70:	491d      	ldr	r1, [pc, #116]	; (8008be8 <etharp_find_entry+0x2ec>)
 8008b72:	481a      	ldr	r0, [pc, #104]	; (8008bdc <etharp_find_entry+0x2e0>)
 8008b74:	f00a ff2e 	bl	80139d4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00b      	beq.n	8008b96 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8008b7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6819      	ldr	r1, [r3, #0]
 8008b86:	4812      	ldr	r0, [pc, #72]	; (8008bd0 <etharp_find_entry+0x2d4>)
 8008b88:	4613      	mov	r3, r2
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	4413      	add	r3, r2
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	4403      	add	r3, r0
 8008b92:	3304      	adds	r3, #4
 8008b94:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8008b96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008b9a:	490d      	ldr	r1, [pc, #52]	; (8008bd0 <etharp_find_entry+0x2d4>)
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	4413      	add	r3, r2
 8008ba2:	00db      	lsls	r3, r3, #3
 8008ba4:	440b      	add	r3, r1
 8008ba6:	3312      	adds	r3, #18
 8008ba8:	2200      	movs	r2, #0
 8008baa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8008bac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008bb0:	4907      	ldr	r1, [pc, #28]	; (8008bd0 <etharp_find_entry+0x2d4>)
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	4413      	add	r3, r2
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	440b      	add	r3, r1
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8008bc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3728      	adds	r7, #40	; 0x28
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	24004228 	.word	0x24004228
 8008bd4:	08014f3c 	.word	0x08014f3c
 8008bd8:	08014fb0 	.word	0x08014fb0
 8008bdc:	08014ff0 	.word	0x08014ff0
 8008be0:	08015018 	.word	0x08015018
 8008be4:	08015030 	.word	0x08015030
 8008be8:	08015044 	.word	0x08015044

08008bec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b088      	sub	sp, #32
 8008bf0:	af02      	add	r7, sp, #8
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
 8008bf8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c00:	2b06      	cmp	r3, #6
 8008c02:	d006      	beq.n	8008c12 <etharp_update_arp_entry+0x26>
 8008c04:	4b48      	ldr	r3, [pc, #288]	; (8008d28 <etharp_update_arp_entry+0x13c>)
 8008c06:	f240 12a9 	movw	r2, #425	; 0x1a9
 8008c0a:	4948      	ldr	r1, [pc, #288]	; (8008d2c <etharp_update_arp_entry+0x140>)
 8008c0c:	4848      	ldr	r0, [pc, #288]	; (8008d30 <etharp_update_arp_entry+0x144>)
 8008c0e:	f00a fee1 	bl	80139d4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d012      	beq.n	8008c3e <etharp_update_arp_entry+0x52>
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00e      	beq.n	8008c3e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68f9      	ldr	r1, [r7, #12]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f001 face 	bl	800a1c8 <ip4_addr_isbroadcast_u32>
 8008c2c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d105      	bne.n	8008c3e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008c3a:	2be0      	cmp	r3, #224	; 0xe0
 8008c3c:	d102      	bne.n	8008c44 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8008c3e:	f06f 030f 	mvn.w	r3, #15
 8008c42:	e06c      	b.n	8008d1e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8008c44:	78fb      	ldrb	r3, [r7, #3]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	68b8      	ldr	r0, [r7, #8]
 8008c4c:	f7ff fe56 	bl	80088fc <etharp_find_entry>
 8008c50:	4603      	mov	r3, r0
 8008c52:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8008c54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	da02      	bge.n	8008c62 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8008c5c:	8afb      	ldrh	r3, [r7, #22]
 8008c5e:	b25b      	sxtb	r3, r3
 8008c60:	e05d      	b.n	8008d1e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8008c62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008c66:	4933      	ldr	r1, [pc, #204]	; (8008d34 <etharp_update_arp_entry+0x148>)
 8008c68:	4613      	mov	r3, r2
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	4413      	add	r3, r2
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	440b      	add	r3, r1
 8008c72:	3314      	adds	r3, #20
 8008c74:	2202      	movs	r2, #2
 8008c76:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8008c78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008c7c:	492d      	ldr	r1, [pc, #180]	; (8008d34 <etharp_update_arp_entry+0x148>)
 8008c7e:	4613      	mov	r3, r2
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	4413      	add	r3, r2
 8008c84:	00db      	lsls	r3, r3, #3
 8008c86:	440b      	add	r3, r1
 8008c88:	3308      	adds	r3, #8
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8008c8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008c92:	4613      	mov	r3, r2
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	4413      	add	r3, r2
 8008c98:	00db      	lsls	r3, r3, #3
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	4a25      	ldr	r2, [pc, #148]	; (8008d34 <etharp_update_arp_entry+0x148>)
 8008c9e:	4413      	add	r3, r2
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	2206      	movs	r2, #6
 8008ca4:	6879      	ldr	r1, [r7, #4]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f00a fe64 	bl	8013974 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8008cac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008cb0:	4920      	ldr	r1, [pc, #128]	; (8008d34 <etharp_update_arp_entry+0x148>)
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	005b      	lsls	r3, r3, #1
 8008cb6:	4413      	add	r3, r2
 8008cb8:	00db      	lsls	r3, r3, #3
 8008cba:	440b      	add	r3, r1
 8008cbc:	3312      	adds	r3, #18
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8008cc2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008cc6:	491b      	ldr	r1, [pc, #108]	; (8008d34 <etharp_update_arp_entry+0x148>)
 8008cc8:	4613      	mov	r3, r2
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	4413      	add	r3, r2
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	440b      	add	r3, r1
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d021      	beq.n	8008d1c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8008cd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008cdc:	4915      	ldr	r1, [pc, #84]	; (8008d34 <etharp_update_arp_entry+0x148>)
 8008cde:	4613      	mov	r3, r2
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	4413      	add	r3, r2
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	440b      	add	r3, r1
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8008cec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008cf0:	4910      	ldr	r1, [pc, #64]	; (8008d34 <etharp_update_arp_entry+0x148>)
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	4413      	add	r3, r2
 8008cf8:	00db      	lsls	r3, r3, #3
 8008cfa:	440b      	add	r3, r1
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8008d06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d0a:	9300      	str	r3, [sp, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6939      	ldr	r1, [r7, #16]
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 fcf3 	bl	80096fc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8008d16:	6938      	ldr	r0, [r7, #16]
 8008d18:	f003 fd1e 	bl	800c758 <pbuf_free>
  }
  return ERR_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3718      	adds	r7, #24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	08014f3c 	.word	0x08014f3c
 8008d2c:	08015070 	.word	0x08015070
 8008d30:	08014ff0 	.word	0x08014ff0
 8008d34:	24004228 	.word	0x24004228

08008d38 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008d40:	2300      	movs	r3, #0
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	e01e      	b.n	8008d84 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8008d46:	4913      	ldr	r1, [pc, #76]	; (8008d94 <etharp_cleanup_netif+0x5c>)
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	4413      	add	r3, r2
 8008d50:	00db      	lsls	r3, r3, #3
 8008d52:	440b      	add	r3, r1
 8008d54:	3314      	adds	r3, #20
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8008d5a:	7afb      	ldrb	r3, [r7, #11]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00e      	beq.n	8008d7e <etharp_cleanup_netif+0x46>
 8008d60:	490c      	ldr	r1, [pc, #48]	; (8008d94 <etharp_cleanup_netif+0x5c>)
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	4613      	mov	r3, r2
 8008d66:	005b      	lsls	r3, r3, #1
 8008d68:	4413      	add	r3, r2
 8008d6a:	00db      	lsls	r3, r3, #3
 8008d6c:	440b      	add	r3, r1
 8008d6e:	3308      	adds	r3, #8
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d102      	bne.n	8008d7e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f7ff fce5 	bl	8008748 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3301      	adds	r3, #1
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b09      	cmp	r3, #9
 8008d88:	dddd      	ble.n	8008d46 <etharp_cleanup_netif+0xe>
    }
  }
}
 8008d8a:	bf00      	nop
 8008d8c:	bf00      	nop
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	24004228 	.word	0x24004228

08008d98 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8008d98:	b5b0      	push	{r4, r5, r7, lr}
 8008d9a:	b08a      	sub	sp, #40	; 0x28
 8008d9c:	af04      	add	r7, sp, #16
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d107      	bne.n	8008db8 <etharp_input+0x20>
 8008da8:	4b3d      	ldr	r3, [pc, #244]	; (8008ea0 <etharp_input+0x108>)
 8008daa:	f240 228a 	movw	r2, #650	; 0x28a
 8008dae:	493d      	ldr	r1, [pc, #244]	; (8008ea4 <etharp_input+0x10c>)
 8008db0:	483d      	ldr	r0, [pc, #244]	; (8008ea8 <etharp_input+0x110>)
 8008db2:	f00a fe0f 	bl	80139d4 <iprintf>
 8008db6:	e06f      	b.n	8008e98 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dc8:	d10c      	bne.n	8008de4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008dce:	2b06      	cmp	r3, #6
 8008dd0:	d108      	bne.n	8008de4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008dd6:	2b04      	cmp	r3, #4
 8008dd8:	d104      	bne.n	8008de4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	885b      	ldrh	r3, [r3, #2]
 8008dde:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	d003      	beq.n	8008dec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f003 fcb7 	bl	800c758 <pbuf_free>
    return;
 8008dea:	e055      	b.n	8008e98 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	330e      	adds	r3, #14
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	3318      	adds	r3, #24
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	3304      	adds	r3, #4
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d102      	bne.n	8008e0c <etharp_input+0x74>
    for_us = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	75fb      	strb	r3, [r7, #23]
 8008e0a:	e009      	b.n	8008e20 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8008e0c:	68ba      	ldr	r2, [r7, #8]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	3304      	adds	r3, #4
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	bf0c      	ite	eq
 8008e18:	2301      	moveq	r3, #1
 8008e1a:	2300      	movne	r3, #0
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f103 0208 	add.w	r2, r3, #8
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d001      	beq.n	8008e30 <etharp_input+0x98>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e000      	b.n	8008e32 <etharp_input+0x9a>
 8008e30:	2302      	movs	r3, #2
 8008e32:	f107 010c 	add.w	r1, r7, #12
 8008e36:	6838      	ldr	r0, [r7, #0]
 8008e38:	f7ff fed8 	bl	8008bec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	88db      	ldrh	r3, [r3, #6]
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e46:	d003      	beq.n	8008e50 <etharp_input+0xb8>
 8008e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e4c:	d01e      	beq.n	8008e8c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8008e4e:	e020      	b.n	8008e92 <etharp_input+0xfa>
      if (for_us) {
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d01c      	beq.n	8008e90 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8008e70:	2102      	movs	r1, #2
 8008e72:	9103      	str	r1, [sp, #12]
 8008e74:	f107 010c 	add.w	r1, r7, #12
 8008e78:	9102      	str	r1, [sp, #8]
 8008e7a:	9201      	str	r2, [sp, #4]
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	462b      	mov	r3, r5
 8008e80:	4622      	mov	r2, r4
 8008e82:	4601      	mov	r1, r0
 8008e84:	6838      	ldr	r0, [r7, #0]
 8008e86:	f000 faeb 	bl	8009460 <etharp_raw>
      break;
 8008e8a:	e001      	b.n	8008e90 <etharp_input+0xf8>
      break;
 8008e8c:	bf00      	nop
 8008e8e:	e000      	b.n	8008e92 <etharp_input+0xfa>
      break;
 8008e90:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f003 fc60 	bl	800c758 <pbuf_free>
}
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	08014f3c 	.word	0x08014f3c
 8008ea4:	080150c8 	.word	0x080150c8
 8008ea8:	08014ff0 	.word	0x08014ff0

08008eac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af02      	add	r7, sp, #8
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008eba:	79fa      	ldrb	r2, [r7, #7]
 8008ebc:	4944      	ldr	r1, [pc, #272]	; (8008fd0 <etharp_output_to_arp_index+0x124>)
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	4413      	add	r3, r2
 8008ec4:	00db      	lsls	r3, r3, #3
 8008ec6:	440b      	add	r3, r1
 8008ec8:	3314      	adds	r3, #20
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d806      	bhi.n	8008ede <etharp_output_to_arp_index+0x32>
 8008ed0:	4b40      	ldr	r3, [pc, #256]	; (8008fd4 <etharp_output_to_arp_index+0x128>)
 8008ed2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008ed6:	4940      	ldr	r1, [pc, #256]	; (8008fd8 <etharp_output_to_arp_index+0x12c>)
 8008ed8:	4840      	ldr	r0, [pc, #256]	; (8008fdc <etharp_output_to_arp_index+0x130>)
 8008eda:	f00a fd7b 	bl	80139d4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008ede:	79fa      	ldrb	r2, [r7, #7]
 8008ee0:	493b      	ldr	r1, [pc, #236]	; (8008fd0 <etharp_output_to_arp_index+0x124>)
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	005b      	lsls	r3, r3, #1
 8008ee6:	4413      	add	r3, r2
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	440b      	add	r3, r1
 8008eec:	3314      	adds	r3, #20
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d153      	bne.n	8008f9c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8008ef4:	79fa      	ldrb	r2, [r7, #7]
 8008ef6:	4936      	ldr	r1, [pc, #216]	; (8008fd0 <etharp_output_to_arp_index+0x124>)
 8008ef8:	4613      	mov	r3, r2
 8008efa:	005b      	lsls	r3, r3, #1
 8008efc:	4413      	add	r3, r2
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	440b      	add	r3, r1
 8008f02:	3312      	adds	r3, #18
 8008f04:	881b      	ldrh	r3, [r3, #0]
 8008f06:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8008f0a:	d919      	bls.n	8008f40 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8008f0c:	79fa      	ldrb	r2, [r7, #7]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	4413      	add	r3, r2
 8008f14:	00db      	lsls	r3, r3, #3
 8008f16:	4a2e      	ldr	r2, [pc, #184]	; (8008fd0 <etharp_output_to_arp_index+0x124>)
 8008f18:	4413      	add	r3, r2
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 fb4c 	bl	80095bc <etharp_request>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d138      	bne.n	8008f9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008f2a:	79fa      	ldrb	r2, [r7, #7]
 8008f2c:	4928      	ldr	r1, [pc, #160]	; (8008fd0 <etharp_output_to_arp_index+0x124>)
 8008f2e:	4613      	mov	r3, r2
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	4413      	add	r3, r2
 8008f34:	00db      	lsls	r3, r3, #3
 8008f36:	440b      	add	r3, r1
 8008f38:	3314      	adds	r3, #20
 8008f3a:	2203      	movs	r2, #3
 8008f3c:	701a      	strb	r2, [r3, #0]
 8008f3e:	e02d      	b.n	8008f9c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8008f40:	79fa      	ldrb	r2, [r7, #7]
 8008f42:	4923      	ldr	r1, [pc, #140]	; (8008fd0 <etharp_output_to_arp_index+0x124>)
 8008f44:	4613      	mov	r3, r2
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	4413      	add	r3, r2
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	440b      	add	r3, r1
 8008f4e:	3312      	adds	r3, #18
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008f56:	d321      	bcc.n	8008f9c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008f58:	79fa      	ldrb	r2, [r7, #7]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	4413      	add	r3, r2
 8008f60:	00db      	lsls	r3, r3, #3
 8008f62:	4a1b      	ldr	r2, [pc, #108]	; (8008fd0 <etharp_output_to_arp_index+0x124>)
 8008f64:	4413      	add	r3, r2
 8008f66:	1d19      	adds	r1, r3, #4
 8008f68:	79fa      	ldrb	r2, [r7, #7]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	005b      	lsls	r3, r3, #1
 8008f6e:	4413      	add	r3, r2
 8008f70:	00db      	lsls	r3, r3, #3
 8008f72:	3308      	adds	r3, #8
 8008f74:	4a16      	ldr	r2, [pc, #88]	; (8008fd0 <etharp_output_to_arp_index+0x124>)
 8008f76:	4413      	add	r3, r2
 8008f78:	3304      	adds	r3, #4
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 fafb 	bl	8009578 <etharp_request_dst>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d109      	bne.n	8008f9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008f88:	79fa      	ldrb	r2, [r7, #7]
 8008f8a:	4911      	ldr	r1, [pc, #68]	; (8008fd0 <etharp_output_to_arp_index+0x124>)
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	4413      	add	r3, r2
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	440b      	add	r3, r1
 8008f96:	3314      	adds	r3, #20
 8008f98:	2203      	movs	r2, #3
 8008f9a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8008fa2:	79fa      	ldrb	r2, [r7, #7]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	005b      	lsls	r3, r3, #1
 8008fa8:	4413      	add	r3, r2
 8008faa:	00db      	lsls	r3, r3, #3
 8008fac:	3308      	adds	r3, #8
 8008fae:	4a08      	ldr	r2, [pc, #32]	; (8008fd0 <etharp_output_to_arp_index+0x124>)
 8008fb0:	4413      	add	r3, r2
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fb8:	9200      	str	r2, [sp, #0]
 8008fba:	460a      	mov	r2, r1
 8008fbc:	68b9      	ldr	r1, [r7, #8]
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 fb9c 	bl	80096fc <ethernet_output>
 8008fc4:	4603      	mov	r3, r0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	24004228 	.word	0x24004228
 8008fd4:	08014f3c 	.word	0x08014f3c
 8008fd8:	080150e8 	.word	0x080150e8
 8008fdc:	08014ff0 	.word	0x08014ff0

08008fe0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08a      	sub	sp, #40	; 0x28
 8008fe4:	af02      	add	r7, sp, #8
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d106      	bne.n	8009004 <etharp_output+0x24>
 8008ff6:	4b73      	ldr	r3, [pc, #460]	; (80091c4 <etharp_output+0x1e4>)
 8008ff8:	f240 321e 	movw	r2, #798	; 0x31e
 8008ffc:	4972      	ldr	r1, [pc, #456]	; (80091c8 <etharp_output+0x1e8>)
 8008ffe:	4873      	ldr	r0, [pc, #460]	; (80091cc <etharp_output+0x1ec>)
 8009000:	f00a fce8 	bl	80139d4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d106      	bne.n	8009018 <etharp_output+0x38>
 800900a:	4b6e      	ldr	r3, [pc, #440]	; (80091c4 <etharp_output+0x1e4>)
 800900c:	f240 321f 	movw	r2, #799	; 0x31f
 8009010:	496f      	ldr	r1, [pc, #444]	; (80091d0 <etharp_output+0x1f0>)
 8009012:	486e      	ldr	r0, [pc, #440]	; (80091cc <etharp_output+0x1ec>)
 8009014:	f00a fcde 	bl	80139d4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d106      	bne.n	800902c <etharp_output+0x4c>
 800901e:	4b69      	ldr	r3, [pc, #420]	; (80091c4 <etharp_output+0x1e4>)
 8009020:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009024:	496b      	ldr	r1, [pc, #428]	; (80091d4 <etharp_output+0x1f4>)
 8009026:	4869      	ldr	r0, [pc, #420]	; (80091cc <etharp_output+0x1ec>)
 8009028:	f00a fcd4 	bl	80139d4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68f9      	ldr	r1, [r7, #12]
 8009032:	4618      	mov	r0, r3
 8009034:	f001 f8c8 	bl	800a1c8 <ip4_addr_isbroadcast_u32>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800903e:	4b66      	ldr	r3, [pc, #408]	; (80091d8 <etharp_output+0x1f8>)
 8009040:	61fb      	str	r3, [r7, #28]
 8009042:	e0af      	b.n	80091a4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800904c:	2be0      	cmp	r3, #224	; 0xe0
 800904e:	d118      	bne.n	8009082 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8009050:	2301      	movs	r3, #1
 8009052:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8009054:	2300      	movs	r3, #0
 8009056:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8009058:	235e      	movs	r3, #94	; 0x5e
 800905a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	3301      	adds	r3, #1
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009066:	b2db      	uxtb	r3, r3
 8009068:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	3302      	adds	r3, #2
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	3303      	adds	r3, #3
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800907a:	f107 0310 	add.w	r3, r7, #16
 800907e:	61fb      	str	r3, [r7, #28]
 8009080:	e090      	b.n	80091a4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	3304      	adds	r3, #4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	405a      	eors	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3308      	adds	r3, #8
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4013      	ands	r3, r2
 8009096:	2b00      	cmp	r3, #0
 8009098:	d012      	beq.n	80090c0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80090a0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d00b      	beq.n	80090c0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	330c      	adds	r3, #12
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	330c      	adds	r3, #12
 80090b6:	61bb      	str	r3, [r7, #24]
 80090b8:	e002      	b.n	80090c0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80090ba:	f06f 0303 	mvn.w	r3, #3
 80090be:	e07d      	b.n	80091bc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80090c0:	4b46      	ldr	r3, [pc, #280]	; (80091dc <etharp_output+0x1fc>)
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	4619      	mov	r1, r3
 80090c6:	4a46      	ldr	r2, [pc, #280]	; (80091e0 <etharp_output+0x200>)
 80090c8:	460b      	mov	r3, r1
 80090ca:	005b      	lsls	r3, r3, #1
 80090cc:	440b      	add	r3, r1
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	4413      	add	r3, r2
 80090d2:	3314      	adds	r3, #20
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d925      	bls.n	8009126 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80090da:	4b40      	ldr	r3, [pc, #256]	; (80091dc <etharp_output+0x1fc>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	4619      	mov	r1, r3
 80090e0:	4a3f      	ldr	r2, [pc, #252]	; (80091e0 <etharp_output+0x200>)
 80090e2:	460b      	mov	r3, r1
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	440b      	add	r3, r1
 80090e8:	00db      	lsls	r3, r3, #3
 80090ea:	4413      	add	r3, r2
 80090ec:	3308      	adds	r3, #8
 80090ee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d117      	bne.n	8009126 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	4b38      	ldr	r3, [pc, #224]	; (80091dc <etharp_output+0x1fc>)
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	4618      	mov	r0, r3
 8009100:	4937      	ldr	r1, [pc, #220]	; (80091e0 <etharp_output+0x200>)
 8009102:	4603      	mov	r3, r0
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	4403      	add	r3, r0
 8009108:	00db      	lsls	r3, r3, #3
 800910a:	440b      	add	r3, r1
 800910c:	3304      	adds	r3, #4
 800910e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8009110:	429a      	cmp	r2, r3
 8009112:	d108      	bne.n	8009126 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8009114:	4b31      	ldr	r3, [pc, #196]	; (80091dc <etharp_output+0x1fc>)
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	461a      	mov	r2, r3
 800911a:	68b9      	ldr	r1, [r7, #8]
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f7ff fec5 	bl	8008eac <etharp_output_to_arp_index>
 8009122:	4603      	mov	r3, r0
 8009124:	e04a      	b.n	80091bc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009126:	2300      	movs	r3, #0
 8009128:	75fb      	strb	r3, [r7, #23]
 800912a:	e031      	b.n	8009190 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800912c:	7dfa      	ldrb	r2, [r7, #23]
 800912e:	492c      	ldr	r1, [pc, #176]	; (80091e0 <etharp_output+0x200>)
 8009130:	4613      	mov	r3, r2
 8009132:	005b      	lsls	r3, r3, #1
 8009134:	4413      	add	r3, r2
 8009136:	00db      	lsls	r3, r3, #3
 8009138:	440b      	add	r3, r1
 800913a:	3314      	adds	r3, #20
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	2b01      	cmp	r3, #1
 8009140:	d923      	bls.n	800918a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8009142:	7dfa      	ldrb	r2, [r7, #23]
 8009144:	4926      	ldr	r1, [pc, #152]	; (80091e0 <etharp_output+0x200>)
 8009146:	4613      	mov	r3, r2
 8009148:	005b      	lsls	r3, r3, #1
 800914a:	4413      	add	r3, r2
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	440b      	add	r3, r1
 8009150:	3308      	adds	r3, #8
 8009152:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	429a      	cmp	r2, r3
 8009158:	d117      	bne.n	800918a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	6819      	ldr	r1, [r3, #0]
 800915e:	7dfa      	ldrb	r2, [r7, #23]
 8009160:	481f      	ldr	r0, [pc, #124]	; (80091e0 <etharp_output+0x200>)
 8009162:	4613      	mov	r3, r2
 8009164:	005b      	lsls	r3, r3, #1
 8009166:	4413      	add	r3, r2
 8009168:	00db      	lsls	r3, r3, #3
 800916a:	4403      	add	r3, r0
 800916c:	3304      	adds	r3, #4
 800916e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8009170:	4299      	cmp	r1, r3
 8009172:	d10a      	bne.n	800918a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8009174:	4a19      	ldr	r2, [pc, #100]	; (80091dc <etharp_output+0x1fc>)
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	461a      	mov	r2, r3
 800917e:	68b9      	ldr	r1, [r7, #8]
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f7ff fe93 	bl	8008eac <etharp_output_to_arp_index>
 8009186:	4603      	mov	r3, r0
 8009188:	e018      	b.n	80091bc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800918a:	7dfb      	ldrb	r3, [r7, #23]
 800918c:	3301      	adds	r3, #1
 800918e:	75fb      	strb	r3, [r7, #23]
 8009190:	7dfb      	ldrb	r3, [r7, #23]
 8009192:	2b09      	cmp	r3, #9
 8009194:	d9ca      	bls.n	800912c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	69b9      	ldr	r1, [r7, #24]
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 f822 	bl	80091e4 <etharp_query>
 80091a0:	4603      	mov	r3, r0
 80091a2:	e00b      	b.n	80091bc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80091aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	68b9      	ldr	r1, [r7, #8]
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 faa1 	bl	80096fc <ethernet_output>
 80091ba:	4603      	mov	r3, r0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3720      	adds	r7, #32
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	08014f3c 	.word	0x08014f3c
 80091c8:	080150c8 	.word	0x080150c8
 80091cc:	08014ff0 	.word	0x08014ff0
 80091d0:	08015118 	.word	0x08015118
 80091d4:	080150b8 	.word	0x080150b8
 80091d8:	08017d78 	.word	0x08017d78
 80091dc:	24004318 	.word	0x24004318
 80091e0:	24004228 	.word	0x24004228

080091e4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b08c      	sub	sp, #48	; 0x30
 80091e8:	af02      	add	r7, sp, #8
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3326      	adds	r3, #38	; 0x26
 80091f4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80091f6:	23ff      	movs	r3, #255	; 0xff
 80091f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80091fc:	2300      	movs	r3, #0
 80091fe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68f9      	ldr	r1, [r7, #12]
 8009206:	4618      	mov	r0, r3
 8009208:	f000 ffde 	bl	800a1c8 <ip4_addr_isbroadcast_u32>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10c      	bne.n	800922c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800921a:	2be0      	cmp	r3, #224	; 0xe0
 800921c:	d006      	beq.n	800922c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d003      	beq.n	800922c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d102      	bne.n	8009232 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800922c:	f06f 030f 	mvn.w	r3, #15
 8009230:	e101      	b.n	8009436 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	2101      	movs	r1, #1
 8009236:	68b8      	ldr	r0, [r7, #8]
 8009238:	f7ff fb60 	bl	80088fc <etharp_find_entry>
 800923c:	4603      	mov	r3, r0
 800923e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8009240:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009244:	2b00      	cmp	r3, #0
 8009246:	da02      	bge.n	800924e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8009248:	8a7b      	ldrh	r3, [r7, #18]
 800924a:	b25b      	sxtb	r3, r3
 800924c:	e0f3      	b.n	8009436 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800924e:	8a7b      	ldrh	r3, [r7, #18]
 8009250:	2b7e      	cmp	r3, #126	; 0x7e
 8009252:	d906      	bls.n	8009262 <etharp_query+0x7e>
 8009254:	4b7a      	ldr	r3, [pc, #488]	; (8009440 <etharp_query+0x25c>)
 8009256:	f240 32c1 	movw	r2, #961	; 0x3c1
 800925a:	497a      	ldr	r1, [pc, #488]	; (8009444 <etharp_query+0x260>)
 800925c:	487a      	ldr	r0, [pc, #488]	; (8009448 <etharp_query+0x264>)
 800925e:	f00a fbb9 	bl	80139d4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8009262:	8a7b      	ldrh	r3, [r7, #18]
 8009264:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8009266:	7c7a      	ldrb	r2, [r7, #17]
 8009268:	4978      	ldr	r1, [pc, #480]	; (800944c <etharp_query+0x268>)
 800926a:	4613      	mov	r3, r2
 800926c:	005b      	lsls	r3, r3, #1
 800926e:	4413      	add	r3, r2
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	440b      	add	r3, r1
 8009274:	3314      	adds	r3, #20
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d115      	bne.n	80092a8 <etharp_query+0xc4>
    is_new_entry = 1;
 800927c:	2301      	movs	r3, #1
 800927e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8009280:	7c7a      	ldrb	r2, [r7, #17]
 8009282:	4972      	ldr	r1, [pc, #456]	; (800944c <etharp_query+0x268>)
 8009284:	4613      	mov	r3, r2
 8009286:	005b      	lsls	r3, r3, #1
 8009288:	4413      	add	r3, r2
 800928a:	00db      	lsls	r3, r3, #3
 800928c:	440b      	add	r3, r1
 800928e:	3314      	adds	r3, #20
 8009290:	2201      	movs	r2, #1
 8009292:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8009294:	7c7a      	ldrb	r2, [r7, #17]
 8009296:	496d      	ldr	r1, [pc, #436]	; (800944c <etharp_query+0x268>)
 8009298:	4613      	mov	r3, r2
 800929a:	005b      	lsls	r3, r3, #1
 800929c:	4413      	add	r3, r2
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	440b      	add	r3, r1
 80092a2:	3308      	adds	r3, #8
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80092a8:	7c7a      	ldrb	r2, [r7, #17]
 80092aa:	4968      	ldr	r1, [pc, #416]	; (800944c <etharp_query+0x268>)
 80092ac:	4613      	mov	r3, r2
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	4413      	add	r3, r2
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	440b      	add	r3, r1
 80092b6:	3314      	adds	r3, #20
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d011      	beq.n	80092e2 <etharp_query+0xfe>
 80092be:	7c7a      	ldrb	r2, [r7, #17]
 80092c0:	4962      	ldr	r1, [pc, #392]	; (800944c <etharp_query+0x268>)
 80092c2:	4613      	mov	r3, r2
 80092c4:	005b      	lsls	r3, r3, #1
 80092c6:	4413      	add	r3, r2
 80092c8:	00db      	lsls	r3, r3, #3
 80092ca:	440b      	add	r3, r1
 80092cc:	3314      	adds	r3, #20
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d806      	bhi.n	80092e2 <etharp_query+0xfe>
 80092d4:	4b5a      	ldr	r3, [pc, #360]	; (8009440 <etharp_query+0x25c>)
 80092d6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80092da:	495d      	ldr	r1, [pc, #372]	; (8009450 <etharp_query+0x26c>)
 80092dc:	485a      	ldr	r0, [pc, #360]	; (8009448 <etharp_query+0x264>)
 80092de:	f00a fb79 	bl	80139d4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d102      	bne.n	80092ee <etharp_query+0x10a>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10c      	bne.n	8009308 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80092ee:	68b9      	ldr	r1, [r7, #8]
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f000 f963 	bl	80095bc <etharp_request>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d102      	bne.n	8009308 <etharp_query+0x124>
      return result;
 8009302:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009306:	e096      	b.n	8009436 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d106      	bne.n	800931c <etharp_query+0x138>
 800930e:	4b4c      	ldr	r3, [pc, #304]	; (8009440 <etharp_query+0x25c>)
 8009310:	f240 32e1 	movw	r2, #993	; 0x3e1
 8009314:	494f      	ldr	r1, [pc, #316]	; (8009454 <etharp_query+0x270>)
 8009316:	484c      	ldr	r0, [pc, #304]	; (8009448 <etharp_query+0x264>)
 8009318:	f00a fb5c 	bl	80139d4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800931c:	7c7a      	ldrb	r2, [r7, #17]
 800931e:	494b      	ldr	r1, [pc, #300]	; (800944c <etharp_query+0x268>)
 8009320:	4613      	mov	r3, r2
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	4413      	add	r3, r2
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	440b      	add	r3, r1
 800932a:	3314      	adds	r3, #20
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d917      	bls.n	8009362 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8009332:	4a49      	ldr	r2, [pc, #292]	; (8009458 <etharp_query+0x274>)
 8009334:	7c7b      	ldrb	r3, [r7, #17]
 8009336:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8009338:	7c7a      	ldrb	r2, [r7, #17]
 800933a:	4613      	mov	r3, r2
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	4413      	add	r3, r2
 8009340:	00db      	lsls	r3, r3, #3
 8009342:	3308      	adds	r3, #8
 8009344:	4a41      	ldr	r2, [pc, #260]	; (800944c <etharp_query+0x268>)
 8009346:	4413      	add	r3, r2
 8009348:	3304      	adds	r3, #4
 800934a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800934e:	9200      	str	r2, [sp, #0]
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	6879      	ldr	r1, [r7, #4]
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 f9d1 	bl	80096fc <ethernet_output>
 800935a:	4603      	mov	r3, r0
 800935c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009360:	e067      	b.n	8009432 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009362:	7c7a      	ldrb	r2, [r7, #17]
 8009364:	4939      	ldr	r1, [pc, #228]	; (800944c <etharp_query+0x268>)
 8009366:	4613      	mov	r3, r2
 8009368:	005b      	lsls	r3, r3, #1
 800936a:	4413      	add	r3, r2
 800936c:	00db      	lsls	r3, r3, #3
 800936e:	440b      	add	r3, r1
 8009370:	3314      	adds	r3, #20
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d15c      	bne.n	8009432 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8009378:	2300      	movs	r3, #0
 800937a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009380:	e01c      	b.n	80093bc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	895a      	ldrh	r2, [r3, #10]
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	891b      	ldrh	r3, [r3, #8]
 800938a:	429a      	cmp	r2, r3
 800938c:	d10a      	bne.n	80093a4 <etharp_query+0x1c0>
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d006      	beq.n	80093a4 <etharp_query+0x1c0>
 8009396:	4b2a      	ldr	r3, [pc, #168]	; (8009440 <etharp_query+0x25c>)
 8009398:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800939c:	492f      	ldr	r1, [pc, #188]	; (800945c <etharp_query+0x278>)
 800939e:	482a      	ldr	r0, [pc, #168]	; (8009448 <etharp_query+0x264>)
 80093a0:	f00a fb18 	bl	80139d4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	7b1b      	ldrb	r3, [r3, #12]
 80093a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <etharp_query+0x1d2>
        copy_needed = 1;
 80093b0:	2301      	movs	r3, #1
 80093b2:	61bb      	str	r3, [r7, #24]
        break;
 80093b4:	e005      	b.n	80093c2 <etharp_query+0x1de>
      }
      p = p->next;
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1df      	bne.n	8009382 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d007      	beq.n	80093d8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	f44f 7120 	mov.w	r1, #640	; 0x280
 80093ce:	200e      	movs	r0, #14
 80093d0:	f003 fcbc 	bl	800cd4c <pbuf_clone>
 80093d4:	61f8      	str	r0, [r7, #28]
 80093d6:	e004      	b.n	80093e2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80093dc:	69f8      	ldr	r0, [r7, #28]
 80093de:	f003 fa61 	bl	800c8a4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d021      	beq.n	800942c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80093e8:	7c7a      	ldrb	r2, [r7, #17]
 80093ea:	4918      	ldr	r1, [pc, #96]	; (800944c <etharp_query+0x268>)
 80093ec:	4613      	mov	r3, r2
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	4413      	add	r3, r2
 80093f2:	00db      	lsls	r3, r3, #3
 80093f4:	440b      	add	r3, r1
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00a      	beq.n	8009412 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80093fc:	7c7a      	ldrb	r2, [r7, #17]
 80093fe:	4913      	ldr	r1, [pc, #76]	; (800944c <etharp_query+0x268>)
 8009400:	4613      	mov	r3, r2
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	4413      	add	r3, r2
 8009406:	00db      	lsls	r3, r3, #3
 8009408:	440b      	add	r3, r1
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4618      	mov	r0, r3
 800940e:	f003 f9a3 	bl	800c758 <pbuf_free>
      }
      arp_table[i].q = p;
 8009412:	7c7a      	ldrb	r2, [r7, #17]
 8009414:	490d      	ldr	r1, [pc, #52]	; (800944c <etharp_query+0x268>)
 8009416:	4613      	mov	r3, r2
 8009418:	005b      	lsls	r3, r3, #1
 800941a:	4413      	add	r3, r2
 800941c:	00db      	lsls	r3, r3, #3
 800941e:	440b      	add	r3, r1
 8009420:	69fa      	ldr	r2, [r7, #28]
 8009422:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800942a:	e002      	b.n	8009432 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800942c:	23ff      	movs	r3, #255	; 0xff
 800942e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8009432:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009436:	4618      	mov	r0, r3
 8009438:	3728      	adds	r7, #40	; 0x28
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	08014f3c 	.word	0x08014f3c
 8009444:	08015124 	.word	0x08015124
 8009448:	08014ff0 	.word	0x08014ff0
 800944c:	24004228 	.word	0x24004228
 8009450:	08015134 	.word	0x08015134
 8009454:	08015118 	.word	0x08015118
 8009458:	24004318 	.word	0x24004318
 800945c:	0801515c 	.word	0x0801515c

08009460 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b08a      	sub	sp, #40	; 0x28
 8009464:	af02      	add	r7, sp, #8
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d106      	bne.n	8009486 <etharp_raw+0x26>
 8009478:	4b3a      	ldr	r3, [pc, #232]	; (8009564 <etharp_raw+0x104>)
 800947a:	f240 4257 	movw	r2, #1111	; 0x457
 800947e:	493a      	ldr	r1, [pc, #232]	; (8009568 <etharp_raw+0x108>)
 8009480:	483a      	ldr	r0, [pc, #232]	; (800956c <etharp_raw+0x10c>)
 8009482:	f00a faa7 	bl	80139d4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009486:	f44f 7220 	mov.w	r2, #640	; 0x280
 800948a:	211c      	movs	r1, #28
 800948c:	200e      	movs	r0, #14
 800948e:	f002 fe7f 	bl	800c190 <pbuf_alloc>
 8009492:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d102      	bne.n	80094a0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800949a:	f04f 33ff 	mov.w	r3, #4294967295
 800949e:	e05d      	b.n	800955c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	895b      	ldrh	r3, [r3, #10]
 80094a4:	2b1b      	cmp	r3, #27
 80094a6:	d806      	bhi.n	80094b6 <etharp_raw+0x56>
 80094a8:	4b2e      	ldr	r3, [pc, #184]	; (8009564 <etharp_raw+0x104>)
 80094aa:	f240 4262 	movw	r2, #1122	; 0x462
 80094ae:	4930      	ldr	r1, [pc, #192]	; (8009570 <etharp_raw+0x110>)
 80094b0:	482e      	ldr	r0, [pc, #184]	; (800956c <etharp_raw+0x10c>)
 80094b2:	f00a fa8f 	bl	80139d4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80094bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff f914 	bl	80086ec <lwip_htons>
 80094c4:	4603      	mov	r3, r0
 80094c6:	461a      	mov	r2, r3
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80094d2:	2b06      	cmp	r3, #6
 80094d4:	d006      	beq.n	80094e4 <etharp_raw+0x84>
 80094d6:	4b23      	ldr	r3, [pc, #140]	; (8009564 <etharp_raw+0x104>)
 80094d8:	f240 4269 	movw	r2, #1129	; 0x469
 80094dc:	4925      	ldr	r1, [pc, #148]	; (8009574 <etharp_raw+0x114>)
 80094de:	4823      	ldr	r0, [pc, #140]	; (800956c <etharp_raw+0x10c>)
 80094e0:	f00a fa78 	bl	80139d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	3308      	adds	r3, #8
 80094e8:	2206      	movs	r2, #6
 80094ea:	6839      	ldr	r1, [r7, #0]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f00a fa41 	bl	8013974 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	3312      	adds	r3, #18
 80094f6:	2206      	movs	r2, #6
 80094f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094fa:	4618      	mov	r0, r3
 80094fc:	f00a fa3a 	bl	8013974 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	330e      	adds	r3, #14
 8009504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009506:	6812      	ldr	r2, [r2, #0]
 8009508:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	3318      	adds	r3, #24
 800950e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009510:	6812      	ldr	r2, [r2, #0]
 8009512:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	2200      	movs	r2, #0
 8009518:	701a      	strb	r2, [r3, #0]
 800951a:	2200      	movs	r2, #0
 800951c:	f042 0201 	orr.w	r2, r2, #1
 8009520:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2200      	movs	r2, #0
 8009526:	f042 0208 	orr.w	r2, r2, #8
 800952a:	709a      	strb	r2, [r3, #2]
 800952c:	2200      	movs	r2, #0
 800952e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2206      	movs	r2, #6
 8009534:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	2204      	movs	r2, #4
 800953a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800953c:	f640 0306 	movw	r3, #2054	; 0x806
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	69b9      	ldr	r1, [r7, #24]
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f8d7 	bl	80096fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800954e:	69b8      	ldr	r0, [r7, #24]
 8009550:	f003 f902 	bl	800c758 <pbuf_free>
  p = NULL;
 8009554:	2300      	movs	r3, #0
 8009556:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8009558:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3720      	adds	r7, #32
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	08014f3c 	.word	0x08014f3c
 8009568:	080150c8 	.word	0x080150c8
 800956c:	08014ff0 	.word	0x08014ff0
 8009570:	08015178 	.word	0x08015178
 8009574:	080151ac 	.word	0x080151ac

08009578 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b088      	sub	sp, #32
 800957c:	af04      	add	r7, sp, #16
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009594:	2201      	movs	r2, #1
 8009596:	9203      	str	r2, [sp, #12]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	9202      	str	r2, [sp, #8]
 800959c:	4a06      	ldr	r2, [pc, #24]	; (80095b8 <etharp_request_dst+0x40>)
 800959e:	9201      	str	r2, [sp, #4]
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	4603      	mov	r3, r0
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f7ff ff5a 	bl	8009460 <etharp_raw>
 80095ac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	08017d80 	.word	0x08017d80

080095bc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80095c6:	4a05      	ldr	r2, [pc, #20]	; (80095dc <etharp_request+0x20>)
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff ffd4 	bl	8009578 <etharp_request_dst>
 80095d0:	4603      	mov	r3, r0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	08017d78 	.word	0x08017d78

080095e0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80095ea:	230e      	movs	r3, #14
 80095ec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	895b      	ldrh	r3, [r3, #10]
 80095f2:	2b0e      	cmp	r3, #14
 80095f4:	d96e      	bls.n	80096d4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	7bdb      	ldrb	r3, [r3, #15]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d106      	bne.n	800960c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009604:	3301      	adds	r3, #1
 8009606:	b2da      	uxtb	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	7b1a      	ldrb	r2, [r3, #12]
 8009616:	7b5b      	ldrb	r3, [r3, #13]
 8009618:	021b      	lsls	r3, r3, #8
 800961a:	4313      	orrs	r3, r2
 800961c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b00      	cmp	r3, #0
 8009628:	d023      	beq.n	8009672 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d10f      	bne.n	8009652 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	785b      	ldrb	r3, [r3, #1]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d11b      	bne.n	8009672 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800963e:	2b5e      	cmp	r3, #94	; 0x5e
 8009640:	d117      	bne.n	8009672 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	7b5b      	ldrb	r3, [r3, #13]
 8009646:	f043 0310 	orr.w	r3, r3, #16
 800964a:	b2da      	uxtb	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	735a      	strb	r2, [r3, #13]
 8009650:	e00f      	b.n	8009672 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2206      	movs	r2, #6
 8009656:	4928      	ldr	r1, [pc, #160]	; (80096f8 <ethernet_input+0x118>)
 8009658:	4618      	mov	r0, r3
 800965a:	f00a f97b 	bl	8013954 <memcmp>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d106      	bne.n	8009672 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	7b5b      	ldrb	r3, [r3, #13]
 8009668:	f043 0308 	orr.w	r3, r3, #8
 800966c:	b2da      	uxtb	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8009672:	89fb      	ldrh	r3, [r7, #14]
 8009674:	2b08      	cmp	r3, #8
 8009676:	d003      	beq.n	8009680 <ethernet_input+0xa0>
 8009678:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800967c:	d014      	beq.n	80096a8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800967e:	e032      	b.n	80096e6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009686:	f003 0308 	and.w	r3, r3, #8
 800968a:	2b00      	cmp	r3, #0
 800968c:	d024      	beq.n	80096d8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800968e:	8afb      	ldrh	r3, [r7, #22]
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f002 ffda 	bl	800c64c <pbuf_remove_header>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d11e      	bne.n	80096dc <ethernet_input+0xfc>
        ip4_input(p, netif);
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fb95 	bl	8009dd0 <ip4_input>
      break;
 80096a6:	e013      	b.n	80096d0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80096ae:	f003 0308 	and.w	r3, r3, #8
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d014      	beq.n	80096e0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80096b6:	8afb      	ldrh	r3, [r7, #22]
 80096b8:	4619      	mov	r1, r3
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f002 ffc6 	bl	800c64c <pbuf_remove_header>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10e      	bne.n	80096e4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80096c6:	6839      	ldr	r1, [r7, #0]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7ff fb65 	bl	8008d98 <etharp_input>
      break;
 80096ce:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80096d0:	2300      	movs	r3, #0
 80096d2:	e00c      	b.n	80096ee <ethernet_input+0x10e>
    goto free_and_return;
 80096d4:	bf00      	nop
 80096d6:	e006      	b.n	80096e6 <ethernet_input+0x106>
        goto free_and_return;
 80096d8:	bf00      	nop
 80096da:	e004      	b.n	80096e6 <ethernet_input+0x106>
        goto free_and_return;
 80096dc:	bf00      	nop
 80096de:	e002      	b.n	80096e6 <ethernet_input+0x106>
        goto free_and_return;
 80096e0:	bf00      	nop
 80096e2:	e000      	b.n	80096e6 <ethernet_input+0x106>
        goto free_and_return;
 80096e4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f003 f836 	bl	800c758 <pbuf_free>
  return ERR_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3718      	adds	r7, #24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	08017d78 	.word	0x08017d78

080096fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
 8009708:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800970a:	8c3b      	ldrh	r3, [r7, #32]
 800970c:	4618      	mov	r0, r3
 800970e:	f7fe ffed 	bl	80086ec <lwip_htons>
 8009712:	4603      	mov	r3, r0
 8009714:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8009716:	210e      	movs	r1, #14
 8009718:	68b8      	ldr	r0, [r7, #8]
 800971a:	f002 ff87 	bl	800c62c <pbuf_add_header>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d125      	bne.n	8009770 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	8afa      	ldrh	r2, [r7, #22]
 800972e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	2206      	movs	r2, #6
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	4618      	mov	r0, r3
 8009738:	f00a f91c 	bl	8013974 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	3306      	adds	r3, #6
 8009740:	2206      	movs	r2, #6
 8009742:	6879      	ldr	r1, [r7, #4]
 8009744:	4618      	mov	r0, r3
 8009746:	f00a f915 	bl	8013974 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009750:	2b06      	cmp	r3, #6
 8009752:	d006      	beq.n	8009762 <ethernet_output+0x66>
 8009754:	4b0a      	ldr	r3, [pc, #40]	; (8009780 <ethernet_output+0x84>)
 8009756:	f44f 7299 	mov.w	r2, #306	; 0x132
 800975a:	490a      	ldr	r1, [pc, #40]	; (8009784 <ethernet_output+0x88>)
 800975c:	480a      	ldr	r0, [pc, #40]	; (8009788 <ethernet_output+0x8c>)
 800975e:	f00a f939 	bl	80139d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	68b9      	ldr	r1, [r7, #8]
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	4798      	blx	r3
 800976c:	4603      	mov	r3, r0
 800976e:	e002      	b.n	8009776 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8009770:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8009772:	f06f 0301 	mvn.w	r3, #1
}
 8009776:	4618      	mov	r0, r3
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	080151f0 	.word	0x080151f0
 8009784:	08015264 	.word	0x08015264
 8009788:	08015298 	.word	0x08015298

0800978c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b08e      	sub	sp, #56	; 0x38
 8009790:	af04      	add	r7, sp, #16
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8009796:	4b87      	ldr	r3, [pc, #540]	; (80099b4 <icmp_input+0x228>)
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	f003 030f 	and.w	r3, r3, #15
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80097ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80097ae:	2b13      	cmp	r3, #19
 80097b0:	f240 80e8 	bls.w	8009984 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	895b      	ldrh	r3, [r3, #10]
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	f240 80e5 	bls.w	8009988 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80097c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 80d2 	beq.w	8009976 <icmp_input+0x1ea>
 80097d2:	2b08      	cmp	r3, #8
 80097d4:	f040 80d2 	bne.w	800997c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80097d8:	4b77      	ldr	r3, [pc, #476]	; (80099b8 <icmp_input+0x22c>)
 80097da:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80097dc:	4b75      	ldr	r3, [pc, #468]	; (80099b4 <icmp_input+0x228>)
 80097de:	695b      	ldr	r3, [r3, #20]
 80097e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097e4:	2be0      	cmp	r3, #224	; 0xe0
 80097e6:	f000 80d6 	beq.w	8009996 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80097ea:	4b72      	ldr	r3, [pc, #456]	; (80099b4 <icmp_input+0x228>)
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	4a71      	ldr	r2, [pc, #452]	; (80099b4 <icmp_input+0x228>)
 80097f0:	6812      	ldr	r2, [r2, #0]
 80097f2:	4611      	mov	r1, r2
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 fce7 	bl	800a1c8 <ip4_addr_isbroadcast_u32>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f040 80cc 	bne.w	800999a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	891b      	ldrh	r3, [r3, #8]
 8009806:	2b07      	cmp	r3, #7
 8009808:	f240 80c0 	bls.w	800998c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f9e0 	bl	8009bd2 <inet_chksum_pbuf>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d003      	beq.n	8009820 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f002 ff9d 	bl	800c758 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800981e:	e0c5      	b.n	80099ac <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009820:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009822:	330e      	adds	r3, #14
 8009824:	4619      	mov	r1, r3
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f002 ff00 	bl	800c62c <pbuf_add_header>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d04b      	beq.n	80098ca <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	891a      	ldrh	r2, [r3, #8]
 8009836:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009838:	4413      	add	r3, r2
 800983a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	891b      	ldrh	r3, [r3, #8]
 8009840:	8b7a      	ldrh	r2, [r7, #26]
 8009842:	429a      	cmp	r2, r3
 8009844:	f0c0 80ab 	bcc.w	800999e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8009848:	8b7b      	ldrh	r3, [r7, #26]
 800984a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800984e:	4619      	mov	r1, r3
 8009850:	200e      	movs	r0, #14
 8009852:	f002 fc9d 	bl	800c190 <pbuf_alloc>
 8009856:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	2b00      	cmp	r3, #0
 800985c:	f000 80a1 	beq.w	80099a2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	895b      	ldrh	r3, [r3, #10]
 8009864:	461a      	mov	r2, r3
 8009866:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009868:	3308      	adds	r3, #8
 800986a:	429a      	cmp	r2, r3
 800986c:	d203      	bcs.n	8009876 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800986e:	6978      	ldr	r0, [r7, #20]
 8009870:	f002 ff72 	bl	800c758 <pbuf_free>
          goto icmperr;
 8009874:	e096      	b.n	80099a4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800987c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800987e:	4618      	mov	r0, r3
 8009880:	f00a f878 	bl	8013974 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8009884:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009886:	4619      	mov	r1, r3
 8009888:	6978      	ldr	r0, [r7, #20]
 800988a:	f002 fedf 	bl	800c64c <pbuf_remove_header>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d009      	beq.n	80098a8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8009894:	4b49      	ldr	r3, [pc, #292]	; (80099bc <icmp_input+0x230>)
 8009896:	22b6      	movs	r2, #182	; 0xb6
 8009898:	4949      	ldr	r1, [pc, #292]	; (80099c0 <icmp_input+0x234>)
 800989a:	484a      	ldr	r0, [pc, #296]	; (80099c4 <icmp_input+0x238>)
 800989c:	f00a f89a 	bl	80139d4 <iprintf>
          pbuf_free(r);
 80098a0:	6978      	ldr	r0, [r7, #20]
 80098a2:	f002 ff59 	bl	800c758 <pbuf_free>
          goto icmperr;
 80098a6:	e07d      	b.n	80099a4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80098a8:	6879      	ldr	r1, [r7, #4]
 80098aa:	6978      	ldr	r0, [r7, #20]
 80098ac:	f003 f878 	bl	800c9a0 <pbuf_copy>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80098b6:	6978      	ldr	r0, [r7, #20]
 80098b8:	f002 ff4e 	bl	800c758 <pbuf_free>
          goto icmperr;
 80098bc:	e072      	b.n	80099a4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f002 ff4a 	bl	800c758 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	607b      	str	r3, [r7, #4]
 80098c8:	e00f      	b.n	80098ea <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80098ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80098cc:	330e      	adds	r3, #14
 80098ce:	4619      	mov	r1, r3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f002 febb 	bl	800c64c <pbuf_remove_header>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d006      	beq.n	80098ea <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80098dc:	4b37      	ldr	r3, [pc, #220]	; (80099bc <icmp_input+0x230>)
 80098de:	22c7      	movs	r2, #199	; 0xc7
 80098e0:	4939      	ldr	r1, [pc, #228]	; (80099c8 <icmp_input+0x23c>)
 80098e2:	4838      	ldr	r0, [pc, #224]	; (80099c4 <icmp_input+0x238>)
 80098e4:	f00a f876 	bl	80139d4 <iprintf>
          goto icmperr;
 80098e8:	e05c      	b.n	80099a4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80098f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f002 fe99 	bl	800c62c <pbuf_add_header>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d13c      	bne.n	800997a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800990e:	4b29      	ldr	r3, [pc, #164]	; (80099b4 <icmp_input+0x228>)
 8009910:	691a      	ldr	r2, [r3, #16]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	2200      	movs	r2, #0
 800991a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	885b      	ldrh	r3, [r3, #2]
 8009920:	b29b      	uxth	r3, r3
 8009922:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8009926:	4293      	cmp	r3, r2
 8009928:	d907      	bls.n	800993a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	885b      	ldrh	r3, [r3, #2]
 800992e:	b29b      	uxth	r3, r3
 8009930:	3309      	adds	r3, #9
 8009932:	b29a      	uxth	r2, r3
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	805a      	strh	r2, [r3, #2]
 8009938:	e006      	b.n	8009948 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	885b      	ldrh	r3, [r3, #2]
 800993e:	b29b      	uxth	r3, r3
 8009940:	3308      	adds	r3, #8
 8009942:	b29a      	uxth	r2, r3
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	22ff      	movs	r2, #255	; 0xff
 800994c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	729a      	strb	r2, [r3, #10]
 8009954:	2200      	movs	r2, #0
 8009956:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	9302      	str	r3, [sp, #8]
 800995c:	2301      	movs	r3, #1
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	2300      	movs	r3, #0
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	23ff      	movs	r3, #255	; 0xff
 8009966:	2200      	movs	r2, #0
 8009968:	69f9      	ldr	r1, [r7, #28]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fb54 	bl	800a018 <ip4_output_if>
 8009970:	4603      	mov	r3, r0
 8009972:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8009974:	e001      	b.n	800997a <icmp_input+0x1ee>
      break;
 8009976:	bf00      	nop
 8009978:	e000      	b.n	800997c <icmp_input+0x1f0>
      break;
 800997a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f002 feeb 	bl	800c758 <pbuf_free>
  return;
 8009982:	e013      	b.n	80099ac <icmp_input+0x220>
    goto lenerr;
 8009984:	bf00      	nop
 8009986:	e002      	b.n	800998e <icmp_input+0x202>
    goto lenerr;
 8009988:	bf00      	nop
 800998a:	e000      	b.n	800998e <icmp_input+0x202>
        goto lenerr;
 800998c:	bf00      	nop
lenerr:
  pbuf_free(p);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f002 fee2 	bl	800c758 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8009994:	e00a      	b.n	80099ac <icmp_input+0x220>
        goto icmperr;
 8009996:	bf00      	nop
 8009998:	e004      	b.n	80099a4 <icmp_input+0x218>
        goto icmperr;
 800999a:	bf00      	nop
 800999c:	e002      	b.n	80099a4 <icmp_input+0x218>
          goto icmperr;
 800999e:	bf00      	nop
 80099a0:	e000      	b.n	80099a4 <icmp_input+0x218>
          goto icmperr;
 80099a2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f002 fed7 	bl	800c758 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80099aa:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80099ac:	3728      	adds	r7, #40	; 0x28
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	2400431c 	.word	0x2400431c
 80099b8:	24004330 	.word	0x24004330
 80099bc:	080152c0 	.word	0x080152c0
 80099c0:	08015334 	.word	0x08015334
 80099c4:	0801536c 	.word	0x0801536c
 80099c8:	08015394 	.word	0x08015394

080099cc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80099d8:	78fb      	ldrb	r3, [r7, #3]
 80099da:	461a      	mov	r2, r3
 80099dc:	2103      	movs	r1, #3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f814 	bl	8009a0c <icmp_send_response>
}
 80099e4:	bf00      	nop
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80099f8:	78fb      	ldrb	r3, [r7, #3]
 80099fa:	461a      	mov	r2, r3
 80099fc:	210b      	movs	r1, #11
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f804 	bl	8009a0c <icmp_send_response>
}
 8009a04:	bf00      	nop
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b08c      	sub	sp, #48	; 0x30
 8009a10:	af04      	add	r7, sp, #16
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	70fb      	strb	r3, [r7, #3]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8009a1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009a20:	2124      	movs	r1, #36	; 0x24
 8009a22:	2022      	movs	r0, #34	; 0x22
 8009a24:	f002 fbb4 	bl	800c190 <pbuf_alloc>
 8009a28:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d056      	beq.n	8009ade <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	895b      	ldrh	r3, [r3, #10]
 8009a34:	2b23      	cmp	r3, #35	; 0x23
 8009a36:	d806      	bhi.n	8009a46 <icmp_send_response+0x3a>
 8009a38:	4b2b      	ldr	r3, [pc, #172]	; (8009ae8 <icmp_send_response+0xdc>)
 8009a3a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8009a3e:	492b      	ldr	r1, [pc, #172]	; (8009aec <icmp_send_response+0xe0>)
 8009a40:	482b      	ldr	r0, [pc, #172]	; (8009af0 <icmp_send_response+0xe4>)
 8009a42:	f009 ffc7 	bl	80139d4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	78fa      	ldrb	r2, [r7, #3]
 8009a56:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	78ba      	ldrb	r2, [r7, #2]
 8009a5c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2200      	movs	r2, #0
 8009a62:	711a      	strb	r2, [r3, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	719a      	strb	r2, [r3, #6]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f103 0008 	add.w	r0, r3, #8
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	221c      	movs	r2, #28
 8009a80:	4619      	mov	r1, r3
 8009a82:	f009 ff77 	bl	8013974 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8009a8c:	f107 030c 	add.w	r3, r7, #12
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 f903 	bl	8009c9c <ip4_route>
 8009a96:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d01b      	beq.n	8009ad6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	709a      	strb	r2, [r3, #2]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	895b      	ldrh	r3, [r3, #10]
 8009aac:	4619      	mov	r1, r3
 8009aae:	6978      	ldr	r0, [r7, #20]
 8009ab0:	f000 f87d 	bl	8009bae <inet_chksum>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8009abc:	f107 020c 	add.w	r2, r7, #12
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	9302      	str	r3, [sp, #8]
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	9301      	str	r3, [sp, #4]
 8009ac8:	2300      	movs	r3, #0
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	23ff      	movs	r3, #255	; 0xff
 8009ace:	2100      	movs	r1, #0
 8009ad0:	69f8      	ldr	r0, [r7, #28]
 8009ad2:	f000 faa1 	bl	800a018 <ip4_output_if>
  }
  pbuf_free(q);
 8009ad6:	69f8      	ldr	r0, [r7, #28]
 8009ad8:	f002 fe3e 	bl	800c758 <pbuf_free>
 8009adc:	e000      	b.n	8009ae0 <icmp_send_response+0xd4>
    return;
 8009ade:	bf00      	nop
}
 8009ae0:	3720      	adds	r7, #32
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	080152c0 	.word	0x080152c0
 8009aec:	080153c8 	.word	0x080153c8
 8009af0:	0801536c 	.word	0x0801536c

08009af4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b089      	sub	sp, #36	; 0x24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	f003 0301 	and.w	r3, r3, #1
 8009b10:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00d      	beq.n	8009b34 <lwip_standard_chksum+0x40>
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	dd0a      	ble.n	8009b34 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8009b1e:	69fa      	ldr	r2, [r7, #28]
 8009b20:	1c53      	adds	r3, r2, #1
 8009b22:	61fb      	str	r3, [r7, #28]
 8009b24:	f107 030e 	add.w	r3, r7, #14
 8009b28:	3301      	adds	r3, #1
 8009b2a:	7812      	ldrb	r2, [r2, #0]
 8009b2c:	701a      	strb	r2, [r3, #0]
    len--;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	3b01      	subs	r3, #1
 8009b32:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8009b38:	e00a      	b.n	8009b50 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	1c9a      	adds	r2, r3, #2
 8009b3e:	61ba      	str	r2, [r7, #24]
 8009b40:	881b      	ldrh	r3, [r3, #0]
 8009b42:	461a      	mov	r2, r3
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	4413      	add	r3, r2
 8009b48:	617b      	str	r3, [r7, #20]
    len -= 2;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	3b02      	subs	r3, #2
 8009b4e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	dcf1      	bgt.n	8009b3a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	dd04      	ble.n	8009b66 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009b5c:	f107 030e 	add.w	r3, r7, #14
 8009b60:	69ba      	ldr	r2, [r7, #24]
 8009b62:	7812      	ldrb	r2, [r2, #0]
 8009b64:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8009b66:	89fb      	ldrh	r3, [r7, #14]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	0c1a      	lsrs	r2, r3, #16
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	4413      	add	r3, r2
 8009b7a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	0c1a      	lsrs	r2, r3, #16
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	4413      	add	r3, r2
 8009b86:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d007      	beq.n	8009b9e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	021b      	lsls	r3, r3, #8
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	0a1b      	lsrs	r3, r3, #8
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	b29b      	uxth	r3, r3
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3724      	adds	r7, #36	; 0x24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8009bba:	887b      	ldrh	r3, [r7, #2]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7ff ff98 	bl	8009af4 <lwip_standard_chksum>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	43db      	mvns	r3, r3
 8009bc8:	b29b      	uxth	r3, r3
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b086      	sub	sp, #24
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8009bde:	2300      	movs	r3, #0
 8009be0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	613b      	str	r3, [r7, #16]
 8009be6:	e02b      	b.n	8009c40 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	895b      	ldrh	r3, [r3, #10]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	4610      	mov	r0, r2
 8009bf4:	f7ff ff7e 	bl	8009af4 <lwip_standard_chksum>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	4413      	add	r3, r2
 8009c00:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	0c1a      	lsrs	r2, r3, #16
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	4413      	add	r3, r2
 8009c0c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	895b      	ldrh	r3, [r3, #10]
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00e      	beq.n	8009c3a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	bf0c      	ite	eq
 8009c22:	2301      	moveq	r3, #1
 8009c24:	2300      	movne	r3, #0
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	021b      	lsls	r3, r3, #8
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	0a1b      	lsrs	r3, r3, #8
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	4313      	orrs	r3, r2
 8009c38:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	613b      	str	r3, [r7, #16]
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1d0      	bne.n	8009be8 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d007      	beq.n	8009c5c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	021b      	lsls	r3, r3, #8
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	0a1b      	lsrs	r3, r3, #8
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	43db      	mvns	r3, r3
 8009c62:	b29b      	uxth	r3, r3
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009c76:	f003 f927 	bl	800cec8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009c7a:	f001 fa7f 	bl	800b17c <mem_init>
  memp_init();
 8009c7e:	f001 fde3 	bl	800b848 <memp_init>
  pbuf_init();
  netif_init();
 8009c82:	f001 feef 	bl	800ba64 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009c86:	f009 fc87 	bl	8013598 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009c8a:	f003 f9a7 	bl	800cfdc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009c8e:	f009 fbc9 	bl	8013424 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009c92:	bf00      	nop
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
	...

08009c9c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8009ca4:	4b33      	ldr	r3, [pc, #204]	; (8009d74 <ip4_route+0xd8>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	60fb      	str	r3, [r7, #12]
 8009caa:	e036      	b.n	8009d1a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d02b      	beq.n	8009d14 <ip4_route+0x78>
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009cc2:	089b      	lsrs	r3, r3, #2
 8009cc4:	f003 0301 	and.w	r3, r3, #1
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d022      	beq.n	8009d14 <ip4_route+0x78>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d01d      	beq.n	8009d14 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	405a      	eors	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3308      	adds	r3, #8
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4013      	ands	r3, r2
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d101      	bne.n	8009cf4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	e038      	b.n	8009d66 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009cfa:	f003 0302 	and.w	r3, r3, #2
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d108      	bne.n	8009d14 <ip4_route+0x78>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	330c      	adds	r3, #12
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d101      	bne.n	8009d14 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	e028      	b.n	8009d66 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	60fb      	str	r3, [r7, #12]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1c5      	bne.n	8009cac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009d20:	4b15      	ldr	r3, [pc, #84]	; (8009d78 <ip4_route+0xdc>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d01a      	beq.n	8009d5e <ip4_route+0xc2>
 8009d28:	4b13      	ldr	r3, [pc, #76]	; (8009d78 <ip4_route+0xdc>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009d30:	f003 0301 	and.w	r3, r3, #1
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d012      	beq.n	8009d5e <ip4_route+0xc2>
 8009d38:	4b0f      	ldr	r3, [pc, #60]	; (8009d78 <ip4_route+0xdc>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009d40:	f003 0304 	and.w	r3, r3, #4
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00a      	beq.n	8009d5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009d48:	4b0b      	ldr	r3, [pc, #44]	; (8009d78 <ip4_route+0xdc>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	3304      	adds	r3, #4
 8009d4e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d004      	beq.n	8009d5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8009d5c:	d101      	bne.n	8009d62 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	e001      	b.n	8009d66 <ip4_route+0xca>
  }

  return netif_default;
 8009d62:	4b05      	ldr	r3, [pc, #20]	; (8009d78 <ip4_route+0xdc>)
 8009d64:	681b      	ldr	r3, [r3, #0]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	2400742c 	.word	0x2400742c
 8009d78:	24007430 	.word	0x24007430

08009d7c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d016      	beq.n	8009dc2 <ip4_input_accept+0x46>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	3304      	adds	r3, #4
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d011      	beq.n	8009dc2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009d9e:	4b0b      	ldr	r3, [pc, #44]	; (8009dcc <ip4_input_accept+0x50>)
 8009da0:	695a      	ldr	r2, [r3, #20]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	3304      	adds	r3, #4
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d008      	beq.n	8009dbe <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8009dac:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <ip4_input_accept+0x50>)
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	6879      	ldr	r1, [r7, #4]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 fa08 	bl	800a1c8 <ip4_addr_isbroadcast_u32>
 8009db8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e000      	b.n	8009dc4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	2400431c 	.word	0x2400431c

08009dd0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	091b      	lsrs	r3, r3, #4
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	2b04      	cmp	r3, #4
 8009dea:	d004      	beq.n	8009df6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f002 fcb3 	bl	800c758 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	e107      	b.n	800a006 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	f003 030f 	and.w	r3, r3, #15
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	885b      	ldrh	r3, [r3, #2]
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fe fc6d 	bl	80086ec <lwip_htons>
 8009e12:	4603      	mov	r3, r0
 8009e14:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	891b      	ldrh	r3, [r3, #8]
 8009e1a:	89ba      	ldrh	r2, [r7, #12]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d204      	bcs.n	8009e2a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8009e20:	89bb      	ldrh	r3, [r7, #12]
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f002 fb11 	bl	800c44c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	895b      	ldrh	r3, [r3, #10]
 8009e2e:	89fa      	ldrh	r2, [r7, #14]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d807      	bhi.n	8009e44 <ip4_input+0x74>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	891b      	ldrh	r3, [r3, #8]
 8009e38:	89ba      	ldrh	r2, [r7, #12]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d802      	bhi.n	8009e44 <ip4_input+0x74>
 8009e3e:	89fb      	ldrh	r3, [r7, #14]
 8009e40:	2b13      	cmp	r3, #19
 8009e42:	d804      	bhi.n	8009e4e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f002 fc87 	bl	800c758 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e0db      	b.n	800a006 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	4a6f      	ldr	r2, [pc, #444]	; (800a010 <ip4_input+0x240>)
 8009e54:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	4a6d      	ldr	r2, [pc, #436]	; (800a010 <ip4_input+0x240>)
 8009e5c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009e5e:	4b6c      	ldr	r3, [pc, #432]	; (800a010 <ip4_input+0x240>)
 8009e60:	695b      	ldr	r3, [r3, #20]
 8009e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e66:	2be0      	cmp	r3, #224	; 0xe0
 8009e68:	d112      	bne.n	8009e90 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d007      	beq.n	8009e8a <ip4_input+0xba>
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d002      	beq.n	8009e8a <ip4_input+0xba>
      netif = inp;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	613b      	str	r3, [r7, #16]
 8009e88:	e02a      	b.n	8009ee0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	613b      	str	r3, [r7, #16]
 8009e8e:	e027      	b.n	8009ee0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8009e90:	6838      	ldr	r0, [r7, #0]
 8009e92:	f7ff ff73 	bl	8009d7c <ip4_input_accept>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <ip4_input+0xd2>
      netif = inp;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	613b      	str	r3, [r7, #16]
 8009ea0:	e01e      	b.n	8009ee0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8009ea6:	4b5a      	ldr	r3, [pc, #360]	; (800a010 <ip4_input+0x240>)
 8009ea8:	695b      	ldr	r3, [r3, #20]
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b7f      	cmp	r3, #127	; 0x7f
 8009eae:	d017      	beq.n	8009ee0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8009eb0:	4b58      	ldr	r3, [pc, #352]	; (800a014 <ip4_input+0x244>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	613b      	str	r3, [r7, #16]
 8009eb6:	e00e      	b.n	8009ed6 <ip4_input+0x106>
          if (netif == inp) {
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d006      	beq.n	8009ece <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8009ec0:	6938      	ldr	r0, [r7, #16]
 8009ec2:	f7ff ff5b 	bl	8009d7c <ip4_input_accept>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d108      	bne.n	8009ede <ip4_input+0x10e>
 8009ecc:	e000      	b.n	8009ed0 <ip4_input+0x100>
            continue;
 8009ece:	bf00      	nop
        NETIF_FOREACH(netif) {
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	613b      	str	r3, [r7, #16]
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1ed      	bne.n	8009eb8 <ip4_input+0xe8>
 8009edc:	e000      	b.n	8009ee0 <ip4_input+0x110>
            break;
 8009ede:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009ee0:	4b4b      	ldr	r3, [pc, #300]	; (800a010 <ip4_input+0x240>)
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 f96e 	bl	800a1c8 <ip4_addr_isbroadcast_u32>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d105      	bne.n	8009efe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8009ef2:	4b47      	ldr	r3, [pc, #284]	; (800a010 <ip4_input+0x240>)
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009efa:	2be0      	cmp	r3, #224	; 0xe0
 8009efc:	d104      	bne.n	8009f08 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f002 fc2a 	bl	800c758 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8009f04:	2300      	movs	r3, #0
 8009f06:	e07e      	b.n	800a006 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d104      	bne.n	8009f18 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f002 fc22 	bl	800c758 <pbuf_free>
    return ERR_OK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	e076      	b.n	800a006 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	88db      	ldrh	r3, [r3, #6]
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	461a      	mov	r2, r3
 8009f20:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8009f24:	4013      	ands	r3, r2
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00b      	beq.n	8009f42 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fd22 	bl	800a974 <ip4_reass>
 8009f30:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <ip4_input+0x16c>
      return ERR_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	e064      	b.n	800a006 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8009f42:	4a33      	ldr	r2, [pc, #204]	; (800a010 <ip4_input+0x240>)
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8009f48:	4a31      	ldr	r2, [pc, #196]	; (800a010 <ip4_input+0x240>)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8009f4e:	4a30      	ldr	r2, [pc, #192]	; (800a010 <ip4_input+0x240>)
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	f003 030f 	and.w	r3, r3, #15
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	4b2a      	ldr	r3, [pc, #168]	; (800a010 <ip4_input+0x240>)
 8009f66:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8009f68:	89fb      	ldrh	r3, [r7, #14]
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f002 fb6d 	bl	800c64c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	7a5b      	ldrb	r3, [r3, #9]
 8009f76:	2b11      	cmp	r3, #17
 8009f78:	d006      	beq.n	8009f88 <ip4_input+0x1b8>
 8009f7a:	2b11      	cmp	r3, #17
 8009f7c:	dc13      	bgt.n	8009fa6 <ip4_input+0x1d6>
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d00c      	beq.n	8009f9c <ip4_input+0x1cc>
 8009f82:	2b06      	cmp	r3, #6
 8009f84:	d005      	beq.n	8009f92 <ip4_input+0x1c2>
 8009f86:	e00e      	b.n	8009fa6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8009f88:	6839      	ldr	r1, [r7, #0]
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f009 fb7a 	bl	8013684 <udp_input>
        break;
 8009f90:	e026      	b.n	8009fe0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f004 fdc9 	bl	800eb2c <tcp_input>
        break;
 8009f9a:	e021      	b.n	8009fe0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7ff fbf4 	bl	800978c <icmp_input>
        break;
 8009fa4:	e01c      	b.n	8009fe0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009fa6:	4b1a      	ldr	r3, [pc, #104]	; (800a010 <ip4_input+0x240>)
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	6939      	ldr	r1, [r7, #16]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 f90b 	bl	800a1c8 <ip4_addr_isbroadcast_u32>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10f      	bne.n	8009fd8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009fb8:	4b15      	ldr	r3, [pc, #84]	; (800a010 <ip4_input+0x240>)
 8009fba:	695b      	ldr	r3, [r3, #20]
 8009fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009fc0:	2be0      	cmp	r3, #224	; 0xe0
 8009fc2:	d009      	beq.n	8009fd8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8009fc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f002 fbb1 	bl	800c732 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8009fd0:	2102      	movs	r1, #2
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7ff fcfa 	bl	80099cc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f002 fbbd 	bl	800c758 <pbuf_free>
        break;
 8009fde:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8009fe0:	4b0b      	ldr	r3, [pc, #44]	; (800a010 <ip4_input+0x240>)
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8009fe6:	4b0a      	ldr	r3, [pc, #40]	; (800a010 <ip4_input+0x240>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8009fec:	4b08      	ldr	r3, [pc, #32]	; (800a010 <ip4_input+0x240>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8009ff2:	4b07      	ldr	r3, [pc, #28]	; (800a010 <ip4_input+0x240>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8009ff8:	4b05      	ldr	r3, [pc, #20]	; (800a010 <ip4_input+0x240>)
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8009ffe:	4b04      	ldr	r3, [pc, #16]	; (800a010 <ip4_input+0x240>)
 800a000:	2200      	movs	r2, #0
 800a002:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	2400431c 	.word	0x2400431c
 800a014:	2400742c 	.word	0x2400742c

0800a018 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08a      	sub	sp, #40	; 0x28
 800a01c:	af04      	add	r7, sp, #16
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
 800a024:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d009      	beq.n	800a044 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d003      	beq.n	800a03e <ip4_output_if+0x26>
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d102      	bne.n	800a044 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800a03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a040:	3304      	adds	r3, #4
 800a042:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a044:	78fa      	ldrb	r2, [r7, #3]
 800a046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a048:	9302      	str	r3, [sp, #8]
 800a04a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	4613      	mov	r3, r2
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	6979      	ldr	r1, [r7, #20]
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 f805 	bl	800a06c <ip4_output_if_src>
 800a062:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800a064:	4618      	mov	r0, r3
 800a066:	3718      	adds	r7, #24
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b088      	sub	sp, #32
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
 800a078:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	7b9b      	ldrb	r3, [r3, #14]
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d006      	beq.n	800a090 <ip4_output_if_src+0x24>
 800a082:	4b4b      	ldr	r3, [pc, #300]	; (800a1b0 <ip4_output_if_src+0x144>)
 800a084:	f44f 7255 	mov.w	r2, #852	; 0x354
 800a088:	494a      	ldr	r1, [pc, #296]	; (800a1b4 <ip4_output_if_src+0x148>)
 800a08a:	484b      	ldr	r0, [pc, #300]	; (800a1b8 <ip4_output_if_src+0x14c>)
 800a08c:	f009 fca2 	bl	80139d4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d060      	beq.n	800a158 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800a096:	2314      	movs	r3, #20
 800a098:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800a09a:	2114      	movs	r1, #20
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f002 fac5 	bl	800c62c <pbuf_add_header>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800a0a8:	f06f 0301 	mvn.w	r3, #1
 800a0ac:	e07c      	b.n	800a1a8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	895b      	ldrh	r3, [r3, #10]
 800a0b8:	2b13      	cmp	r3, #19
 800a0ba:	d806      	bhi.n	800a0ca <ip4_output_if_src+0x5e>
 800a0bc:	4b3c      	ldr	r3, [pc, #240]	; (800a1b0 <ip4_output_if_src+0x144>)
 800a0be:	f44f 7262 	mov.w	r2, #904	; 0x388
 800a0c2:	493e      	ldr	r1, [pc, #248]	; (800a1bc <ip4_output_if_src+0x150>)
 800a0c4:	483c      	ldr	r0, [pc, #240]	; (800a1b8 <ip4_output_if_src+0x14c>)
 800a0c6:	f009 fc85 	bl	80139d4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	78fa      	ldrb	r2, [r7, #3]
 800a0ce:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800a0d6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800a0e0:	8b7b      	ldrh	r3, [r7, #26]
 800a0e2:	089b      	lsrs	r3, r3, #2
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a0f8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	891b      	ldrh	r3, [r3, #8]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fe faf4 	bl	80086ec <lwip_htons>
 800a104:	4603      	mov	r3, r0
 800a106:	461a      	mov	r2, r3
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	2200      	movs	r2, #0
 800a110:	719a      	strb	r2, [r3, #6]
 800a112:	2200      	movs	r2, #0
 800a114:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a116:	4b2a      	ldr	r3, [pc, #168]	; (800a1c0 <ip4_output_if_src+0x154>)
 800a118:	881b      	ldrh	r3, [r3, #0]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe fae6 	bl	80086ec <lwip_htons>
 800a120:	4603      	mov	r3, r0
 800a122:	461a      	mov	r2, r3
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a128:	4b25      	ldr	r3, [pc, #148]	; (800a1c0 <ip4_output_if_src+0x154>)
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	3301      	adds	r3, #1
 800a12e:	b29a      	uxth	r2, r3
 800a130:	4b23      	ldr	r3, [pc, #140]	; (800a1c0 <ip4_output_if_src+0x154>)
 800a132:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d104      	bne.n	800a144 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800a13a:	4b22      	ldr	r3, [pc, #136]	; (800a1c4 <ip4_output_if_src+0x158>)
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	60da      	str	r2, [r3, #12]
 800a142:	e003      	b.n	800a14c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	2200      	movs	r2, #0
 800a150:	729a      	strb	r2, [r3, #10]
 800a152:	2200      	movs	r2, #0
 800a154:	72da      	strb	r2, [r3, #11]
 800a156:	e00f      	b.n	800a178 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	895b      	ldrh	r3, [r3, #10]
 800a15c:	2b13      	cmp	r3, #19
 800a15e:	d802      	bhi.n	800a166 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800a160:	f06f 0301 	mvn.w	r3, #1
 800a164:	e020      	b.n	800a1a8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800a172:	f107 0314 	add.w	r3, r7, #20
 800a176:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800a178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00c      	beq.n	800a19a <ip4_output_if_src+0x12e>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	891a      	ldrh	r2, [r3, #8]
 800a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a186:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a188:	429a      	cmp	r2, r3
 800a18a:	d906      	bls.n	800a19a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f000 fde3 	bl	800ad5c <ip4_frag>
 800a196:	4603      	mov	r3, r0
 800a198:	e006      	b.n	800a1a8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800a19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	68f9      	ldr	r1, [r7, #12]
 800a1a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1a4:	4798      	blx	r3
 800a1a6:	4603      	mov	r3, r0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3720      	adds	r7, #32
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	080153f4 	.word	0x080153f4
 800a1b4:	08015468 	.word	0x08015468
 800a1b8:	08015474 	.word	0x08015474
 800a1bc:	0801549c 	.word	0x0801549c
 800a1c0:	24004334 	.word	0x24004334
 800a1c4:	08017d88 	.word	0x08017d88

0800a1c8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1dc:	d002      	beq.n	800a1e4 <ip4_addr_isbroadcast_u32+0x1c>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d101      	bne.n	800a1e8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e02a      	b.n	800a23e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a1ee:	f003 0302 	and.w	r3, r3, #2
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	e021      	b.n	800a23e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	429a      	cmp	r2, r3
 800a204:	d101      	bne.n	800a20a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800a206:	2300      	movs	r3, #0
 800a208:	e019      	b.n	800a23e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	3304      	adds	r3, #4
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	405a      	eors	r2, r3
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	3308      	adds	r3, #8
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4013      	ands	r3, r2
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10d      	bne.n	800a23c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	3308      	adds	r3, #8
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	43da      	mvns	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	3308      	adds	r3, #8
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a234:	429a      	cmp	r2, r3
 800a236:	d101      	bne.n	800a23c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800a238:	2301      	movs	r3, #1
 800a23a:	e000      	b.n	800a23e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800a23c:	2300      	movs	r3, #0
  }
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3714      	adds	r7, #20
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
	...

0800a24c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800a254:	2210      	movs	r2, #16
 800a256:	4904      	ldr	r1, [pc, #16]	; (800a268 <ip4addr_ntoa+0x1c>)
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f807 	bl	800a26c <ip4addr_ntoa_r>
 800a25e:	4603      	mov	r3, r0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	24004338 	.word	0x24004338

0800a26c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b08d      	sub	sp, #52	; 0x34
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800a286:	f107 0318 	add.w	r3, r7, #24
 800a28a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800a28c:	2300      	movs	r3, #0
 800a28e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a292:	e058      	b.n	800a346 <ip4addr_ntoa_r+0xda>
    i = 0;
 800a294:	2300      	movs	r3, #0
 800a296:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800a29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29c:	781a      	ldrb	r2, [r3, #0]
 800a29e:	4b32      	ldr	r3, [pc, #200]	; (800a368 <ip4addr_ntoa_r+0xfc>)
 800a2a0:	fba3 1302 	umull	r1, r3, r3, r2
 800a2a4:	08d9      	lsrs	r1, r3, #3
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	440b      	add	r3, r1
 800a2ac:	005b      	lsls	r3, r3, #1
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800a2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	4a2c      	ldr	r2, [pc, #176]	; (800a368 <ip4addr_ntoa_r+0xfc>)
 800a2b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2bc:	08db      	lsrs	r3, r3, #3
 800a2be:	b2da      	uxtb	r2, r3
 800a2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c2:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800a2c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	7ffb      	ldrb	r3, [r7, #31]
 800a2d2:	3330      	adds	r3, #48	; 0x30
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800a2da:	443b      	add	r3, r7
 800a2dc:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1d8      	bne.n	800a29a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800a2e8:	e011      	b.n	800a30e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	1c5a      	adds	r2, r3, #1
 800a2ee:	623a      	str	r2, [r7, #32]
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	dc01      	bgt.n	800a2fa <ip4addr_ntoa_r+0x8e>
        return NULL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	e030      	b.n	800a35c <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800a2fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a300:	1c59      	adds	r1, r3, #1
 800a302:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a304:	3230      	adds	r2, #48	; 0x30
 800a306:	443a      	add	r2, r7
 800a308:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800a30c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800a30e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a312:	1e5a      	subs	r2, r3, #1
 800a314:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e6      	bne.n	800a2ea <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	1c5a      	adds	r2, r3, #1
 800a320:	623a      	str	r2, [r7, #32]
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	429a      	cmp	r2, r3
 800a326:	dc01      	bgt.n	800a32c <ip4addr_ntoa_r+0xc0>
      return NULL;
 800a328:	2300      	movs	r3, #0
 800a32a:	e017      	b.n	800a35c <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800a32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32e:	1c5a      	adds	r2, r3, #1
 800a330:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a332:	222e      	movs	r2, #46	; 0x2e
 800a334:	701a      	strb	r2, [r3, #0]
    ap++;
 800a336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a338:	3301      	adds	r3, #1
 800a33a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800a33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a340:	3301      	adds	r3, #1
 800a342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	d9a2      	bls.n	800a294 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a350:	3b01      	subs	r3, #1
 800a352:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a356:	2200      	movs	r2, #0
 800a358:	701a      	strb	r2, [r3, #0]
  return buf;
 800a35a:	68bb      	ldr	r3, [r7, #8]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3734      	adds	r7, #52	; 0x34
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	cccccccd 	.word	0xcccccccd

0800a36c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800a372:	2300      	movs	r3, #0
 800a374:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800a376:	4b12      	ldr	r3, [pc, #72]	; (800a3c0 <ip_reass_tmr+0x54>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800a37c:	e018      	b.n	800a3b0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	7fdb      	ldrb	r3, [r3, #31]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00b      	beq.n	800a39e <ip_reass_tmr+0x32>
      r->timer--;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	7fdb      	ldrb	r3, [r3, #31]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	b2da      	uxtb	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	e008      	b.n	800a3b0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800a3a8:	68b9      	ldr	r1, [r7, #8]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f80a 	bl	800a3c4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e3      	bne.n	800a37e <ip_reass_tmr+0x12>
    }
  }
}
 800a3b6:	bf00      	nop
 800a3b8:	bf00      	nop
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	24004348 	.word	0x24004348

0800a3c4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b088      	sub	sp, #32
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d105      	bne.n	800a3e6 <ip_reass_free_complete_datagram+0x22>
 800a3da:	4b45      	ldr	r3, [pc, #276]	; (800a4f0 <ip_reass_free_complete_datagram+0x12c>)
 800a3dc:	22ab      	movs	r2, #171	; 0xab
 800a3de:	4945      	ldr	r1, [pc, #276]	; (800a4f4 <ip_reass_free_complete_datagram+0x130>)
 800a3e0:	4845      	ldr	r0, [pc, #276]	; (800a4f8 <ip_reass_free_complete_datagram+0x134>)
 800a3e2:	f009 faf7 	bl	80139d4 <iprintf>
  if (prev != NULL) {
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00a      	beq.n	800a402 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d005      	beq.n	800a402 <ip_reass_free_complete_datagram+0x3e>
 800a3f6:	4b3e      	ldr	r3, [pc, #248]	; (800a4f0 <ip_reass_free_complete_datagram+0x12c>)
 800a3f8:	22ad      	movs	r2, #173	; 0xad
 800a3fa:	4940      	ldr	r1, [pc, #256]	; (800a4fc <ip_reass_free_complete_datagram+0x138>)
 800a3fc:	483e      	ldr	r0, [pc, #248]	; (800a4f8 <ip_reass_free_complete_datagram+0x134>)
 800a3fe:	f009 fae9 	bl	80139d4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	889b      	ldrh	r3, [r3, #4]
 800a40e:	b29b      	uxth	r3, r3
 800a410:	2b00      	cmp	r3, #0
 800a412:	d12a      	bne.n	800a46a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	6858      	ldr	r0, [r3, #4]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	3308      	adds	r3, #8
 800a42a:	2214      	movs	r2, #20
 800a42c:	4619      	mov	r1, r3
 800a42e:	f009 faa1 	bl	8013974 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800a432:	2101      	movs	r1, #1
 800a434:	69b8      	ldr	r0, [r7, #24]
 800a436:	f7ff fad9 	bl	80099ec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800a43a:	69b8      	ldr	r0, [r7, #24]
 800a43c:	f002 fa1a 	bl	800c874 <pbuf_clen>
 800a440:	4603      	mov	r3, r0
 800a442:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a444:	8bfa      	ldrh	r2, [r7, #30]
 800a446:	8a7b      	ldrh	r3, [r7, #18]
 800a448:	4413      	add	r3, r2
 800a44a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a44e:	db05      	blt.n	800a45c <ip_reass_free_complete_datagram+0x98>
 800a450:	4b27      	ldr	r3, [pc, #156]	; (800a4f0 <ip_reass_free_complete_datagram+0x12c>)
 800a452:	22bc      	movs	r2, #188	; 0xbc
 800a454:	492a      	ldr	r1, [pc, #168]	; (800a500 <ip_reass_free_complete_datagram+0x13c>)
 800a456:	4828      	ldr	r0, [pc, #160]	; (800a4f8 <ip_reass_free_complete_datagram+0x134>)
 800a458:	f009 fabc 	bl	80139d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800a45c:	8bfa      	ldrh	r2, [r7, #30]
 800a45e:	8a7b      	ldrh	r3, [r7, #18]
 800a460:	4413      	add	r3, r2
 800a462:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800a464:	69b8      	ldr	r0, [r7, #24]
 800a466:	f002 f977 	bl	800c758 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800a470:	e01f      	b.n	800a4b2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	617b      	str	r3, [r7, #20]
    pcur = p;
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f002 f9f6 	bl	800c874 <pbuf_clen>
 800a488:	4603      	mov	r3, r0
 800a48a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a48c:	8bfa      	ldrh	r2, [r7, #30]
 800a48e:	8a7b      	ldrh	r3, [r7, #18]
 800a490:	4413      	add	r3, r2
 800a492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a496:	db05      	blt.n	800a4a4 <ip_reass_free_complete_datagram+0xe0>
 800a498:	4b15      	ldr	r3, [pc, #84]	; (800a4f0 <ip_reass_free_complete_datagram+0x12c>)
 800a49a:	22cc      	movs	r2, #204	; 0xcc
 800a49c:	4918      	ldr	r1, [pc, #96]	; (800a500 <ip_reass_free_complete_datagram+0x13c>)
 800a49e:	4816      	ldr	r0, [pc, #88]	; (800a4f8 <ip_reass_free_complete_datagram+0x134>)
 800a4a0:	f009 fa98 	bl	80139d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800a4a4:	8bfa      	ldrh	r2, [r7, #30]
 800a4a6:	8a7b      	ldrh	r3, [r7, #18]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	f002 f953 	bl	800c758 <pbuf_free>
  while (p != NULL) {
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1dc      	bne.n	800a472 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800a4b8:	6839      	ldr	r1, [r7, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f8c2 	bl	800a644 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800a4c0:	4b10      	ldr	r3, [pc, #64]	; (800a504 <ip_reass_free_complete_datagram+0x140>)
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	8bfa      	ldrh	r2, [r7, #30]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d905      	bls.n	800a4d6 <ip_reass_free_complete_datagram+0x112>
 800a4ca:	4b09      	ldr	r3, [pc, #36]	; (800a4f0 <ip_reass_free_complete_datagram+0x12c>)
 800a4cc:	22d2      	movs	r2, #210	; 0xd2
 800a4ce:	490e      	ldr	r1, [pc, #56]	; (800a508 <ip_reass_free_complete_datagram+0x144>)
 800a4d0:	4809      	ldr	r0, [pc, #36]	; (800a4f8 <ip_reass_free_complete_datagram+0x134>)
 800a4d2:	f009 fa7f 	bl	80139d4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800a4d6:	4b0b      	ldr	r3, [pc, #44]	; (800a504 <ip_reass_free_complete_datagram+0x140>)
 800a4d8:	881a      	ldrh	r2, [r3, #0]
 800a4da:	8bfb      	ldrh	r3, [r7, #30]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	4b08      	ldr	r3, [pc, #32]	; (800a504 <ip_reass_free_complete_datagram+0x140>)
 800a4e2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800a4e4:	8bfb      	ldrh	r3, [r7, #30]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3720      	adds	r7, #32
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	080154cc 	.word	0x080154cc
 800a4f4:	08015544 	.word	0x08015544
 800a4f8:	08015550 	.word	0x08015550
 800a4fc:	08015578 	.word	0x08015578
 800a500:	0801558c 	.word	0x0801558c
 800a504:	2400434c 	.word	0x2400434c
 800a508:	080155ac 	.word	0x080155ac

0800a50c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b08a      	sub	sp, #40	; 0x28
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800a516:	2300      	movs	r3, #0
 800a518:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800a51a:	2300      	movs	r3, #0
 800a51c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800a51e:	2300      	movs	r3, #0
 800a520:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800a522:	2300      	movs	r3, #0
 800a524:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800a526:	2300      	movs	r3, #0
 800a528:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800a52a:	4b28      	ldr	r3, [pc, #160]	; (800a5cc <ip_reass_remove_oldest_datagram+0xc0>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a530:	e030      	b.n	800a594 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800a532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a534:	695a      	ldr	r2, [r3, #20]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d10c      	bne.n	800a558 <ip_reass_remove_oldest_datagram+0x4c>
 800a53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a540:	699a      	ldr	r2, [r3, #24]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	429a      	cmp	r2, r3
 800a548:	d106      	bne.n	800a558 <ip_reass_remove_oldest_datagram+0x4c>
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	899a      	ldrh	r2, [r3, #12]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	889b      	ldrh	r3, [r3, #4]
 800a552:	b29b      	uxth	r3, r3
 800a554:	429a      	cmp	r2, r3
 800a556:	d014      	beq.n	800a582 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	3301      	adds	r3, #1
 800a55c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d104      	bne.n	800a56e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	61bb      	str	r3, [r7, #24]
 800a56c:	e009      	b.n	800a582 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800a56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a570:	7fda      	ldrb	r2, [r3, #31]
 800a572:	6a3b      	ldr	r3, [r7, #32]
 800a574:	7fdb      	ldrb	r3, [r3, #31]
 800a576:	429a      	cmp	r2, r3
 800a578:	d803      	bhi.n	800a582 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800a582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1cb      	bne.n	800a532 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800a59a:	6a3b      	ldr	r3, [r7, #32]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d008      	beq.n	800a5b2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800a5a0:	69b9      	ldr	r1, [r7, #24]
 800a5a2:	6a38      	ldr	r0, [r7, #32]
 800a5a4:	f7ff ff0e 	bl	800a3c4 <ip_reass_free_complete_datagram>
 800a5a8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800a5b2:	697a      	ldr	r2, [r7, #20]
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	da02      	bge.n	800a5c0 <ip_reass_remove_oldest_datagram+0xb4>
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	dcac      	bgt.n	800a51a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800a5c0:	697b      	ldr	r3, [r7, #20]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3728      	adds	r7, #40	; 0x28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	24004348 	.word	0x24004348

0800a5d0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a5da:	2004      	movs	r0, #4
 800a5dc:	f001 f9a2 	bl	800b924 <memp_malloc>
 800a5e0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d110      	bne.n	800a60a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f7ff ff8e 	bl	800a50c <ip_reass_remove_oldest_datagram>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	dc03      	bgt.n	800a600 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a5f8:	2004      	movs	r0, #4
 800a5fa:	f001 f993 	bl	800b924 <memp_malloc>
 800a5fe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800a606:	2300      	movs	r3, #0
 800a608:	e016      	b.n	800a638 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a60a:	2220      	movs	r2, #32
 800a60c:	2100      	movs	r1, #0
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f009 f9d8 	bl	80139c4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	220f      	movs	r2, #15
 800a618:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800a61a:	4b09      	ldr	r3, [pc, #36]	; (800a640 <ip_reass_enqueue_new_datagram+0x70>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800a622:	4a07      	ldr	r2, [pc, #28]	; (800a640 <ip_reass_enqueue_new_datagram+0x70>)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	3308      	adds	r3, #8
 800a62c:	2214      	movs	r2, #20
 800a62e:	6879      	ldr	r1, [r7, #4]
 800a630:	4618      	mov	r0, r3
 800a632:	f009 f99f 	bl	8013974 <memcpy>
  return ipr;
 800a636:	68fb      	ldr	r3, [r7, #12]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	24004348 	.word	0x24004348

0800a644 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a64e:	4b10      	ldr	r3, [pc, #64]	; (800a690 <ip_reass_dequeue_datagram+0x4c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	429a      	cmp	r2, r3
 800a656:	d104      	bne.n	800a662 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a0c      	ldr	r2, [pc, #48]	; (800a690 <ip_reass_dequeue_datagram+0x4c>)
 800a65e:	6013      	str	r3, [r2, #0]
 800a660:	e00d      	b.n	800a67e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d106      	bne.n	800a676 <ip_reass_dequeue_datagram+0x32>
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <ip_reass_dequeue_datagram+0x50>)
 800a66a:	f240 1245 	movw	r2, #325	; 0x145
 800a66e:	490a      	ldr	r1, [pc, #40]	; (800a698 <ip_reass_dequeue_datagram+0x54>)
 800a670:	480a      	ldr	r0, [pc, #40]	; (800a69c <ip_reass_dequeue_datagram+0x58>)
 800a672:	f009 f9af 	bl	80139d4 <iprintf>
    prev->next = ipr->next;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a67e:	6879      	ldr	r1, [r7, #4]
 800a680:	2004      	movs	r0, #4
 800a682:	f001 f9c5 	bl	800ba10 <memp_free>
}
 800a686:	bf00      	nop
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	24004348 	.word	0x24004348
 800a694:	080154cc 	.word	0x080154cc
 800a698:	080155d0 	.word	0x080155d0
 800a69c:	08015550 	.word	0x08015550

0800a6a0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b08c      	sub	sp, #48	; 0x30
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	885b      	ldrh	r3, [r3, #2]
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fe f813 	bl	80086ec <lwip_htons>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	f003 030f 	and.w	r3, r3, #15
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800a6d8:	7e7b      	ldrb	r3, [r7, #25]
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	8b7a      	ldrh	r2, [r7, #26]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d202      	bcs.n	800a6e8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e6:	e135      	b.n	800a954 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800a6e8:	7e7b      	ldrb	r3, [r7, #25]
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	8b7a      	ldrh	r2, [r7, #26]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	88db      	ldrh	r3, [r3, #6]
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fd fff7 	bl	80086ec <lwip_htons>
 800a6fe:	4603      	mov	r3, r0
 800a700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a704:	b29b      	uxth	r3, r3
 800a706:	00db      	lsls	r3, r3, #3
 800a708:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800a710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a712:	2200      	movs	r2, #0
 800a714:	701a      	strb	r2, [r3, #0]
 800a716:	2200      	movs	r2, #0
 800a718:	705a      	strb	r2, [r3, #1]
 800a71a:	2200      	movs	r2, #0
 800a71c:	709a      	strb	r2, [r3, #2]
 800a71e:	2200      	movs	r2, #0
 800a720:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800a722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a724:	8afa      	ldrh	r2, [r7, #22]
 800a726:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800a728:	8afa      	ldrh	r2, [r7, #22]
 800a72a:	8b7b      	ldrh	r3, [r7, #26]
 800a72c:	4413      	add	r3, r2
 800a72e:	b29a      	uxth	r2, r3
 800a730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a732:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800a734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a736:	88db      	ldrh	r3, [r3, #6]
 800a738:	b29b      	uxth	r3, r3
 800a73a:	8afa      	ldrh	r2, [r7, #22]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d902      	bls.n	800a746 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a740:	f04f 33ff 	mov.w	r3, #4294967295
 800a744:	e106      	b.n	800a954 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	627b      	str	r3, [r7, #36]	; 0x24
 800a74c:	e068      	b.n	800a820 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800a754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a756:	889b      	ldrh	r3, [r3, #4]
 800a758:	b29a      	uxth	r2, r3
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	889b      	ldrh	r3, [r3, #4]
 800a75e:	b29b      	uxth	r3, r3
 800a760:	429a      	cmp	r2, r3
 800a762:	d235      	bcs.n	800a7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800a764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a768:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800a76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d020      	beq.n	800a7b2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800a770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a772:	889b      	ldrh	r3, [r3, #4]
 800a774:	b29a      	uxth	r2, r3
 800a776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a778:	88db      	ldrh	r3, [r3, #6]
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d307      	bcc.n	800a790 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800a780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a782:	88db      	ldrh	r3, [r3, #6]
 800a784:	b29a      	uxth	r2, r3
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	889b      	ldrh	r3, [r3, #4]
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d902      	bls.n	800a796 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a790:	f04f 33ff 	mov.w	r3, #4294967295
 800a794:	e0de      	b.n	800a954 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800a796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800a79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79e:	88db      	ldrh	r3, [r3, #6]
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a4:	889b      	ldrh	r3, [r3, #4]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d03d      	beq.n	800a828 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800a7b0:	e03a      	b.n	800a828 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800a7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b4:	88db      	ldrh	r3, [r3, #6]
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	889b      	ldrh	r3, [r3, #4]
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d902      	bls.n	800a7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a7c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7c6:	e0c5      	b.n	800a954 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	605a      	str	r2, [r3, #4]
      break;
 800a7ce:	e02b      	b.n	800a828 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800a7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d2:	889b      	ldrh	r3, [r3, #4]
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	889b      	ldrh	r3, [r3, #4]
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d102      	bne.n	800a7e6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e4:	e0b6      	b.n	800a954 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800a7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e8:	889b      	ldrh	r3, [r3, #4]
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	88db      	ldrh	r3, [r3, #6]
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d202      	bcs.n	800a7fc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fa:	e0ab      	b.n	800a954 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800a7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d009      	beq.n	800a816 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800a802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a804:	88db      	ldrh	r3, [r3, #6]
 800a806:	b29a      	uxth	r2, r3
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	889b      	ldrh	r3, [r3, #4]
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	429a      	cmp	r2, r3
 800a810:	d001      	beq.n	800a816 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a822:	2b00      	cmp	r3, #0
 800a824:	d193      	bne.n	800a74e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800a826:	e000      	b.n	800a82a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800a828:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d12d      	bne.n	800a88c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a832:	2b00      	cmp	r3, #0
 800a834:	d01c      	beq.n	800a870 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800a836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a838:	88db      	ldrh	r3, [r3, #6]
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83e:	889b      	ldrh	r3, [r3, #4]
 800a840:	b29b      	uxth	r3, r3
 800a842:	429a      	cmp	r2, r3
 800a844:	d906      	bls.n	800a854 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800a846:	4b45      	ldr	r3, [pc, #276]	; (800a95c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a848:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800a84c:	4944      	ldr	r1, [pc, #272]	; (800a960 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800a84e:	4845      	ldr	r0, [pc, #276]	; (800a964 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a850:	f009 f8c0 	bl	80139d4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800a85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85c:	88db      	ldrh	r3, [r3, #6]
 800a85e:	b29a      	uxth	r2, r3
 800a860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a862:	889b      	ldrh	r3, [r3, #4]
 800a864:	b29b      	uxth	r3, r3
 800a866:	429a      	cmp	r2, r3
 800a868:	d010      	beq.n	800a88c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	623b      	str	r3, [r7, #32]
 800a86e:	e00d      	b.n	800a88c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d006      	beq.n	800a886 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800a878:	4b38      	ldr	r3, [pc, #224]	; (800a95c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a87a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800a87e:	493a      	ldr	r1, [pc, #232]	; (800a968 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800a880:	4838      	ldr	r0, [pc, #224]	; (800a964 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a882:	f009 f8a7 	bl	80139d4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d105      	bne.n	800a89e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	7f9b      	ldrb	r3, [r3, #30]
 800a896:	f003 0301 	and.w	r3, r3, #1
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d059      	beq.n	800a952 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800a89e:	6a3b      	ldr	r3, [r7, #32]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d04f      	beq.n	800a944 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d006      	beq.n	800a8ba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	889b      	ldrh	r3, [r3, #4]
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d002      	beq.n	800a8c0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	623b      	str	r3, [r7, #32]
 800a8be:	e041      	b.n	800a944 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800a8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800a8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a8ca:	e012      	b.n	800a8f2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800a8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d4:	88db      	ldrh	r3, [r3, #6]
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8da:	889b      	ldrh	r3, [r3, #4]
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d002      	beq.n	800a8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	623b      	str	r3, [r7, #32]
            break;
 800a8e6:	e007      	b.n	800a8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800a8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800a8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1e9      	bne.n	800a8cc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d022      	beq.n	800a944 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d106      	bne.n	800a914 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800a906:	4b15      	ldr	r3, [pc, #84]	; (800a95c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a908:	f240 12df 	movw	r2, #479	; 0x1df
 800a90c:	4917      	ldr	r1, [pc, #92]	; (800a96c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800a90e:	4815      	ldr	r0, [pc, #84]	; (800a964 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a910:	f009 f860 	bl	80139d4 <iprintf>
          LWIP_ASSERT("sanity check",
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d106      	bne.n	800a92e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800a920:	4b0e      	ldr	r3, [pc, #56]	; (800a95c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a922:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a926:	4911      	ldr	r1, [pc, #68]	; (800a96c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800a928:	480e      	ldr	r0, [pc, #56]	; (800a964 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a92a:	f009 f853 	bl	80139d4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800a92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d006      	beq.n	800a944 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800a936:	4b09      	ldr	r3, [pc, #36]	; (800a95c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a938:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800a93c:	490c      	ldr	r1, [pc, #48]	; (800a970 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800a93e:	4809      	ldr	r0, [pc, #36]	; (800a964 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a940:	f009 f848 	bl	80139d4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800a944:	6a3b      	ldr	r3, [r7, #32]
 800a946:	2b00      	cmp	r3, #0
 800a948:	bf14      	ite	ne
 800a94a:	2301      	movne	r3, #1
 800a94c:	2300      	moveq	r3, #0
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	e000      	b.n	800a954 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3730      	adds	r7, #48	; 0x30
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	080154cc 	.word	0x080154cc
 800a960:	080155ec 	.word	0x080155ec
 800a964:	08015550 	.word	0x08015550
 800a968:	0801560c 	.word	0x0801560c
 800a96c:	08015644 	.word	0x08015644
 800a970:	08015654 	.word	0x08015654

0800a974 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b08e      	sub	sp, #56	; 0x38
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800a982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	f003 030f 	and.w	r3, r3, #15
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b14      	cmp	r3, #20
 800a992:	f040 8171 	bne.w	800ac78 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a998:	88db      	ldrh	r3, [r3, #6]
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fd fea5 	bl	80086ec <lwip_htons>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	00db      	lsls	r3, r3, #3
 800a9ac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b0:	885b      	ldrh	r3, [r3, #2]
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fd fe99 	bl	80086ec <lwip_htons>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	f003 030f 	and.w	r3, r3, #15
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800a9ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	f0c0 8150 	bcc.w	800ac7c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800a9dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a9e4:	1ad3      	subs	r3, r2, r3
 800a9e6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f001 ff43 	bl	800c874 <pbuf_clen>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800a9f2:	4b8c      	ldr	r3, [pc, #560]	; (800ac24 <ip4_reass+0x2b0>)
 800a9f4:	881b      	ldrh	r3, [r3, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	8c3b      	ldrh	r3, [r7, #32]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	2b0a      	cmp	r3, #10
 800a9fe:	dd10      	ble.n	800aa22 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800aa00:	8c3b      	ldrh	r3, [r7, #32]
 800aa02:	4619      	mov	r1, r3
 800aa04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa06:	f7ff fd81 	bl	800a50c <ip_reass_remove_oldest_datagram>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f000 8137 	beq.w	800ac80 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800aa12:	4b84      	ldr	r3, [pc, #528]	; (800ac24 <ip4_reass+0x2b0>)
 800aa14:	881b      	ldrh	r3, [r3, #0]
 800aa16:	461a      	mov	r2, r3
 800aa18:	8c3b      	ldrh	r3, [r7, #32]
 800aa1a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800aa1c:	2b0a      	cmp	r3, #10
 800aa1e:	f300 812f 	bgt.w	800ac80 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800aa22:	4b81      	ldr	r3, [pc, #516]	; (800ac28 <ip4_reass+0x2b4>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	633b      	str	r3, [r7, #48]	; 0x30
 800aa28:	e015      	b.n	800aa56 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2c:	695a      	ldr	r2, [r3, #20]
 800aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d10c      	bne.n	800aa50 <ip4_reass+0xdc>
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	699a      	ldr	r2, [r3, #24]
 800aa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d106      	bne.n	800aa50 <ip4_reass+0xdc>
 800aa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa44:	899a      	ldrh	r2, [r3, #12]
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	889b      	ldrh	r3, [r3, #4]
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d006      	beq.n	800aa5e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800aa50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	633b      	str	r3, [r7, #48]	; 0x30
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1e6      	bne.n	800aa2a <ip4_reass+0xb6>
 800aa5c:	e000      	b.n	800aa60 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800aa5e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800aa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d109      	bne.n	800aa7a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800aa66:	8c3b      	ldrh	r3, [r7, #32]
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa6c:	f7ff fdb0 	bl	800a5d0 <ip_reass_enqueue_new_datagram>
 800aa70:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d11c      	bne.n	800aab2 <ip4_reass+0x13e>
      goto nullreturn;
 800aa78:	e105      	b.n	800ac86 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	88db      	ldrh	r3, [r3, #6]
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fd fe33 	bl	80086ec <lwip_htons>
 800aa86:	4603      	mov	r3, r0
 800aa88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d110      	bne.n	800aab2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800aa90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa92:	89db      	ldrh	r3, [r3, #14]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fd fe29 	bl	80086ec <lwip_htons>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d006      	beq.n	800aab2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	2214      	movs	r2, #20
 800aaaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aaac:	4618      	mov	r0, r3
 800aaae:	f008 ff61 	bl	8013974 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800aab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab4:	88db      	ldrh	r3, [r3, #6]
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	f003 0320 	and.w	r3, r3, #32
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	bf0c      	ite	eq
 800aac0:	2301      	moveq	r3, #1
 800aac2:	2300      	movne	r3, #0
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00e      	beq.n	800aaec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800aace:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aad2:	4413      	add	r3, r2
 800aad4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800aad6:	8b7a      	ldrh	r2, [r7, #26]
 800aad8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aada:	429a      	cmp	r2, r3
 800aadc:	f0c0 80a0 	bcc.w	800ac20 <ip4_reass+0x2ac>
 800aae0:	8b7b      	ldrh	r3, [r7, #26]
 800aae2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800aae6:	4293      	cmp	r3, r2
 800aae8:	f200 809a 	bhi.w	800ac20 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800aaec:	69fa      	ldr	r2, [r7, #28]
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaf2:	f7ff fdd5 	bl	800a6a0 <ip_reass_chain_frag_into_datagram_and_validate>
 800aaf6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aafe:	f000 809b 	beq.w	800ac38 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ab02:	4b48      	ldr	r3, [pc, #288]	; (800ac24 <ip4_reass+0x2b0>)
 800ab04:	881a      	ldrh	r2, [r3, #0]
 800ab06:	8c3b      	ldrh	r3, [r7, #32]
 800ab08:	4413      	add	r3, r2
 800ab0a:	b29a      	uxth	r2, r3
 800ab0c:	4b45      	ldr	r3, [pc, #276]	; (800ac24 <ip4_reass+0x2b0>)
 800ab0e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00d      	beq.n	800ab32 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ab16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ab18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab1a:	4413      	add	r3, r2
 800ab1c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab20:	8a7a      	ldrh	r2, [r7, #18]
 800ab22:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ab24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab26:	7f9b      	ldrb	r3, [r3, #30]
 800ab28:	f043 0301 	orr.w	r3, r3, #1
 800ab2c:	b2da      	uxtb	r2, r3
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d171      	bne.n	800ac1c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	8b9b      	ldrh	r3, [r3, #28]
 800ab3c:	3314      	adds	r3, #20
 800ab3e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ab40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ab52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab54:	3308      	adds	r3, #8
 800ab56:	2214      	movs	r2, #20
 800ab58:	4619      	mov	r1, r3
 800ab5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab5c:	f008 ff0a 	bl	8013974 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ab60:	8a3b      	ldrh	r3, [r7, #16]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fd fdc2 	bl	80086ec <lwip_htons>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	2200      	movs	r2, #0
 800ab74:	719a      	strb	r2, [r3, #6]
 800ab76:	2200      	movs	r2, #0
 800ab78:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	729a      	strb	r2, [r3, #10]
 800ab80:	2200      	movs	r2, #0
 800ab82:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ab8a:	e00d      	b.n	800aba8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ab8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ab92:	2114      	movs	r1, #20
 800ab94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab96:	f001 fd59 	bl	800c64c <pbuf_remove_header>
      pbuf_cat(p, r);
 800ab9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f001 fea9 	bl	800c8f4 <pbuf_cat>
      r = iprh->next_pbuf;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800aba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1ee      	bne.n	800ab8c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800abae:	4b1e      	ldr	r3, [pc, #120]	; (800ac28 <ip4_reass+0x2b4>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d102      	bne.n	800abbe <ip4_reass+0x24a>
      ipr_prev = NULL;
 800abb8:	2300      	movs	r3, #0
 800abba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abbc:	e010      	b.n	800abe0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800abbe:	4b1a      	ldr	r3, [pc, #104]	; (800ac28 <ip4_reass+0x2b4>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abc4:	e007      	b.n	800abd6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800abc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abcc:	429a      	cmp	r2, r3
 800abce:	d006      	beq.n	800abde <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800abd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1f4      	bne.n	800abc6 <ip4_reass+0x252>
 800abdc:	e000      	b.n	800abe0 <ip4_reass+0x26c>
          break;
 800abde:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800abe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abe4:	f7ff fd2e 	bl	800a644 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f001 fe43 	bl	800c874 <pbuf_clen>
 800abee:	4603      	mov	r3, r0
 800abf0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800abf2:	4b0c      	ldr	r3, [pc, #48]	; (800ac24 <ip4_reass+0x2b0>)
 800abf4:	881b      	ldrh	r3, [r3, #0]
 800abf6:	8c3a      	ldrh	r2, [r7, #32]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d906      	bls.n	800ac0a <ip4_reass+0x296>
 800abfc:	4b0b      	ldr	r3, [pc, #44]	; (800ac2c <ip4_reass+0x2b8>)
 800abfe:	f240 229b 	movw	r2, #667	; 0x29b
 800ac02:	490b      	ldr	r1, [pc, #44]	; (800ac30 <ip4_reass+0x2bc>)
 800ac04:	480b      	ldr	r0, [pc, #44]	; (800ac34 <ip4_reass+0x2c0>)
 800ac06:	f008 fee5 	bl	80139d4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ac0a:	4b06      	ldr	r3, [pc, #24]	; (800ac24 <ip4_reass+0x2b0>)
 800ac0c:	881a      	ldrh	r2, [r3, #0]
 800ac0e:	8c3b      	ldrh	r3, [r7, #32]
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	4b03      	ldr	r3, [pc, #12]	; (800ac24 <ip4_reass+0x2b0>)
 800ac16:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	e038      	b.n	800ac8e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	e036      	b.n	800ac8e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ac20:	bf00      	nop
 800ac22:	e00a      	b.n	800ac3a <ip4_reass+0x2c6>
 800ac24:	2400434c 	.word	0x2400434c
 800ac28:	24004348 	.word	0x24004348
 800ac2c:	080154cc 	.word	0x080154cc
 800ac30:	08015678 	.word	0x08015678
 800ac34:	08015550 	.word	0x08015550
    goto nullreturn_ipr;
 800ac38:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d106      	bne.n	800ac4e <ip4_reass+0x2da>
 800ac40:	4b15      	ldr	r3, [pc, #84]	; (800ac98 <ip4_reass+0x324>)
 800ac42:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ac46:	4915      	ldr	r1, [pc, #84]	; (800ac9c <ip4_reass+0x328>)
 800ac48:	4815      	ldr	r0, [pc, #84]	; (800aca0 <ip4_reass+0x32c>)
 800ac4a:	f008 fec3 	bl	80139d4 <iprintf>
  if (ipr->p == NULL) {
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d116      	bne.n	800ac84 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ac56:	4b13      	ldr	r3, [pc, #76]	; (800aca4 <ip4_reass+0x330>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d006      	beq.n	800ac6e <ip4_reass+0x2fa>
 800ac60:	4b0d      	ldr	r3, [pc, #52]	; (800ac98 <ip4_reass+0x324>)
 800ac62:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ac66:	4910      	ldr	r1, [pc, #64]	; (800aca8 <ip4_reass+0x334>)
 800ac68:	480d      	ldr	r0, [pc, #52]	; (800aca0 <ip4_reass+0x32c>)
 800ac6a:	f008 feb3 	bl	80139d4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ac6e:	2100      	movs	r1, #0
 800ac70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac72:	f7ff fce7 	bl	800a644 <ip_reass_dequeue_datagram>
 800ac76:	e006      	b.n	800ac86 <ip4_reass+0x312>
    goto nullreturn;
 800ac78:	bf00      	nop
 800ac7a:	e004      	b.n	800ac86 <ip4_reass+0x312>
    goto nullreturn;
 800ac7c:	bf00      	nop
 800ac7e:	e002      	b.n	800ac86 <ip4_reass+0x312>
      goto nullreturn;
 800ac80:	bf00      	nop
 800ac82:	e000      	b.n	800ac86 <ip4_reass+0x312>
  }

nullreturn:
 800ac84:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f001 fd66 	bl	800c758 <pbuf_free>
  return NULL;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3738      	adds	r7, #56	; 0x38
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	080154cc 	.word	0x080154cc
 800ac9c:	08015694 	.word	0x08015694
 800aca0:	08015550 	.word	0x08015550
 800aca4:	24004348 	.word	0x24004348
 800aca8:	080156a0 	.word	0x080156a0

0800acac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800acb0:	2005      	movs	r0, #5
 800acb2:	f000 fe37 	bl	800b924 <memp_malloc>
 800acb6:	4603      	mov	r3, r0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	bd80      	pop	{r7, pc}

0800acbc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d106      	bne.n	800acd8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800acca:	4b07      	ldr	r3, [pc, #28]	; (800ace8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800accc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800acd0:	4906      	ldr	r1, [pc, #24]	; (800acec <ip_frag_free_pbuf_custom_ref+0x30>)
 800acd2:	4807      	ldr	r0, [pc, #28]	; (800acf0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800acd4:	f008 fe7e 	bl	80139d4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800acd8:	6879      	ldr	r1, [r7, #4]
 800acda:	2005      	movs	r0, #5
 800acdc:	f000 fe98 	bl	800ba10 <memp_free>
}
 800ace0:	bf00      	nop
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	080154cc 	.word	0x080154cc
 800acec:	080156c0 	.word	0x080156c0
 800acf0:	08015550 	.word	0x08015550

0800acf4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d106      	bne.n	800ad14 <ipfrag_free_pbuf_custom+0x20>
 800ad06:	4b11      	ldr	r3, [pc, #68]	; (800ad4c <ipfrag_free_pbuf_custom+0x58>)
 800ad08:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ad0c:	4910      	ldr	r1, [pc, #64]	; (800ad50 <ipfrag_free_pbuf_custom+0x5c>)
 800ad0e:	4811      	ldr	r0, [pc, #68]	; (800ad54 <ipfrag_free_pbuf_custom+0x60>)
 800ad10:	f008 fe60 	bl	80139d4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d006      	beq.n	800ad2a <ipfrag_free_pbuf_custom+0x36>
 800ad1c:	4b0b      	ldr	r3, [pc, #44]	; (800ad4c <ipfrag_free_pbuf_custom+0x58>)
 800ad1e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ad22:	490d      	ldr	r1, [pc, #52]	; (800ad58 <ipfrag_free_pbuf_custom+0x64>)
 800ad24:	480b      	ldr	r0, [pc, #44]	; (800ad54 <ipfrag_free_pbuf_custom+0x60>)
 800ad26:	f008 fe55 	bl	80139d4 <iprintf>
  if (pcr->original != NULL) {
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	695b      	ldr	r3, [r3, #20]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d004      	beq.n	800ad3c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	695b      	ldr	r3, [r3, #20]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f001 fd0e 	bl	800c758 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f7ff ffbd 	bl	800acbc <ip_frag_free_pbuf_custom_ref>
}
 800ad42:	bf00      	nop
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	080154cc 	.word	0x080154cc
 800ad50:	080156cc 	.word	0x080156cc
 800ad54:	08015550 	.word	0x08015550
 800ad58:	080156d8 	.word	0x080156d8

0800ad5c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b094      	sub	sp, #80	; 0x50
 800ad60:	af02      	add	r7, sp, #8
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ad72:	3b14      	subs	r3, #20
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	da00      	bge.n	800ad7a <ip4_frag+0x1e>
 800ad78:	3307      	adds	r3, #7
 800ad7a:	10db      	asrs	r3, r3, #3
 800ad7c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ad7e:	2314      	movs	r3, #20
 800ad80:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ad88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	f003 030f 	and.w	r3, r3, #15
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b14      	cmp	r3, #20
 800ad9c:	d002      	beq.n	800ada4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ad9e:	f06f 0305 	mvn.w	r3, #5
 800ada2:	e110      	b.n	800afc6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	895b      	ldrh	r3, [r3, #10]
 800ada8:	2b13      	cmp	r3, #19
 800adaa:	d809      	bhi.n	800adc0 <ip4_frag+0x64>
 800adac:	4b88      	ldr	r3, [pc, #544]	; (800afd0 <ip4_frag+0x274>)
 800adae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800adb2:	4988      	ldr	r1, [pc, #544]	; (800afd4 <ip4_frag+0x278>)
 800adb4:	4888      	ldr	r0, [pc, #544]	; (800afd8 <ip4_frag+0x27c>)
 800adb6:	f008 fe0d 	bl	80139d4 <iprintf>
 800adba:	f06f 0305 	mvn.w	r3, #5
 800adbe:	e102      	b.n	800afc6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800adc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc2:	88db      	ldrh	r3, [r3, #6]
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7fd fc90 	bl	80086ec <lwip_htons>
 800adcc:	4603      	mov	r3, r0
 800adce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800add0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800add2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800add6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800adda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800addc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ade0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	891b      	ldrh	r3, [r3, #8]
 800ade6:	3b14      	subs	r3, #20
 800ade8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800adec:	e0e1      	b.n	800afb2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800adee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800adf0:	00db      	lsls	r3, r3, #3
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800adf8:	4293      	cmp	r3, r2
 800adfa:	bf28      	it	cs
 800adfc:	4613      	movcs	r3, r2
 800adfe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ae00:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ae04:	2114      	movs	r1, #20
 800ae06:	200e      	movs	r0, #14
 800ae08:	f001 f9c2 	bl	800c190 <pbuf_alloc>
 800ae0c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 80d5 	beq.w	800afc0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ae16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae18:	895b      	ldrh	r3, [r3, #10]
 800ae1a:	2b13      	cmp	r3, #19
 800ae1c:	d806      	bhi.n	800ae2c <ip4_frag+0xd0>
 800ae1e:	4b6c      	ldr	r3, [pc, #432]	; (800afd0 <ip4_frag+0x274>)
 800ae20:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ae24:	496d      	ldr	r1, [pc, #436]	; (800afdc <ip4_frag+0x280>)
 800ae26:	486c      	ldr	r0, [pc, #432]	; (800afd8 <ip4_frag+0x27c>)
 800ae28:	f008 fdd4 	bl	80139d4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	2214      	movs	r2, #20
 800ae32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae34:	4618      	mov	r0, r3
 800ae36:	f008 fd9d 	bl	8013974 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ae40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ae42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ae46:	e064      	b.n	800af12 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	895a      	ldrh	r2, [r3, #10]
 800ae4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	895b      	ldrh	r3, [r3, #10]
 800ae56:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d906      	bls.n	800ae6a <ip4_frag+0x10e>
 800ae5c:	4b5c      	ldr	r3, [pc, #368]	; (800afd0 <ip4_frag+0x274>)
 800ae5e:	f240 322d 	movw	r2, #813	; 0x32d
 800ae62:	495f      	ldr	r1, [pc, #380]	; (800afe0 <ip4_frag+0x284>)
 800ae64:	485c      	ldr	r0, [pc, #368]	; (800afd8 <ip4_frag+0x27c>)
 800ae66:	f008 fdb5 	bl	80139d4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ae6a:	8bfa      	ldrh	r2, [r7, #30]
 800ae6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ae70:	4293      	cmp	r3, r2
 800ae72:	bf28      	it	cs
 800ae74:	4613      	movcs	r3, r2
 800ae76:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ae7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d105      	bne.n	800ae8e <ip4_frag+0x132>
        poff = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	60fb      	str	r3, [r7, #12]
        continue;
 800ae8c:	e041      	b.n	800af12 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ae8e:	f7ff ff0d 	bl	800acac <ip_frag_alloc_pbuf_custom_ref>
 800ae92:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d103      	bne.n	800aea2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ae9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae9c:	f001 fc5c 	bl	800c758 <pbuf_free>
        goto memerr;
 800aea0:	e08f      	b.n	800afc2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800aea2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800aea8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aeaa:	4413      	add	r3, r2
 800aeac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800aeb0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800aeb4:	9201      	str	r2, [sp, #4]
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2241      	movs	r2, #65	; 0x41
 800aebc:	2000      	movs	r0, #0
 800aebe:	f001 fa91 	bl	800c3e4 <pbuf_alloced_custom>
 800aec2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d106      	bne.n	800aed8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800aeca:	69b8      	ldr	r0, [r7, #24]
 800aecc:	f7ff fef6 	bl	800acbc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800aed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aed2:	f001 fc41 	bl	800c758 <pbuf_free>
        goto memerr;
 800aed6:	e074      	b.n	800afc2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f001 fce3 	bl	800c8a4 <pbuf_ref>
      pcr->original = p;
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	4a3f      	ldr	r2, [pc, #252]	; (800afe4 <ip4_frag+0x288>)
 800aee8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800aeea:	6979      	ldr	r1, [r7, #20]
 800aeec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aeee:	f001 fd01 	bl	800c8f4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800aef2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800aef6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800af00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800af04:	2b00      	cmp	r3, #0
 800af06:	d004      	beq.n	800af12 <ip4_frag+0x1b6>
        poff = 0;
 800af08:	2300      	movs	r3, #0
 800af0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800af12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800af16:	2b00      	cmp	r3, #0
 800af18:	d196      	bne.n	800ae48 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800af1a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800af1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800af20:	4413      	add	r3, r2
 800af22:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800af28:	f1a3 0213 	sub.w	r2, r3, #19
 800af2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af30:	429a      	cmp	r2, r3
 800af32:	bfcc      	ite	gt
 800af34:	2301      	movgt	r3, #1
 800af36:	2300      	movle	r3, #0
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800af3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800af40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af44:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800af46:	6a3b      	ldr	r3, [r7, #32]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d002      	beq.n	800af52 <ip4_frag+0x1f6>
 800af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800af52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800af54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800af58:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800af5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fd fbc5 	bl	80086ec <lwip_htons>
 800af62:	4603      	mov	r3, r0
 800af64:	461a      	mov	r2, r3
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800af6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800af6c:	3314      	adds	r3, #20
 800af6e:	b29b      	uxth	r3, r3
 800af70:	4618      	mov	r0, r3
 800af72:	f7fd fbbb 	bl	80086ec <lwip_htons>
 800af76:	4603      	mov	r3, r0
 800af78:	461a      	mov	r2, r3
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af80:	2200      	movs	r2, #0
 800af82:	729a      	strb	r2, [r3, #10]
 800af84:	2200      	movs	r2, #0
 800af86:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	695b      	ldr	r3, [r3, #20]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af90:	68b8      	ldr	r0, [r7, #8]
 800af92:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800af94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af96:	f001 fbdf 	bl	800c758 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800af9a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800af9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800afa6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800afaa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800afac:	4413      	add	r3, r2
 800afae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800afb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f47f af19 	bne.w	800adee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	e002      	b.n	800afc6 <ip4_frag+0x26a>
      goto memerr;
 800afc0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800afc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3748      	adds	r7, #72	; 0x48
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	080154cc 	.word	0x080154cc
 800afd4:	080156e4 	.word	0x080156e4
 800afd8:	08015550 	.word	0x08015550
 800afdc:	08015700 	.word	0x08015700
 800afe0:	08015720 	.word	0x08015720
 800afe4:	0800acf5 	.word	0x0800acf5

0800afe8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	4603      	mov	r3, r0
 800aff0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800aff2:	4b05      	ldr	r3, [pc, #20]	; (800b008 <ptr_to_mem+0x20>)
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	88fb      	ldrh	r3, [r7, #6]
 800aff8:	4413      	add	r3, r2
}
 800affa:	4618      	mov	r0, r3
 800affc:	370c      	adds	r7, #12
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	24004350 	.word	0x24004350

0800b00c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b014:	4b05      	ldr	r3, [pc, #20]	; (800b02c <mem_to_ptr+0x20>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	b29b      	uxth	r3, r3
}
 800b01e:	4618      	mov	r0, r3
 800b020:	370c      	adds	r7, #12
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	24004350 	.word	0x24004350

0800b030 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b030:	b590      	push	{r4, r7, lr}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b038:	4b47      	ldr	r3, [pc, #284]	; (800b158 <plug_holes+0x128>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d206      	bcs.n	800b050 <plug_holes+0x20>
 800b042:	4b46      	ldr	r3, [pc, #280]	; (800b15c <plug_holes+0x12c>)
 800b044:	f240 12df 	movw	r2, #479	; 0x1df
 800b048:	4945      	ldr	r1, [pc, #276]	; (800b160 <plug_holes+0x130>)
 800b04a:	4846      	ldr	r0, [pc, #280]	; (800b164 <plug_holes+0x134>)
 800b04c:	f008 fcc2 	bl	80139d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b050:	4b45      	ldr	r3, [pc, #276]	; (800b168 <plug_holes+0x138>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	429a      	cmp	r2, r3
 800b058:	d306      	bcc.n	800b068 <plug_holes+0x38>
 800b05a:	4b40      	ldr	r3, [pc, #256]	; (800b15c <plug_holes+0x12c>)
 800b05c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b060:	4942      	ldr	r1, [pc, #264]	; (800b16c <plug_holes+0x13c>)
 800b062:	4840      	ldr	r0, [pc, #256]	; (800b164 <plug_holes+0x134>)
 800b064:	f008 fcb6 	bl	80139d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	791b      	ldrb	r3, [r3, #4]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d006      	beq.n	800b07e <plug_holes+0x4e>
 800b070:	4b3a      	ldr	r3, [pc, #232]	; (800b15c <plug_holes+0x12c>)
 800b072:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b076:	493e      	ldr	r1, [pc, #248]	; (800b170 <plug_holes+0x140>)
 800b078:	483a      	ldr	r0, [pc, #232]	; (800b164 <plug_holes+0x134>)
 800b07a:	f008 fcab 	bl	80139d4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	881b      	ldrh	r3, [r3, #0]
 800b082:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b086:	4293      	cmp	r3, r2
 800b088:	d906      	bls.n	800b098 <plug_holes+0x68>
 800b08a:	4b34      	ldr	r3, [pc, #208]	; (800b15c <plug_holes+0x12c>)
 800b08c:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b090:	4938      	ldr	r1, [pc, #224]	; (800b174 <plug_holes+0x144>)
 800b092:	4834      	ldr	r0, [pc, #208]	; (800b164 <plug_holes+0x134>)
 800b094:	f008 fc9e 	bl	80139d4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	881b      	ldrh	r3, [r3, #0]
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7ff ffa3 	bl	800afe8 <ptr_to_mem>
 800b0a2:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d025      	beq.n	800b0f8 <plug_holes+0xc8>
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	791b      	ldrb	r3, [r3, #4]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d121      	bne.n	800b0f8 <plug_holes+0xc8>
 800b0b4:	4b2c      	ldr	r3, [pc, #176]	; (800b168 <plug_holes+0x138>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d01c      	beq.n	800b0f8 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b0be:	4b2e      	ldr	r3, [pc, #184]	; (800b178 <plug_holes+0x148>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d102      	bne.n	800b0ce <plug_holes+0x9e>
      lfree = mem;
 800b0c8:	4a2b      	ldr	r2, [pc, #172]	; (800b178 <plug_holes+0x148>)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	881a      	ldrh	r2, [r3, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	881b      	ldrh	r3, [r3, #0]
 800b0da:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d00a      	beq.n	800b0f8 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	881b      	ldrh	r3, [r3, #0]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7ff ff7e 	bl	800afe8 <ptr_to_mem>
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f7ff ff8c 	bl	800b00c <mem_to_ptr>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	885b      	ldrh	r3, [r3, #2]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7ff ff73 	bl	800afe8 <ptr_to_mem>
 800b102:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d020      	beq.n	800b14e <plug_holes+0x11e>
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	791b      	ldrb	r3, [r3, #4]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d11c      	bne.n	800b14e <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b114:	4b18      	ldr	r3, [pc, #96]	; (800b178 <plug_holes+0x148>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d102      	bne.n	800b124 <plug_holes+0xf4>
      lfree = pmem;
 800b11e:	4a16      	ldr	r2, [pc, #88]	; (800b178 <plug_holes+0x148>)
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	881a      	ldrh	r2, [r3, #0]
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	881b      	ldrh	r3, [r3, #0]
 800b130:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b134:	4293      	cmp	r3, r2
 800b136:	d00a      	beq.n	800b14e <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	881b      	ldrh	r3, [r3, #0]
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7ff ff53 	bl	800afe8 <ptr_to_mem>
 800b142:	4604      	mov	r4, r0
 800b144:	68b8      	ldr	r0, [r7, #8]
 800b146:	f7ff ff61 	bl	800b00c <mem_to_ptr>
 800b14a:	4603      	mov	r3, r0
 800b14c:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b14e:	bf00      	nop
 800b150:	3714      	adds	r7, #20
 800b152:	46bd      	mov	sp, r7
 800b154:	bd90      	pop	{r4, r7, pc}
 800b156:	bf00      	nop
 800b158:	24004350 	.word	0x24004350
 800b15c:	08015730 	.word	0x08015730
 800b160:	0801579c 	.word	0x0801579c
 800b164:	080157b4 	.word	0x080157b4
 800b168:	24004354 	.word	0x24004354
 800b16c:	080157dc 	.word	0x080157dc
 800b170:	080157f8 	.word	0x080157f8
 800b174:	08015814 	.word	0x08015814
 800b178:	2400435c 	.word	0x2400435c

0800b17c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b182:	4b1d      	ldr	r3, [pc, #116]	; (800b1f8 <mem_init+0x7c>)
 800b184:	4a1d      	ldr	r2, [pc, #116]	; (800b1fc <mem_init+0x80>)
 800b186:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b188:	4b1b      	ldr	r3, [pc, #108]	; (800b1f8 <mem_init+0x7c>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b194:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b1a2:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 800b1a6:	f7ff ff1f 	bl	800afe8 <ptr_to_mem>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	4a14      	ldr	r2, [pc, #80]	; (800b200 <mem_init+0x84>)
 800b1ae:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b1b0:	4b13      	ldr	r3, [pc, #76]	; (800b200 <mem_init+0x84>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b1b8:	4b11      	ldr	r3, [pc, #68]	; (800b200 <mem_init+0x84>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b1c0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b1c2:	4b0f      	ldr	r3, [pc, #60]	; (800b200 <mem_init+0x84>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b1ca:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b1cc:	4b0a      	ldr	r3, [pc, #40]	; (800b1f8 <mem_init+0x7c>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a0c      	ldr	r2, [pc, #48]	; (800b204 <mem_init+0x88>)
 800b1d2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b1d4:	480c      	ldr	r0, [pc, #48]	; (800b208 <mem_init+0x8c>)
 800b1d6:	f001 fe85 	bl	800cee4 <sys_mutex_new>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d006      	beq.n	800b1ee <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b1e0:	4b0a      	ldr	r3, [pc, #40]	; (800b20c <mem_init+0x90>)
 800b1e2:	f240 221f 	movw	r2, #543	; 0x21f
 800b1e6:	490a      	ldr	r1, [pc, #40]	; (800b210 <mem_init+0x94>)
 800b1e8:	480a      	ldr	r0, [pc, #40]	; (800b214 <mem_init+0x98>)
 800b1ea:	f008 fbf3 	bl	80139d4 <iprintf>
  }
}
 800b1ee:	bf00      	nop
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	24004350 	.word	0x24004350
 800b1fc:	30044000 	.word	0x30044000
 800b200:	24004354 	.word	0x24004354
 800b204:	2400435c 	.word	0x2400435c
 800b208:	24004358 	.word	0x24004358
 800b20c:	08015730 	.word	0x08015730
 800b210:	08015840 	.word	0x08015840
 800b214:	080157b4 	.word	0x080157b4

0800b218 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b086      	sub	sp, #24
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7ff fef3 	bl	800b00c <mem_to_ptr>
 800b226:	4603      	mov	r3, r0
 800b228:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	4618      	mov	r0, r3
 800b230:	f7ff feda 	bl	800afe8 <ptr_to_mem>
 800b234:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	885b      	ldrh	r3, [r3, #2]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7ff fed4 	bl	800afe8 <ptr_to_mem>
 800b240:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	881b      	ldrh	r3, [r3, #0]
 800b246:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d819      	bhi.n	800b282 <mem_link_valid+0x6a>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	885b      	ldrh	r3, [r3, #2]
 800b252:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b256:	4293      	cmp	r3, r2
 800b258:	d813      	bhi.n	800b282 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b25e:	8afa      	ldrh	r2, [r7, #22]
 800b260:	429a      	cmp	r2, r3
 800b262:	d004      	beq.n	800b26e <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	881b      	ldrh	r3, [r3, #0]
 800b268:	8afa      	ldrh	r2, [r7, #22]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d109      	bne.n	800b282 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b26e:	4b08      	ldr	r3, [pc, #32]	; (800b290 <mem_link_valid+0x78>)
 800b270:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	429a      	cmp	r2, r3
 800b276:	d006      	beq.n	800b286 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	885b      	ldrh	r3, [r3, #2]
 800b27c:	8afa      	ldrh	r2, [r7, #22]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d001      	beq.n	800b286 <mem_link_valid+0x6e>
    return 0;
 800b282:	2300      	movs	r3, #0
 800b284:	e000      	b.n	800b288 <mem_link_valid+0x70>
  }
  return 1;
 800b286:	2301      	movs	r3, #1
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3718      	adds	r7, #24
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	24004354 	.word	0x24004354

0800b294 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b088      	sub	sp, #32
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d070      	beq.n	800b384 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f003 0303 	and.w	r3, r3, #3
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00d      	beq.n	800b2c8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b2ac:	4b37      	ldr	r3, [pc, #220]	; (800b38c <mem_free+0xf8>)
 800b2ae:	f240 2273 	movw	r2, #627	; 0x273
 800b2b2:	4937      	ldr	r1, [pc, #220]	; (800b390 <mem_free+0xfc>)
 800b2b4:	4837      	ldr	r0, [pc, #220]	; (800b394 <mem_free+0x100>)
 800b2b6:	f008 fb8d 	bl	80139d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b2ba:	f001 fe71 	bl	800cfa0 <sys_arch_protect>
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f001 fe7b 	bl	800cfbc <sys_arch_unprotect>
    return;
 800b2c6:	e05e      	b.n	800b386 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	3b08      	subs	r3, #8
 800b2cc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b2ce:	4b32      	ldr	r3, [pc, #200]	; (800b398 <mem_free+0x104>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	69fa      	ldr	r2, [r7, #28]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d306      	bcc.n	800b2e6 <mem_free+0x52>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f103 020c 	add.w	r2, r3, #12
 800b2de:	4b2f      	ldr	r3, [pc, #188]	; (800b39c <mem_free+0x108>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d90d      	bls.n	800b302 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b2e6:	4b29      	ldr	r3, [pc, #164]	; (800b38c <mem_free+0xf8>)
 800b2e8:	f240 227f 	movw	r2, #639	; 0x27f
 800b2ec:	492c      	ldr	r1, [pc, #176]	; (800b3a0 <mem_free+0x10c>)
 800b2ee:	4829      	ldr	r0, [pc, #164]	; (800b394 <mem_free+0x100>)
 800b2f0:	f008 fb70 	bl	80139d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b2f4:	f001 fe54 	bl	800cfa0 <sys_arch_protect>
 800b2f8:	6138      	str	r0, [r7, #16]
 800b2fa:	6938      	ldr	r0, [r7, #16]
 800b2fc:	f001 fe5e 	bl	800cfbc <sys_arch_unprotect>
    return;
 800b300:	e041      	b.n	800b386 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b302:	4828      	ldr	r0, [pc, #160]	; (800b3a4 <mem_free+0x110>)
 800b304:	f001 fe0a 	bl	800cf1c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	791b      	ldrb	r3, [r3, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d110      	bne.n	800b332 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b310:	4b1e      	ldr	r3, [pc, #120]	; (800b38c <mem_free+0xf8>)
 800b312:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b316:	4924      	ldr	r1, [pc, #144]	; (800b3a8 <mem_free+0x114>)
 800b318:	481e      	ldr	r0, [pc, #120]	; (800b394 <mem_free+0x100>)
 800b31a:	f008 fb5b 	bl	80139d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b31e:	4821      	ldr	r0, [pc, #132]	; (800b3a4 <mem_free+0x110>)
 800b320:	f001 fe0b 	bl	800cf3a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b324:	f001 fe3c 	bl	800cfa0 <sys_arch_protect>
 800b328:	6178      	str	r0, [r7, #20]
 800b32a:	6978      	ldr	r0, [r7, #20]
 800b32c:	f001 fe46 	bl	800cfbc <sys_arch_unprotect>
    return;
 800b330:	e029      	b.n	800b386 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b332:	69f8      	ldr	r0, [r7, #28]
 800b334:	f7ff ff70 	bl	800b218 <mem_link_valid>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d110      	bne.n	800b360 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b33e:	4b13      	ldr	r3, [pc, #76]	; (800b38c <mem_free+0xf8>)
 800b340:	f240 2295 	movw	r2, #661	; 0x295
 800b344:	4919      	ldr	r1, [pc, #100]	; (800b3ac <mem_free+0x118>)
 800b346:	4813      	ldr	r0, [pc, #76]	; (800b394 <mem_free+0x100>)
 800b348:	f008 fb44 	bl	80139d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b34c:	4815      	ldr	r0, [pc, #84]	; (800b3a4 <mem_free+0x110>)
 800b34e:	f001 fdf4 	bl	800cf3a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b352:	f001 fe25 	bl	800cfa0 <sys_arch_protect>
 800b356:	61b8      	str	r0, [r7, #24]
 800b358:	69b8      	ldr	r0, [r7, #24]
 800b35a:	f001 fe2f 	bl	800cfbc <sys_arch_unprotect>
    return;
 800b35e:	e012      	b.n	800b386 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	2200      	movs	r2, #0
 800b364:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b366:	4b12      	ldr	r3, [pc, #72]	; (800b3b0 <mem_free+0x11c>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	69fa      	ldr	r2, [r7, #28]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d202      	bcs.n	800b376 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b370:	4a0f      	ldr	r2, [pc, #60]	; (800b3b0 <mem_free+0x11c>)
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b376:	69f8      	ldr	r0, [r7, #28]
 800b378:	f7ff fe5a 	bl	800b030 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b37c:	4809      	ldr	r0, [pc, #36]	; (800b3a4 <mem_free+0x110>)
 800b37e:	f001 fddc 	bl	800cf3a <sys_mutex_unlock>
 800b382:	e000      	b.n	800b386 <mem_free+0xf2>
    return;
 800b384:	bf00      	nop
}
 800b386:	3720      	adds	r7, #32
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	08015730 	.word	0x08015730
 800b390:	0801585c 	.word	0x0801585c
 800b394:	080157b4 	.word	0x080157b4
 800b398:	24004350 	.word	0x24004350
 800b39c:	24004354 	.word	0x24004354
 800b3a0:	08015880 	.word	0x08015880
 800b3a4:	24004358 	.word	0x24004358
 800b3a8:	0801589c 	.word	0x0801589c
 800b3ac:	080158c4 	.word	0x080158c4
 800b3b0:	2400435c 	.word	0x2400435c

0800b3b4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b088      	sub	sp, #32
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b3c0:	887b      	ldrh	r3, [r7, #2]
 800b3c2:	3303      	adds	r3, #3
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	f023 0303 	bic.w	r3, r3, #3
 800b3ca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b3cc:	8bfb      	ldrh	r3, [r7, #30]
 800b3ce:	2b0b      	cmp	r3, #11
 800b3d0:	d801      	bhi.n	800b3d6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b3d2:	230c      	movs	r3, #12
 800b3d4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b3d6:	8bfb      	ldrh	r3, [r7, #30]
 800b3d8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d803      	bhi.n	800b3e8 <mem_trim+0x34>
 800b3e0:	8bfa      	ldrh	r2, [r7, #30]
 800b3e2:	887b      	ldrh	r3, [r7, #2]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d201      	bcs.n	800b3ec <mem_trim+0x38>
    return NULL;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	e0dc      	b.n	800b5a6 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b3ec:	4b70      	ldr	r3, [pc, #448]	; (800b5b0 <mem_trim+0x1fc>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d304      	bcc.n	800b400 <mem_trim+0x4c>
 800b3f6:	4b6f      	ldr	r3, [pc, #444]	; (800b5b4 <mem_trim+0x200>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d306      	bcc.n	800b40e <mem_trim+0x5a>
 800b400:	4b6d      	ldr	r3, [pc, #436]	; (800b5b8 <mem_trim+0x204>)
 800b402:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b406:	496d      	ldr	r1, [pc, #436]	; (800b5bc <mem_trim+0x208>)
 800b408:	486d      	ldr	r0, [pc, #436]	; (800b5c0 <mem_trim+0x20c>)
 800b40a:	f008 fae3 	bl	80139d4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b40e:	4b68      	ldr	r3, [pc, #416]	; (800b5b0 <mem_trim+0x1fc>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	429a      	cmp	r2, r3
 800b416:	d304      	bcc.n	800b422 <mem_trim+0x6e>
 800b418:	4b66      	ldr	r3, [pc, #408]	; (800b5b4 <mem_trim+0x200>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d307      	bcc.n	800b432 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b422:	f001 fdbd 	bl	800cfa0 <sys_arch_protect>
 800b426:	60b8      	str	r0, [r7, #8]
 800b428:	68b8      	ldr	r0, [r7, #8]
 800b42a:	f001 fdc7 	bl	800cfbc <sys_arch_unprotect>
    return rmem;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	e0b9      	b.n	800b5a6 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	3b08      	subs	r3, #8
 800b436:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b438:	69b8      	ldr	r0, [r7, #24]
 800b43a:	f7ff fde7 	bl	800b00c <mem_to_ptr>
 800b43e:	4603      	mov	r3, r0
 800b440:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	881a      	ldrh	r2, [r3, #0]
 800b446:	8afb      	ldrh	r3, [r7, #22]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	3b08      	subs	r3, #8
 800b44e:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b450:	8bfa      	ldrh	r2, [r7, #30]
 800b452:	8abb      	ldrh	r3, [r7, #20]
 800b454:	429a      	cmp	r2, r3
 800b456:	d906      	bls.n	800b466 <mem_trim+0xb2>
 800b458:	4b57      	ldr	r3, [pc, #348]	; (800b5b8 <mem_trim+0x204>)
 800b45a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b45e:	4959      	ldr	r1, [pc, #356]	; (800b5c4 <mem_trim+0x210>)
 800b460:	4857      	ldr	r0, [pc, #348]	; (800b5c0 <mem_trim+0x20c>)
 800b462:	f008 fab7 	bl	80139d4 <iprintf>
  if (newsize > size) {
 800b466:	8bfa      	ldrh	r2, [r7, #30]
 800b468:	8abb      	ldrh	r3, [r7, #20]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d901      	bls.n	800b472 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800b46e:	2300      	movs	r3, #0
 800b470:	e099      	b.n	800b5a6 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800b472:	8bfa      	ldrh	r2, [r7, #30]
 800b474:	8abb      	ldrh	r3, [r7, #20]
 800b476:	429a      	cmp	r2, r3
 800b478:	d101      	bne.n	800b47e <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	e093      	b.n	800b5a6 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b47e:	4852      	ldr	r0, [pc, #328]	; (800b5c8 <mem_trim+0x214>)
 800b480:	f001 fd4c 	bl	800cf1c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	881b      	ldrh	r3, [r3, #0]
 800b488:	4618      	mov	r0, r3
 800b48a:	f7ff fdad 	bl	800afe8 <ptr_to_mem>
 800b48e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	791b      	ldrb	r3, [r3, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d141      	bne.n	800b51c <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	881b      	ldrh	r3, [r3, #0]
 800b49c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d106      	bne.n	800b4b2 <mem_trim+0xfe>
 800b4a4:	4b44      	ldr	r3, [pc, #272]	; (800b5b8 <mem_trim+0x204>)
 800b4a6:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b4aa:	4948      	ldr	r1, [pc, #288]	; (800b5cc <mem_trim+0x218>)
 800b4ac:	4844      	ldr	r0, [pc, #272]	; (800b5c0 <mem_trim+0x20c>)
 800b4ae:	f008 fa91 	bl	80139d4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	881b      	ldrh	r3, [r3, #0]
 800b4b6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b4b8:	8afa      	ldrh	r2, [r7, #22]
 800b4ba:	8bfb      	ldrh	r3, [r7, #30]
 800b4bc:	4413      	add	r3, r2
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	3308      	adds	r3, #8
 800b4c2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b4c4:	4b42      	ldr	r3, [pc, #264]	; (800b5d0 <mem_trim+0x21c>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	693a      	ldr	r2, [r7, #16]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d106      	bne.n	800b4dc <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800b4ce:	89fb      	ldrh	r3, [r7, #14]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff fd89 	bl	800afe8 <ptr_to_mem>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	4a3d      	ldr	r2, [pc, #244]	; (800b5d0 <mem_trim+0x21c>)
 800b4da:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b4dc:	89fb      	ldrh	r3, [r7, #14]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7ff fd82 	bl	800afe8 <ptr_to_mem>
 800b4e4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	89ba      	ldrh	r2, [r7, #12]
 800b4f0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	8afa      	ldrh	r2, [r7, #22]
 800b4f6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	89fa      	ldrh	r2, [r7, #14]
 800b4fc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	881b      	ldrh	r3, [r3, #0]
 800b502:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b506:	4293      	cmp	r3, r2
 800b508:	d049      	beq.n	800b59e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	881b      	ldrh	r3, [r3, #0]
 800b50e:	4618      	mov	r0, r3
 800b510:	f7ff fd6a 	bl	800afe8 <ptr_to_mem>
 800b514:	4602      	mov	r2, r0
 800b516:	89fb      	ldrh	r3, [r7, #14]
 800b518:	8053      	strh	r3, [r2, #2]
 800b51a:	e040      	b.n	800b59e <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b51c:	8bfb      	ldrh	r3, [r7, #30]
 800b51e:	f103 0214 	add.w	r2, r3, #20
 800b522:	8abb      	ldrh	r3, [r7, #20]
 800b524:	429a      	cmp	r2, r3
 800b526:	d83a      	bhi.n	800b59e <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b528:	8afa      	ldrh	r2, [r7, #22]
 800b52a:	8bfb      	ldrh	r3, [r7, #30]
 800b52c:	4413      	add	r3, r2
 800b52e:	b29b      	uxth	r3, r3
 800b530:	3308      	adds	r3, #8
 800b532:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	881b      	ldrh	r3, [r3, #0]
 800b538:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d106      	bne.n	800b54e <mem_trim+0x19a>
 800b540:	4b1d      	ldr	r3, [pc, #116]	; (800b5b8 <mem_trim+0x204>)
 800b542:	f240 3216 	movw	r2, #790	; 0x316
 800b546:	4921      	ldr	r1, [pc, #132]	; (800b5cc <mem_trim+0x218>)
 800b548:	481d      	ldr	r0, [pc, #116]	; (800b5c0 <mem_trim+0x20c>)
 800b54a:	f008 fa43 	bl	80139d4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b54e:	89fb      	ldrh	r3, [r7, #14]
 800b550:	4618      	mov	r0, r3
 800b552:	f7ff fd49 	bl	800afe8 <ptr_to_mem>
 800b556:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b558:	4b1d      	ldr	r3, [pc, #116]	; (800b5d0 <mem_trim+0x21c>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	693a      	ldr	r2, [r7, #16]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d202      	bcs.n	800b568 <mem_trim+0x1b4>
      lfree = mem2;
 800b562:	4a1b      	ldr	r2, [pc, #108]	; (800b5d0 <mem_trim+0x21c>)
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	2200      	movs	r2, #0
 800b56c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	881a      	ldrh	r2, [r3, #0]
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	8afa      	ldrh	r2, [r7, #22]
 800b57a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	89fa      	ldrh	r2, [r7, #14]
 800b580:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	881b      	ldrh	r3, [r3, #0]
 800b586:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d007      	beq.n	800b59e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	881b      	ldrh	r3, [r3, #0]
 800b592:	4618      	mov	r0, r3
 800b594:	f7ff fd28 	bl	800afe8 <ptr_to_mem>
 800b598:	4602      	mov	r2, r0
 800b59a:	89fb      	ldrh	r3, [r7, #14]
 800b59c:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b59e:	480a      	ldr	r0, [pc, #40]	; (800b5c8 <mem_trim+0x214>)
 800b5a0:	f001 fccb 	bl	800cf3a <sys_mutex_unlock>
  return rmem;
 800b5a4:	687b      	ldr	r3, [r7, #4]
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3720      	adds	r7, #32
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	24004350 	.word	0x24004350
 800b5b4:	24004354 	.word	0x24004354
 800b5b8:	08015730 	.word	0x08015730
 800b5bc:	080158f8 	.word	0x080158f8
 800b5c0:	080157b4 	.word	0x080157b4
 800b5c4:	08015910 	.word	0x08015910
 800b5c8:	24004358 	.word	0x24004358
 800b5cc:	08015930 	.word	0x08015930
 800b5d0:	2400435c 	.word	0x2400435c

0800b5d4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b088      	sub	sp, #32
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b5de:	88fb      	ldrh	r3, [r7, #6]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d101      	bne.n	800b5e8 <mem_malloc+0x14>
    return NULL;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	e0e6      	b.n	800b7b6 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b5e8:	88fb      	ldrh	r3, [r7, #6]
 800b5ea:	3303      	adds	r3, #3
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	f023 0303 	bic.w	r3, r3, #3
 800b5f2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b5f4:	8bbb      	ldrh	r3, [r7, #28]
 800b5f6:	2b0b      	cmp	r3, #11
 800b5f8:	d801      	bhi.n	800b5fe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b5fa:	230c      	movs	r3, #12
 800b5fc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b5fe:	8bbb      	ldrh	r3, [r7, #28]
 800b600:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b604:	4293      	cmp	r3, r2
 800b606:	d803      	bhi.n	800b610 <mem_malloc+0x3c>
 800b608:	8bba      	ldrh	r2, [r7, #28]
 800b60a:	88fb      	ldrh	r3, [r7, #6]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d201      	bcs.n	800b614 <mem_malloc+0x40>
    return NULL;
 800b610:	2300      	movs	r3, #0
 800b612:	e0d0      	b.n	800b7b6 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b614:	486a      	ldr	r0, [pc, #424]	; (800b7c0 <mem_malloc+0x1ec>)
 800b616:	f001 fc81 	bl	800cf1c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b61a:	4b6a      	ldr	r3, [pc, #424]	; (800b7c4 <mem_malloc+0x1f0>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4618      	mov	r0, r3
 800b620:	f7ff fcf4 	bl	800b00c <mem_to_ptr>
 800b624:	4603      	mov	r3, r0
 800b626:	83fb      	strh	r3, [r7, #30]
 800b628:	e0b9      	b.n	800b79e <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b62a:	8bfb      	ldrh	r3, [r7, #30]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7ff fcdb 	bl	800afe8 <ptr_to_mem>
 800b632:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	791b      	ldrb	r3, [r3, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f040 80a9 	bne.w	800b790 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	881b      	ldrh	r3, [r3, #0]
 800b642:	461a      	mov	r2, r3
 800b644:	8bfb      	ldrh	r3, [r7, #30]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	f1a3 0208 	sub.w	r2, r3, #8
 800b64c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b64e:	429a      	cmp	r2, r3
 800b650:	f0c0 809e 	bcc.w	800b790 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	881b      	ldrh	r3, [r3, #0]
 800b658:	461a      	mov	r2, r3
 800b65a:	8bfb      	ldrh	r3, [r7, #30]
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	f1a3 0208 	sub.w	r2, r3, #8
 800b662:	8bbb      	ldrh	r3, [r7, #28]
 800b664:	3314      	adds	r3, #20
 800b666:	429a      	cmp	r2, r3
 800b668:	d335      	bcc.n	800b6d6 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b66a:	8bfa      	ldrh	r2, [r7, #30]
 800b66c:	8bbb      	ldrh	r3, [r7, #28]
 800b66e:	4413      	add	r3, r2
 800b670:	b29b      	uxth	r3, r3
 800b672:	3308      	adds	r3, #8
 800b674:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b676:	8a7b      	ldrh	r3, [r7, #18]
 800b678:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d106      	bne.n	800b68e <mem_malloc+0xba>
 800b680:	4b51      	ldr	r3, [pc, #324]	; (800b7c8 <mem_malloc+0x1f4>)
 800b682:	f240 3287 	movw	r2, #903	; 0x387
 800b686:	4951      	ldr	r1, [pc, #324]	; (800b7cc <mem_malloc+0x1f8>)
 800b688:	4851      	ldr	r0, [pc, #324]	; (800b7d0 <mem_malloc+0x1fc>)
 800b68a:	f008 f9a3 	bl	80139d4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b68e:	8a7b      	ldrh	r3, [r7, #18]
 800b690:	4618      	mov	r0, r3
 800b692:	f7ff fca9 	bl	800afe8 <ptr_to_mem>
 800b696:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	881a      	ldrh	r2, [r3, #0]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	8bfa      	ldrh	r2, [r7, #30]
 800b6aa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	8a7a      	ldrh	r2, [r7, #18]
 800b6b0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	881b      	ldrh	r3, [r3, #0]
 800b6bc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d00b      	beq.n	800b6dc <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	881b      	ldrh	r3, [r3, #0]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7ff fc8d 	bl	800afe8 <ptr_to_mem>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	8a7b      	ldrh	r3, [r7, #18]
 800b6d2:	8053      	strh	r3, [r2, #2]
 800b6d4:	e002      	b.n	800b6dc <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b6dc:	4b39      	ldr	r3, [pc, #228]	; (800b7c4 <mem_malloc+0x1f0>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	697a      	ldr	r2, [r7, #20]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d127      	bne.n	800b736 <mem_malloc+0x162>
          struct mem *cur = lfree;
 800b6e6:	4b37      	ldr	r3, [pc, #220]	; (800b7c4 <mem_malloc+0x1f0>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b6ec:	e005      	b.n	800b6fa <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	881b      	ldrh	r3, [r3, #0]
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7ff fc78 	bl	800afe8 <ptr_to_mem>
 800b6f8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	791b      	ldrb	r3, [r3, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d004      	beq.n	800b70c <mem_malloc+0x138>
 800b702:	4b34      	ldr	r3, [pc, #208]	; (800b7d4 <mem_malloc+0x200>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	69ba      	ldr	r2, [r7, #24]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d1f0      	bne.n	800b6ee <mem_malloc+0x11a>
          }
          lfree = cur;
 800b70c:	4a2d      	ldr	r2, [pc, #180]	; (800b7c4 <mem_malloc+0x1f0>)
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b712:	4b2c      	ldr	r3, [pc, #176]	; (800b7c4 <mem_malloc+0x1f0>)
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	4b2f      	ldr	r3, [pc, #188]	; (800b7d4 <mem_malloc+0x200>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d00b      	beq.n	800b736 <mem_malloc+0x162>
 800b71e:	4b29      	ldr	r3, [pc, #164]	; (800b7c4 <mem_malloc+0x1f0>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	791b      	ldrb	r3, [r3, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d006      	beq.n	800b736 <mem_malloc+0x162>
 800b728:	4b27      	ldr	r3, [pc, #156]	; (800b7c8 <mem_malloc+0x1f4>)
 800b72a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b72e:	492a      	ldr	r1, [pc, #168]	; (800b7d8 <mem_malloc+0x204>)
 800b730:	4827      	ldr	r0, [pc, #156]	; (800b7d0 <mem_malloc+0x1fc>)
 800b732:	f008 f94f 	bl	80139d4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b736:	4822      	ldr	r0, [pc, #136]	; (800b7c0 <mem_malloc+0x1ec>)
 800b738:	f001 fbff 	bl	800cf3a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b73c:	8bba      	ldrh	r2, [r7, #28]
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	4413      	add	r3, r2
 800b742:	3308      	adds	r3, #8
 800b744:	4a23      	ldr	r2, [pc, #140]	; (800b7d4 <mem_malloc+0x200>)
 800b746:	6812      	ldr	r2, [r2, #0]
 800b748:	4293      	cmp	r3, r2
 800b74a:	d906      	bls.n	800b75a <mem_malloc+0x186>
 800b74c:	4b1e      	ldr	r3, [pc, #120]	; (800b7c8 <mem_malloc+0x1f4>)
 800b74e:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b752:	4922      	ldr	r1, [pc, #136]	; (800b7dc <mem_malloc+0x208>)
 800b754:	481e      	ldr	r0, [pc, #120]	; (800b7d0 <mem_malloc+0x1fc>)
 800b756:	f008 f93d 	bl	80139d4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f003 0303 	and.w	r3, r3, #3
 800b760:	2b00      	cmp	r3, #0
 800b762:	d006      	beq.n	800b772 <mem_malloc+0x19e>
 800b764:	4b18      	ldr	r3, [pc, #96]	; (800b7c8 <mem_malloc+0x1f4>)
 800b766:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b76a:	491d      	ldr	r1, [pc, #116]	; (800b7e0 <mem_malloc+0x20c>)
 800b76c:	4818      	ldr	r0, [pc, #96]	; (800b7d0 <mem_malloc+0x1fc>)
 800b76e:	f008 f931 	bl	80139d4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	f003 0303 	and.w	r3, r3, #3
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d006      	beq.n	800b78a <mem_malloc+0x1b6>
 800b77c:	4b12      	ldr	r3, [pc, #72]	; (800b7c8 <mem_malloc+0x1f4>)
 800b77e:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b782:	4918      	ldr	r1, [pc, #96]	; (800b7e4 <mem_malloc+0x210>)
 800b784:	4812      	ldr	r0, [pc, #72]	; (800b7d0 <mem_malloc+0x1fc>)
 800b786:	f008 f925 	bl	80139d4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	3308      	adds	r3, #8
 800b78e:	e012      	b.n	800b7b6 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800b790:	8bfb      	ldrh	r3, [r7, #30]
 800b792:	4618      	mov	r0, r3
 800b794:	f7ff fc28 	bl	800afe8 <ptr_to_mem>
 800b798:	4603      	mov	r3, r0
 800b79a:	881b      	ldrh	r3, [r3, #0]
 800b79c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b79e:	8bfa      	ldrh	r2, [r7, #30]
 800b7a0:	8bb9      	ldrh	r1, [r7, #28]
 800b7a2:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800b7a6:	1a5b      	subs	r3, r3, r1
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	f4ff af3e 	bcc.w	800b62a <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b7ae:	4804      	ldr	r0, [pc, #16]	; (800b7c0 <mem_malloc+0x1ec>)
 800b7b0:	f001 fbc3 	bl	800cf3a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3720      	adds	r7, #32
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	24004358 	.word	0x24004358
 800b7c4:	2400435c 	.word	0x2400435c
 800b7c8:	08015730 	.word	0x08015730
 800b7cc:	08015930 	.word	0x08015930
 800b7d0:	080157b4 	.word	0x080157b4
 800b7d4:	24004354 	.word	0x24004354
 800b7d8:	08015944 	.word	0x08015944
 800b7dc:	08015960 	.word	0x08015960
 800b7e0:	08015990 	.word	0x08015990
 800b7e4:	080159c0 	.word	0x080159c0

0800b7e8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	3303      	adds	r3, #3
 800b7fe:	f023 0303 	bic.w	r3, r3, #3
 800b802:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b804:	2300      	movs	r3, #0
 800b806:	60fb      	str	r3, [r7, #12]
 800b808:	e011      	b.n	800b82e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	881b      	ldrh	r3, [r3, #0]
 800b820:	461a      	mov	r2, r3
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	4413      	add	r3, r2
 800b826:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	3301      	adds	r3, #1
 800b82c:	60fb      	str	r3, [r7, #12]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	885b      	ldrh	r3, [r3, #2]
 800b832:	461a      	mov	r2, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	4293      	cmp	r3, r2
 800b838:	dbe7      	blt.n	800b80a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b83a:	bf00      	nop
 800b83c:	bf00      	nop
 800b83e:	3714      	adds	r7, #20
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b84e:	2300      	movs	r3, #0
 800b850:	80fb      	strh	r3, [r7, #6]
 800b852:	e009      	b.n	800b868 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b854:	88fb      	ldrh	r3, [r7, #6]
 800b856:	4a08      	ldr	r2, [pc, #32]	; (800b878 <memp_init+0x30>)
 800b858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7ff ffc3 	bl	800b7e8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b862:	88fb      	ldrh	r3, [r7, #6]
 800b864:	3301      	adds	r3, #1
 800b866:	80fb      	strh	r3, [r7, #6]
 800b868:	88fb      	ldrh	r3, [r7, #6]
 800b86a:	2b0c      	cmp	r3, #12
 800b86c:	d9f2      	bls.n	800b854 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b86e:	bf00      	nop
 800b870:	bf00      	nop
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	08017e28 	.word	0x08017e28

0800b87c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b884:	f001 fb8c 	bl	800cfa0 <sys_arch_protect>
 800b888:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d015      	beq.n	800b8c4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	6812      	ldr	r2, [r2, #0]
 800b8a0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	f003 0303 	and.w	r3, r3, #3
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d006      	beq.n	800b8ba <do_memp_malloc_pool+0x3e>
 800b8ac:	4b09      	ldr	r3, [pc, #36]	; (800b8d4 <do_memp_malloc_pool+0x58>)
 800b8ae:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b8b2:	4909      	ldr	r1, [pc, #36]	; (800b8d8 <do_memp_malloc_pool+0x5c>)
 800b8b4:	4809      	ldr	r0, [pc, #36]	; (800b8dc <do_memp_malloc_pool+0x60>)
 800b8b6:	f008 f88d 	bl	80139d4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f001 fb7e 	bl	800cfbc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	e003      	b.n	800b8cc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f001 fb79 	bl	800cfbc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	080159e4 	.word	0x080159e4
 800b8d8:	08015a54 	.word	0x08015a54
 800b8dc:	08015a78 	.word	0x08015a78

0800b8e0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d106      	bne.n	800b8fc <memp_malloc_pool+0x1c>
 800b8ee:	4b0a      	ldr	r3, [pc, #40]	; (800b918 <memp_malloc_pool+0x38>)
 800b8f0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b8f4:	4909      	ldr	r1, [pc, #36]	; (800b91c <memp_malloc_pool+0x3c>)
 800b8f6:	480a      	ldr	r0, [pc, #40]	; (800b920 <memp_malloc_pool+0x40>)
 800b8f8:	f008 f86c 	bl	80139d4 <iprintf>
  if (desc == NULL) {
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <memp_malloc_pool+0x26>
    return NULL;
 800b902:	2300      	movs	r3, #0
 800b904:	e003      	b.n	800b90e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f7ff ffb8 	bl	800b87c <do_memp_malloc_pool>
 800b90c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	080159e4 	.word	0x080159e4
 800b91c:	08015aa0 	.word	0x08015aa0
 800b920:	08015a78 	.word	0x08015a78

0800b924 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	4603      	mov	r3, r0
 800b92c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b92e:	79fb      	ldrb	r3, [r7, #7]
 800b930:	2b0c      	cmp	r3, #12
 800b932:	d908      	bls.n	800b946 <memp_malloc+0x22>
 800b934:	4b0a      	ldr	r3, [pc, #40]	; (800b960 <memp_malloc+0x3c>)
 800b936:	f240 1257 	movw	r2, #343	; 0x157
 800b93a:	490a      	ldr	r1, [pc, #40]	; (800b964 <memp_malloc+0x40>)
 800b93c:	480a      	ldr	r0, [pc, #40]	; (800b968 <memp_malloc+0x44>)
 800b93e:	f008 f849 	bl	80139d4 <iprintf>
 800b942:	2300      	movs	r3, #0
 800b944:	e008      	b.n	800b958 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b946:	79fb      	ldrb	r3, [r7, #7]
 800b948:	4a08      	ldr	r2, [pc, #32]	; (800b96c <memp_malloc+0x48>)
 800b94a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b94e:	4618      	mov	r0, r3
 800b950:	f7ff ff94 	bl	800b87c <do_memp_malloc_pool>
 800b954:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b956:	68fb      	ldr	r3, [r7, #12]
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3710      	adds	r7, #16
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}
 800b960:	080159e4 	.word	0x080159e4
 800b964:	08015ab4 	.word	0x08015ab4
 800b968:	08015a78 	.word	0x08015a78
 800b96c:	08017e28 	.word	0x08017e28

0800b970 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	f003 0303 	and.w	r3, r3, #3
 800b980:	2b00      	cmp	r3, #0
 800b982:	d006      	beq.n	800b992 <do_memp_free_pool+0x22>
 800b984:	4b0d      	ldr	r3, [pc, #52]	; (800b9bc <do_memp_free_pool+0x4c>)
 800b986:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b98a:	490d      	ldr	r1, [pc, #52]	; (800b9c0 <do_memp_free_pool+0x50>)
 800b98c:	480d      	ldr	r0, [pc, #52]	; (800b9c4 <do_memp_free_pool+0x54>)
 800b98e:	f008 f821 	bl	80139d4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b996:	f001 fb03 	bl	800cfa0 <sys_arch_protect>
 800b99a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	68fa      	ldr	r2, [r7, #12]
 800b9ac:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b9ae:	68b8      	ldr	r0, [r7, #8]
 800b9b0:	f001 fb04 	bl	800cfbc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b9b4:	bf00      	nop
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	080159e4 	.word	0x080159e4
 800b9c0:	08015ad4 	.word	0x08015ad4
 800b9c4:	08015a78 	.word	0x08015a78

0800b9c8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d106      	bne.n	800b9e6 <memp_free_pool+0x1e>
 800b9d8:	4b0a      	ldr	r3, [pc, #40]	; (800ba04 <memp_free_pool+0x3c>)
 800b9da:	f240 1295 	movw	r2, #405	; 0x195
 800b9de:	490a      	ldr	r1, [pc, #40]	; (800ba08 <memp_free_pool+0x40>)
 800b9e0:	480a      	ldr	r0, [pc, #40]	; (800ba0c <memp_free_pool+0x44>)
 800b9e2:	f007 fff7 	bl	80139d4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d007      	beq.n	800b9fc <memp_free_pool+0x34>
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d004      	beq.n	800b9fc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b9f2:	6839      	ldr	r1, [r7, #0]
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f7ff ffbb 	bl	800b970 <do_memp_free_pool>
 800b9fa:	e000      	b.n	800b9fe <memp_free_pool+0x36>
    return;
 800b9fc:	bf00      	nop
}
 800b9fe:	3708      	adds	r7, #8
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	080159e4 	.word	0x080159e4
 800ba08:	08015aa0 	.word	0x08015aa0
 800ba0c:	08015a78 	.word	0x08015a78

0800ba10 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	4603      	mov	r3, r0
 800ba18:	6039      	str	r1, [r7, #0]
 800ba1a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ba1c:	79fb      	ldrb	r3, [r7, #7]
 800ba1e:	2b0c      	cmp	r3, #12
 800ba20:	d907      	bls.n	800ba32 <memp_free+0x22>
 800ba22:	4b0c      	ldr	r3, [pc, #48]	; (800ba54 <memp_free+0x44>)
 800ba24:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ba28:	490b      	ldr	r1, [pc, #44]	; (800ba58 <memp_free+0x48>)
 800ba2a:	480c      	ldr	r0, [pc, #48]	; (800ba5c <memp_free+0x4c>)
 800ba2c:	f007 ffd2 	bl	80139d4 <iprintf>
 800ba30:	e00c      	b.n	800ba4c <memp_free+0x3c>

  if (mem == NULL) {
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d008      	beq.n	800ba4a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ba38:	79fb      	ldrb	r3, [r7, #7]
 800ba3a:	4a09      	ldr	r2, [pc, #36]	; (800ba60 <memp_free+0x50>)
 800ba3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7ff ff94 	bl	800b970 <do_memp_free_pool>
 800ba48:	e000      	b.n	800ba4c <memp_free+0x3c>
    return;
 800ba4a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ba4c:	3708      	adds	r7, #8
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	080159e4 	.word	0x080159e4
 800ba58:	08015af4 	.word	0x08015af4
 800ba5c:	08015a78 	.word	0x08015a78
 800ba60:	08017e28 	.word	0x08017e28

0800ba64 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ba64:	b480      	push	{r7}
 800ba66:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ba68:	bf00      	nop
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
	...

0800ba74 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
 800ba80:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d108      	bne.n	800ba9a <netif_add+0x26>
 800ba88:	4b57      	ldr	r3, [pc, #348]	; (800bbe8 <netif_add+0x174>)
 800ba8a:	f240 1227 	movw	r2, #295	; 0x127
 800ba8e:	4957      	ldr	r1, [pc, #348]	; (800bbec <netif_add+0x178>)
 800ba90:	4857      	ldr	r0, [pc, #348]	; (800bbf0 <netif_add+0x17c>)
 800ba92:	f007 ff9f 	bl	80139d4 <iprintf>
 800ba96:	2300      	movs	r3, #0
 800ba98:	e0a2      	b.n	800bbe0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ba9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d108      	bne.n	800bab2 <netif_add+0x3e>
 800baa0:	4b51      	ldr	r3, [pc, #324]	; (800bbe8 <netif_add+0x174>)
 800baa2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800baa6:	4953      	ldr	r1, [pc, #332]	; (800bbf4 <netif_add+0x180>)
 800baa8:	4851      	ldr	r0, [pc, #324]	; (800bbf0 <netif_add+0x17c>)
 800baaa:	f007 ff93 	bl	80139d4 <iprintf>
 800baae:	2300      	movs	r3, #0
 800bab0:	e096      	b.n	800bbe0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d101      	bne.n	800babc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bab8:	4b4f      	ldr	r3, [pc, #316]	; (800bbf8 <netif_add+0x184>)
 800baba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d101      	bne.n	800bac6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bac2:	4b4d      	ldr	r3, [pc, #308]	; (800bbf8 <netif_add+0x184>)
 800bac4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d101      	bne.n	800bad0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bacc:	4b4a      	ldr	r3, [pc, #296]	; (800bbf8 <netif_add+0x184>)
 800bace:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2200      	movs	r2, #0
 800bad4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2200      	movs	r2, #0
 800bae0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	4a45      	ldr	r2, [pc, #276]	; (800bbfc <netif_add+0x188>)
 800bae6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2200      	movs	r2, #0
 800bafa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6a3a      	ldr	r2, [r7, #32]
 800bb00:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800bb02:	4b3f      	ldr	r3, [pc, #252]	; (800bc00 <netif_add+0x18c>)
 800bb04:	781a      	ldrb	r2, [r3, #0]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb10:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	68b9      	ldr	r1, [r7, #8]
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	f000 f913 	bl	800bd44 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	4798      	blx	r3
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d001      	beq.n	800bb2e <netif_add+0xba>
    return NULL;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	e058      	b.n	800bbe0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb34:	2bff      	cmp	r3, #255	; 0xff
 800bb36:	d103      	bne.n	800bb40 <netif_add+0xcc>
        netif->num = 0;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800bb40:	2300      	movs	r3, #0
 800bb42:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bb44:	4b2f      	ldr	r3, [pc, #188]	; (800bc04 <netif_add+0x190>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	617b      	str	r3, [r7, #20]
 800bb4a:	e02b      	b.n	800bba4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bb4c:	697a      	ldr	r2, [r7, #20]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d106      	bne.n	800bb62 <netif_add+0xee>
 800bb54:	4b24      	ldr	r3, [pc, #144]	; (800bbe8 <netif_add+0x174>)
 800bb56:	f240 128b 	movw	r2, #395	; 0x18b
 800bb5a:	492b      	ldr	r1, [pc, #172]	; (800bc08 <netif_add+0x194>)
 800bb5c:	4824      	ldr	r0, [pc, #144]	; (800bbf0 <netif_add+0x17c>)
 800bb5e:	f007 ff39 	bl	80139d4 <iprintf>
        num_netifs++;
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	3301      	adds	r3, #1
 800bb66:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	2bff      	cmp	r3, #255	; 0xff
 800bb6c:	dd06      	ble.n	800bb7c <netif_add+0x108>
 800bb6e:	4b1e      	ldr	r3, [pc, #120]	; (800bbe8 <netif_add+0x174>)
 800bb70:	f240 128d 	movw	r2, #397	; 0x18d
 800bb74:	4925      	ldr	r1, [pc, #148]	; (800bc0c <netif_add+0x198>)
 800bb76:	481e      	ldr	r0, [pc, #120]	; (800bbf0 <netif_add+0x17c>)
 800bb78:	f007 ff2c 	bl	80139d4 <iprintf>
        if (netif2->num == netif->num) {
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d108      	bne.n	800bb9e <netif_add+0x12a>
          netif->num++;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb92:	3301      	adds	r3, #1
 800bb94:	b2da      	uxtb	r2, r3
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800bb9c:	e005      	b.n	800bbaa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	617b      	str	r3, [r7, #20]
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1d0      	bne.n	800bb4c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d1be      	bne.n	800bb2e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbb6:	2bfe      	cmp	r3, #254	; 0xfe
 800bbb8:	d103      	bne.n	800bbc2 <netif_add+0x14e>
    netif_num = 0;
 800bbba:	4b11      	ldr	r3, [pc, #68]	; (800bc00 <netif_add+0x18c>)
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	701a      	strb	r2, [r3, #0]
 800bbc0:	e006      	b.n	800bbd0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbc8:	3301      	adds	r3, #1
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	4b0c      	ldr	r3, [pc, #48]	; (800bc00 <netif_add+0x18c>)
 800bbce:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bbd0:	4b0c      	ldr	r3, [pc, #48]	; (800bc04 <netif_add+0x190>)
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bbd8:	4a0a      	ldr	r2, [pc, #40]	; (800bc04 <netif_add+0x190>)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bbde:	68fb      	ldr	r3, [r7, #12]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	08015b10 	.word	0x08015b10
 800bbec:	08015be0 	.word	0x08015be0
 800bbf0:	08015b9c 	.word	0x08015b9c
 800bbf4:	08015bfc 	.word	0x08015bfc
 800bbf8:	08017d88 	.word	0x08017d88
 800bbfc:	0800c01f 	.word	0x0800c01f
 800bc00:	24007434 	.word	0x24007434
 800bc04:	2400742c 	.word	0x2400742c
 800bc08:	08015c20 	.word	0x08015c20
 800bc0c:	08015c34 	.word	0x08015c34

0800bc10 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bc1a:	6839      	ldr	r1, [r7, #0]
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f002 ff33 	bl	800ea88 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bc22:	6839      	ldr	r1, [r7, #0]
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f007 fe41 	bl	80138ac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bc2a:	bf00      	nop
 800bc2c:	3708      	adds	r7, #8
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
	...

0800bc34 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d106      	bne.n	800bc54 <netif_do_set_ipaddr+0x20>
 800bc46:	4b1d      	ldr	r3, [pc, #116]	; (800bcbc <netif_do_set_ipaddr+0x88>)
 800bc48:	f240 12cb 	movw	r2, #459	; 0x1cb
 800bc4c:	491c      	ldr	r1, [pc, #112]	; (800bcc0 <netif_do_set_ipaddr+0x8c>)
 800bc4e:	481d      	ldr	r0, [pc, #116]	; (800bcc4 <netif_do_set_ipaddr+0x90>)
 800bc50:	f007 fec0 	bl	80139d4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <netif_do_set_ipaddr+0x34>
 800bc5a:	4b18      	ldr	r3, [pc, #96]	; (800bcbc <netif_do_set_ipaddr+0x88>)
 800bc5c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800bc60:	4917      	ldr	r1, [pc, #92]	; (800bcc0 <netif_do_set_ipaddr+0x8c>)
 800bc62:	4818      	ldr	r0, [pc, #96]	; (800bcc4 <netif_do_set_ipaddr+0x90>)
 800bc64:	f007 feb6 	bl	80139d4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	3304      	adds	r3, #4
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d01c      	beq.n	800bcb0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	3304      	adds	r3, #4
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bc86:	f107 0314 	add.w	r3, r7, #20
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7ff ffbf 	bl	800bc10 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d002      	beq.n	800bc9e <netif_do_set_ipaddr+0x6a>
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	e000      	b.n	800bca0 <netif_do_set_ipaddr+0x6c>
 800bc9e:	2300      	movs	r3, #0
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bca4:	2101      	movs	r1, #1
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f000 f8d2 	bl	800be50 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bcac:	2301      	movs	r3, #1
 800bcae:	e000      	b.n	800bcb2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3718      	adds	r7, #24
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	08015b10 	.word	0x08015b10
 800bcc0:	08015c64 	.word	0x08015c64
 800bcc4:	08015b9c 	.word	0x08015b9c

0800bcc8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	3308      	adds	r3, #8
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d00a      	beq.n	800bcf8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d002      	beq.n	800bcee <netif_do_set_netmask+0x26>
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	e000      	b.n	800bcf0 <netif_do_set_netmask+0x28>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e000      	b.n	800bcfa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3714      	adds	r7, #20
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bd06:	b480      	push	{r7}
 800bd08:	b085      	sub	sp, #20
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	60f8      	str	r0, [r7, #12]
 800bd0e:	60b9      	str	r1, [r7, #8]
 800bd10:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	330c      	adds	r3, #12
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d00a      	beq.n	800bd36 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d002      	beq.n	800bd2c <netif_do_set_gw+0x26>
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	e000      	b.n	800bd2e <netif_do_set_gw+0x28>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bd32:	2301      	movs	r3, #1
 800bd34:	e000      	b.n	800bd38 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3714      	adds	r7, #20
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b088      	sub	sp, #32
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	607a      	str	r2, [r7, #4]
 800bd50:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bd52:	2300      	movs	r3, #0
 800bd54:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bd56:	2300      	movs	r3, #0
 800bd58:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d101      	bne.n	800bd64 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bd60:	4b1c      	ldr	r3, [pc, #112]	; (800bdd4 <netif_set_addr+0x90>)
 800bd62:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d101      	bne.n	800bd6e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800bd6a:	4b1a      	ldr	r3, [pc, #104]	; (800bdd4 <netif_set_addr+0x90>)
 800bd6c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d101      	bne.n	800bd78 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800bd74:	4b17      	ldr	r3, [pc, #92]	; (800bdd4 <netif_set_addr+0x90>)
 800bd76:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d003      	beq.n	800bd86 <netif_set_addr+0x42>
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d101      	bne.n	800bd8a <netif_set_addr+0x46>
 800bd86:	2301      	movs	r3, #1
 800bd88:	e000      	b.n	800bd8c <netif_set_addr+0x48>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d006      	beq.n	800bda2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bd94:	f107 0310 	add.w	r3, r7, #16
 800bd98:	461a      	mov	r2, r3
 800bd9a:	68b9      	ldr	r1, [r7, #8]
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f7ff ff49 	bl	800bc34 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800bda2:	69fa      	ldr	r2, [r7, #28]
 800bda4:	6879      	ldr	r1, [r7, #4]
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f7ff ff8e 	bl	800bcc8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800bdac:	69ba      	ldr	r2, [r7, #24]
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f7ff ffa8 	bl	800bd06 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d106      	bne.n	800bdca <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bdbc:	f107 0310 	add.w	r3, r7, #16
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	68b9      	ldr	r1, [r7, #8]
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f7ff ff35 	bl	800bc34 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800bdca:	bf00      	nop
 800bdcc:	3720      	adds	r7, #32
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	08017d88 	.word	0x08017d88

0800bdd8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bde0:	4a04      	ldr	r2, [pc, #16]	; (800bdf4 <netif_set_default+0x1c>)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bde6:	bf00      	nop
 800bde8:	370c      	adds	r7, #12
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	24007430 	.word	0x24007430

0800bdf8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d107      	bne.n	800be16 <netif_set_up+0x1e>
 800be06:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <netif_set_up+0x4c>)
 800be08:	f44f 7254 	mov.w	r2, #848	; 0x350
 800be0c:	490e      	ldr	r1, [pc, #56]	; (800be48 <netif_set_up+0x50>)
 800be0e:	480f      	ldr	r0, [pc, #60]	; (800be4c <netif_set_up+0x54>)
 800be10:	f007 fde0 	bl	80139d4 <iprintf>
 800be14:	e013      	b.n	800be3e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be1c:	f003 0301 	and.w	r3, r3, #1
 800be20:	2b00      	cmp	r3, #0
 800be22:	d10c      	bne.n	800be3e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be2a:	f043 0301 	orr.w	r3, r3, #1
 800be2e:	b2da      	uxtb	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800be36:	2103      	movs	r1, #3
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 f809 	bl	800be50 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800be3e:	3708      	adds	r7, #8
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	08015b10 	.word	0x08015b10
 800be48:	08015cd4 	.word	0x08015cd4
 800be4c:	08015b9c 	.word	0x08015b9c

0800be50 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	460b      	mov	r3, r1
 800be5a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d106      	bne.n	800be70 <netif_issue_reports+0x20>
 800be62:	4b18      	ldr	r3, [pc, #96]	; (800bec4 <netif_issue_reports+0x74>)
 800be64:	f240 326d 	movw	r2, #877	; 0x36d
 800be68:	4917      	ldr	r1, [pc, #92]	; (800bec8 <netif_issue_reports+0x78>)
 800be6a:	4818      	ldr	r0, [pc, #96]	; (800becc <netif_issue_reports+0x7c>)
 800be6c:	f007 fdb2 	bl	80139d4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be76:	f003 0304 	and.w	r3, r3, #4
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d01e      	beq.n	800bebc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be84:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d017      	beq.n	800bebc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800be8c:	78fb      	ldrb	r3, [r7, #3]
 800be8e:	f003 0301 	and.w	r3, r3, #1
 800be92:	2b00      	cmp	r3, #0
 800be94:	d013      	beq.n	800bebe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	3304      	adds	r3, #4
 800be9a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00e      	beq.n	800bebe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bea6:	f003 0308 	and.w	r3, r3, #8
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d007      	beq.n	800bebe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	3304      	adds	r3, #4
 800beb2:	4619      	mov	r1, r3
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7fd fb81 	bl	80095bc <etharp_request>
 800beba:	e000      	b.n	800bebe <netif_issue_reports+0x6e>
    return;
 800bebc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	08015b10 	.word	0x08015b10
 800bec8:	08015cf0 	.word	0x08015cf0
 800becc:	08015b9c 	.word	0x08015b9c

0800bed0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d107      	bne.n	800beee <netif_set_down+0x1e>
 800bede:	4b12      	ldr	r3, [pc, #72]	; (800bf28 <netif_set_down+0x58>)
 800bee0:	f240 329b 	movw	r2, #923	; 0x39b
 800bee4:	4911      	ldr	r1, [pc, #68]	; (800bf2c <netif_set_down+0x5c>)
 800bee6:	4812      	ldr	r0, [pc, #72]	; (800bf30 <netif_set_down+0x60>)
 800bee8:	f007 fd74 	bl	80139d4 <iprintf>
 800beec:	e019      	b.n	800bf22 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bef4:	f003 0301 	and.w	r3, r3, #1
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d012      	beq.n	800bf22 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf02:	f023 0301 	bic.w	r3, r3, #1
 800bf06:	b2da      	uxtb	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf14:	f003 0308 	and.w	r3, r3, #8
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f7fc ff0b 	bl	8008d38 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	08015b10 	.word	0x08015b10
 800bf2c:	08015d14 	.word	0x08015d14
 800bf30:	08015b9c 	.word	0x08015b9c

0800bf34 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d107      	bne.n	800bf52 <netif_set_link_up+0x1e>
 800bf42:	4b13      	ldr	r3, [pc, #76]	; (800bf90 <netif_set_link_up+0x5c>)
 800bf44:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800bf48:	4912      	ldr	r1, [pc, #72]	; (800bf94 <netif_set_link_up+0x60>)
 800bf4a:	4813      	ldr	r0, [pc, #76]	; (800bf98 <netif_set_link_up+0x64>)
 800bf4c:	f007 fd42 	bl	80139d4 <iprintf>
 800bf50:	e01b      	b.n	800bf8a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf58:	f003 0304 	and.w	r3, r3, #4
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d114      	bne.n	800bf8a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf66:	f043 0304 	orr.w	r3, r3, #4
 800bf6a:	b2da      	uxtb	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bf72:	2103      	movs	r1, #3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f7ff ff6b 	bl	800be50 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	69db      	ldr	r3, [r3, #28]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d003      	beq.n	800bf8a <netif_set_link_up+0x56>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	69db      	ldr	r3, [r3, #28]
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	08015b10 	.word	0x08015b10
 800bf94:	08015d34 	.word	0x08015d34
 800bf98:	08015b9c 	.word	0x08015b9c

0800bf9c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d107      	bne.n	800bfba <netif_set_link_down+0x1e>
 800bfaa:	4b11      	ldr	r3, [pc, #68]	; (800bff0 <netif_set_link_down+0x54>)
 800bfac:	f240 4206 	movw	r2, #1030	; 0x406
 800bfb0:	4910      	ldr	r1, [pc, #64]	; (800bff4 <netif_set_link_down+0x58>)
 800bfb2:	4811      	ldr	r0, [pc, #68]	; (800bff8 <netif_set_link_down+0x5c>)
 800bfb4:	f007 fd0e 	bl	80139d4 <iprintf>
 800bfb8:	e017      	b.n	800bfea <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bfc0:	f003 0304 	and.w	r3, r3, #4
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d010      	beq.n	800bfea <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bfce:	f023 0304 	bic.w	r3, r3, #4
 800bfd2:	b2da      	uxtb	r2, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	69db      	ldr	r3, [r3, #28]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d003      	beq.n	800bfea <netif_set_link_down+0x4e>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	69db      	ldr	r3, [r3, #28]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bfea:	3708      	adds	r7, #8
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	08015b10 	.word	0x08015b10
 800bff4:	08015d58 	.word	0x08015d58
 800bff8:	08015b9c 	.word	0x08015b9c

0800bffc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	61da      	str	r2, [r3, #28]
  }
}
 800c012:	bf00      	nop
 800c014:	370c      	adds	r7, #12
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr

0800c01e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c01e:	b480      	push	{r7}
 800c020:	b085      	sub	sp, #20
 800c022:	af00      	add	r7, sp, #0
 800c024:	60f8      	str	r0, [r7, #12]
 800c026:	60b9      	str	r1, [r7, #8]
 800c028:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c02a:	f06f 030b 	mvn.w	r3, #11
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
	...

0800c03c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	4603      	mov	r3, r0
 800c044:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c046:	79fb      	ldrb	r3, [r7, #7]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d013      	beq.n	800c074 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c04c:	4b0d      	ldr	r3, [pc, #52]	; (800c084 <netif_get_by_index+0x48>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	60fb      	str	r3, [r7, #12]
 800c052:	e00c      	b.n	800c06e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c05a:	3301      	adds	r3, #1
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	79fa      	ldrb	r2, [r7, #7]
 800c060:	429a      	cmp	r2, r3
 800c062:	d101      	bne.n	800c068 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	e006      	b.n	800c076 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	60fb      	str	r3, [r7, #12]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1ef      	bne.n	800c054 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c074:	2300      	movs	r3, #0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop
 800c084:	2400742c 	.word	0x2400742c

0800c088 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c08e:	f000 ff87 	bl	800cfa0 <sys_arch_protect>
 800c092:	6038      	str	r0, [r7, #0]
 800c094:	4b0d      	ldr	r3, [pc, #52]	; (800c0cc <pbuf_free_ooseq+0x44>)
 800c096:	2200      	movs	r2, #0
 800c098:	701a      	strb	r2, [r3, #0]
 800c09a:	6838      	ldr	r0, [r7, #0]
 800c09c:	f000 ff8e 	bl	800cfbc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c0a0:	4b0b      	ldr	r3, [pc, #44]	; (800c0d0 <pbuf_free_ooseq+0x48>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	607b      	str	r3, [r7, #4]
 800c0a6:	e00a      	b.n	800c0be <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d003      	beq.n	800c0b8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f002 fd27 	bl	800eb04 <tcp_free_ooseq>
      return;
 800c0b6:	e005      	b.n	800c0c4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	607b      	str	r3, [r7, #4]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d1f1      	bne.n	800c0a8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	24007435 	.word	0x24007435
 800c0d0:	2400744c 	.word	0x2400744c

0800c0d4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c0dc:	f7ff ffd4 	bl	800c088 <pbuf_free_ooseq>
}
 800c0e0:	bf00      	nop
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c0ee:	f000 ff57 	bl	800cfa0 <sys_arch_protect>
 800c0f2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c0f4:	4b0f      	ldr	r3, [pc, #60]	; (800c134 <pbuf_pool_is_empty+0x4c>)
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c0fa:	4b0e      	ldr	r3, [pc, #56]	; (800c134 <pbuf_pool_is_empty+0x4c>)
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 ff5b 	bl	800cfbc <sys_arch_unprotect>

  if (!queued) {
 800c106:	78fb      	ldrb	r3, [r7, #3]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10f      	bne.n	800c12c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c10c:	2100      	movs	r1, #0
 800c10e:	480a      	ldr	r0, [pc, #40]	; (800c138 <pbuf_pool_is_empty+0x50>)
 800c110:	f007 f81a 	bl	8013148 <tcpip_try_callback>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d008      	beq.n	800c12c <pbuf_pool_is_empty+0x44>
 800c11a:	f000 ff41 	bl	800cfa0 <sys_arch_protect>
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	4b04      	ldr	r3, [pc, #16]	; (800c134 <pbuf_pool_is_empty+0x4c>)
 800c122:	2200      	movs	r2, #0
 800c124:	701a      	strb	r2, [r3, #0]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 ff48 	bl	800cfbc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c12c:	bf00      	nop
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	24007435 	.word	0x24007435
 800c138:	0800c0d5 	.word	0x0800c0d5

0800c13c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b085      	sub	sp, #20
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	4611      	mov	r1, r2
 800c148:	461a      	mov	r2, r3
 800c14a:	460b      	mov	r3, r1
 800c14c:	80fb      	strh	r3, [r7, #6]
 800c14e:	4613      	mov	r3, r2
 800c150:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2200      	movs	r2, #0
 800c156:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	68ba      	ldr	r2, [r7, #8]
 800c15c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	88fa      	ldrh	r2, [r7, #6]
 800c162:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	88ba      	ldrh	r2, [r7, #4]
 800c168:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c16a:	8b3b      	ldrh	r3, [r7, #24]
 800c16c:	b2da      	uxtb	r2, r3
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	7f3a      	ldrb	r2, [r7, #28]
 800c176:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2201      	movs	r2, #1
 800c17c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2200      	movs	r2, #0
 800c182:	73da      	strb	r2, [r3, #15]
}
 800c184:	bf00      	nop
 800c186:	3714      	adds	r7, #20
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b08c      	sub	sp, #48	; 0x30
 800c194:	af02      	add	r7, sp, #8
 800c196:	4603      	mov	r3, r0
 800c198:	71fb      	strb	r3, [r7, #7]
 800c19a:	460b      	mov	r3, r1
 800c19c:	80bb      	strh	r3, [r7, #4]
 800c19e:	4613      	mov	r3, r2
 800c1a0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c1a2:	79fb      	ldrb	r3, [r7, #7]
 800c1a4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c1a6:	887b      	ldrh	r3, [r7, #2]
 800c1a8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c1ac:	d07f      	beq.n	800c2ae <pbuf_alloc+0x11e>
 800c1ae:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c1b2:	f300 80c8 	bgt.w	800c346 <pbuf_alloc+0x1b6>
 800c1b6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c1ba:	d010      	beq.n	800c1de <pbuf_alloc+0x4e>
 800c1bc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c1c0:	f300 80c1 	bgt.w	800c346 <pbuf_alloc+0x1b6>
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d002      	beq.n	800c1ce <pbuf_alloc+0x3e>
 800c1c8:	2b41      	cmp	r3, #65	; 0x41
 800c1ca:	f040 80bc 	bne.w	800c346 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c1ce:	887a      	ldrh	r2, [r7, #2]
 800c1d0:	88bb      	ldrh	r3, [r7, #4]
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	f000 f8d1 	bl	800c37c <pbuf_alloc_reference>
 800c1da:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c1dc:	e0bd      	b.n	800c35a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c1e6:	88bb      	ldrh	r3, [r7, #4]
 800c1e8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c1ea:	200c      	movs	r0, #12
 800c1ec:	f7ff fb9a 	bl	800b924 <memp_malloc>
 800c1f0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d109      	bne.n	800c20c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c1f8:	f7ff ff76 	bl	800c0e8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d002      	beq.n	800c208 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c202:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c204:	f000 faa8 	bl	800c758 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c208:	2300      	movs	r3, #0
 800c20a:	e0a7      	b.n	800c35c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c20c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c20e:	3303      	adds	r3, #3
 800c210:	b29b      	uxth	r3, r3
 800c212:	f023 0303 	bic.w	r3, r3, #3
 800c216:	b29b      	uxth	r3, r3
 800c218:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c21c:	b29b      	uxth	r3, r3
 800c21e:	8b7a      	ldrh	r2, [r7, #26]
 800c220:	4293      	cmp	r3, r2
 800c222:	bf28      	it	cs
 800c224:	4613      	movcs	r3, r2
 800c226:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c228:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c22a:	3310      	adds	r3, #16
 800c22c:	693a      	ldr	r2, [r7, #16]
 800c22e:	4413      	add	r3, r2
 800c230:	3303      	adds	r3, #3
 800c232:	f023 0303 	bic.w	r3, r3, #3
 800c236:	4618      	mov	r0, r3
 800c238:	89f9      	ldrh	r1, [r7, #14]
 800c23a:	8b7a      	ldrh	r2, [r7, #26]
 800c23c:	2300      	movs	r3, #0
 800c23e:	9301      	str	r3, [sp, #4]
 800c240:	887b      	ldrh	r3, [r7, #2]
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	460b      	mov	r3, r1
 800c246:	4601      	mov	r1, r0
 800c248:	6938      	ldr	r0, [r7, #16]
 800c24a:	f7ff ff77 	bl	800c13c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	f003 0303 	and.w	r3, r3, #3
 800c256:	2b00      	cmp	r3, #0
 800c258:	d006      	beq.n	800c268 <pbuf_alloc+0xd8>
 800c25a:	4b42      	ldr	r3, [pc, #264]	; (800c364 <pbuf_alloc+0x1d4>)
 800c25c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c260:	4941      	ldr	r1, [pc, #260]	; (800c368 <pbuf_alloc+0x1d8>)
 800c262:	4842      	ldr	r0, [pc, #264]	; (800c36c <pbuf_alloc+0x1dc>)
 800c264:	f007 fbb6 	bl	80139d4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c268:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c26a:	3303      	adds	r3, #3
 800c26c:	f023 0303 	bic.w	r3, r3, #3
 800c270:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c274:	d106      	bne.n	800c284 <pbuf_alloc+0xf4>
 800c276:	4b3b      	ldr	r3, [pc, #236]	; (800c364 <pbuf_alloc+0x1d4>)
 800c278:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c27c:	493c      	ldr	r1, [pc, #240]	; (800c370 <pbuf_alloc+0x1e0>)
 800c27e:	483b      	ldr	r0, [pc, #236]	; (800c36c <pbuf_alloc+0x1dc>)
 800c280:	f007 fba8 	bl	80139d4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c286:	2b00      	cmp	r3, #0
 800c288:	d102      	bne.n	800c290 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	627b      	str	r3, [r7, #36]	; 0x24
 800c28e:	e002      	b.n	800c296 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	693a      	ldr	r2, [r7, #16]
 800c294:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c29a:	8b7a      	ldrh	r2, [r7, #26]
 800c29c:	89fb      	ldrh	r3, [r7, #14]
 800c29e:	1ad3      	subs	r3, r2, r3
 800c2a0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c2a6:	8b7b      	ldrh	r3, [r7, #26]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d19e      	bne.n	800c1ea <pbuf_alloc+0x5a>
      break;
 800c2ac:	e055      	b.n	800c35a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c2ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2b0:	3303      	adds	r3, #3
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	f023 0303 	bic.w	r3, r3, #3
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	88bb      	ldrh	r3, [r7, #4]
 800c2bc:	3303      	adds	r3, #3
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	f023 0303 	bic.w	r3, r3, #3
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	4413      	add	r3, r2
 800c2c8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c2ca:	8b3b      	ldrh	r3, [r7, #24]
 800c2cc:	3310      	adds	r3, #16
 800c2ce:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c2d0:	8b3a      	ldrh	r2, [r7, #24]
 800c2d2:	88bb      	ldrh	r3, [r7, #4]
 800c2d4:	3303      	adds	r3, #3
 800c2d6:	f023 0303 	bic.w	r3, r3, #3
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d306      	bcc.n	800c2ec <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c2de:	8afa      	ldrh	r2, [r7, #22]
 800c2e0:	88bb      	ldrh	r3, [r7, #4]
 800c2e2:	3303      	adds	r3, #3
 800c2e4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d201      	bcs.n	800c2f0 <pbuf_alloc+0x160>
        return NULL;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	e035      	b.n	800c35c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c2f0:	8afb      	ldrh	r3, [r7, #22]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7ff f96e 	bl	800b5d4 <mem_malloc>
 800c2f8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d101      	bne.n	800c304 <pbuf_alloc+0x174>
        return NULL;
 800c300:	2300      	movs	r3, #0
 800c302:	e02b      	b.n	800c35c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c304:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c306:	3310      	adds	r3, #16
 800c308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c30a:	4413      	add	r3, r2
 800c30c:	3303      	adds	r3, #3
 800c30e:	f023 0303 	bic.w	r3, r3, #3
 800c312:	4618      	mov	r0, r3
 800c314:	88b9      	ldrh	r1, [r7, #4]
 800c316:	88ba      	ldrh	r2, [r7, #4]
 800c318:	2300      	movs	r3, #0
 800c31a:	9301      	str	r3, [sp, #4]
 800c31c:	887b      	ldrh	r3, [r7, #2]
 800c31e:	9300      	str	r3, [sp, #0]
 800c320:	460b      	mov	r3, r1
 800c322:	4601      	mov	r1, r0
 800c324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c326:	f7ff ff09 	bl	800c13c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	f003 0303 	and.w	r3, r3, #3
 800c332:	2b00      	cmp	r3, #0
 800c334:	d010      	beq.n	800c358 <pbuf_alloc+0x1c8>
 800c336:	4b0b      	ldr	r3, [pc, #44]	; (800c364 <pbuf_alloc+0x1d4>)
 800c338:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c33c:	490d      	ldr	r1, [pc, #52]	; (800c374 <pbuf_alloc+0x1e4>)
 800c33e:	480b      	ldr	r0, [pc, #44]	; (800c36c <pbuf_alloc+0x1dc>)
 800c340:	f007 fb48 	bl	80139d4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c344:	e008      	b.n	800c358 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c346:	4b07      	ldr	r3, [pc, #28]	; (800c364 <pbuf_alloc+0x1d4>)
 800c348:	f240 1227 	movw	r2, #295	; 0x127
 800c34c:	490a      	ldr	r1, [pc, #40]	; (800c378 <pbuf_alloc+0x1e8>)
 800c34e:	4807      	ldr	r0, [pc, #28]	; (800c36c <pbuf_alloc+0x1dc>)
 800c350:	f007 fb40 	bl	80139d4 <iprintf>
      return NULL;
 800c354:	2300      	movs	r3, #0
 800c356:	e001      	b.n	800c35c <pbuf_alloc+0x1cc>
      break;
 800c358:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3728      	adds	r7, #40	; 0x28
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	08015d7c 	.word	0x08015d7c
 800c368:	08015dec 	.word	0x08015dec
 800c36c:	08015e1c 	.word	0x08015e1c
 800c370:	08015e44 	.word	0x08015e44
 800c374:	08015e78 	.word	0x08015e78
 800c378:	08015ea4 	.word	0x08015ea4

0800c37c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b086      	sub	sp, #24
 800c380:	af02      	add	r7, sp, #8
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	460b      	mov	r3, r1
 800c386:	807b      	strh	r3, [r7, #2]
 800c388:	4613      	mov	r3, r2
 800c38a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c38c:	883b      	ldrh	r3, [r7, #0]
 800c38e:	2b41      	cmp	r3, #65	; 0x41
 800c390:	d009      	beq.n	800c3a6 <pbuf_alloc_reference+0x2a>
 800c392:	883b      	ldrh	r3, [r7, #0]
 800c394:	2b01      	cmp	r3, #1
 800c396:	d006      	beq.n	800c3a6 <pbuf_alloc_reference+0x2a>
 800c398:	4b0f      	ldr	r3, [pc, #60]	; (800c3d8 <pbuf_alloc_reference+0x5c>)
 800c39a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c39e:	490f      	ldr	r1, [pc, #60]	; (800c3dc <pbuf_alloc_reference+0x60>)
 800c3a0:	480f      	ldr	r0, [pc, #60]	; (800c3e0 <pbuf_alloc_reference+0x64>)
 800c3a2:	f007 fb17 	bl	80139d4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c3a6:	200b      	movs	r0, #11
 800c3a8:	f7ff fabc 	bl	800b924 <memp_malloc>
 800c3ac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d101      	bne.n	800c3b8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	e00b      	b.n	800c3d0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c3b8:	8879      	ldrh	r1, [r7, #2]
 800c3ba:	887a      	ldrh	r2, [r7, #2]
 800c3bc:	2300      	movs	r3, #0
 800c3be:	9301      	str	r3, [sp, #4]
 800c3c0:	883b      	ldrh	r3, [r7, #0]
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	6879      	ldr	r1, [r7, #4]
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f7ff feb7 	bl	800c13c <pbuf_init_alloced_pbuf>
  return p;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	08015d7c 	.word	0x08015d7c
 800c3dc:	08015ec0 	.word	0x08015ec0
 800c3e0:	08015e1c 	.word	0x08015e1c

0800c3e4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b088      	sub	sp, #32
 800c3e8:	af02      	add	r7, sp, #8
 800c3ea:	607b      	str	r3, [r7, #4]
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	73fb      	strb	r3, [r7, #15]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	81bb      	strh	r3, [r7, #12]
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
 800c3fa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c3fc:	8a7b      	ldrh	r3, [r7, #18]
 800c3fe:	3303      	adds	r3, #3
 800c400:	f023 0203 	bic.w	r2, r3, #3
 800c404:	89bb      	ldrh	r3, [r7, #12]
 800c406:	441a      	add	r2, r3
 800c408:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d901      	bls.n	800c412 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c40e:	2300      	movs	r3, #0
 800c410:	e018      	b.n	800c444 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c412:	6a3b      	ldr	r3, [r7, #32]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d007      	beq.n	800c428 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c418:	8a7b      	ldrh	r3, [r7, #18]
 800c41a:	3303      	adds	r3, #3
 800c41c:	f023 0303 	bic.w	r3, r3, #3
 800c420:	6a3a      	ldr	r2, [r7, #32]
 800c422:	4413      	add	r3, r2
 800c424:	617b      	str	r3, [r7, #20]
 800c426:	e001      	b.n	800c42c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c428:	2300      	movs	r3, #0
 800c42a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	89b9      	ldrh	r1, [r7, #12]
 800c430:	89ba      	ldrh	r2, [r7, #12]
 800c432:	2302      	movs	r3, #2
 800c434:	9301      	str	r3, [sp, #4]
 800c436:	897b      	ldrh	r3, [r7, #10]
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	460b      	mov	r3, r1
 800c43c:	6979      	ldr	r1, [r7, #20]
 800c43e:	f7ff fe7d 	bl	800c13c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c442:	687b      	ldr	r3, [r7, #4]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3718      	adds	r7, #24
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	460b      	mov	r3, r1
 800c456:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d106      	bne.n	800c46c <pbuf_realloc+0x20>
 800c45e:	4b3a      	ldr	r3, [pc, #232]	; (800c548 <pbuf_realloc+0xfc>)
 800c460:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c464:	4939      	ldr	r1, [pc, #228]	; (800c54c <pbuf_realloc+0x100>)
 800c466:	483a      	ldr	r0, [pc, #232]	; (800c550 <pbuf_realloc+0x104>)
 800c468:	f007 fab4 	bl	80139d4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	891b      	ldrh	r3, [r3, #8]
 800c470:	887a      	ldrh	r2, [r7, #2]
 800c472:	429a      	cmp	r2, r3
 800c474:	d263      	bcs.n	800c53e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	891a      	ldrh	r2, [r3, #8]
 800c47a:	887b      	ldrh	r3, [r7, #2]
 800c47c:	1ad3      	subs	r3, r2, r3
 800c47e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c480:	887b      	ldrh	r3, [r7, #2]
 800c482:	817b      	strh	r3, [r7, #10]
  q = p;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c488:	e018      	b.n	800c4bc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	895b      	ldrh	r3, [r3, #10]
 800c48e:	897a      	ldrh	r2, [r7, #10]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	891a      	ldrh	r2, [r3, #8]
 800c498:	893b      	ldrh	r3, [r7, #8]
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d106      	bne.n	800c4bc <pbuf_realloc+0x70>
 800c4ae:	4b26      	ldr	r3, [pc, #152]	; (800c548 <pbuf_realloc+0xfc>)
 800c4b0:	f240 12af 	movw	r2, #431	; 0x1af
 800c4b4:	4927      	ldr	r1, [pc, #156]	; (800c554 <pbuf_realloc+0x108>)
 800c4b6:	4826      	ldr	r0, [pc, #152]	; (800c550 <pbuf_realloc+0x104>)
 800c4b8:	f007 fa8c 	bl	80139d4 <iprintf>
  while (rem_len > q->len) {
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	895b      	ldrh	r3, [r3, #10]
 800c4c0:	897a      	ldrh	r2, [r7, #10]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d8e1      	bhi.n	800c48a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	7b1b      	ldrb	r3, [r3, #12]
 800c4ca:	f003 030f 	and.w	r3, r3, #15
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d121      	bne.n	800c516 <pbuf_realloc+0xca>
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	895b      	ldrh	r3, [r3, #10]
 800c4d6:	897a      	ldrh	r2, [r7, #10]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d01c      	beq.n	800c516 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	7b5b      	ldrb	r3, [r3, #13]
 800c4e0:	f003 0302 	and.w	r3, r3, #2
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d116      	bne.n	800c516 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	897b      	ldrh	r3, [r7, #10]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	f7fe ff5a 	bl	800b3b4 <mem_trim>
 800c500:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d106      	bne.n	800c516 <pbuf_realloc+0xca>
 800c508:	4b0f      	ldr	r3, [pc, #60]	; (800c548 <pbuf_realloc+0xfc>)
 800c50a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c50e:	4912      	ldr	r1, [pc, #72]	; (800c558 <pbuf_realloc+0x10c>)
 800c510:	480f      	ldr	r0, [pc, #60]	; (800c550 <pbuf_realloc+0x104>)
 800c512:	f007 fa5f 	bl	80139d4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	897a      	ldrh	r2, [r7, #10]
 800c51a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	895a      	ldrh	r2, [r3, #10]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d004      	beq.n	800c536 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4618      	mov	r0, r3
 800c532:	f000 f911 	bl	800c758 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2200      	movs	r2, #0
 800c53a:	601a      	str	r2, [r3, #0]
 800c53c:	e000      	b.n	800c540 <pbuf_realloc+0xf4>
    return;
 800c53e:	bf00      	nop

}
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	08015d7c 	.word	0x08015d7c
 800c54c:	08015ed4 	.word	0x08015ed4
 800c550:	08015e1c 	.word	0x08015e1c
 800c554:	08015eec 	.word	0x08015eec
 800c558:	08015f04 	.word	0x08015f04

0800c55c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b086      	sub	sp, #24
 800c560:	af00      	add	r7, sp, #0
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	60b9      	str	r1, [r7, #8]
 800c566:	4613      	mov	r3, r2
 800c568:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d106      	bne.n	800c57e <pbuf_add_header_impl+0x22>
 800c570:	4b2b      	ldr	r3, [pc, #172]	; (800c620 <pbuf_add_header_impl+0xc4>)
 800c572:	f240 12df 	movw	r2, #479	; 0x1df
 800c576:	492b      	ldr	r1, [pc, #172]	; (800c624 <pbuf_add_header_impl+0xc8>)
 800c578:	482b      	ldr	r0, [pc, #172]	; (800c628 <pbuf_add_header_impl+0xcc>)
 800c57a:	f007 fa2b 	bl	80139d4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d003      	beq.n	800c58c <pbuf_add_header_impl+0x30>
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c58a:	d301      	bcc.n	800c590 <pbuf_add_header_impl+0x34>
    return 1;
 800c58c:	2301      	movs	r3, #1
 800c58e:	e043      	b.n	800c618 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d101      	bne.n	800c59a <pbuf_add_header_impl+0x3e>
    return 0;
 800c596:	2300      	movs	r3, #0
 800c598:	e03e      	b.n	800c618 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	891a      	ldrh	r2, [r3, #8]
 800c5a2:	8a7b      	ldrh	r3, [r7, #18]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	8a7a      	ldrh	r2, [r7, #18]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d901      	bls.n	800c5b2 <pbuf_add_header_impl+0x56>
    return 1;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e032      	b.n	800c618 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	7b1b      	ldrb	r3, [r3, #12]
 800c5b6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c5b8:	8a3b      	ldrh	r3, [r7, #16]
 800c5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00c      	beq.n	800c5dc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	685a      	ldr	r2, [r3, #4]
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	425b      	negs	r3, r3
 800c5ca:	4413      	add	r3, r2
 800c5cc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	3310      	adds	r3, #16
 800c5d2:	697a      	ldr	r2, [r7, #20]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d20d      	bcs.n	800c5f4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	e01d      	b.n	800c618 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c5dc:	79fb      	ldrb	r3, [r7, #7]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d006      	beq.n	800c5f0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	685a      	ldr	r2, [r3, #4]
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	425b      	negs	r3, r3
 800c5ea:	4413      	add	r3, r2
 800c5ec:	617b      	str	r3, [r7, #20]
 800c5ee:	e001      	b.n	800c5f4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e011      	b.n	800c618 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	697a      	ldr	r2, [r7, #20]
 800c5f8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	895a      	ldrh	r2, [r3, #10]
 800c5fe:	8a7b      	ldrh	r3, [r7, #18]
 800c600:	4413      	add	r3, r2
 800c602:	b29a      	uxth	r2, r3
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	891a      	ldrh	r2, [r3, #8]
 800c60c:	8a7b      	ldrh	r3, [r7, #18]
 800c60e:	4413      	add	r3, r2
 800c610:	b29a      	uxth	r2, r3
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	811a      	strh	r2, [r3, #8]


  return 0;
 800c616:	2300      	movs	r3, #0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3718      	adds	r7, #24
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	08015d7c 	.word	0x08015d7c
 800c624:	08015f20 	.word	0x08015f20
 800c628:	08015e1c 	.word	0x08015e1c

0800c62c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c636:	2200      	movs	r2, #0
 800c638:	6839      	ldr	r1, [r7, #0]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7ff ff8e 	bl	800c55c <pbuf_add_header_impl>
 800c640:	4603      	mov	r3, r0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
	...

0800c64c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d106      	bne.n	800c66a <pbuf_remove_header+0x1e>
 800c65c:	4b20      	ldr	r3, [pc, #128]	; (800c6e0 <pbuf_remove_header+0x94>)
 800c65e:	f240 224b 	movw	r2, #587	; 0x24b
 800c662:	4920      	ldr	r1, [pc, #128]	; (800c6e4 <pbuf_remove_header+0x98>)
 800c664:	4820      	ldr	r0, [pc, #128]	; (800c6e8 <pbuf_remove_header+0x9c>)
 800c666:	f007 f9b5 	bl	80139d4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d003      	beq.n	800c678 <pbuf_remove_header+0x2c>
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c676:	d301      	bcc.n	800c67c <pbuf_remove_header+0x30>
    return 1;
 800c678:	2301      	movs	r3, #1
 800c67a:	e02c      	b.n	800c6d6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d101      	bne.n	800c686 <pbuf_remove_header+0x3a>
    return 0;
 800c682:	2300      	movs	r3, #0
 800c684:	e027      	b.n	800c6d6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	895b      	ldrh	r3, [r3, #10]
 800c68e:	89fa      	ldrh	r2, [r7, #14]
 800c690:	429a      	cmp	r2, r3
 800c692:	d908      	bls.n	800c6a6 <pbuf_remove_header+0x5a>
 800c694:	4b12      	ldr	r3, [pc, #72]	; (800c6e0 <pbuf_remove_header+0x94>)
 800c696:	f240 2255 	movw	r2, #597	; 0x255
 800c69a:	4914      	ldr	r1, [pc, #80]	; (800c6ec <pbuf_remove_header+0xa0>)
 800c69c:	4812      	ldr	r0, [pc, #72]	; (800c6e8 <pbuf_remove_header+0x9c>)
 800c69e:	f007 f999 	bl	80139d4 <iprintf>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e017      	b.n	800c6d6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	685a      	ldr	r2, [r3, #4]
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	441a      	add	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	895a      	ldrh	r2, [r3, #10]
 800c6bc:	89fb      	ldrh	r3, [r7, #14]
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	891a      	ldrh	r2, [r3, #8]
 800c6ca:	89fb      	ldrh	r3, [r7, #14]
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	b29a      	uxth	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	08015d7c 	.word	0x08015d7c
 800c6e4:	08015f20 	.word	0x08015f20
 800c6e8:	08015e1c 	.word	0x08015e1c
 800c6ec:	08015f2c 	.word	0x08015f2c

0800c6f0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	807b      	strh	r3, [r7, #2]
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c700:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c704:	2b00      	cmp	r3, #0
 800c706:	da08      	bge.n	800c71a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c708:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c70c:	425b      	negs	r3, r3
 800c70e:	4619      	mov	r1, r3
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f7ff ff9b 	bl	800c64c <pbuf_remove_header>
 800c716:	4603      	mov	r3, r0
 800c718:	e007      	b.n	800c72a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c71a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c71e:	787a      	ldrb	r2, [r7, #1]
 800c720:	4619      	mov	r1, r3
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f7ff ff1a 	bl	800c55c <pbuf_add_header_impl>
 800c728:	4603      	mov	r3, r0
  }
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3708      	adds	r7, #8
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}

0800c732 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c732:	b580      	push	{r7, lr}
 800c734:	b082      	sub	sp, #8
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
 800c73a:	460b      	mov	r3, r1
 800c73c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c73e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c742:	2201      	movs	r2, #1
 800c744:	4619      	mov	r1, r3
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7ff ffd2 	bl	800c6f0 <pbuf_header_impl>
 800c74c:	4603      	mov	r3, r0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
	...

0800c758 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b088      	sub	sp, #32
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d10b      	bne.n	800c77e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d106      	bne.n	800c77a <pbuf_free+0x22>
 800c76c:	4b3b      	ldr	r3, [pc, #236]	; (800c85c <pbuf_free+0x104>)
 800c76e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c772:	493b      	ldr	r1, [pc, #236]	; (800c860 <pbuf_free+0x108>)
 800c774:	483b      	ldr	r0, [pc, #236]	; (800c864 <pbuf_free+0x10c>)
 800c776:	f007 f92d 	bl	80139d4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c77a:	2300      	movs	r3, #0
 800c77c:	e069      	b.n	800c852 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c782:	e062      	b.n	800c84a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c784:	f000 fc0c 	bl	800cfa0 <sys_arch_protect>
 800c788:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	7b9b      	ldrb	r3, [r3, #14]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d106      	bne.n	800c7a0 <pbuf_free+0x48>
 800c792:	4b32      	ldr	r3, [pc, #200]	; (800c85c <pbuf_free+0x104>)
 800c794:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c798:	4933      	ldr	r1, [pc, #204]	; (800c868 <pbuf_free+0x110>)
 800c79a:	4832      	ldr	r0, [pc, #200]	; (800c864 <pbuf_free+0x10c>)
 800c79c:	f007 f91a 	bl	80139d4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	7b9b      	ldrb	r3, [r3, #14]
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	739a      	strb	r2, [r3, #14]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	7b9b      	ldrb	r3, [r3, #14]
 800c7b0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c7b2:	69b8      	ldr	r0, [r7, #24]
 800c7b4:	f000 fc02 	bl	800cfbc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c7b8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d143      	bne.n	800c846 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	7b1b      	ldrb	r3, [r3, #12]
 800c7c8:	f003 030f 	and.w	r3, r3, #15
 800c7cc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	7b5b      	ldrb	r3, [r3, #13]
 800c7d2:	f003 0302 	and.w	r3, r3, #2
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d011      	beq.n	800c7fe <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	691b      	ldr	r3, [r3, #16]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d106      	bne.n	800c7f4 <pbuf_free+0x9c>
 800c7e6:	4b1d      	ldr	r3, [pc, #116]	; (800c85c <pbuf_free+0x104>)
 800c7e8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c7ec:	491f      	ldr	r1, [pc, #124]	; (800c86c <pbuf_free+0x114>)
 800c7ee:	481d      	ldr	r0, [pc, #116]	; (800c864 <pbuf_free+0x10c>)
 800c7f0:	f007 f8f0 	bl	80139d4 <iprintf>
        pc->custom_free_function(p);
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	691b      	ldr	r3, [r3, #16]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	4798      	blx	r3
 800c7fc:	e01d      	b.n	800c83a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c7fe:	7bfb      	ldrb	r3, [r7, #15]
 800c800:	2b02      	cmp	r3, #2
 800c802:	d104      	bne.n	800c80e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c804:	6879      	ldr	r1, [r7, #4]
 800c806:	200c      	movs	r0, #12
 800c808:	f7ff f902 	bl	800ba10 <memp_free>
 800c80c:	e015      	b.n	800c83a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d104      	bne.n	800c81e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c814:	6879      	ldr	r1, [r7, #4]
 800c816:	200b      	movs	r0, #11
 800c818:	f7ff f8fa 	bl	800ba10 <memp_free>
 800c81c:	e00d      	b.n	800c83a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c81e:	7bfb      	ldrb	r3, [r7, #15]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d103      	bne.n	800c82c <pbuf_free+0xd4>
          mem_free(p);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f7fe fd35 	bl	800b294 <mem_free>
 800c82a:	e006      	b.n	800c83a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c82c:	4b0b      	ldr	r3, [pc, #44]	; (800c85c <pbuf_free+0x104>)
 800c82e:	f240 320f 	movw	r2, #783	; 0x30f
 800c832:	490f      	ldr	r1, [pc, #60]	; (800c870 <pbuf_free+0x118>)
 800c834:	480b      	ldr	r0, [pc, #44]	; (800c864 <pbuf_free+0x10c>)
 800c836:	f007 f8cd 	bl	80139d4 <iprintf>
        }
      }
      count++;
 800c83a:	7ffb      	ldrb	r3, [r7, #31]
 800c83c:	3301      	adds	r3, #1
 800c83e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	607b      	str	r3, [r7, #4]
 800c844:	e001      	b.n	800c84a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c846:	2300      	movs	r3, #0
 800c848:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d199      	bne.n	800c784 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c850:	7ffb      	ldrb	r3, [r7, #31]
}
 800c852:	4618      	mov	r0, r3
 800c854:	3720      	adds	r7, #32
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	08015d7c 	.word	0x08015d7c
 800c860:	08015f20 	.word	0x08015f20
 800c864:	08015e1c 	.word	0x08015e1c
 800c868:	08015f4c 	.word	0x08015f4c
 800c86c:	08015f64 	.word	0x08015f64
 800c870:	08015f88 	.word	0x08015f88

0800c874 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c87c:	2300      	movs	r3, #0
 800c87e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c880:	e005      	b.n	800c88e <pbuf_clen+0x1a>
    ++len;
 800c882:	89fb      	ldrh	r3, [r7, #14]
 800c884:	3301      	adds	r3, #1
 800c886:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d1f6      	bne.n	800c882 <pbuf_clen+0xe>
  }
  return len;
 800c894:	89fb      	ldrh	r3, [r7, #14]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
	...

0800c8a4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d016      	beq.n	800c8e0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c8b2:	f000 fb75 	bl	800cfa0 <sys_arch_protect>
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	7b9b      	ldrb	r3, [r3, #14]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	739a      	strb	r2, [r3, #14]
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f000 fb79 	bl	800cfbc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	7b9b      	ldrb	r3, [r3, #14]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d106      	bne.n	800c8e0 <pbuf_ref+0x3c>
 800c8d2:	4b05      	ldr	r3, [pc, #20]	; (800c8e8 <pbuf_ref+0x44>)
 800c8d4:	f240 3242 	movw	r2, #834	; 0x342
 800c8d8:	4904      	ldr	r1, [pc, #16]	; (800c8ec <pbuf_ref+0x48>)
 800c8da:	4805      	ldr	r0, [pc, #20]	; (800c8f0 <pbuf_ref+0x4c>)
 800c8dc:	f007 f87a 	bl	80139d4 <iprintf>
  }
}
 800c8e0:	bf00      	nop
 800c8e2:	3710      	adds	r7, #16
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	08015d7c 	.word	0x08015d7c
 800c8ec:	08015f9c 	.word	0x08015f9c
 800c8f0:	08015e1c 	.word	0x08015e1c

0800c8f4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d002      	beq.n	800c90a <pbuf_cat+0x16>
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d107      	bne.n	800c91a <pbuf_cat+0x26>
 800c90a:	4b20      	ldr	r3, [pc, #128]	; (800c98c <pbuf_cat+0x98>)
 800c90c:	f240 3259 	movw	r2, #857	; 0x359
 800c910:	491f      	ldr	r1, [pc, #124]	; (800c990 <pbuf_cat+0x9c>)
 800c912:	4820      	ldr	r0, [pc, #128]	; (800c994 <pbuf_cat+0xa0>)
 800c914:	f007 f85e 	bl	80139d4 <iprintf>
 800c918:	e034      	b.n	800c984 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	60fb      	str	r3, [r7, #12]
 800c91e:	e00a      	b.n	800c936 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	891a      	ldrh	r2, [r3, #8]
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	891b      	ldrh	r3, [r3, #8]
 800c928:	4413      	add	r3, r2
 800c92a:	b29a      	uxth	r2, r3
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	60fb      	str	r3, [r7, #12]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1f0      	bne.n	800c920 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	891a      	ldrh	r2, [r3, #8]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	895b      	ldrh	r3, [r3, #10]
 800c946:	429a      	cmp	r2, r3
 800c948:	d006      	beq.n	800c958 <pbuf_cat+0x64>
 800c94a:	4b10      	ldr	r3, [pc, #64]	; (800c98c <pbuf_cat+0x98>)
 800c94c:	f240 3262 	movw	r2, #866	; 0x362
 800c950:	4911      	ldr	r1, [pc, #68]	; (800c998 <pbuf_cat+0xa4>)
 800c952:	4810      	ldr	r0, [pc, #64]	; (800c994 <pbuf_cat+0xa0>)
 800c954:	f007 f83e 	bl	80139d4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d006      	beq.n	800c96e <pbuf_cat+0x7a>
 800c960:	4b0a      	ldr	r3, [pc, #40]	; (800c98c <pbuf_cat+0x98>)
 800c962:	f240 3263 	movw	r2, #867	; 0x363
 800c966:	490d      	ldr	r1, [pc, #52]	; (800c99c <pbuf_cat+0xa8>)
 800c968:	480a      	ldr	r0, [pc, #40]	; (800c994 <pbuf_cat+0xa0>)
 800c96a:	f007 f833 	bl	80139d4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	891a      	ldrh	r2, [r3, #8]
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	891b      	ldrh	r3, [r3, #8]
 800c976:	4413      	add	r3, r2
 800c978:	b29a      	uxth	r2, r3
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	683a      	ldr	r2, [r7, #0]
 800c982:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	08015d7c 	.word	0x08015d7c
 800c990:	08015fb0 	.word	0x08015fb0
 800c994:	08015e1c 	.word	0x08015e1c
 800c998:	08015fe8 	.word	0x08015fe8
 800c99c:	08016018 	.word	0x08016018

0800c9a0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b086      	sub	sp, #24
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	617b      	str	r3, [r7, #20]
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d008      	beq.n	800c9ca <pbuf_copy+0x2a>
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d005      	beq.n	800c9ca <pbuf_copy+0x2a>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	891a      	ldrh	r2, [r3, #8]
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	891b      	ldrh	r3, [r3, #8]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d209      	bcs.n	800c9de <pbuf_copy+0x3e>
 800c9ca:	4b57      	ldr	r3, [pc, #348]	; (800cb28 <pbuf_copy+0x188>)
 800c9cc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c9d0:	4956      	ldr	r1, [pc, #344]	; (800cb2c <pbuf_copy+0x18c>)
 800c9d2:	4857      	ldr	r0, [pc, #348]	; (800cb30 <pbuf_copy+0x190>)
 800c9d4:	f006 fffe 	bl	80139d4 <iprintf>
 800c9d8:	f06f 030f 	mvn.w	r3, #15
 800c9dc:	e09f      	b.n	800cb1e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	895b      	ldrh	r3, [r3, #10]
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	1ad2      	subs	r2, r2, r3
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	895b      	ldrh	r3, [r3, #10]
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	1acb      	subs	r3, r1, r3
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d306      	bcc.n	800ca04 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	895b      	ldrh	r3, [r3, #10]
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	1ad3      	subs	r3, r2, r3
 800ca00:	60fb      	str	r3, [r7, #12]
 800ca02:	e005      	b.n	800ca10 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	895b      	ldrh	r3, [r3, #10]
 800ca08:	461a      	mov	r2, r3
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	1ad3      	subs	r3, r2, r3
 800ca0e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685a      	ldr	r2, [r3, #4]
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	18d0      	adds	r0, r2, r3
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	685a      	ldr	r2, [r3, #4]
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	4413      	add	r3, r2
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	4619      	mov	r1, r3
 800ca24:	f006 ffa6 	bl	8013974 <memcpy>
    offset_to += len;
 800ca28:	697a      	ldr	r2, [r7, #20]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ca30:	693a      	ldr	r2, [r7, #16]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	4413      	add	r3, r2
 800ca36:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	895b      	ldrh	r3, [r3, #10]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d906      	bls.n	800ca52 <pbuf_copy+0xb2>
 800ca44:	4b38      	ldr	r3, [pc, #224]	; (800cb28 <pbuf_copy+0x188>)
 800ca46:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ca4a:	493a      	ldr	r1, [pc, #232]	; (800cb34 <pbuf_copy+0x194>)
 800ca4c:	4838      	ldr	r0, [pc, #224]	; (800cb30 <pbuf_copy+0x190>)
 800ca4e:	f006 ffc1 	bl	80139d4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	895b      	ldrh	r3, [r3, #10]
 800ca56:	461a      	mov	r2, r3
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d906      	bls.n	800ca6c <pbuf_copy+0xcc>
 800ca5e:	4b32      	ldr	r3, [pc, #200]	; (800cb28 <pbuf_copy+0x188>)
 800ca60:	f240 32da 	movw	r2, #986	; 0x3da
 800ca64:	4934      	ldr	r1, [pc, #208]	; (800cb38 <pbuf_copy+0x198>)
 800ca66:	4832      	ldr	r0, [pc, #200]	; (800cb30 <pbuf_copy+0x190>)
 800ca68:	f006 ffb4 	bl	80139d4 <iprintf>
    if (offset_from >= p_from->len) {
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	895b      	ldrh	r3, [r3, #10]
 800ca70:	461a      	mov	r2, r3
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d304      	bcc.n	800ca82 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	895b      	ldrh	r3, [r3, #10]
 800ca86:	461a      	mov	r2, r3
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d114      	bne.n	800cab8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d10c      	bne.n	800cab8 <pbuf_copy+0x118>
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d009      	beq.n	800cab8 <pbuf_copy+0x118>
 800caa4:	4b20      	ldr	r3, [pc, #128]	; (800cb28 <pbuf_copy+0x188>)
 800caa6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800caaa:	4924      	ldr	r1, [pc, #144]	; (800cb3c <pbuf_copy+0x19c>)
 800caac:	4820      	ldr	r0, [pc, #128]	; (800cb30 <pbuf_copy+0x190>)
 800caae:	f006 ff91 	bl	80139d4 <iprintf>
 800cab2:	f06f 030f 	mvn.w	r3, #15
 800cab6:	e032      	b.n	800cb1e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d013      	beq.n	800cae6 <pbuf_copy+0x146>
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	895a      	ldrh	r2, [r3, #10]
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	891b      	ldrh	r3, [r3, #8]
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d10d      	bne.n	800cae6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d009      	beq.n	800cae6 <pbuf_copy+0x146>
 800cad2:	4b15      	ldr	r3, [pc, #84]	; (800cb28 <pbuf_copy+0x188>)
 800cad4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800cad8:	4919      	ldr	r1, [pc, #100]	; (800cb40 <pbuf_copy+0x1a0>)
 800cada:	4815      	ldr	r0, [pc, #84]	; (800cb30 <pbuf_copy+0x190>)
 800cadc:	f006 ff7a 	bl	80139d4 <iprintf>
 800cae0:	f06f 0305 	mvn.w	r3, #5
 800cae4:	e01b      	b.n	800cb1e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d013      	beq.n	800cb14 <pbuf_copy+0x174>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	895a      	ldrh	r2, [r3, #10]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	891b      	ldrh	r3, [r3, #8]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d10d      	bne.n	800cb14 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d009      	beq.n	800cb14 <pbuf_copy+0x174>
 800cb00:	4b09      	ldr	r3, [pc, #36]	; (800cb28 <pbuf_copy+0x188>)
 800cb02:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800cb06:	490e      	ldr	r1, [pc, #56]	; (800cb40 <pbuf_copy+0x1a0>)
 800cb08:	4809      	ldr	r0, [pc, #36]	; (800cb30 <pbuf_copy+0x190>)
 800cb0a:	f006 ff63 	bl	80139d4 <iprintf>
 800cb0e:	f06f 0305 	mvn.w	r3, #5
 800cb12:	e004      	b.n	800cb1e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f47f af61 	bne.w	800c9de <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cb1c:	2300      	movs	r3, #0
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3718      	adds	r7, #24
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	08015d7c 	.word	0x08015d7c
 800cb2c:	08016064 	.word	0x08016064
 800cb30:	08015e1c 	.word	0x08015e1c
 800cb34:	08016094 	.word	0x08016094
 800cb38:	080160ac 	.word	0x080160ac
 800cb3c:	080160c8 	.word	0x080160c8
 800cb40:	080160d8 	.word	0x080160d8

0800cb44 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b088      	sub	sp, #32
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	4611      	mov	r1, r2
 800cb50:	461a      	mov	r2, r3
 800cb52:	460b      	mov	r3, r1
 800cb54:	80fb      	strh	r3, [r7, #6]
 800cb56:	4613      	mov	r3, r2
 800cb58:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d108      	bne.n	800cb7a <pbuf_copy_partial+0x36>
 800cb68:	4b2b      	ldr	r3, [pc, #172]	; (800cc18 <pbuf_copy_partial+0xd4>)
 800cb6a:	f240 420a 	movw	r2, #1034	; 0x40a
 800cb6e:	492b      	ldr	r1, [pc, #172]	; (800cc1c <pbuf_copy_partial+0xd8>)
 800cb70:	482b      	ldr	r0, [pc, #172]	; (800cc20 <pbuf_copy_partial+0xdc>)
 800cb72:	f006 ff2f 	bl	80139d4 <iprintf>
 800cb76:	2300      	movs	r3, #0
 800cb78:	e04a      	b.n	800cc10 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d108      	bne.n	800cb92 <pbuf_copy_partial+0x4e>
 800cb80:	4b25      	ldr	r3, [pc, #148]	; (800cc18 <pbuf_copy_partial+0xd4>)
 800cb82:	f240 420b 	movw	r2, #1035	; 0x40b
 800cb86:	4927      	ldr	r1, [pc, #156]	; (800cc24 <pbuf_copy_partial+0xe0>)
 800cb88:	4825      	ldr	r0, [pc, #148]	; (800cc20 <pbuf_copy_partial+0xdc>)
 800cb8a:	f006 ff23 	bl	80139d4 <iprintf>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	e03e      	b.n	800cc10 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	61fb      	str	r3, [r7, #28]
 800cb96:	e034      	b.n	800cc02 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cb98:	88bb      	ldrh	r3, [r7, #4]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00a      	beq.n	800cbb4 <pbuf_copy_partial+0x70>
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	895b      	ldrh	r3, [r3, #10]
 800cba2:	88ba      	ldrh	r2, [r7, #4]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d305      	bcc.n	800cbb4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	895b      	ldrh	r3, [r3, #10]
 800cbac:	88ba      	ldrh	r2, [r7, #4]
 800cbae:	1ad3      	subs	r3, r2, r3
 800cbb0:	80bb      	strh	r3, [r7, #4]
 800cbb2:	e023      	b.n	800cbfc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	895a      	ldrh	r2, [r3, #10]
 800cbb8:	88bb      	ldrh	r3, [r7, #4]
 800cbba:	1ad3      	subs	r3, r2, r3
 800cbbc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cbbe:	8b3a      	ldrh	r2, [r7, #24]
 800cbc0:	88fb      	ldrh	r3, [r7, #6]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d901      	bls.n	800cbca <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cbc6:	88fb      	ldrh	r3, [r7, #6]
 800cbc8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800cbca:	8b7b      	ldrh	r3, [r7, #26]
 800cbcc:	68ba      	ldr	r2, [r7, #8]
 800cbce:	18d0      	adds	r0, r2, r3
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	685a      	ldr	r2, [r3, #4]
 800cbd4:	88bb      	ldrh	r3, [r7, #4]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	8b3a      	ldrh	r2, [r7, #24]
 800cbda:	4619      	mov	r1, r3
 800cbdc:	f006 feca 	bl	8013974 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cbe0:	8afa      	ldrh	r2, [r7, #22]
 800cbe2:	8b3b      	ldrh	r3, [r7, #24]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800cbe8:	8b7a      	ldrh	r2, [r7, #26]
 800cbea:	8b3b      	ldrh	r3, [r7, #24]
 800cbec:	4413      	add	r3, r2
 800cbee:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800cbf0:	88fa      	ldrh	r2, [r7, #6]
 800cbf2:	8b3b      	ldrh	r3, [r7, #24]
 800cbf4:	1ad3      	subs	r3, r2, r3
 800cbf6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	61fb      	str	r3, [r7, #28]
 800cc02:	88fb      	ldrh	r3, [r7, #6]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d002      	beq.n	800cc0e <pbuf_copy_partial+0xca>
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1c4      	bne.n	800cb98 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800cc0e:	8afb      	ldrh	r3, [r7, #22]
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3720      	adds	r7, #32
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	08015d7c 	.word	0x08015d7c
 800cc1c:	08016104 	.word	0x08016104
 800cc20:	08015e1c 	.word	0x08015e1c
 800cc24:	08016124 	.word	0x08016124

0800cc28 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b088      	sub	sp, #32
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	4613      	mov	r3, r2
 800cc34:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800cc36:	88fb      	ldrh	r3, [r7, #6]
 800cc38:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d109      	bne.n	800cc58 <pbuf_take+0x30>
 800cc44:	4b3a      	ldr	r3, [pc, #232]	; (800cd30 <pbuf_take+0x108>)
 800cc46:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800cc4a:	493a      	ldr	r1, [pc, #232]	; (800cd34 <pbuf_take+0x10c>)
 800cc4c:	483a      	ldr	r0, [pc, #232]	; (800cd38 <pbuf_take+0x110>)
 800cc4e:	f006 fec1 	bl	80139d4 <iprintf>
 800cc52:	f06f 030f 	mvn.w	r3, #15
 800cc56:	e067      	b.n	800cd28 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d109      	bne.n	800cc72 <pbuf_take+0x4a>
 800cc5e:	4b34      	ldr	r3, [pc, #208]	; (800cd30 <pbuf_take+0x108>)
 800cc60:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800cc64:	4935      	ldr	r1, [pc, #212]	; (800cd3c <pbuf_take+0x114>)
 800cc66:	4834      	ldr	r0, [pc, #208]	; (800cd38 <pbuf_take+0x110>)
 800cc68:	f006 feb4 	bl	80139d4 <iprintf>
 800cc6c:	f06f 030f 	mvn.w	r3, #15
 800cc70:	e05a      	b.n	800cd28 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	891b      	ldrh	r3, [r3, #8]
 800cc76:	88fa      	ldrh	r2, [r7, #6]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d909      	bls.n	800cc90 <pbuf_take+0x68>
 800cc7c:	4b2c      	ldr	r3, [pc, #176]	; (800cd30 <pbuf_take+0x108>)
 800cc7e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800cc82:	492f      	ldr	r1, [pc, #188]	; (800cd40 <pbuf_take+0x118>)
 800cc84:	482c      	ldr	r0, [pc, #176]	; (800cd38 <pbuf_take+0x110>)
 800cc86:	f006 fea5 	bl	80139d4 <iprintf>
 800cc8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc8e:	e04b      	b.n	800cd28 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d007      	beq.n	800cca6 <pbuf_take+0x7e>
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d004      	beq.n	800cca6 <pbuf_take+0x7e>
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	891b      	ldrh	r3, [r3, #8]
 800cca0:	88fa      	ldrh	r2, [r7, #6]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d902      	bls.n	800ccac <pbuf_take+0x84>
    return ERR_ARG;
 800cca6:	f06f 030f 	mvn.w	r3, #15
 800ccaa:	e03d      	b.n	800cd28 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	61fb      	str	r3, [r7, #28]
 800ccb0:	e028      	b.n	800cd04 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d106      	bne.n	800ccc6 <pbuf_take+0x9e>
 800ccb8:	4b1d      	ldr	r3, [pc, #116]	; (800cd30 <pbuf_take+0x108>)
 800ccba:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ccbe:	4921      	ldr	r1, [pc, #132]	; (800cd44 <pbuf_take+0x11c>)
 800ccc0:	481d      	ldr	r0, [pc, #116]	; (800cd38 <pbuf_take+0x110>)
 800ccc2:	f006 fe87 	bl	80139d4 <iprintf>
    buf_copy_len = total_copy_len;
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800ccca:	69fb      	ldr	r3, [r7, #28]
 800cccc:	895b      	ldrh	r3, [r3, #10]
 800ccce:	461a      	mov	r2, r3
 800ccd0:	69bb      	ldr	r3, [r7, #24]
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d902      	bls.n	800ccdc <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800ccd6:	69fb      	ldr	r3, [r7, #28]
 800ccd8:	895b      	ldrh	r3, [r3, #10]
 800ccda:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	6858      	ldr	r0, [r3, #4]
 800cce0:	68ba      	ldr	r2, [r7, #8]
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	4413      	add	r3, r2
 800cce6:	69ba      	ldr	r2, [r7, #24]
 800cce8:	4619      	mov	r1, r3
 800ccea:	f006 fe43 	bl	8013974 <memcpy>
    total_copy_len -= buf_copy_len;
 800ccee:	697a      	ldr	r2, [r7, #20]
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	1ad3      	subs	r3, r2, r3
 800ccf4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800ccf6:	693a      	ldr	r2, [r7, #16]
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	61fb      	str	r3, [r7, #28]
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d1d3      	bne.n	800ccb2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d103      	bne.n	800cd18 <pbuf_take+0xf0>
 800cd10:	88fb      	ldrh	r3, [r7, #6]
 800cd12:	693a      	ldr	r2, [r7, #16]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d006      	beq.n	800cd26 <pbuf_take+0xfe>
 800cd18:	4b05      	ldr	r3, [pc, #20]	; (800cd30 <pbuf_take+0x108>)
 800cd1a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800cd1e:	490a      	ldr	r1, [pc, #40]	; (800cd48 <pbuf_take+0x120>)
 800cd20:	4805      	ldr	r0, [pc, #20]	; (800cd38 <pbuf_take+0x110>)
 800cd22:	f006 fe57 	bl	80139d4 <iprintf>
  return ERR_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3720      	adds	r7, #32
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	08015d7c 	.word	0x08015d7c
 800cd34:	08016194 	.word	0x08016194
 800cd38:	08015e1c 	.word	0x08015e1c
 800cd3c:	080161ac 	.word	0x080161ac
 800cd40:	080161c8 	.word	0x080161c8
 800cd44:	080161e8 	.word	0x080161e8
 800cd48:	08016200 	.word	0x08016200

0800cd4c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	4603      	mov	r3, r0
 800cd54:	603a      	str	r2, [r7, #0]
 800cd56:	71fb      	strb	r3, [r7, #7]
 800cd58:	460b      	mov	r3, r1
 800cd5a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	8919      	ldrh	r1, [r3, #8]
 800cd60:	88ba      	ldrh	r2, [r7, #4]
 800cd62:	79fb      	ldrb	r3, [r7, #7]
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7ff fa13 	bl	800c190 <pbuf_alloc>
 800cd6a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d101      	bne.n	800cd76 <pbuf_clone+0x2a>
    return NULL;
 800cd72:	2300      	movs	r3, #0
 800cd74:	e011      	b.n	800cd9a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800cd76:	6839      	ldr	r1, [r7, #0]
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f7ff fe11 	bl	800c9a0 <pbuf_copy>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cd82:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d006      	beq.n	800cd98 <pbuf_clone+0x4c>
 800cd8a:	4b06      	ldr	r3, [pc, #24]	; (800cda4 <pbuf_clone+0x58>)
 800cd8c:	f240 5224 	movw	r2, #1316	; 0x524
 800cd90:	4905      	ldr	r1, [pc, #20]	; (800cda8 <pbuf_clone+0x5c>)
 800cd92:	4806      	ldr	r0, [pc, #24]	; (800cdac <pbuf_clone+0x60>)
 800cd94:	f006 fe1e 	bl	80139d4 <iprintf>
  return q;
 800cd98:	68fb      	ldr	r3, [r7, #12]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	08015d7c 	.word	0x08015d7c
 800cda8:	08016230 	.word	0x08016230
 800cdac:	08015e1c 	.word	0x08015e1c

0800cdb0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b086      	sub	sp, #24
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	60bb      	str	r3, [r7, #8]
 800cdbe:	2304      	movs	r3, #4
 800cdc0:	60fb      	str	r3, [r7, #12]
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	613b      	str	r3, [r7, #16]
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800cdca:	f107 0308 	add.w	r3, r7, #8
 800cdce:	2100      	movs	r1, #0
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7f8 ff75 	bl	8005cc0 <osMessageCreate>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d102      	bne.n	800cdea <sys_mbox_new+0x3a>
    return ERR_MEM;
 800cde4:	f04f 33ff 	mov.w	r3, #4294967295
 800cde8:	e000      	b.n	800cdec <sys_mbox_new+0x3c>

  return ERR_OK;
 800cdea:	2300      	movs	r3, #0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3718      	adds	r7, #24
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	6839      	ldr	r1, [r7, #0]
 800ce04:	2200      	movs	r2, #0
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7f8 ff82 	bl	8005d10 <osMessagePut>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d102      	bne.n	800ce18 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 800ce12:	2300      	movs	r3, #0
 800ce14:	73fb      	strb	r3, [r7, #15]
 800ce16:	e001      	b.n	800ce1c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 800ce18:	23ff      	movs	r3, #255	; 0xff
 800ce1a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 800ce1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b08c      	sub	sp, #48	; 0x30
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	61f8      	str	r0, [r7, #28]
 800ce30:	61b9      	str	r1, [r7, #24]
 800ce32:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800ce34:	f7f8 fdb4 	bl	80059a0 <osKernelSysTick>
 800ce38:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d017      	beq.n	800ce70 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	6819      	ldr	r1, [r3, #0]
 800ce44:	f107 0320 	add.w	r3, r7, #32
 800ce48:	697a      	ldr	r2, [r7, #20]
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7f8 ffa0 	bl	8005d90 <osMessageGet>

    if(event.status == osEventMessage)
 800ce50:	6a3b      	ldr	r3, [r7, #32]
 800ce52:	2b10      	cmp	r3, #16
 800ce54:	d109      	bne.n	800ce6a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 800ce56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce58:	461a      	mov	r2, r3
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 800ce5e:	f7f8 fd9f 	bl	80059a0 <osKernelSysTick>
 800ce62:	4602      	mov	r2, r0
 800ce64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce66:	1ad3      	subs	r3, r2, r3
 800ce68:	e019      	b.n	800ce9e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800ce6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce6e:	e016      	b.n	800ce9e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	6819      	ldr	r1, [r3, #0]
 800ce74:	463b      	mov	r3, r7
 800ce76:	f04f 32ff 	mov.w	r2, #4294967295
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7f8 ff88 	bl	8005d90 <osMessageGet>
 800ce80:	f107 0320 	add.w	r3, r7, #32
 800ce84:	463a      	mov	r2, r7
 800ce86:	ca07      	ldmia	r2, {r0, r1, r2}
 800ce88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800ce8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8e:	461a      	mov	r2, r3
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 800ce94:	f7f8 fd84 	bl	80059a0 <osKernelSysTick>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3730      	adds	r7, #48	; 0x30
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 800cea6:	b480      	push	{r7}
 800cea8:	b083      	sub	sp, #12
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d101      	bne.n	800ceba <sys_mbox_valid+0x14>
    return 0;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	e000      	b.n	800cebc <sys_mbox_valid+0x16>
  else
    return 1;
 800ceba:	2301      	movs	r3, #1
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800cecc:	4803      	ldr	r0, [pc, #12]	; (800cedc <sys_init+0x14>)
 800cece:	f7f8 fdd7 	bl	8005a80 <osMutexCreate>
 800ced2:	4603      	mov	r3, r0
 800ced4:	4a02      	ldr	r2, [pc, #8]	; (800cee0 <sys_init+0x18>)
 800ced6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800ced8:	bf00      	nop
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	08017e5c 	.word	0x08017e5c
 800cee0:	2400743c 	.word	0x2400743c

0800cee4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800ceec:	2300      	movs	r3, #0
 800ceee:	60bb      	str	r3, [r7, #8]
 800cef0:	2300      	movs	r3, #0
 800cef2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800cef4:	f107 0308 	add.w	r3, r7, #8
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7f8 fdc1 	bl	8005a80 <osMutexCreate>
 800cefe:	4602      	mov	r2, r0
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d102      	bne.n	800cf12 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800cf0c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf10:	e000      	b.n	800cf14 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3710      	adds	r7, #16
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f04f 31ff 	mov.w	r1, #4294967295
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7f8 fdbf 	bl	8005ab0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 800cf32:	bf00      	nop
 800cf34:	3708      	adds	r7, #8
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b082      	sub	sp, #8
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7f8 fe00 	bl	8005b4c <osMutexRelease>
}
 800cf4c:	bf00      	nop
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b08c      	sub	sp, #48	; 0x30
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
 800cf60:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800cf62:	f107 0314 	add.w	r3, r7, #20
 800cf66:	2200      	movs	r2, #0
 800cf68:	601a      	str	r2, [r3, #0]
 800cf6a:	605a      	str	r2, [r3, #4]
 800cf6c:	609a      	str	r2, [r3, #8]
 800cf6e:	60da      	str	r2, [r3, #12]
 800cf70:	611a      	str	r2, [r3, #16]
 800cf72:	615a      	str	r2, [r3, #20]
 800cf74:	619a      	str	r2, [r3, #24]
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	617b      	str	r3, [r7, #20]
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	61bb      	str	r3, [r7, #24]
 800cf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf80:	b21b      	sxth	r3, r3
 800cf82:	83bb      	strh	r3, [r7, #28]
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 800cf88:	f107 0314 	add.w	r3, r7, #20
 800cf8c:	6879      	ldr	r1, [r7, #4]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7f8 fd16 	bl	80059c0 <osThreadCreate>
 800cf94:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3730      	adds	r7, #48	; 0x30
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
	...

0800cfa0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800cfa4:	4b04      	ldr	r3, [pc, #16]	; (800cfb8 <sys_arch_protect+0x18>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f04f 31ff 	mov.w	r1, #4294967295
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7f8 fd7f 	bl	8005ab0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 800cfb2:	2301      	movs	r3, #1
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	2400743c 	.word	0x2400743c

0800cfbc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800cfc4:	4b04      	ldr	r3, [pc, #16]	; (800cfd8 <sys_arch_unprotect+0x1c>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7f8 fdbf 	bl	8005b4c <osMutexRelease>
}
 800cfce:	bf00      	nop
 800cfd0:	3708      	adds	r7, #8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	2400743c 	.word	0x2400743c

0800cfdc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cfe0:	f006 fd10 	bl	8013a04 <rand>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	4b01      	ldr	r3, [pc, #4]	; (800cffc <tcp_init+0x20>)
 800cff6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cff8:	bf00      	nop
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	24000028 	.word	0x24000028

0800d000 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	7d1b      	ldrb	r3, [r3, #20]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d105      	bne.n	800d01c <tcp_free+0x1c>
 800d010:	4b06      	ldr	r3, [pc, #24]	; (800d02c <tcp_free+0x2c>)
 800d012:	22d4      	movs	r2, #212	; 0xd4
 800d014:	4906      	ldr	r1, [pc, #24]	; (800d030 <tcp_free+0x30>)
 800d016:	4807      	ldr	r0, [pc, #28]	; (800d034 <tcp_free+0x34>)
 800d018:	f006 fcdc 	bl	80139d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d01c:	6879      	ldr	r1, [r7, #4]
 800d01e:	2001      	movs	r0, #1
 800d020:	f7fe fcf6 	bl	800ba10 <memp_free>
}
 800d024:	bf00      	nop
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	080162bc 	.word	0x080162bc
 800d030:	08016328 	.word	0x08016328
 800d034:	0801633c 	.word	0x0801633c

0800d038 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	7d1b      	ldrb	r3, [r3, #20]
 800d044:	2b01      	cmp	r3, #1
 800d046:	d105      	bne.n	800d054 <tcp_free_listen+0x1c>
 800d048:	4b06      	ldr	r3, [pc, #24]	; (800d064 <tcp_free_listen+0x2c>)
 800d04a:	22df      	movs	r2, #223	; 0xdf
 800d04c:	4906      	ldr	r1, [pc, #24]	; (800d068 <tcp_free_listen+0x30>)
 800d04e:	4807      	ldr	r0, [pc, #28]	; (800d06c <tcp_free_listen+0x34>)
 800d050:	f006 fcc0 	bl	80139d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d054:	6879      	ldr	r1, [r7, #4]
 800d056:	2002      	movs	r0, #2
 800d058:	f7fe fcda 	bl	800ba10 <memp_free>
}
 800d05c:	bf00      	nop
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	080162bc 	.word	0x080162bc
 800d068:	08016364 	.word	0x08016364
 800d06c:	0801633c 	.word	0x0801633c

0800d070 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d074:	f001 f800 	bl	800e078 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d078:	4b07      	ldr	r3, [pc, #28]	; (800d098 <tcp_tmr+0x28>)
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	3301      	adds	r3, #1
 800d07e:	b2da      	uxtb	r2, r3
 800d080:	4b05      	ldr	r3, [pc, #20]	; (800d098 <tcp_tmr+0x28>)
 800d082:	701a      	strb	r2, [r3, #0]
 800d084:	4b04      	ldr	r3, [pc, #16]	; (800d098 <tcp_tmr+0x28>)
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	f003 0301 	and.w	r3, r3, #1
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d001      	beq.n	800d094 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d090:	f000 fcb2 	bl	800d9f8 <tcp_slowtmr>
  }
}
 800d094:	bf00      	nop
 800d096:	bd80      	pop	{r7, pc}
 800d098:	24007455 	.word	0x24007455

0800d09c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d105      	bne.n	800d0b8 <tcp_remove_listener+0x1c>
 800d0ac:	4b0d      	ldr	r3, [pc, #52]	; (800d0e4 <tcp_remove_listener+0x48>)
 800d0ae:	22ff      	movs	r2, #255	; 0xff
 800d0b0:	490d      	ldr	r1, [pc, #52]	; (800d0e8 <tcp_remove_listener+0x4c>)
 800d0b2:	480e      	ldr	r0, [pc, #56]	; (800d0ec <tcp_remove_listener+0x50>)
 800d0b4:	f006 fc8e 	bl	80139d4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	60fb      	str	r3, [r7, #12]
 800d0bc:	e00a      	b.n	800d0d4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0c2:	683a      	ldr	r2, [r7, #0]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d102      	bne.n	800d0ce <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	60fb      	str	r3, [r7, #12]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d1f1      	bne.n	800d0be <tcp_remove_listener+0x22>
    }
  }
}
 800d0da:	bf00      	nop
 800d0dc:	bf00      	nop
 800d0de:	3710      	adds	r7, #16
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	080162bc 	.word	0x080162bc
 800d0e8:	08016380 	.word	0x08016380
 800d0ec:	0801633c 	.word	0x0801633c

0800d0f0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d106      	bne.n	800d10c <tcp_listen_closed+0x1c>
 800d0fe:	4b14      	ldr	r3, [pc, #80]	; (800d150 <tcp_listen_closed+0x60>)
 800d100:	f240 1211 	movw	r2, #273	; 0x111
 800d104:	4913      	ldr	r1, [pc, #76]	; (800d154 <tcp_listen_closed+0x64>)
 800d106:	4814      	ldr	r0, [pc, #80]	; (800d158 <tcp_listen_closed+0x68>)
 800d108:	f006 fc64 	bl	80139d4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	7d1b      	ldrb	r3, [r3, #20]
 800d110:	2b01      	cmp	r3, #1
 800d112:	d006      	beq.n	800d122 <tcp_listen_closed+0x32>
 800d114:	4b0e      	ldr	r3, [pc, #56]	; (800d150 <tcp_listen_closed+0x60>)
 800d116:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d11a:	4910      	ldr	r1, [pc, #64]	; (800d15c <tcp_listen_closed+0x6c>)
 800d11c:	480e      	ldr	r0, [pc, #56]	; (800d158 <tcp_listen_closed+0x68>)
 800d11e:	f006 fc59 	bl	80139d4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d122:	2301      	movs	r3, #1
 800d124:	60fb      	str	r3, [r7, #12]
 800d126:	e00b      	b.n	800d140 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d128:	4a0d      	ldr	r2, [pc, #52]	; (800d160 <tcp_listen_closed+0x70>)
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	6879      	ldr	r1, [r7, #4]
 800d134:	4618      	mov	r0, r3
 800d136:	f7ff ffb1 	bl	800d09c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	3301      	adds	r3, #1
 800d13e:	60fb      	str	r3, [r7, #12]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2b03      	cmp	r3, #3
 800d144:	d9f0      	bls.n	800d128 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d146:	bf00      	nop
 800d148:	bf00      	nop
 800d14a:	3710      	adds	r7, #16
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	080162bc 	.word	0x080162bc
 800d154:	080163a8 	.word	0x080163a8
 800d158:	0801633c 	.word	0x0801633c
 800d15c:	080163b4 	.word	0x080163b4
 800d160:	08017e7c 	.word	0x08017e7c

0800d164 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d164:	b5b0      	push	{r4, r5, r7, lr}
 800d166:	b088      	sub	sp, #32
 800d168:	af04      	add	r7, sp, #16
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	460b      	mov	r3, r1
 800d16e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d106      	bne.n	800d184 <tcp_close_shutdown+0x20>
 800d176:	4b63      	ldr	r3, [pc, #396]	; (800d304 <tcp_close_shutdown+0x1a0>)
 800d178:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d17c:	4962      	ldr	r1, [pc, #392]	; (800d308 <tcp_close_shutdown+0x1a4>)
 800d17e:	4863      	ldr	r0, [pc, #396]	; (800d30c <tcp_close_shutdown+0x1a8>)
 800d180:	f006 fc28 	bl	80139d4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d184:	78fb      	ldrb	r3, [r7, #3]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d066      	beq.n	800d258 <tcp_close_shutdown+0xf4>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	7d1b      	ldrb	r3, [r3, #20]
 800d18e:	2b04      	cmp	r3, #4
 800d190:	d003      	beq.n	800d19a <tcp_close_shutdown+0x36>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	7d1b      	ldrb	r3, [r3, #20]
 800d196:	2b07      	cmp	r3, #7
 800d198:	d15e      	bne.n	800d258 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d104      	bne.n	800d1ac <tcp_close_shutdown+0x48>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d1aa:	d055      	beq.n	800d258 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	8b5b      	ldrh	r3, [r3, #26]
 800d1b0:	f003 0310 	and.w	r3, r3, #16
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d106      	bne.n	800d1c6 <tcp_close_shutdown+0x62>
 800d1b8:	4b52      	ldr	r3, [pc, #328]	; (800d304 <tcp_close_shutdown+0x1a0>)
 800d1ba:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d1be:	4954      	ldr	r1, [pc, #336]	; (800d310 <tcp_close_shutdown+0x1ac>)
 800d1c0:	4852      	ldr	r0, [pc, #328]	; (800d30c <tcp_close_shutdown+0x1a8>)
 800d1c2:	f006 fc07 	bl	80139d4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d1ce:	687d      	ldr	r5, [r7, #4]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	3304      	adds	r3, #4
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	8ad2      	ldrh	r2, [r2, #22]
 800d1d8:	6879      	ldr	r1, [r7, #4]
 800d1da:	8b09      	ldrh	r1, [r1, #24]
 800d1dc:	9102      	str	r1, [sp, #8]
 800d1de:	9201      	str	r2, [sp, #4]
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	462b      	mov	r3, r5
 800d1e4:	4622      	mov	r2, r4
 800d1e6:	4601      	mov	r1, r0
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f005 fcf7 	bl	8012bdc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f001 fad4 	bl	800e79c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d1f4:	4b47      	ldr	r3, [pc, #284]	; (800d314 <tcp_close_shutdown+0x1b0>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d105      	bne.n	800d20a <tcp_close_shutdown+0xa6>
 800d1fe:	4b45      	ldr	r3, [pc, #276]	; (800d314 <tcp_close_shutdown+0x1b0>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	4a43      	ldr	r2, [pc, #268]	; (800d314 <tcp_close_shutdown+0x1b0>)
 800d206:	6013      	str	r3, [r2, #0]
 800d208:	e013      	b.n	800d232 <tcp_close_shutdown+0xce>
 800d20a:	4b42      	ldr	r3, [pc, #264]	; (800d314 <tcp_close_shutdown+0x1b0>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	60fb      	str	r3, [r7, #12]
 800d210:	e00c      	b.n	800d22c <tcp_close_shutdown+0xc8>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	68db      	ldr	r3, [r3, #12]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d104      	bne.n	800d226 <tcp_close_shutdown+0xc2>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	68da      	ldr	r2, [r3, #12]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	60da      	str	r2, [r3, #12]
 800d224:	e005      	b.n	800d232 <tcp_close_shutdown+0xce>
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	60fb      	str	r3, [r7, #12]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1ef      	bne.n	800d212 <tcp_close_shutdown+0xae>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2200      	movs	r2, #0
 800d236:	60da      	str	r2, [r3, #12]
 800d238:	4b37      	ldr	r3, [pc, #220]	; (800d318 <tcp_close_shutdown+0x1b4>)
 800d23a:	2201      	movs	r2, #1
 800d23c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d23e:	4b37      	ldr	r3, [pc, #220]	; (800d31c <tcp_close_shutdown+0x1b8>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	429a      	cmp	r2, r3
 800d246:	d102      	bne.n	800d24e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d248:	f003 ff6c 	bl	8011124 <tcp_trigger_input_pcb_close>
 800d24c:	e002      	b.n	800d254 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f7ff fed6 	bl	800d000 <tcp_free>
      }
      return ERR_OK;
 800d254:	2300      	movs	r3, #0
 800d256:	e050      	b.n	800d2fa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	7d1b      	ldrb	r3, [r3, #20]
 800d25c:	2b02      	cmp	r3, #2
 800d25e:	d03b      	beq.n	800d2d8 <tcp_close_shutdown+0x174>
 800d260:	2b02      	cmp	r3, #2
 800d262:	dc44      	bgt.n	800d2ee <tcp_close_shutdown+0x18a>
 800d264:	2b00      	cmp	r3, #0
 800d266:	d002      	beq.n	800d26e <tcp_close_shutdown+0x10a>
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d02a      	beq.n	800d2c2 <tcp_close_shutdown+0x15e>
 800d26c:	e03f      	b.n	800d2ee <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	8adb      	ldrh	r3, [r3, #22]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d021      	beq.n	800d2ba <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d276:	4b2a      	ldr	r3, [pc, #168]	; (800d320 <tcp_close_shutdown+0x1bc>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d105      	bne.n	800d28c <tcp_close_shutdown+0x128>
 800d280:	4b27      	ldr	r3, [pc, #156]	; (800d320 <tcp_close_shutdown+0x1bc>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	4a26      	ldr	r2, [pc, #152]	; (800d320 <tcp_close_shutdown+0x1bc>)
 800d288:	6013      	str	r3, [r2, #0]
 800d28a:	e013      	b.n	800d2b4 <tcp_close_shutdown+0x150>
 800d28c:	4b24      	ldr	r3, [pc, #144]	; (800d320 <tcp_close_shutdown+0x1bc>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	60bb      	str	r3, [r7, #8]
 800d292:	e00c      	b.n	800d2ae <tcp_close_shutdown+0x14a>
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	687a      	ldr	r2, [r7, #4]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d104      	bne.n	800d2a8 <tcp_close_shutdown+0x144>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	68da      	ldr	r2, [r3, #12]
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	60da      	str	r2, [r3, #12]
 800d2a6:	e005      	b.n	800d2b4 <tcp_close_shutdown+0x150>
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	68db      	ldr	r3, [r3, #12]
 800d2ac:	60bb      	str	r3, [r7, #8]
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d1ef      	bne.n	800d294 <tcp_close_shutdown+0x130>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f7ff fea0 	bl	800d000 <tcp_free>
      break;
 800d2c0:	e01a      	b.n	800d2f8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f7ff ff14 	bl	800d0f0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d2c8:	6879      	ldr	r1, [r7, #4]
 800d2ca:	4816      	ldr	r0, [pc, #88]	; (800d324 <tcp_close_shutdown+0x1c0>)
 800d2cc:	f001 fab6 	bl	800e83c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7ff feb1 	bl	800d038 <tcp_free_listen>
      break;
 800d2d6:	e00f      	b.n	800d2f8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d2d8:	6879      	ldr	r1, [r7, #4]
 800d2da:	480e      	ldr	r0, [pc, #56]	; (800d314 <tcp_close_shutdown+0x1b0>)
 800d2dc:	f001 faae 	bl	800e83c <tcp_pcb_remove>
 800d2e0:	4b0d      	ldr	r3, [pc, #52]	; (800d318 <tcp_close_shutdown+0x1b4>)
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f7ff fe8a 	bl	800d000 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d2ec:	e004      	b.n	800d2f8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 f81a 	bl	800d328 <tcp_close_shutdown_fin>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	e000      	b.n	800d2fa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d2f8:	2300      	movs	r3, #0
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3710      	adds	r7, #16
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bdb0      	pop	{r4, r5, r7, pc}
 800d302:	bf00      	nop
 800d304:	080162bc 	.word	0x080162bc
 800d308:	080163cc 	.word	0x080163cc
 800d30c:	0801633c 	.word	0x0801633c
 800d310:	080163ec 	.word	0x080163ec
 800d314:	2400744c 	.word	0x2400744c
 800d318:	24007454 	.word	0x24007454
 800d31c:	2400748c 	.word	0x2400748c
 800d320:	24007444 	.word	0x24007444
 800d324:	24007448 	.word	0x24007448

0800d328 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d106      	bne.n	800d344 <tcp_close_shutdown_fin+0x1c>
 800d336:	4b2e      	ldr	r3, [pc, #184]	; (800d3f0 <tcp_close_shutdown_fin+0xc8>)
 800d338:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d33c:	492d      	ldr	r1, [pc, #180]	; (800d3f4 <tcp_close_shutdown_fin+0xcc>)
 800d33e:	482e      	ldr	r0, [pc, #184]	; (800d3f8 <tcp_close_shutdown_fin+0xd0>)
 800d340:	f006 fb48 	bl	80139d4 <iprintf>

  switch (pcb->state) {
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	7d1b      	ldrb	r3, [r3, #20]
 800d348:	2b07      	cmp	r3, #7
 800d34a:	d020      	beq.n	800d38e <tcp_close_shutdown_fin+0x66>
 800d34c:	2b07      	cmp	r3, #7
 800d34e:	dc2b      	bgt.n	800d3a8 <tcp_close_shutdown_fin+0x80>
 800d350:	2b03      	cmp	r3, #3
 800d352:	d002      	beq.n	800d35a <tcp_close_shutdown_fin+0x32>
 800d354:	2b04      	cmp	r3, #4
 800d356:	d00d      	beq.n	800d374 <tcp_close_shutdown_fin+0x4c>
 800d358:	e026      	b.n	800d3a8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f004 fd4c 	bl	8011df8 <tcp_send_fin>
 800d360:	4603      	mov	r3, r0
 800d362:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d11f      	bne.n	800d3ac <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2205      	movs	r2, #5
 800d370:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d372:	e01b      	b.n	800d3ac <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f004 fd3f 	bl	8011df8 <tcp_send_fin>
 800d37a:	4603      	mov	r3, r0
 800d37c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d37e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d114      	bne.n	800d3b0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2205      	movs	r2, #5
 800d38a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d38c:	e010      	b.n	800d3b0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f004 fd32 	bl	8011df8 <tcp_send_fin>
 800d394:	4603      	mov	r3, r0
 800d396:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d109      	bne.n	800d3b4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2209      	movs	r2, #9
 800d3a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d3a6:	e005      	b.n	800d3b4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	e01c      	b.n	800d3e6 <tcp_close_shutdown_fin+0xbe>
      break;
 800d3ac:	bf00      	nop
 800d3ae:	e002      	b.n	800d3b6 <tcp_close_shutdown_fin+0x8e>
      break;
 800d3b0:	bf00      	nop
 800d3b2:	e000      	b.n	800d3b6 <tcp_close_shutdown_fin+0x8e>
      break;
 800d3b4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d3b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d103      	bne.n	800d3c6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f004 fe58 	bl	8012074 <tcp_output>
 800d3c4:	e00d      	b.n	800d3e2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d3c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ce:	d108      	bne.n	800d3e2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	8b5b      	ldrh	r3, [r3, #26]
 800d3d4:	f043 0308 	orr.w	r3, r3, #8
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	e001      	b.n	800d3e6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d3e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	080162bc 	.word	0x080162bc
 800d3f4:	080163a8 	.word	0x080163a8
 800d3f8:	0801633c 	.word	0x0801633c

0800d3fc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d109      	bne.n	800d41e <tcp_close+0x22>
 800d40a:	4b0f      	ldr	r3, [pc, #60]	; (800d448 <tcp_close+0x4c>)
 800d40c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d410:	490e      	ldr	r1, [pc, #56]	; (800d44c <tcp_close+0x50>)
 800d412:	480f      	ldr	r0, [pc, #60]	; (800d450 <tcp_close+0x54>)
 800d414:	f006 fade 	bl	80139d4 <iprintf>
 800d418:	f06f 030f 	mvn.w	r3, #15
 800d41c:	e00f      	b.n	800d43e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	7d1b      	ldrb	r3, [r3, #20]
 800d422:	2b01      	cmp	r3, #1
 800d424:	d006      	beq.n	800d434 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	8b5b      	ldrh	r3, [r3, #26]
 800d42a:	f043 0310 	orr.w	r3, r3, #16
 800d42e:	b29a      	uxth	r2, r3
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d434:	2101      	movs	r1, #1
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f7ff fe94 	bl	800d164 <tcp_close_shutdown>
 800d43c:	4603      	mov	r3, r0
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3708      	adds	r7, #8
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	080162bc 	.word	0x080162bc
 800d44c:	08016408 	.word	0x08016408
 800d450:	0801633c 	.word	0x0801633c

0800d454 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08e      	sub	sp, #56	; 0x38
 800d458:	af04      	add	r7, sp, #16
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d107      	bne.n	800d474 <tcp_abandon+0x20>
 800d464:	4b52      	ldr	r3, [pc, #328]	; (800d5b0 <tcp_abandon+0x15c>)
 800d466:	f240 223d 	movw	r2, #573	; 0x23d
 800d46a:	4952      	ldr	r1, [pc, #328]	; (800d5b4 <tcp_abandon+0x160>)
 800d46c:	4852      	ldr	r0, [pc, #328]	; (800d5b8 <tcp_abandon+0x164>)
 800d46e:	f006 fab1 	bl	80139d4 <iprintf>
 800d472:	e099      	b.n	800d5a8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	7d1b      	ldrb	r3, [r3, #20]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d106      	bne.n	800d48a <tcp_abandon+0x36>
 800d47c:	4b4c      	ldr	r3, [pc, #304]	; (800d5b0 <tcp_abandon+0x15c>)
 800d47e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d482:	494e      	ldr	r1, [pc, #312]	; (800d5bc <tcp_abandon+0x168>)
 800d484:	484c      	ldr	r0, [pc, #304]	; (800d5b8 <tcp_abandon+0x164>)
 800d486:	f006 faa5 	bl	80139d4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	7d1b      	ldrb	r3, [r3, #20]
 800d48e:	2b0a      	cmp	r3, #10
 800d490:	d107      	bne.n	800d4a2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d492:	6879      	ldr	r1, [r7, #4]
 800d494:	484a      	ldr	r0, [pc, #296]	; (800d5c0 <tcp_abandon+0x16c>)
 800d496:	f001 f9d1 	bl	800e83c <tcp_pcb_remove>
    tcp_free(pcb);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f7ff fdb0 	bl	800d000 <tcp_free>
 800d4a0:	e082      	b.n	800d5a8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4ae:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4bc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	691b      	ldr	r3, [r3, #16]
 800d4c2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	7d1b      	ldrb	r3, [r3, #20]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d126      	bne.n	800d51a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	8adb      	ldrh	r3, [r3, #22]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d02e      	beq.n	800d532 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d4d4:	4b3b      	ldr	r3, [pc, #236]	; (800d5c4 <tcp_abandon+0x170>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d105      	bne.n	800d4ea <tcp_abandon+0x96>
 800d4de:	4b39      	ldr	r3, [pc, #228]	; (800d5c4 <tcp_abandon+0x170>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	4a37      	ldr	r2, [pc, #220]	; (800d5c4 <tcp_abandon+0x170>)
 800d4e6:	6013      	str	r3, [r2, #0]
 800d4e8:	e013      	b.n	800d512 <tcp_abandon+0xbe>
 800d4ea:	4b36      	ldr	r3, [pc, #216]	; (800d5c4 <tcp_abandon+0x170>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	61fb      	str	r3, [r7, #28]
 800d4f0:	e00c      	b.n	800d50c <tcp_abandon+0xb8>
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	68db      	ldr	r3, [r3, #12]
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d104      	bne.n	800d506 <tcp_abandon+0xb2>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	68da      	ldr	r2, [r3, #12]
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	60da      	str	r2, [r3, #12]
 800d504:	e005      	b.n	800d512 <tcp_abandon+0xbe>
 800d506:	69fb      	ldr	r3, [r7, #28]
 800d508:	68db      	ldr	r3, [r3, #12]
 800d50a:	61fb      	str	r3, [r7, #28]
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d1ef      	bne.n	800d4f2 <tcp_abandon+0x9e>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2200      	movs	r2, #0
 800d516:	60da      	str	r2, [r3, #12]
 800d518:	e00b      	b.n	800d532 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	8adb      	ldrh	r3, [r3, #22]
 800d522:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d524:	6879      	ldr	r1, [r7, #4]
 800d526:	4828      	ldr	r0, [pc, #160]	; (800d5c8 <tcp_abandon+0x174>)
 800d528:	f001 f988 	bl	800e83c <tcp_pcb_remove>
 800d52c:	4b27      	ldr	r3, [pc, #156]	; (800d5cc <tcp_abandon+0x178>)
 800d52e:	2201      	movs	r2, #1
 800d530:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d536:	2b00      	cmp	r3, #0
 800d538:	d004      	beq.n	800d544 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d53e:	4618      	mov	r0, r3
 800d540:	f000 fe7a 	bl	800e238 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d004      	beq.n	800d556 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d550:	4618      	mov	r0, r3
 800d552:	f000 fe71 	bl	800e238 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d004      	beq.n	800d568 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d562:	4618      	mov	r0, r3
 800d564:	f000 fe68 	bl	800e238 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d00e      	beq.n	800d58c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d56e:	6879      	ldr	r1, [r7, #4]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	3304      	adds	r3, #4
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	8b12      	ldrh	r2, [r2, #24]
 800d578:	9202      	str	r2, [sp, #8]
 800d57a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d57c:	9201      	str	r2, [sp, #4]
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	460b      	mov	r3, r1
 800d582:	697a      	ldr	r2, [r7, #20]
 800d584:	69b9      	ldr	r1, [r7, #24]
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f005 fb28 	bl	8012bdc <tcp_rst>
    }
    last_state = pcb->state;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	7d1b      	ldrb	r3, [r3, #20]
 800d590:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f7ff fd34 	bl	800d000 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d004      	beq.n	800d5a8 <tcp_abandon+0x154>
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	f06f 010c 	mvn.w	r1, #12
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	4798      	blx	r3
  }
}
 800d5a8:	3728      	adds	r7, #40	; 0x28
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
 800d5ae:	bf00      	nop
 800d5b0:	080162bc 	.word	0x080162bc
 800d5b4:	0801643c 	.word	0x0801643c
 800d5b8:	0801633c 	.word	0x0801633c
 800d5bc:	08016458 	.word	0x08016458
 800d5c0:	24007450 	.word	0x24007450
 800d5c4:	24007444 	.word	0x24007444
 800d5c8:	2400744c 	.word	0x2400744c
 800d5cc:	24007454 	.word	0x24007454

0800d5d0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d5d8:	2101      	movs	r1, #1
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f7ff ff3a 	bl	800d454 <tcp_abandon>
}
 800d5e0:	bf00      	nop
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d106      	bne.n	800d604 <tcp_update_rcv_ann_wnd+0x1c>
 800d5f6:	4b25      	ldr	r3, [pc, #148]	; (800d68c <tcp_update_rcv_ann_wnd+0xa4>)
 800d5f8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d5fc:	4924      	ldr	r1, [pc, #144]	; (800d690 <tcp_update_rcv_ann_wnd+0xa8>)
 800d5fe:	4825      	ldr	r0, [pc, #148]	; (800d694 <tcp_update_rcv_ann_wnd+0xac>)
 800d600:	f006 f9e8 	bl	80139d4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d60c:	4413      	add	r3, r2
 800d60e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d618:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d61c:	bf28      	it	cs
 800d61e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d622:	b292      	uxth	r2, r2
 800d624:	4413      	add	r3, r2
 800d626:	68fa      	ldr	r2, [r7, #12]
 800d628:	1ad3      	subs	r3, r2, r3
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	db08      	blt.n	800d640 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63a:	68fa      	ldr	r2, [r7, #12]
 800d63c:	1ad3      	subs	r3, r2, r3
 800d63e:	e020      	b.n	800d682 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d648:	1ad3      	subs	r3, r2, r3
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	dd03      	ble.n	800d656 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2200      	movs	r2, #0
 800d652:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d654:	e014      	b.n	800d680 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65e:	1ad3      	subs	r3, r2, r3
 800d660:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d668:	d306      	bcc.n	800d678 <tcp_update_rcv_ann_wnd+0x90>
 800d66a:	4b08      	ldr	r3, [pc, #32]	; (800d68c <tcp_update_rcv_ann_wnd+0xa4>)
 800d66c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d670:	4909      	ldr	r1, [pc, #36]	; (800d698 <tcp_update_rcv_ann_wnd+0xb0>)
 800d672:	4808      	ldr	r0, [pc, #32]	; (800d694 <tcp_update_rcv_ann_wnd+0xac>)
 800d674:	f006 f9ae 	bl	80139d4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d680:	2300      	movs	r3, #0
  }
}
 800d682:	4618      	mov	r0, r3
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	080162bc 	.word	0x080162bc
 800d690:	08016554 	.word	0x08016554
 800d694:	0801633c 	.word	0x0801633c
 800d698:	08016578 	.word	0x08016578

0800d69c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d107      	bne.n	800d6be <tcp_recved+0x22>
 800d6ae:	4b1f      	ldr	r3, [pc, #124]	; (800d72c <tcp_recved+0x90>)
 800d6b0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d6b4:	491e      	ldr	r1, [pc, #120]	; (800d730 <tcp_recved+0x94>)
 800d6b6:	481f      	ldr	r0, [pc, #124]	; (800d734 <tcp_recved+0x98>)
 800d6b8:	f006 f98c 	bl	80139d4 <iprintf>
 800d6bc:	e032      	b.n	800d724 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	7d1b      	ldrb	r3, [r3, #20]
 800d6c2:	2b01      	cmp	r3, #1
 800d6c4:	d106      	bne.n	800d6d4 <tcp_recved+0x38>
 800d6c6:	4b19      	ldr	r3, [pc, #100]	; (800d72c <tcp_recved+0x90>)
 800d6c8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d6cc:	491a      	ldr	r1, [pc, #104]	; (800d738 <tcp_recved+0x9c>)
 800d6ce:	4819      	ldr	r0, [pc, #100]	; (800d734 <tcp_recved+0x98>)
 800d6d0:	f006 f980 	bl	80139d4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d6d8:	887b      	ldrh	r3, [r7, #2]
 800d6da:	4413      	add	r3, r2
 800d6dc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d6de:	89fb      	ldrh	r3, [r7, #14]
 800d6e0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d6e4:	d804      	bhi.n	800d6f0 <tcp_recved+0x54>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6ea:	89fa      	ldrh	r2, [r7, #14]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d204      	bcs.n	800d6fa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d6f6:	851a      	strh	r2, [r3, #40]	; 0x28
 800d6f8:	e002      	b.n	800d700 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	89fa      	ldrh	r2, [r7, #14]
 800d6fe:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7ff ff71 	bl	800d5e8 <tcp_update_rcv_ann_wnd>
 800d706:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d70e:	d309      	bcc.n	800d724 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	8b5b      	ldrh	r3, [r3, #26]
 800d714:	f043 0302 	orr.w	r3, r3, #2
 800d718:	b29a      	uxth	r2, r3
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f004 fca8 	bl	8012074 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d724:	3710      	adds	r7, #16
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	080162bc 	.word	0x080162bc
 800d730:	08016594 	.word	0x08016594
 800d734:	0801633c 	.word	0x0801633c
 800d738:	080165ac 	.word	0x080165ac

0800d73c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d742:	2300      	movs	r3, #0
 800d744:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d746:	4b1e      	ldr	r3, [pc, #120]	; (800d7c0 <tcp_new_port+0x84>)
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	3301      	adds	r3, #1
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	4b1c      	ldr	r3, [pc, #112]	; (800d7c0 <tcp_new_port+0x84>)
 800d750:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d752:	4b1b      	ldr	r3, [pc, #108]	; (800d7c0 <tcp_new_port+0x84>)
 800d754:	881b      	ldrh	r3, [r3, #0]
 800d756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d103      	bne.n	800d766 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d75e:	4b18      	ldr	r3, [pc, #96]	; (800d7c0 <tcp_new_port+0x84>)
 800d760:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d764:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d766:	2300      	movs	r3, #0
 800d768:	71fb      	strb	r3, [r7, #7]
 800d76a:	e01e      	b.n	800d7aa <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d76c:	79fb      	ldrb	r3, [r7, #7]
 800d76e:	4a15      	ldr	r2, [pc, #84]	; (800d7c4 <tcp_new_port+0x88>)
 800d770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	603b      	str	r3, [r7, #0]
 800d778:	e011      	b.n	800d79e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	8ada      	ldrh	r2, [r3, #22]
 800d77e:	4b10      	ldr	r3, [pc, #64]	; (800d7c0 <tcp_new_port+0x84>)
 800d780:	881b      	ldrh	r3, [r3, #0]
 800d782:	429a      	cmp	r2, r3
 800d784:	d108      	bne.n	800d798 <tcp_new_port+0x5c>
        n++;
 800d786:	88bb      	ldrh	r3, [r7, #4]
 800d788:	3301      	adds	r3, #1
 800d78a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d78c:	88bb      	ldrh	r3, [r7, #4]
 800d78e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d792:	d3d8      	bcc.n	800d746 <tcp_new_port+0xa>
          return 0;
 800d794:	2300      	movs	r3, #0
 800d796:	e00d      	b.n	800d7b4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	603b      	str	r3, [r7, #0]
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d1ea      	bne.n	800d77a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d7a4:	79fb      	ldrb	r3, [r7, #7]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	71fb      	strb	r3, [r7, #7]
 800d7aa:	79fb      	ldrb	r3, [r7, #7]
 800d7ac:	2b03      	cmp	r3, #3
 800d7ae:	d9dd      	bls.n	800d76c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d7b0:	4b03      	ldr	r3, [pc, #12]	; (800d7c0 <tcp_new_port+0x84>)
 800d7b2:	881b      	ldrh	r3, [r3, #0]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr
 800d7c0:	24000028 	.word	0x24000028
 800d7c4:	08017e7c 	.word	0x08017e7c

0800d7c8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b08a      	sub	sp, #40	; 0x28
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	603b      	str	r3, [r7, #0]
 800d7d4:	4613      	mov	r3, r2
 800d7d6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d109      	bne.n	800d7f6 <tcp_connect+0x2e>
 800d7e2:	4b7d      	ldr	r3, [pc, #500]	; (800d9d8 <tcp_connect+0x210>)
 800d7e4:	f240 4235 	movw	r2, #1077	; 0x435
 800d7e8:	497c      	ldr	r1, [pc, #496]	; (800d9dc <tcp_connect+0x214>)
 800d7ea:	487d      	ldr	r0, [pc, #500]	; (800d9e0 <tcp_connect+0x218>)
 800d7ec:	f006 f8f2 	bl	80139d4 <iprintf>
 800d7f0:	f06f 030f 	mvn.w	r3, #15
 800d7f4:	e0ec      	b.n	800d9d0 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d109      	bne.n	800d810 <tcp_connect+0x48>
 800d7fc:	4b76      	ldr	r3, [pc, #472]	; (800d9d8 <tcp_connect+0x210>)
 800d7fe:	f240 4236 	movw	r2, #1078	; 0x436
 800d802:	4978      	ldr	r1, [pc, #480]	; (800d9e4 <tcp_connect+0x21c>)
 800d804:	4876      	ldr	r0, [pc, #472]	; (800d9e0 <tcp_connect+0x218>)
 800d806:	f006 f8e5 	bl	80139d4 <iprintf>
 800d80a:	f06f 030f 	mvn.w	r3, #15
 800d80e:	e0df      	b.n	800d9d0 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	7d1b      	ldrb	r3, [r3, #20]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d009      	beq.n	800d82c <tcp_connect+0x64>
 800d818:	4b6f      	ldr	r3, [pc, #444]	; (800d9d8 <tcp_connect+0x210>)
 800d81a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800d81e:	4972      	ldr	r1, [pc, #456]	; (800d9e8 <tcp_connect+0x220>)
 800d820:	486f      	ldr	r0, [pc, #444]	; (800d9e0 <tcp_connect+0x218>)
 800d822:	f006 f8d7 	bl	80139d4 <iprintf>
 800d826:	f06f 0309 	mvn.w	r3, #9
 800d82a:	e0d1      	b.n	800d9d0 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d002      	beq.n	800d838 <tcp_connect+0x70>
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	e000      	b.n	800d83a <tcp_connect+0x72>
 800d838:	2300      	movs	r3, #0
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	88fa      	ldrh	r2, [r7, #6]
 800d842:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	7a1b      	ldrb	r3, [r3, #8]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d006      	beq.n	800d85a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	7a1b      	ldrb	r3, [r3, #8]
 800d850:	4618      	mov	r0, r3
 800d852:	f7fe fbf3 	bl	800c03c <netif_get_by_index>
 800d856:	6278      	str	r0, [r7, #36]	; 0x24
 800d858:	e005      	b.n	800d866 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	3304      	adds	r3, #4
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fc fa1c 	bl	8009c9c <ip4_route>
 800d864:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800d866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d102      	bne.n	800d872 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800d86c:	f06f 0303 	mvn.w	r3, #3
 800d870:	e0ae      	b.n	800d9d0 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d003      	beq.n	800d880 <tcp_connect+0xb8>
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d111      	bne.n	800d8a4 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	2b00      	cmp	r3, #0
 800d884:	d002      	beq.n	800d88c <tcp_connect+0xc4>
 800d886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d888:	3304      	adds	r3, #4
 800d88a:	e000      	b.n	800d88e <tcp_connect+0xc6>
 800d88c:	2300      	movs	r3, #0
 800d88e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d102      	bne.n	800d89c <tcp_connect+0xd4>
      return ERR_RTE;
 800d896:	f06f 0303 	mvn.w	r3, #3
 800d89a:	e099      	b.n	800d9d0 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	8adb      	ldrh	r3, [r3, #22]
 800d8a8:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	8adb      	ldrh	r3, [r3, #22]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d10c      	bne.n	800d8cc <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800d8b2:	f7ff ff43 	bl	800d73c <tcp_new_port>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	8adb      	ldrh	r3, [r3, #22]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d102      	bne.n	800d8cc <tcp_connect+0x104>
      return ERR_BUF;
 800d8c6:	f06f 0301 	mvn.w	r3, #1
 800d8ca:	e081      	b.n	800d9d0 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f001 f849 	bl	800e964 <tcp_next_iss>
 800d8d2:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	697a      	ldr	r2, [r7, #20]
 800d8de:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	1e5a      	subs	r2, r3, #1
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	1e5a      	subs	r2, r3, #1
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	1e5a      	subs	r2, r3, #1
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d8fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d916:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d920:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	3304      	adds	r3, #4
 800d92a:	461a      	mov	r2, r3
 800d92c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d92e:	f001 f83f 	bl	800e9b0 <tcp_eff_send_mss_netif>
 800d932:	4603      	mov	r3, r0
 800d934:	461a      	mov	r2, r3
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2201      	movs	r2, #1
 800d93e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	683a      	ldr	r2, [r7, #0]
 800d946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d94a:	2102      	movs	r1, #2
 800d94c:	68f8      	ldr	r0, [r7, #12]
 800d94e:	f004 faa3 	bl	8011e98 <tcp_enqueue_flags>
 800d952:	4603      	mov	r3, r0
 800d954:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d956:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d136      	bne.n	800d9cc <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2202      	movs	r2, #2
 800d962:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d964:	8b7b      	ldrh	r3, [r7, #26]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d021      	beq.n	800d9ae <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d96a:	4b20      	ldr	r3, [pc, #128]	; (800d9ec <tcp_connect+0x224>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	429a      	cmp	r2, r3
 800d972:	d105      	bne.n	800d980 <tcp_connect+0x1b8>
 800d974:	4b1d      	ldr	r3, [pc, #116]	; (800d9ec <tcp_connect+0x224>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	4a1c      	ldr	r2, [pc, #112]	; (800d9ec <tcp_connect+0x224>)
 800d97c:	6013      	str	r3, [r2, #0]
 800d97e:	e013      	b.n	800d9a8 <tcp_connect+0x1e0>
 800d980:	4b1a      	ldr	r3, [pc, #104]	; (800d9ec <tcp_connect+0x224>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	623b      	str	r3, [r7, #32]
 800d986:	e00c      	b.n	800d9a2 <tcp_connect+0x1da>
 800d988:	6a3b      	ldr	r3, [r7, #32]
 800d98a:	68db      	ldr	r3, [r3, #12]
 800d98c:	68fa      	ldr	r2, [r7, #12]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d104      	bne.n	800d99c <tcp_connect+0x1d4>
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	68da      	ldr	r2, [r3, #12]
 800d996:	6a3b      	ldr	r3, [r7, #32]
 800d998:	60da      	str	r2, [r3, #12]
 800d99a:	e005      	b.n	800d9a8 <tcp_connect+0x1e0>
 800d99c:	6a3b      	ldr	r3, [r7, #32]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	623b      	str	r3, [r7, #32]
 800d9a2:	6a3b      	ldr	r3, [r7, #32]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d1ef      	bne.n	800d988 <tcp_connect+0x1c0>
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d9ae:	4b10      	ldr	r3, [pc, #64]	; (800d9f0 <tcp_connect+0x228>)
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	60da      	str	r2, [r3, #12]
 800d9b6:	4a0e      	ldr	r2, [pc, #56]	; (800d9f0 <tcp_connect+0x228>)
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6013      	str	r3, [r2, #0]
 800d9bc:	f005 fc72 	bl	80132a4 <tcp_timer_needed>
 800d9c0:	4b0c      	ldr	r3, [pc, #48]	; (800d9f4 <tcp_connect+0x22c>)
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d9c6:	68f8      	ldr	r0, [r7, #12]
 800d9c8:	f004 fb54 	bl	8012074 <tcp_output>
  }
  return ret;
 800d9cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3728      	adds	r7, #40	; 0x28
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	080162bc 	.word	0x080162bc
 800d9dc:	080165d4 	.word	0x080165d4
 800d9e0:	0801633c 	.word	0x0801633c
 800d9e4:	080165f0 	.word	0x080165f0
 800d9e8:	0801660c 	.word	0x0801660c
 800d9ec:	24007444 	.word	0x24007444
 800d9f0:	2400744c 	.word	0x2400744c
 800d9f4:	24007454 	.word	0x24007454

0800d9f8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d9f8:	b5b0      	push	{r4, r5, r7, lr}
 800d9fa:	b090      	sub	sp, #64	; 0x40
 800d9fc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d9fe:	2300      	movs	r3, #0
 800da00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800da04:	4b94      	ldr	r3, [pc, #592]	; (800dc58 <tcp_slowtmr+0x260>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	3301      	adds	r3, #1
 800da0a:	4a93      	ldr	r2, [pc, #588]	; (800dc58 <tcp_slowtmr+0x260>)
 800da0c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800da0e:	4b93      	ldr	r3, [pc, #588]	; (800dc5c <tcp_slowtmr+0x264>)
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	3301      	adds	r3, #1
 800da14:	b2da      	uxtb	r2, r3
 800da16:	4b91      	ldr	r3, [pc, #580]	; (800dc5c <tcp_slowtmr+0x264>)
 800da18:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800da1a:	2300      	movs	r3, #0
 800da1c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800da1e:	4b90      	ldr	r3, [pc, #576]	; (800dc60 <tcp_slowtmr+0x268>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800da24:	e29d      	b.n	800df62 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800da26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da28:	7d1b      	ldrb	r3, [r3, #20]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d106      	bne.n	800da3c <tcp_slowtmr+0x44>
 800da2e:	4b8d      	ldr	r3, [pc, #564]	; (800dc64 <tcp_slowtmr+0x26c>)
 800da30:	f240 42be 	movw	r2, #1214	; 0x4be
 800da34:	498c      	ldr	r1, [pc, #560]	; (800dc68 <tcp_slowtmr+0x270>)
 800da36:	488d      	ldr	r0, [pc, #564]	; (800dc6c <tcp_slowtmr+0x274>)
 800da38:	f005 ffcc 	bl	80139d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800da3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3e:	7d1b      	ldrb	r3, [r3, #20]
 800da40:	2b01      	cmp	r3, #1
 800da42:	d106      	bne.n	800da52 <tcp_slowtmr+0x5a>
 800da44:	4b87      	ldr	r3, [pc, #540]	; (800dc64 <tcp_slowtmr+0x26c>)
 800da46:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800da4a:	4989      	ldr	r1, [pc, #548]	; (800dc70 <tcp_slowtmr+0x278>)
 800da4c:	4887      	ldr	r0, [pc, #540]	; (800dc6c <tcp_slowtmr+0x274>)
 800da4e:	f005 ffc1 	bl	80139d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800da52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da54:	7d1b      	ldrb	r3, [r3, #20]
 800da56:	2b0a      	cmp	r3, #10
 800da58:	d106      	bne.n	800da68 <tcp_slowtmr+0x70>
 800da5a:	4b82      	ldr	r3, [pc, #520]	; (800dc64 <tcp_slowtmr+0x26c>)
 800da5c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800da60:	4984      	ldr	r1, [pc, #528]	; (800dc74 <tcp_slowtmr+0x27c>)
 800da62:	4882      	ldr	r0, [pc, #520]	; (800dc6c <tcp_slowtmr+0x274>)
 800da64:	f005 ffb6 	bl	80139d4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800da68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6a:	7f9a      	ldrb	r2, [r3, #30]
 800da6c:	4b7b      	ldr	r3, [pc, #492]	; (800dc5c <tcp_slowtmr+0x264>)
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	429a      	cmp	r2, r3
 800da72:	d105      	bne.n	800da80 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800da74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da76:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800da78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800da7e:	e270      	b.n	800df62 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800da80:	4b76      	ldr	r3, [pc, #472]	; (800dc5c <tcp_slowtmr+0x264>)
 800da82:	781a      	ldrb	r2, [r3, #0]
 800da84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da86:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800da88:	2300      	movs	r3, #0
 800da8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800da8e:	2300      	movs	r3, #0
 800da90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800da94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da96:	7d1b      	ldrb	r3, [r3, #20]
 800da98:	2b02      	cmp	r3, #2
 800da9a:	d10a      	bne.n	800dab2 <tcp_slowtmr+0xba>
 800da9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800daa2:	2b05      	cmp	r3, #5
 800daa4:	d905      	bls.n	800dab2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800daa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daaa:	3301      	adds	r3, #1
 800daac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dab0:	e11e      	b.n	800dcf0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dab8:	2b0b      	cmp	r3, #11
 800daba:	d905      	bls.n	800dac8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800dabc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dac0:	3301      	adds	r3, #1
 800dac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dac6:	e113      	b.n	800dcf0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800dac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d075      	beq.n	800dbbe <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d006      	beq.n	800dae8 <tcp_slowtmr+0xf0>
 800dada:	4b62      	ldr	r3, [pc, #392]	; (800dc64 <tcp_slowtmr+0x26c>)
 800dadc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800dae0:	4965      	ldr	r1, [pc, #404]	; (800dc78 <tcp_slowtmr+0x280>)
 800dae2:	4862      	ldr	r0, [pc, #392]	; (800dc6c <tcp_slowtmr+0x274>)
 800dae4:	f005 ff76 	bl	80139d4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daec:	2b00      	cmp	r3, #0
 800daee:	d106      	bne.n	800dafe <tcp_slowtmr+0x106>
 800daf0:	4b5c      	ldr	r3, [pc, #368]	; (800dc64 <tcp_slowtmr+0x26c>)
 800daf2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800daf6:	4961      	ldr	r1, [pc, #388]	; (800dc7c <tcp_slowtmr+0x284>)
 800daf8:	485c      	ldr	r0, [pc, #368]	; (800dc6c <tcp_slowtmr+0x274>)
 800dafa:	f005 ff6b 	bl	80139d4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db00:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800db04:	2b0b      	cmp	r3, #11
 800db06:	d905      	bls.n	800db14 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800db08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db0c:	3301      	adds	r3, #1
 800db0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db12:	e0ed      	b.n	800dcf0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800db14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db16:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800db1a:	3b01      	subs	r3, #1
 800db1c:	4a58      	ldr	r2, [pc, #352]	; (800dc80 <tcp_slowtmr+0x288>)
 800db1e:	5cd3      	ldrb	r3, [r2, r3]
 800db20:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800db22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db24:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800db28:	7c7a      	ldrb	r2, [r7, #17]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d907      	bls.n	800db3e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800db2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db30:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800db34:	3301      	adds	r3, #1
 800db36:	b2da      	uxtb	r2, r3
 800db38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800db3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800db44:	7c7a      	ldrb	r2, [r7, #17]
 800db46:	429a      	cmp	r2, r3
 800db48:	f200 80d2 	bhi.w	800dcf0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800db4c:	2301      	movs	r3, #1
 800db4e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800db50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db56:	2b00      	cmp	r3, #0
 800db58:	d108      	bne.n	800db6c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800db5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db5c:	f005 f932 	bl	8012dc4 <tcp_zero_window_probe>
 800db60:	4603      	mov	r3, r0
 800db62:	2b00      	cmp	r3, #0
 800db64:	d014      	beq.n	800db90 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800db66:	2300      	movs	r3, #0
 800db68:	623b      	str	r3, [r7, #32]
 800db6a:	e011      	b.n	800db90 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800db6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db72:	4619      	mov	r1, r3
 800db74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db76:	f003 fff7 	bl	8011b68 <tcp_split_unsent_seg>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d107      	bne.n	800db90 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800db80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db82:	f004 fa77 	bl	8012074 <tcp_output>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d101      	bne.n	800db90 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800db8c:	2300      	movs	r3, #0
 800db8e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800db90:	6a3b      	ldr	r3, [r7, #32]
 800db92:	2b00      	cmp	r3, #0
 800db94:	f000 80ac 	beq.w	800dcf0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800db98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9a:	2200      	movs	r2, #0
 800db9c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800dba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dba6:	2b06      	cmp	r3, #6
 800dba8:	f200 80a2 	bhi.w	800dcf0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800dbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	b2da      	uxtb	r2, r3
 800dbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800dbbc:	e098      	b.n	800dcf0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800dbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	db0f      	blt.n	800dbe8 <tcp_slowtmr+0x1f0>
 800dbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dbce:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d008      	beq.n	800dbe8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800dbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dbdc:	b29b      	uxth	r3, r3
 800dbde:	3301      	adds	r3, #1
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	b21a      	sxth	r2, r3
 800dbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800dbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbea:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800dbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	db7b      	blt.n	800dcf0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800dbf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbfa:	f004 fd2d 	bl	8012658 <tcp_rexmit_rto_prepare>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d007      	beq.n	800dc14 <tcp_slowtmr+0x21c>
 800dc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d171      	bne.n	800dcf0 <tcp_slowtmr+0x2f8>
 800dc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d06d      	beq.n	800dcf0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800dc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc16:	7d1b      	ldrb	r3, [r3, #20]
 800dc18:	2b02      	cmp	r3, #2
 800dc1a:	d03a      	beq.n	800dc92 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800dc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc22:	2b0c      	cmp	r3, #12
 800dc24:	bf28      	it	cs
 800dc26:	230c      	movcs	r3, #12
 800dc28:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800dc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dc30:	10db      	asrs	r3, r3, #3
 800dc32:	b21b      	sxth	r3, r3
 800dc34:	461a      	mov	r2, r3
 800dc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc38:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dc3c:	4413      	add	r3, r2
 800dc3e:	7efa      	ldrb	r2, [r7, #27]
 800dc40:	4910      	ldr	r1, [pc, #64]	; (800dc84 <tcp_slowtmr+0x28c>)
 800dc42:	5c8a      	ldrb	r2, [r1, r2]
 800dc44:	4093      	lsls	r3, r2
 800dc46:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	dc1a      	bgt.n	800dc88 <tcp_slowtmr+0x290>
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	b21a      	sxth	r2, r3
 800dc56:	e019      	b.n	800dc8c <tcp_slowtmr+0x294>
 800dc58:	24007440 	.word	0x24007440
 800dc5c:	24007456 	.word	0x24007456
 800dc60:	2400744c 	.word	0x2400744c
 800dc64:	080162bc 	.word	0x080162bc
 800dc68:	0801663c 	.word	0x0801663c
 800dc6c:	0801633c 	.word	0x0801633c
 800dc70:	08016668 	.word	0x08016668
 800dc74:	08016694 	.word	0x08016694
 800dc78:	080166c4 	.word	0x080166c4
 800dc7c:	080166f8 	.word	0x080166f8
 800dc80:	08017e74 	.word	0x08017e74
 800dc84:	08017e64 	.word	0x08017e64
 800dc88:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800dc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc94:	2200      	movs	r2, #0
 800dc96:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800dc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dca4:	4293      	cmp	r3, r2
 800dca6:	bf28      	it	cs
 800dca8:	4613      	movcs	r3, r2
 800dcaa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800dcac:	8a7b      	ldrh	r3, [r7, #18]
 800dcae:	085b      	lsrs	r3, r3, #1
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800dcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcc2:	005b      	lsls	r3, r3, #1
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d206      	bcs.n	800dcd8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800dcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dccc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcce:	005b      	lsls	r3, r3, #1
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800dcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcda:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800dcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800dce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce4:	2200      	movs	r2, #0
 800dce6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800dcea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcec:	f004 fd24 	bl	8012738 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800dcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf2:	7d1b      	ldrb	r3, [r3, #20]
 800dcf4:	2b06      	cmp	r3, #6
 800dcf6:	d111      	bne.n	800dd1c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800dcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfa:	8b5b      	ldrh	r3, [r3, #26]
 800dcfc:	f003 0310 	and.w	r3, r3, #16
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d00b      	beq.n	800dd1c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd04:	4b9c      	ldr	r3, [pc, #624]	; (800df78 <tcp_slowtmr+0x580>)
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd0a:	6a1b      	ldr	r3, [r3, #32]
 800dd0c:	1ad3      	subs	r3, r2, r3
 800dd0e:	2b28      	cmp	r3, #40	; 0x28
 800dd10:	d904      	bls.n	800dd1c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800dd12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd16:	3301      	adds	r3, #1
 800dd18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1e:	7a5b      	ldrb	r3, [r3, #9]
 800dd20:	f003 0308 	and.w	r3, r3, #8
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d04a      	beq.n	800ddbe <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800dd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dd2c:	2b04      	cmp	r3, #4
 800dd2e:	d003      	beq.n	800dd38 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800dd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd32:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800dd34:	2b07      	cmp	r3, #7
 800dd36:	d142      	bne.n	800ddbe <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd38:	4b8f      	ldr	r3, [pc, #572]	; (800df78 <tcp_slowtmr+0x580>)
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3e:	6a1b      	ldr	r3, [r3, #32]
 800dd40:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800dd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd44:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800dd48:	4b8c      	ldr	r3, [pc, #560]	; (800df7c <tcp_slowtmr+0x584>)
 800dd4a:	440b      	add	r3, r1
 800dd4c:	498c      	ldr	r1, [pc, #560]	; (800df80 <tcp_slowtmr+0x588>)
 800dd4e:	fba1 1303 	umull	r1, r3, r1, r3
 800dd52:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d90a      	bls.n	800dd6e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800dd58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800dd62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd66:	3301      	adds	r3, #1
 800dd68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dd6c:	e027      	b.n	800ddbe <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd6e:	4b82      	ldr	r3, [pc, #520]	; (800df78 <tcp_slowtmr+0x580>)
 800dd70:	681a      	ldr	r2, [r3, #0]
 800dd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd74:	6a1b      	ldr	r3, [r3, #32]
 800dd76:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800dd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800dd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd80:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dd84:	4618      	mov	r0, r3
 800dd86:	4b7f      	ldr	r3, [pc, #508]	; (800df84 <tcp_slowtmr+0x58c>)
 800dd88:	fb00 f303 	mul.w	r3, r0, r3
 800dd8c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800dd8e:	497c      	ldr	r1, [pc, #496]	; (800df80 <tcp_slowtmr+0x588>)
 800dd90:	fba1 1303 	umull	r1, r3, r1, r3
 800dd94:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d911      	bls.n	800ddbe <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800dd9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd9c:	f004 ffd2 	bl	8012d44 <tcp_keepalive>
 800dda0:	4603      	mov	r3, r0
 800dda2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800dda6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d107      	bne.n	800ddbe <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800ddae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddba:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ddbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d011      	beq.n	800ddea <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ddc6:	4b6c      	ldr	r3, [pc, #432]	; (800df78 <tcp_slowtmr+0x580>)
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddcc:	6a1b      	ldr	r3, [r3, #32]
 800ddce:	1ad2      	subs	r2, r2, r3
 800ddd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	460b      	mov	r3, r1
 800ddda:	005b      	lsls	r3, r3, #1
 800dddc:	440b      	add	r3, r1
 800ddde:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d302      	bcc.n	800ddea <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800dde4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dde6:	f000 fe8d 	bl	800eb04 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ddea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddec:	7d1b      	ldrb	r3, [r3, #20]
 800ddee:	2b03      	cmp	r3, #3
 800ddf0:	d10b      	bne.n	800de0a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ddf2:	4b61      	ldr	r3, [pc, #388]	; (800df78 <tcp_slowtmr+0x580>)
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf8:	6a1b      	ldr	r3, [r3, #32]
 800ddfa:	1ad3      	subs	r3, r2, r3
 800ddfc:	2b28      	cmp	r3, #40	; 0x28
 800ddfe:	d904      	bls.n	800de0a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800de00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de04:	3301      	adds	r3, #1
 800de06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800de0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0c:	7d1b      	ldrb	r3, [r3, #20]
 800de0e:	2b09      	cmp	r3, #9
 800de10:	d10b      	bne.n	800de2a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800de12:	4b59      	ldr	r3, [pc, #356]	; (800df78 <tcp_slowtmr+0x580>)
 800de14:	681a      	ldr	r2, [r3, #0]
 800de16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de18:	6a1b      	ldr	r3, [r3, #32]
 800de1a:	1ad3      	subs	r3, r2, r3
 800de1c:	2bf0      	cmp	r3, #240	; 0xf0
 800de1e:	d904      	bls.n	800de2a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800de20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de24:	3301      	adds	r3, #1
 800de26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800de2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d060      	beq.n	800def4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800de32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de38:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800de3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de3c:	f000 fcae 	bl	800e79c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800de40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de42:	2b00      	cmp	r3, #0
 800de44:	d010      	beq.n	800de68 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800de46:	4b50      	ldr	r3, [pc, #320]	; (800df88 <tcp_slowtmr+0x590>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d106      	bne.n	800de5e <tcp_slowtmr+0x466>
 800de50:	4b4e      	ldr	r3, [pc, #312]	; (800df8c <tcp_slowtmr+0x594>)
 800de52:	f240 526d 	movw	r2, #1389	; 0x56d
 800de56:	494e      	ldr	r1, [pc, #312]	; (800df90 <tcp_slowtmr+0x598>)
 800de58:	484e      	ldr	r0, [pc, #312]	; (800df94 <tcp_slowtmr+0x59c>)
 800de5a:	f005 fdbb 	bl	80139d4 <iprintf>
        prev->next = pcb->next;
 800de5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de60:	68da      	ldr	r2, [r3, #12]
 800de62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de64:	60da      	str	r2, [r3, #12]
 800de66:	e00f      	b.n	800de88 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800de68:	4b47      	ldr	r3, [pc, #284]	; (800df88 <tcp_slowtmr+0x590>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de6e:	429a      	cmp	r2, r3
 800de70:	d006      	beq.n	800de80 <tcp_slowtmr+0x488>
 800de72:	4b46      	ldr	r3, [pc, #280]	; (800df8c <tcp_slowtmr+0x594>)
 800de74:	f240 5271 	movw	r2, #1393	; 0x571
 800de78:	4947      	ldr	r1, [pc, #284]	; (800df98 <tcp_slowtmr+0x5a0>)
 800de7a:	4846      	ldr	r0, [pc, #280]	; (800df94 <tcp_slowtmr+0x59c>)
 800de7c:	f005 fdaa 	bl	80139d4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800de80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	4a40      	ldr	r2, [pc, #256]	; (800df88 <tcp_slowtmr+0x590>)
 800de86:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800de88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d013      	beq.n	800deb8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800de90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de92:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800de94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de96:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800de98:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800de9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9c:	3304      	adds	r3, #4
 800de9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dea0:	8ad2      	ldrh	r2, [r2, #22]
 800dea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dea4:	8b09      	ldrh	r1, [r1, #24]
 800dea6:	9102      	str	r1, [sp, #8]
 800dea8:	9201      	str	r2, [sp, #4]
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	462b      	mov	r3, r5
 800deae:	4622      	mov	r2, r4
 800deb0:	4601      	mov	r1, r0
 800deb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800deb4:	f004 fe92 	bl	8012bdc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800deb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deba:	691b      	ldr	r3, [r3, #16]
 800debc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800debe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec0:	7d1b      	ldrb	r3, [r3, #20]
 800dec2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800dec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deca:	68db      	ldr	r3, [r3, #12]
 800decc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800dece:	6838      	ldr	r0, [r7, #0]
 800ded0:	f7ff f896 	bl	800d000 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ded4:	4b31      	ldr	r3, [pc, #196]	; (800df9c <tcp_slowtmr+0x5a4>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d004      	beq.n	800deea <tcp_slowtmr+0x4f2>
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f06f 010c 	mvn.w	r1, #12
 800dee6:	68b8      	ldr	r0, [r7, #8]
 800dee8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800deea:	4b2c      	ldr	r3, [pc, #176]	; (800df9c <tcp_slowtmr+0x5a4>)
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d037      	beq.n	800df62 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800def2:	e592      	b.n	800da1a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800def4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800def8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800defe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df00:	7f1b      	ldrb	r3, [r3, #28]
 800df02:	3301      	adds	r3, #1
 800df04:	b2da      	uxtb	r2, r3
 800df06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df08:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800df0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0c:	7f1a      	ldrb	r2, [r3, #28]
 800df0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df10:	7f5b      	ldrb	r3, [r3, #29]
 800df12:	429a      	cmp	r2, r3
 800df14:	d325      	bcc.n	800df62 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800df16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df18:	2200      	movs	r2, #0
 800df1a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800df1c:	4b1f      	ldr	r3, [pc, #124]	; (800df9c <tcp_slowtmr+0x5a4>)
 800df1e:	2200      	movs	r2, #0
 800df20:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800df22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d00b      	beq.n	800df44 <tcp_slowtmr+0x54c>
 800df2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df34:	6912      	ldr	r2, [r2, #16]
 800df36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df38:	4610      	mov	r0, r2
 800df3a:	4798      	blx	r3
 800df3c:	4603      	mov	r3, r0
 800df3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800df42:	e002      	b.n	800df4a <tcp_slowtmr+0x552>
 800df44:	2300      	movs	r3, #0
 800df46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800df4a:	4b14      	ldr	r3, [pc, #80]	; (800df9c <tcp_slowtmr+0x5a4>)
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d000      	beq.n	800df54 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800df52:	e562      	b.n	800da1a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800df54:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d102      	bne.n	800df62 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800df5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df5e:	f004 f889 	bl	8012074 <tcp_output>
  while (pcb != NULL) {
 800df62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df64:	2b00      	cmp	r3, #0
 800df66:	f47f ad5e 	bne.w	800da26 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800df6a:	2300      	movs	r3, #0
 800df6c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800df6e:	4b0c      	ldr	r3, [pc, #48]	; (800dfa0 <tcp_slowtmr+0x5a8>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800df74:	e069      	b.n	800e04a <tcp_slowtmr+0x652>
 800df76:	bf00      	nop
 800df78:	24007440 	.word	0x24007440
 800df7c:	000a4cb8 	.word	0x000a4cb8
 800df80:	10624dd3 	.word	0x10624dd3
 800df84:	000124f8 	.word	0x000124f8
 800df88:	2400744c 	.word	0x2400744c
 800df8c:	080162bc 	.word	0x080162bc
 800df90:	08016730 	.word	0x08016730
 800df94:	0801633c 	.word	0x0801633c
 800df98:	0801675c 	.word	0x0801675c
 800df9c:	24007454 	.word	0x24007454
 800dfa0:	24007450 	.word	0x24007450
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa6:	7d1b      	ldrb	r3, [r3, #20]
 800dfa8:	2b0a      	cmp	r3, #10
 800dfaa:	d006      	beq.n	800dfba <tcp_slowtmr+0x5c2>
 800dfac:	4b2b      	ldr	r3, [pc, #172]	; (800e05c <tcp_slowtmr+0x664>)
 800dfae:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800dfb2:	492b      	ldr	r1, [pc, #172]	; (800e060 <tcp_slowtmr+0x668>)
 800dfb4:	482b      	ldr	r0, [pc, #172]	; (800e064 <tcp_slowtmr+0x66c>)
 800dfb6:	f005 fd0d 	bl	80139d4 <iprintf>
    pcb_remove = 0;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dfc0:	4b29      	ldr	r3, [pc, #164]	; (800e068 <tcp_slowtmr+0x670>)
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc6:	6a1b      	ldr	r3, [r3, #32]
 800dfc8:	1ad3      	subs	r3, r2, r3
 800dfca:	2bf0      	cmp	r3, #240	; 0xf0
 800dfcc:	d904      	bls.n	800dfd8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800dfce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dfd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d02f      	beq.n	800e040 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dfe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfe2:	f000 fbdb 	bl	800e79c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800dfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d010      	beq.n	800e00e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800dfec:	4b1f      	ldr	r3, [pc, #124]	; (800e06c <tcp_slowtmr+0x674>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d106      	bne.n	800e004 <tcp_slowtmr+0x60c>
 800dff6:	4b19      	ldr	r3, [pc, #100]	; (800e05c <tcp_slowtmr+0x664>)
 800dff8:	f240 52af 	movw	r2, #1455	; 0x5af
 800dffc:	491c      	ldr	r1, [pc, #112]	; (800e070 <tcp_slowtmr+0x678>)
 800dffe:	4819      	ldr	r0, [pc, #100]	; (800e064 <tcp_slowtmr+0x66c>)
 800e000:	f005 fce8 	bl	80139d4 <iprintf>
        prev->next = pcb->next;
 800e004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e006:	68da      	ldr	r2, [r3, #12]
 800e008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00a:	60da      	str	r2, [r3, #12]
 800e00c:	e00f      	b.n	800e02e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e00e:	4b17      	ldr	r3, [pc, #92]	; (800e06c <tcp_slowtmr+0x674>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e014:	429a      	cmp	r2, r3
 800e016:	d006      	beq.n	800e026 <tcp_slowtmr+0x62e>
 800e018:	4b10      	ldr	r3, [pc, #64]	; (800e05c <tcp_slowtmr+0x664>)
 800e01a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e01e:	4915      	ldr	r1, [pc, #84]	; (800e074 <tcp_slowtmr+0x67c>)
 800e020:	4810      	ldr	r0, [pc, #64]	; (800e064 <tcp_slowtmr+0x66c>)
 800e022:	f005 fcd7 	bl	80139d4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	4a10      	ldr	r2, [pc, #64]	; (800e06c <tcp_slowtmr+0x674>)
 800e02c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e030:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e034:	68db      	ldr	r3, [r3, #12]
 800e036:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e038:	69f8      	ldr	r0, [r7, #28]
 800e03a:	f7fe ffe1 	bl	800d000 <tcp_free>
 800e03e:	e004      	b.n	800e04a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e042:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e046:	68db      	ldr	r3, [r3, #12]
 800e048:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d1a9      	bne.n	800dfa4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e050:	bf00      	nop
 800e052:	bf00      	nop
 800e054:	3730      	adds	r7, #48	; 0x30
 800e056:	46bd      	mov	sp, r7
 800e058:	bdb0      	pop	{r4, r5, r7, pc}
 800e05a:	bf00      	nop
 800e05c:	080162bc 	.word	0x080162bc
 800e060:	08016788 	.word	0x08016788
 800e064:	0801633c 	.word	0x0801633c
 800e068:	24007440 	.word	0x24007440
 800e06c:	24007450 	.word	0x24007450
 800e070:	080167b8 	.word	0x080167b8
 800e074:	080167e0 	.word	0x080167e0

0800e078 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e07e:	4b2d      	ldr	r3, [pc, #180]	; (800e134 <tcp_fasttmr+0xbc>)
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	3301      	adds	r3, #1
 800e084:	b2da      	uxtb	r2, r3
 800e086:	4b2b      	ldr	r3, [pc, #172]	; (800e134 <tcp_fasttmr+0xbc>)
 800e088:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e08a:	4b2b      	ldr	r3, [pc, #172]	; (800e138 <tcp_fasttmr+0xc0>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e090:	e048      	b.n	800e124 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	7f9a      	ldrb	r2, [r3, #30]
 800e096:	4b27      	ldr	r3, [pc, #156]	; (800e134 <tcp_fasttmr+0xbc>)
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d03f      	beq.n	800e11e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e09e:	4b25      	ldr	r3, [pc, #148]	; (800e134 <tcp_fasttmr+0xbc>)
 800e0a0:	781a      	ldrb	r2, [r3, #0]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	8b5b      	ldrh	r3, [r3, #26]
 800e0aa:	f003 0301 	and.w	r3, r3, #1
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d010      	beq.n	800e0d4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	8b5b      	ldrh	r3, [r3, #26]
 800e0b6:	f043 0302 	orr.w	r3, r3, #2
 800e0ba:	b29a      	uxth	r2, r3
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f003 ffd7 	bl	8012074 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	8b5b      	ldrh	r3, [r3, #26]
 800e0ca:	f023 0303 	bic.w	r3, r3, #3
 800e0ce:	b29a      	uxth	r2, r3
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	8b5b      	ldrh	r3, [r3, #26]
 800e0d8:	f003 0308 	and.w	r3, r3, #8
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d009      	beq.n	800e0f4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	8b5b      	ldrh	r3, [r3, #26]
 800e0e4:	f023 0308 	bic.w	r3, r3, #8
 800e0e8:	b29a      	uxth	r2, r3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f7ff f91a 	bl	800d328 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	68db      	ldr	r3, [r3, #12]
 800e0f8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d00a      	beq.n	800e118 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e102:	4b0e      	ldr	r3, [pc, #56]	; (800e13c <tcp_fasttmr+0xc4>)
 800e104:	2200      	movs	r2, #0
 800e106:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f000 f819 	bl	800e140 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e10e:	4b0b      	ldr	r3, [pc, #44]	; (800e13c <tcp_fasttmr+0xc4>)
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d000      	beq.n	800e118 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e116:	e7b8      	b.n	800e08a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	607b      	str	r3, [r7, #4]
 800e11c:	e002      	b.n	800e124 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	68db      	ldr	r3, [r3, #12]
 800e122:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d1b3      	bne.n	800e092 <tcp_fasttmr+0x1a>
    }
  }
}
 800e12a:	bf00      	nop
 800e12c:	bf00      	nop
 800e12e:	3708      	adds	r7, #8
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	24007456 	.word	0x24007456
 800e138:	2400744c 	.word	0x2400744c
 800e13c:	24007454 	.word	0x24007454

0800e140 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e140:	b590      	push	{r4, r7, lr}
 800e142:	b085      	sub	sp, #20
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d109      	bne.n	800e162 <tcp_process_refused_data+0x22>
 800e14e:	4b37      	ldr	r3, [pc, #220]	; (800e22c <tcp_process_refused_data+0xec>)
 800e150:	f240 6209 	movw	r2, #1545	; 0x609
 800e154:	4936      	ldr	r1, [pc, #216]	; (800e230 <tcp_process_refused_data+0xf0>)
 800e156:	4837      	ldr	r0, [pc, #220]	; (800e234 <tcp_process_refused_data+0xf4>)
 800e158:	f005 fc3c 	bl	80139d4 <iprintf>
 800e15c:	f06f 030f 	mvn.w	r3, #15
 800e160:	e060      	b.n	800e224 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e166:	7b5b      	ldrb	r3, [r3, #13]
 800e168:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e16e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d00b      	beq.n	800e198 <tcp_process_refused_data+0x58>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6918      	ldr	r0, [r3, #16]
 800e18a:	2300      	movs	r3, #0
 800e18c:	68ba      	ldr	r2, [r7, #8]
 800e18e:	6879      	ldr	r1, [r7, #4]
 800e190:	47a0      	blx	r4
 800e192:	4603      	mov	r3, r0
 800e194:	73fb      	strb	r3, [r7, #15]
 800e196:	e007      	b.n	800e1a8 <tcp_process_refused_data+0x68>
 800e198:	2300      	movs	r3, #0
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	6879      	ldr	r1, [r7, #4]
 800e19e:	2000      	movs	r0, #0
 800e1a0:	f000 f8a4 	bl	800e2ec <tcp_recv_null>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e1a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d12a      	bne.n	800e206 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e1b0:	7bbb      	ldrb	r3, [r7, #14]
 800e1b2:	f003 0320 	and.w	r3, r3, #32
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d033      	beq.n	800e222 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e1c2:	d005      	beq.n	800e1d0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00b      	beq.n	800e1f2 <tcp_process_refused_data+0xb2>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6918      	ldr	r0, [r3, #16]
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	6879      	ldr	r1, [r7, #4]
 800e1ea:	47a0      	blx	r4
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	73fb      	strb	r3, [r7, #15]
 800e1f0:	e001      	b.n	800e1f6 <tcp_process_refused_data+0xb6>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e1f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1fa:	f113 0f0d 	cmn.w	r3, #13
 800e1fe:	d110      	bne.n	800e222 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e200:	f06f 030c 	mvn.w	r3, #12
 800e204:	e00e      	b.n	800e224 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e20a:	f113 0f0d 	cmn.w	r3, #13
 800e20e:	d102      	bne.n	800e216 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e210:	f06f 030c 	mvn.w	r3, #12
 800e214:	e006      	b.n	800e224 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	68ba      	ldr	r2, [r7, #8]
 800e21a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e21c:	f06f 0304 	mvn.w	r3, #4
 800e220:	e000      	b.n	800e224 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e222:	2300      	movs	r3, #0
}
 800e224:	4618      	mov	r0, r3
 800e226:	3714      	adds	r7, #20
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd90      	pop	{r4, r7, pc}
 800e22c:	080162bc 	.word	0x080162bc
 800e230:	08016808 	.word	0x08016808
 800e234:	0801633c 	.word	0x0801633c

0800e238 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e240:	e007      	b.n	800e252 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 f80a 	bl	800e262 <tcp_seg_free>
    seg = next;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d1f4      	bne.n	800e242 <tcp_segs_free+0xa>
  }
}
 800e258:	bf00      	nop
 800e25a:	bf00      	nop
 800e25c:	3710      	adds	r7, #16
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e262:	b580      	push	{r7, lr}
 800e264:	b082      	sub	sp, #8
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d00c      	beq.n	800e28a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d004      	beq.n	800e282 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7fe fa6b 	bl	800c758 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e282:	6879      	ldr	r1, [r7, #4]
 800e284:	2003      	movs	r0, #3
 800e286:	f7fd fbc3 	bl	800ba10 <memp_free>
  }
}
 800e28a:	bf00      	nop
 800e28c:	3708      	adds	r7, #8
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
	...

0800e294 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d106      	bne.n	800e2b0 <tcp_seg_copy+0x1c>
 800e2a2:	4b0f      	ldr	r3, [pc, #60]	; (800e2e0 <tcp_seg_copy+0x4c>)
 800e2a4:	f240 6282 	movw	r2, #1666	; 0x682
 800e2a8:	490e      	ldr	r1, [pc, #56]	; (800e2e4 <tcp_seg_copy+0x50>)
 800e2aa:	480f      	ldr	r0, [pc, #60]	; (800e2e8 <tcp_seg_copy+0x54>)
 800e2ac:	f005 fb92 	bl	80139d4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e2b0:	2003      	movs	r0, #3
 800e2b2:	f7fd fb37 	bl	800b924 <memp_malloc>
 800e2b6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d101      	bne.n	800e2c2 <tcp_seg_copy+0x2e>
    return NULL;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	e00a      	b.n	800e2d8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e2c2:	2210      	movs	r2, #16
 800e2c4:	6879      	ldr	r1, [r7, #4]
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	f005 fb54 	bl	8013974 <memcpy>
  pbuf_ref(cseg->p);
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7fe fae7 	bl	800c8a4 <pbuf_ref>
  return cseg;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3710      	adds	r7, #16
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	080162bc 	.word	0x080162bc
 800e2e4:	0801684c 	.word	0x0801684c
 800e2e8:	0801633c 	.word	0x0801633c

0800e2ec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	607a      	str	r2, [r7, #4]
 800e2f8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d109      	bne.n	800e314 <tcp_recv_null+0x28>
 800e300:	4b12      	ldr	r3, [pc, #72]	; (800e34c <tcp_recv_null+0x60>)
 800e302:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e306:	4912      	ldr	r1, [pc, #72]	; (800e350 <tcp_recv_null+0x64>)
 800e308:	4812      	ldr	r0, [pc, #72]	; (800e354 <tcp_recv_null+0x68>)
 800e30a:	f005 fb63 	bl	80139d4 <iprintf>
 800e30e:	f06f 030f 	mvn.w	r3, #15
 800e312:	e016      	b.n	800e342 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d009      	beq.n	800e32e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	891b      	ldrh	r3, [r3, #8]
 800e31e:	4619      	mov	r1, r3
 800e320:	68b8      	ldr	r0, [r7, #8]
 800e322:	f7ff f9bb 	bl	800d69c <tcp_recved>
    pbuf_free(p);
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f7fe fa16 	bl	800c758 <pbuf_free>
 800e32c:	e008      	b.n	800e340 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e32e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d104      	bne.n	800e340 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e336:	68b8      	ldr	r0, [r7, #8]
 800e338:	f7ff f860 	bl	800d3fc <tcp_close>
 800e33c:	4603      	mov	r3, r0
 800e33e:	e000      	b.n	800e342 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e340:	2300      	movs	r3, #0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3710      	adds	r7, #16
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	080162bc 	.word	0x080162bc
 800e350:	08016868 	.word	0x08016868
 800e354:	0801633c 	.word	0x0801633c

0800e358 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b086      	sub	sp, #24
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	4603      	mov	r3, r0
 800e360:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e366:	2b00      	cmp	r3, #0
 800e368:	db01      	blt.n	800e36e <tcp_kill_prio+0x16>
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	e000      	b.n	800e370 <tcp_kill_prio+0x18>
 800e36e:	237f      	movs	r3, #127	; 0x7f
 800e370:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e372:	7afb      	ldrb	r3, [r7, #11]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d034      	beq.n	800e3e2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e378:	7afb      	ldrb	r3, [r7, #11]
 800e37a:	3b01      	subs	r3, #1
 800e37c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e37e:	2300      	movs	r3, #0
 800e380:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e382:	2300      	movs	r3, #0
 800e384:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e386:	4b19      	ldr	r3, [pc, #100]	; (800e3ec <tcp_kill_prio+0x94>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	617b      	str	r3, [r7, #20]
 800e38c:	e01f      	b.n	800e3ce <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	7d5b      	ldrb	r3, [r3, #21]
 800e392:	7afa      	ldrb	r2, [r7, #11]
 800e394:	429a      	cmp	r2, r3
 800e396:	d80c      	bhi.n	800e3b2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e39c:	7afa      	ldrb	r2, [r7, #11]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d112      	bne.n	800e3c8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e3a2:	4b13      	ldr	r3, [pc, #76]	; (800e3f0 <tcp_kill_prio+0x98>)
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	6a1b      	ldr	r3, [r3, #32]
 800e3aa:	1ad3      	subs	r3, r2, r3
 800e3ac:	68fa      	ldr	r2, [r7, #12]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d80a      	bhi.n	800e3c8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e3b2:	4b0f      	ldr	r3, [pc, #60]	; (800e3f0 <tcp_kill_prio+0x98>)
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	6a1b      	ldr	r3, [r3, #32]
 800e3ba:	1ad3      	subs	r3, r2, r3
 800e3bc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	7d5b      	ldrb	r3, [r3, #21]
 800e3c6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	68db      	ldr	r3, [r3, #12]
 800e3cc:	617b      	str	r3, [r7, #20]
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d1dc      	bne.n	800e38e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d004      	beq.n	800e3e4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e3da:	6938      	ldr	r0, [r7, #16]
 800e3dc:	f7ff f8f8 	bl	800d5d0 <tcp_abort>
 800e3e0:	e000      	b.n	800e3e4 <tcp_kill_prio+0x8c>
    return;
 800e3e2:	bf00      	nop
  }
}
 800e3e4:	3718      	adds	r7, #24
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	2400744c 	.word	0x2400744c
 800e3f0:	24007440 	.word	0x24007440

0800e3f4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b086      	sub	sp, #24
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e3fe:	79fb      	ldrb	r3, [r7, #7]
 800e400:	2b08      	cmp	r3, #8
 800e402:	d009      	beq.n	800e418 <tcp_kill_state+0x24>
 800e404:	79fb      	ldrb	r3, [r7, #7]
 800e406:	2b09      	cmp	r3, #9
 800e408:	d006      	beq.n	800e418 <tcp_kill_state+0x24>
 800e40a:	4b1a      	ldr	r3, [pc, #104]	; (800e474 <tcp_kill_state+0x80>)
 800e40c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e410:	4919      	ldr	r1, [pc, #100]	; (800e478 <tcp_kill_state+0x84>)
 800e412:	481a      	ldr	r0, [pc, #104]	; (800e47c <tcp_kill_state+0x88>)
 800e414:	f005 fade 	bl	80139d4 <iprintf>

  inactivity = 0;
 800e418:	2300      	movs	r3, #0
 800e41a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e41c:	2300      	movs	r3, #0
 800e41e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e420:	4b17      	ldr	r3, [pc, #92]	; (800e480 <tcp_kill_state+0x8c>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	617b      	str	r3, [r7, #20]
 800e426:	e017      	b.n	800e458 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	7d1b      	ldrb	r3, [r3, #20]
 800e42c:	79fa      	ldrb	r2, [r7, #7]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d10f      	bne.n	800e452 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e432:	4b14      	ldr	r3, [pc, #80]	; (800e484 <tcp_kill_state+0x90>)
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	6a1b      	ldr	r3, [r3, #32]
 800e43a:	1ad3      	subs	r3, r2, r3
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d807      	bhi.n	800e452 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e442:	4b10      	ldr	r3, [pc, #64]	; (800e484 <tcp_kill_state+0x90>)
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	6a1b      	ldr	r3, [r3, #32]
 800e44a:	1ad3      	subs	r3, r2, r3
 800e44c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	68db      	ldr	r3, [r3, #12]
 800e456:	617b      	str	r3, [r7, #20]
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1e4      	bne.n	800e428 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d003      	beq.n	800e46c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e464:	2100      	movs	r1, #0
 800e466:	6938      	ldr	r0, [r7, #16]
 800e468:	f7fe fff4 	bl	800d454 <tcp_abandon>
  }
}
 800e46c:	bf00      	nop
 800e46e:	3718      	adds	r7, #24
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	080162bc 	.word	0x080162bc
 800e478:	08016884 	.word	0x08016884
 800e47c:	0801633c 	.word	0x0801633c
 800e480:	2400744c 	.word	0x2400744c
 800e484:	24007440 	.word	0x24007440

0800e488 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e48e:	2300      	movs	r3, #0
 800e490:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e492:	2300      	movs	r3, #0
 800e494:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e496:	4b12      	ldr	r3, [pc, #72]	; (800e4e0 <tcp_kill_timewait+0x58>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	e012      	b.n	800e4c4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e49e:	4b11      	ldr	r3, [pc, #68]	; (800e4e4 <tcp_kill_timewait+0x5c>)
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	6a1b      	ldr	r3, [r3, #32]
 800e4a6:	1ad3      	subs	r3, r2, r3
 800e4a8:	687a      	ldr	r2, [r7, #4]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d807      	bhi.n	800e4be <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e4ae:	4b0d      	ldr	r3, [pc, #52]	; (800e4e4 <tcp_kill_timewait+0x5c>)
 800e4b0:	681a      	ldr	r2, [r3, #0]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	6a1b      	ldr	r3, [r3, #32]
 800e4b6:	1ad3      	subs	r3, r2, r3
 800e4b8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	68db      	ldr	r3, [r3, #12]
 800e4c2:	60fb      	str	r3, [r7, #12]
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d1e9      	bne.n	800e49e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d002      	beq.n	800e4d6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e4d0:	68b8      	ldr	r0, [r7, #8]
 800e4d2:	f7ff f87d 	bl	800d5d0 <tcp_abort>
  }
}
 800e4d6:	bf00      	nop
 800e4d8:	3710      	adds	r7, #16
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	24007450 	.word	0x24007450
 800e4e4:	24007440 	.word	0x24007440

0800e4e8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e4ee:	4b10      	ldr	r3, [pc, #64]	; (800e530 <tcp_handle_closepend+0x48>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e4f4:	e014      	b.n	800e520 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	68db      	ldr	r3, [r3, #12]
 800e4fa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	8b5b      	ldrh	r3, [r3, #26]
 800e500:	f003 0308 	and.w	r3, r3, #8
 800e504:	2b00      	cmp	r3, #0
 800e506:	d009      	beq.n	800e51c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	8b5b      	ldrh	r3, [r3, #26]
 800e50c:	f023 0308 	bic.w	r3, r3, #8
 800e510:	b29a      	uxth	r2, r3
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f7fe ff06 	bl	800d328 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d1e7      	bne.n	800e4f6 <tcp_handle_closepend+0xe>
  }
}
 800e526:	bf00      	nop
 800e528:	bf00      	nop
 800e52a:	3708      	adds	r7, #8
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	2400744c 	.word	0x2400744c

0800e534 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	4603      	mov	r3, r0
 800e53c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e53e:	2001      	movs	r0, #1
 800e540:	f7fd f9f0 	bl	800b924 <memp_malloc>
 800e544:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d126      	bne.n	800e59a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e54c:	f7ff ffcc 	bl	800e4e8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e550:	f7ff ff9a 	bl	800e488 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e554:	2001      	movs	r0, #1
 800e556:	f7fd f9e5 	bl	800b924 <memp_malloc>
 800e55a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d11b      	bne.n	800e59a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e562:	2009      	movs	r0, #9
 800e564:	f7ff ff46 	bl	800e3f4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e568:	2001      	movs	r0, #1
 800e56a:	f7fd f9db 	bl	800b924 <memp_malloc>
 800e56e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d111      	bne.n	800e59a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e576:	2008      	movs	r0, #8
 800e578:	f7ff ff3c 	bl	800e3f4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e57c:	2001      	movs	r0, #1
 800e57e:	f7fd f9d1 	bl	800b924 <memp_malloc>
 800e582:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d107      	bne.n	800e59a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e58a:	79fb      	ldrb	r3, [r7, #7]
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7ff fee3 	bl	800e358 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e592:	2001      	movs	r0, #1
 800e594:	f7fd f9c6 	bl	800b924 <memp_malloc>
 800e598:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d03f      	beq.n	800e620 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e5a0:	229c      	movs	r2, #156	; 0x9c
 800e5a2:	2100      	movs	r1, #0
 800e5a4:	68f8      	ldr	r0, [r7, #12]
 800e5a6:	f005 fa0d 	bl	80139c4 <memset>
    pcb->prio = prio;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	79fa      	ldrb	r2, [r7, #7]
 800e5ae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e5b6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e5c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	22ff      	movs	r2, #255	; 0xff
 800e5ce:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e5d6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2206      	movs	r2, #6
 800e5dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2206      	movs	r2, #6
 800e5e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5ec:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e5f6:	4b0d      	ldr	r3, [pc, #52]	; (800e62c <tcp_alloc+0xf8>)
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e5fe:	4b0c      	ldr	r3, [pc, #48]	; (800e630 <tcp_alloc+0xfc>)
 800e600:	781a      	ldrb	r2, [r3, #0]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e60c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	4a08      	ldr	r2, [pc, #32]	; (800e634 <tcp_alloc+0x100>)
 800e614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	4a07      	ldr	r2, [pc, #28]	; (800e638 <tcp_alloc+0x104>)
 800e61c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e620:	68fb      	ldr	r3, [r7, #12]
}
 800e622:	4618      	mov	r0, r3
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	24007440 	.word	0x24007440
 800e630:	24007456 	.word	0x24007456
 800e634:	0800e2ed 	.word	0x0800e2ed
 800e638:	006ddd00 	.word	0x006ddd00

0800e63c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800e640:	2040      	movs	r0, #64	; 0x40
 800e642:	f7ff ff77 	bl	800e534 <tcp_alloc>
 800e646:	4603      	mov	r3, r0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b083      	sub	sp, #12
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d002      	beq.n	800e662 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	683a      	ldr	r2, [r7, #0]
 800e660:	611a      	str	r2, [r3, #16]
  }
}
 800e662:	bf00      	nop
 800e664:	370c      	adds	r7, #12
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr
	...

0800e670 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d00e      	beq.n	800e69e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	7d1b      	ldrb	r3, [r3, #20]
 800e684:	2b01      	cmp	r3, #1
 800e686:	d106      	bne.n	800e696 <tcp_recv+0x26>
 800e688:	4b07      	ldr	r3, [pc, #28]	; (800e6a8 <tcp_recv+0x38>)
 800e68a:	f240 72df 	movw	r2, #2015	; 0x7df
 800e68e:	4907      	ldr	r1, [pc, #28]	; (800e6ac <tcp_recv+0x3c>)
 800e690:	4807      	ldr	r0, [pc, #28]	; (800e6b0 <tcp_recv+0x40>)
 800e692:	f005 f99f 	bl	80139d4 <iprintf>
    pcb->recv = recv;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	683a      	ldr	r2, [r7, #0]
 800e69a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e69e:	bf00      	nop
 800e6a0:	3708      	adds	r7, #8
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	080162bc 	.word	0x080162bc
 800e6ac:	08016894 	.word	0x08016894
 800e6b0:	0801633c 	.word	0x0801633c

0800e6b4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d00e      	beq.n	800e6e2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	7d1b      	ldrb	r3, [r3, #20]
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d106      	bne.n	800e6da <tcp_sent+0x26>
 800e6cc:	4b07      	ldr	r3, [pc, #28]	; (800e6ec <tcp_sent+0x38>)
 800e6ce:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e6d2:	4907      	ldr	r1, [pc, #28]	; (800e6f0 <tcp_sent+0x3c>)
 800e6d4:	4807      	ldr	r0, [pc, #28]	; (800e6f4 <tcp_sent+0x40>)
 800e6d6:	f005 f97d 	bl	80139d4 <iprintf>
    pcb->sent = sent;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	683a      	ldr	r2, [r7, #0]
 800e6de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e6e2:	bf00      	nop
 800e6e4:	3708      	adds	r7, #8
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	080162bc 	.word	0x080162bc
 800e6f0:	080168bc 	.word	0x080168bc
 800e6f4:	0801633c 	.word	0x0801633c

0800e6f8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00e      	beq.n	800e726 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	7d1b      	ldrb	r3, [r3, #20]
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d106      	bne.n	800e71e <tcp_err+0x26>
 800e710:	4b07      	ldr	r3, [pc, #28]	; (800e730 <tcp_err+0x38>)
 800e712:	f640 020d 	movw	r2, #2061	; 0x80d
 800e716:	4907      	ldr	r1, [pc, #28]	; (800e734 <tcp_err+0x3c>)
 800e718:	4807      	ldr	r0, [pc, #28]	; (800e738 <tcp_err+0x40>)
 800e71a:	f005 f95b 	bl	80139d4 <iprintf>
    pcb->errf = err;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	683a      	ldr	r2, [r7, #0]
 800e722:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e726:	bf00      	nop
 800e728:	3708      	adds	r7, #8
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}
 800e72e:	bf00      	nop
 800e730:	080162bc 	.word	0x080162bc
 800e734:	080168e4 	.word	0x080168e4
 800e738:	0801633c 	.word	0x0801633c

0800e73c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	4613      	mov	r3, r2
 800e748:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d107      	bne.n	800e760 <tcp_poll+0x24>
 800e750:	4b0e      	ldr	r3, [pc, #56]	; (800e78c <tcp_poll+0x50>)
 800e752:	f640 023d 	movw	r2, #2109	; 0x83d
 800e756:	490e      	ldr	r1, [pc, #56]	; (800e790 <tcp_poll+0x54>)
 800e758:	480e      	ldr	r0, [pc, #56]	; (800e794 <tcp_poll+0x58>)
 800e75a:	f005 f93b 	bl	80139d4 <iprintf>
 800e75e:	e011      	b.n	800e784 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	7d1b      	ldrb	r3, [r3, #20]
 800e764:	2b01      	cmp	r3, #1
 800e766:	d106      	bne.n	800e776 <tcp_poll+0x3a>
 800e768:	4b08      	ldr	r3, [pc, #32]	; (800e78c <tcp_poll+0x50>)
 800e76a:	f640 023e 	movw	r2, #2110	; 0x83e
 800e76e:	490a      	ldr	r1, [pc, #40]	; (800e798 <tcp_poll+0x5c>)
 800e770:	4808      	ldr	r0, [pc, #32]	; (800e794 <tcp_poll+0x58>)
 800e772:	f005 f92f 	bl	80139d4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	68ba      	ldr	r2, [r7, #8]
 800e77a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	79fa      	ldrb	r2, [r7, #7]
 800e782:	775a      	strb	r2, [r3, #29]
}
 800e784:	3710      	adds	r7, #16
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	080162bc 	.word	0x080162bc
 800e790:	0801690c 	.word	0x0801690c
 800e794:	0801633c 	.word	0x0801633c
 800e798:	08016924 	.word	0x08016924

0800e79c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d107      	bne.n	800e7ba <tcp_pcb_purge+0x1e>
 800e7aa:	4b21      	ldr	r3, [pc, #132]	; (800e830 <tcp_pcb_purge+0x94>)
 800e7ac:	f640 0251 	movw	r2, #2129	; 0x851
 800e7b0:	4920      	ldr	r1, [pc, #128]	; (800e834 <tcp_pcb_purge+0x98>)
 800e7b2:	4821      	ldr	r0, [pc, #132]	; (800e838 <tcp_pcb_purge+0x9c>)
 800e7b4:	f005 f90e 	bl	80139d4 <iprintf>
 800e7b8:	e037      	b.n	800e82a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	7d1b      	ldrb	r3, [r3, #20]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d033      	beq.n	800e82a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e7c6:	2b0a      	cmp	r3, #10
 800e7c8:	d02f      	beq.n	800e82a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d02b      	beq.n	800e82a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d007      	beq.n	800e7ea <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7fd ffba 	bl	800c758 <pbuf_free>
      pcb->refused_data = NULL;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d002      	beq.n	800e7f8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 f986 	bl	800eb04 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7fe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e804:	4618      	mov	r0, r3
 800e806:	f7ff fd17 	bl	800e238 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e80e:	4618      	mov	r0, r3
 800e810:	f7ff fd12 	bl	800e238 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2200      	movs	r2, #0
 800e818:	66da      	str	r2, [r3, #108]	; 0x6c
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2200      	movs	r2, #0
 800e826:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e82a:	3708      	adds	r7, #8
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	080162bc 	.word	0x080162bc
 800e834:	08016944 	.word	0x08016944
 800e838:	0801633c 	.word	0x0801633c

0800e83c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d106      	bne.n	800e85a <tcp_pcb_remove+0x1e>
 800e84c:	4b3e      	ldr	r3, [pc, #248]	; (800e948 <tcp_pcb_remove+0x10c>)
 800e84e:	f640 0283 	movw	r2, #2179	; 0x883
 800e852:	493e      	ldr	r1, [pc, #248]	; (800e94c <tcp_pcb_remove+0x110>)
 800e854:	483e      	ldr	r0, [pc, #248]	; (800e950 <tcp_pcb_remove+0x114>)
 800e856:	f005 f8bd 	bl	80139d4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d106      	bne.n	800e86e <tcp_pcb_remove+0x32>
 800e860:	4b39      	ldr	r3, [pc, #228]	; (800e948 <tcp_pcb_remove+0x10c>)
 800e862:	f640 0284 	movw	r2, #2180	; 0x884
 800e866:	493b      	ldr	r1, [pc, #236]	; (800e954 <tcp_pcb_remove+0x118>)
 800e868:	4839      	ldr	r0, [pc, #228]	; (800e950 <tcp_pcb_remove+0x114>)
 800e86a:	f005 f8b3 	bl	80139d4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	683a      	ldr	r2, [r7, #0]
 800e874:	429a      	cmp	r2, r3
 800e876:	d105      	bne.n	800e884 <tcp_pcb_remove+0x48>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	68da      	ldr	r2, [r3, #12]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	601a      	str	r2, [r3, #0]
 800e882:	e013      	b.n	800e8ac <tcp_pcb_remove+0x70>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	60fb      	str	r3, [r7, #12]
 800e88a:	e00c      	b.n	800e8a6 <tcp_pcb_remove+0x6a>
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	68db      	ldr	r3, [r3, #12]
 800e890:	683a      	ldr	r2, [r7, #0]
 800e892:	429a      	cmp	r2, r3
 800e894:	d104      	bne.n	800e8a0 <tcp_pcb_remove+0x64>
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	68da      	ldr	r2, [r3, #12]
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	60da      	str	r2, [r3, #12]
 800e89e:	e005      	b.n	800e8ac <tcp_pcb_remove+0x70>
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	68db      	ldr	r3, [r3, #12]
 800e8a4:	60fb      	str	r3, [r7, #12]
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d1ef      	bne.n	800e88c <tcp_pcb_remove+0x50>
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e8b2:	6838      	ldr	r0, [r7, #0]
 800e8b4:	f7ff ff72 	bl	800e79c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	7d1b      	ldrb	r3, [r3, #20]
 800e8bc:	2b0a      	cmp	r3, #10
 800e8be:	d013      	beq.n	800e8e8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d00f      	beq.n	800e8e8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	8b5b      	ldrh	r3, [r3, #26]
 800e8cc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d009      	beq.n	800e8e8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	8b5b      	ldrh	r3, [r3, #26]
 800e8d8:	f043 0302 	orr.w	r3, r3, #2
 800e8dc:	b29a      	uxth	r2, r3
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e8e2:	6838      	ldr	r0, [r7, #0]
 800e8e4:	f003 fbc6 	bl	8012074 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	7d1b      	ldrb	r3, [r3, #20]
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d020      	beq.n	800e932 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d006      	beq.n	800e906 <tcp_pcb_remove+0xca>
 800e8f8:	4b13      	ldr	r3, [pc, #76]	; (800e948 <tcp_pcb_remove+0x10c>)
 800e8fa:	f640 0293 	movw	r2, #2195	; 0x893
 800e8fe:	4916      	ldr	r1, [pc, #88]	; (800e958 <tcp_pcb_remove+0x11c>)
 800e900:	4813      	ldr	r0, [pc, #76]	; (800e950 <tcp_pcb_remove+0x114>)
 800e902:	f005 f867 	bl	80139d4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d006      	beq.n	800e91c <tcp_pcb_remove+0xe0>
 800e90e:	4b0e      	ldr	r3, [pc, #56]	; (800e948 <tcp_pcb_remove+0x10c>)
 800e910:	f640 0294 	movw	r2, #2196	; 0x894
 800e914:	4911      	ldr	r1, [pc, #68]	; (800e95c <tcp_pcb_remove+0x120>)
 800e916:	480e      	ldr	r0, [pc, #56]	; (800e950 <tcp_pcb_remove+0x114>)
 800e918:	f005 f85c 	bl	80139d4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e920:	2b00      	cmp	r3, #0
 800e922:	d006      	beq.n	800e932 <tcp_pcb_remove+0xf6>
 800e924:	4b08      	ldr	r3, [pc, #32]	; (800e948 <tcp_pcb_remove+0x10c>)
 800e926:	f640 0296 	movw	r2, #2198	; 0x896
 800e92a:	490d      	ldr	r1, [pc, #52]	; (800e960 <tcp_pcb_remove+0x124>)
 800e92c:	4808      	ldr	r0, [pc, #32]	; (800e950 <tcp_pcb_remove+0x114>)
 800e92e:	f005 f851 	bl	80139d4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	2200      	movs	r2, #0
 800e936:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	2200      	movs	r2, #0
 800e93c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e93e:	bf00      	nop
 800e940:	3710      	adds	r7, #16
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
 800e946:	bf00      	nop
 800e948:	080162bc 	.word	0x080162bc
 800e94c:	08016960 	.word	0x08016960
 800e950:	0801633c 	.word	0x0801633c
 800e954:	0801697c 	.word	0x0801697c
 800e958:	0801699c 	.word	0x0801699c
 800e95c:	080169b4 	.word	0x080169b4
 800e960:	080169d0 	.word	0x080169d0

0800e964 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d106      	bne.n	800e980 <tcp_next_iss+0x1c>
 800e972:	4b0a      	ldr	r3, [pc, #40]	; (800e99c <tcp_next_iss+0x38>)
 800e974:	f640 02af 	movw	r2, #2223	; 0x8af
 800e978:	4909      	ldr	r1, [pc, #36]	; (800e9a0 <tcp_next_iss+0x3c>)
 800e97a:	480a      	ldr	r0, [pc, #40]	; (800e9a4 <tcp_next_iss+0x40>)
 800e97c:	f005 f82a 	bl	80139d4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e980:	4b09      	ldr	r3, [pc, #36]	; (800e9a8 <tcp_next_iss+0x44>)
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	4b09      	ldr	r3, [pc, #36]	; (800e9ac <tcp_next_iss+0x48>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4413      	add	r3, r2
 800e98a:	4a07      	ldr	r2, [pc, #28]	; (800e9a8 <tcp_next_iss+0x44>)
 800e98c:	6013      	str	r3, [r2, #0]
  return iss;
 800e98e:	4b06      	ldr	r3, [pc, #24]	; (800e9a8 <tcp_next_iss+0x44>)
 800e990:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e992:	4618      	mov	r0, r3
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	080162bc 	.word	0x080162bc
 800e9a0:	080169e8 	.word	0x080169e8
 800e9a4:	0801633c 	.word	0x0801633c
 800e9a8:	2400002c 	.word	0x2400002c
 800e9ac:	24007440 	.word	0x24007440

0800e9b0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b086      	sub	sp, #24
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	607a      	str	r2, [r7, #4]
 800e9bc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d106      	bne.n	800e9d2 <tcp_eff_send_mss_netif+0x22>
 800e9c4:	4b14      	ldr	r3, [pc, #80]	; (800ea18 <tcp_eff_send_mss_netif+0x68>)
 800e9c6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e9ca:	4914      	ldr	r1, [pc, #80]	; (800ea1c <tcp_eff_send_mss_netif+0x6c>)
 800e9cc:	4814      	ldr	r0, [pc, #80]	; (800ea20 <tcp_eff_send_mss_netif+0x70>)
 800e9ce:	f005 f801 	bl	80139d4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d101      	bne.n	800e9dc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e9d8:	89fb      	ldrh	r3, [r7, #14]
 800e9da:	e019      	b.n	800ea10 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e9e0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e9e2:	8afb      	ldrh	r3, [r7, #22]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d012      	beq.n	800ea0e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e9e8:	2328      	movs	r3, #40	; 0x28
 800e9ea:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e9ec:	8afa      	ldrh	r2, [r7, #22]
 800e9ee:	8abb      	ldrh	r3, [r7, #20]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d904      	bls.n	800e9fe <tcp_eff_send_mss_netif+0x4e>
 800e9f4:	8afa      	ldrh	r2, [r7, #22]
 800e9f6:	8abb      	ldrh	r3, [r7, #20]
 800e9f8:	1ad3      	subs	r3, r2, r3
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	e000      	b.n	800ea00 <tcp_eff_send_mss_netif+0x50>
 800e9fe:	2300      	movs	r3, #0
 800ea00:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ea02:	8a7a      	ldrh	r2, [r7, #18]
 800ea04:	89fb      	ldrh	r3, [r7, #14]
 800ea06:	4293      	cmp	r3, r2
 800ea08:	bf28      	it	cs
 800ea0a:	4613      	movcs	r3, r2
 800ea0c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ea0e:	89fb      	ldrh	r3, [r7, #14]
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3718      	adds	r7, #24
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	080162bc 	.word	0x080162bc
 800ea1c:	08016a04 	.word	0x08016a04
 800ea20:	0801633c 	.word	0x0801633c

0800ea24 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d119      	bne.n	800ea6c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ea38:	4b10      	ldr	r3, [pc, #64]	; (800ea7c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ea3a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ea3e:	4910      	ldr	r1, [pc, #64]	; (800ea80 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ea40:	4810      	ldr	r0, [pc, #64]	; (800ea84 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ea42:	f004 ffc7 	bl	80139d4 <iprintf>

  while (pcb != NULL) {
 800ea46:	e011      	b.n	800ea6c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d108      	bne.n	800ea66 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ea5a:	68f8      	ldr	r0, [r7, #12]
 800ea5c:	f7fe fdb8 	bl	800d5d0 <tcp_abort>
      pcb = next;
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	60fb      	str	r3, [r7, #12]
 800ea64:	e002      	b.n	800ea6c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	68db      	ldr	r3, [r3, #12]
 800ea6a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d1ea      	bne.n	800ea48 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ea72:	bf00      	nop
 800ea74:	bf00      	nop
 800ea76:	3710      	adds	r7, #16
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}
 800ea7c:	080162bc 	.word	0x080162bc
 800ea80:	08016a2c 	.word	0x08016a2c
 800ea84:	0801633c 	.word	0x0801633c

0800ea88 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d02a      	beq.n	800eaee <tcp_netif_ip_addr_changed+0x66>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d026      	beq.n	800eaee <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800eaa0:	4b15      	ldr	r3, [pc, #84]	; (800eaf8 <tcp_netif_ip_addr_changed+0x70>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f7ff ffbc 	bl	800ea24 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800eaac:	4b13      	ldr	r3, [pc, #76]	; (800eafc <tcp_netif_ip_addr_changed+0x74>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	4619      	mov	r1, r3
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f7ff ffb6 	bl	800ea24 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d017      	beq.n	800eaee <tcp_netif_ip_addr_changed+0x66>
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d013      	beq.n	800eaee <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eac6:	4b0e      	ldr	r3, [pc, #56]	; (800eb00 <tcp_netif_ip_addr_changed+0x78>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	60fb      	str	r3, [r7, #12]
 800eacc:	e00c      	b.n	800eae8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d103      	bne.n	800eae2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	68db      	ldr	r3, [r3, #12]
 800eae6:	60fb      	str	r3, [r7, #12]
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d1ef      	bne.n	800eace <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800eaee:	bf00      	nop
 800eaf0:	3710      	adds	r7, #16
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	2400744c 	.word	0x2400744c
 800eafc:	24007444 	.word	0x24007444
 800eb00:	24007448 	.word	0x24007448

0800eb04 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d007      	beq.n	800eb24 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7ff fb8d 	bl	800e238 <tcp_segs_free>
    pcb->ooseq = NULL;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2200      	movs	r2, #0
 800eb22:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800eb24:	bf00      	nop
 800eb26:	3708      	adds	r7, #8
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800eb2c:	b590      	push	{r4, r7, lr}
 800eb2e:	b08d      	sub	sp, #52	; 0x34
 800eb30:	af04      	add	r7, sp, #16
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d105      	bne.n	800eb48 <tcp_input+0x1c>
 800eb3c:	4b9b      	ldr	r3, [pc, #620]	; (800edac <tcp_input+0x280>)
 800eb3e:	2283      	movs	r2, #131	; 0x83
 800eb40:	499b      	ldr	r1, [pc, #620]	; (800edb0 <tcp_input+0x284>)
 800eb42:	489c      	ldr	r0, [pc, #624]	; (800edb4 <tcp_input+0x288>)
 800eb44:	f004 ff46 	bl	80139d4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	4a9a      	ldr	r2, [pc, #616]	; (800edb8 <tcp_input+0x28c>)
 800eb4e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	895b      	ldrh	r3, [r3, #10]
 800eb54:	2b13      	cmp	r3, #19
 800eb56:	f240 83d1 	bls.w	800f2fc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800eb5a:	4b98      	ldr	r3, [pc, #608]	; (800edbc <tcp_input+0x290>)
 800eb5c:	695b      	ldr	r3, [r3, #20]
 800eb5e:	4a97      	ldr	r2, [pc, #604]	; (800edbc <tcp_input+0x290>)
 800eb60:	6812      	ldr	r2, [r2, #0]
 800eb62:	4611      	mov	r1, r2
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7fb fb2f 	bl	800a1c8 <ip4_addr_isbroadcast_u32>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f040 83c7 	bne.w	800f300 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800eb72:	4b92      	ldr	r3, [pc, #584]	; (800edbc <tcp_input+0x290>)
 800eb74:	695b      	ldr	r3, [r3, #20]
 800eb76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800eb7a:	2be0      	cmp	r3, #224	; 0xe0
 800eb7c:	f000 83c0 	beq.w	800f300 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800eb80:	4b8d      	ldr	r3, [pc, #564]	; (800edb8 <tcp_input+0x28c>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	899b      	ldrh	r3, [r3, #12]
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7f9 fdaf 	bl	80086ec <lwip_htons>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	0b1b      	lsrs	r3, r3, #12
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	b2db      	uxtb	r3, r3
 800eb96:	009b      	lsls	r3, r3, #2
 800eb98:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800eb9a:	7cbb      	ldrb	r3, [r7, #18]
 800eb9c:	2b13      	cmp	r3, #19
 800eb9e:	f240 83b1 	bls.w	800f304 <tcp_input+0x7d8>
 800eba2:	7cbb      	ldrb	r3, [r7, #18]
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	891b      	ldrh	r3, [r3, #8]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	f200 83aa 	bhi.w	800f304 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ebb0:	7cbb      	ldrb	r3, [r7, #18]
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	3b14      	subs	r3, #20
 800ebb6:	b29a      	uxth	r2, r3
 800ebb8:	4b81      	ldr	r3, [pc, #516]	; (800edc0 <tcp_input+0x294>)
 800ebba:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ebbc:	4b81      	ldr	r3, [pc, #516]	; (800edc4 <tcp_input+0x298>)
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	895a      	ldrh	r2, [r3, #10]
 800ebc6:	7cbb      	ldrb	r3, [r7, #18]
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d309      	bcc.n	800ebe2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ebce:	4b7c      	ldr	r3, [pc, #496]	; (800edc0 <tcp_input+0x294>)
 800ebd0:	881a      	ldrh	r2, [r3, #0]
 800ebd2:	4b7d      	ldr	r3, [pc, #500]	; (800edc8 <tcp_input+0x29c>)
 800ebd4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ebd6:	7cbb      	ldrb	r3, [r7, #18]
 800ebd8:	4619      	mov	r1, r3
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f7fd fd36 	bl	800c64c <pbuf_remove_header>
 800ebe0:	e04e      	b.n	800ec80 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d105      	bne.n	800ebf6 <tcp_input+0xca>
 800ebea:	4b70      	ldr	r3, [pc, #448]	; (800edac <tcp_input+0x280>)
 800ebec:	22c2      	movs	r2, #194	; 0xc2
 800ebee:	4977      	ldr	r1, [pc, #476]	; (800edcc <tcp_input+0x2a0>)
 800ebf0:	4870      	ldr	r0, [pc, #448]	; (800edb4 <tcp_input+0x288>)
 800ebf2:	f004 feef 	bl	80139d4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ebf6:	2114      	movs	r1, #20
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f7fd fd27 	bl	800c64c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	895a      	ldrh	r2, [r3, #10]
 800ec02:	4b71      	ldr	r3, [pc, #452]	; (800edc8 <tcp_input+0x29c>)
 800ec04:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ec06:	4b6e      	ldr	r3, [pc, #440]	; (800edc0 <tcp_input+0x294>)
 800ec08:	881a      	ldrh	r2, [r3, #0]
 800ec0a:	4b6f      	ldr	r3, [pc, #444]	; (800edc8 <tcp_input+0x29c>)
 800ec0c:	881b      	ldrh	r3, [r3, #0]
 800ec0e:	1ad3      	subs	r3, r2, r3
 800ec10:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ec12:	4b6d      	ldr	r3, [pc, #436]	; (800edc8 <tcp_input+0x29c>)
 800ec14:	881b      	ldrh	r3, [r3, #0]
 800ec16:	4619      	mov	r1, r3
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f7fd fd17 	bl	800c64c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	895b      	ldrh	r3, [r3, #10]
 800ec24:	8a3a      	ldrh	r2, [r7, #16]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	f200 836e 	bhi.w	800f308 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	4a64      	ldr	r2, [pc, #400]	; (800edc4 <tcp_input+0x298>)
 800ec34:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	8a3a      	ldrh	r2, [r7, #16]
 800ec3c:	4611      	mov	r1, r2
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7fd fd04 	bl	800c64c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	891a      	ldrh	r2, [r3, #8]
 800ec48:	8a3b      	ldrh	r3, [r7, #16]
 800ec4a:	1ad3      	subs	r3, r2, r3
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	895b      	ldrh	r3, [r3, #10]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d005      	beq.n	800ec66 <tcp_input+0x13a>
 800ec5a:	4b54      	ldr	r3, [pc, #336]	; (800edac <tcp_input+0x280>)
 800ec5c:	22df      	movs	r2, #223	; 0xdf
 800ec5e:	495c      	ldr	r1, [pc, #368]	; (800edd0 <tcp_input+0x2a4>)
 800ec60:	4854      	ldr	r0, [pc, #336]	; (800edb4 <tcp_input+0x288>)
 800ec62:	f004 feb7 	bl	80139d4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	891a      	ldrh	r2, [r3, #8]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	891b      	ldrh	r3, [r3, #8]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d005      	beq.n	800ec80 <tcp_input+0x154>
 800ec74:	4b4d      	ldr	r3, [pc, #308]	; (800edac <tcp_input+0x280>)
 800ec76:	22e0      	movs	r2, #224	; 0xe0
 800ec78:	4956      	ldr	r1, [pc, #344]	; (800edd4 <tcp_input+0x2a8>)
 800ec7a:	484e      	ldr	r0, [pc, #312]	; (800edb4 <tcp_input+0x288>)
 800ec7c:	f004 feaa 	bl	80139d4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ec80:	4b4d      	ldr	r3, [pc, #308]	; (800edb8 <tcp_input+0x28c>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	881b      	ldrh	r3, [r3, #0]
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	4a4b      	ldr	r2, [pc, #300]	; (800edb8 <tcp_input+0x28c>)
 800ec8a:	6814      	ldr	r4, [r2, #0]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7f9 fd2d 	bl	80086ec <lwip_htons>
 800ec92:	4603      	mov	r3, r0
 800ec94:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ec96:	4b48      	ldr	r3, [pc, #288]	; (800edb8 <tcp_input+0x28c>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	885b      	ldrh	r3, [r3, #2]
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	4a46      	ldr	r2, [pc, #280]	; (800edb8 <tcp_input+0x28c>)
 800eca0:	6814      	ldr	r4, [r2, #0]
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7f9 fd22 	bl	80086ec <lwip_htons>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ecac:	4b42      	ldr	r3, [pc, #264]	; (800edb8 <tcp_input+0x28c>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	4a41      	ldr	r2, [pc, #260]	; (800edb8 <tcp_input+0x28c>)
 800ecb4:	6814      	ldr	r4, [r2, #0]
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7f9 fd2d 	bl	8008716 <lwip_htonl>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	6063      	str	r3, [r4, #4]
 800ecc0:	6863      	ldr	r3, [r4, #4]
 800ecc2:	4a45      	ldr	r2, [pc, #276]	; (800edd8 <tcp_input+0x2ac>)
 800ecc4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ecc6:	4b3c      	ldr	r3, [pc, #240]	; (800edb8 <tcp_input+0x28c>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	689b      	ldr	r3, [r3, #8]
 800eccc:	4a3a      	ldr	r2, [pc, #232]	; (800edb8 <tcp_input+0x28c>)
 800ecce:	6814      	ldr	r4, [r2, #0]
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7f9 fd20 	bl	8008716 <lwip_htonl>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	60a3      	str	r3, [r4, #8]
 800ecda:	68a3      	ldr	r3, [r4, #8]
 800ecdc:	4a3f      	ldr	r2, [pc, #252]	; (800eddc <tcp_input+0x2b0>)
 800ecde:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ece0:	4b35      	ldr	r3, [pc, #212]	; (800edb8 <tcp_input+0x28c>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	89db      	ldrh	r3, [r3, #14]
 800ece6:	b29b      	uxth	r3, r3
 800ece8:	4a33      	ldr	r2, [pc, #204]	; (800edb8 <tcp_input+0x28c>)
 800ecea:	6814      	ldr	r4, [r2, #0]
 800ecec:	4618      	mov	r0, r3
 800ecee:	f7f9 fcfd 	bl	80086ec <lwip_htons>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ecf6:	4b30      	ldr	r3, [pc, #192]	; (800edb8 <tcp_input+0x28c>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	899b      	ldrh	r3, [r3, #12]
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7f9 fcf4 	bl	80086ec <lwip_htons>
 800ed04:	4603      	mov	r3, r0
 800ed06:	b2db      	uxtb	r3, r3
 800ed08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed0c:	b2da      	uxtb	r2, r3
 800ed0e:	4b34      	ldr	r3, [pc, #208]	; (800ede0 <tcp_input+0x2b4>)
 800ed10:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	891a      	ldrh	r2, [r3, #8]
 800ed16:	4b33      	ldr	r3, [pc, #204]	; (800ede4 <tcp_input+0x2b8>)
 800ed18:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ed1a:	4b31      	ldr	r3, [pc, #196]	; (800ede0 <tcp_input+0x2b4>)
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	f003 0303 	and.w	r3, r3, #3
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00c      	beq.n	800ed40 <tcp_input+0x214>
    tcplen++;
 800ed26:	4b2f      	ldr	r3, [pc, #188]	; (800ede4 <tcp_input+0x2b8>)
 800ed28:	881b      	ldrh	r3, [r3, #0]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	b29a      	uxth	r2, r3
 800ed2e:	4b2d      	ldr	r3, [pc, #180]	; (800ede4 <tcp_input+0x2b8>)
 800ed30:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	891a      	ldrh	r2, [r3, #8]
 800ed36:	4b2b      	ldr	r3, [pc, #172]	; (800ede4 <tcp_input+0x2b8>)
 800ed38:	881b      	ldrh	r3, [r3, #0]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	f200 82e6 	bhi.w	800f30c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ed40:	2300      	movs	r3, #0
 800ed42:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed44:	4b28      	ldr	r3, [pc, #160]	; (800ede8 <tcp_input+0x2bc>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	61fb      	str	r3, [r7, #28]
 800ed4a:	e09d      	b.n	800ee88 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ed4c:	69fb      	ldr	r3, [r7, #28]
 800ed4e:	7d1b      	ldrb	r3, [r3, #20]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d105      	bne.n	800ed60 <tcp_input+0x234>
 800ed54:	4b15      	ldr	r3, [pc, #84]	; (800edac <tcp_input+0x280>)
 800ed56:	22fb      	movs	r2, #251	; 0xfb
 800ed58:	4924      	ldr	r1, [pc, #144]	; (800edec <tcp_input+0x2c0>)
 800ed5a:	4816      	ldr	r0, [pc, #88]	; (800edb4 <tcp_input+0x288>)
 800ed5c:	f004 fe3a 	bl	80139d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	7d1b      	ldrb	r3, [r3, #20]
 800ed64:	2b0a      	cmp	r3, #10
 800ed66:	d105      	bne.n	800ed74 <tcp_input+0x248>
 800ed68:	4b10      	ldr	r3, [pc, #64]	; (800edac <tcp_input+0x280>)
 800ed6a:	22fc      	movs	r2, #252	; 0xfc
 800ed6c:	4920      	ldr	r1, [pc, #128]	; (800edf0 <tcp_input+0x2c4>)
 800ed6e:	4811      	ldr	r0, [pc, #68]	; (800edb4 <tcp_input+0x288>)
 800ed70:	f004 fe30 	bl	80139d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ed74:	69fb      	ldr	r3, [r7, #28]
 800ed76:	7d1b      	ldrb	r3, [r3, #20]
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	d105      	bne.n	800ed88 <tcp_input+0x25c>
 800ed7c:	4b0b      	ldr	r3, [pc, #44]	; (800edac <tcp_input+0x280>)
 800ed7e:	22fd      	movs	r2, #253	; 0xfd
 800ed80:	491c      	ldr	r1, [pc, #112]	; (800edf4 <tcp_input+0x2c8>)
 800ed82:	480c      	ldr	r0, [pc, #48]	; (800edb4 <tcp_input+0x288>)
 800ed84:	f004 fe26 	bl	80139d4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	7a1b      	ldrb	r3, [r3, #8]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d033      	beq.n	800edf8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	7a1a      	ldrb	r2, [r3, #8]
 800ed94:	4b09      	ldr	r3, [pc, #36]	; (800edbc <tcp_input+0x290>)
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d029      	beq.n	800edf8 <tcp_input+0x2cc>
      prev = pcb;
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	61bb      	str	r3, [r7, #24]
      continue;
 800eda8:	e06b      	b.n	800ee82 <tcp_input+0x356>
 800edaa:	bf00      	nop
 800edac:	08016a60 	.word	0x08016a60
 800edb0:	08016ad0 	.word	0x08016ad0
 800edb4:	08016ae8 	.word	0x08016ae8
 800edb8:	24007468 	.word	0x24007468
 800edbc:	2400431c 	.word	0x2400431c
 800edc0:	2400746c 	.word	0x2400746c
 800edc4:	24007470 	.word	0x24007470
 800edc8:	2400746e 	.word	0x2400746e
 800edcc:	08016b10 	.word	0x08016b10
 800edd0:	08016b20 	.word	0x08016b20
 800edd4:	08016b2c 	.word	0x08016b2c
 800edd8:	24007478 	.word	0x24007478
 800eddc:	2400747c 	.word	0x2400747c
 800ede0:	24007484 	.word	0x24007484
 800ede4:	24007482 	.word	0x24007482
 800ede8:	2400744c 	.word	0x2400744c
 800edec:	08016b4c 	.word	0x08016b4c
 800edf0:	08016b74 	.word	0x08016b74
 800edf4:	08016ba0 	.word	0x08016ba0
    }

    if (pcb->remote_port == tcphdr->src &&
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	8b1a      	ldrh	r2, [r3, #24]
 800edfc:	4b72      	ldr	r3, [pc, #456]	; (800efc8 <tcp_input+0x49c>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	881b      	ldrh	r3, [r3, #0]
 800ee02:	b29b      	uxth	r3, r3
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d13a      	bne.n	800ee7e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ee08:	69fb      	ldr	r3, [r7, #28]
 800ee0a:	8ada      	ldrh	r2, [r3, #22]
 800ee0c:	4b6e      	ldr	r3, [pc, #440]	; (800efc8 <tcp_input+0x49c>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	885b      	ldrh	r3, [r3, #2]
 800ee12:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d132      	bne.n	800ee7e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	685a      	ldr	r2, [r3, #4]
 800ee1c:	4b6b      	ldr	r3, [pc, #428]	; (800efcc <tcp_input+0x4a0>)
 800ee1e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d12c      	bne.n	800ee7e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	4b68      	ldr	r3, [pc, #416]	; (800efcc <tcp_input+0x4a0>)
 800ee2a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d126      	bne.n	800ee7e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	68db      	ldr	r3, [r3, #12]
 800ee34:	69fa      	ldr	r2, [r7, #28]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d106      	bne.n	800ee48 <tcp_input+0x31c>
 800ee3a:	4b65      	ldr	r3, [pc, #404]	; (800efd0 <tcp_input+0x4a4>)
 800ee3c:	f240 120d 	movw	r2, #269	; 0x10d
 800ee40:	4964      	ldr	r1, [pc, #400]	; (800efd4 <tcp_input+0x4a8>)
 800ee42:	4865      	ldr	r0, [pc, #404]	; (800efd8 <tcp_input+0x4ac>)
 800ee44:	f004 fdc6 	bl	80139d4 <iprintf>
      if (prev != NULL) {
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00a      	beq.n	800ee64 <tcp_input+0x338>
        prev->next = pcb->next;
 800ee4e:	69fb      	ldr	r3, [r7, #28]
 800ee50:	68da      	ldr	r2, [r3, #12]
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ee56:	4b61      	ldr	r3, [pc, #388]	; (800efdc <tcp_input+0x4b0>)
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ee5e:	4a5f      	ldr	r2, [pc, #380]	; (800efdc <tcp_input+0x4b0>)
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ee64:	69fb      	ldr	r3, [r7, #28]
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	69fa      	ldr	r2, [r7, #28]
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d111      	bne.n	800ee92 <tcp_input+0x366>
 800ee6e:	4b58      	ldr	r3, [pc, #352]	; (800efd0 <tcp_input+0x4a4>)
 800ee70:	f240 1215 	movw	r2, #277	; 0x115
 800ee74:	495a      	ldr	r1, [pc, #360]	; (800efe0 <tcp_input+0x4b4>)
 800ee76:	4858      	ldr	r0, [pc, #352]	; (800efd8 <tcp_input+0x4ac>)
 800ee78:	f004 fdac 	bl	80139d4 <iprintf>
      break;
 800ee7c:	e009      	b.n	800ee92 <tcp_input+0x366>
    }
    prev = pcb;
 800ee7e:	69fb      	ldr	r3, [r7, #28]
 800ee80:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee82:	69fb      	ldr	r3, [r7, #28]
 800ee84:	68db      	ldr	r3, [r3, #12]
 800ee86:	61fb      	str	r3, [r7, #28]
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	f47f af5e 	bne.w	800ed4c <tcp_input+0x220>
 800ee90:	e000      	b.n	800ee94 <tcp_input+0x368>
      break;
 800ee92:	bf00      	nop
  }

  if (pcb == NULL) {
 800ee94:	69fb      	ldr	r3, [r7, #28]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f040 80aa 	bne.w	800eff0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee9c:	4b51      	ldr	r3, [pc, #324]	; (800efe4 <tcp_input+0x4b8>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	61fb      	str	r3, [r7, #28]
 800eea2:	e03f      	b.n	800ef24 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800eea4:	69fb      	ldr	r3, [r7, #28]
 800eea6:	7d1b      	ldrb	r3, [r3, #20]
 800eea8:	2b0a      	cmp	r3, #10
 800eeaa:	d006      	beq.n	800eeba <tcp_input+0x38e>
 800eeac:	4b48      	ldr	r3, [pc, #288]	; (800efd0 <tcp_input+0x4a4>)
 800eeae:	f240 121f 	movw	r2, #287	; 0x11f
 800eeb2:	494d      	ldr	r1, [pc, #308]	; (800efe8 <tcp_input+0x4bc>)
 800eeb4:	4848      	ldr	r0, [pc, #288]	; (800efd8 <tcp_input+0x4ac>)
 800eeb6:	f004 fd8d 	bl	80139d4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eeba:	69fb      	ldr	r3, [r7, #28]
 800eebc:	7a1b      	ldrb	r3, [r3, #8]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d009      	beq.n	800eed6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eec2:	69fb      	ldr	r3, [r7, #28]
 800eec4:	7a1a      	ldrb	r2, [r3, #8]
 800eec6:	4b41      	ldr	r3, [pc, #260]	; (800efcc <tcp_input+0x4a0>)
 800eec8:	685b      	ldr	r3, [r3, #4]
 800eeca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eece:	3301      	adds	r3, #1
 800eed0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d122      	bne.n	800ef1c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800eed6:	69fb      	ldr	r3, [r7, #28]
 800eed8:	8b1a      	ldrh	r2, [r3, #24]
 800eeda:	4b3b      	ldr	r3, [pc, #236]	; (800efc8 <tcp_input+0x49c>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	881b      	ldrh	r3, [r3, #0]
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d11b      	bne.n	800ef1e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800eee6:	69fb      	ldr	r3, [r7, #28]
 800eee8:	8ada      	ldrh	r2, [r3, #22]
 800eeea:	4b37      	ldr	r3, [pc, #220]	; (800efc8 <tcp_input+0x49c>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	885b      	ldrh	r3, [r3, #2]
 800eef0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d113      	bne.n	800ef1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eef6:	69fb      	ldr	r3, [r7, #28]
 800eef8:	685a      	ldr	r2, [r3, #4]
 800eefa:	4b34      	ldr	r3, [pc, #208]	; (800efcc <tcp_input+0x4a0>)
 800eefc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d10d      	bne.n	800ef1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	4b31      	ldr	r3, [pc, #196]	; (800efcc <tcp_input+0x4a0>)
 800ef08:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d107      	bne.n	800ef1e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ef0e:	69f8      	ldr	r0, [r7, #28]
 800ef10:	f000 fb56 	bl	800f5c0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f7fd fc1f 	bl	800c758 <pbuf_free>
        return;
 800ef1a:	e1fd      	b.n	800f318 <tcp_input+0x7ec>
        continue;
 800ef1c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef1e:	69fb      	ldr	r3, [r7, #28]
 800ef20:	68db      	ldr	r3, [r3, #12]
 800ef22:	61fb      	str	r3, [r7, #28]
 800ef24:	69fb      	ldr	r3, [r7, #28]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d1bc      	bne.n	800eea4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef2e:	4b2f      	ldr	r3, [pc, #188]	; (800efec <tcp_input+0x4c0>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	617b      	str	r3, [r7, #20]
 800ef34:	e02a      	b.n	800ef8c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	7a1b      	ldrb	r3, [r3, #8]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d00c      	beq.n	800ef58 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	7a1a      	ldrb	r2, [r3, #8]
 800ef42:	4b22      	ldr	r3, [pc, #136]	; (800efcc <tcp_input+0x4a0>)
 800ef44:	685b      	ldr	r3, [r3, #4]
 800ef46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d002      	beq.n	800ef58 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	61bb      	str	r3, [r7, #24]
        continue;
 800ef56:	e016      	b.n	800ef86 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	8ada      	ldrh	r2, [r3, #22]
 800ef5c:	4b1a      	ldr	r3, [pc, #104]	; (800efc8 <tcp_input+0x49c>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	885b      	ldrh	r3, [r3, #2]
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d10c      	bne.n	800ef82 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	4b17      	ldr	r3, [pc, #92]	; (800efcc <tcp_input+0x4a0>)
 800ef6e:	695b      	ldr	r3, [r3, #20]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d00f      	beq.n	800ef94 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d00d      	beq.n	800ef96 <tcp_input+0x46a>
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d009      	beq.n	800ef96 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	617b      	str	r3, [r7, #20]
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d1d1      	bne.n	800ef36 <tcp_input+0x40a>
 800ef92:	e000      	b.n	800ef96 <tcp_input+0x46a>
            break;
 800ef94:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d029      	beq.n	800eff0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ef9c:	69bb      	ldr	r3, [r7, #24]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d00a      	beq.n	800efb8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	68da      	ldr	r2, [r3, #12]
 800efa6:	69bb      	ldr	r3, [r7, #24]
 800efa8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800efaa:	4b10      	ldr	r3, [pc, #64]	; (800efec <tcp_input+0x4c0>)
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800efb2:	4a0e      	ldr	r2, [pc, #56]	; (800efec <tcp_input+0x4c0>)
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800efb8:	6978      	ldr	r0, [r7, #20]
 800efba:	f000 fa03 	bl	800f3c4 <tcp_listen_input>
      }
      pbuf_free(p);
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f7fd fbca 	bl	800c758 <pbuf_free>
      return;
 800efc4:	e1a8      	b.n	800f318 <tcp_input+0x7ec>
 800efc6:	bf00      	nop
 800efc8:	24007468 	.word	0x24007468
 800efcc:	2400431c 	.word	0x2400431c
 800efd0:	08016a60 	.word	0x08016a60
 800efd4:	08016bc8 	.word	0x08016bc8
 800efd8:	08016ae8 	.word	0x08016ae8
 800efdc:	2400744c 	.word	0x2400744c
 800efe0:	08016bf4 	.word	0x08016bf4
 800efe4:	24007450 	.word	0x24007450
 800efe8:	08016c20 	.word	0x08016c20
 800efec:	24007448 	.word	0x24007448
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800eff0:	69fb      	ldr	r3, [r7, #28]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	f000 8158 	beq.w	800f2a8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800eff8:	4b95      	ldr	r3, [pc, #596]	; (800f250 <tcp_input+0x724>)
 800effa:	2200      	movs	r2, #0
 800effc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	891a      	ldrh	r2, [r3, #8]
 800f002:	4b93      	ldr	r3, [pc, #588]	; (800f250 <tcp_input+0x724>)
 800f004:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f006:	4a92      	ldr	r2, [pc, #584]	; (800f250 <tcp_input+0x724>)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f00c:	4b91      	ldr	r3, [pc, #580]	; (800f254 <tcp_input+0x728>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4a8f      	ldr	r2, [pc, #572]	; (800f250 <tcp_input+0x724>)
 800f012:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f014:	4b90      	ldr	r3, [pc, #576]	; (800f258 <tcp_input+0x72c>)
 800f016:	2200      	movs	r2, #0
 800f018:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f01a:	4b90      	ldr	r3, [pc, #576]	; (800f25c <tcp_input+0x730>)
 800f01c:	2200      	movs	r2, #0
 800f01e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f020:	4b8f      	ldr	r3, [pc, #572]	; (800f260 <tcp_input+0x734>)
 800f022:	2200      	movs	r2, #0
 800f024:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f026:	4b8f      	ldr	r3, [pc, #572]	; (800f264 <tcp_input+0x738>)
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	f003 0308 	and.w	r3, r3, #8
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d006      	beq.n	800f040 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	7b5b      	ldrb	r3, [r3, #13]
 800f036:	f043 0301 	orr.w	r3, r3, #1
 800f03a:	b2da      	uxtb	r2, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f040:	69fb      	ldr	r3, [r7, #28]
 800f042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f044:	2b00      	cmp	r3, #0
 800f046:	d017      	beq.n	800f078 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f048:	69f8      	ldr	r0, [r7, #28]
 800f04a:	f7ff f879 	bl	800e140 <tcp_process_refused_data>
 800f04e:	4603      	mov	r3, r0
 800f050:	f113 0f0d 	cmn.w	r3, #13
 800f054:	d007      	beq.n	800f066 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d00c      	beq.n	800f078 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f05e:	4b82      	ldr	r3, [pc, #520]	; (800f268 <tcp_input+0x73c>)
 800f060:	881b      	ldrh	r3, [r3, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d008      	beq.n	800f078 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f066:	69fb      	ldr	r3, [r7, #28]
 800f068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	f040 80e3 	bne.w	800f236 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f070:	69f8      	ldr	r0, [r7, #28]
 800f072:	f003 fe05 	bl	8012c80 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f076:	e0de      	b.n	800f236 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f078:	4a7c      	ldr	r2, [pc, #496]	; (800f26c <tcp_input+0x740>)
 800f07a:	69fb      	ldr	r3, [r7, #28]
 800f07c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f07e:	69f8      	ldr	r0, [r7, #28]
 800f080:	f000 fb18 	bl	800f6b4 <tcp_process>
 800f084:	4603      	mov	r3, r0
 800f086:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f088:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f08c:	f113 0f0d 	cmn.w	r3, #13
 800f090:	f000 80d3 	beq.w	800f23a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f094:	4b71      	ldr	r3, [pc, #452]	; (800f25c <tcp_input+0x730>)
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	f003 0308 	and.w	r3, r3, #8
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d015      	beq.n	800f0cc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d008      	beq.n	800f0bc <tcp_input+0x590>
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0b0:	69fa      	ldr	r2, [r7, #28]
 800f0b2:	6912      	ldr	r2, [r2, #16]
 800f0b4:	f06f 010d 	mvn.w	r1, #13
 800f0b8:	4610      	mov	r0, r2
 800f0ba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f0bc:	69f9      	ldr	r1, [r7, #28]
 800f0be:	486c      	ldr	r0, [pc, #432]	; (800f270 <tcp_input+0x744>)
 800f0c0:	f7ff fbbc 	bl	800e83c <tcp_pcb_remove>
        tcp_free(pcb);
 800f0c4:	69f8      	ldr	r0, [r7, #28]
 800f0c6:	f7fd ff9b 	bl	800d000 <tcp_free>
 800f0ca:	e0da      	b.n	800f282 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f0d0:	4b63      	ldr	r3, [pc, #396]	; (800f260 <tcp_input+0x734>)
 800f0d2:	881b      	ldrh	r3, [r3, #0]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d01d      	beq.n	800f114 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f0d8:	4b61      	ldr	r3, [pc, #388]	; (800f260 <tcp_input+0x734>)
 800f0da:	881b      	ldrh	r3, [r3, #0]
 800f0dc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f0de:	69fb      	ldr	r3, [r7, #28]
 800f0e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d00a      	beq.n	800f0fe <tcp_input+0x5d2>
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0ee:	69fa      	ldr	r2, [r7, #28]
 800f0f0:	6910      	ldr	r0, [r2, #16]
 800f0f2:	89fa      	ldrh	r2, [r7, #14]
 800f0f4:	69f9      	ldr	r1, [r7, #28]
 800f0f6:	4798      	blx	r3
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	74fb      	strb	r3, [r7, #19]
 800f0fc:	e001      	b.n	800f102 <tcp_input+0x5d6>
 800f0fe:	2300      	movs	r3, #0
 800f100:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f102:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f106:	f113 0f0d 	cmn.w	r3, #13
 800f10a:	f000 8098 	beq.w	800f23e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f10e:	4b54      	ldr	r3, [pc, #336]	; (800f260 <tcp_input+0x734>)
 800f110:	2200      	movs	r2, #0
 800f112:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f114:	69f8      	ldr	r0, [r7, #28]
 800f116:	f000 f915 	bl	800f344 <tcp_input_delayed_close>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f040 8090 	bne.w	800f242 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f122:	4b4d      	ldr	r3, [pc, #308]	; (800f258 <tcp_input+0x72c>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d041      	beq.n	800f1ae <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d006      	beq.n	800f140 <tcp_input+0x614>
 800f132:	4b50      	ldr	r3, [pc, #320]	; (800f274 <tcp_input+0x748>)
 800f134:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f138:	494f      	ldr	r1, [pc, #316]	; (800f278 <tcp_input+0x74c>)
 800f13a:	4850      	ldr	r0, [pc, #320]	; (800f27c <tcp_input+0x750>)
 800f13c:	f004 fc4a 	bl	80139d4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	8b5b      	ldrh	r3, [r3, #26]
 800f144:	f003 0310 	and.w	r3, r3, #16
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d008      	beq.n	800f15e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f14c:	4b42      	ldr	r3, [pc, #264]	; (800f258 <tcp_input+0x72c>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4618      	mov	r0, r3
 800f152:	f7fd fb01 	bl	800c758 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f156:	69f8      	ldr	r0, [r7, #28]
 800f158:	f7fe fa3a 	bl	800d5d0 <tcp_abort>
            goto aborted;
 800f15c:	e091      	b.n	800f282 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f164:	2b00      	cmp	r3, #0
 800f166:	d00c      	beq.n	800f182 <tcp_input+0x656>
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	6918      	ldr	r0, [r3, #16]
 800f172:	4b39      	ldr	r3, [pc, #228]	; (800f258 <tcp_input+0x72c>)
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	2300      	movs	r3, #0
 800f178:	69f9      	ldr	r1, [r7, #28]
 800f17a:	47a0      	blx	r4
 800f17c:	4603      	mov	r3, r0
 800f17e:	74fb      	strb	r3, [r7, #19]
 800f180:	e008      	b.n	800f194 <tcp_input+0x668>
 800f182:	4b35      	ldr	r3, [pc, #212]	; (800f258 <tcp_input+0x72c>)
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	2300      	movs	r3, #0
 800f188:	69f9      	ldr	r1, [r7, #28]
 800f18a:	2000      	movs	r0, #0
 800f18c:	f7ff f8ae 	bl	800e2ec <tcp_recv_null>
 800f190:	4603      	mov	r3, r0
 800f192:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f194:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f198:	f113 0f0d 	cmn.w	r3, #13
 800f19c:	d053      	beq.n	800f246 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f19e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d003      	beq.n	800f1ae <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f1a6:	4b2c      	ldr	r3, [pc, #176]	; (800f258 <tcp_input+0x72c>)
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f1ae:	4b2b      	ldr	r3, [pc, #172]	; (800f25c <tcp_input+0x730>)
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	f003 0320 	and.w	r3, r3, #32
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d030      	beq.n	800f21c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f1ba:	69fb      	ldr	r3, [r7, #28]
 800f1bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d009      	beq.n	800f1d6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1c6:	7b5a      	ldrb	r2, [r3, #13]
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1cc:	f042 0220 	orr.w	r2, r2, #32
 800f1d0:	b2d2      	uxtb	r2, r2
 800f1d2:	735a      	strb	r2, [r3, #13]
 800f1d4:	e022      	b.n	800f21c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f1d6:	69fb      	ldr	r3, [r7, #28]
 800f1d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1da:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f1de:	d005      	beq.n	800f1ec <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	b29a      	uxth	r2, r3
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f1ec:	69fb      	ldr	r3, [r7, #28]
 800f1ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d00b      	beq.n	800f20e <tcp_input+0x6e2>
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	6918      	ldr	r0, [r3, #16]
 800f200:	2300      	movs	r3, #0
 800f202:	2200      	movs	r2, #0
 800f204:	69f9      	ldr	r1, [r7, #28]
 800f206:	47a0      	blx	r4
 800f208:	4603      	mov	r3, r0
 800f20a:	74fb      	strb	r3, [r7, #19]
 800f20c:	e001      	b.n	800f212 <tcp_input+0x6e6>
 800f20e:	2300      	movs	r3, #0
 800f210:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f212:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f216:	f113 0f0d 	cmn.w	r3, #13
 800f21a:	d016      	beq.n	800f24a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f21c:	4b13      	ldr	r3, [pc, #76]	; (800f26c <tcp_input+0x740>)
 800f21e:	2200      	movs	r2, #0
 800f220:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f222:	69f8      	ldr	r0, [r7, #28]
 800f224:	f000 f88e 	bl	800f344 <tcp_input_delayed_close>
 800f228:	4603      	mov	r3, r0
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d128      	bne.n	800f280 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f22e:	69f8      	ldr	r0, [r7, #28]
 800f230:	f002 ff20 	bl	8012074 <tcp_output>
 800f234:	e025      	b.n	800f282 <tcp_input+0x756>
        goto aborted;
 800f236:	bf00      	nop
 800f238:	e023      	b.n	800f282 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f23a:	bf00      	nop
 800f23c:	e021      	b.n	800f282 <tcp_input+0x756>
              goto aborted;
 800f23e:	bf00      	nop
 800f240:	e01f      	b.n	800f282 <tcp_input+0x756>
          goto aborted;
 800f242:	bf00      	nop
 800f244:	e01d      	b.n	800f282 <tcp_input+0x756>
            goto aborted;
 800f246:	bf00      	nop
 800f248:	e01b      	b.n	800f282 <tcp_input+0x756>
              goto aborted;
 800f24a:	bf00      	nop
 800f24c:	e019      	b.n	800f282 <tcp_input+0x756>
 800f24e:	bf00      	nop
 800f250:	24007458 	.word	0x24007458
 800f254:	24007468 	.word	0x24007468
 800f258:	24007488 	.word	0x24007488
 800f25c:	24007485 	.word	0x24007485
 800f260:	24007480 	.word	0x24007480
 800f264:	24007484 	.word	0x24007484
 800f268:	24007482 	.word	0x24007482
 800f26c:	2400748c 	.word	0x2400748c
 800f270:	2400744c 	.word	0x2400744c
 800f274:	08016a60 	.word	0x08016a60
 800f278:	08016c50 	.word	0x08016c50
 800f27c:	08016ae8 	.word	0x08016ae8
          goto aborted;
 800f280:	bf00      	nop
    tcp_input_pcb = NULL;
 800f282:	4b27      	ldr	r3, [pc, #156]	; (800f320 <tcp_input+0x7f4>)
 800f284:	2200      	movs	r2, #0
 800f286:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f288:	4b26      	ldr	r3, [pc, #152]	; (800f324 <tcp_input+0x7f8>)
 800f28a:	2200      	movs	r2, #0
 800f28c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f28e:	4b26      	ldr	r3, [pc, #152]	; (800f328 <tcp_input+0x7fc>)
 800f290:	685b      	ldr	r3, [r3, #4]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d03f      	beq.n	800f316 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f296:	4b24      	ldr	r3, [pc, #144]	; (800f328 <tcp_input+0x7fc>)
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7fd fa5c 	bl	800c758 <pbuf_free>
      inseg.p = NULL;
 800f2a0:	4b21      	ldr	r3, [pc, #132]	; (800f328 <tcp_input+0x7fc>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f2a6:	e036      	b.n	800f316 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f2a8:	4b20      	ldr	r3, [pc, #128]	; (800f32c <tcp_input+0x800>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	899b      	ldrh	r3, [r3, #12]
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7f9 fa1b 	bl	80086ec <lwip_htons>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	f003 0304 	and.w	r3, r3, #4
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d118      	bne.n	800f2f4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2c2:	4b1b      	ldr	r3, [pc, #108]	; (800f330 <tcp_input+0x804>)
 800f2c4:	6819      	ldr	r1, [r3, #0]
 800f2c6:	4b1b      	ldr	r3, [pc, #108]	; (800f334 <tcp_input+0x808>)
 800f2c8:	881b      	ldrh	r3, [r3, #0]
 800f2ca:	461a      	mov	r2, r3
 800f2cc:	4b1a      	ldr	r3, [pc, #104]	; (800f338 <tcp_input+0x80c>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2d2:	4b16      	ldr	r3, [pc, #88]	; (800f32c <tcp_input+0x800>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2d6:	885b      	ldrh	r3, [r3, #2]
 800f2d8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2da:	4a14      	ldr	r2, [pc, #80]	; (800f32c <tcp_input+0x800>)
 800f2dc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2de:	8812      	ldrh	r2, [r2, #0]
 800f2e0:	b292      	uxth	r2, r2
 800f2e2:	9202      	str	r2, [sp, #8]
 800f2e4:	9301      	str	r3, [sp, #4]
 800f2e6:	4b15      	ldr	r3, [pc, #84]	; (800f33c <tcp_input+0x810>)
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	4b15      	ldr	r3, [pc, #84]	; (800f340 <tcp_input+0x814>)
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	2000      	movs	r0, #0
 800f2f0:	f003 fc74 	bl	8012bdc <tcp_rst>
    pbuf_free(p);
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7fd fa2f 	bl	800c758 <pbuf_free>
  return;
 800f2fa:	e00c      	b.n	800f316 <tcp_input+0x7ea>
    goto dropped;
 800f2fc:	bf00      	nop
 800f2fe:	e006      	b.n	800f30e <tcp_input+0x7e2>
    goto dropped;
 800f300:	bf00      	nop
 800f302:	e004      	b.n	800f30e <tcp_input+0x7e2>
    goto dropped;
 800f304:	bf00      	nop
 800f306:	e002      	b.n	800f30e <tcp_input+0x7e2>
      goto dropped;
 800f308:	bf00      	nop
 800f30a:	e000      	b.n	800f30e <tcp_input+0x7e2>
      goto dropped;
 800f30c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f7fd fa22 	bl	800c758 <pbuf_free>
 800f314:	e000      	b.n	800f318 <tcp_input+0x7ec>
  return;
 800f316:	bf00      	nop
}
 800f318:	3724      	adds	r7, #36	; 0x24
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd90      	pop	{r4, r7, pc}
 800f31e:	bf00      	nop
 800f320:	2400748c 	.word	0x2400748c
 800f324:	24007488 	.word	0x24007488
 800f328:	24007458 	.word	0x24007458
 800f32c:	24007468 	.word	0x24007468
 800f330:	2400747c 	.word	0x2400747c
 800f334:	24007482 	.word	0x24007482
 800f338:	24007478 	.word	0x24007478
 800f33c:	2400432c 	.word	0x2400432c
 800f340:	24004330 	.word	0x24004330

0800f344 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d106      	bne.n	800f360 <tcp_input_delayed_close+0x1c>
 800f352:	4b17      	ldr	r3, [pc, #92]	; (800f3b0 <tcp_input_delayed_close+0x6c>)
 800f354:	f240 225a 	movw	r2, #602	; 0x25a
 800f358:	4916      	ldr	r1, [pc, #88]	; (800f3b4 <tcp_input_delayed_close+0x70>)
 800f35a:	4817      	ldr	r0, [pc, #92]	; (800f3b8 <tcp_input_delayed_close+0x74>)
 800f35c:	f004 fb3a 	bl	80139d4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f360:	4b16      	ldr	r3, [pc, #88]	; (800f3bc <tcp_input_delayed_close+0x78>)
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	f003 0310 	and.w	r3, r3, #16
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d01c      	beq.n	800f3a6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	8b5b      	ldrh	r3, [r3, #26]
 800f370:	f003 0310 	and.w	r3, r3, #16
 800f374:	2b00      	cmp	r3, #0
 800f376:	d10d      	bne.n	800f394 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d008      	beq.n	800f394 <tcp_input_delayed_close+0x50>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f388:	687a      	ldr	r2, [r7, #4]
 800f38a:	6912      	ldr	r2, [r2, #16]
 800f38c:	f06f 010e 	mvn.w	r1, #14
 800f390:	4610      	mov	r0, r2
 800f392:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f394:	6879      	ldr	r1, [r7, #4]
 800f396:	480a      	ldr	r0, [pc, #40]	; (800f3c0 <tcp_input_delayed_close+0x7c>)
 800f398:	f7ff fa50 	bl	800e83c <tcp_pcb_remove>
    tcp_free(pcb);
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f7fd fe2f 	bl	800d000 <tcp_free>
    return 1;
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	e000      	b.n	800f3a8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f3a6:	2300      	movs	r3, #0
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3708      	adds	r7, #8
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	08016a60 	.word	0x08016a60
 800f3b4:	08016c6c 	.word	0x08016c6c
 800f3b8:	08016ae8 	.word	0x08016ae8
 800f3bc:	24007485 	.word	0x24007485
 800f3c0:	2400744c 	.word	0x2400744c

0800f3c4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f3c4:	b590      	push	{r4, r7, lr}
 800f3c6:	b08b      	sub	sp, #44	; 0x2c
 800f3c8:	af04      	add	r7, sp, #16
 800f3ca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f3cc:	4b6f      	ldr	r3, [pc, #444]	; (800f58c <tcp_listen_input+0x1c8>)
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	f003 0304 	and.w	r3, r3, #4
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f040 80d2 	bne.w	800f57e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d106      	bne.n	800f3ee <tcp_listen_input+0x2a>
 800f3e0:	4b6b      	ldr	r3, [pc, #428]	; (800f590 <tcp_listen_input+0x1cc>)
 800f3e2:	f240 2281 	movw	r2, #641	; 0x281
 800f3e6:	496b      	ldr	r1, [pc, #428]	; (800f594 <tcp_listen_input+0x1d0>)
 800f3e8:	486b      	ldr	r0, [pc, #428]	; (800f598 <tcp_listen_input+0x1d4>)
 800f3ea:	f004 faf3 	bl	80139d4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f3ee:	4b67      	ldr	r3, [pc, #412]	; (800f58c <tcp_listen_input+0x1c8>)
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	f003 0310 	and.w	r3, r3, #16
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d019      	beq.n	800f42e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3fa:	4b68      	ldr	r3, [pc, #416]	; (800f59c <tcp_listen_input+0x1d8>)
 800f3fc:	6819      	ldr	r1, [r3, #0]
 800f3fe:	4b68      	ldr	r3, [pc, #416]	; (800f5a0 <tcp_listen_input+0x1dc>)
 800f400:	881b      	ldrh	r3, [r3, #0]
 800f402:	461a      	mov	r2, r3
 800f404:	4b67      	ldr	r3, [pc, #412]	; (800f5a4 <tcp_listen_input+0x1e0>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f40a:	4b67      	ldr	r3, [pc, #412]	; (800f5a8 <tcp_listen_input+0x1e4>)
 800f40c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f40e:	885b      	ldrh	r3, [r3, #2]
 800f410:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f412:	4a65      	ldr	r2, [pc, #404]	; (800f5a8 <tcp_listen_input+0x1e4>)
 800f414:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f416:	8812      	ldrh	r2, [r2, #0]
 800f418:	b292      	uxth	r2, r2
 800f41a:	9202      	str	r2, [sp, #8]
 800f41c:	9301      	str	r3, [sp, #4]
 800f41e:	4b63      	ldr	r3, [pc, #396]	; (800f5ac <tcp_listen_input+0x1e8>)
 800f420:	9300      	str	r3, [sp, #0]
 800f422:	4b63      	ldr	r3, [pc, #396]	; (800f5b0 <tcp_listen_input+0x1ec>)
 800f424:	4602      	mov	r2, r0
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f003 fbd8 	bl	8012bdc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f42c:	e0a9      	b.n	800f582 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f42e:	4b57      	ldr	r3, [pc, #348]	; (800f58c <tcp_listen_input+0x1c8>)
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	f003 0302 	and.w	r3, r3, #2
 800f436:	2b00      	cmp	r3, #0
 800f438:	f000 80a3 	beq.w	800f582 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	7d5b      	ldrb	r3, [r3, #21]
 800f440:	4618      	mov	r0, r3
 800f442:	f7ff f877 	bl	800e534 <tcp_alloc>
 800f446:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d111      	bne.n	800f472 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	699b      	ldr	r3, [r3, #24]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d00a      	beq.n	800f46c <tcp_listen_input+0xa8>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	699b      	ldr	r3, [r3, #24]
 800f45a:	687a      	ldr	r2, [r7, #4]
 800f45c:	6910      	ldr	r0, [r2, #16]
 800f45e:	f04f 32ff 	mov.w	r2, #4294967295
 800f462:	2100      	movs	r1, #0
 800f464:	4798      	blx	r3
 800f466:	4603      	mov	r3, r0
 800f468:	73bb      	strb	r3, [r7, #14]
      return;
 800f46a:	e08b      	b.n	800f584 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f46c:	23f0      	movs	r3, #240	; 0xf0
 800f46e:	73bb      	strb	r3, [r7, #14]
      return;
 800f470:	e088      	b.n	800f584 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f472:	4b50      	ldr	r3, [pc, #320]	; (800f5b4 <tcp_listen_input+0x1f0>)
 800f474:	695a      	ldr	r2, [r3, #20]
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f47a:	4b4e      	ldr	r3, [pc, #312]	; (800f5b4 <tcp_listen_input+0x1f0>)
 800f47c:	691a      	ldr	r2, [r3, #16]
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	8ada      	ldrh	r2, [r3, #22]
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f48a:	4b47      	ldr	r3, [pc, #284]	; (800f5a8 <tcp_listen_input+0x1e4>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	881b      	ldrh	r3, [r3, #0]
 800f490:	b29a      	uxth	r2, r3
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	2203      	movs	r2, #3
 800f49a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f49c:	4b41      	ldr	r3, [pc, #260]	; (800f5a4 <tcp_listen_input+0x1e0>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	1c5a      	adds	r2, r3, #1
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f4ae:	6978      	ldr	r0, [r7, #20]
 800f4b0:	f7ff fa58 	bl	800e964 <tcp_next_iss>
 800f4b4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	693a      	ldr	r2, [r7, #16]
 800f4ba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	693a      	ldr	r2, [r7, #16]
 800f4c0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	693a      	ldr	r2, [r7, #16]
 800f4c6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	693a      	ldr	r2, [r7, #16]
 800f4cc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f4ce:	4b35      	ldr	r3, [pc, #212]	; (800f5a4 <tcp_listen_input+0x1e0>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	1e5a      	subs	r2, r3, #1
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	691a      	ldr	r2, [r3, #16]
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	7a5b      	ldrb	r3, [r3, #9]
 800f4ea:	f003 030c 	and.w	r3, r3, #12
 800f4ee:	b2da      	uxtb	r2, r3
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	7a1a      	ldrb	r2, [r3, #8]
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f4fc:	4b2e      	ldr	r3, [pc, #184]	; (800f5b8 <tcp_listen_input+0x1f4>)
 800f4fe:	681a      	ldr	r2, [r3, #0]
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	60da      	str	r2, [r3, #12]
 800f504:	4a2c      	ldr	r2, [pc, #176]	; (800f5b8 <tcp_listen_input+0x1f4>)
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	6013      	str	r3, [r2, #0]
 800f50a:	f003 fecb 	bl	80132a4 <tcp_timer_needed>
 800f50e:	4b2b      	ldr	r3, [pc, #172]	; (800f5bc <tcp_listen_input+0x1f8>)
 800f510:	2201      	movs	r2, #1
 800f512:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f514:	6978      	ldr	r0, [r7, #20]
 800f516:	f001 fd8f 	bl	8011038 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f51a:	4b23      	ldr	r3, [pc, #140]	; (800f5a8 <tcp_listen_input+0x1e4>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	89db      	ldrh	r3, [r3, #14]
 800f520:	b29a      	uxth	r2, r3
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	3304      	adds	r3, #4
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7fa fbad 	bl	8009c9c <ip4_route>
 800f542:	4601      	mov	r1, r0
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	3304      	adds	r3, #4
 800f548:	461a      	mov	r2, r3
 800f54a:	4620      	mov	r0, r4
 800f54c:	f7ff fa30 	bl	800e9b0 <tcp_eff_send_mss_netif>
 800f550:	4603      	mov	r3, r0
 800f552:	461a      	mov	r2, r3
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f558:	2112      	movs	r1, #18
 800f55a:	6978      	ldr	r0, [r7, #20]
 800f55c:	f002 fc9c 	bl	8011e98 <tcp_enqueue_flags>
 800f560:	4603      	mov	r3, r0
 800f562:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d004      	beq.n	800f576 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f56c:	2100      	movs	r1, #0
 800f56e:	6978      	ldr	r0, [r7, #20]
 800f570:	f7fd ff70 	bl	800d454 <tcp_abandon>
      return;
 800f574:	e006      	b.n	800f584 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f576:	6978      	ldr	r0, [r7, #20]
 800f578:	f002 fd7c 	bl	8012074 <tcp_output>
  return;
 800f57c:	e001      	b.n	800f582 <tcp_listen_input+0x1be>
    return;
 800f57e:	bf00      	nop
 800f580:	e000      	b.n	800f584 <tcp_listen_input+0x1c0>
  return;
 800f582:	bf00      	nop
}
 800f584:	371c      	adds	r7, #28
 800f586:	46bd      	mov	sp, r7
 800f588:	bd90      	pop	{r4, r7, pc}
 800f58a:	bf00      	nop
 800f58c:	24007484 	.word	0x24007484
 800f590:	08016a60 	.word	0x08016a60
 800f594:	08016c94 	.word	0x08016c94
 800f598:	08016ae8 	.word	0x08016ae8
 800f59c:	2400747c 	.word	0x2400747c
 800f5a0:	24007482 	.word	0x24007482
 800f5a4:	24007478 	.word	0x24007478
 800f5a8:	24007468 	.word	0x24007468
 800f5ac:	2400432c 	.word	0x2400432c
 800f5b0:	24004330 	.word	0x24004330
 800f5b4:	2400431c 	.word	0x2400431c
 800f5b8:	2400744c 	.word	0x2400744c
 800f5bc:	24007454 	.word	0x24007454

0800f5c0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b086      	sub	sp, #24
 800f5c4:	af04      	add	r7, sp, #16
 800f5c6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f5c8:	4b2f      	ldr	r3, [pc, #188]	; (800f688 <tcp_timewait_input+0xc8>)
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	f003 0304 	and.w	r3, r3, #4
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d153      	bne.n	800f67c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d106      	bne.n	800f5e8 <tcp_timewait_input+0x28>
 800f5da:	4b2c      	ldr	r3, [pc, #176]	; (800f68c <tcp_timewait_input+0xcc>)
 800f5dc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f5e0:	492b      	ldr	r1, [pc, #172]	; (800f690 <tcp_timewait_input+0xd0>)
 800f5e2:	482c      	ldr	r0, [pc, #176]	; (800f694 <tcp_timewait_input+0xd4>)
 800f5e4:	f004 f9f6 	bl	80139d4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f5e8:	4b27      	ldr	r3, [pc, #156]	; (800f688 <tcp_timewait_input+0xc8>)
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	f003 0302 	and.w	r3, r3, #2
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d02a      	beq.n	800f64a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f5f4:	4b28      	ldr	r3, [pc, #160]	; (800f698 <tcp_timewait_input+0xd8>)
 800f5f6:	681a      	ldr	r2, [r3, #0]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5fc:	1ad3      	subs	r3, r2, r3
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	db2d      	blt.n	800f65e <tcp_timewait_input+0x9e>
 800f602:	4b25      	ldr	r3, [pc, #148]	; (800f698 <tcp_timewait_input+0xd8>)
 800f604:	681a      	ldr	r2, [r3, #0]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f60a:	6879      	ldr	r1, [r7, #4]
 800f60c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f60e:	440b      	add	r3, r1
 800f610:	1ad3      	subs	r3, r2, r3
 800f612:	2b00      	cmp	r3, #0
 800f614:	dc23      	bgt.n	800f65e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f616:	4b21      	ldr	r3, [pc, #132]	; (800f69c <tcp_timewait_input+0xdc>)
 800f618:	6819      	ldr	r1, [r3, #0]
 800f61a:	4b21      	ldr	r3, [pc, #132]	; (800f6a0 <tcp_timewait_input+0xe0>)
 800f61c:	881b      	ldrh	r3, [r3, #0]
 800f61e:	461a      	mov	r2, r3
 800f620:	4b1d      	ldr	r3, [pc, #116]	; (800f698 <tcp_timewait_input+0xd8>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f626:	4b1f      	ldr	r3, [pc, #124]	; (800f6a4 <tcp_timewait_input+0xe4>)
 800f628:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f62a:	885b      	ldrh	r3, [r3, #2]
 800f62c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f62e:	4a1d      	ldr	r2, [pc, #116]	; (800f6a4 <tcp_timewait_input+0xe4>)
 800f630:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f632:	8812      	ldrh	r2, [r2, #0]
 800f634:	b292      	uxth	r2, r2
 800f636:	9202      	str	r2, [sp, #8]
 800f638:	9301      	str	r3, [sp, #4]
 800f63a:	4b1b      	ldr	r3, [pc, #108]	; (800f6a8 <tcp_timewait_input+0xe8>)
 800f63c:	9300      	str	r3, [sp, #0]
 800f63e:	4b1b      	ldr	r3, [pc, #108]	; (800f6ac <tcp_timewait_input+0xec>)
 800f640:	4602      	mov	r2, r0
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f003 faca 	bl	8012bdc <tcp_rst>
      return;
 800f648:	e01b      	b.n	800f682 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f64a:	4b0f      	ldr	r3, [pc, #60]	; (800f688 <tcp_timewait_input+0xc8>)
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	f003 0301 	and.w	r3, r3, #1
 800f652:	2b00      	cmp	r3, #0
 800f654:	d003      	beq.n	800f65e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f656:	4b16      	ldr	r3, [pc, #88]	; (800f6b0 <tcp_timewait_input+0xf0>)
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f65e:	4b10      	ldr	r3, [pc, #64]	; (800f6a0 <tcp_timewait_input+0xe0>)
 800f660:	881b      	ldrh	r3, [r3, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d00c      	beq.n	800f680 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	8b5b      	ldrh	r3, [r3, #26]
 800f66a:	f043 0302 	orr.w	r3, r3, #2
 800f66e:	b29a      	uxth	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f002 fcfd 	bl	8012074 <tcp_output>
  }
  return;
 800f67a:	e001      	b.n	800f680 <tcp_timewait_input+0xc0>
    return;
 800f67c:	bf00      	nop
 800f67e:	e000      	b.n	800f682 <tcp_timewait_input+0xc2>
  return;
 800f680:	bf00      	nop
}
 800f682:	3708      	adds	r7, #8
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}
 800f688:	24007484 	.word	0x24007484
 800f68c:	08016a60 	.word	0x08016a60
 800f690:	08016cb4 	.word	0x08016cb4
 800f694:	08016ae8 	.word	0x08016ae8
 800f698:	24007478 	.word	0x24007478
 800f69c:	2400747c 	.word	0x2400747c
 800f6a0:	24007482 	.word	0x24007482
 800f6a4:	24007468 	.word	0x24007468
 800f6a8:	2400432c 	.word	0x2400432c
 800f6ac:	24004330 	.word	0x24004330
 800f6b0:	24007440 	.word	0x24007440

0800f6b4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f6b4:	b590      	push	{r4, r7, lr}
 800f6b6:	b08d      	sub	sp, #52	; 0x34
 800f6b8:	af04      	add	r7, sp, #16
 800f6ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d106      	bne.n	800f6d8 <tcp_process+0x24>
 800f6ca:	4b9d      	ldr	r3, [pc, #628]	; (800f940 <tcp_process+0x28c>)
 800f6cc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f6d0:	499c      	ldr	r1, [pc, #624]	; (800f944 <tcp_process+0x290>)
 800f6d2:	489d      	ldr	r0, [pc, #628]	; (800f948 <tcp_process+0x294>)
 800f6d4:	f004 f97e 	bl	80139d4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f6d8:	4b9c      	ldr	r3, [pc, #624]	; (800f94c <tcp_process+0x298>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	f003 0304 	and.w	r3, r3, #4
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d04e      	beq.n	800f782 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	7d1b      	ldrb	r3, [r3, #20]
 800f6e8:	2b02      	cmp	r3, #2
 800f6ea:	d108      	bne.n	800f6fe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f6f0:	4b97      	ldr	r3, [pc, #604]	; (800f950 <tcp_process+0x29c>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d123      	bne.n	800f740 <tcp_process+0x8c>
        acceptable = 1;
 800f6f8:	2301      	movs	r3, #1
 800f6fa:	76fb      	strb	r3, [r7, #27]
 800f6fc:	e020      	b.n	800f740 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f702:	4b94      	ldr	r3, [pc, #592]	; (800f954 <tcp_process+0x2a0>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	429a      	cmp	r2, r3
 800f708:	d102      	bne.n	800f710 <tcp_process+0x5c>
        acceptable = 1;
 800f70a:	2301      	movs	r3, #1
 800f70c:	76fb      	strb	r3, [r7, #27]
 800f70e:	e017      	b.n	800f740 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f710:	4b90      	ldr	r3, [pc, #576]	; (800f954 <tcp_process+0x2a0>)
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f718:	1ad3      	subs	r3, r2, r3
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	db10      	blt.n	800f740 <tcp_process+0x8c>
 800f71e:	4b8d      	ldr	r3, [pc, #564]	; (800f954 <tcp_process+0x2a0>)
 800f720:	681a      	ldr	r2, [r3, #0]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f726:	6879      	ldr	r1, [r7, #4]
 800f728:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f72a:	440b      	add	r3, r1
 800f72c:	1ad3      	subs	r3, r2, r3
 800f72e:	2b00      	cmp	r3, #0
 800f730:	dc06      	bgt.n	800f740 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	8b5b      	ldrh	r3, [r3, #26]
 800f736:	f043 0302 	orr.w	r3, r3, #2
 800f73a:	b29a      	uxth	r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f740:	7efb      	ldrb	r3, [r7, #27]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d01b      	beq.n	800f77e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	7d1b      	ldrb	r3, [r3, #20]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d106      	bne.n	800f75c <tcp_process+0xa8>
 800f74e:	4b7c      	ldr	r3, [pc, #496]	; (800f940 <tcp_process+0x28c>)
 800f750:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f754:	4980      	ldr	r1, [pc, #512]	; (800f958 <tcp_process+0x2a4>)
 800f756:	487c      	ldr	r0, [pc, #496]	; (800f948 <tcp_process+0x294>)
 800f758:	f004 f93c 	bl	80139d4 <iprintf>
      recv_flags |= TF_RESET;
 800f75c:	4b7f      	ldr	r3, [pc, #508]	; (800f95c <tcp_process+0x2a8>)
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	f043 0308 	orr.w	r3, r3, #8
 800f764:	b2da      	uxtb	r2, r3
 800f766:	4b7d      	ldr	r3, [pc, #500]	; (800f95c <tcp_process+0x2a8>)
 800f768:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	8b5b      	ldrh	r3, [r3, #26]
 800f76e:	f023 0301 	bic.w	r3, r3, #1
 800f772:	b29a      	uxth	r2, r3
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f778:	f06f 030d 	mvn.w	r3, #13
 800f77c:	e37a      	b.n	800fe74 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f77e:	2300      	movs	r3, #0
 800f780:	e378      	b.n	800fe74 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f782:	4b72      	ldr	r3, [pc, #456]	; (800f94c <tcp_process+0x298>)
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	f003 0302 	and.w	r3, r3, #2
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d010      	beq.n	800f7b0 <tcp_process+0xfc>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	7d1b      	ldrb	r3, [r3, #20]
 800f792:	2b02      	cmp	r3, #2
 800f794:	d00c      	beq.n	800f7b0 <tcp_process+0xfc>
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	7d1b      	ldrb	r3, [r3, #20]
 800f79a:	2b03      	cmp	r3, #3
 800f79c:	d008      	beq.n	800f7b0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	8b5b      	ldrh	r3, [r3, #26]
 800f7a2:	f043 0302 	orr.w	r3, r3, #2
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	e361      	b.n	800fe74 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	8b5b      	ldrh	r3, [r3, #26]
 800f7b4:	f003 0310 	and.w	r3, r3, #16
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d103      	bne.n	800f7c4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f7bc:	4b68      	ldr	r3, [pc, #416]	; (800f960 <tcp_process+0x2ac>)
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f001 fc2f 	bl	8011038 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	7d1b      	ldrb	r3, [r3, #20]
 800f7de:	3b02      	subs	r3, #2
 800f7e0:	2b07      	cmp	r3, #7
 800f7e2:	f200 8337 	bhi.w	800fe54 <tcp_process+0x7a0>
 800f7e6:	a201      	add	r2, pc, #4	; (adr r2, 800f7ec <tcp_process+0x138>)
 800f7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7ec:	0800f80d 	.word	0x0800f80d
 800f7f0:	0800fa3d 	.word	0x0800fa3d
 800f7f4:	0800fbb5 	.word	0x0800fbb5
 800f7f8:	0800fbdf 	.word	0x0800fbdf
 800f7fc:	0800fd03 	.word	0x0800fd03
 800f800:	0800fbb5 	.word	0x0800fbb5
 800f804:	0800fd8f 	.word	0x0800fd8f
 800f808:	0800fe1f 	.word	0x0800fe1f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f80c:	4b4f      	ldr	r3, [pc, #316]	; (800f94c <tcp_process+0x298>)
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	f003 0310 	and.w	r3, r3, #16
 800f814:	2b00      	cmp	r3, #0
 800f816:	f000 80e4 	beq.w	800f9e2 <tcp_process+0x32e>
 800f81a:	4b4c      	ldr	r3, [pc, #304]	; (800f94c <tcp_process+0x298>)
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	f003 0302 	and.w	r3, r3, #2
 800f822:	2b00      	cmp	r3, #0
 800f824:	f000 80dd 	beq.w	800f9e2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f82c:	1c5a      	adds	r2, r3, #1
 800f82e:	4b48      	ldr	r3, [pc, #288]	; (800f950 <tcp_process+0x29c>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	429a      	cmp	r2, r3
 800f834:	f040 80d5 	bne.w	800f9e2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f838:	4b46      	ldr	r3, [pc, #280]	; (800f954 <tcp_process+0x2a0>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	1c5a      	adds	r2, r3, #1
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f84a:	4b41      	ldr	r3, [pc, #260]	; (800f950 <tcp_process+0x29c>)
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f852:	4b44      	ldr	r3, [pc, #272]	; (800f964 <tcp_process+0x2b0>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	89db      	ldrh	r3, [r3, #14]
 800f858:	b29a      	uxth	r2, r3
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f86c:	4b39      	ldr	r3, [pc, #228]	; (800f954 <tcp_process+0x2a0>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	1e5a      	subs	r2, r3, #1
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2204      	movs	r2, #4
 800f87a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	3304      	adds	r3, #4
 800f884:	4618      	mov	r0, r3
 800f886:	f7fa fa09 	bl	8009c9c <ip4_route>
 800f88a:	4601      	mov	r1, r0
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	3304      	adds	r3, #4
 800f890:	461a      	mov	r2, r3
 800f892:	4620      	mov	r0, r4
 800f894:	f7ff f88c 	bl	800e9b0 <tcp_eff_send_mss_netif>
 800f898:	4603      	mov	r3, r0
 800f89a:	461a      	mov	r2, r3
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8a4:	009a      	lsls	r2, r3, #2
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8aa:	005b      	lsls	r3, r3, #1
 800f8ac:	f241 111c 	movw	r1, #4380	; 0x111c
 800f8b0:	428b      	cmp	r3, r1
 800f8b2:	bf38      	it	cc
 800f8b4:	460b      	movcc	r3, r1
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d204      	bcs.n	800f8c4 <tcp_process+0x210>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	e00d      	b.n	800f8e0 <tcp_process+0x22c>
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8c8:	005b      	lsls	r3, r3, #1
 800f8ca:	f241 121c 	movw	r2, #4380	; 0x111c
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d904      	bls.n	800f8dc <tcp_process+0x228>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8d6:	005b      	lsls	r3, r3, #1
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	e001      	b.n	800f8e0 <tcp_process+0x22c>
 800f8dc:	f241 131c 	movw	r3, #4380	; 0x111c
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d106      	bne.n	800f8fe <tcp_process+0x24a>
 800f8f0:	4b13      	ldr	r3, [pc, #76]	; (800f940 <tcp_process+0x28c>)
 800f8f2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f8f6:	491c      	ldr	r1, [pc, #112]	; (800f968 <tcp_process+0x2b4>)
 800f8f8:	4813      	ldr	r0, [pc, #76]	; (800f948 <tcp_process+0x294>)
 800f8fa:	f004 f86b 	bl	80139d4 <iprintf>
        --pcb->snd_queuelen;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f904:	3b01      	subs	r3, #1
 800f906:	b29a      	uxth	r2, r3
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f912:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f914:	69fb      	ldr	r3, [r7, #28]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d12a      	bne.n	800f970 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f91e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f920:	69fb      	ldr	r3, [r7, #28]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d106      	bne.n	800f934 <tcp_process+0x280>
 800f926:	4b06      	ldr	r3, [pc, #24]	; (800f940 <tcp_process+0x28c>)
 800f928:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f92c:	490f      	ldr	r1, [pc, #60]	; (800f96c <tcp_process+0x2b8>)
 800f92e:	4806      	ldr	r0, [pc, #24]	; (800f948 <tcp_process+0x294>)
 800f930:	f004 f850 	bl	80139d4 <iprintf>
          pcb->unsent = rseg->next;
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	681a      	ldr	r2, [r3, #0]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	66da      	str	r2, [r3, #108]	; 0x6c
 800f93c:	e01c      	b.n	800f978 <tcp_process+0x2c4>
 800f93e:	bf00      	nop
 800f940:	08016a60 	.word	0x08016a60
 800f944:	08016cd4 	.word	0x08016cd4
 800f948:	08016ae8 	.word	0x08016ae8
 800f94c:	24007484 	.word	0x24007484
 800f950:	2400747c 	.word	0x2400747c
 800f954:	24007478 	.word	0x24007478
 800f958:	08016cf0 	.word	0x08016cf0
 800f95c:	24007485 	.word	0x24007485
 800f960:	24007440 	.word	0x24007440
 800f964:	24007468 	.word	0x24007468
 800f968:	08016d10 	.word	0x08016d10
 800f96c:	08016d28 	.word	0x08016d28
        } else {
          pcb->unacked = rseg->next;
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	681a      	ldr	r2, [r3, #0]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f978:	69f8      	ldr	r0, [r7, #28]
 800f97a:	f7fe fc72 	bl	800e262 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f982:	2b00      	cmp	r3, #0
 800f984:	d104      	bne.n	800f990 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f98c:	861a      	strh	r2, [r3, #48]	; 0x30
 800f98e:	e006      	b.n	800f99e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2200      	movs	r2, #0
 800f994:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2200      	movs	r2, #0
 800f99a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d00a      	beq.n	800f9be <tcp_process+0x30a>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	6910      	ldr	r0, [r2, #16]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	6879      	ldr	r1, [r7, #4]
 800f9b6:	4798      	blx	r3
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	76bb      	strb	r3, [r7, #26]
 800f9bc:	e001      	b.n	800f9c2 <tcp_process+0x30e>
 800f9be:	2300      	movs	r3, #0
 800f9c0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f9c2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f9c6:	f113 0f0d 	cmn.w	r3, #13
 800f9ca:	d102      	bne.n	800f9d2 <tcp_process+0x31e>
          return ERR_ABRT;
 800f9cc:	f06f 030c 	mvn.w	r3, #12
 800f9d0:	e250      	b.n	800fe74 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	8b5b      	ldrh	r3, [r3, #26]
 800f9d6:	f043 0302 	orr.w	r3, r3, #2
 800f9da:	b29a      	uxth	r2, r3
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f9e0:	e23a      	b.n	800fe58 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f9e2:	4b98      	ldr	r3, [pc, #608]	; (800fc44 <tcp_process+0x590>)
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	f003 0310 	and.w	r3, r3, #16
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	f000 8234 	beq.w	800fe58 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9f0:	4b95      	ldr	r3, [pc, #596]	; (800fc48 <tcp_process+0x594>)
 800f9f2:	6819      	ldr	r1, [r3, #0]
 800f9f4:	4b95      	ldr	r3, [pc, #596]	; (800fc4c <tcp_process+0x598>)
 800f9f6:	881b      	ldrh	r3, [r3, #0]
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	4b95      	ldr	r3, [pc, #596]	; (800fc50 <tcp_process+0x59c>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa00:	4b94      	ldr	r3, [pc, #592]	; (800fc54 <tcp_process+0x5a0>)
 800fa02:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa04:	885b      	ldrh	r3, [r3, #2]
 800fa06:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa08:	4a92      	ldr	r2, [pc, #584]	; (800fc54 <tcp_process+0x5a0>)
 800fa0a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa0c:	8812      	ldrh	r2, [r2, #0]
 800fa0e:	b292      	uxth	r2, r2
 800fa10:	9202      	str	r2, [sp, #8]
 800fa12:	9301      	str	r3, [sp, #4]
 800fa14:	4b90      	ldr	r3, [pc, #576]	; (800fc58 <tcp_process+0x5a4>)
 800fa16:	9300      	str	r3, [sp, #0]
 800fa18:	4b90      	ldr	r3, [pc, #576]	; (800fc5c <tcp_process+0x5a8>)
 800fa1a:	4602      	mov	r2, r0
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f003 f8dd 	bl	8012bdc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa28:	2b05      	cmp	r3, #5
 800fa2a:	f200 8215 	bhi.w	800fe58 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2200      	movs	r2, #0
 800fa32:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f002 fea7 	bl	8012788 <tcp_rexmit_rto>
      break;
 800fa3a:	e20d      	b.n	800fe58 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fa3c:	4b81      	ldr	r3, [pc, #516]	; (800fc44 <tcp_process+0x590>)
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	f003 0310 	and.w	r3, r3, #16
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f000 80a1 	beq.w	800fb8c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa4a:	4b7f      	ldr	r3, [pc, #508]	; (800fc48 <tcp_process+0x594>)
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa52:	1ad3      	subs	r3, r2, r3
 800fa54:	3b01      	subs	r3, #1
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	db7e      	blt.n	800fb58 <tcp_process+0x4a4>
 800fa5a:	4b7b      	ldr	r3, [pc, #492]	; (800fc48 <tcp_process+0x594>)
 800fa5c:	681a      	ldr	r2, [r3, #0]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa62:	1ad3      	subs	r3, r2, r3
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	dc77      	bgt.n	800fb58 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2204      	movs	r2, #4
 800fa6c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d102      	bne.n	800fa7c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fa76:	23fa      	movs	r3, #250	; 0xfa
 800fa78:	76bb      	strb	r3, [r7, #26]
 800fa7a:	e01d      	b.n	800fab8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa80:	699b      	ldr	r3, [r3, #24]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d106      	bne.n	800fa94 <tcp_process+0x3e0>
 800fa86:	4b76      	ldr	r3, [pc, #472]	; (800fc60 <tcp_process+0x5ac>)
 800fa88:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fa8c:	4975      	ldr	r1, [pc, #468]	; (800fc64 <tcp_process+0x5b0>)
 800fa8e:	4876      	ldr	r0, [pc, #472]	; (800fc68 <tcp_process+0x5b4>)
 800fa90:	f003 ffa0 	bl	80139d4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa98:	699b      	ldr	r3, [r3, #24]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d00a      	beq.n	800fab4 <tcp_process+0x400>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faa2:	699b      	ldr	r3, [r3, #24]
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	6910      	ldr	r0, [r2, #16]
 800faa8:	2200      	movs	r2, #0
 800faaa:	6879      	ldr	r1, [r7, #4]
 800faac:	4798      	blx	r3
 800faae:	4603      	mov	r3, r0
 800fab0:	76bb      	strb	r3, [r7, #26]
 800fab2:	e001      	b.n	800fab8 <tcp_process+0x404>
 800fab4:	23f0      	movs	r3, #240	; 0xf0
 800fab6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fab8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d00a      	beq.n	800fad6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fac0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fac4:	f113 0f0d 	cmn.w	r3, #13
 800fac8:	d002      	beq.n	800fad0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f7fd fd80 	bl	800d5d0 <tcp_abort>
            }
            return ERR_ABRT;
 800fad0:	f06f 030c 	mvn.w	r3, #12
 800fad4:	e1ce      	b.n	800fe74 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 fae0 	bl	801009c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fadc:	4b63      	ldr	r3, [pc, #396]	; (800fc6c <tcp_process+0x5b8>)
 800fade:	881b      	ldrh	r3, [r3, #0]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d005      	beq.n	800faf0 <tcp_process+0x43c>
            recv_acked--;
 800fae4:	4b61      	ldr	r3, [pc, #388]	; (800fc6c <tcp_process+0x5b8>)
 800fae6:	881b      	ldrh	r3, [r3, #0]
 800fae8:	3b01      	subs	r3, #1
 800faea:	b29a      	uxth	r2, r3
 800faec:	4b5f      	ldr	r3, [pc, #380]	; (800fc6c <tcp_process+0x5b8>)
 800faee:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800faf4:	009a      	lsls	r2, r3, #2
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fafa:	005b      	lsls	r3, r3, #1
 800fafc:	f241 111c 	movw	r1, #4380	; 0x111c
 800fb00:	428b      	cmp	r3, r1
 800fb02:	bf38      	it	cc
 800fb04:	460b      	movcc	r3, r1
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d204      	bcs.n	800fb14 <tcp_process+0x460>
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	e00d      	b.n	800fb30 <tcp_process+0x47c>
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb18:	005b      	lsls	r3, r3, #1
 800fb1a:	f241 121c 	movw	r2, #4380	; 0x111c
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d904      	bls.n	800fb2c <tcp_process+0x478>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb26:	005b      	lsls	r3, r3, #1
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	e001      	b.n	800fb30 <tcp_process+0x47c>
 800fb2c:	f241 131c 	movw	r3, #4380	; 0x111c
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fb36:	4b4e      	ldr	r3, [pc, #312]	; (800fc70 <tcp_process+0x5bc>)
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	f003 0320 	and.w	r3, r3, #32
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d037      	beq.n	800fbb2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	8b5b      	ldrh	r3, [r3, #26]
 800fb46:	f043 0302 	orr.w	r3, r3, #2
 800fb4a:	b29a      	uxth	r2, r3
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2207      	movs	r2, #7
 800fb54:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fb56:	e02c      	b.n	800fbb2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb58:	4b3b      	ldr	r3, [pc, #236]	; (800fc48 <tcp_process+0x594>)
 800fb5a:	6819      	ldr	r1, [r3, #0]
 800fb5c:	4b3b      	ldr	r3, [pc, #236]	; (800fc4c <tcp_process+0x598>)
 800fb5e:	881b      	ldrh	r3, [r3, #0]
 800fb60:	461a      	mov	r2, r3
 800fb62:	4b3b      	ldr	r3, [pc, #236]	; (800fc50 <tcp_process+0x59c>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb68:	4b3a      	ldr	r3, [pc, #232]	; (800fc54 <tcp_process+0x5a0>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb6c:	885b      	ldrh	r3, [r3, #2]
 800fb6e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb70:	4a38      	ldr	r2, [pc, #224]	; (800fc54 <tcp_process+0x5a0>)
 800fb72:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb74:	8812      	ldrh	r2, [r2, #0]
 800fb76:	b292      	uxth	r2, r2
 800fb78:	9202      	str	r2, [sp, #8]
 800fb7a:	9301      	str	r3, [sp, #4]
 800fb7c:	4b36      	ldr	r3, [pc, #216]	; (800fc58 <tcp_process+0x5a4>)
 800fb7e:	9300      	str	r3, [sp, #0]
 800fb80:	4b36      	ldr	r3, [pc, #216]	; (800fc5c <tcp_process+0x5a8>)
 800fb82:	4602      	mov	r2, r0
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f003 f829 	bl	8012bdc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fb8a:	e167      	b.n	800fe5c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fb8c:	4b2d      	ldr	r3, [pc, #180]	; (800fc44 <tcp_process+0x590>)
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	f003 0302 	and.w	r3, r3, #2
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	f000 8161 	beq.w	800fe5c <tcp_process+0x7a8>
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb9e:	1e5a      	subs	r2, r3, #1
 800fba0:	4b2b      	ldr	r3, [pc, #172]	; (800fc50 <tcp_process+0x59c>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	429a      	cmp	r2, r3
 800fba6:	f040 8159 	bne.w	800fe5c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f002 fe0e 	bl	80127cc <tcp_rexmit>
      break;
 800fbb0:	e154      	b.n	800fe5c <tcp_process+0x7a8>
 800fbb2:	e153      	b.n	800fe5c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f000 fa71 	bl	801009c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fbba:	4b2d      	ldr	r3, [pc, #180]	; (800fc70 <tcp_process+0x5bc>)
 800fbbc:	781b      	ldrb	r3, [r3, #0]
 800fbbe:	f003 0320 	and.w	r3, r3, #32
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	f000 814c 	beq.w	800fe60 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	8b5b      	ldrh	r3, [r3, #26]
 800fbcc:	f043 0302 	orr.w	r3, r3, #2
 800fbd0:	b29a      	uxth	r2, r3
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2207      	movs	r2, #7
 800fbda:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fbdc:	e140      	b.n	800fe60 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f000 fa5c 	bl	801009c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fbe4:	4b22      	ldr	r3, [pc, #136]	; (800fc70 <tcp_process+0x5bc>)
 800fbe6:	781b      	ldrb	r3, [r3, #0]
 800fbe8:	f003 0320 	and.w	r3, r3, #32
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d071      	beq.n	800fcd4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fbf0:	4b14      	ldr	r3, [pc, #80]	; (800fc44 <tcp_process+0x590>)
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	f003 0310 	and.w	r3, r3, #16
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d060      	beq.n	800fcbe <tcp_process+0x60a>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fc00:	4b11      	ldr	r3, [pc, #68]	; (800fc48 <tcp_process+0x594>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d15a      	bne.n	800fcbe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d156      	bne.n	800fcbe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	8b5b      	ldrh	r3, [r3, #26]
 800fc14:	f043 0302 	orr.w	r3, r3, #2
 800fc18:	b29a      	uxth	r2, r3
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f7fe fdbc 	bl	800e79c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fc24:	4b13      	ldr	r3, [pc, #76]	; (800fc74 <tcp_process+0x5c0>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	687a      	ldr	r2, [r7, #4]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d105      	bne.n	800fc3a <tcp_process+0x586>
 800fc2e:	4b11      	ldr	r3, [pc, #68]	; (800fc74 <tcp_process+0x5c0>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	68db      	ldr	r3, [r3, #12]
 800fc34:	4a0f      	ldr	r2, [pc, #60]	; (800fc74 <tcp_process+0x5c0>)
 800fc36:	6013      	str	r3, [r2, #0]
 800fc38:	e02e      	b.n	800fc98 <tcp_process+0x5e4>
 800fc3a:	4b0e      	ldr	r3, [pc, #56]	; (800fc74 <tcp_process+0x5c0>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	617b      	str	r3, [r7, #20]
 800fc40:	e027      	b.n	800fc92 <tcp_process+0x5de>
 800fc42:	bf00      	nop
 800fc44:	24007484 	.word	0x24007484
 800fc48:	2400747c 	.word	0x2400747c
 800fc4c:	24007482 	.word	0x24007482
 800fc50:	24007478 	.word	0x24007478
 800fc54:	24007468 	.word	0x24007468
 800fc58:	2400432c 	.word	0x2400432c
 800fc5c:	24004330 	.word	0x24004330
 800fc60:	08016a60 	.word	0x08016a60
 800fc64:	08016d3c 	.word	0x08016d3c
 800fc68:	08016ae8 	.word	0x08016ae8
 800fc6c:	24007480 	.word	0x24007480
 800fc70:	24007485 	.word	0x24007485
 800fc74:	2400744c 	.word	0x2400744c
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	68db      	ldr	r3, [r3, #12]
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d104      	bne.n	800fc8c <tcp_process+0x5d8>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	68da      	ldr	r2, [r3, #12]
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	60da      	str	r2, [r3, #12]
 800fc8a:	e005      	b.n	800fc98 <tcp_process+0x5e4>
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	68db      	ldr	r3, [r3, #12]
 800fc90:	617b      	str	r3, [r7, #20]
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d1ef      	bne.n	800fc78 <tcp_process+0x5c4>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	60da      	str	r2, [r3, #12]
 800fc9e:	4b77      	ldr	r3, [pc, #476]	; (800fe7c <tcp_process+0x7c8>)
 800fca0:	2201      	movs	r2, #1
 800fca2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	220a      	movs	r2, #10
 800fca8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fcaa:	4b75      	ldr	r3, [pc, #468]	; (800fe80 <tcp_process+0x7cc>)
 800fcac:	681a      	ldr	r2, [r3, #0]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	60da      	str	r2, [r3, #12]
 800fcb2:	4a73      	ldr	r2, [pc, #460]	; (800fe80 <tcp_process+0x7cc>)
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6013      	str	r3, [r2, #0]
 800fcb8:	f003 faf4 	bl	80132a4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fcbc:	e0d2      	b.n	800fe64 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	8b5b      	ldrh	r3, [r3, #26]
 800fcc2:	f043 0302 	orr.w	r3, r3, #2
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2208      	movs	r2, #8
 800fcd0:	751a      	strb	r2, [r3, #20]
      break;
 800fcd2:	e0c7      	b.n	800fe64 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fcd4:	4b6b      	ldr	r3, [pc, #428]	; (800fe84 <tcp_process+0x7d0>)
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	f003 0310 	and.w	r3, r3, #16
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	f000 80c1 	beq.w	800fe64 <tcp_process+0x7b0>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fce6:	4b68      	ldr	r3, [pc, #416]	; (800fe88 <tcp_process+0x7d4>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	429a      	cmp	r2, r3
 800fcec:	f040 80ba 	bne.w	800fe64 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	f040 80b5 	bne.w	800fe64 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2206      	movs	r2, #6
 800fcfe:	751a      	strb	r2, [r3, #20]
      break;
 800fd00:	e0b0      	b.n	800fe64 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f000 f9ca 	bl	801009c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fd08:	4b60      	ldr	r3, [pc, #384]	; (800fe8c <tcp_process+0x7d8>)
 800fd0a:	781b      	ldrb	r3, [r3, #0]
 800fd0c:	f003 0320 	and.w	r3, r3, #32
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f000 80a9 	beq.w	800fe68 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	8b5b      	ldrh	r3, [r3, #26]
 800fd1a:	f043 0302 	orr.w	r3, r3, #2
 800fd1e:	b29a      	uxth	r2, r3
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f7fe fd39 	bl	800e79c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fd2a:	4b59      	ldr	r3, [pc, #356]	; (800fe90 <tcp_process+0x7dc>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	687a      	ldr	r2, [r7, #4]
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d105      	bne.n	800fd40 <tcp_process+0x68c>
 800fd34:	4b56      	ldr	r3, [pc, #344]	; (800fe90 <tcp_process+0x7dc>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	68db      	ldr	r3, [r3, #12]
 800fd3a:	4a55      	ldr	r2, [pc, #340]	; (800fe90 <tcp_process+0x7dc>)
 800fd3c:	6013      	str	r3, [r2, #0]
 800fd3e:	e013      	b.n	800fd68 <tcp_process+0x6b4>
 800fd40:	4b53      	ldr	r3, [pc, #332]	; (800fe90 <tcp_process+0x7dc>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	613b      	str	r3, [r7, #16]
 800fd46:	e00c      	b.n	800fd62 <tcp_process+0x6ae>
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	68db      	ldr	r3, [r3, #12]
 800fd4c:	687a      	ldr	r2, [r7, #4]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d104      	bne.n	800fd5c <tcp_process+0x6a8>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	68da      	ldr	r2, [r3, #12]
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	60da      	str	r2, [r3, #12]
 800fd5a:	e005      	b.n	800fd68 <tcp_process+0x6b4>
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	68db      	ldr	r3, [r3, #12]
 800fd60:	613b      	str	r3, [r7, #16]
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d1ef      	bne.n	800fd48 <tcp_process+0x694>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	60da      	str	r2, [r3, #12]
 800fd6e:	4b43      	ldr	r3, [pc, #268]	; (800fe7c <tcp_process+0x7c8>)
 800fd70:	2201      	movs	r2, #1
 800fd72:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	220a      	movs	r2, #10
 800fd78:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fd7a:	4b41      	ldr	r3, [pc, #260]	; (800fe80 <tcp_process+0x7cc>)
 800fd7c:	681a      	ldr	r2, [r3, #0]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	60da      	str	r2, [r3, #12]
 800fd82:	4a3f      	ldr	r2, [pc, #252]	; (800fe80 <tcp_process+0x7cc>)
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6013      	str	r3, [r2, #0]
 800fd88:	f003 fa8c 	bl	80132a4 <tcp_timer_needed>
      }
      break;
 800fd8c:	e06c      	b.n	800fe68 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f000 f984 	bl	801009c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fd94:	4b3b      	ldr	r3, [pc, #236]	; (800fe84 <tcp_process+0x7d0>)
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	f003 0310 	and.w	r3, r3, #16
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d065      	beq.n	800fe6c <tcp_process+0x7b8>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fda4:	4b38      	ldr	r3, [pc, #224]	; (800fe88 <tcp_process+0x7d4>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d15f      	bne.n	800fe6c <tcp_process+0x7b8>
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d15b      	bne.n	800fe6c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f7fe fcf1 	bl	800e79c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fdba:	4b35      	ldr	r3, [pc, #212]	; (800fe90 <tcp_process+0x7dc>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d105      	bne.n	800fdd0 <tcp_process+0x71c>
 800fdc4:	4b32      	ldr	r3, [pc, #200]	; (800fe90 <tcp_process+0x7dc>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	68db      	ldr	r3, [r3, #12]
 800fdca:	4a31      	ldr	r2, [pc, #196]	; (800fe90 <tcp_process+0x7dc>)
 800fdcc:	6013      	str	r3, [r2, #0]
 800fdce:	e013      	b.n	800fdf8 <tcp_process+0x744>
 800fdd0:	4b2f      	ldr	r3, [pc, #188]	; (800fe90 <tcp_process+0x7dc>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	60fb      	str	r3, [r7, #12]
 800fdd6:	e00c      	b.n	800fdf2 <tcp_process+0x73e>
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	68db      	ldr	r3, [r3, #12]
 800fddc:	687a      	ldr	r2, [r7, #4]
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d104      	bne.n	800fdec <tcp_process+0x738>
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	68da      	ldr	r2, [r3, #12]
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	60da      	str	r2, [r3, #12]
 800fdea:	e005      	b.n	800fdf8 <tcp_process+0x744>
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	68db      	ldr	r3, [r3, #12]
 800fdf0:	60fb      	str	r3, [r7, #12]
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d1ef      	bne.n	800fdd8 <tcp_process+0x724>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	60da      	str	r2, [r3, #12]
 800fdfe:	4b1f      	ldr	r3, [pc, #124]	; (800fe7c <tcp_process+0x7c8>)
 800fe00:	2201      	movs	r2, #1
 800fe02:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	220a      	movs	r2, #10
 800fe08:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fe0a:	4b1d      	ldr	r3, [pc, #116]	; (800fe80 <tcp_process+0x7cc>)
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	60da      	str	r2, [r3, #12]
 800fe12:	4a1b      	ldr	r2, [pc, #108]	; (800fe80 <tcp_process+0x7cc>)
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6013      	str	r3, [r2, #0]
 800fe18:	f003 fa44 	bl	80132a4 <tcp_timer_needed>
      }
      break;
 800fe1c:	e026      	b.n	800fe6c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f000 f93c 	bl	801009c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fe24:	4b17      	ldr	r3, [pc, #92]	; (800fe84 <tcp_process+0x7d0>)
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	f003 0310 	and.w	r3, r3, #16
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d01f      	beq.n	800fe70 <tcp_process+0x7bc>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe34:	4b14      	ldr	r3, [pc, #80]	; (800fe88 <tcp_process+0x7d4>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d119      	bne.n	800fe70 <tcp_process+0x7bc>
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d115      	bne.n	800fe70 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fe44:	4b11      	ldr	r3, [pc, #68]	; (800fe8c <tcp_process+0x7d8>)
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	f043 0310 	orr.w	r3, r3, #16
 800fe4c:	b2da      	uxtb	r2, r3
 800fe4e:	4b0f      	ldr	r3, [pc, #60]	; (800fe8c <tcp_process+0x7d8>)
 800fe50:	701a      	strb	r2, [r3, #0]
      }
      break;
 800fe52:	e00d      	b.n	800fe70 <tcp_process+0x7bc>
    default:
      break;
 800fe54:	bf00      	nop
 800fe56:	e00c      	b.n	800fe72 <tcp_process+0x7be>
      break;
 800fe58:	bf00      	nop
 800fe5a:	e00a      	b.n	800fe72 <tcp_process+0x7be>
      break;
 800fe5c:	bf00      	nop
 800fe5e:	e008      	b.n	800fe72 <tcp_process+0x7be>
      break;
 800fe60:	bf00      	nop
 800fe62:	e006      	b.n	800fe72 <tcp_process+0x7be>
      break;
 800fe64:	bf00      	nop
 800fe66:	e004      	b.n	800fe72 <tcp_process+0x7be>
      break;
 800fe68:	bf00      	nop
 800fe6a:	e002      	b.n	800fe72 <tcp_process+0x7be>
      break;
 800fe6c:	bf00      	nop
 800fe6e:	e000      	b.n	800fe72 <tcp_process+0x7be>
      break;
 800fe70:	bf00      	nop
  }
  return ERR_OK;
 800fe72:	2300      	movs	r3, #0
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3724      	adds	r7, #36	; 0x24
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd90      	pop	{r4, r7, pc}
 800fe7c:	24007454 	.word	0x24007454
 800fe80:	24007450 	.word	0x24007450
 800fe84:	24007484 	.word	0x24007484
 800fe88:	2400747c 	.word	0x2400747c
 800fe8c:	24007485 	.word	0x24007485
 800fe90:	2400744c 	.word	0x2400744c

0800fe94 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fe94:	b590      	push	{r4, r7, lr}
 800fe96:	b085      	sub	sp, #20
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d106      	bne.n	800feb2 <tcp_oos_insert_segment+0x1e>
 800fea4:	4b3b      	ldr	r3, [pc, #236]	; (800ff94 <tcp_oos_insert_segment+0x100>)
 800fea6:	f240 421f 	movw	r2, #1055	; 0x41f
 800feaa:	493b      	ldr	r1, [pc, #236]	; (800ff98 <tcp_oos_insert_segment+0x104>)
 800feac:	483b      	ldr	r0, [pc, #236]	; (800ff9c <tcp_oos_insert_segment+0x108>)
 800feae:	f003 fd91 	bl	80139d4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	68db      	ldr	r3, [r3, #12]
 800feb6:	899b      	ldrh	r3, [r3, #12]
 800feb8:	b29b      	uxth	r3, r3
 800feba:	4618      	mov	r0, r3
 800febc:	f7f8 fc16 	bl	80086ec <lwip_htons>
 800fec0:	4603      	mov	r3, r0
 800fec2:	b2db      	uxtb	r3, r3
 800fec4:	f003 0301 	and.w	r3, r3, #1
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d028      	beq.n	800ff1e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800fecc:	6838      	ldr	r0, [r7, #0]
 800fece:	f7fe f9b3 	bl	800e238 <tcp_segs_free>
    next = NULL;
 800fed2:	2300      	movs	r3, #0
 800fed4:	603b      	str	r3, [r7, #0]
 800fed6:	e056      	b.n	800ff86 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	68db      	ldr	r3, [r3, #12]
 800fedc:	899b      	ldrh	r3, [r3, #12]
 800fede:	b29b      	uxth	r3, r3
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7f8 fc03 	bl	80086ec <lwip_htons>
 800fee6:	4603      	mov	r3, r0
 800fee8:	b2db      	uxtb	r3, r3
 800feea:	f003 0301 	and.w	r3, r3, #1
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d00d      	beq.n	800ff0e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	68db      	ldr	r3, [r3, #12]
 800fef6:	899b      	ldrh	r3, [r3, #12]
 800fef8:	b29c      	uxth	r4, r3
 800fefa:	2001      	movs	r0, #1
 800fefc:	f7f8 fbf6 	bl	80086ec <lwip_htons>
 800ff00:	4603      	mov	r3, r0
 800ff02:	461a      	mov	r2, r3
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	68db      	ldr	r3, [r3, #12]
 800ff08:	4322      	orrs	r2, r4
 800ff0a:	b292      	uxth	r2, r2
 800ff0c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ff18:	68f8      	ldr	r0, [r7, #12]
 800ff1a:	f7fe f9a2 	bl	800e262 <tcp_seg_free>
    while (next &&
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d00e      	beq.n	800ff42 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	891b      	ldrh	r3, [r3, #8]
 800ff28:	461a      	mov	r2, r3
 800ff2a:	4b1d      	ldr	r3, [pc, #116]	; (800ffa0 <tcp_oos_insert_segment+0x10c>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	441a      	add	r2, r3
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	6839      	ldr	r1, [r7, #0]
 800ff38:	8909      	ldrh	r1, [r1, #8]
 800ff3a:	440b      	add	r3, r1
 800ff3c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	daca      	bge.n	800fed8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d01e      	beq.n	800ff86 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	891b      	ldrh	r3, [r3, #8]
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	4b14      	ldr	r3, [pc, #80]	; (800ffa0 <tcp_oos_insert_segment+0x10c>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	441a      	add	r2, r3
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	68db      	ldr	r3, [r3, #12]
 800ff58:	685b      	ldr	r3, [r3, #4]
 800ff5a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	dd12      	ble.n	800ff86 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	68db      	ldr	r3, [r3, #12]
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	b29a      	uxth	r2, r3
 800ff68:	4b0d      	ldr	r3, [pc, #52]	; (800ffa0 <tcp_oos_insert_segment+0x10c>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	1ad3      	subs	r3, r2, r3
 800ff70:	b29a      	uxth	r2, r3
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	685a      	ldr	r2, [r3, #4]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	891b      	ldrh	r3, [r3, #8]
 800ff7e:	4619      	mov	r1, r3
 800ff80:	4610      	mov	r0, r2
 800ff82:	f7fc fa63 	bl	800c44c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	683a      	ldr	r2, [r7, #0]
 800ff8a:	601a      	str	r2, [r3, #0]
}
 800ff8c:	bf00      	nop
 800ff8e:	3714      	adds	r7, #20
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd90      	pop	{r4, r7, pc}
 800ff94:	08016a60 	.word	0x08016a60
 800ff98:	08016d5c 	.word	0x08016d5c
 800ff9c:	08016ae8 	.word	0x08016ae8
 800ffa0:	24007478 	.word	0x24007478

0800ffa4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ffa4:	b5b0      	push	{r4, r5, r7, lr}
 800ffa6:	b086      	sub	sp, #24
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	607a      	str	r2, [r7, #4]
 800ffb0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ffb2:	e03e      	b.n	8010032 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fc fc56 	bl	800c874 <pbuf_clen>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ffd2:	8a7a      	ldrh	r2, [r7, #18]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d906      	bls.n	800ffe6 <tcp_free_acked_segments+0x42>
 800ffd8:	4b2a      	ldr	r3, [pc, #168]	; (8010084 <tcp_free_acked_segments+0xe0>)
 800ffda:	f240 4257 	movw	r2, #1111	; 0x457
 800ffde:	492a      	ldr	r1, [pc, #168]	; (8010088 <tcp_free_acked_segments+0xe4>)
 800ffe0:	482a      	ldr	r0, [pc, #168]	; (801008c <tcp_free_acked_segments+0xe8>)
 800ffe2:	f003 fcf7 	bl	80139d4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ffec:	8a7b      	ldrh	r3, [r7, #18]
 800ffee:	1ad3      	subs	r3, r2, r3
 800fff0:	b29a      	uxth	r2, r3
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	891a      	ldrh	r2, [r3, #8]
 800fffc:	4b24      	ldr	r3, [pc, #144]	; (8010090 <tcp_free_acked_segments+0xec>)
 800fffe:	881b      	ldrh	r3, [r3, #0]
 8010000:	4413      	add	r3, r2
 8010002:	b29a      	uxth	r2, r3
 8010004:	4b22      	ldr	r3, [pc, #136]	; (8010090 <tcp_free_acked_segments+0xec>)
 8010006:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010008:	6978      	ldr	r0, [r7, #20]
 801000a:	f7fe f92a 	bl	800e262 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010014:	2b00      	cmp	r3, #0
 8010016:	d00c      	beq.n	8010032 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d109      	bne.n	8010032 <tcp_free_acked_segments+0x8e>
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d106      	bne.n	8010032 <tcp_free_acked_segments+0x8e>
 8010024:	4b17      	ldr	r3, [pc, #92]	; (8010084 <tcp_free_acked_segments+0xe0>)
 8010026:	f240 4261 	movw	r2, #1121	; 0x461
 801002a:	491a      	ldr	r1, [pc, #104]	; (8010094 <tcp_free_acked_segments+0xf0>)
 801002c:	4817      	ldr	r0, [pc, #92]	; (801008c <tcp_free_acked_segments+0xe8>)
 801002e:	f003 fcd1 	bl	80139d4 <iprintf>
  while (seg_list != NULL &&
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d020      	beq.n	801007a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	4618      	mov	r0, r3
 8010040:	f7f8 fb69 	bl	8008716 <lwip_htonl>
 8010044:	4604      	mov	r4, r0
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	891b      	ldrh	r3, [r3, #8]
 801004a:	461d      	mov	r5, r3
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	68db      	ldr	r3, [r3, #12]
 8010050:	899b      	ldrh	r3, [r3, #12]
 8010052:	b29b      	uxth	r3, r3
 8010054:	4618      	mov	r0, r3
 8010056:	f7f8 fb49 	bl	80086ec <lwip_htons>
 801005a:	4603      	mov	r3, r0
 801005c:	b2db      	uxtb	r3, r3
 801005e:	f003 0303 	and.w	r3, r3, #3
 8010062:	2b00      	cmp	r3, #0
 8010064:	d001      	beq.n	801006a <tcp_free_acked_segments+0xc6>
 8010066:	2301      	movs	r3, #1
 8010068:	e000      	b.n	801006c <tcp_free_acked_segments+0xc8>
 801006a:	2300      	movs	r3, #0
 801006c:	442b      	add	r3, r5
 801006e:	18e2      	adds	r2, r4, r3
 8010070:	4b09      	ldr	r3, [pc, #36]	; (8010098 <tcp_free_acked_segments+0xf4>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010076:	2b00      	cmp	r3, #0
 8010078:	dd9c      	ble.n	800ffb4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801007a:	68bb      	ldr	r3, [r7, #8]
}
 801007c:	4618      	mov	r0, r3
 801007e:	3718      	adds	r7, #24
 8010080:	46bd      	mov	sp, r7
 8010082:	bdb0      	pop	{r4, r5, r7, pc}
 8010084:	08016a60 	.word	0x08016a60
 8010088:	08016d84 	.word	0x08016d84
 801008c:	08016ae8 	.word	0x08016ae8
 8010090:	24007480 	.word	0x24007480
 8010094:	08016dac 	.word	0x08016dac
 8010098:	2400747c 	.word	0x2400747c

0801009c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801009c:	b5b0      	push	{r4, r5, r7, lr}
 801009e:	b094      	sub	sp, #80	; 0x50
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80100a4:	2300      	movs	r3, #0
 80100a6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d106      	bne.n	80100bc <tcp_receive+0x20>
 80100ae:	4b91      	ldr	r3, [pc, #580]	; (80102f4 <tcp_receive+0x258>)
 80100b0:	f240 427b 	movw	r2, #1147	; 0x47b
 80100b4:	4990      	ldr	r1, [pc, #576]	; (80102f8 <tcp_receive+0x25c>)
 80100b6:	4891      	ldr	r0, [pc, #580]	; (80102fc <tcp_receive+0x260>)
 80100b8:	f003 fc8c 	bl	80139d4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	7d1b      	ldrb	r3, [r3, #20]
 80100c0:	2b03      	cmp	r3, #3
 80100c2:	d806      	bhi.n	80100d2 <tcp_receive+0x36>
 80100c4:	4b8b      	ldr	r3, [pc, #556]	; (80102f4 <tcp_receive+0x258>)
 80100c6:	f240 427c 	movw	r2, #1148	; 0x47c
 80100ca:	498d      	ldr	r1, [pc, #564]	; (8010300 <tcp_receive+0x264>)
 80100cc:	488b      	ldr	r0, [pc, #556]	; (80102fc <tcp_receive+0x260>)
 80100ce:	f003 fc81 	bl	80139d4 <iprintf>

  if (flags & TCP_ACK) {
 80100d2:	4b8c      	ldr	r3, [pc, #560]	; (8010304 <tcp_receive+0x268>)
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	f003 0310 	and.w	r3, r3, #16
 80100da:	2b00      	cmp	r3, #0
 80100dc:	f000 8264 	beq.w	80105a8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80100e6:	461a      	mov	r2, r3
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100ec:	4413      	add	r3, r2
 80100ee:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80100f4:	4b84      	ldr	r3, [pc, #528]	; (8010308 <tcp_receive+0x26c>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	1ad3      	subs	r3, r2, r3
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	db1b      	blt.n	8010136 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010102:	4b81      	ldr	r3, [pc, #516]	; (8010308 <tcp_receive+0x26c>)
 8010104:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010106:	429a      	cmp	r2, r3
 8010108:	d106      	bne.n	8010118 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801010e:	4b7f      	ldr	r3, [pc, #508]	; (801030c <tcp_receive+0x270>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	1ad3      	subs	r3, r2, r3
 8010114:	2b00      	cmp	r3, #0
 8010116:	db0e      	blt.n	8010136 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801011c:	4b7b      	ldr	r3, [pc, #492]	; (801030c <tcp_receive+0x270>)
 801011e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010120:	429a      	cmp	r2, r3
 8010122:	d125      	bne.n	8010170 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010124:	4b7a      	ldr	r3, [pc, #488]	; (8010310 <tcp_receive+0x274>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	89db      	ldrh	r3, [r3, #14]
 801012a:	b29a      	uxth	r2, r3
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010132:	429a      	cmp	r2, r3
 8010134:	d91c      	bls.n	8010170 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010136:	4b76      	ldr	r3, [pc, #472]	; (8010310 <tcp_receive+0x274>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	89db      	ldrh	r3, [r3, #14]
 801013c:	b29a      	uxth	r2, r3
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010150:	429a      	cmp	r2, r3
 8010152:	d205      	bcs.n	8010160 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010160:	4b69      	ldr	r3, [pc, #420]	; (8010308 <tcp_receive+0x26c>)
 8010162:	681a      	ldr	r2, [r3, #0]
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010168:	4b68      	ldr	r3, [pc, #416]	; (801030c <tcp_receive+0x270>)
 801016a:	681a      	ldr	r2, [r3, #0]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010170:	4b66      	ldr	r3, [pc, #408]	; (801030c <tcp_receive+0x270>)
 8010172:	681a      	ldr	r2, [r3, #0]
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010178:	1ad3      	subs	r3, r2, r3
 801017a:	2b00      	cmp	r3, #0
 801017c:	dc58      	bgt.n	8010230 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801017e:	4b65      	ldr	r3, [pc, #404]	; (8010314 <tcp_receive+0x278>)
 8010180:	881b      	ldrh	r3, [r3, #0]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d14b      	bne.n	801021e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801018a:	687a      	ldr	r2, [r7, #4]
 801018c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010190:	4413      	add	r3, r2
 8010192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010194:	429a      	cmp	r2, r3
 8010196:	d142      	bne.n	801021e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801019e:	2b00      	cmp	r3, #0
 80101a0:	db3d      	blt.n	801021e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80101a6:	4b59      	ldr	r3, [pc, #356]	; (801030c <tcp_receive+0x270>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d137      	bne.n	801021e <tcp_receive+0x182>
              found_dupack = 1;
 80101ae:	2301      	movs	r3, #1
 80101b0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80101b8:	2bff      	cmp	r3, #255	; 0xff
 80101ba:	d007      	beq.n	80101cc <tcp_receive+0x130>
                ++pcb->dupacks;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80101c2:	3301      	adds	r3, #1
 80101c4:	b2da      	uxtb	r2, r3
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80101d2:	2b03      	cmp	r3, #3
 80101d4:	d91b      	bls.n	801020e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101e0:	4413      	add	r3, r2
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d30a      	bcc.n	8010204 <tcp_receive+0x168>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101f8:	4413      	add	r3, r2
 80101fa:	b29a      	uxth	r2, r3
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010202:	e004      	b.n	801020e <tcp_receive+0x172>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801020a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010214:	2b02      	cmp	r3, #2
 8010216:	d902      	bls.n	801021e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f002 fb43 	bl	80128a4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801021e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010220:	2b00      	cmp	r3, #0
 8010222:	f040 8161 	bne.w	80104e8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2200      	movs	r2, #0
 801022a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801022e:	e15b      	b.n	80104e8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010230:	4b36      	ldr	r3, [pc, #216]	; (801030c <tcp_receive+0x270>)
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010238:	1ad3      	subs	r3, r2, r3
 801023a:	3b01      	subs	r3, #1
 801023c:	2b00      	cmp	r3, #0
 801023e:	f2c0 814e 	blt.w	80104de <tcp_receive+0x442>
 8010242:	4b32      	ldr	r3, [pc, #200]	; (801030c <tcp_receive+0x270>)
 8010244:	681a      	ldr	r2, [r3, #0]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801024a:	1ad3      	subs	r3, r2, r3
 801024c:	2b00      	cmp	r3, #0
 801024e:	f300 8146 	bgt.w	80104de <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	8b5b      	ldrh	r3, [r3, #26]
 8010256:	f003 0304 	and.w	r3, r3, #4
 801025a:	2b00      	cmp	r3, #0
 801025c:	d010      	beq.n	8010280 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	8b5b      	ldrh	r3, [r3, #26]
 8010262:	f023 0304 	bic.w	r3, r3, #4
 8010266:	b29a      	uxth	r2, r3
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2200      	movs	r2, #0
 801027c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2200      	movs	r2, #0
 8010284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801028e:	10db      	asrs	r3, r3, #3
 8010290:	b21b      	sxth	r3, r3
 8010292:	b29a      	uxth	r2, r3
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801029a:	b29b      	uxth	r3, r3
 801029c:	4413      	add	r3, r2
 801029e:	b29b      	uxth	r3, r3
 80102a0:	b21a      	sxth	r2, r3
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80102a8:	4b18      	ldr	r3, [pc, #96]	; (801030c <tcp_receive+0x270>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	b29a      	uxth	r2, r3
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102b2:	b29b      	uxth	r3, r3
 80102b4:	1ad3      	subs	r3, r2, r3
 80102b6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2200      	movs	r2, #0
 80102bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80102c0:	4b12      	ldr	r3, [pc, #72]	; (801030c <tcp_receive+0x270>)
 80102c2:	681a      	ldr	r2, [r3, #0]
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	7d1b      	ldrb	r3, [r3, #20]
 80102cc:	2b03      	cmp	r3, #3
 80102ce:	f240 8097 	bls.w	8010400 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80102de:	429a      	cmp	r2, r3
 80102e0:	d245      	bcs.n	801036e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	8b5b      	ldrh	r3, [r3, #26]
 80102e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d014      	beq.n	8010318 <tcp_receive+0x27c>
 80102ee:	2301      	movs	r3, #1
 80102f0:	e013      	b.n	801031a <tcp_receive+0x27e>
 80102f2:	bf00      	nop
 80102f4:	08016a60 	.word	0x08016a60
 80102f8:	08016dcc 	.word	0x08016dcc
 80102fc:	08016ae8 	.word	0x08016ae8
 8010300:	08016de8 	.word	0x08016de8
 8010304:	24007484 	.word	0x24007484
 8010308:	24007478 	.word	0x24007478
 801030c:	2400747c 	.word	0x2400747c
 8010310:	24007468 	.word	0x24007468
 8010314:	24007482 	.word	0x24007482
 8010318:	2302      	movs	r3, #2
 801031a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801031e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010322:	b29a      	uxth	r2, r3
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010328:	fb12 f303 	smulbb	r3, r2, r3
 801032c:	b29b      	uxth	r3, r3
 801032e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010330:	4293      	cmp	r3, r2
 8010332:	bf28      	it	cs
 8010334:	4613      	movcs	r3, r2
 8010336:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801033e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010340:	4413      	add	r3, r2
 8010342:	b29a      	uxth	r2, r3
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801034a:	429a      	cmp	r2, r3
 801034c:	d309      	bcc.n	8010362 <tcp_receive+0x2c6>
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010354:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010356:	4413      	add	r3, r2
 8010358:	b29a      	uxth	r2, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010360:	e04e      	b.n	8010400 <tcp_receive+0x364>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010368:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801036c:	e048      	b.n	8010400 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010374:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010376:	4413      	add	r3, r2
 8010378:	b29a      	uxth	r2, r3
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010380:	429a      	cmp	r2, r3
 8010382:	d309      	bcc.n	8010398 <tcp_receive+0x2fc>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801038a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801038c:	4413      	add	r3, r2
 801038e:	b29a      	uxth	r2, r3
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010396:	e004      	b.n	80103a2 <tcp_receive+0x306>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801039e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d326      	bcc.n	8010400 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80103be:	1ad3      	subs	r3, r2, r3
 80103c0:	b29a      	uxth	r2, r3
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103d2:	4413      	add	r3, r2
 80103d4:	b29a      	uxth	r2, r3
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80103dc:	429a      	cmp	r2, r3
 80103de:	d30a      	bcc.n	80103f6 <tcp_receive+0x35a>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103ea:	4413      	add	r3, r2
 80103ec:	b29a      	uxth	r2, r3
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80103f4:	e004      	b.n	8010400 <tcp_receive+0x364>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010408:	4a98      	ldr	r2, [pc, #608]	; (801066c <tcp_receive+0x5d0>)
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f7ff fdca 	bl	800ffa4 <tcp_free_acked_segments>
 8010410:	4602      	mov	r2, r0
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801041e:	4a94      	ldr	r2, [pc, #592]	; (8010670 <tcp_receive+0x5d4>)
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f7ff fdbf 	bl	800ffa4 <tcp_free_acked_segments>
 8010426:	4602      	mov	r2, r0
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010430:	2b00      	cmp	r3, #0
 8010432:	d104      	bne.n	801043e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801043a:	861a      	strh	r2, [r3, #48]	; 0x30
 801043c:	e002      	b.n	8010444 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2200      	movs	r2, #0
 8010442:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2200      	movs	r2, #0
 8010448:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801044e:	2b00      	cmp	r3, #0
 8010450:	d103      	bne.n	801045a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2200      	movs	r2, #0
 8010456:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010460:	4b84      	ldr	r3, [pc, #528]	; (8010674 <tcp_receive+0x5d8>)
 8010462:	881b      	ldrh	r3, [r3, #0]
 8010464:	4413      	add	r3, r2
 8010466:	b29a      	uxth	r2, r3
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	8b5b      	ldrh	r3, [r3, #26]
 8010472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010476:	2b00      	cmp	r3, #0
 8010478:	d035      	beq.n	80104e6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801047e:	2b00      	cmp	r3, #0
 8010480:	d118      	bne.n	80104b4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010486:	2b00      	cmp	r3, #0
 8010488:	d00c      	beq.n	80104a4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010492:	68db      	ldr	r3, [r3, #12]
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	4618      	mov	r0, r3
 8010498:	f7f8 f93d 	bl	8008716 <lwip_htonl>
 801049c:	4603      	mov	r3, r0
 801049e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	dc20      	bgt.n	80104e6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	8b5b      	ldrh	r3, [r3, #26]
 80104a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80104ac:	b29a      	uxth	r2, r3
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80104b2:	e018      	b.n	80104e6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104bc:	68db      	ldr	r3, [r3, #12]
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7f8 f928 	bl	8008716 <lwip_htonl>
 80104c6:	4603      	mov	r3, r0
 80104c8:	1ae3      	subs	r3, r4, r3
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	dc0b      	bgt.n	80104e6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	8b5b      	ldrh	r3, [r3, #26]
 80104d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80104dc:	e003      	b.n	80104e6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f002 fbce 	bl	8012c80 <tcp_send_empty_ack>
 80104e4:	e000      	b.n	80104e8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80104e6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d05b      	beq.n	80105a8 <tcp_receive+0x50c>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80104f4:	4b60      	ldr	r3, [pc, #384]	; (8010678 <tcp_receive+0x5dc>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	1ad3      	subs	r3, r2, r3
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	da54      	bge.n	80105a8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80104fe:	4b5f      	ldr	r3, [pc, #380]	; (801067c <tcp_receive+0x5e0>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	b29a      	uxth	r2, r3
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010508:	b29b      	uxth	r3, r3
 801050a:	1ad3      	subs	r3, r2, r3
 801050c:	b29b      	uxth	r3, r3
 801050e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010512:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801051c:	10db      	asrs	r3, r3, #3
 801051e:	b21b      	sxth	r3, r3
 8010520:	b29b      	uxth	r3, r3
 8010522:	1ad3      	subs	r3, r2, r3
 8010524:	b29b      	uxth	r3, r3
 8010526:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010530:	b29a      	uxth	r2, r3
 8010532:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010536:	4413      	add	r3, r2
 8010538:	b29b      	uxth	r3, r3
 801053a:	b21a      	sxth	r2, r3
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010540:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010544:	2b00      	cmp	r3, #0
 8010546:	da05      	bge.n	8010554 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010548:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801054c:	425b      	negs	r3, r3
 801054e:	b29b      	uxth	r3, r3
 8010550:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010554:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801055e:	109b      	asrs	r3, r3, #2
 8010560:	b21b      	sxth	r3, r3
 8010562:	b29b      	uxth	r3, r3
 8010564:	1ad3      	subs	r3, r2, r3
 8010566:	b29b      	uxth	r3, r3
 8010568:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010572:	b29a      	uxth	r2, r3
 8010574:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010578:	4413      	add	r3, r2
 801057a:	b29b      	uxth	r3, r3
 801057c:	b21a      	sxth	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010588:	10db      	asrs	r3, r3, #3
 801058a:	b21b      	sxth	r3, r3
 801058c:	b29a      	uxth	r2, r3
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010594:	b29b      	uxth	r3, r3
 8010596:	4413      	add	r3, r2
 8010598:	b29b      	uxth	r3, r3
 801059a:	b21a      	sxth	r2, r3
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2200      	movs	r2, #0
 80105a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80105a8:	4b35      	ldr	r3, [pc, #212]	; (8010680 <tcp_receive+0x5e4>)
 80105aa:	881b      	ldrh	r3, [r3, #0]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	f000 84e2 	beq.w	8010f76 <tcp_receive+0xeda>
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	7d1b      	ldrb	r3, [r3, #20]
 80105b6:	2b06      	cmp	r3, #6
 80105b8:	f200 84dd 	bhi.w	8010f76 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105c0:	4b30      	ldr	r3, [pc, #192]	; (8010684 <tcp_receive+0x5e8>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	1ad3      	subs	r3, r2, r3
 80105c6:	3b01      	subs	r3, #1
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	f2c0 808f 	blt.w	80106ec <tcp_receive+0x650>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105d2:	4b2b      	ldr	r3, [pc, #172]	; (8010680 <tcp_receive+0x5e4>)
 80105d4:	881b      	ldrh	r3, [r3, #0]
 80105d6:	4619      	mov	r1, r3
 80105d8:	4b2a      	ldr	r3, [pc, #168]	; (8010684 <tcp_receive+0x5e8>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	440b      	add	r3, r1
 80105de:	1ad3      	subs	r3, r2, r3
 80105e0:	3301      	adds	r3, #1
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	f300 8082 	bgt.w	80106ec <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80105e8:	4b27      	ldr	r3, [pc, #156]	; (8010688 <tcp_receive+0x5ec>)
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105f2:	4b24      	ldr	r3, [pc, #144]	; (8010684 <tcp_receive+0x5e8>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	1ad3      	subs	r3, r2, r3
 80105f8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80105fa:	4b23      	ldr	r3, [pc, #140]	; (8010688 <tcp_receive+0x5ec>)
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d106      	bne.n	8010610 <tcp_receive+0x574>
 8010602:	4b22      	ldr	r3, [pc, #136]	; (801068c <tcp_receive+0x5f0>)
 8010604:	f240 5294 	movw	r2, #1428	; 0x594
 8010608:	4921      	ldr	r1, [pc, #132]	; (8010690 <tcp_receive+0x5f4>)
 801060a:	4822      	ldr	r0, [pc, #136]	; (8010694 <tcp_receive+0x5f8>)
 801060c:	f003 f9e2 	bl	80139d4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010612:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010616:	4293      	cmp	r3, r2
 8010618:	d906      	bls.n	8010628 <tcp_receive+0x58c>
 801061a:	4b1c      	ldr	r3, [pc, #112]	; (801068c <tcp_receive+0x5f0>)
 801061c:	f240 5295 	movw	r2, #1429	; 0x595
 8010620:	491d      	ldr	r1, [pc, #116]	; (8010698 <tcp_receive+0x5fc>)
 8010622:	481c      	ldr	r0, [pc, #112]	; (8010694 <tcp_receive+0x5f8>)
 8010624:	f003 f9d6 	bl	80139d4 <iprintf>
      off = (u16_t)off32;
 8010628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801062e:	4b16      	ldr	r3, [pc, #88]	; (8010688 <tcp_receive+0x5ec>)
 8010630:	685b      	ldr	r3, [r3, #4]
 8010632:	891b      	ldrh	r3, [r3, #8]
 8010634:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010638:	429a      	cmp	r2, r3
 801063a:	d906      	bls.n	801064a <tcp_receive+0x5ae>
 801063c:	4b13      	ldr	r3, [pc, #76]	; (801068c <tcp_receive+0x5f0>)
 801063e:	f240 5297 	movw	r2, #1431	; 0x597
 8010642:	4916      	ldr	r1, [pc, #88]	; (801069c <tcp_receive+0x600>)
 8010644:	4813      	ldr	r0, [pc, #76]	; (8010694 <tcp_receive+0x5f8>)
 8010646:	f003 f9c5 	bl	80139d4 <iprintf>
      inseg.len -= off;
 801064a:	4b0f      	ldr	r3, [pc, #60]	; (8010688 <tcp_receive+0x5ec>)
 801064c:	891a      	ldrh	r2, [r3, #8]
 801064e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010652:	1ad3      	subs	r3, r2, r3
 8010654:	b29a      	uxth	r2, r3
 8010656:	4b0c      	ldr	r3, [pc, #48]	; (8010688 <tcp_receive+0x5ec>)
 8010658:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801065a:	4b0b      	ldr	r3, [pc, #44]	; (8010688 <tcp_receive+0x5ec>)
 801065c:	685b      	ldr	r3, [r3, #4]
 801065e:	891a      	ldrh	r2, [r3, #8]
 8010660:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010664:	1ad3      	subs	r3, r2, r3
 8010666:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010668:	e02a      	b.n	80106c0 <tcp_receive+0x624>
 801066a:	bf00      	nop
 801066c:	08016e04 	.word	0x08016e04
 8010670:	08016e0c 	.word	0x08016e0c
 8010674:	24007480 	.word	0x24007480
 8010678:	2400747c 	.word	0x2400747c
 801067c:	24007440 	.word	0x24007440
 8010680:	24007482 	.word	0x24007482
 8010684:	24007478 	.word	0x24007478
 8010688:	24007458 	.word	0x24007458
 801068c:	08016a60 	.word	0x08016a60
 8010690:	08016e14 	.word	0x08016e14
 8010694:	08016ae8 	.word	0x08016ae8
 8010698:	08016e24 	.word	0x08016e24
 801069c:	08016e34 	.word	0x08016e34
        off -= p->len;
 80106a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106a2:	895b      	ldrh	r3, [r3, #10]
 80106a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106a8:	1ad3      	subs	r3, r2, r3
 80106aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80106ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80106b2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80106b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106b6:	2200      	movs	r2, #0
 80106b8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80106ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80106c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106c2:	895b      	ldrh	r3, [r3, #10]
 80106c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d8e9      	bhi.n	80106a0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80106cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106d0:	4619      	mov	r1, r3
 80106d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80106d4:	f7fb ffba 	bl	800c64c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106dc:	4a91      	ldr	r2, [pc, #580]	; (8010924 <tcp_receive+0x888>)
 80106de:	6013      	str	r3, [r2, #0]
 80106e0:	4b91      	ldr	r3, [pc, #580]	; (8010928 <tcp_receive+0x88c>)
 80106e2:	68db      	ldr	r3, [r3, #12]
 80106e4:	4a8f      	ldr	r2, [pc, #572]	; (8010924 <tcp_receive+0x888>)
 80106e6:	6812      	ldr	r2, [r2, #0]
 80106e8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80106ea:	e00d      	b.n	8010708 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80106ec:	4b8d      	ldr	r3, [pc, #564]	; (8010924 <tcp_receive+0x888>)
 80106ee:	681a      	ldr	r2, [r3, #0]
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f4:	1ad3      	subs	r3, r2, r3
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	da06      	bge.n	8010708 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	8b5b      	ldrh	r3, [r3, #26]
 80106fe:	f043 0302 	orr.w	r3, r3, #2
 8010702:	b29a      	uxth	r2, r3
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010708:	4b86      	ldr	r3, [pc, #536]	; (8010924 <tcp_receive+0x888>)
 801070a:	681a      	ldr	r2, [r3, #0]
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010710:	1ad3      	subs	r3, r2, r3
 8010712:	2b00      	cmp	r3, #0
 8010714:	f2c0 842a 	blt.w	8010f6c <tcp_receive+0xed0>
 8010718:	4b82      	ldr	r3, [pc, #520]	; (8010924 <tcp_receive+0x888>)
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010720:	6879      	ldr	r1, [r7, #4]
 8010722:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010724:	440b      	add	r3, r1
 8010726:	1ad3      	subs	r3, r2, r3
 8010728:	3301      	adds	r3, #1
 801072a:	2b00      	cmp	r3, #0
 801072c:	f300 841e 	bgt.w	8010f6c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010734:	4b7b      	ldr	r3, [pc, #492]	; (8010924 <tcp_receive+0x888>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	429a      	cmp	r2, r3
 801073a:	f040 829a 	bne.w	8010c72 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801073e:	4b7a      	ldr	r3, [pc, #488]	; (8010928 <tcp_receive+0x88c>)
 8010740:	891c      	ldrh	r4, [r3, #8]
 8010742:	4b79      	ldr	r3, [pc, #484]	; (8010928 <tcp_receive+0x88c>)
 8010744:	68db      	ldr	r3, [r3, #12]
 8010746:	899b      	ldrh	r3, [r3, #12]
 8010748:	b29b      	uxth	r3, r3
 801074a:	4618      	mov	r0, r3
 801074c:	f7f7 ffce 	bl	80086ec <lwip_htons>
 8010750:	4603      	mov	r3, r0
 8010752:	b2db      	uxtb	r3, r3
 8010754:	f003 0303 	and.w	r3, r3, #3
 8010758:	2b00      	cmp	r3, #0
 801075a:	d001      	beq.n	8010760 <tcp_receive+0x6c4>
 801075c:	2301      	movs	r3, #1
 801075e:	e000      	b.n	8010762 <tcp_receive+0x6c6>
 8010760:	2300      	movs	r3, #0
 8010762:	4423      	add	r3, r4
 8010764:	b29a      	uxth	r2, r3
 8010766:	4b71      	ldr	r3, [pc, #452]	; (801092c <tcp_receive+0x890>)
 8010768:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801076e:	4b6f      	ldr	r3, [pc, #444]	; (801092c <tcp_receive+0x890>)
 8010770:	881b      	ldrh	r3, [r3, #0]
 8010772:	429a      	cmp	r2, r3
 8010774:	d275      	bcs.n	8010862 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010776:	4b6c      	ldr	r3, [pc, #432]	; (8010928 <tcp_receive+0x88c>)
 8010778:	68db      	ldr	r3, [r3, #12]
 801077a:	899b      	ldrh	r3, [r3, #12]
 801077c:	b29b      	uxth	r3, r3
 801077e:	4618      	mov	r0, r3
 8010780:	f7f7 ffb4 	bl	80086ec <lwip_htons>
 8010784:	4603      	mov	r3, r0
 8010786:	b2db      	uxtb	r3, r3
 8010788:	f003 0301 	and.w	r3, r3, #1
 801078c:	2b00      	cmp	r3, #0
 801078e:	d01f      	beq.n	80107d0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010790:	4b65      	ldr	r3, [pc, #404]	; (8010928 <tcp_receive+0x88c>)
 8010792:	68db      	ldr	r3, [r3, #12]
 8010794:	899b      	ldrh	r3, [r3, #12]
 8010796:	b29b      	uxth	r3, r3
 8010798:	b21b      	sxth	r3, r3
 801079a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801079e:	b21c      	sxth	r4, r3
 80107a0:	4b61      	ldr	r3, [pc, #388]	; (8010928 <tcp_receive+0x88c>)
 80107a2:	68db      	ldr	r3, [r3, #12]
 80107a4:	899b      	ldrh	r3, [r3, #12]
 80107a6:	b29b      	uxth	r3, r3
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7f7 ff9f 	bl	80086ec <lwip_htons>
 80107ae:	4603      	mov	r3, r0
 80107b0:	b2db      	uxtb	r3, r3
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7f7 ff96 	bl	80086ec <lwip_htons>
 80107c0:	4603      	mov	r3, r0
 80107c2:	b21b      	sxth	r3, r3
 80107c4:	4323      	orrs	r3, r4
 80107c6:	b21a      	sxth	r2, r3
 80107c8:	4b57      	ldr	r3, [pc, #348]	; (8010928 <tcp_receive+0x88c>)
 80107ca:	68db      	ldr	r3, [r3, #12]
 80107cc:	b292      	uxth	r2, r2
 80107ce:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80107d4:	4b54      	ldr	r3, [pc, #336]	; (8010928 <tcp_receive+0x88c>)
 80107d6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80107d8:	4b53      	ldr	r3, [pc, #332]	; (8010928 <tcp_receive+0x88c>)
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	899b      	ldrh	r3, [r3, #12]
 80107de:	b29b      	uxth	r3, r3
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7f7 ff83 	bl	80086ec <lwip_htons>
 80107e6:	4603      	mov	r3, r0
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	f003 0302 	and.w	r3, r3, #2
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d005      	beq.n	80107fe <tcp_receive+0x762>
            inseg.len -= 1;
 80107f2:	4b4d      	ldr	r3, [pc, #308]	; (8010928 <tcp_receive+0x88c>)
 80107f4:	891b      	ldrh	r3, [r3, #8]
 80107f6:	3b01      	subs	r3, #1
 80107f8:	b29a      	uxth	r2, r3
 80107fa:	4b4b      	ldr	r3, [pc, #300]	; (8010928 <tcp_receive+0x88c>)
 80107fc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80107fe:	4b4a      	ldr	r3, [pc, #296]	; (8010928 <tcp_receive+0x88c>)
 8010800:	685b      	ldr	r3, [r3, #4]
 8010802:	4a49      	ldr	r2, [pc, #292]	; (8010928 <tcp_receive+0x88c>)
 8010804:	8912      	ldrh	r2, [r2, #8]
 8010806:	4611      	mov	r1, r2
 8010808:	4618      	mov	r0, r3
 801080a:	f7fb fe1f 	bl	800c44c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801080e:	4b46      	ldr	r3, [pc, #280]	; (8010928 <tcp_receive+0x88c>)
 8010810:	891c      	ldrh	r4, [r3, #8]
 8010812:	4b45      	ldr	r3, [pc, #276]	; (8010928 <tcp_receive+0x88c>)
 8010814:	68db      	ldr	r3, [r3, #12]
 8010816:	899b      	ldrh	r3, [r3, #12]
 8010818:	b29b      	uxth	r3, r3
 801081a:	4618      	mov	r0, r3
 801081c:	f7f7 ff66 	bl	80086ec <lwip_htons>
 8010820:	4603      	mov	r3, r0
 8010822:	b2db      	uxtb	r3, r3
 8010824:	f003 0303 	and.w	r3, r3, #3
 8010828:	2b00      	cmp	r3, #0
 801082a:	d001      	beq.n	8010830 <tcp_receive+0x794>
 801082c:	2301      	movs	r3, #1
 801082e:	e000      	b.n	8010832 <tcp_receive+0x796>
 8010830:	2300      	movs	r3, #0
 8010832:	4423      	add	r3, r4
 8010834:	b29a      	uxth	r2, r3
 8010836:	4b3d      	ldr	r3, [pc, #244]	; (801092c <tcp_receive+0x890>)
 8010838:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801083a:	4b3c      	ldr	r3, [pc, #240]	; (801092c <tcp_receive+0x890>)
 801083c:	881b      	ldrh	r3, [r3, #0]
 801083e:	461a      	mov	r2, r3
 8010840:	4b38      	ldr	r3, [pc, #224]	; (8010924 <tcp_receive+0x888>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	441a      	add	r2, r3
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801084a:	6879      	ldr	r1, [r7, #4]
 801084c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801084e:	440b      	add	r3, r1
 8010850:	429a      	cmp	r2, r3
 8010852:	d006      	beq.n	8010862 <tcp_receive+0x7c6>
 8010854:	4b36      	ldr	r3, [pc, #216]	; (8010930 <tcp_receive+0x894>)
 8010856:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801085a:	4936      	ldr	r1, [pc, #216]	; (8010934 <tcp_receive+0x898>)
 801085c:	4836      	ldr	r0, [pc, #216]	; (8010938 <tcp_receive+0x89c>)
 801085e:	f003 f8b9 	bl	80139d4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010866:	2b00      	cmp	r3, #0
 8010868:	f000 80e7 	beq.w	8010a3a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801086c:	4b2e      	ldr	r3, [pc, #184]	; (8010928 <tcp_receive+0x88c>)
 801086e:	68db      	ldr	r3, [r3, #12]
 8010870:	899b      	ldrh	r3, [r3, #12]
 8010872:	b29b      	uxth	r3, r3
 8010874:	4618      	mov	r0, r3
 8010876:	f7f7 ff39 	bl	80086ec <lwip_htons>
 801087a:	4603      	mov	r3, r0
 801087c:	b2db      	uxtb	r3, r3
 801087e:	f003 0301 	and.w	r3, r3, #1
 8010882:	2b00      	cmp	r3, #0
 8010884:	d010      	beq.n	80108a8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010886:	e00a      	b.n	801089e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801088c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010892:	681a      	ldr	r2, [r3, #0]
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010898:	68f8      	ldr	r0, [r7, #12]
 801089a:	f7fd fce2 	bl	800e262 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d1f0      	bne.n	8010888 <tcp_receive+0x7ec>
 80108a6:	e0c8      	b.n	8010a3a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108ac:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80108ae:	e052      	b.n	8010956 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80108b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108b2:	68db      	ldr	r3, [r3, #12]
 80108b4:	899b      	ldrh	r3, [r3, #12]
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7f7 ff17 	bl	80086ec <lwip_htons>
 80108be:	4603      	mov	r3, r0
 80108c0:	b2db      	uxtb	r3, r3
 80108c2:	f003 0301 	and.w	r3, r3, #1
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d03d      	beq.n	8010946 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80108ca:	4b17      	ldr	r3, [pc, #92]	; (8010928 <tcp_receive+0x88c>)
 80108cc:	68db      	ldr	r3, [r3, #12]
 80108ce:	899b      	ldrh	r3, [r3, #12]
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7f7 ff0a 	bl	80086ec <lwip_htons>
 80108d8:	4603      	mov	r3, r0
 80108da:	b2db      	uxtb	r3, r3
 80108dc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d130      	bne.n	8010946 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80108e4:	4b10      	ldr	r3, [pc, #64]	; (8010928 <tcp_receive+0x88c>)
 80108e6:	68db      	ldr	r3, [r3, #12]
 80108e8:	899b      	ldrh	r3, [r3, #12]
 80108ea:	b29c      	uxth	r4, r3
 80108ec:	2001      	movs	r0, #1
 80108ee:	f7f7 fefd 	bl	80086ec <lwip_htons>
 80108f2:	4603      	mov	r3, r0
 80108f4:	461a      	mov	r2, r3
 80108f6:	4b0c      	ldr	r3, [pc, #48]	; (8010928 <tcp_receive+0x88c>)
 80108f8:	68db      	ldr	r3, [r3, #12]
 80108fa:	4322      	orrs	r2, r4
 80108fc:	b292      	uxth	r2, r2
 80108fe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010900:	4b09      	ldr	r3, [pc, #36]	; (8010928 <tcp_receive+0x88c>)
 8010902:	891c      	ldrh	r4, [r3, #8]
 8010904:	4b08      	ldr	r3, [pc, #32]	; (8010928 <tcp_receive+0x88c>)
 8010906:	68db      	ldr	r3, [r3, #12]
 8010908:	899b      	ldrh	r3, [r3, #12]
 801090a:	b29b      	uxth	r3, r3
 801090c:	4618      	mov	r0, r3
 801090e:	f7f7 feed 	bl	80086ec <lwip_htons>
 8010912:	4603      	mov	r3, r0
 8010914:	b2db      	uxtb	r3, r3
 8010916:	f003 0303 	and.w	r3, r3, #3
 801091a:	2b00      	cmp	r3, #0
 801091c:	d00e      	beq.n	801093c <tcp_receive+0x8a0>
 801091e:	2301      	movs	r3, #1
 8010920:	e00d      	b.n	801093e <tcp_receive+0x8a2>
 8010922:	bf00      	nop
 8010924:	24007478 	.word	0x24007478
 8010928:	24007458 	.word	0x24007458
 801092c:	24007482 	.word	0x24007482
 8010930:	08016a60 	.word	0x08016a60
 8010934:	08016e44 	.word	0x08016e44
 8010938:	08016ae8 	.word	0x08016ae8
 801093c:	2300      	movs	r3, #0
 801093e:	4423      	add	r3, r4
 8010940:	b29a      	uxth	r2, r3
 8010942:	4b98      	ldr	r3, [pc, #608]	; (8010ba4 <tcp_receive+0xb08>)
 8010944:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010948:	613b      	str	r3, [r7, #16]
              next = next->next;
 801094a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010950:	6938      	ldr	r0, [r7, #16]
 8010952:	f7fd fc86 	bl	800e262 <tcp_seg_free>
            while (next &&
 8010956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010958:	2b00      	cmp	r3, #0
 801095a:	d00e      	beq.n	801097a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801095c:	4b91      	ldr	r3, [pc, #580]	; (8010ba4 <tcp_receive+0xb08>)
 801095e:	881b      	ldrh	r3, [r3, #0]
 8010960:	461a      	mov	r2, r3
 8010962:	4b91      	ldr	r3, [pc, #580]	; (8010ba8 <tcp_receive+0xb0c>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	441a      	add	r2, r3
 8010968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801096a:	68db      	ldr	r3, [r3, #12]
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010970:	8909      	ldrh	r1, [r1, #8]
 8010972:	440b      	add	r3, r1
 8010974:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010976:	2b00      	cmp	r3, #0
 8010978:	da9a      	bge.n	80108b0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801097a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801097c:	2b00      	cmp	r3, #0
 801097e:	d059      	beq.n	8010a34 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8010980:	4b88      	ldr	r3, [pc, #544]	; (8010ba4 <tcp_receive+0xb08>)
 8010982:	881b      	ldrh	r3, [r3, #0]
 8010984:	461a      	mov	r2, r3
 8010986:	4b88      	ldr	r3, [pc, #544]	; (8010ba8 <tcp_receive+0xb0c>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	441a      	add	r2, r3
 801098c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801098e:	68db      	ldr	r3, [r3, #12]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010994:	2b00      	cmp	r3, #0
 8010996:	dd4d      	ble.n	8010a34 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801099a:	68db      	ldr	r3, [r3, #12]
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	b29a      	uxth	r2, r3
 80109a0:	4b81      	ldr	r3, [pc, #516]	; (8010ba8 <tcp_receive+0xb0c>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	b29b      	uxth	r3, r3
 80109a6:	1ad3      	subs	r3, r2, r3
 80109a8:	b29a      	uxth	r2, r3
 80109aa:	4b80      	ldr	r3, [pc, #512]	; (8010bac <tcp_receive+0xb10>)
 80109ac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80109ae:	4b7f      	ldr	r3, [pc, #508]	; (8010bac <tcp_receive+0xb10>)
 80109b0:	68db      	ldr	r3, [r3, #12]
 80109b2:	899b      	ldrh	r3, [r3, #12]
 80109b4:	b29b      	uxth	r3, r3
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7f7 fe98 	bl	80086ec <lwip_htons>
 80109bc:	4603      	mov	r3, r0
 80109be:	b2db      	uxtb	r3, r3
 80109c0:	f003 0302 	and.w	r3, r3, #2
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d005      	beq.n	80109d4 <tcp_receive+0x938>
                inseg.len -= 1;
 80109c8:	4b78      	ldr	r3, [pc, #480]	; (8010bac <tcp_receive+0xb10>)
 80109ca:	891b      	ldrh	r3, [r3, #8]
 80109cc:	3b01      	subs	r3, #1
 80109ce:	b29a      	uxth	r2, r3
 80109d0:	4b76      	ldr	r3, [pc, #472]	; (8010bac <tcp_receive+0xb10>)
 80109d2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80109d4:	4b75      	ldr	r3, [pc, #468]	; (8010bac <tcp_receive+0xb10>)
 80109d6:	685b      	ldr	r3, [r3, #4]
 80109d8:	4a74      	ldr	r2, [pc, #464]	; (8010bac <tcp_receive+0xb10>)
 80109da:	8912      	ldrh	r2, [r2, #8]
 80109dc:	4611      	mov	r1, r2
 80109de:	4618      	mov	r0, r3
 80109e0:	f7fb fd34 	bl	800c44c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80109e4:	4b71      	ldr	r3, [pc, #452]	; (8010bac <tcp_receive+0xb10>)
 80109e6:	891c      	ldrh	r4, [r3, #8]
 80109e8:	4b70      	ldr	r3, [pc, #448]	; (8010bac <tcp_receive+0xb10>)
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	899b      	ldrh	r3, [r3, #12]
 80109ee:	b29b      	uxth	r3, r3
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7f7 fe7b 	bl	80086ec <lwip_htons>
 80109f6:	4603      	mov	r3, r0
 80109f8:	b2db      	uxtb	r3, r3
 80109fa:	f003 0303 	and.w	r3, r3, #3
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d001      	beq.n	8010a06 <tcp_receive+0x96a>
 8010a02:	2301      	movs	r3, #1
 8010a04:	e000      	b.n	8010a08 <tcp_receive+0x96c>
 8010a06:	2300      	movs	r3, #0
 8010a08:	4423      	add	r3, r4
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	4b65      	ldr	r3, [pc, #404]	; (8010ba4 <tcp_receive+0xb08>)
 8010a0e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010a10:	4b64      	ldr	r3, [pc, #400]	; (8010ba4 <tcp_receive+0xb08>)
 8010a12:	881b      	ldrh	r3, [r3, #0]
 8010a14:	461a      	mov	r2, r3
 8010a16:	4b64      	ldr	r3, [pc, #400]	; (8010ba8 <tcp_receive+0xb0c>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	441a      	add	r2, r3
 8010a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a1e:	68db      	ldr	r3, [r3, #12]
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d006      	beq.n	8010a34 <tcp_receive+0x998>
 8010a26:	4b62      	ldr	r3, [pc, #392]	; (8010bb0 <tcp_receive+0xb14>)
 8010a28:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010a2c:	4961      	ldr	r1, [pc, #388]	; (8010bb4 <tcp_receive+0xb18>)
 8010a2e:	4862      	ldr	r0, [pc, #392]	; (8010bb8 <tcp_receive+0xb1c>)
 8010a30:	f002 ffd0 	bl	80139d4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a38:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010a3a:	4b5a      	ldr	r3, [pc, #360]	; (8010ba4 <tcp_receive+0xb08>)
 8010a3c:	881b      	ldrh	r3, [r3, #0]
 8010a3e:	461a      	mov	r2, r3
 8010a40:	4b59      	ldr	r3, [pc, #356]	; (8010ba8 <tcp_receive+0xb0c>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	441a      	add	r2, r3
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010a4e:	4b55      	ldr	r3, [pc, #340]	; (8010ba4 <tcp_receive+0xb08>)
 8010a50:	881b      	ldrh	r3, [r3, #0]
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d206      	bcs.n	8010a64 <tcp_receive+0x9c8>
 8010a56:	4b56      	ldr	r3, [pc, #344]	; (8010bb0 <tcp_receive+0xb14>)
 8010a58:	f240 6207 	movw	r2, #1543	; 0x607
 8010a5c:	4957      	ldr	r1, [pc, #348]	; (8010bbc <tcp_receive+0xb20>)
 8010a5e:	4856      	ldr	r0, [pc, #344]	; (8010bb8 <tcp_receive+0xb1c>)
 8010a60:	f002 ffb8 	bl	80139d4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010a68:	4b4e      	ldr	r3, [pc, #312]	; (8010ba4 <tcp_receive+0xb08>)
 8010a6a:	881b      	ldrh	r3, [r3, #0]
 8010a6c:	1ad3      	subs	r3, r2, r3
 8010a6e:	b29a      	uxth	r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f7fc fdb7 	bl	800d5e8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010a7a:	4b4c      	ldr	r3, [pc, #304]	; (8010bac <tcp_receive+0xb10>)
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	891b      	ldrh	r3, [r3, #8]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d006      	beq.n	8010a92 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8010a84:	4b49      	ldr	r3, [pc, #292]	; (8010bac <tcp_receive+0xb10>)
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	4a4d      	ldr	r2, [pc, #308]	; (8010bc0 <tcp_receive+0xb24>)
 8010a8a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010a8c:	4b47      	ldr	r3, [pc, #284]	; (8010bac <tcp_receive+0xb10>)
 8010a8e:	2200      	movs	r2, #0
 8010a90:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010a92:	4b46      	ldr	r3, [pc, #280]	; (8010bac <tcp_receive+0xb10>)
 8010a94:	68db      	ldr	r3, [r3, #12]
 8010a96:	899b      	ldrh	r3, [r3, #12]
 8010a98:	b29b      	uxth	r3, r3
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7f7 fe26 	bl	80086ec <lwip_htons>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	f003 0301 	and.w	r3, r3, #1
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	f000 80b8 	beq.w	8010c1e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010aae:	4b45      	ldr	r3, [pc, #276]	; (8010bc4 <tcp_receive+0xb28>)
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	f043 0320 	orr.w	r3, r3, #32
 8010ab6:	b2da      	uxtb	r2, r3
 8010ab8:	4b42      	ldr	r3, [pc, #264]	; (8010bc4 <tcp_receive+0xb28>)
 8010aba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010abc:	e0af      	b.n	8010c1e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ac2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ac8:	68db      	ldr	r3, [r3, #12]
 8010aca:	685b      	ldr	r3, [r3, #4]
 8010acc:	4a36      	ldr	r2, [pc, #216]	; (8010ba8 <tcp_receive+0xb0c>)
 8010ace:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	891b      	ldrh	r3, [r3, #8]
 8010ad4:	461c      	mov	r4, r3
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	68db      	ldr	r3, [r3, #12]
 8010ada:	899b      	ldrh	r3, [r3, #12]
 8010adc:	b29b      	uxth	r3, r3
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7f7 fe04 	bl	80086ec <lwip_htons>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	f003 0303 	and.w	r3, r3, #3
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d001      	beq.n	8010af4 <tcp_receive+0xa58>
 8010af0:	2301      	movs	r3, #1
 8010af2:	e000      	b.n	8010af6 <tcp_receive+0xa5a>
 8010af4:	2300      	movs	r3, #0
 8010af6:	191a      	adds	r2, r3, r4
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010afc:	441a      	add	r2, r3
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b06:	461c      	mov	r4, r3
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	891b      	ldrh	r3, [r3, #8]
 8010b0c:	461d      	mov	r5, r3
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	68db      	ldr	r3, [r3, #12]
 8010b12:	899b      	ldrh	r3, [r3, #12]
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7f7 fde8 	bl	80086ec <lwip_htons>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	b2db      	uxtb	r3, r3
 8010b20:	f003 0303 	and.w	r3, r3, #3
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d001      	beq.n	8010b2c <tcp_receive+0xa90>
 8010b28:	2301      	movs	r3, #1
 8010b2a:	e000      	b.n	8010b2e <tcp_receive+0xa92>
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	442b      	add	r3, r5
 8010b30:	429c      	cmp	r4, r3
 8010b32:	d206      	bcs.n	8010b42 <tcp_receive+0xaa6>
 8010b34:	4b1e      	ldr	r3, [pc, #120]	; (8010bb0 <tcp_receive+0xb14>)
 8010b36:	f240 622b 	movw	r2, #1579	; 0x62b
 8010b3a:	4923      	ldr	r1, [pc, #140]	; (8010bc8 <tcp_receive+0xb2c>)
 8010b3c:	481e      	ldr	r0, [pc, #120]	; (8010bb8 <tcp_receive+0xb1c>)
 8010b3e:	f002 ff49 	bl	80139d4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	891b      	ldrh	r3, [r3, #8]
 8010b46:	461c      	mov	r4, r3
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	68db      	ldr	r3, [r3, #12]
 8010b4c:	899b      	ldrh	r3, [r3, #12]
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7f7 fdcb 	bl	80086ec <lwip_htons>
 8010b56:	4603      	mov	r3, r0
 8010b58:	b2db      	uxtb	r3, r3
 8010b5a:	f003 0303 	and.w	r3, r3, #3
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d001      	beq.n	8010b66 <tcp_receive+0xaca>
 8010b62:	2301      	movs	r3, #1
 8010b64:	e000      	b.n	8010b68 <tcp_receive+0xacc>
 8010b66:	2300      	movs	r3, #0
 8010b68:	1919      	adds	r1, r3, r4
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b6e:	b28b      	uxth	r3, r1
 8010b70:	1ad3      	subs	r3, r2, r3
 8010b72:	b29a      	uxth	r2, r3
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f7fc fd35 	bl	800d5e8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	891b      	ldrh	r3, [r3, #8]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d028      	beq.n	8010bda <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010b88:	4b0d      	ldr	r3, [pc, #52]	; (8010bc0 <tcp_receive+0xb24>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d01d      	beq.n	8010bcc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010b90:	4b0b      	ldr	r3, [pc, #44]	; (8010bc0 <tcp_receive+0xb24>)
 8010b92:	681a      	ldr	r2, [r3, #0]
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	685b      	ldr	r3, [r3, #4]
 8010b98:	4619      	mov	r1, r3
 8010b9a:	4610      	mov	r0, r2
 8010b9c:	f7fb feaa 	bl	800c8f4 <pbuf_cat>
 8010ba0:	e018      	b.n	8010bd4 <tcp_receive+0xb38>
 8010ba2:	bf00      	nop
 8010ba4:	24007482 	.word	0x24007482
 8010ba8:	24007478 	.word	0x24007478
 8010bac:	24007458 	.word	0x24007458
 8010bb0:	08016a60 	.word	0x08016a60
 8010bb4:	08016e7c 	.word	0x08016e7c
 8010bb8:	08016ae8 	.word	0x08016ae8
 8010bbc:	08016eb8 	.word	0x08016eb8
 8010bc0:	24007488 	.word	0x24007488
 8010bc4:	24007485 	.word	0x24007485
 8010bc8:	08016ed8 	.word	0x08016ed8
            } else {
              recv_data = cseg->p;
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	685b      	ldr	r3, [r3, #4]
 8010bd0:	4a70      	ldr	r2, [pc, #448]	; (8010d94 <tcp_receive+0xcf8>)
 8010bd2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	899b      	ldrh	r3, [r3, #12]
 8010be0:	b29b      	uxth	r3, r3
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7f7 fd82 	bl	80086ec <lwip_htons>
 8010be8:	4603      	mov	r3, r0
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	f003 0301 	and.w	r3, r3, #1
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d00d      	beq.n	8010c10 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010bf4:	4b68      	ldr	r3, [pc, #416]	; (8010d98 <tcp_receive+0xcfc>)
 8010bf6:	781b      	ldrb	r3, [r3, #0]
 8010bf8:	f043 0320 	orr.w	r3, r3, #32
 8010bfc:	b2da      	uxtb	r2, r3
 8010bfe:	4b66      	ldr	r3, [pc, #408]	; (8010d98 <tcp_receive+0xcfc>)
 8010c00:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	7d1b      	ldrb	r3, [r3, #20]
 8010c06:	2b04      	cmp	r3, #4
 8010c08:	d102      	bne.n	8010c10 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2207      	movs	r2, #7
 8010c0e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	681a      	ldr	r2, [r3, #0]
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010c18:	68b8      	ldr	r0, [r7, #8]
 8010c1a:	f7fd fb22 	bl	800e262 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d008      	beq.n	8010c38 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c2a:	68db      	ldr	r3, [r3, #12]
 8010c2c:	685a      	ldr	r2, [r3, #4]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010c32:	429a      	cmp	r2, r3
 8010c34:	f43f af43 	beq.w	8010abe <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	8b5b      	ldrh	r3, [r3, #26]
 8010c3c:	f003 0301 	and.w	r3, r3, #1
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d00e      	beq.n	8010c62 <tcp_receive+0xbc6>
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	8b5b      	ldrh	r3, [r3, #26]
 8010c48:	f023 0301 	bic.w	r3, r3, #1
 8010c4c:	b29a      	uxth	r2, r3
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	835a      	strh	r2, [r3, #26]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	8b5b      	ldrh	r3, [r3, #26]
 8010c56:	f043 0302 	orr.w	r3, r3, #2
 8010c5a:	b29a      	uxth	r2, r3
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010c60:	e188      	b.n	8010f74 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	8b5b      	ldrh	r3, [r3, #26]
 8010c66:	f043 0301 	orr.w	r3, r3, #1
 8010c6a:	b29a      	uxth	r2, r3
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010c70:	e180      	b.n	8010f74 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d106      	bne.n	8010c88 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010c7a:	4848      	ldr	r0, [pc, #288]	; (8010d9c <tcp_receive+0xd00>)
 8010c7c:	f7fd fb0a 	bl	800e294 <tcp_seg_copy>
 8010c80:	4602      	mov	r2, r0
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	675a      	str	r2, [r3, #116]	; 0x74
 8010c86:	e16d      	b.n	8010f64 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c92:	e157      	b.n	8010f44 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c96:	68db      	ldr	r3, [r3, #12]
 8010c98:	685a      	ldr	r2, [r3, #4]
 8010c9a:	4b41      	ldr	r3, [pc, #260]	; (8010da0 <tcp_receive+0xd04>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d11d      	bne.n	8010cde <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010ca2:	4b3e      	ldr	r3, [pc, #248]	; (8010d9c <tcp_receive+0xd00>)
 8010ca4:	891a      	ldrh	r2, [r3, #8]
 8010ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca8:	891b      	ldrh	r3, [r3, #8]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	f240 814f 	bls.w	8010f4e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010cb0:	483a      	ldr	r0, [pc, #232]	; (8010d9c <tcp_receive+0xd00>)
 8010cb2:	f7fd faef 	bl	800e294 <tcp_seg_copy>
 8010cb6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	f000 8149 	beq.w	8010f52 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d003      	beq.n	8010cce <tcp_receive+0xc32>
                    prev->next = cseg;
 8010cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cc8:	697a      	ldr	r2, [r7, #20]
 8010cca:	601a      	str	r2, [r3, #0]
 8010ccc:	e002      	b.n	8010cd4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	697a      	ldr	r2, [r7, #20]
 8010cd2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010cd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010cd6:	6978      	ldr	r0, [r7, #20]
 8010cd8:	f7ff f8dc 	bl	800fe94 <tcp_oos_insert_segment>
                }
                break;
 8010cdc:	e139      	b.n	8010f52 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d117      	bne.n	8010d14 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010ce4:	4b2e      	ldr	r3, [pc, #184]	; (8010da0 <tcp_receive+0xd04>)
 8010ce6:	681a      	ldr	r2, [r3, #0]
 8010ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	1ad3      	subs	r3, r2, r3
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	da57      	bge.n	8010da4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010cf4:	4829      	ldr	r0, [pc, #164]	; (8010d9c <tcp_receive+0xd00>)
 8010cf6:	f7fd facd 	bl	800e294 <tcp_seg_copy>
 8010cfa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010cfc:	69bb      	ldr	r3, [r7, #24]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	f000 8129 	beq.w	8010f56 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	69ba      	ldr	r2, [r7, #24]
 8010d08:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010d0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d0c:	69b8      	ldr	r0, [r7, #24]
 8010d0e:	f7ff f8c1 	bl	800fe94 <tcp_oos_insert_segment>
                  }
                  break;
 8010d12:	e120      	b.n	8010f56 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010d14:	4b22      	ldr	r3, [pc, #136]	; (8010da0 <tcp_receive+0xd04>)
 8010d16:	681a      	ldr	r2, [r3, #0]
 8010d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	685b      	ldr	r3, [r3, #4]
 8010d1e:	1ad3      	subs	r3, r2, r3
 8010d20:	3b01      	subs	r3, #1
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	db3e      	blt.n	8010da4 <tcp_receive+0xd08>
 8010d26:	4b1e      	ldr	r3, [pc, #120]	; (8010da0 <tcp_receive+0xd04>)
 8010d28:	681a      	ldr	r2, [r3, #0]
 8010d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d2c:	68db      	ldr	r3, [r3, #12]
 8010d2e:	685b      	ldr	r3, [r3, #4]
 8010d30:	1ad3      	subs	r3, r2, r3
 8010d32:	3301      	adds	r3, #1
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	dc35      	bgt.n	8010da4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010d38:	4818      	ldr	r0, [pc, #96]	; (8010d9c <tcp_receive+0xd00>)
 8010d3a:	f7fd faab 	bl	800e294 <tcp_seg_copy>
 8010d3e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	f000 8109 	beq.w	8010f5a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d4a:	68db      	ldr	r3, [r3, #12]
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d50:	8912      	ldrh	r2, [r2, #8]
 8010d52:	441a      	add	r2, r3
 8010d54:	4b12      	ldr	r3, [pc, #72]	; (8010da0 <tcp_receive+0xd04>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	1ad3      	subs	r3, r2, r3
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	dd12      	ble.n	8010d84 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010d5e:	4b10      	ldr	r3, [pc, #64]	; (8010da0 <tcp_receive+0xd04>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	b29a      	uxth	r2, r3
 8010d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d66:	68db      	ldr	r3, [r3, #12]
 8010d68:	685b      	ldr	r3, [r3, #4]
 8010d6a:	b29b      	uxth	r3, r3
 8010d6c:	1ad3      	subs	r3, r2, r3
 8010d6e:	b29a      	uxth	r2, r3
 8010d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d72:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d76:	685a      	ldr	r2, [r3, #4]
 8010d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d7a:	891b      	ldrh	r3, [r3, #8]
 8010d7c:	4619      	mov	r1, r3
 8010d7e:	4610      	mov	r0, r2
 8010d80:	f7fb fb64 	bl	800c44c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d86:	69fa      	ldr	r2, [r7, #28]
 8010d88:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010d8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d8c:	69f8      	ldr	r0, [r7, #28]
 8010d8e:	f7ff f881 	bl	800fe94 <tcp_oos_insert_segment>
                  }
                  break;
 8010d92:	e0e2      	b.n	8010f5a <tcp_receive+0xebe>
 8010d94:	24007488 	.word	0x24007488
 8010d98:	24007485 	.word	0x24007485
 8010d9c:	24007458 	.word	0x24007458
 8010da0:	24007478 	.word	0x24007478
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	f040 80c6 	bne.w	8010f3e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010db2:	4b80      	ldr	r3, [pc, #512]	; (8010fb4 <tcp_receive+0xf18>)
 8010db4:	681a      	ldr	r2, [r3, #0]
 8010db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db8:	68db      	ldr	r3, [r3, #12]
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	f340 80bd 	ble.w	8010f3e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc6:	68db      	ldr	r3, [r3, #12]
 8010dc8:	899b      	ldrh	r3, [r3, #12]
 8010dca:	b29b      	uxth	r3, r3
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7f7 fc8d 	bl	80086ec <lwip_htons>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	b2db      	uxtb	r3, r3
 8010dd6:	f003 0301 	and.w	r3, r3, #1
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	f040 80bf 	bne.w	8010f5e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010de0:	4875      	ldr	r0, [pc, #468]	; (8010fb8 <tcp_receive+0xf1c>)
 8010de2:	f7fd fa57 	bl	800e294 <tcp_seg_copy>
 8010de6:	4602      	mov	r2, r0
 8010de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	f000 80b6 	beq.w	8010f62 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df8:	68db      	ldr	r3, [r3, #12]
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010dfe:	8912      	ldrh	r2, [r2, #8]
 8010e00:	441a      	add	r2, r3
 8010e02:	4b6c      	ldr	r3, [pc, #432]	; (8010fb4 <tcp_receive+0xf18>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	1ad3      	subs	r3, r2, r3
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	dd12      	ble.n	8010e32 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010e0c:	4b69      	ldr	r3, [pc, #420]	; (8010fb4 <tcp_receive+0xf18>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	b29a      	uxth	r2, r3
 8010e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e14:	68db      	ldr	r3, [r3, #12]
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	1ad3      	subs	r3, r2, r3
 8010e1c:	b29a      	uxth	r2, r3
 8010e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e20:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e24:	685a      	ldr	r2, [r3, #4]
 8010e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e28:	891b      	ldrh	r3, [r3, #8]
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	4610      	mov	r0, r2
 8010e2e:	f7fb fb0d 	bl	800c44c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010e32:	4b62      	ldr	r3, [pc, #392]	; (8010fbc <tcp_receive+0xf20>)
 8010e34:	881b      	ldrh	r3, [r3, #0]
 8010e36:	461a      	mov	r2, r3
 8010e38:	4b5e      	ldr	r3, [pc, #376]	; (8010fb4 <tcp_receive+0xf18>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	441a      	add	r2, r3
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e42:	6879      	ldr	r1, [r7, #4]
 8010e44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010e46:	440b      	add	r3, r1
 8010e48:	1ad3      	subs	r3, r2, r3
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	f340 8089 	ble.w	8010f62 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	68db      	ldr	r3, [r3, #12]
 8010e56:	899b      	ldrh	r3, [r3, #12]
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7f7 fc46 	bl	80086ec <lwip_htons>
 8010e60:	4603      	mov	r3, r0
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	f003 0301 	and.w	r3, r3, #1
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d022      	beq.n	8010eb2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	899b      	ldrh	r3, [r3, #12]
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	b21b      	sxth	r3, r3
 8010e78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010e7c:	b21c      	sxth	r4, r3
 8010e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	68db      	ldr	r3, [r3, #12]
 8010e84:	899b      	ldrh	r3, [r3, #12]
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7f7 fc2f 	bl	80086ec <lwip_htons>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	b2db      	uxtb	r3, r3
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010e98:	b29b      	uxth	r3, r3
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7f7 fc26 	bl	80086ec <lwip_htons>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	b21b      	sxth	r3, r3
 8010ea4:	4323      	orrs	r3, r4
 8010ea6:	b21a      	sxth	r2, r3
 8010ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	68db      	ldr	r3, [r3, #12]
 8010eae:	b292      	uxth	r2, r2
 8010eb0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eb6:	b29a      	uxth	r2, r3
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ebc:	4413      	add	r3, r2
 8010ebe:	b299      	uxth	r1, r3
 8010ec0:	4b3c      	ldr	r3, [pc, #240]	; (8010fb4 <tcp_receive+0xf18>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	b29a      	uxth	r2, r3
 8010ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	1a8a      	subs	r2, r1, r2
 8010ecc:	b292      	uxth	r2, r2
 8010ece:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	685a      	ldr	r2, [r3, #4]
 8010ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	891b      	ldrh	r3, [r3, #8]
 8010edc:	4619      	mov	r1, r3
 8010ede:	4610      	mov	r0, r2
 8010ee0:	f7fb fab4 	bl	800c44c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	891c      	ldrh	r4, [r3, #8]
 8010eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	68db      	ldr	r3, [r3, #12]
 8010ef0:	899b      	ldrh	r3, [r3, #12]
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7f7 fbf9 	bl	80086ec <lwip_htons>
 8010efa:	4603      	mov	r3, r0
 8010efc:	b2db      	uxtb	r3, r3
 8010efe:	f003 0303 	and.w	r3, r3, #3
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d001      	beq.n	8010f0a <tcp_receive+0xe6e>
 8010f06:	2301      	movs	r3, #1
 8010f08:	e000      	b.n	8010f0c <tcp_receive+0xe70>
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	4423      	add	r3, r4
 8010f0e:	b29a      	uxth	r2, r3
 8010f10:	4b2a      	ldr	r3, [pc, #168]	; (8010fbc <tcp_receive+0xf20>)
 8010f12:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010f14:	4b29      	ldr	r3, [pc, #164]	; (8010fbc <tcp_receive+0xf20>)
 8010f16:	881b      	ldrh	r3, [r3, #0]
 8010f18:	461a      	mov	r2, r3
 8010f1a:	4b26      	ldr	r3, [pc, #152]	; (8010fb4 <tcp_receive+0xf18>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	441a      	add	r2, r3
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f24:	6879      	ldr	r1, [r7, #4]
 8010f26:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f28:	440b      	add	r3, r1
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d019      	beq.n	8010f62 <tcp_receive+0xec6>
 8010f2e:	4b24      	ldr	r3, [pc, #144]	; (8010fc0 <tcp_receive+0xf24>)
 8010f30:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010f34:	4923      	ldr	r1, [pc, #140]	; (8010fc4 <tcp_receive+0xf28>)
 8010f36:	4824      	ldr	r0, [pc, #144]	; (8010fc8 <tcp_receive+0xf2c>)
 8010f38:	f002 fd4c 	bl	80139d4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010f3c:	e011      	b.n	8010f62 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	f47f aea4 	bne.w	8010c94 <tcp_receive+0xbf8>
 8010f4c:	e00a      	b.n	8010f64 <tcp_receive+0xec8>
                break;
 8010f4e:	bf00      	nop
 8010f50:	e008      	b.n	8010f64 <tcp_receive+0xec8>
                break;
 8010f52:	bf00      	nop
 8010f54:	e006      	b.n	8010f64 <tcp_receive+0xec8>
                  break;
 8010f56:	bf00      	nop
 8010f58:	e004      	b.n	8010f64 <tcp_receive+0xec8>
                  break;
 8010f5a:	bf00      	nop
 8010f5c:	e002      	b.n	8010f64 <tcp_receive+0xec8>
                  break;
 8010f5e:	bf00      	nop
 8010f60:	e000      	b.n	8010f64 <tcp_receive+0xec8>
                break;
 8010f62:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f001 fe8b 	bl	8012c80 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010f6a:	e003      	b.n	8010f74 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f001 fe87 	bl	8012c80 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010f72:	e01a      	b.n	8010faa <tcp_receive+0xf0e>
 8010f74:	e019      	b.n	8010faa <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010f76:	4b0f      	ldr	r3, [pc, #60]	; (8010fb4 <tcp_receive+0xf18>)
 8010f78:	681a      	ldr	r2, [r3, #0]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f7e:	1ad3      	subs	r3, r2, r3
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	db0a      	blt.n	8010f9a <tcp_receive+0xefe>
 8010f84:	4b0b      	ldr	r3, [pc, #44]	; (8010fb4 <tcp_receive+0xf18>)
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f8c:	6879      	ldr	r1, [r7, #4]
 8010f8e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f90:	440b      	add	r3, r1
 8010f92:	1ad3      	subs	r3, r2, r3
 8010f94:	3301      	adds	r3, #1
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	dd07      	ble.n	8010faa <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	8b5b      	ldrh	r3, [r3, #26]
 8010f9e:	f043 0302 	orr.w	r3, r3, #2
 8010fa2:	b29a      	uxth	r2, r3
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010fa8:	e7ff      	b.n	8010faa <tcp_receive+0xf0e>
 8010faa:	bf00      	nop
 8010fac:	3750      	adds	r7, #80	; 0x50
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8010fb2:	bf00      	nop
 8010fb4:	24007478 	.word	0x24007478
 8010fb8:	24007458 	.word	0x24007458
 8010fbc:	24007482 	.word	0x24007482
 8010fc0:	08016a60 	.word	0x08016a60
 8010fc4:	08016e44 	.word	0x08016e44
 8010fc8:	08016ae8 	.word	0x08016ae8

08010fcc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b083      	sub	sp, #12
 8010fd0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010fd2:	4b15      	ldr	r3, [pc, #84]	; (8011028 <tcp_get_next_optbyte+0x5c>)
 8010fd4:	881b      	ldrh	r3, [r3, #0]
 8010fd6:	1c5a      	adds	r2, r3, #1
 8010fd8:	b291      	uxth	r1, r2
 8010fda:	4a13      	ldr	r2, [pc, #76]	; (8011028 <tcp_get_next_optbyte+0x5c>)
 8010fdc:	8011      	strh	r1, [r2, #0]
 8010fde:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010fe0:	4b12      	ldr	r3, [pc, #72]	; (801102c <tcp_get_next_optbyte+0x60>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d004      	beq.n	8010ff2 <tcp_get_next_optbyte+0x26>
 8010fe8:	4b11      	ldr	r3, [pc, #68]	; (8011030 <tcp_get_next_optbyte+0x64>)
 8010fea:	881b      	ldrh	r3, [r3, #0]
 8010fec:	88fa      	ldrh	r2, [r7, #6]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d208      	bcs.n	8011004 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010ff2:	4b10      	ldr	r3, [pc, #64]	; (8011034 <tcp_get_next_optbyte+0x68>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	3314      	adds	r3, #20
 8010ff8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010ffa:	88fb      	ldrh	r3, [r7, #6]
 8010ffc:	683a      	ldr	r2, [r7, #0]
 8010ffe:	4413      	add	r3, r2
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	e00b      	b.n	801101c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011004:	88fb      	ldrh	r3, [r7, #6]
 8011006:	b2da      	uxtb	r2, r3
 8011008:	4b09      	ldr	r3, [pc, #36]	; (8011030 <tcp_get_next_optbyte+0x64>)
 801100a:	881b      	ldrh	r3, [r3, #0]
 801100c:	b2db      	uxtb	r3, r3
 801100e:	1ad3      	subs	r3, r2, r3
 8011010:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011012:	4b06      	ldr	r3, [pc, #24]	; (801102c <tcp_get_next_optbyte+0x60>)
 8011014:	681a      	ldr	r2, [r3, #0]
 8011016:	797b      	ldrb	r3, [r7, #5]
 8011018:	4413      	add	r3, r2
 801101a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801101c:	4618      	mov	r0, r3
 801101e:	370c      	adds	r7, #12
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr
 8011028:	24007474 	.word	0x24007474
 801102c:	24007470 	.word	0x24007470
 8011030:	2400746e 	.word	0x2400746e
 8011034:	24007468 	.word	0x24007468

08011038 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b084      	sub	sp, #16
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d106      	bne.n	8011054 <tcp_parseopt+0x1c>
 8011046:	4b32      	ldr	r3, [pc, #200]	; (8011110 <tcp_parseopt+0xd8>)
 8011048:	f240 727d 	movw	r2, #1917	; 0x77d
 801104c:	4931      	ldr	r1, [pc, #196]	; (8011114 <tcp_parseopt+0xdc>)
 801104e:	4832      	ldr	r0, [pc, #200]	; (8011118 <tcp_parseopt+0xe0>)
 8011050:	f002 fcc0 	bl	80139d4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011054:	4b31      	ldr	r3, [pc, #196]	; (801111c <tcp_parseopt+0xe4>)
 8011056:	881b      	ldrh	r3, [r3, #0]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d055      	beq.n	8011108 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801105c:	4b30      	ldr	r3, [pc, #192]	; (8011120 <tcp_parseopt+0xe8>)
 801105e:	2200      	movs	r2, #0
 8011060:	801a      	strh	r2, [r3, #0]
 8011062:	e045      	b.n	80110f0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011064:	f7ff ffb2 	bl	8010fcc <tcp_get_next_optbyte>
 8011068:	4603      	mov	r3, r0
 801106a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801106c:	7bfb      	ldrb	r3, [r7, #15]
 801106e:	2b02      	cmp	r3, #2
 8011070:	d006      	beq.n	8011080 <tcp_parseopt+0x48>
 8011072:	2b02      	cmp	r3, #2
 8011074:	dc2b      	bgt.n	80110ce <tcp_parseopt+0x96>
 8011076:	2b00      	cmp	r3, #0
 8011078:	d041      	beq.n	80110fe <tcp_parseopt+0xc6>
 801107a:	2b01      	cmp	r3, #1
 801107c:	d127      	bne.n	80110ce <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801107e:	e037      	b.n	80110f0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011080:	f7ff ffa4 	bl	8010fcc <tcp_get_next_optbyte>
 8011084:	4603      	mov	r3, r0
 8011086:	2b04      	cmp	r3, #4
 8011088:	d13b      	bne.n	8011102 <tcp_parseopt+0xca>
 801108a:	4b25      	ldr	r3, [pc, #148]	; (8011120 <tcp_parseopt+0xe8>)
 801108c:	881b      	ldrh	r3, [r3, #0]
 801108e:	3301      	adds	r3, #1
 8011090:	4a22      	ldr	r2, [pc, #136]	; (801111c <tcp_parseopt+0xe4>)
 8011092:	8812      	ldrh	r2, [r2, #0]
 8011094:	4293      	cmp	r3, r2
 8011096:	da34      	bge.n	8011102 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011098:	f7ff ff98 	bl	8010fcc <tcp_get_next_optbyte>
 801109c:	4603      	mov	r3, r0
 801109e:	b29b      	uxth	r3, r3
 80110a0:	021b      	lsls	r3, r3, #8
 80110a2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80110a4:	f7ff ff92 	bl	8010fcc <tcp_get_next_optbyte>
 80110a8:	4603      	mov	r3, r0
 80110aa:	b29a      	uxth	r2, r3
 80110ac:	89bb      	ldrh	r3, [r7, #12]
 80110ae:	4313      	orrs	r3, r2
 80110b0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80110b2:	89bb      	ldrh	r3, [r7, #12]
 80110b4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80110b8:	d804      	bhi.n	80110c4 <tcp_parseopt+0x8c>
 80110ba:	89bb      	ldrh	r3, [r7, #12]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d001      	beq.n	80110c4 <tcp_parseopt+0x8c>
 80110c0:	89ba      	ldrh	r2, [r7, #12]
 80110c2:	e001      	b.n	80110c8 <tcp_parseopt+0x90>
 80110c4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80110cc:	e010      	b.n	80110f0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80110ce:	f7ff ff7d 	bl	8010fcc <tcp_get_next_optbyte>
 80110d2:	4603      	mov	r3, r0
 80110d4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80110d6:	7afb      	ldrb	r3, [r7, #11]
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d914      	bls.n	8011106 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80110dc:	7afb      	ldrb	r3, [r7, #11]
 80110de:	b29a      	uxth	r2, r3
 80110e0:	4b0f      	ldr	r3, [pc, #60]	; (8011120 <tcp_parseopt+0xe8>)
 80110e2:	881b      	ldrh	r3, [r3, #0]
 80110e4:	4413      	add	r3, r2
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	3b02      	subs	r3, #2
 80110ea:	b29a      	uxth	r2, r3
 80110ec:	4b0c      	ldr	r3, [pc, #48]	; (8011120 <tcp_parseopt+0xe8>)
 80110ee:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80110f0:	4b0b      	ldr	r3, [pc, #44]	; (8011120 <tcp_parseopt+0xe8>)
 80110f2:	881a      	ldrh	r2, [r3, #0]
 80110f4:	4b09      	ldr	r3, [pc, #36]	; (801111c <tcp_parseopt+0xe4>)
 80110f6:	881b      	ldrh	r3, [r3, #0]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d3b3      	bcc.n	8011064 <tcp_parseopt+0x2c>
 80110fc:	e004      	b.n	8011108 <tcp_parseopt+0xd0>
          return;
 80110fe:	bf00      	nop
 8011100:	e002      	b.n	8011108 <tcp_parseopt+0xd0>
            return;
 8011102:	bf00      	nop
 8011104:	e000      	b.n	8011108 <tcp_parseopt+0xd0>
            return;
 8011106:	bf00      	nop
      }
    }
  }
}
 8011108:	3710      	adds	r7, #16
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	08016a60 	.word	0x08016a60
 8011114:	08016f00 	.word	0x08016f00
 8011118:	08016ae8 	.word	0x08016ae8
 801111c:	2400746c 	.word	0x2400746c
 8011120:	24007474 	.word	0x24007474

08011124 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011124:	b480      	push	{r7}
 8011126:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011128:	4b05      	ldr	r3, [pc, #20]	; (8011140 <tcp_trigger_input_pcb_close+0x1c>)
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	f043 0310 	orr.w	r3, r3, #16
 8011130:	b2da      	uxtb	r2, r3
 8011132:	4b03      	ldr	r3, [pc, #12]	; (8011140 <tcp_trigger_input_pcb_close+0x1c>)
 8011134:	701a      	strb	r2, [r3, #0]
}
 8011136:	bf00      	nop
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr
 8011140:	24007485 	.word	0x24007485

08011144 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	60b9      	str	r1, [r7, #8]
 801114e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d00a      	beq.n	801116c <tcp_route+0x28>
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	7a1b      	ldrb	r3, [r3, #8]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d006      	beq.n	801116c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	7a1b      	ldrb	r3, [r3, #8]
 8011162:	4618      	mov	r0, r3
 8011164:	f7fa ff6a 	bl	800c03c <netif_get_by_index>
 8011168:	4603      	mov	r3, r0
 801116a:	e003      	b.n	8011174 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f7f8 fd95 	bl	8009c9c <ip4_route>
 8011172:	4603      	mov	r3, r0
  }
}
 8011174:	4618      	mov	r0, r3
 8011176:	3710      	adds	r7, #16
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801117c:	b590      	push	{r4, r7, lr}
 801117e:	b087      	sub	sp, #28
 8011180:	af00      	add	r7, sp, #0
 8011182:	60f8      	str	r0, [r7, #12]
 8011184:	60b9      	str	r1, [r7, #8]
 8011186:	603b      	str	r3, [r7, #0]
 8011188:	4613      	mov	r3, r2
 801118a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d105      	bne.n	801119e <tcp_create_segment+0x22>
 8011192:	4b44      	ldr	r3, [pc, #272]	; (80112a4 <tcp_create_segment+0x128>)
 8011194:	22a3      	movs	r2, #163	; 0xa3
 8011196:	4944      	ldr	r1, [pc, #272]	; (80112a8 <tcp_create_segment+0x12c>)
 8011198:	4844      	ldr	r0, [pc, #272]	; (80112ac <tcp_create_segment+0x130>)
 801119a:	f002 fc1b 	bl	80139d4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801119e:	68bb      	ldr	r3, [r7, #8]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d105      	bne.n	80111b0 <tcp_create_segment+0x34>
 80111a4:	4b3f      	ldr	r3, [pc, #252]	; (80112a4 <tcp_create_segment+0x128>)
 80111a6:	22a4      	movs	r2, #164	; 0xa4
 80111a8:	4941      	ldr	r1, [pc, #260]	; (80112b0 <tcp_create_segment+0x134>)
 80111aa:	4840      	ldr	r0, [pc, #256]	; (80112ac <tcp_create_segment+0x130>)
 80111ac:	f002 fc12 	bl	80139d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80111b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80111b4:	009b      	lsls	r3, r3, #2
 80111b6:	b2db      	uxtb	r3, r3
 80111b8:	f003 0304 	and.w	r3, r3, #4
 80111bc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80111be:	2003      	movs	r0, #3
 80111c0:	f7fa fbb0 	bl	800b924 <memp_malloc>
 80111c4:	6138      	str	r0, [r7, #16]
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d104      	bne.n	80111d6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80111cc:	68b8      	ldr	r0, [r7, #8]
 80111ce:	f7fb fac3 	bl	800c758 <pbuf_free>
    return NULL;
 80111d2:	2300      	movs	r3, #0
 80111d4:	e061      	b.n	801129a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80111dc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	2200      	movs	r2, #0
 80111e2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	68ba      	ldr	r2, [r7, #8]
 80111e8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	891a      	ldrh	r2, [r3, #8]
 80111ee:	7dfb      	ldrb	r3, [r7, #23]
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d205      	bcs.n	8011202 <tcp_create_segment+0x86>
 80111f6:	4b2b      	ldr	r3, [pc, #172]	; (80112a4 <tcp_create_segment+0x128>)
 80111f8:	22b0      	movs	r2, #176	; 0xb0
 80111fa:	492e      	ldr	r1, [pc, #184]	; (80112b4 <tcp_create_segment+0x138>)
 80111fc:	482b      	ldr	r0, [pc, #172]	; (80112ac <tcp_create_segment+0x130>)
 80111fe:	f002 fbe9 	bl	80139d4 <iprintf>
  seg->len = p->tot_len - optlen;
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	891a      	ldrh	r2, [r3, #8]
 8011206:	7dfb      	ldrb	r3, [r7, #23]
 8011208:	b29b      	uxth	r3, r3
 801120a:	1ad3      	subs	r3, r2, r3
 801120c:	b29a      	uxth	r2, r3
 801120e:	693b      	ldr	r3, [r7, #16]
 8011210:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011212:	2114      	movs	r1, #20
 8011214:	68b8      	ldr	r0, [r7, #8]
 8011216:	f7fb fa09 	bl	800c62c <pbuf_add_header>
 801121a:	4603      	mov	r3, r0
 801121c:	2b00      	cmp	r3, #0
 801121e:	d004      	beq.n	801122a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011220:	6938      	ldr	r0, [r7, #16]
 8011222:	f7fd f81e 	bl	800e262 <tcp_seg_free>
    return NULL;
 8011226:	2300      	movs	r3, #0
 8011228:	e037      	b.n	801129a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801122a:	693b      	ldr	r3, [r7, #16]
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	685a      	ldr	r2, [r3, #4]
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	8ada      	ldrh	r2, [r3, #22]
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	68dc      	ldr	r4, [r3, #12]
 801123c:	4610      	mov	r0, r2
 801123e:	f7f7 fa55 	bl	80086ec <lwip_htons>
 8011242:	4603      	mov	r3, r0
 8011244:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	8b1a      	ldrh	r2, [r3, #24]
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	68dc      	ldr	r4, [r3, #12]
 801124e:	4610      	mov	r0, r2
 8011250:	f7f7 fa4c 	bl	80086ec <lwip_htons>
 8011254:	4603      	mov	r3, r0
 8011256:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	68dc      	ldr	r4, [r3, #12]
 801125c:	6838      	ldr	r0, [r7, #0]
 801125e:	f7f7 fa5a 	bl	8008716 <lwip_htonl>
 8011262:	4603      	mov	r3, r0
 8011264:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011266:	7dfb      	ldrb	r3, [r7, #23]
 8011268:	089b      	lsrs	r3, r3, #2
 801126a:	b2db      	uxtb	r3, r3
 801126c:	b29b      	uxth	r3, r3
 801126e:	3305      	adds	r3, #5
 8011270:	b29b      	uxth	r3, r3
 8011272:	031b      	lsls	r3, r3, #12
 8011274:	b29a      	uxth	r2, r3
 8011276:	79fb      	ldrb	r3, [r7, #7]
 8011278:	b29b      	uxth	r3, r3
 801127a:	4313      	orrs	r3, r2
 801127c:	b29a      	uxth	r2, r3
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	68dc      	ldr	r4, [r3, #12]
 8011282:	4610      	mov	r0, r2
 8011284:	f7f7 fa32 	bl	80086ec <lwip_htons>
 8011288:	4603      	mov	r3, r0
 801128a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801128c:	693b      	ldr	r3, [r7, #16]
 801128e:	68db      	ldr	r3, [r3, #12]
 8011290:	2200      	movs	r2, #0
 8011292:	749a      	strb	r2, [r3, #18]
 8011294:	2200      	movs	r2, #0
 8011296:	74da      	strb	r2, [r3, #19]
  return seg;
 8011298:	693b      	ldr	r3, [r7, #16]
}
 801129a:	4618      	mov	r0, r3
 801129c:	371c      	adds	r7, #28
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd90      	pop	{r4, r7, pc}
 80112a2:	bf00      	nop
 80112a4:	08016f1c 	.word	0x08016f1c
 80112a8:	08016f8c 	.word	0x08016f8c
 80112ac:	08016fac 	.word	0x08016fac
 80112b0:	08016fd4 	.word	0x08016fd4
 80112b4:	08016ff8 	.word	0x08016ff8

080112b8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b086      	sub	sp, #24
 80112bc:	af00      	add	r7, sp, #0
 80112be:	607b      	str	r3, [r7, #4]
 80112c0:	4603      	mov	r3, r0
 80112c2:	73fb      	strb	r3, [r7, #15]
 80112c4:	460b      	mov	r3, r1
 80112c6:	81bb      	strh	r3, [r7, #12]
 80112c8:	4613      	mov	r3, r2
 80112ca:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80112cc:	89bb      	ldrh	r3, [r7, #12]
 80112ce:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d105      	bne.n	80112e2 <tcp_pbuf_prealloc+0x2a>
 80112d6:	4b30      	ldr	r3, [pc, #192]	; (8011398 <tcp_pbuf_prealloc+0xe0>)
 80112d8:	22e8      	movs	r2, #232	; 0xe8
 80112da:	4930      	ldr	r1, [pc, #192]	; (801139c <tcp_pbuf_prealloc+0xe4>)
 80112dc:	4830      	ldr	r0, [pc, #192]	; (80113a0 <tcp_pbuf_prealloc+0xe8>)
 80112de:	f002 fb79 	bl	80139d4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80112e2:	6a3b      	ldr	r3, [r7, #32]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d105      	bne.n	80112f4 <tcp_pbuf_prealloc+0x3c>
 80112e8:	4b2b      	ldr	r3, [pc, #172]	; (8011398 <tcp_pbuf_prealloc+0xe0>)
 80112ea:	22e9      	movs	r2, #233	; 0xe9
 80112ec:	492d      	ldr	r1, [pc, #180]	; (80113a4 <tcp_pbuf_prealloc+0xec>)
 80112ee:	482c      	ldr	r0, [pc, #176]	; (80113a0 <tcp_pbuf_prealloc+0xe8>)
 80112f0:	f002 fb70 	bl	80139d4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80112f4:	89ba      	ldrh	r2, [r7, #12]
 80112f6:	897b      	ldrh	r3, [r7, #10]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d221      	bcs.n	8011340 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80112fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011300:	f003 0302 	and.w	r3, r3, #2
 8011304:	2b00      	cmp	r3, #0
 8011306:	d111      	bne.n	801132c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011308:	6a3b      	ldr	r3, [r7, #32]
 801130a:	8b5b      	ldrh	r3, [r3, #26]
 801130c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011310:	2b00      	cmp	r3, #0
 8011312:	d115      	bne.n	8011340 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011314:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011318:	2b00      	cmp	r3, #0
 801131a:	d007      	beq.n	801132c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801131c:	6a3b      	ldr	r3, [r7, #32]
 801131e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011320:	2b00      	cmp	r3, #0
 8011322:	d103      	bne.n	801132c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011324:	6a3b      	ldr	r3, [r7, #32]
 8011326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011328:	2b00      	cmp	r3, #0
 801132a:	d009      	beq.n	8011340 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801132c:	89bb      	ldrh	r3, [r7, #12]
 801132e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011332:	f023 0203 	bic.w	r2, r3, #3
 8011336:	897b      	ldrh	r3, [r7, #10]
 8011338:	4293      	cmp	r3, r2
 801133a:	bf28      	it	cs
 801133c:	4613      	movcs	r3, r2
 801133e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011340:	8af9      	ldrh	r1, [r7, #22]
 8011342:	7bfb      	ldrb	r3, [r7, #15]
 8011344:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011348:	4618      	mov	r0, r3
 801134a:	f7fa ff21 	bl	800c190 <pbuf_alloc>
 801134e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d101      	bne.n	801135a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011356:	2300      	movs	r3, #0
 8011358:	e019      	b.n	801138e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d006      	beq.n	8011370 <tcp_pbuf_prealloc+0xb8>
 8011362:	4b0d      	ldr	r3, [pc, #52]	; (8011398 <tcp_pbuf_prealloc+0xe0>)
 8011364:	f240 120b 	movw	r2, #267	; 0x10b
 8011368:	490f      	ldr	r1, [pc, #60]	; (80113a8 <tcp_pbuf_prealloc+0xf0>)
 801136a:	480d      	ldr	r0, [pc, #52]	; (80113a0 <tcp_pbuf_prealloc+0xe8>)
 801136c:	f002 fb32 	bl	80139d4 <iprintf>
  *oversize = p->len - length;
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	895a      	ldrh	r2, [r3, #10]
 8011374:	89bb      	ldrh	r3, [r7, #12]
 8011376:	1ad3      	subs	r3, r2, r3
 8011378:	b29a      	uxth	r2, r3
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	89ba      	ldrh	r2, [r7, #12]
 8011382:	811a      	strh	r2, [r3, #8]
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	891a      	ldrh	r2, [r3, #8]
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	815a      	strh	r2, [r3, #10]
  return p;
 801138c:	693b      	ldr	r3, [r7, #16]
}
 801138e:	4618      	mov	r0, r3
 8011390:	3718      	adds	r7, #24
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}
 8011396:	bf00      	nop
 8011398:	08016f1c 	.word	0x08016f1c
 801139c:	08017010 	.word	0x08017010
 80113a0:	08016fac 	.word	0x08016fac
 80113a4:	08017034 	.word	0x08017034
 80113a8:	08017054 	.word	0x08017054

080113ac <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	460b      	mov	r3, r1
 80113b6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d106      	bne.n	80113cc <tcp_write_checks+0x20>
 80113be:	4b33      	ldr	r3, [pc, #204]	; (801148c <tcp_write_checks+0xe0>)
 80113c0:	f240 1233 	movw	r2, #307	; 0x133
 80113c4:	4932      	ldr	r1, [pc, #200]	; (8011490 <tcp_write_checks+0xe4>)
 80113c6:	4833      	ldr	r0, [pc, #204]	; (8011494 <tcp_write_checks+0xe8>)
 80113c8:	f002 fb04 	bl	80139d4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	7d1b      	ldrb	r3, [r3, #20]
 80113d0:	2b04      	cmp	r3, #4
 80113d2:	d00e      	beq.n	80113f2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80113d8:	2b07      	cmp	r3, #7
 80113da:	d00a      	beq.n	80113f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80113e0:	2b02      	cmp	r3, #2
 80113e2:	d006      	beq.n	80113f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80113e8:	2b03      	cmp	r3, #3
 80113ea:	d002      	beq.n	80113f2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80113ec:	f06f 030a 	mvn.w	r3, #10
 80113f0:	e048      	b.n	8011484 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80113f2:	887b      	ldrh	r3, [r7, #2]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d101      	bne.n	80113fc <tcp_write_checks+0x50>
    return ERR_OK;
 80113f8:	2300      	movs	r3, #0
 80113fa:	e043      	b.n	8011484 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011402:	887a      	ldrh	r2, [r7, #2]
 8011404:	429a      	cmp	r2, r3
 8011406:	d909      	bls.n	801141c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	8b5b      	ldrh	r3, [r3, #26]
 801140c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011410:	b29a      	uxth	r2, r3
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011416:	f04f 33ff 	mov.w	r3, #4294967295
 801141a:	e033      	b.n	8011484 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011422:	2b08      	cmp	r3, #8
 8011424:	d909      	bls.n	801143a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	8b5b      	ldrh	r3, [r3, #26]
 801142a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801142e:	b29a      	uxth	r2, r3
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011434:	f04f 33ff 	mov.w	r3, #4294967295
 8011438:	e024      	b.n	8011484 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011440:	2b00      	cmp	r3, #0
 8011442:	d00f      	beq.n	8011464 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011448:	2b00      	cmp	r3, #0
 801144a:	d11a      	bne.n	8011482 <tcp_write_checks+0xd6>
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011450:	2b00      	cmp	r3, #0
 8011452:	d116      	bne.n	8011482 <tcp_write_checks+0xd6>
 8011454:	4b0d      	ldr	r3, [pc, #52]	; (801148c <tcp_write_checks+0xe0>)
 8011456:	f240 1255 	movw	r2, #341	; 0x155
 801145a:	490f      	ldr	r1, [pc, #60]	; (8011498 <tcp_write_checks+0xec>)
 801145c:	480d      	ldr	r0, [pc, #52]	; (8011494 <tcp_write_checks+0xe8>)
 801145e:	f002 fab9 	bl	80139d4 <iprintf>
 8011462:	e00e      	b.n	8011482 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011468:	2b00      	cmp	r3, #0
 801146a:	d103      	bne.n	8011474 <tcp_write_checks+0xc8>
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011470:	2b00      	cmp	r3, #0
 8011472:	d006      	beq.n	8011482 <tcp_write_checks+0xd6>
 8011474:	4b05      	ldr	r3, [pc, #20]	; (801148c <tcp_write_checks+0xe0>)
 8011476:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801147a:	4908      	ldr	r1, [pc, #32]	; (801149c <tcp_write_checks+0xf0>)
 801147c:	4805      	ldr	r0, [pc, #20]	; (8011494 <tcp_write_checks+0xe8>)
 801147e:	f002 faa9 	bl	80139d4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011482:	2300      	movs	r3, #0
}
 8011484:	4618      	mov	r0, r3
 8011486:	3708      	adds	r7, #8
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}
 801148c:	08016f1c 	.word	0x08016f1c
 8011490:	08017068 	.word	0x08017068
 8011494:	08016fac 	.word	0x08016fac
 8011498:	08017088 	.word	0x08017088
 801149c:	080170c4 	.word	0x080170c4

080114a0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80114a0:	b590      	push	{r4, r7, lr}
 80114a2:	b09b      	sub	sp, #108	; 0x6c
 80114a4:	af04      	add	r7, sp, #16
 80114a6:	60f8      	str	r0, [r7, #12]
 80114a8:	60b9      	str	r1, [r7, #8]
 80114aa:	4611      	mov	r1, r2
 80114ac:	461a      	mov	r2, r3
 80114ae:	460b      	mov	r3, r1
 80114b0:	80fb      	strh	r3, [r7, #6]
 80114b2:	4613      	mov	r3, r2
 80114b4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80114b6:	2300      	movs	r3, #0
 80114b8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80114ba:	2300      	movs	r3, #0
 80114bc:	653b      	str	r3, [r7, #80]	; 0x50
 80114be:	2300      	movs	r3, #0
 80114c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80114c2:	2300      	movs	r3, #0
 80114c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80114c6:	2300      	movs	r3, #0
 80114c8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80114ca:	2300      	movs	r3, #0
 80114cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80114d0:	2300      	movs	r3, #0
 80114d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80114d6:	2300      	movs	r3, #0
 80114d8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80114da:	2300      	movs	r3, #0
 80114dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80114de:	2300      	movs	r3, #0
 80114e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d109      	bne.n	80114fc <tcp_write+0x5c>
 80114e8:	4ba4      	ldr	r3, [pc, #656]	; (801177c <tcp_write+0x2dc>)
 80114ea:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80114ee:	49a4      	ldr	r1, [pc, #656]	; (8011780 <tcp_write+0x2e0>)
 80114f0:	48a4      	ldr	r0, [pc, #656]	; (8011784 <tcp_write+0x2e4>)
 80114f2:	f002 fa6f 	bl	80139d4 <iprintf>
 80114f6:	f06f 030f 	mvn.w	r3, #15
 80114fa:	e32a      	b.n	8011b52 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011502:	085b      	lsrs	r3, r3, #1
 8011504:	b29a      	uxth	r2, r3
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801150a:	4293      	cmp	r3, r2
 801150c:	bf28      	it	cs
 801150e:	4613      	movcs	r3, r2
 8011510:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011514:	2b00      	cmp	r3, #0
 8011516:	d102      	bne.n	801151e <tcp_write+0x7e>
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801151c:	e000      	b.n	8011520 <tcp_write+0x80>
 801151e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011520:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d109      	bne.n	801153c <tcp_write+0x9c>
 8011528:	4b94      	ldr	r3, [pc, #592]	; (801177c <tcp_write+0x2dc>)
 801152a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801152e:	4996      	ldr	r1, [pc, #600]	; (8011788 <tcp_write+0x2e8>)
 8011530:	4894      	ldr	r0, [pc, #592]	; (8011784 <tcp_write+0x2e4>)
 8011532:	f002 fa4f 	bl	80139d4 <iprintf>
 8011536:	f06f 030f 	mvn.w	r3, #15
 801153a:	e30a      	b.n	8011b52 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801153c:	88fb      	ldrh	r3, [r7, #6]
 801153e:	4619      	mov	r1, r3
 8011540:	68f8      	ldr	r0, [r7, #12]
 8011542:	f7ff ff33 	bl	80113ac <tcp_write_checks>
 8011546:	4603      	mov	r3, r0
 8011548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801154c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011550:	2b00      	cmp	r3, #0
 8011552:	d002      	beq.n	801155a <tcp_write+0xba>
    return err;
 8011554:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011558:	e2fb      	b.n	8011b52 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011560:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011564:	2300      	movs	r3, #0
 8011566:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801156e:	2b00      	cmp	r3, #0
 8011570:	f000 80f6 	beq.w	8011760 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011578:	653b      	str	r3, [r7, #80]	; 0x50
 801157a:	e002      	b.n	8011582 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801157c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d1f8      	bne.n	801157c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801158a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801158c:	7a9b      	ldrb	r3, [r3, #10]
 801158e:	009b      	lsls	r3, r3, #2
 8011590:	b29b      	uxth	r3, r3
 8011592:	f003 0304 	and.w	r3, r3, #4
 8011596:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011598:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801159a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801159c:	891b      	ldrh	r3, [r3, #8]
 801159e:	4619      	mov	r1, r3
 80115a0:	8c3b      	ldrh	r3, [r7, #32]
 80115a2:	440b      	add	r3, r1
 80115a4:	429a      	cmp	r2, r3
 80115a6:	da06      	bge.n	80115b6 <tcp_write+0x116>
 80115a8:	4b74      	ldr	r3, [pc, #464]	; (801177c <tcp_write+0x2dc>)
 80115aa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80115ae:	4977      	ldr	r1, [pc, #476]	; (801178c <tcp_write+0x2ec>)
 80115b0:	4874      	ldr	r0, [pc, #464]	; (8011784 <tcp_write+0x2e4>)
 80115b2:	f002 fa0f 	bl	80139d4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80115b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115b8:	891a      	ldrh	r2, [r3, #8]
 80115ba:	8c3b      	ldrh	r3, [r7, #32]
 80115bc:	4413      	add	r3, r2
 80115be:	b29b      	uxth	r3, r3
 80115c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80115c2:	1ad3      	subs	r3, r2, r3
 80115c4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80115cc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80115ce:	8a7b      	ldrh	r3, [r7, #18]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d026      	beq.n	8011622 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80115d4:	8a7b      	ldrh	r3, [r7, #18]
 80115d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80115d8:	429a      	cmp	r2, r3
 80115da:	d206      	bcs.n	80115ea <tcp_write+0x14a>
 80115dc:	4b67      	ldr	r3, [pc, #412]	; (801177c <tcp_write+0x2dc>)
 80115de:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80115e2:	496b      	ldr	r1, [pc, #428]	; (8011790 <tcp_write+0x2f0>)
 80115e4:	4867      	ldr	r0, [pc, #412]	; (8011784 <tcp_write+0x2e4>)
 80115e6:	f002 f9f5 	bl	80139d4 <iprintf>
      seg = last_unsent;
 80115ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115ec:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80115ee:	8a7b      	ldrh	r3, [r7, #18]
 80115f0:	88fa      	ldrh	r2, [r7, #6]
 80115f2:	4293      	cmp	r3, r2
 80115f4:	bf28      	it	cs
 80115f6:	4613      	movcs	r3, r2
 80115f8:	b29b      	uxth	r3, r3
 80115fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80115fc:	4293      	cmp	r3, r2
 80115fe:	bf28      	it	cs
 8011600:	4613      	movcs	r3, r2
 8011602:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011604:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011608:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801160a:	4413      	add	r3, r2
 801160c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011610:	8a7a      	ldrh	r2, [r7, #18]
 8011612:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011614:	1ad3      	subs	r3, r2, r3
 8011616:	b29b      	uxth	r3, r3
 8011618:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801161a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801161c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801161e:	1ad3      	subs	r3, r2, r3
 8011620:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011622:	8a7b      	ldrh	r3, [r7, #18]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d00b      	beq.n	8011640 <tcp_write+0x1a0>
 8011628:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801162c:	88fb      	ldrh	r3, [r7, #6]
 801162e:	429a      	cmp	r2, r3
 8011630:	d006      	beq.n	8011640 <tcp_write+0x1a0>
 8011632:	4b52      	ldr	r3, [pc, #328]	; (801177c <tcp_write+0x2dc>)
 8011634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011638:	4956      	ldr	r1, [pc, #344]	; (8011794 <tcp_write+0x2f4>)
 801163a:	4852      	ldr	r0, [pc, #328]	; (8011784 <tcp_write+0x2e4>)
 801163c:	f002 f9ca 	bl	80139d4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011640:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011644:	88fb      	ldrh	r3, [r7, #6]
 8011646:	429a      	cmp	r2, r3
 8011648:	f080 8167 	bcs.w	801191a <tcp_write+0x47a>
 801164c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801164e:	2b00      	cmp	r3, #0
 8011650:	f000 8163 	beq.w	801191a <tcp_write+0x47a>
 8011654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011656:	891b      	ldrh	r3, [r3, #8]
 8011658:	2b00      	cmp	r3, #0
 801165a:	f000 815e 	beq.w	801191a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801165e:	88fa      	ldrh	r2, [r7, #6]
 8011660:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011664:	1ad2      	subs	r2, r2, r3
 8011666:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011668:	4293      	cmp	r3, r2
 801166a:	bfa8      	it	ge
 801166c:	4613      	movge	r3, r2
 801166e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011672:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011674:	797b      	ldrb	r3, [r7, #5]
 8011676:	f003 0301 	and.w	r3, r3, #1
 801167a:	2b00      	cmp	r3, #0
 801167c:	d027      	beq.n	80116ce <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801167e:	f107 0012 	add.w	r0, r7, #18
 8011682:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011684:	8bf9      	ldrh	r1, [r7, #30]
 8011686:	2301      	movs	r3, #1
 8011688:	9302      	str	r3, [sp, #8]
 801168a:	797b      	ldrb	r3, [r7, #5]
 801168c:	9301      	str	r3, [sp, #4]
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	9300      	str	r3, [sp, #0]
 8011692:	4603      	mov	r3, r0
 8011694:	2000      	movs	r0, #0
 8011696:	f7ff fe0f 	bl	80112b8 <tcp_pbuf_prealloc>
 801169a:	6578      	str	r0, [r7, #84]	; 0x54
 801169c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801169e:	2b00      	cmp	r3, #0
 80116a0:	f000 8225 	beq.w	8011aee <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80116a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116a6:	6858      	ldr	r0, [r3, #4]
 80116a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80116ac:	68ba      	ldr	r2, [r7, #8]
 80116ae:	4413      	add	r3, r2
 80116b0:	8bfa      	ldrh	r2, [r7, #30]
 80116b2:	4619      	mov	r1, r3
 80116b4:	f002 f95e 	bl	8013974 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80116b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80116ba:	f7fb f8db 	bl	800c874 <pbuf_clen>
 80116be:	4603      	mov	r3, r0
 80116c0:	461a      	mov	r2, r3
 80116c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80116c6:	4413      	add	r3, r2
 80116c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80116cc:	e041      	b.n	8011752 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80116ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	637b      	str	r3, [r7, #52]	; 0x34
 80116d4:	e002      	b.n	80116dc <tcp_write+0x23c>
 80116d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	637b      	str	r3, [r7, #52]	; 0x34
 80116dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d1f8      	bne.n	80116d6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80116e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116e6:	7b1b      	ldrb	r3, [r3, #12]
 80116e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d115      	bne.n	801171c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80116f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116f6:	8952      	ldrh	r2, [r2, #10]
 80116f8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80116fa:	68ba      	ldr	r2, [r7, #8]
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d10d      	bne.n	801171c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011700:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011704:	2b00      	cmp	r3, #0
 8011706:	d006      	beq.n	8011716 <tcp_write+0x276>
 8011708:	4b1c      	ldr	r3, [pc, #112]	; (801177c <tcp_write+0x2dc>)
 801170a:	f240 2231 	movw	r2, #561	; 0x231
 801170e:	4922      	ldr	r1, [pc, #136]	; (8011798 <tcp_write+0x2f8>)
 8011710:	481c      	ldr	r0, [pc, #112]	; (8011784 <tcp_write+0x2e4>)
 8011712:	f002 f95f 	bl	80139d4 <iprintf>
          extendlen = seglen;
 8011716:	8bfb      	ldrh	r3, [r7, #30]
 8011718:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801171a:	e01a      	b.n	8011752 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801171c:	8bfb      	ldrh	r3, [r7, #30]
 801171e:	2201      	movs	r2, #1
 8011720:	4619      	mov	r1, r3
 8011722:	2000      	movs	r0, #0
 8011724:	f7fa fd34 	bl	800c190 <pbuf_alloc>
 8011728:	6578      	str	r0, [r7, #84]	; 0x54
 801172a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801172c:	2b00      	cmp	r3, #0
 801172e:	f000 81e0 	beq.w	8011af2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011732:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011736:	68ba      	ldr	r2, [r7, #8]
 8011738:	441a      	add	r2, r3
 801173a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801173c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801173e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011740:	f7fb f898 	bl	800c874 <pbuf_clen>
 8011744:	4603      	mov	r3, r0
 8011746:	461a      	mov	r2, r3
 8011748:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801174c:	4413      	add	r3, r2
 801174e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011752:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011756:	8bfb      	ldrh	r3, [r7, #30]
 8011758:	4413      	add	r3, r2
 801175a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801175e:	e0dc      	b.n	801191a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011766:	2b00      	cmp	r3, #0
 8011768:	f000 80d7 	beq.w	801191a <tcp_write+0x47a>
 801176c:	4b03      	ldr	r3, [pc, #12]	; (801177c <tcp_write+0x2dc>)
 801176e:	f240 224a 	movw	r2, #586	; 0x24a
 8011772:	490a      	ldr	r1, [pc, #40]	; (801179c <tcp_write+0x2fc>)
 8011774:	4803      	ldr	r0, [pc, #12]	; (8011784 <tcp_write+0x2e4>)
 8011776:	f002 f92d 	bl	80139d4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801177a:	e0ce      	b.n	801191a <tcp_write+0x47a>
 801177c:	08016f1c 	.word	0x08016f1c
 8011780:	080170f8 	.word	0x080170f8
 8011784:	08016fac 	.word	0x08016fac
 8011788:	08017110 	.word	0x08017110
 801178c:	08017144 	.word	0x08017144
 8011790:	0801715c 	.word	0x0801715c
 8011794:	0801717c 	.word	0x0801717c
 8011798:	0801719c 	.word	0x0801719c
 801179c:	080171c8 	.word	0x080171c8
    struct pbuf *p;
    u16_t left = len - pos;
 80117a0:	88fa      	ldrh	r2, [r7, #6]
 80117a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80117a6:	1ad3      	subs	r3, r2, r3
 80117a8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80117aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80117ae:	b29b      	uxth	r3, r3
 80117b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80117b2:	1ad3      	subs	r3, r2, r3
 80117b4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80117b6:	8b7a      	ldrh	r2, [r7, #26]
 80117b8:	8bbb      	ldrh	r3, [r7, #28]
 80117ba:	4293      	cmp	r3, r2
 80117bc:	bf28      	it	cs
 80117be:	4613      	movcs	r3, r2
 80117c0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80117c2:	797b      	ldrb	r3, [r7, #5]
 80117c4:	f003 0301 	and.w	r3, r3, #1
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d036      	beq.n	801183a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80117cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80117d0:	b29a      	uxth	r2, r3
 80117d2:	8b3b      	ldrh	r3, [r7, #24]
 80117d4:	4413      	add	r3, r2
 80117d6:	b299      	uxth	r1, r3
 80117d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117da:	2b00      	cmp	r3, #0
 80117dc:	bf0c      	ite	eq
 80117de:	2301      	moveq	r3, #1
 80117e0:	2300      	movne	r3, #0
 80117e2:	b2db      	uxtb	r3, r3
 80117e4:	f107 0012 	add.w	r0, r7, #18
 80117e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80117ea:	9302      	str	r3, [sp, #8]
 80117ec:	797b      	ldrb	r3, [r7, #5]
 80117ee:	9301      	str	r3, [sp, #4]
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	9300      	str	r3, [sp, #0]
 80117f4:	4603      	mov	r3, r0
 80117f6:	2036      	movs	r0, #54	; 0x36
 80117f8:	f7ff fd5e 	bl	80112b8 <tcp_pbuf_prealloc>
 80117fc:	6338      	str	r0, [r7, #48]	; 0x30
 80117fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011800:	2b00      	cmp	r3, #0
 8011802:	f000 8178 	beq.w	8011af6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011808:	895b      	ldrh	r3, [r3, #10]
 801180a:	8b3a      	ldrh	r2, [r7, #24]
 801180c:	429a      	cmp	r2, r3
 801180e:	d906      	bls.n	801181e <tcp_write+0x37e>
 8011810:	4b8c      	ldr	r3, [pc, #560]	; (8011a44 <tcp_write+0x5a4>)
 8011812:	f240 2266 	movw	r2, #614	; 0x266
 8011816:	498c      	ldr	r1, [pc, #560]	; (8011a48 <tcp_write+0x5a8>)
 8011818:	488c      	ldr	r0, [pc, #560]	; (8011a4c <tcp_write+0x5ac>)
 801181a:	f002 f8db 	bl	80139d4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801181e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011820:	685a      	ldr	r2, [r3, #4]
 8011822:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011826:	18d0      	adds	r0, r2, r3
 8011828:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801182c:	68ba      	ldr	r2, [r7, #8]
 801182e:	4413      	add	r3, r2
 8011830:	8b3a      	ldrh	r2, [r7, #24]
 8011832:	4619      	mov	r1, r3
 8011834:	f002 f89e 	bl	8013974 <memcpy>
 8011838:	e02f      	b.n	801189a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801183a:	8a7b      	ldrh	r3, [r7, #18]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d006      	beq.n	801184e <tcp_write+0x3ae>
 8011840:	4b80      	ldr	r3, [pc, #512]	; (8011a44 <tcp_write+0x5a4>)
 8011842:	f240 2271 	movw	r2, #625	; 0x271
 8011846:	4982      	ldr	r1, [pc, #520]	; (8011a50 <tcp_write+0x5b0>)
 8011848:	4880      	ldr	r0, [pc, #512]	; (8011a4c <tcp_write+0x5ac>)
 801184a:	f002 f8c3 	bl	80139d4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801184e:	8b3b      	ldrh	r3, [r7, #24]
 8011850:	2201      	movs	r2, #1
 8011852:	4619      	mov	r1, r3
 8011854:	2036      	movs	r0, #54	; 0x36
 8011856:	f7fa fc9b 	bl	800c190 <pbuf_alloc>
 801185a:	6178      	str	r0, [r7, #20]
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	2b00      	cmp	r3, #0
 8011860:	f000 814b 	beq.w	8011afa <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011864:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011868:	68ba      	ldr	r2, [r7, #8]
 801186a:	441a      	add	r2, r3
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011870:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011874:	b29b      	uxth	r3, r3
 8011876:	f44f 7220 	mov.w	r2, #640	; 0x280
 801187a:	4619      	mov	r1, r3
 801187c:	2036      	movs	r0, #54	; 0x36
 801187e:	f7fa fc87 	bl	800c190 <pbuf_alloc>
 8011882:	6338      	str	r0, [r7, #48]	; 0x30
 8011884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011886:	2b00      	cmp	r3, #0
 8011888:	d103      	bne.n	8011892 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801188a:	6978      	ldr	r0, [r7, #20]
 801188c:	f7fa ff64 	bl	800c758 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011890:	e136      	b.n	8011b00 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011892:	6979      	ldr	r1, [r7, #20]
 8011894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011896:	f7fb f82d 	bl	800c8f4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801189a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801189c:	f7fa ffea 	bl	800c874 <pbuf_clen>
 80118a0:	4603      	mov	r3, r0
 80118a2:	461a      	mov	r2, r3
 80118a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80118a8:	4413      	add	r3, r2
 80118aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80118ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80118b2:	2b09      	cmp	r3, #9
 80118b4:	d903      	bls.n	80118be <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80118b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118b8:	f7fa ff4e 	bl	800c758 <pbuf_free>
      goto memerr;
 80118bc:	e120      	b.n	8011b00 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80118c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80118c6:	441a      	add	r2, r3
 80118c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80118cc:	9300      	str	r3, [sp, #0]
 80118ce:	4613      	mov	r3, r2
 80118d0:	2200      	movs	r2, #0
 80118d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80118d4:	68f8      	ldr	r0, [r7, #12]
 80118d6:	f7ff fc51 	bl	801117c <tcp_create_segment>
 80118da:	64f8      	str	r0, [r7, #76]	; 0x4c
 80118dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118de:	2b00      	cmp	r3, #0
 80118e0:	f000 810d 	beq.w	8011afe <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80118e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d102      	bne.n	80118f0 <tcp_write+0x450>
      queue = seg;
 80118ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118ec:	647b      	str	r3, [r7, #68]	; 0x44
 80118ee:	e00c      	b.n	801190a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80118f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d106      	bne.n	8011904 <tcp_write+0x464>
 80118f6:	4b53      	ldr	r3, [pc, #332]	; (8011a44 <tcp_write+0x5a4>)
 80118f8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80118fc:	4955      	ldr	r1, [pc, #340]	; (8011a54 <tcp_write+0x5b4>)
 80118fe:	4853      	ldr	r0, [pc, #332]	; (8011a4c <tcp_write+0x5ac>)
 8011900:	f002 f868 	bl	80139d4 <iprintf>
      prev_seg->next = seg;
 8011904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011908:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801190a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801190c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801190e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011912:	8b3b      	ldrh	r3, [r7, #24]
 8011914:	4413      	add	r3, r2
 8011916:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801191a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801191e:	88fb      	ldrh	r3, [r7, #6]
 8011920:	429a      	cmp	r2, r3
 8011922:	f4ff af3d 	bcc.w	80117a0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011926:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011928:	2b00      	cmp	r3, #0
 801192a:	d02c      	beq.n	8011986 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801192c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011932:	e01e      	b.n	8011972 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011936:	891a      	ldrh	r2, [r3, #8]
 8011938:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801193a:	4413      	add	r3, r2
 801193c:	b29a      	uxth	r2, r3
 801193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011940:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d110      	bne.n	801196c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011950:	8952      	ldrh	r2, [r2, #10]
 8011952:	4413      	add	r3, r2
 8011954:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011956:	68b9      	ldr	r1, [r7, #8]
 8011958:	4618      	mov	r0, r3
 801195a:	f002 f80b 	bl	8013974 <memcpy>
        p->len += oversize_used;
 801195e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011960:	895a      	ldrh	r2, [r3, #10]
 8011962:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011964:	4413      	add	r3, r2
 8011966:	b29a      	uxth	r2, r3
 8011968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011974:	2b00      	cmp	r3, #0
 8011976:	d1dd      	bne.n	8011934 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801197a:	891a      	ldrh	r2, [r3, #8]
 801197c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801197e:	4413      	add	r3, r2
 8011980:	b29a      	uxth	r2, r3
 8011982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011984:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011986:	8a7a      	ldrh	r2, [r7, #18]
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801198e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011990:	2b00      	cmp	r3, #0
 8011992:	d018      	beq.n	80119c6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011996:	2b00      	cmp	r3, #0
 8011998:	d106      	bne.n	80119a8 <tcp_write+0x508>
 801199a:	4b2a      	ldr	r3, [pc, #168]	; (8011a44 <tcp_write+0x5a4>)
 801199c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80119a0:	492d      	ldr	r1, [pc, #180]	; (8011a58 <tcp_write+0x5b8>)
 80119a2:	482a      	ldr	r0, [pc, #168]	; (8011a4c <tcp_write+0x5ac>)
 80119a4:	f002 f816 	bl	80139d4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80119a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119aa:	685b      	ldr	r3, [r3, #4]
 80119ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7fa ffa0 	bl	800c8f4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80119b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119b6:	891a      	ldrh	r2, [r3, #8]
 80119b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119ba:	891b      	ldrh	r3, [r3, #8]
 80119bc:	4413      	add	r3, r2
 80119be:	b29a      	uxth	r2, r3
 80119c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119c2:	811a      	strh	r2, [r3, #8]
 80119c4:	e037      	b.n	8011a36 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80119c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d034      	beq.n	8011a36 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80119cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d003      	beq.n	80119da <tcp_write+0x53a>
 80119d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d106      	bne.n	80119e8 <tcp_write+0x548>
 80119da:	4b1a      	ldr	r3, [pc, #104]	; (8011a44 <tcp_write+0x5a4>)
 80119dc:	f240 22e6 	movw	r2, #742	; 0x2e6
 80119e0:	491e      	ldr	r1, [pc, #120]	; (8011a5c <tcp_write+0x5bc>)
 80119e2:	481a      	ldr	r0, [pc, #104]	; (8011a4c <tcp_write+0x5ac>)
 80119e4:	f001 fff6 	bl	80139d4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80119e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119ea:	685b      	ldr	r3, [r3, #4]
 80119ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80119ee:	e009      	b.n	8011a04 <tcp_write+0x564>
      p->tot_len += extendlen;
 80119f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119f2:	891a      	ldrh	r2, [r3, #8]
 80119f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80119f6:	4413      	add	r3, r2
 80119f8:	b29a      	uxth	r2, r3
 80119fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119fc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80119fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d1f1      	bne.n	80119f0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a0e:	891a      	ldrh	r2, [r3, #8]
 8011a10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011a12:	4413      	add	r3, r2
 8011a14:	b29a      	uxth	r2, r3
 8011a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a18:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a1c:	895a      	ldrh	r2, [r3, #10]
 8011a1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011a20:	4413      	add	r3, r2
 8011a22:	b29a      	uxth	r2, r3
 8011a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a26:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a2a:	891a      	ldrh	r2, [r3, #8]
 8011a2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011a2e:	4413      	add	r3, r2
 8011a30:	b29a      	uxth	r2, r3
 8011a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a34:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d111      	bne.n	8011a60 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a40:	66da      	str	r2, [r3, #108]	; 0x6c
 8011a42:	e010      	b.n	8011a66 <tcp_write+0x5c6>
 8011a44:	08016f1c 	.word	0x08016f1c
 8011a48:	080171f8 	.word	0x080171f8
 8011a4c:	08016fac 	.word	0x08016fac
 8011a50:	08017238 	.word	0x08017238
 8011a54:	08017248 	.word	0x08017248
 8011a58:	0801725c 	.word	0x0801725c
 8011a5c:	08017294 	.word	0x08017294
  } else {
    last_unsent->next = queue;
 8011a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a64:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011a6a:	88fb      	ldrh	r3, [r7, #6]
 8011a6c:	441a      	add	r2, r3
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011a78:	88fb      	ldrh	r3, [r7, #6]
 8011a7a:	1ad3      	subs	r3, r2, r3
 8011a7c:	b29a      	uxth	r2, r3
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011a8a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d00e      	beq.n	8011ab6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d10a      	bne.n	8011ab6 <tcp_write+0x616>
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d106      	bne.n	8011ab6 <tcp_write+0x616>
 8011aa8:	4b2c      	ldr	r3, [pc, #176]	; (8011b5c <tcp_write+0x6bc>)
 8011aaa:	f240 3212 	movw	r2, #786	; 0x312
 8011aae:	492c      	ldr	r1, [pc, #176]	; (8011b60 <tcp_write+0x6c0>)
 8011ab0:	482c      	ldr	r0, [pc, #176]	; (8011b64 <tcp_write+0x6c4>)
 8011ab2:	f001 ff8f 	bl	80139d4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d016      	beq.n	8011aea <tcp_write+0x64a>
 8011abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011abe:	68db      	ldr	r3, [r3, #12]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d012      	beq.n	8011aea <tcp_write+0x64a>
 8011ac4:	797b      	ldrb	r3, [r7, #5]
 8011ac6:	f003 0302 	and.w	r3, r3, #2
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d10d      	bne.n	8011aea <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ad0:	68db      	ldr	r3, [r3, #12]
 8011ad2:	899b      	ldrh	r3, [r3, #12]
 8011ad4:	b29c      	uxth	r4, r3
 8011ad6:	2008      	movs	r0, #8
 8011ad8:	f7f6 fe08 	bl	80086ec <lwip_htons>
 8011adc:	4603      	mov	r3, r0
 8011ade:	461a      	mov	r2, r3
 8011ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ae2:	68db      	ldr	r3, [r3, #12]
 8011ae4:	4322      	orrs	r2, r4
 8011ae6:	b292      	uxth	r2, r2
 8011ae8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011aea:	2300      	movs	r3, #0
 8011aec:	e031      	b.n	8011b52 <tcp_write+0x6b2>
          goto memerr;
 8011aee:	bf00      	nop
 8011af0:	e006      	b.n	8011b00 <tcp_write+0x660>
            goto memerr;
 8011af2:	bf00      	nop
 8011af4:	e004      	b.n	8011b00 <tcp_write+0x660>
        goto memerr;
 8011af6:	bf00      	nop
 8011af8:	e002      	b.n	8011b00 <tcp_write+0x660>
        goto memerr;
 8011afa:	bf00      	nop
 8011afc:	e000      	b.n	8011b00 <tcp_write+0x660>
      goto memerr;
 8011afe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	8b5b      	ldrh	r3, [r3, #26]
 8011b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b08:	b29a      	uxth	r2, r3
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d002      	beq.n	8011b1a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011b14:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011b16:	f7fa fe1f 	bl	800c758 <pbuf_free>
  }
  if (queue != NULL) {
 8011b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d002      	beq.n	8011b26 <tcp_write+0x686>
    tcp_segs_free(queue);
 8011b20:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011b22:	f7fc fb89 	bl	800e238 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d00e      	beq.n	8011b4e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d10a      	bne.n	8011b4e <tcp_write+0x6ae>
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d106      	bne.n	8011b4e <tcp_write+0x6ae>
 8011b40:	4b06      	ldr	r3, [pc, #24]	; (8011b5c <tcp_write+0x6bc>)
 8011b42:	f240 3227 	movw	r2, #807	; 0x327
 8011b46:	4906      	ldr	r1, [pc, #24]	; (8011b60 <tcp_write+0x6c0>)
 8011b48:	4806      	ldr	r0, [pc, #24]	; (8011b64 <tcp_write+0x6c4>)
 8011b4a:	f001 ff43 	bl	80139d4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	375c      	adds	r7, #92	; 0x5c
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd90      	pop	{r4, r7, pc}
 8011b5a:	bf00      	nop
 8011b5c:	08016f1c 	.word	0x08016f1c
 8011b60:	080172cc 	.word	0x080172cc
 8011b64:	08016fac 	.word	0x08016fac

08011b68 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011b68:	b590      	push	{r4, r7, lr}
 8011b6a:	b08b      	sub	sp, #44	; 0x2c
 8011b6c:	af02      	add	r7, sp, #8
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	460b      	mov	r3, r1
 8011b72:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011b74:	2300      	movs	r3, #0
 8011b76:	61fb      	str	r3, [r7, #28]
 8011b78:	2300      	movs	r3, #0
 8011b7a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d106      	bne.n	8011b94 <tcp_split_unsent_seg+0x2c>
 8011b86:	4b95      	ldr	r3, [pc, #596]	; (8011ddc <tcp_split_unsent_seg+0x274>)
 8011b88:	f240 324b 	movw	r2, #843	; 0x34b
 8011b8c:	4994      	ldr	r1, [pc, #592]	; (8011de0 <tcp_split_unsent_seg+0x278>)
 8011b8e:	4895      	ldr	r0, [pc, #596]	; (8011de4 <tcp_split_unsent_seg+0x27c>)
 8011b90:	f001 ff20 	bl	80139d4 <iprintf>

  useg = pcb->unsent;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b98:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011b9a:	697b      	ldr	r3, [r7, #20]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d102      	bne.n	8011ba6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ba4:	e116      	b.n	8011dd4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011ba6:	887b      	ldrh	r3, [r7, #2]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d109      	bne.n	8011bc0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011bac:	4b8b      	ldr	r3, [pc, #556]	; (8011ddc <tcp_split_unsent_seg+0x274>)
 8011bae:	f240 3253 	movw	r2, #851	; 0x353
 8011bb2:	498d      	ldr	r1, [pc, #564]	; (8011de8 <tcp_split_unsent_seg+0x280>)
 8011bb4:	488b      	ldr	r0, [pc, #556]	; (8011de4 <tcp_split_unsent_seg+0x27c>)
 8011bb6:	f001 ff0d 	bl	80139d4 <iprintf>
    return ERR_VAL;
 8011bba:	f06f 0305 	mvn.w	r3, #5
 8011bbe:	e109      	b.n	8011dd4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011bc0:	697b      	ldr	r3, [r7, #20]
 8011bc2:	891b      	ldrh	r3, [r3, #8]
 8011bc4:	887a      	ldrh	r2, [r7, #2]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d301      	bcc.n	8011bce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	e102      	b.n	8011dd4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bd2:	887a      	ldrh	r2, [r7, #2]
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d906      	bls.n	8011be6 <tcp_split_unsent_seg+0x7e>
 8011bd8:	4b80      	ldr	r3, [pc, #512]	; (8011ddc <tcp_split_unsent_seg+0x274>)
 8011bda:	f240 325b 	movw	r2, #859	; 0x35b
 8011bde:	4983      	ldr	r1, [pc, #524]	; (8011dec <tcp_split_unsent_seg+0x284>)
 8011be0:	4880      	ldr	r0, [pc, #512]	; (8011de4 <tcp_split_unsent_seg+0x27c>)
 8011be2:	f001 fef7 	bl	80139d4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	891b      	ldrh	r3, [r3, #8]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d106      	bne.n	8011bfc <tcp_split_unsent_seg+0x94>
 8011bee:	4b7b      	ldr	r3, [pc, #492]	; (8011ddc <tcp_split_unsent_seg+0x274>)
 8011bf0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011bf4:	497e      	ldr	r1, [pc, #504]	; (8011df0 <tcp_split_unsent_seg+0x288>)
 8011bf6:	487b      	ldr	r0, [pc, #492]	; (8011de4 <tcp_split_unsent_seg+0x27c>)
 8011bf8:	f001 feec 	bl	80139d4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011bfc:	697b      	ldr	r3, [r7, #20]
 8011bfe:	7a9b      	ldrb	r3, [r3, #10]
 8011c00:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011c02:	7bfb      	ldrb	r3, [r7, #15]
 8011c04:	009b      	lsls	r3, r3, #2
 8011c06:	b2db      	uxtb	r3, r3
 8011c08:	f003 0304 	and.w	r3, r3, #4
 8011c0c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	891a      	ldrh	r2, [r3, #8]
 8011c12:	887b      	ldrh	r3, [r7, #2]
 8011c14:	1ad3      	subs	r3, r2, r3
 8011c16:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011c18:	7bbb      	ldrb	r3, [r7, #14]
 8011c1a:	b29a      	uxth	r2, r3
 8011c1c:	89bb      	ldrh	r3, [r7, #12]
 8011c1e:	4413      	add	r3, r2
 8011c20:	b29b      	uxth	r3, r3
 8011c22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c26:	4619      	mov	r1, r3
 8011c28:	2036      	movs	r0, #54	; 0x36
 8011c2a:	f7fa fab1 	bl	800c190 <pbuf_alloc>
 8011c2e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f000 80b7 	beq.w	8011da6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	685b      	ldr	r3, [r3, #4]
 8011c3c:	891a      	ldrh	r2, [r3, #8]
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	891b      	ldrh	r3, [r3, #8]
 8011c42:	1ad3      	subs	r3, r2, r3
 8011c44:	b29a      	uxth	r2, r3
 8011c46:	887b      	ldrh	r3, [r7, #2]
 8011c48:	4413      	add	r3, r2
 8011c4a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	6858      	ldr	r0, [r3, #4]
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	685a      	ldr	r2, [r3, #4]
 8011c54:	7bbb      	ldrb	r3, [r7, #14]
 8011c56:	18d1      	adds	r1, r2, r3
 8011c58:	897b      	ldrh	r3, [r7, #10]
 8011c5a:	89ba      	ldrh	r2, [r7, #12]
 8011c5c:	f7fa ff72 	bl	800cb44 <pbuf_copy_partial>
 8011c60:	4603      	mov	r3, r0
 8011c62:	461a      	mov	r2, r3
 8011c64:	89bb      	ldrh	r3, [r7, #12]
 8011c66:	4293      	cmp	r3, r2
 8011c68:	f040 809f 	bne.w	8011daa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	68db      	ldr	r3, [r3, #12]
 8011c70:	899b      	ldrh	r3, [r3, #12]
 8011c72:	b29b      	uxth	r3, r3
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7f6 fd39 	bl	80086ec <lwip_htons>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	b2db      	uxtb	r3, r3
 8011c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011c82:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011c84:	2300      	movs	r3, #0
 8011c86:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011c88:	7efb      	ldrb	r3, [r7, #27]
 8011c8a:	f003 0308 	and.w	r3, r3, #8
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d007      	beq.n	8011ca2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011c92:	7efb      	ldrb	r3, [r7, #27]
 8011c94:	f023 0308 	bic.w	r3, r3, #8
 8011c98:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011c9a:	7ebb      	ldrb	r3, [r7, #26]
 8011c9c:	f043 0308 	orr.w	r3, r3, #8
 8011ca0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011ca2:	7efb      	ldrb	r3, [r7, #27]
 8011ca4:	f003 0301 	and.w	r3, r3, #1
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d007      	beq.n	8011cbc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011cac:	7efb      	ldrb	r3, [r7, #27]
 8011cae:	f023 0301 	bic.w	r3, r3, #1
 8011cb2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011cb4:	7ebb      	ldrb	r3, [r7, #26]
 8011cb6:	f043 0301 	orr.w	r3, r3, #1
 8011cba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	68db      	ldr	r3, [r3, #12]
 8011cc0:	685b      	ldr	r3, [r3, #4]
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f7f6 fd27 	bl	8008716 <lwip_htonl>
 8011cc8:	4602      	mov	r2, r0
 8011cca:	887b      	ldrh	r3, [r7, #2]
 8011ccc:	18d1      	adds	r1, r2, r3
 8011cce:	7eba      	ldrb	r2, [r7, #26]
 8011cd0:	7bfb      	ldrb	r3, [r7, #15]
 8011cd2:	9300      	str	r3, [sp, #0]
 8011cd4:	460b      	mov	r3, r1
 8011cd6:	6939      	ldr	r1, [r7, #16]
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f7ff fa4f 	bl	801117c <tcp_create_segment>
 8011cde:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011ce0:	69fb      	ldr	r3, [r7, #28]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d063      	beq.n	8011dae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	685b      	ldr	r3, [r3, #4]
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7fa fdc2 	bl	800c874 <pbuf_clen>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	461a      	mov	r2, r3
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cfa:	1a9b      	subs	r3, r3, r2
 8011cfc:	b29a      	uxth	r2, r3
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	6858      	ldr	r0, [r3, #4]
 8011d08:	697b      	ldr	r3, [r7, #20]
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	891a      	ldrh	r2, [r3, #8]
 8011d0e:	89bb      	ldrh	r3, [r7, #12]
 8011d10:	1ad3      	subs	r3, r2, r3
 8011d12:	b29b      	uxth	r3, r3
 8011d14:	4619      	mov	r1, r3
 8011d16:	f7fa fb99 	bl	800c44c <pbuf_realloc>
  useg->len -= remainder;
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	891a      	ldrh	r2, [r3, #8]
 8011d1e:	89bb      	ldrh	r3, [r7, #12]
 8011d20:	1ad3      	subs	r3, r2, r3
 8011d22:	b29a      	uxth	r2, r3
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	899b      	ldrh	r3, [r3, #12]
 8011d2e:	b29c      	uxth	r4, r3
 8011d30:	7efb      	ldrb	r3, [r7, #27]
 8011d32:	b29b      	uxth	r3, r3
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7f6 fcd9 	bl	80086ec <lwip_htons>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	461a      	mov	r2, r3
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	68db      	ldr	r3, [r3, #12]
 8011d42:	4322      	orrs	r2, r4
 8011d44:	b292      	uxth	r2, r2
 8011d46:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7fa fd91 	bl	800c874 <pbuf_clen>
 8011d52:	4603      	mov	r3, r0
 8011d54:	461a      	mov	r2, r3
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d5c:	4413      	add	r3, r2
 8011d5e:	b29a      	uxth	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011d66:	69fb      	ldr	r3, [r7, #28]
 8011d68:	685b      	ldr	r3, [r3, #4]
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f7fa fd82 	bl	800c874 <pbuf_clen>
 8011d70:	4603      	mov	r3, r0
 8011d72:	461a      	mov	r2, r3
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d7a:	4413      	add	r3, r2
 8011d7c:	b29a      	uxth	r2, r3
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	681a      	ldr	r2, [r3, #0]
 8011d88:	69fb      	ldr	r3, [r7, #28]
 8011d8a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	69fa      	ldr	r2, [r7, #28]
 8011d90:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011d92:	69fb      	ldr	r3, [r7, #28]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d103      	bne.n	8011da2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011da2:	2300      	movs	r3, #0
 8011da4:	e016      	b.n	8011dd4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011da6:	bf00      	nop
 8011da8:	e002      	b.n	8011db0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011daa:	bf00      	nop
 8011dac:	e000      	b.n	8011db0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011dae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011db0:	69fb      	ldr	r3, [r7, #28]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d006      	beq.n	8011dc4 <tcp_split_unsent_seg+0x25c>
 8011db6:	4b09      	ldr	r3, [pc, #36]	; (8011ddc <tcp_split_unsent_seg+0x274>)
 8011db8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011dbc:	490d      	ldr	r1, [pc, #52]	; (8011df4 <tcp_split_unsent_seg+0x28c>)
 8011dbe:	4809      	ldr	r0, [pc, #36]	; (8011de4 <tcp_split_unsent_seg+0x27c>)
 8011dc0:	f001 fe08 	bl	80139d4 <iprintf>
  if (p != NULL) {
 8011dc4:	693b      	ldr	r3, [r7, #16]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d002      	beq.n	8011dd0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011dca:	6938      	ldr	r0, [r7, #16]
 8011dcc:	f7fa fcc4 	bl	800c758 <pbuf_free>
  }

  return ERR_MEM;
 8011dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3724      	adds	r7, #36	; 0x24
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd90      	pop	{r4, r7, pc}
 8011ddc:	08016f1c 	.word	0x08016f1c
 8011de0:	080172ec 	.word	0x080172ec
 8011de4:	08016fac 	.word	0x08016fac
 8011de8:	08017310 	.word	0x08017310
 8011dec:	08017334 	.word	0x08017334
 8011df0:	08017344 	.word	0x08017344
 8011df4:	08017354 	.word	0x08017354

08011df8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011df8:	b590      	push	{r4, r7, lr}
 8011dfa:	b085      	sub	sp, #20
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d106      	bne.n	8011e14 <tcp_send_fin+0x1c>
 8011e06:	4b21      	ldr	r3, [pc, #132]	; (8011e8c <tcp_send_fin+0x94>)
 8011e08:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011e0c:	4920      	ldr	r1, [pc, #128]	; (8011e90 <tcp_send_fin+0x98>)
 8011e0e:	4821      	ldr	r0, [pc, #132]	; (8011e94 <tcp_send_fin+0x9c>)
 8011e10:	f001 fde0 	bl	80139d4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d02e      	beq.n	8011e7a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e20:	60fb      	str	r3, [r7, #12]
 8011e22:	e002      	b.n	8011e2a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d1f8      	bne.n	8011e24 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	68db      	ldr	r3, [r3, #12]
 8011e36:	899b      	ldrh	r3, [r3, #12]
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7f6 fc56 	bl	80086ec <lwip_htons>
 8011e40:	4603      	mov	r3, r0
 8011e42:	b2db      	uxtb	r3, r3
 8011e44:	f003 0307 	and.w	r3, r3, #7
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d116      	bne.n	8011e7a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	899b      	ldrh	r3, [r3, #12]
 8011e52:	b29c      	uxth	r4, r3
 8011e54:	2001      	movs	r0, #1
 8011e56:	f7f6 fc49 	bl	80086ec <lwip_htons>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	461a      	mov	r2, r3
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	68db      	ldr	r3, [r3, #12]
 8011e62:	4322      	orrs	r2, r4
 8011e64:	b292      	uxth	r2, r2
 8011e66:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	8b5b      	ldrh	r3, [r3, #26]
 8011e6c:	f043 0320 	orr.w	r3, r3, #32
 8011e70:	b29a      	uxth	r2, r3
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011e76:	2300      	movs	r3, #0
 8011e78:	e004      	b.n	8011e84 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011e7a:	2101      	movs	r1, #1
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f000 f80b 	bl	8011e98 <tcp_enqueue_flags>
 8011e82:	4603      	mov	r3, r0
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3714      	adds	r7, #20
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd90      	pop	{r4, r7, pc}
 8011e8c:	08016f1c 	.word	0x08016f1c
 8011e90:	08017360 	.word	0x08017360
 8011e94:	08016fac 	.word	0x08016fac

08011e98 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b08a      	sub	sp, #40	; 0x28
 8011e9c:	af02      	add	r7, sp, #8
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	460b      	mov	r3, r1
 8011ea2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011eac:	78fb      	ldrb	r3, [r7, #3]
 8011eae:	f003 0303 	and.w	r3, r3, #3
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d106      	bne.n	8011ec4 <tcp_enqueue_flags+0x2c>
 8011eb6:	4b67      	ldr	r3, [pc, #412]	; (8012054 <tcp_enqueue_flags+0x1bc>)
 8011eb8:	f240 4211 	movw	r2, #1041	; 0x411
 8011ebc:	4966      	ldr	r1, [pc, #408]	; (8012058 <tcp_enqueue_flags+0x1c0>)
 8011ebe:	4867      	ldr	r0, [pc, #412]	; (801205c <tcp_enqueue_flags+0x1c4>)
 8011ec0:	f001 fd88 	bl	80139d4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d106      	bne.n	8011ed8 <tcp_enqueue_flags+0x40>
 8011eca:	4b62      	ldr	r3, [pc, #392]	; (8012054 <tcp_enqueue_flags+0x1bc>)
 8011ecc:	f240 4213 	movw	r2, #1043	; 0x413
 8011ed0:	4963      	ldr	r1, [pc, #396]	; (8012060 <tcp_enqueue_flags+0x1c8>)
 8011ed2:	4862      	ldr	r0, [pc, #392]	; (801205c <tcp_enqueue_flags+0x1c4>)
 8011ed4:	f001 fd7e 	bl	80139d4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011ed8:	78fb      	ldrb	r3, [r7, #3]
 8011eda:	f003 0302 	and.w	r3, r3, #2
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d001      	beq.n	8011ee6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011ee6:	7ffb      	ldrb	r3, [r7, #31]
 8011ee8:	009b      	lsls	r3, r3, #2
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	f003 0304 	and.w	r3, r3, #4
 8011ef0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011ef2:	7dfb      	ldrb	r3, [r7, #23]
 8011ef4:	b29b      	uxth	r3, r3
 8011ef6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011efa:	4619      	mov	r1, r3
 8011efc:	2036      	movs	r0, #54	; 0x36
 8011efe:	f7fa f947 	bl	800c190 <pbuf_alloc>
 8011f02:	6138      	str	r0, [r7, #16]
 8011f04:	693b      	ldr	r3, [r7, #16]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d109      	bne.n	8011f1e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	8b5b      	ldrh	r3, [r3, #26]
 8011f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f12:	b29a      	uxth	r2, r3
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011f18:	f04f 33ff 	mov.w	r3, #4294967295
 8011f1c:	e095      	b.n	801204a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	895a      	ldrh	r2, [r3, #10]
 8011f22:	7dfb      	ldrb	r3, [r7, #23]
 8011f24:	b29b      	uxth	r3, r3
 8011f26:	429a      	cmp	r2, r3
 8011f28:	d206      	bcs.n	8011f38 <tcp_enqueue_flags+0xa0>
 8011f2a:	4b4a      	ldr	r3, [pc, #296]	; (8012054 <tcp_enqueue_flags+0x1bc>)
 8011f2c:	f240 4239 	movw	r2, #1081	; 0x439
 8011f30:	494c      	ldr	r1, [pc, #304]	; (8012064 <tcp_enqueue_flags+0x1cc>)
 8011f32:	484a      	ldr	r0, [pc, #296]	; (801205c <tcp_enqueue_flags+0x1c4>)
 8011f34:	f001 fd4e 	bl	80139d4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011f3c:	78fa      	ldrb	r2, [r7, #3]
 8011f3e:	7ffb      	ldrb	r3, [r7, #31]
 8011f40:	9300      	str	r3, [sp, #0]
 8011f42:	460b      	mov	r3, r1
 8011f44:	6939      	ldr	r1, [r7, #16]
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f7ff f918 	bl	801117c <tcp_create_segment>
 8011f4c:	60f8      	str	r0, [r7, #12]
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d109      	bne.n	8011f68 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	8b5b      	ldrh	r3, [r3, #26]
 8011f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f5c:	b29a      	uxth	r2, r3
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011f62:	f04f 33ff 	mov.w	r3, #4294967295
 8011f66:	e070      	b.n	801204a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	68db      	ldr	r3, [r3, #12]
 8011f6c:	f003 0303 	and.w	r3, r3, #3
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d006      	beq.n	8011f82 <tcp_enqueue_flags+0xea>
 8011f74:	4b37      	ldr	r3, [pc, #220]	; (8012054 <tcp_enqueue_flags+0x1bc>)
 8011f76:	f240 4242 	movw	r2, #1090	; 0x442
 8011f7a:	493b      	ldr	r1, [pc, #236]	; (8012068 <tcp_enqueue_flags+0x1d0>)
 8011f7c:	4837      	ldr	r0, [pc, #220]	; (801205c <tcp_enqueue_flags+0x1c4>)
 8011f7e:	f001 fd29 	bl	80139d4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	891b      	ldrh	r3, [r3, #8]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d006      	beq.n	8011f98 <tcp_enqueue_flags+0x100>
 8011f8a:	4b32      	ldr	r3, [pc, #200]	; (8012054 <tcp_enqueue_flags+0x1bc>)
 8011f8c:	f240 4243 	movw	r2, #1091	; 0x443
 8011f90:	4936      	ldr	r1, [pc, #216]	; (801206c <tcp_enqueue_flags+0x1d4>)
 8011f92:	4832      	ldr	r0, [pc, #200]	; (801205c <tcp_enqueue_flags+0x1c4>)
 8011f94:	f001 fd1e 	bl	80139d4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d103      	bne.n	8011fa8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	68fa      	ldr	r2, [r7, #12]
 8011fa4:	66da      	str	r2, [r3, #108]	; 0x6c
 8011fa6:	e00d      	b.n	8011fc4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fac:	61bb      	str	r3, [r7, #24]
 8011fae:	e002      	b.n	8011fb6 <tcp_enqueue_flags+0x11e>
 8011fb0:	69bb      	ldr	r3, [r7, #24]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	61bb      	str	r3, [r7, #24]
 8011fb6:	69bb      	ldr	r3, [r7, #24]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d1f8      	bne.n	8011fb0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011fbe:	69bb      	ldr	r3, [r7, #24]
 8011fc0:	68fa      	ldr	r2, [r7, #12]
 8011fc2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011fcc:	78fb      	ldrb	r3, [r7, #3]
 8011fce:	f003 0302 	and.w	r3, r3, #2
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d104      	bne.n	8011fe0 <tcp_enqueue_flags+0x148>
 8011fd6:	78fb      	ldrb	r3, [r7, #3]
 8011fd8:	f003 0301 	and.w	r3, r3, #1
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d004      	beq.n	8011fea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011fe4:	1c5a      	adds	r2, r3, #1
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011fea:	78fb      	ldrb	r3, [r7, #3]
 8011fec:	f003 0301 	and.w	r3, r3, #1
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d006      	beq.n	8012002 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	8b5b      	ldrh	r3, [r3, #26]
 8011ff8:	f043 0320 	orr.w	r3, r3, #32
 8011ffc:	b29a      	uxth	r2, r3
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	4618      	mov	r0, r3
 8012008:	f7fa fc34 	bl	800c874 <pbuf_clen>
 801200c:	4603      	mov	r3, r0
 801200e:	461a      	mov	r2, r3
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012016:	4413      	add	r3, r2
 8012018:	b29a      	uxth	r2, r3
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012026:	2b00      	cmp	r3, #0
 8012028:	d00e      	beq.n	8012048 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801202e:	2b00      	cmp	r3, #0
 8012030:	d10a      	bne.n	8012048 <tcp_enqueue_flags+0x1b0>
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012036:	2b00      	cmp	r3, #0
 8012038:	d106      	bne.n	8012048 <tcp_enqueue_flags+0x1b0>
 801203a:	4b06      	ldr	r3, [pc, #24]	; (8012054 <tcp_enqueue_flags+0x1bc>)
 801203c:	f240 4265 	movw	r2, #1125	; 0x465
 8012040:	490b      	ldr	r1, [pc, #44]	; (8012070 <tcp_enqueue_flags+0x1d8>)
 8012042:	4806      	ldr	r0, [pc, #24]	; (801205c <tcp_enqueue_flags+0x1c4>)
 8012044:	f001 fcc6 	bl	80139d4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012048:	2300      	movs	r3, #0
}
 801204a:	4618      	mov	r0, r3
 801204c:	3720      	adds	r7, #32
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}
 8012052:	bf00      	nop
 8012054:	08016f1c 	.word	0x08016f1c
 8012058:	0801737c 	.word	0x0801737c
 801205c:	08016fac 	.word	0x08016fac
 8012060:	080173d4 	.word	0x080173d4
 8012064:	080173f4 	.word	0x080173f4
 8012068:	08017430 	.word	0x08017430
 801206c:	08017448 	.word	0x08017448
 8012070:	08017474 	.word	0x08017474

08012074 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012074:	b5b0      	push	{r4, r5, r7, lr}
 8012076:	b08a      	sub	sp, #40	; 0x28
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d106      	bne.n	8012090 <tcp_output+0x1c>
 8012082:	4b8a      	ldr	r3, [pc, #552]	; (80122ac <tcp_output+0x238>)
 8012084:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012088:	4989      	ldr	r1, [pc, #548]	; (80122b0 <tcp_output+0x23c>)
 801208a:	488a      	ldr	r0, [pc, #552]	; (80122b4 <tcp_output+0x240>)
 801208c:	f001 fca2 	bl	80139d4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	7d1b      	ldrb	r3, [r3, #20]
 8012094:	2b01      	cmp	r3, #1
 8012096:	d106      	bne.n	80120a6 <tcp_output+0x32>
 8012098:	4b84      	ldr	r3, [pc, #528]	; (80122ac <tcp_output+0x238>)
 801209a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801209e:	4986      	ldr	r1, [pc, #536]	; (80122b8 <tcp_output+0x244>)
 80120a0:	4884      	ldr	r0, [pc, #528]	; (80122b4 <tcp_output+0x240>)
 80120a2:	f001 fc97 	bl	80139d4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80120a6:	4b85      	ldr	r3, [pc, #532]	; (80122bc <tcp_output+0x248>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	687a      	ldr	r2, [r7, #4]
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d101      	bne.n	80120b4 <tcp_output+0x40>
    return ERR_OK;
 80120b0:	2300      	movs	r3, #0
 80120b2:	e1ce      	b.n	8012452 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120c0:	4293      	cmp	r3, r2
 80120c2:	bf28      	it	cs
 80120c4:	4613      	movcs	r3, r2
 80120c6:	b29b      	uxth	r3, r3
 80120c8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80120d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d10b      	bne.n	80120ee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	8b5b      	ldrh	r3, [r3, #26]
 80120da:	f003 0302 	and.w	r3, r3, #2
 80120de:	2b00      	cmp	r3, #0
 80120e0:	f000 81aa 	beq.w	8012438 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f000 fdcb 	bl	8012c80 <tcp_send_empty_ack>
 80120ea:	4603      	mov	r3, r0
 80120ec:	e1b1      	b.n	8012452 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80120ee:	6879      	ldr	r1, [r7, #4]
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	3304      	adds	r3, #4
 80120f4:	461a      	mov	r2, r3
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f7ff f824 	bl	8011144 <tcp_route>
 80120fc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d102      	bne.n	801210a <tcp_output+0x96>
    return ERR_RTE;
 8012104:	f06f 0303 	mvn.w	r3, #3
 8012108:	e1a3      	b.n	8012452 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d003      	beq.n	8012118 <tcp_output+0xa4>
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d111      	bne.n	801213c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d002      	beq.n	8012124 <tcp_output+0xb0>
 801211e:	697b      	ldr	r3, [r7, #20]
 8012120:	3304      	adds	r3, #4
 8012122:	e000      	b.n	8012126 <tcp_output+0xb2>
 8012124:	2300      	movs	r3, #0
 8012126:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012128:	693b      	ldr	r3, [r7, #16]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d102      	bne.n	8012134 <tcp_output+0xc0>
      return ERR_RTE;
 801212e:	f06f 0303 	mvn.w	r3, #3
 8012132:	e18e      	b.n	8012452 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012134:	693b      	ldr	r3, [r7, #16]
 8012136:	681a      	ldr	r2, [r3, #0]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213e:	68db      	ldr	r3, [r3, #12]
 8012140:	685b      	ldr	r3, [r3, #4]
 8012142:	4618      	mov	r0, r3
 8012144:	f7f6 fae7 	bl	8008716 <lwip_htonl>
 8012148:	4602      	mov	r2, r0
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801214e:	1ad3      	subs	r3, r2, r3
 8012150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012152:	8912      	ldrh	r2, [r2, #8]
 8012154:	4413      	add	r3, r2
 8012156:	69ba      	ldr	r2, [r7, #24]
 8012158:	429a      	cmp	r2, r3
 801215a:	d227      	bcs.n	80121ac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012162:	461a      	mov	r2, r3
 8012164:	69bb      	ldr	r3, [r7, #24]
 8012166:	4293      	cmp	r3, r2
 8012168:	d114      	bne.n	8012194 <tcp_output+0x120>
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801216e:	2b00      	cmp	r3, #0
 8012170:	d110      	bne.n	8012194 <tcp_output+0x120>
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012178:	2b00      	cmp	r3, #0
 801217a:	d10b      	bne.n	8012194 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2200      	movs	r2, #0
 8012180:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2201      	movs	r2, #1
 8012188:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2200      	movs	r2, #0
 8012190:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	8b5b      	ldrh	r3, [r3, #26]
 8012198:	f003 0302 	and.w	r3, r3, #2
 801219c:	2b00      	cmp	r3, #0
 801219e:	f000 814d 	beq.w	801243c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f000 fd6c 	bl	8012c80 <tcp_send_empty_ack>
 80121a8:	4603      	mov	r3, r0
 80121aa:	e152      	b.n	8012452 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2200      	movs	r2, #0
 80121b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121b8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80121ba:	6a3b      	ldr	r3, [r7, #32]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	f000 811c 	beq.w	80123fa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80121c2:	e002      	b.n	80121ca <tcp_output+0x156>
 80121c4:	6a3b      	ldr	r3, [r7, #32]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	623b      	str	r3, [r7, #32]
 80121ca:	6a3b      	ldr	r3, [r7, #32]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d1f8      	bne.n	80121c4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80121d2:	e112      	b.n	80123fa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80121d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d6:	68db      	ldr	r3, [r3, #12]
 80121d8:	899b      	ldrh	r3, [r3, #12]
 80121da:	b29b      	uxth	r3, r3
 80121dc:	4618      	mov	r0, r3
 80121de:	f7f6 fa85 	bl	80086ec <lwip_htons>
 80121e2:	4603      	mov	r3, r0
 80121e4:	b2db      	uxtb	r3, r3
 80121e6:	f003 0304 	and.w	r3, r3, #4
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d006      	beq.n	80121fc <tcp_output+0x188>
 80121ee:	4b2f      	ldr	r3, [pc, #188]	; (80122ac <tcp_output+0x238>)
 80121f0:	f240 5236 	movw	r2, #1334	; 0x536
 80121f4:	4932      	ldr	r1, [pc, #200]	; (80122c0 <tcp_output+0x24c>)
 80121f6:	482f      	ldr	r0, [pc, #188]	; (80122b4 <tcp_output+0x240>)
 80121f8:	f001 fbec 	bl	80139d4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012200:	2b00      	cmp	r3, #0
 8012202:	d01f      	beq.n	8012244 <tcp_output+0x1d0>
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	8b5b      	ldrh	r3, [r3, #26]
 8012208:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801220c:	2b00      	cmp	r3, #0
 801220e:	d119      	bne.n	8012244 <tcp_output+0x1d0>
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012214:	2b00      	cmp	r3, #0
 8012216:	d00b      	beq.n	8012230 <tcp_output+0x1bc>
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d110      	bne.n	8012244 <tcp_output+0x1d0>
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012226:	891a      	ldrh	r2, [r3, #8]
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801222c:	429a      	cmp	r2, r3
 801222e:	d209      	bcs.n	8012244 <tcp_output+0x1d0>
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012236:	2b00      	cmp	r3, #0
 8012238:	d004      	beq.n	8012244 <tcp_output+0x1d0>
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012240:	2b08      	cmp	r3, #8
 8012242:	d901      	bls.n	8012248 <tcp_output+0x1d4>
 8012244:	2301      	movs	r3, #1
 8012246:	e000      	b.n	801224a <tcp_output+0x1d6>
 8012248:	2300      	movs	r3, #0
 801224a:	2b00      	cmp	r3, #0
 801224c:	d106      	bne.n	801225c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	8b5b      	ldrh	r3, [r3, #26]
 8012252:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012256:	2b00      	cmp	r3, #0
 8012258:	f000 80e4 	beq.w	8012424 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	7d1b      	ldrb	r3, [r3, #20]
 8012260:	2b02      	cmp	r3, #2
 8012262:	d00d      	beq.n	8012280 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012266:	68db      	ldr	r3, [r3, #12]
 8012268:	899b      	ldrh	r3, [r3, #12]
 801226a:	b29c      	uxth	r4, r3
 801226c:	2010      	movs	r0, #16
 801226e:	f7f6 fa3d 	bl	80086ec <lwip_htons>
 8012272:	4603      	mov	r3, r0
 8012274:	461a      	mov	r2, r3
 8012276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012278:	68db      	ldr	r3, [r3, #12]
 801227a:	4322      	orrs	r2, r4
 801227c:	b292      	uxth	r2, r2
 801227e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012280:	697a      	ldr	r2, [r7, #20]
 8012282:	6879      	ldr	r1, [r7, #4]
 8012284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012286:	f000 f909 	bl	801249c <tcp_output_segment>
 801228a:	4603      	mov	r3, r0
 801228c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801228e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d016      	beq.n	80122c4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	8b5b      	ldrh	r3, [r3, #26]
 801229a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801229e:	b29a      	uxth	r2, r3
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	835a      	strh	r2, [r3, #26]
      return err;
 80122a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122a8:	e0d3      	b.n	8012452 <tcp_output+0x3de>
 80122aa:	bf00      	nop
 80122ac:	08016f1c 	.word	0x08016f1c
 80122b0:	0801749c 	.word	0x0801749c
 80122b4:	08016fac 	.word	0x08016fac
 80122b8:	080174b4 	.word	0x080174b4
 80122bc:	2400748c 	.word	0x2400748c
 80122c0:	080174dc 	.word	0x080174dc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80122c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c6:	681a      	ldr	r2, [r3, #0]
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	7d1b      	ldrb	r3, [r3, #20]
 80122d0:	2b02      	cmp	r3, #2
 80122d2:	d006      	beq.n	80122e2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	8b5b      	ldrh	r3, [r3, #26]
 80122d8:	f023 0303 	bic.w	r3, r3, #3
 80122dc:	b29a      	uxth	r2, r3
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80122e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e4:	68db      	ldr	r3, [r3, #12]
 80122e6:	685b      	ldr	r3, [r3, #4]
 80122e8:	4618      	mov	r0, r3
 80122ea:	f7f6 fa14 	bl	8008716 <lwip_htonl>
 80122ee:	4604      	mov	r4, r0
 80122f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f2:	891b      	ldrh	r3, [r3, #8]
 80122f4:	461d      	mov	r5, r3
 80122f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f8:	68db      	ldr	r3, [r3, #12]
 80122fa:	899b      	ldrh	r3, [r3, #12]
 80122fc:	b29b      	uxth	r3, r3
 80122fe:	4618      	mov	r0, r3
 8012300:	f7f6 f9f4 	bl	80086ec <lwip_htons>
 8012304:	4603      	mov	r3, r0
 8012306:	b2db      	uxtb	r3, r3
 8012308:	f003 0303 	and.w	r3, r3, #3
 801230c:	2b00      	cmp	r3, #0
 801230e:	d001      	beq.n	8012314 <tcp_output+0x2a0>
 8012310:	2301      	movs	r3, #1
 8012312:	e000      	b.n	8012316 <tcp_output+0x2a2>
 8012314:	2300      	movs	r3, #0
 8012316:	442b      	add	r3, r5
 8012318:	4423      	add	r3, r4
 801231a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	1ad3      	subs	r3, r2, r3
 8012324:	2b00      	cmp	r3, #0
 8012326:	da02      	bge.n	801232e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	68ba      	ldr	r2, [r7, #8]
 801232c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012330:	891b      	ldrh	r3, [r3, #8]
 8012332:	461c      	mov	r4, r3
 8012334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012336:	68db      	ldr	r3, [r3, #12]
 8012338:	899b      	ldrh	r3, [r3, #12]
 801233a:	b29b      	uxth	r3, r3
 801233c:	4618      	mov	r0, r3
 801233e:	f7f6 f9d5 	bl	80086ec <lwip_htons>
 8012342:	4603      	mov	r3, r0
 8012344:	b2db      	uxtb	r3, r3
 8012346:	f003 0303 	and.w	r3, r3, #3
 801234a:	2b00      	cmp	r3, #0
 801234c:	d001      	beq.n	8012352 <tcp_output+0x2de>
 801234e:	2301      	movs	r3, #1
 8012350:	e000      	b.n	8012354 <tcp_output+0x2e0>
 8012352:	2300      	movs	r3, #0
 8012354:	4423      	add	r3, r4
 8012356:	2b00      	cmp	r3, #0
 8012358:	d049      	beq.n	80123ee <tcp_output+0x37a>
      seg->next = NULL;
 801235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235c:	2200      	movs	r2, #0
 801235e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012364:	2b00      	cmp	r3, #0
 8012366:	d105      	bne.n	8012374 <tcp_output+0x300>
        pcb->unacked = seg;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801236c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012370:	623b      	str	r3, [r7, #32]
 8012372:	e03f      	b.n	80123f4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012376:	68db      	ldr	r3, [r3, #12]
 8012378:	685b      	ldr	r3, [r3, #4]
 801237a:	4618      	mov	r0, r3
 801237c:	f7f6 f9cb 	bl	8008716 <lwip_htonl>
 8012380:	4604      	mov	r4, r0
 8012382:	6a3b      	ldr	r3, [r7, #32]
 8012384:	68db      	ldr	r3, [r3, #12]
 8012386:	685b      	ldr	r3, [r3, #4]
 8012388:	4618      	mov	r0, r3
 801238a:	f7f6 f9c4 	bl	8008716 <lwip_htonl>
 801238e:	4603      	mov	r3, r0
 8012390:	1ae3      	subs	r3, r4, r3
 8012392:	2b00      	cmp	r3, #0
 8012394:	da24      	bge.n	80123e0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	3370      	adds	r3, #112	; 0x70
 801239a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801239c:	e002      	b.n	80123a4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801239e:	69fb      	ldr	r3, [r7, #28]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80123a4:	69fb      	ldr	r3, [r7, #28]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d011      	beq.n	80123d0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80123ac:	69fb      	ldr	r3, [r7, #28]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	68db      	ldr	r3, [r3, #12]
 80123b2:	685b      	ldr	r3, [r3, #4]
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7f6 f9ae 	bl	8008716 <lwip_htonl>
 80123ba:	4604      	mov	r4, r0
 80123bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123be:	68db      	ldr	r3, [r3, #12]
 80123c0:	685b      	ldr	r3, [r3, #4]
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7f6 f9a7 	bl	8008716 <lwip_htonl>
 80123c8:	4603      	mov	r3, r0
 80123ca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	dbe6      	blt.n	801239e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80123d0:	69fb      	ldr	r3, [r7, #28]
 80123d2:	681a      	ldr	r2, [r3, #0]
 80123d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80123d8:	69fb      	ldr	r3, [r7, #28]
 80123da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123dc:	601a      	str	r2, [r3, #0]
 80123de:	e009      	b.n	80123f4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80123e0:	6a3b      	ldr	r3, [r7, #32]
 80123e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123e4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80123e6:	6a3b      	ldr	r3, [r7, #32]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	623b      	str	r3, [r7, #32]
 80123ec:	e002      	b.n	80123f4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80123ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123f0:	f7fb ff37 	bl	800e262 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80123fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d012      	beq.n	8012426 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012402:	68db      	ldr	r3, [r3, #12]
 8012404:	685b      	ldr	r3, [r3, #4]
 8012406:	4618      	mov	r0, r3
 8012408:	f7f6 f985 	bl	8008716 <lwip_htonl>
 801240c:	4602      	mov	r2, r0
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012412:	1ad3      	subs	r3, r2, r3
 8012414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012416:	8912      	ldrh	r2, [r2, #8]
 8012418:	4413      	add	r3, r2
  while (seg != NULL &&
 801241a:	69ba      	ldr	r2, [r7, #24]
 801241c:	429a      	cmp	r2, r3
 801241e:	f4bf aed9 	bcs.w	80121d4 <tcp_output+0x160>
 8012422:	e000      	b.n	8012426 <tcp_output+0x3b2>
      break;
 8012424:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801242a:	2b00      	cmp	r3, #0
 801242c:	d108      	bne.n	8012440 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2200      	movs	r2, #0
 8012432:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012436:	e004      	b.n	8012442 <tcp_output+0x3ce>
    goto output_done;
 8012438:	bf00      	nop
 801243a:	e002      	b.n	8012442 <tcp_output+0x3ce>
    goto output_done;
 801243c:	bf00      	nop
 801243e:	e000      	b.n	8012442 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012440:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	8b5b      	ldrh	r3, [r3, #26]
 8012446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801244a:	b29a      	uxth	r2, r3
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012450:	2300      	movs	r3, #0
}
 8012452:	4618      	mov	r0, r3
 8012454:	3728      	adds	r7, #40	; 0x28
 8012456:	46bd      	mov	sp, r7
 8012458:	bdb0      	pop	{r4, r5, r7, pc}
 801245a:	bf00      	nop

0801245c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b082      	sub	sp, #8
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d106      	bne.n	8012478 <tcp_output_segment_busy+0x1c>
 801246a:	4b09      	ldr	r3, [pc, #36]	; (8012490 <tcp_output_segment_busy+0x34>)
 801246c:	f240 529a 	movw	r2, #1434	; 0x59a
 8012470:	4908      	ldr	r1, [pc, #32]	; (8012494 <tcp_output_segment_busy+0x38>)
 8012472:	4809      	ldr	r0, [pc, #36]	; (8012498 <tcp_output_segment_busy+0x3c>)
 8012474:	f001 faae 	bl	80139d4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	685b      	ldr	r3, [r3, #4]
 801247c:	7b9b      	ldrb	r3, [r3, #14]
 801247e:	2b01      	cmp	r3, #1
 8012480:	d001      	beq.n	8012486 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012482:	2301      	movs	r3, #1
 8012484:	e000      	b.n	8012488 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012486:	2300      	movs	r3, #0
}
 8012488:	4618      	mov	r0, r3
 801248a:	3708      	adds	r7, #8
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}
 8012490:	08016f1c 	.word	0x08016f1c
 8012494:	080174f4 	.word	0x080174f4
 8012498:	08016fac 	.word	0x08016fac

0801249c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801249c:	b5b0      	push	{r4, r5, r7, lr}
 801249e:	b08c      	sub	sp, #48	; 0x30
 80124a0:	af04      	add	r7, sp, #16
 80124a2:	60f8      	str	r0, [r7, #12]
 80124a4:	60b9      	str	r1, [r7, #8]
 80124a6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d106      	bne.n	80124bc <tcp_output_segment+0x20>
 80124ae:	4b63      	ldr	r3, [pc, #396]	; (801263c <tcp_output_segment+0x1a0>)
 80124b0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80124b4:	4962      	ldr	r1, [pc, #392]	; (8012640 <tcp_output_segment+0x1a4>)
 80124b6:	4863      	ldr	r0, [pc, #396]	; (8012644 <tcp_output_segment+0x1a8>)
 80124b8:	f001 fa8c 	bl	80139d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d106      	bne.n	80124d0 <tcp_output_segment+0x34>
 80124c2:	4b5e      	ldr	r3, [pc, #376]	; (801263c <tcp_output_segment+0x1a0>)
 80124c4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80124c8:	495f      	ldr	r1, [pc, #380]	; (8012648 <tcp_output_segment+0x1ac>)
 80124ca:	485e      	ldr	r0, [pc, #376]	; (8012644 <tcp_output_segment+0x1a8>)
 80124cc:	f001 fa82 	bl	80139d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d106      	bne.n	80124e4 <tcp_output_segment+0x48>
 80124d6:	4b59      	ldr	r3, [pc, #356]	; (801263c <tcp_output_segment+0x1a0>)
 80124d8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80124dc:	495b      	ldr	r1, [pc, #364]	; (801264c <tcp_output_segment+0x1b0>)
 80124de:	4859      	ldr	r0, [pc, #356]	; (8012644 <tcp_output_segment+0x1a8>)
 80124e0:	f001 fa78 	bl	80139d4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80124e4:	68f8      	ldr	r0, [r7, #12]
 80124e6:	f7ff ffb9 	bl	801245c <tcp_output_segment_busy>
 80124ea:	4603      	mov	r3, r0
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d001      	beq.n	80124f4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80124f0:	2300      	movs	r3, #0
 80124f2:	e09f      	b.n	8012634 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	68dc      	ldr	r4, [r3, #12]
 80124fc:	4610      	mov	r0, r2
 80124fe:	f7f6 f90a 	bl	8008716 <lwip_htonl>
 8012502:	4603      	mov	r3, r0
 8012504:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	68dc      	ldr	r4, [r3, #12]
 801250e:	4610      	mov	r0, r2
 8012510:	f7f6 f8ec 	bl	80086ec <lwip_htons>
 8012514:	4603      	mov	r3, r0
 8012516:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801251c:	68ba      	ldr	r2, [r7, #8]
 801251e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012520:	441a      	add	r2, r3
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	68db      	ldr	r3, [r3, #12]
 801252a:	3314      	adds	r3, #20
 801252c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	7a9b      	ldrb	r3, [r3, #10]
 8012532:	f003 0301 	and.w	r3, r3, #1
 8012536:	2b00      	cmp	r3, #0
 8012538:	d015      	beq.n	8012566 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	3304      	adds	r3, #4
 801253e:	461a      	mov	r2, r3
 8012540:	6879      	ldr	r1, [r7, #4]
 8012542:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012546:	f7fc fa33 	bl	800e9b0 <tcp_eff_send_mss_netif>
 801254a:	4603      	mov	r3, r0
 801254c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801254e:	8b7b      	ldrh	r3, [r7, #26]
 8012550:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012554:	4618      	mov	r0, r3
 8012556:	f7f6 f8de 	bl	8008716 <lwip_htonl>
 801255a:	4602      	mov	r2, r0
 801255c:	69fb      	ldr	r3, [r7, #28]
 801255e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012560:	69fb      	ldr	r3, [r7, #28]
 8012562:	3304      	adds	r3, #4
 8012564:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801256c:	2b00      	cmp	r3, #0
 801256e:	da02      	bge.n	8012576 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012570:	68bb      	ldr	r3, [r7, #8]
 8012572:	2200      	movs	r2, #0
 8012574:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801257a:	2b00      	cmp	r3, #0
 801257c:	d10c      	bne.n	8012598 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801257e:	4b34      	ldr	r3, [pc, #208]	; (8012650 <tcp_output_segment+0x1b4>)
 8012580:	681a      	ldr	r2, [r3, #0]
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	68db      	ldr	r3, [r3, #12]
 801258a:	685b      	ldr	r3, [r3, #4]
 801258c:	4618      	mov	r0, r3
 801258e:	f7f6 f8c2 	bl	8008716 <lwip_htonl>
 8012592:	4602      	mov	r2, r0
 8012594:	68bb      	ldr	r3, [r7, #8]
 8012596:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	68da      	ldr	r2, [r3, #12]
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	685b      	ldr	r3, [r3, #4]
 80125a2:	1ad3      	subs	r3, r2, r3
 80125a4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	685b      	ldr	r3, [r3, #4]
 80125aa:	8959      	ldrh	r1, [r3, #10]
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	685b      	ldr	r3, [r3, #4]
 80125b0:	8b3a      	ldrh	r2, [r7, #24]
 80125b2:	1a8a      	subs	r2, r1, r2
 80125b4:	b292      	uxth	r2, r2
 80125b6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	8919      	ldrh	r1, [r3, #8]
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	685b      	ldr	r3, [r3, #4]
 80125c2:	8b3a      	ldrh	r2, [r7, #24]
 80125c4:	1a8a      	subs	r2, r1, r2
 80125c6:	b292      	uxth	r2, r2
 80125c8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	685b      	ldr	r3, [r3, #4]
 80125ce:	68fa      	ldr	r2, [r7, #12]
 80125d0:	68d2      	ldr	r2, [r2, #12]
 80125d2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	68db      	ldr	r3, [r3, #12]
 80125d8:	2200      	movs	r2, #0
 80125da:	741a      	strb	r2, [r3, #16]
 80125dc:	2200      	movs	r2, #0
 80125de:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	68db      	ldr	r3, [r3, #12]
 80125e4:	f103 0214 	add.w	r2, r3, #20
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	7a9b      	ldrb	r3, [r3, #10]
 80125ec:	009b      	lsls	r3, r3, #2
 80125ee:	f003 0304 	and.w	r3, r3, #4
 80125f2:	4413      	add	r3, r2
 80125f4:	69fa      	ldr	r2, [r7, #28]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d006      	beq.n	8012608 <tcp_output_segment+0x16c>
 80125fa:	4b10      	ldr	r3, [pc, #64]	; (801263c <tcp_output_segment+0x1a0>)
 80125fc:	f240 621c 	movw	r2, #1564	; 0x61c
 8012600:	4914      	ldr	r1, [pc, #80]	; (8012654 <tcp_output_segment+0x1b8>)
 8012602:	4810      	ldr	r0, [pc, #64]	; (8012644 <tcp_output_segment+0x1a8>)
 8012604:	f001 f9e6 	bl	80139d4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	6858      	ldr	r0, [r3, #4]
 801260c:	68b9      	ldr	r1, [r7, #8]
 801260e:	68bb      	ldr	r3, [r7, #8]
 8012610:	1d1c      	adds	r4, r3, #4
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	7add      	ldrb	r5, [r3, #11]
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	7a9b      	ldrb	r3, [r3, #10]
 801261a:	687a      	ldr	r2, [r7, #4]
 801261c:	9202      	str	r2, [sp, #8]
 801261e:	2206      	movs	r2, #6
 8012620:	9201      	str	r2, [sp, #4]
 8012622:	9300      	str	r3, [sp, #0]
 8012624:	462b      	mov	r3, r5
 8012626:	4622      	mov	r2, r4
 8012628:	f7f7 fcf6 	bl	800a018 <ip4_output_if>
 801262c:	4603      	mov	r3, r0
 801262e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012630:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012634:	4618      	mov	r0, r3
 8012636:	3720      	adds	r7, #32
 8012638:	46bd      	mov	sp, r7
 801263a:	bdb0      	pop	{r4, r5, r7, pc}
 801263c:	08016f1c 	.word	0x08016f1c
 8012640:	0801751c 	.word	0x0801751c
 8012644:	08016fac 	.word	0x08016fac
 8012648:	0801753c 	.word	0x0801753c
 801264c:	0801755c 	.word	0x0801755c
 8012650:	24007440 	.word	0x24007440
 8012654:	08017580 	.word	0x08017580

08012658 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012658:	b5b0      	push	{r4, r5, r7, lr}
 801265a:	b084      	sub	sp, #16
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d106      	bne.n	8012674 <tcp_rexmit_rto_prepare+0x1c>
 8012666:	4b31      	ldr	r3, [pc, #196]	; (801272c <tcp_rexmit_rto_prepare+0xd4>)
 8012668:	f240 6263 	movw	r2, #1635	; 0x663
 801266c:	4930      	ldr	r1, [pc, #192]	; (8012730 <tcp_rexmit_rto_prepare+0xd8>)
 801266e:	4831      	ldr	r0, [pc, #196]	; (8012734 <tcp_rexmit_rto_prepare+0xdc>)
 8012670:	f001 f9b0 	bl	80139d4 <iprintf>

  if (pcb->unacked == NULL) {
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012678:	2b00      	cmp	r3, #0
 801267a:	d102      	bne.n	8012682 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801267c:	f06f 0305 	mvn.w	r3, #5
 8012680:	e050      	b.n	8012724 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012686:	60fb      	str	r3, [r7, #12]
 8012688:	e00b      	b.n	80126a2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801268a:	68f8      	ldr	r0, [r7, #12]
 801268c:	f7ff fee6 	bl	801245c <tcp_output_segment_busy>
 8012690:	4603      	mov	r3, r0
 8012692:	2b00      	cmp	r3, #0
 8012694:	d002      	beq.n	801269c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012696:	f06f 0305 	mvn.w	r3, #5
 801269a:	e043      	b.n	8012724 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	60fb      	str	r3, [r7, #12]
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d1ef      	bne.n	801268a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80126aa:	68f8      	ldr	r0, [r7, #12]
 80126ac:	f7ff fed6 	bl	801245c <tcp_output_segment_busy>
 80126b0:	4603      	mov	r3, r0
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d002      	beq.n	80126bc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80126b6:	f06f 0305 	mvn.w	r3, #5
 80126ba:	e033      	b.n	8012724 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2200      	movs	r2, #0
 80126d0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	8b5b      	ldrh	r3, [r3, #26]
 80126d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80126da:	b29a      	uxth	r2, r3
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	68db      	ldr	r3, [r3, #12]
 80126e4:	685b      	ldr	r3, [r3, #4]
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7f6 f815 	bl	8008716 <lwip_htonl>
 80126ec:	4604      	mov	r4, r0
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	891b      	ldrh	r3, [r3, #8]
 80126f2:	461d      	mov	r5, r3
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	68db      	ldr	r3, [r3, #12]
 80126f8:	899b      	ldrh	r3, [r3, #12]
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	4618      	mov	r0, r3
 80126fe:	f7f5 fff5 	bl	80086ec <lwip_htons>
 8012702:	4603      	mov	r3, r0
 8012704:	b2db      	uxtb	r3, r3
 8012706:	f003 0303 	and.w	r3, r3, #3
 801270a:	2b00      	cmp	r3, #0
 801270c:	d001      	beq.n	8012712 <tcp_rexmit_rto_prepare+0xba>
 801270e:	2301      	movs	r3, #1
 8012710:	e000      	b.n	8012714 <tcp_rexmit_rto_prepare+0xbc>
 8012712:	2300      	movs	r3, #0
 8012714:	442b      	add	r3, r5
 8012716:	18e2      	adds	r2, r4, r3
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2200      	movs	r2, #0
 8012720:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012722:	2300      	movs	r3, #0
}
 8012724:	4618      	mov	r0, r3
 8012726:	3710      	adds	r7, #16
 8012728:	46bd      	mov	sp, r7
 801272a:	bdb0      	pop	{r4, r5, r7, pc}
 801272c:	08016f1c 	.word	0x08016f1c
 8012730:	08017594 	.word	0x08017594
 8012734:	08016fac 	.word	0x08016fac

08012738 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d106      	bne.n	8012754 <tcp_rexmit_rto_commit+0x1c>
 8012746:	4b0d      	ldr	r3, [pc, #52]	; (801277c <tcp_rexmit_rto_commit+0x44>)
 8012748:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801274c:	490c      	ldr	r1, [pc, #48]	; (8012780 <tcp_rexmit_rto_commit+0x48>)
 801274e:	480d      	ldr	r0, [pc, #52]	; (8012784 <tcp_rexmit_rto_commit+0x4c>)
 8012750:	f001 f940 	bl	80139d4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801275a:	2bff      	cmp	r3, #255	; 0xff
 801275c:	d007      	beq.n	801276e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012764:	3301      	adds	r3, #1
 8012766:	b2da      	uxtb	r2, r3
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f7ff fc80 	bl	8012074 <tcp_output>
}
 8012774:	bf00      	nop
 8012776:	3708      	adds	r7, #8
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}
 801277c:	08016f1c 	.word	0x08016f1c
 8012780:	080175b8 	.word	0x080175b8
 8012784:	08016fac 	.word	0x08016fac

08012788 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b082      	sub	sp, #8
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d106      	bne.n	80127a4 <tcp_rexmit_rto+0x1c>
 8012796:	4b0a      	ldr	r3, [pc, #40]	; (80127c0 <tcp_rexmit_rto+0x38>)
 8012798:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801279c:	4909      	ldr	r1, [pc, #36]	; (80127c4 <tcp_rexmit_rto+0x3c>)
 801279e:	480a      	ldr	r0, [pc, #40]	; (80127c8 <tcp_rexmit_rto+0x40>)
 80127a0:	f001 f918 	bl	80139d4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f7ff ff57 	bl	8012658 <tcp_rexmit_rto_prepare>
 80127aa:	4603      	mov	r3, r0
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d102      	bne.n	80127b6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f7ff ffc1 	bl	8012738 <tcp_rexmit_rto_commit>
  }
}
 80127b6:	bf00      	nop
 80127b8:	3708      	adds	r7, #8
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}
 80127be:	bf00      	nop
 80127c0:	08016f1c 	.word	0x08016f1c
 80127c4:	080175dc 	.word	0x080175dc
 80127c8:	08016fac 	.word	0x08016fac

080127cc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80127cc:	b590      	push	{r4, r7, lr}
 80127ce:	b085      	sub	sp, #20
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d106      	bne.n	80127e8 <tcp_rexmit+0x1c>
 80127da:	4b2f      	ldr	r3, [pc, #188]	; (8012898 <tcp_rexmit+0xcc>)
 80127dc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80127e0:	492e      	ldr	r1, [pc, #184]	; (801289c <tcp_rexmit+0xd0>)
 80127e2:	482f      	ldr	r0, [pc, #188]	; (80128a0 <tcp_rexmit+0xd4>)
 80127e4:	f001 f8f6 	bl	80139d4 <iprintf>

  if (pcb->unacked == NULL) {
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d102      	bne.n	80127f6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80127f0:	f06f 0305 	mvn.w	r3, #5
 80127f4:	e04c      	b.n	8012890 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127fa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80127fc:	68b8      	ldr	r0, [r7, #8]
 80127fe:	f7ff fe2d 	bl	801245c <tcp_output_segment_busy>
 8012802:	4603      	mov	r3, r0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d002      	beq.n	801280e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012808:	f06f 0305 	mvn.w	r3, #5
 801280c:	e040      	b.n	8012890 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	681a      	ldr	r2, [r3, #0]
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	336c      	adds	r3, #108	; 0x6c
 801281a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801281c:	e002      	b.n	8012824 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d011      	beq.n	8012850 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	68db      	ldr	r3, [r3, #12]
 8012832:	685b      	ldr	r3, [r3, #4]
 8012834:	4618      	mov	r0, r3
 8012836:	f7f5 ff6e 	bl	8008716 <lwip_htonl>
 801283a:	4604      	mov	r4, r0
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	68db      	ldr	r3, [r3, #12]
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	4618      	mov	r0, r3
 8012844:	f7f5 ff67 	bl	8008716 <lwip_htonl>
 8012848:	4603      	mov	r3, r0
 801284a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801284c:	2b00      	cmp	r3, #0
 801284e:	dbe6      	blt.n	801281e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	681a      	ldr	r2, [r3, #0]
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	68ba      	ldr	r2, [r7, #8]
 801285c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d103      	bne.n	801286e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	2200      	movs	r2, #0
 801286a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012874:	2bff      	cmp	r3, #255	; 0xff
 8012876:	d007      	beq.n	8012888 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801287e:	3301      	adds	r3, #1
 8012880:	b2da      	uxtb	r2, r3
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2200      	movs	r2, #0
 801288c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801288e:	2300      	movs	r3, #0
}
 8012890:	4618      	mov	r0, r3
 8012892:	3714      	adds	r7, #20
 8012894:	46bd      	mov	sp, r7
 8012896:	bd90      	pop	{r4, r7, pc}
 8012898:	08016f1c 	.word	0x08016f1c
 801289c:	080175f8 	.word	0x080175f8
 80128a0:	08016fac 	.word	0x08016fac

080128a4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b082      	sub	sp, #8
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d106      	bne.n	80128c0 <tcp_rexmit_fast+0x1c>
 80128b2:	4b2a      	ldr	r3, [pc, #168]	; (801295c <tcp_rexmit_fast+0xb8>)
 80128b4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80128b8:	4929      	ldr	r1, [pc, #164]	; (8012960 <tcp_rexmit_fast+0xbc>)
 80128ba:	482a      	ldr	r0, [pc, #168]	; (8012964 <tcp_rexmit_fast+0xc0>)
 80128bc:	f001 f88a 	bl	80139d4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d045      	beq.n	8012954 <tcp_rexmit_fast+0xb0>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	8b5b      	ldrh	r3, [r3, #26]
 80128cc:	f003 0304 	and.w	r3, r3, #4
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d13f      	bne.n	8012954 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f7ff ff79 	bl	80127cc <tcp_rexmit>
 80128da:	4603      	mov	r3, r0
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d139      	bne.n	8012954 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80128ec:	4293      	cmp	r3, r2
 80128ee:	bf28      	it	cs
 80128f0:	4613      	movcs	r3, r2
 80128f2:	b29b      	uxth	r3, r3
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	da00      	bge.n	80128fa <tcp_rexmit_fast+0x56>
 80128f8:	3301      	adds	r3, #1
 80128fa:	105b      	asrs	r3, r3, #1
 80128fc:	b29a      	uxth	r2, r3
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801290a:	461a      	mov	r2, r3
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012910:	005b      	lsls	r3, r3, #1
 8012912:	429a      	cmp	r2, r3
 8012914:	d206      	bcs.n	8012924 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801291a:	005b      	lsls	r3, r3, #1
 801291c:	b29a      	uxth	r2, r3
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801292e:	4619      	mov	r1, r3
 8012930:	0049      	lsls	r1, r1, #1
 8012932:	440b      	add	r3, r1
 8012934:	b29b      	uxth	r3, r3
 8012936:	4413      	add	r3, r2
 8012938:	b29a      	uxth	r2, r3
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	8b5b      	ldrh	r3, [r3, #26]
 8012944:	f043 0304 	orr.w	r3, r3, #4
 8012948:	b29a      	uxth	r2, r3
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2200      	movs	r2, #0
 8012952:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012954:	bf00      	nop
 8012956:	3708      	adds	r7, #8
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}
 801295c:	08016f1c 	.word	0x08016f1c
 8012960:	08017610 	.word	0x08017610
 8012964:	08016fac 	.word	0x08016fac

08012968 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b086      	sub	sp, #24
 801296c:	af00      	add	r7, sp, #0
 801296e:	60f8      	str	r0, [r7, #12]
 8012970:	607b      	str	r3, [r7, #4]
 8012972:	460b      	mov	r3, r1
 8012974:	817b      	strh	r3, [r7, #10]
 8012976:	4613      	mov	r3, r2
 8012978:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801297a:	897a      	ldrh	r2, [r7, #10]
 801297c:	893b      	ldrh	r3, [r7, #8]
 801297e:	4413      	add	r3, r2
 8012980:	b29b      	uxth	r3, r3
 8012982:	3314      	adds	r3, #20
 8012984:	b29b      	uxth	r3, r3
 8012986:	f44f 7220 	mov.w	r2, #640	; 0x280
 801298a:	4619      	mov	r1, r3
 801298c:	2022      	movs	r0, #34	; 0x22
 801298e:	f7f9 fbff 	bl	800c190 <pbuf_alloc>
 8012992:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d04d      	beq.n	8012a36 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801299a:	897b      	ldrh	r3, [r7, #10]
 801299c:	3313      	adds	r3, #19
 801299e:	697a      	ldr	r2, [r7, #20]
 80129a0:	8952      	ldrh	r2, [r2, #10]
 80129a2:	4293      	cmp	r3, r2
 80129a4:	db06      	blt.n	80129b4 <tcp_output_alloc_header_common+0x4c>
 80129a6:	4b26      	ldr	r3, [pc, #152]	; (8012a40 <tcp_output_alloc_header_common+0xd8>)
 80129a8:	f240 7223 	movw	r2, #1827	; 0x723
 80129ac:	4925      	ldr	r1, [pc, #148]	; (8012a44 <tcp_output_alloc_header_common+0xdc>)
 80129ae:	4826      	ldr	r0, [pc, #152]	; (8012a48 <tcp_output_alloc_header_common+0xe0>)
 80129b0:	f001 f810 	bl	80139d4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	685b      	ldr	r3, [r3, #4]
 80129b8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80129ba:	8c3b      	ldrh	r3, [r7, #32]
 80129bc:	4618      	mov	r0, r3
 80129be:	f7f5 fe95 	bl	80086ec <lwip_htons>
 80129c2:	4603      	mov	r3, r0
 80129c4:	461a      	mov	r2, r3
 80129c6:	693b      	ldr	r3, [r7, #16]
 80129c8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80129ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129cc:	4618      	mov	r0, r3
 80129ce:	f7f5 fe8d 	bl	80086ec <lwip_htons>
 80129d2:	4603      	mov	r3, r0
 80129d4:	461a      	mov	r2, r3
 80129d6:	693b      	ldr	r3, [r7, #16]
 80129d8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	687a      	ldr	r2, [r7, #4]
 80129de:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80129e0:	68f8      	ldr	r0, [r7, #12]
 80129e2:	f7f5 fe98 	bl	8008716 <lwip_htonl>
 80129e6:	4602      	mov	r2, r0
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80129ec:	897b      	ldrh	r3, [r7, #10]
 80129ee:	089b      	lsrs	r3, r3, #2
 80129f0:	b29b      	uxth	r3, r3
 80129f2:	3305      	adds	r3, #5
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	031b      	lsls	r3, r3, #12
 80129f8:	b29a      	uxth	r2, r3
 80129fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80129fe:	b29b      	uxth	r3, r3
 8012a00:	4313      	orrs	r3, r2
 8012a02:	b29b      	uxth	r3, r3
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7f5 fe71 	bl	80086ec <lwip_htons>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	461a      	mov	r2, r3
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012a12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7f5 fe69 	bl	80086ec <lwip_htons>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	461a      	mov	r2, r3
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	2200      	movs	r2, #0
 8012a26:	741a      	strb	r2, [r3, #16]
 8012a28:	2200      	movs	r2, #0
 8012a2a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012a2c:	693b      	ldr	r3, [r7, #16]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	749a      	strb	r2, [r3, #18]
 8012a32:	2200      	movs	r2, #0
 8012a34:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012a36:	697b      	ldr	r3, [r7, #20]
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	3718      	adds	r7, #24
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}
 8012a40:	08016f1c 	.word	0x08016f1c
 8012a44:	08017630 	.word	0x08017630
 8012a48:	08016fac 	.word	0x08016fac

08012a4c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012a4c:	b5b0      	push	{r4, r5, r7, lr}
 8012a4e:	b08a      	sub	sp, #40	; 0x28
 8012a50:	af04      	add	r7, sp, #16
 8012a52:	60f8      	str	r0, [r7, #12]
 8012a54:	607b      	str	r3, [r7, #4]
 8012a56:	460b      	mov	r3, r1
 8012a58:	817b      	strh	r3, [r7, #10]
 8012a5a:	4613      	mov	r3, r2
 8012a5c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d106      	bne.n	8012a72 <tcp_output_alloc_header+0x26>
 8012a64:	4b15      	ldr	r3, [pc, #84]	; (8012abc <tcp_output_alloc_header+0x70>)
 8012a66:	f240 7242 	movw	r2, #1858	; 0x742
 8012a6a:	4915      	ldr	r1, [pc, #84]	; (8012ac0 <tcp_output_alloc_header+0x74>)
 8012a6c:	4815      	ldr	r0, [pc, #84]	; (8012ac4 <tcp_output_alloc_header+0x78>)
 8012a6e:	f000 ffb1 	bl	80139d4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	8adb      	ldrh	r3, [r3, #22]
 8012a7a:	68fa      	ldr	r2, [r7, #12]
 8012a7c:	8b12      	ldrh	r2, [r2, #24]
 8012a7e:	68f9      	ldr	r1, [r7, #12]
 8012a80:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012a82:	893d      	ldrh	r5, [r7, #8]
 8012a84:	897c      	ldrh	r4, [r7, #10]
 8012a86:	9103      	str	r1, [sp, #12]
 8012a88:	2110      	movs	r1, #16
 8012a8a:	9102      	str	r1, [sp, #8]
 8012a8c:	9201      	str	r2, [sp, #4]
 8012a8e:	9300      	str	r3, [sp, #0]
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	462a      	mov	r2, r5
 8012a94:	4621      	mov	r1, r4
 8012a96:	f7ff ff67 	bl	8012968 <tcp_output_alloc_header_common>
 8012a9a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012a9c:	697b      	ldr	r3, [r7, #20]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d006      	beq.n	8012ab0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aa6:	68fa      	ldr	r2, [r7, #12]
 8012aa8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012aaa:	441a      	add	r2, r3
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012ab0:	697b      	ldr	r3, [r7, #20]
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3718      	adds	r7, #24
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8012aba:	bf00      	nop
 8012abc:	08016f1c 	.word	0x08016f1c
 8012ac0:	08017660 	.word	0x08017660
 8012ac4:	08016fac 	.word	0x08016fac

08012ac8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b088      	sub	sp, #32
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	60f8      	str	r0, [r7, #12]
 8012ad0:	60b9      	str	r1, [r7, #8]
 8012ad2:	4611      	mov	r1, r2
 8012ad4:	461a      	mov	r2, r3
 8012ad6:	460b      	mov	r3, r1
 8012ad8:	71fb      	strb	r3, [r7, #7]
 8012ada:	4613      	mov	r3, r2
 8012adc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d106      	bne.n	8012af6 <tcp_output_fill_options+0x2e>
 8012ae8:	4b13      	ldr	r3, [pc, #76]	; (8012b38 <tcp_output_fill_options+0x70>)
 8012aea:	f240 7256 	movw	r2, #1878	; 0x756
 8012aee:	4913      	ldr	r1, [pc, #76]	; (8012b3c <tcp_output_fill_options+0x74>)
 8012af0:	4813      	ldr	r0, [pc, #76]	; (8012b40 <tcp_output_fill_options+0x78>)
 8012af2:	f000 ff6f 	bl	80139d4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	685b      	ldr	r3, [r3, #4]
 8012afa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012afc:	69bb      	ldr	r3, [r7, #24]
 8012afe:	3314      	adds	r3, #20
 8012b00:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012b02:	69bb      	ldr	r3, [r7, #24]
 8012b04:	f103 0214 	add.w	r2, r3, #20
 8012b08:	8bfb      	ldrh	r3, [r7, #30]
 8012b0a:	009b      	lsls	r3, r3, #2
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	79fb      	ldrb	r3, [r7, #7]
 8012b10:	009b      	lsls	r3, r3, #2
 8012b12:	f003 0304 	and.w	r3, r3, #4
 8012b16:	440b      	add	r3, r1
 8012b18:	4413      	add	r3, r2
 8012b1a:	697a      	ldr	r2, [r7, #20]
 8012b1c:	429a      	cmp	r2, r3
 8012b1e:	d006      	beq.n	8012b2e <tcp_output_fill_options+0x66>
 8012b20:	4b05      	ldr	r3, [pc, #20]	; (8012b38 <tcp_output_fill_options+0x70>)
 8012b22:	f240 7275 	movw	r2, #1909	; 0x775
 8012b26:	4907      	ldr	r1, [pc, #28]	; (8012b44 <tcp_output_fill_options+0x7c>)
 8012b28:	4805      	ldr	r0, [pc, #20]	; (8012b40 <tcp_output_fill_options+0x78>)
 8012b2a:	f000 ff53 	bl	80139d4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012b2e:	bf00      	nop
 8012b30:	3720      	adds	r7, #32
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}
 8012b36:	bf00      	nop
 8012b38:	08016f1c 	.word	0x08016f1c
 8012b3c:	08017688 	.word	0x08017688
 8012b40:	08016fac 	.word	0x08016fac
 8012b44:	08017580 	.word	0x08017580

08012b48 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b08a      	sub	sp, #40	; 0x28
 8012b4c:	af04      	add	r7, sp, #16
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	607a      	str	r2, [r7, #4]
 8012b54:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d106      	bne.n	8012b6a <tcp_output_control_segment+0x22>
 8012b5c:	4b1c      	ldr	r3, [pc, #112]	; (8012bd0 <tcp_output_control_segment+0x88>)
 8012b5e:	f240 7287 	movw	r2, #1927	; 0x787
 8012b62:	491c      	ldr	r1, [pc, #112]	; (8012bd4 <tcp_output_control_segment+0x8c>)
 8012b64:	481c      	ldr	r0, [pc, #112]	; (8012bd8 <tcp_output_control_segment+0x90>)
 8012b66:	f000 ff35 	bl	80139d4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012b6a:	683a      	ldr	r2, [r7, #0]
 8012b6c:	6879      	ldr	r1, [r7, #4]
 8012b6e:	68f8      	ldr	r0, [r7, #12]
 8012b70:	f7fe fae8 	bl	8011144 <tcp_route>
 8012b74:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d102      	bne.n	8012b82 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012b7c:	23fc      	movs	r3, #252	; 0xfc
 8012b7e:	75fb      	strb	r3, [r7, #23]
 8012b80:	e01c      	b.n	8012bbc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d006      	beq.n	8012b96 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	7adb      	ldrb	r3, [r3, #11]
 8012b8c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	7a9b      	ldrb	r3, [r3, #10]
 8012b92:	757b      	strb	r3, [r7, #21]
 8012b94:	e003      	b.n	8012b9e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012b96:	23ff      	movs	r3, #255	; 0xff
 8012b98:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012b9e:	7dba      	ldrb	r2, [r7, #22]
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	9302      	str	r3, [sp, #8]
 8012ba4:	2306      	movs	r3, #6
 8012ba6:	9301      	str	r3, [sp, #4]
 8012ba8:	7d7b      	ldrb	r3, [r7, #21]
 8012baa:	9300      	str	r3, [sp, #0]
 8012bac:	4613      	mov	r3, r2
 8012bae:	683a      	ldr	r2, [r7, #0]
 8012bb0:	6879      	ldr	r1, [r7, #4]
 8012bb2:	68b8      	ldr	r0, [r7, #8]
 8012bb4:	f7f7 fa30 	bl	800a018 <ip4_output_if>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012bbc:	68b8      	ldr	r0, [r7, #8]
 8012bbe:	f7f9 fdcb 	bl	800c758 <pbuf_free>
  return err;
 8012bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	3718      	adds	r7, #24
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}
 8012bce:	bf00      	nop
 8012bd0:	08016f1c 	.word	0x08016f1c
 8012bd4:	080176b0 	.word	0x080176b0
 8012bd8:	08016fac 	.word	0x08016fac

08012bdc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012bdc:	b590      	push	{r4, r7, lr}
 8012bde:	b08b      	sub	sp, #44	; 0x2c
 8012be0:	af04      	add	r7, sp, #16
 8012be2:	60f8      	str	r0, [r7, #12]
 8012be4:	60b9      	str	r1, [r7, #8]
 8012be6:	607a      	str	r2, [r7, #4]
 8012be8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d106      	bne.n	8012bfe <tcp_rst+0x22>
 8012bf0:	4b1f      	ldr	r3, [pc, #124]	; (8012c70 <tcp_rst+0x94>)
 8012bf2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012bf6:	491f      	ldr	r1, [pc, #124]	; (8012c74 <tcp_rst+0x98>)
 8012bf8:	481f      	ldr	r0, [pc, #124]	; (8012c78 <tcp_rst+0x9c>)
 8012bfa:	f000 feeb 	bl	80139d4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d106      	bne.n	8012c12 <tcp_rst+0x36>
 8012c04:	4b1a      	ldr	r3, [pc, #104]	; (8012c70 <tcp_rst+0x94>)
 8012c06:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012c0a:	491c      	ldr	r1, [pc, #112]	; (8012c7c <tcp_rst+0xa0>)
 8012c0c:	481a      	ldr	r0, [pc, #104]	; (8012c78 <tcp_rst+0x9c>)
 8012c0e:	f000 fee1 	bl	80139d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012c12:	2300      	movs	r3, #0
 8012c14:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012c16:	f246 0308 	movw	r3, #24584	; 0x6008
 8012c1a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012c1c:	7dfb      	ldrb	r3, [r7, #23]
 8012c1e:	b29c      	uxth	r4, r3
 8012c20:	68b8      	ldr	r0, [r7, #8]
 8012c22:	f7f5 fd78 	bl	8008716 <lwip_htonl>
 8012c26:	4602      	mov	r2, r0
 8012c28:	8abb      	ldrh	r3, [r7, #20]
 8012c2a:	9303      	str	r3, [sp, #12]
 8012c2c:	2314      	movs	r3, #20
 8012c2e:	9302      	str	r3, [sp, #8]
 8012c30:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012c32:	9301      	str	r3, [sp, #4]
 8012c34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012c36:	9300      	str	r3, [sp, #0]
 8012c38:	4613      	mov	r3, r2
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	4621      	mov	r1, r4
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	f7ff fe92 	bl	8012968 <tcp_output_alloc_header_common>
 8012c44:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d00c      	beq.n	8012c66 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012c4c:	7dfb      	ldrb	r3, [r7, #23]
 8012c4e:	2200      	movs	r2, #0
 8012c50:	6939      	ldr	r1, [r7, #16]
 8012c52:	68f8      	ldr	r0, [r7, #12]
 8012c54:	f7ff ff38 	bl	8012ac8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c5a:	683a      	ldr	r2, [r7, #0]
 8012c5c:	6939      	ldr	r1, [r7, #16]
 8012c5e:	68f8      	ldr	r0, [r7, #12]
 8012c60:	f7ff ff72 	bl	8012b48 <tcp_output_control_segment>
 8012c64:	e000      	b.n	8012c68 <tcp_rst+0x8c>
    return;
 8012c66:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012c68:	371c      	adds	r7, #28
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd90      	pop	{r4, r7, pc}
 8012c6e:	bf00      	nop
 8012c70:	08016f1c 	.word	0x08016f1c
 8012c74:	080176dc 	.word	0x080176dc
 8012c78:	08016fac 	.word	0x08016fac
 8012c7c:	080176f8 	.word	0x080176f8

08012c80 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012c80:	b590      	push	{r4, r7, lr}
 8012c82:	b087      	sub	sp, #28
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012c88:	2300      	movs	r3, #0
 8012c8a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d106      	bne.n	8012ca4 <tcp_send_empty_ack+0x24>
 8012c96:	4b28      	ldr	r3, [pc, #160]	; (8012d38 <tcp_send_empty_ack+0xb8>)
 8012c98:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012c9c:	4927      	ldr	r1, [pc, #156]	; (8012d3c <tcp_send_empty_ack+0xbc>)
 8012c9e:	4828      	ldr	r0, [pc, #160]	; (8012d40 <tcp_send_empty_ack+0xc0>)
 8012ca0:	f000 fe98 	bl	80139d4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012ca4:	7dfb      	ldrb	r3, [r7, #23]
 8012ca6:	009b      	lsls	r3, r3, #2
 8012ca8:	b2db      	uxtb	r3, r3
 8012caa:	f003 0304 	and.w	r3, r3, #4
 8012cae:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012cb0:	7d7b      	ldrb	r3, [r7, #21]
 8012cb2:	b29c      	uxth	r4, r3
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f7f5 fd2c 	bl	8008716 <lwip_htonl>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	4621      	mov	r1, r4
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f7ff fec1 	bl	8012a4c <tcp_output_alloc_header>
 8012cca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012ccc:	693b      	ldr	r3, [r7, #16]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d109      	bne.n	8012ce6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	8b5b      	ldrh	r3, [r3, #26]
 8012cd6:	f043 0303 	orr.w	r3, r3, #3
 8012cda:	b29a      	uxth	r2, r3
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012ce0:	f06f 0301 	mvn.w	r3, #1
 8012ce4:	e023      	b.n	8012d2e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012ce6:	7dbb      	ldrb	r3, [r7, #22]
 8012ce8:	7dfa      	ldrb	r2, [r7, #23]
 8012cea:	6939      	ldr	r1, [r7, #16]
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f7ff feeb 	bl	8012ac8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012cf2:	687a      	ldr	r2, [r7, #4]
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	3304      	adds	r3, #4
 8012cf8:	6939      	ldr	r1, [r7, #16]
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f7ff ff24 	bl	8012b48 <tcp_output_control_segment>
 8012d00:	4603      	mov	r3, r0
 8012d02:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d007      	beq.n	8012d1c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	8b5b      	ldrh	r3, [r3, #26]
 8012d10:	f043 0303 	orr.w	r3, r3, #3
 8012d14:	b29a      	uxth	r2, r3
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	835a      	strh	r2, [r3, #26]
 8012d1a:	e006      	b.n	8012d2a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	8b5b      	ldrh	r3, [r3, #26]
 8012d20:	f023 0303 	bic.w	r3, r3, #3
 8012d24:	b29a      	uxth	r2, r3
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	371c      	adds	r7, #28
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd90      	pop	{r4, r7, pc}
 8012d36:	bf00      	nop
 8012d38:	08016f1c 	.word	0x08016f1c
 8012d3c:	08017714 	.word	0x08017714
 8012d40:	08016fac 	.word	0x08016fac

08012d44 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012d44:	b590      	push	{r4, r7, lr}
 8012d46:	b087      	sub	sp, #28
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d106      	bne.n	8012d64 <tcp_keepalive+0x20>
 8012d56:	4b18      	ldr	r3, [pc, #96]	; (8012db8 <tcp_keepalive+0x74>)
 8012d58:	f640 0224 	movw	r2, #2084	; 0x824
 8012d5c:	4917      	ldr	r1, [pc, #92]	; (8012dbc <tcp_keepalive+0x78>)
 8012d5e:	4818      	ldr	r0, [pc, #96]	; (8012dc0 <tcp_keepalive+0x7c>)
 8012d60:	f000 fe38 	bl	80139d4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012d64:	7dfb      	ldrb	r3, [r7, #23]
 8012d66:	b29c      	uxth	r4, r3
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d6c:	3b01      	subs	r3, #1
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7f5 fcd1 	bl	8008716 <lwip_htonl>
 8012d74:	4603      	mov	r3, r0
 8012d76:	2200      	movs	r2, #0
 8012d78:	4621      	mov	r1, r4
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f7ff fe66 	bl	8012a4c <tcp_output_alloc_header>
 8012d80:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d102      	bne.n	8012d8e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012d88:	f04f 33ff 	mov.w	r3, #4294967295
 8012d8c:	e010      	b.n	8012db0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012d8e:	7dfb      	ldrb	r3, [r7, #23]
 8012d90:	2200      	movs	r2, #0
 8012d92:	6939      	ldr	r1, [r7, #16]
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f7ff fe97 	bl	8012ac8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d9a:	687a      	ldr	r2, [r7, #4]
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	3304      	adds	r3, #4
 8012da0:	6939      	ldr	r1, [r7, #16]
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	f7ff fed0 	bl	8012b48 <tcp_output_control_segment>
 8012da8:	4603      	mov	r3, r0
 8012daa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	371c      	adds	r7, #28
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd90      	pop	{r4, r7, pc}
 8012db8:	08016f1c 	.word	0x08016f1c
 8012dbc:	08017734 	.word	0x08017734
 8012dc0:	08016fac 	.word	0x08016fac

08012dc4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012dc4:	b590      	push	{r4, r7, lr}
 8012dc6:	b08b      	sub	sp, #44	; 0x2c
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012dcc:	2300      	movs	r3, #0
 8012dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d106      	bne.n	8012de6 <tcp_zero_window_probe+0x22>
 8012dd8:	4b4c      	ldr	r3, [pc, #304]	; (8012f0c <tcp_zero_window_probe+0x148>)
 8012dda:	f640 024f 	movw	r2, #2127	; 0x84f
 8012dde:	494c      	ldr	r1, [pc, #304]	; (8012f10 <tcp_zero_window_probe+0x14c>)
 8012de0:	484c      	ldr	r0, [pc, #304]	; (8012f14 <tcp_zero_window_probe+0x150>)
 8012de2:	f000 fdf7 	bl	80139d4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dea:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012dec:	6a3b      	ldr	r3, [r7, #32]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d101      	bne.n	8012df6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012df2:	2300      	movs	r3, #0
 8012df4:	e086      	b.n	8012f04 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012dfc:	2bff      	cmp	r3, #255	; 0xff
 8012dfe:	d007      	beq.n	8012e10 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012e06:	3301      	adds	r3, #1
 8012e08:	b2da      	uxtb	r2, r3
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012e10:	6a3b      	ldr	r3, [r7, #32]
 8012e12:	68db      	ldr	r3, [r3, #12]
 8012e14:	899b      	ldrh	r3, [r3, #12]
 8012e16:	b29b      	uxth	r3, r3
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7f5 fc67 	bl	80086ec <lwip_htons>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	b2db      	uxtb	r3, r3
 8012e22:	f003 0301 	and.w	r3, r3, #1
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d005      	beq.n	8012e36 <tcp_zero_window_probe+0x72>
 8012e2a:	6a3b      	ldr	r3, [r7, #32]
 8012e2c:	891b      	ldrh	r3, [r3, #8]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d101      	bne.n	8012e36 <tcp_zero_window_probe+0x72>
 8012e32:	2301      	movs	r3, #1
 8012e34:	e000      	b.n	8012e38 <tcp_zero_window_probe+0x74>
 8012e36:	2300      	movs	r3, #0
 8012e38:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012e3a:	7ffb      	ldrb	r3, [r7, #31]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	bf0c      	ite	eq
 8012e40:	2301      	moveq	r3, #1
 8012e42:	2300      	movne	r3, #0
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e4c:	b299      	uxth	r1, r3
 8012e4e:	6a3b      	ldr	r3, [r7, #32]
 8012e50:	68db      	ldr	r3, [r3, #12]
 8012e52:	685b      	ldr	r3, [r3, #4]
 8012e54:	8bba      	ldrh	r2, [r7, #28]
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f7ff fdf8 	bl	8012a4c <tcp_output_alloc_header>
 8012e5c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012e5e:	69bb      	ldr	r3, [r7, #24]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d102      	bne.n	8012e6a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012e64:	f04f 33ff 	mov.w	r3, #4294967295
 8012e68:	e04c      	b.n	8012f04 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012e6a:	69bb      	ldr	r3, [r7, #24]
 8012e6c:	685b      	ldr	r3, [r3, #4]
 8012e6e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012e70:	7ffb      	ldrb	r3, [r7, #31]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d011      	beq.n	8012e9a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	899b      	ldrh	r3, [r3, #12]
 8012e7a:	b29b      	uxth	r3, r3
 8012e7c:	b21b      	sxth	r3, r3
 8012e7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012e82:	b21c      	sxth	r4, r3
 8012e84:	2011      	movs	r0, #17
 8012e86:	f7f5 fc31 	bl	80086ec <lwip_htons>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	b21b      	sxth	r3, r3
 8012e8e:	4323      	orrs	r3, r4
 8012e90:	b21b      	sxth	r3, r3
 8012e92:	b29a      	uxth	r2, r3
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	819a      	strh	r2, [r3, #12]
 8012e98:	e010      	b.n	8012ebc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012e9a:	69bb      	ldr	r3, [r7, #24]
 8012e9c:	685b      	ldr	r3, [r3, #4]
 8012e9e:	3314      	adds	r3, #20
 8012ea0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012ea2:	6a3b      	ldr	r3, [r7, #32]
 8012ea4:	6858      	ldr	r0, [r3, #4]
 8012ea6:	6a3b      	ldr	r3, [r7, #32]
 8012ea8:	685b      	ldr	r3, [r3, #4]
 8012eaa:	891a      	ldrh	r2, [r3, #8]
 8012eac:	6a3b      	ldr	r3, [r7, #32]
 8012eae:	891b      	ldrh	r3, [r3, #8]
 8012eb0:	1ad3      	subs	r3, r2, r3
 8012eb2:	b29b      	uxth	r3, r3
 8012eb4:	2201      	movs	r2, #1
 8012eb6:	6939      	ldr	r1, [r7, #16]
 8012eb8:	f7f9 fe44 	bl	800cb44 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012ebc:	6a3b      	ldr	r3, [r7, #32]
 8012ebe:	68db      	ldr	r3, [r3, #12]
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f7f5 fc27 	bl	8008716 <lwip_htonl>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	3301      	adds	r3, #1
 8012ecc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	1ad3      	subs	r3, r2, r3
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	da02      	bge.n	8012ee0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	68fa      	ldr	r2, [r7, #12]
 8012ede:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	69b9      	ldr	r1, [r7, #24]
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f7ff fded 	bl	8012ac8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012eee:	687a      	ldr	r2, [r7, #4]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	3304      	adds	r3, #4
 8012ef4:	69b9      	ldr	r1, [r7, #24]
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f7ff fe26 	bl	8012b48 <tcp_output_control_segment>
 8012efc:	4603      	mov	r3, r0
 8012efe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012f00:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012f04:	4618      	mov	r0, r3
 8012f06:	372c      	adds	r7, #44	; 0x2c
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd90      	pop	{r4, r7, pc}
 8012f0c:	08016f1c 	.word	0x08016f1c
 8012f10:	08017750 	.word	0x08017750
 8012f14:	08016fac 	.word	0x08016fac

08012f18 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b084      	sub	sp, #16
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
 8012f20:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012f22:	f000 fb01 	bl	8013528 <sys_timeouts_sleeptime>
 8012f26:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f2e:	d10b      	bne.n	8012f48 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012f30:	4813      	ldr	r0, [pc, #76]	; (8012f80 <tcpip_timeouts_mbox_fetch+0x68>)
 8012f32:	f7fa f802 	bl	800cf3a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012f36:	2200      	movs	r2, #0
 8012f38:	6839      	ldr	r1, [r7, #0]
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	f7f9 ff74 	bl	800ce28 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012f40:	480f      	ldr	r0, [pc, #60]	; (8012f80 <tcpip_timeouts_mbox_fetch+0x68>)
 8012f42:	f7f9 ffeb 	bl	800cf1c <sys_mutex_lock>
    return;
 8012f46:	e018      	b.n	8012f7a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d102      	bne.n	8012f54 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012f4e:	f000 fab1 	bl	80134b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012f52:	e7e6      	b.n	8012f22 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012f54:	480a      	ldr	r0, [pc, #40]	; (8012f80 <tcpip_timeouts_mbox_fetch+0x68>)
 8012f56:	f7f9 fff0 	bl	800cf3a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012f5a:	68fa      	ldr	r2, [r7, #12]
 8012f5c:	6839      	ldr	r1, [r7, #0]
 8012f5e:	6878      	ldr	r0, [r7, #4]
 8012f60:	f7f9 ff62 	bl	800ce28 <sys_arch_mbox_fetch>
 8012f64:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012f66:	4806      	ldr	r0, [pc, #24]	; (8012f80 <tcpip_timeouts_mbox_fetch+0x68>)
 8012f68:	f7f9 ffd8 	bl	800cf1c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f72:	d102      	bne.n	8012f7a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012f74:	f000 fa9e 	bl	80134b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012f78:	e7d3      	b.n	8012f22 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012f7a:	3710      	adds	r7, #16
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	bd80      	pop	{r7, pc}
 8012f80:	2400749c 	.word	0x2400749c

08012f84 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b084      	sub	sp, #16
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012f8c:	4810      	ldr	r0, [pc, #64]	; (8012fd0 <tcpip_thread+0x4c>)
 8012f8e:	f7f9 ffc5 	bl	800cf1c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012f92:	4b10      	ldr	r3, [pc, #64]	; (8012fd4 <tcpip_thread+0x50>)
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d005      	beq.n	8012fa6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012f9a:	4b0e      	ldr	r3, [pc, #56]	; (8012fd4 <tcpip_thread+0x50>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	4a0e      	ldr	r2, [pc, #56]	; (8012fd8 <tcpip_thread+0x54>)
 8012fa0:	6812      	ldr	r2, [r2, #0]
 8012fa2:	4610      	mov	r0, r2
 8012fa4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012fa6:	f107 030c 	add.w	r3, r7, #12
 8012faa:	4619      	mov	r1, r3
 8012fac:	480b      	ldr	r0, [pc, #44]	; (8012fdc <tcpip_thread+0x58>)
 8012fae:	f7ff ffb3 	bl	8012f18 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d106      	bne.n	8012fc6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012fb8:	4b09      	ldr	r3, [pc, #36]	; (8012fe0 <tcpip_thread+0x5c>)
 8012fba:	2291      	movs	r2, #145	; 0x91
 8012fbc:	4909      	ldr	r1, [pc, #36]	; (8012fe4 <tcpip_thread+0x60>)
 8012fbe:	480a      	ldr	r0, [pc, #40]	; (8012fe8 <tcpip_thread+0x64>)
 8012fc0:	f000 fd08 	bl	80139d4 <iprintf>
      continue;
 8012fc4:	e003      	b.n	8012fce <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f000 f80f 	bl	8012fec <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012fce:	e7ea      	b.n	8012fa6 <tcpip_thread+0x22>
 8012fd0:	2400749c 	.word	0x2400749c
 8012fd4:	24007490 	.word	0x24007490
 8012fd8:	24007494 	.word	0x24007494
 8012fdc:	24007498 	.word	0x24007498
 8012fe0:	08017774 	.word	0x08017774
 8012fe4:	080177e4 	.word	0x080177e4
 8012fe8:	08017804 	.word	0x08017804

08012fec <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	2b02      	cmp	r3, #2
 8012ffa:	d026      	beq.n	801304a <tcpip_thread_handle_msg+0x5e>
 8012ffc:	2b02      	cmp	r3, #2
 8012ffe:	dc2b      	bgt.n	8013058 <tcpip_thread_handle_msg+0x6c>
 8013000:	2b00      	cmp	r3, #0
 8013002:	d002      	beq.n	801300a <tcpip_thread_handle_msg+0x1e>
 8013004:	2b01      	cmp	r3, #1
 8013006:	d015      	beq.n	8013034 <tcpip_thread_handle_msg+0x48>
 8013008:	e026      	b.n	8013058 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	68db      	ldr	r3, [r3, #12]
 801300e:	687a      	ldr	r2, [r7, #4]
 8013010:	6850      	ldr	r0, [r2, #4]
 8013012:	687a      	ldr	r2, [r7, #4]
 8013014:	6892      	ldr	r2, [r2, #8]
 8013016:	4611      	mov	r1, r2
 8013018:	4798      	blx	r3
 801301a:	4603      	mov	r3, r0
 801301c:	2b00      	cmp	r3, #0
 801301e:	d004      	beq.n	801302a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	685b      	ldr	r3, [r3, #4]
 8013024:	4618      	mov	r0, r3
 8013026:	f7f9 fb97 	bl	800c758 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801302a:	6879      	ldr	r1, [r7, #4]
 801302c:	2009      	movs	r0, #9
 801302e:	f7f8 fcef 	bl	800ba10 <memp_free>
      break;
 8013032:	e018      	b.n	8013066 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	685b      	ldr	r3, [r3, #4]
 8013038:	687a      	ldr	r2, [r7, #4]
 801303a:	6892      	ldr	r2, [r2, #8]
 801303c:	4610      	mov	r0, r2
 801303e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013040:	6879      	ldr	r1, [r7, #4]
 8013042:	2008      	movs	r0, #8
 8013044:	f7f8 fce4 	bl	800ba10 <memp_free>
      break;
 8013048:	e00d      	b.n	8013066 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	687a      	ldr	r2, [r7, #4]
 8013050:	6892      	ldr	r2, [r2, #8]
 8013052:	4610      	mov	r0, r2
 8013054:	4798      	blx	r3
      break;
 8013056:	e006      	b.n	8013066 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8013058:	4b05      	ldr	r3, [pc, #20]	; (8013070 <tcpip_thread_handle_msg+0x84>)
 801305a:	22cf      	movs	r2, #207	; 0xcf
 801305c:	4905      	ldr	r1, [pc, #20]	; (8013074 <tcpip_thread_handle_msg+0x88>)
 801305e:	4806      	ldr	r0, [pc, #24]	; (8013078 <tcpip_thread_handle_msg+0x8c>)
 8013060:	f000 fcb8 	bl	80139d4 <iprintf>
      break;
 8013064:	bf00      	nop
  }
}
 8013066:	bf00      	nop
 8013068:	3708      	adds	r7, #8
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
 801306e:	bf00      	nop
 8013070:	08017774 	.word	0x08017774
 8013074:	080177e4 	.word	0x080177e4
 8013078:	08017804 	.word	0x08017804

0801307c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b086      	sub	sp, #24
 8013080:	af00      	add	r7, sp, #0
 8013082:	60f8      	str	r0, [r7, #12]
 8013084:	60b9      	str	r1, [r7, #8]
 8013086:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013088:	481a      	ldr	r0, [pc, #104]	; (80130f4 <tcpip_inpkt+0x78>)
 801308a:	f7f9 ff0c 	bl	800cea6 <sys_mbox_valid>
 801308e:	4603      	mov	r3, r0
 8013090:	2b00      	cmp	r3, #0
 8013092:	d105      	bne.n	80130a0 <tcpip_inpkt+0x24>
 8013094:	4b18      	ldr	r3, [pc, #96]	; (80130f8 <tcpip_inpkt+0x7c>)
 8013096:	22fc      	movs	r2, #252	; 0xfc
 8013098:	4918      	ldr	r1, [pc, #96]	; (80130fc <tcpip_inpkt+0x80>)
 801309a:	4819      	ldr	r0, [pc, #100]	; (8013100 <tcpip_inpkt+0x84>)
 801309c:	f000 fc9a 	bl	80139d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80130a0:	2009      	movs	r0, #9
 80130a2:	f7f8 fc3f 	bl	800b924 <memp_malloc>
 80130a6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80130a8:	697b      	ldr	r3, [r7, #20]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d102      	bne.n	80130b4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80130ae:	f04f 33ff 	mov.w	r3, #4294967295
 80130b2:	e01a      	b.n	80130ea <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	2200      	movs	r2, #0
 80130b8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	68fa      	ldr	r2, [r7, #12]
 80130be:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80130c0:	697b      	ldr	r3, [r7, #20]
 80130c2:	68ba      	ldr	r2, [r7, #8]
 80130c4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	687a      	ldr	r2, [r7, #4]
 80130ca:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80130cc:	6979      	ldr	r1, [r7, #20]
 80130ce:	4809      	ldr	r0, [pc, #36]	; (80130f4 <tcpip_inpkt+0x78>)
 80130d0:	f7f9 fe90 	bl	800cdf4 <sys_mbox_trypost>
 80130d4:	4603      	mov	r3, r0
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d006      	beq.n	80130e8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80130da:	6979      	ldr	r1, [r7, #20]
 80130dc:	2009      	movs	r0, #9
 80130de:	f7f8 fc97 	bl	800ba10 <memp_free>
    return ERR_MEM;
 80130e2:	f04f 33ff 	mov.w	r3, #4294967295
 80130e6:	e000      	b.n	80130ea <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80130e8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	3718      	adds	r7, #24
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}
 80130f2:	bf00      	nop
 80130f4:	24007498 	.word	0x24007498
 80130f8:	08017774 	.word	0x08017774
 80130fc:	0801782c 	.word	0x0801782c
 8013100:	08017804 	.word	0x08017804

08013104 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b082      	sub	sp, #8
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013114:	f003 0318 	and.w	r3, r3, #24
 8013118:	2b00      	cmp	r3, #0
 801311a:	d006      	beq.n	801312a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801311c:	4a08      	ldr	r2, [pc, #32]	; (8013140 <tcpip_input+0x3c>)
 801311e:	6839      	ldr	r1, [r7, #0]
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	f7ff ffab 	bl	801307c <tcpip_inpkt>
 8013126:	4603      	mov	r3, r0
 8013128:	e005      	b.n	8013136 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801312a:	4a06      	ldr	r2, [pc, #24]	; (8013144 <tcpip_input+0x40>)
 801312c:	6839      	ldr	r1, [r7, #0]
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f7ff ffa4 	bl	801307c <tcpip_inpkt>
 8013134:	4603      	mov	r3, r0
}
 8013136:	4618      	mov	r0, r3
 8013138:	3708      	adds	r7, #8
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}
 801313e:	bf00      	nop
 8013140:	080095e1 	.word	0x080095e1
 8013144:	08009dd1 	.word	0x08009dd1

08013148 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8013148:	b580      	push	{r7, lr}
 801314a:	b084      	sub	sp, #16
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
 8013150:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013152:	4819      	ldr	r0, [pc, #100]	; (80131b8 <tcpip_try_callback+0x70>)
 8013154:	f7f9 fea7 	bl	800cea6 <sys_mbox_valid>
 8013158:	4603      	mov	r3, r0
 801315a:	2b00      	cmp	r3, #0
 801315c:	d106      	bne.n	801316c <tcpip_try_callback+0x24>
 801315e:	4b17      	ldr	r3, [pc, #92]	; (80131bc <tcpip_try_callback+0x74>)
 8013160:	f240 125d 	movw	r2, #349	; 0x15d
 8013164:	4916      	ldr	r1, [pc, #88]	; (80131c0 <tcpip_try_callback+0x78>)
 8013166:	4817      	ldr	r0, [pc, #92]	; (80131c4 <tcpip_try_callback+0x7c>)
 8013168:	f000 fc34 	bl	80139d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801316c:	2008      	movs	r0, #8
 801316e:	f7f8 fbd9 	bl	800b924 <memp_malloc>
 8013172:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d102      	bne.n	8013180 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801317a:	f04f 33ff 	mov.w	r3, #4294967295
 801317e:	e017      	b.n	80131b0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	2201      	movs	r2, #1
 8013184:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	687a      	ldr	r2, [r7, #4]
 801318a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	683a      	ldr	r2, [r7, #0]
 8013190:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013192:	68f9      	ldr	r1, [r7, #12]
 8013194:	4808      	ldr	r0, [pc, #32]	; (80131b8 <tcpip_try_callback+0x70>)
 8013196:	f7f9 fe2d 	bl	800cdf4 <sys_mbox_trypost>
 801319a:	4603      	mov	r3, r0
 801319c:	2b00      	cmp	r3, #0
 801319e:	d006      	beq.n	80131ae <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80131a0:	68f9      	ldr	r1, [r7, #12]
 80131a2:	2008      	movs	r0, #8
 80131a4:	f7f8 fc34 	bl	800ba10 <memp_free>
    return ERR_MEM;
 80131a8:	f04f 33ff 	mov.w	r3, #4294967295
 80131ac:	e000      	b.n	80131b0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80131ae:	2300      	movs	r3, #0
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3710      	adds	r7, #16
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}
 80131b8:	24007498 	.word	0x24007498
 80131bc:	08017774 	.word	0x08017774
 80131c0:	0801782c 	.word	0x0801782c
 80131c4:	08017804 	.word	0x08017804

080131c8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b084      	sub	sp, #16
 80131cc:	af02      	add	r7, sp, #8
 80131ce:	6078      	str	r0, [r7, #4]
 80131d0:	6039      	str	r1, [r7, #0]
  lwip_init();
 80131d2:	f7f6 fd4b 	bl	8009c6c <lwip_init>

  tcpip_init_done = initfunc;
 80131d6:	4a17      	ldr	r2, [pc, #92]	; (8013234 <tcpip_init+0x6c>)
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80131dc:	4a16      	ldr	r2, [pc, #88]	; (8013238 <tcpip_init+0x70>)
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80131e2:	2106      	movs	r1, #6
 80131e4:	4815      	ldr	r0, [pc, #84]	; (801323c <tcpip_init+0x74>)
 80131e6:	f7f9 fde3 	bl	800cdb0 <sys_mbox_new>
 80131ea:	4603      	mov	r3, r0
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d006      	beq.n	80131fe <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80131f0:	4b13      	ldr	r3, [pc, #76]	; (8013240 <tcpip_init+0x78>)
 80131f2:	f240 2261 	movw	r2, #609	; 0x261
 80131f6:	4913      	ldr	r1, [pc, #76]	; (8013244 <tcpip_init+0x7c>)
 80131f8:	4813      	ldr	r0, [pc, #76]	; (8013248 <tcpip_init+0x80>)
 80131fa:	f000 fbeb 	bl	80139d4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80131fe:	4813      	ldr	r0, [pc, #76]	; (801324c <tcpip_init+0x84>)
 8013200:	f7f9 fe70 	bl	800cee4 <sys_mutex_new>
 8013204:	4603      	mov	r3, r0
 8013206:	2b00      	cmp	r3, #0
 8013208:	d006      	beq.n	8013218 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801320a:	4b0d      	ldr	r3, [pc, #52]	; (8013240 <tcpip_init+0x78>)
 801320c:	f240 2265 	movw	r2, #613	; 0x265
 8013210:	490f      	ldr	r1, [pc, #60]	; (8013250 <tcpip_init+0x88>)
 8013212:	480d      	ldr	r0, [pc, #52]	; (8013248 <tcpip_init+0x80>)
 8013214:	f000 fbde 	bl	80139d4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8013218:	2300      	movs	r3, #0
 801321a:	9300      	str	r3, [sp, #0]
 801321c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013220:	2200      	movs	r2, #0
 8013222:	490c      	ldr	r1, [pc, #48]	; (8013254 <tcpip_init+0x8c>)
 8013224:	480c      	ldr	r0, [pc, #48]	; (8013258 <tcpip_init+0x90>)
 8013226:	f7f9 fe95 	bl	800cf54 <sys_thread_new>
}
 801322a:	bf00      	nop
 801322c:	3708      	adds	r7, #8
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}
 8013232:	bf00      	nop
 8013234:	24007490 	.word	0x24007490
 8013238:	24007494 	.word	0x24007494
 801323c:	24007498 	.word	0x24007498
 8013240:	08017774 	.word	0x08017774
 8013244:	0801783c 	.word	0x0801783c
 8013248:	08017804 	.word	0x08017804
 801324c:	2400749c 	.word	0x2400749c
 8013250:	08017860 	.word	0x08017860
 8013254:	08012f85 	.word	0x08012f85
 8013258:	08017884 	.word	0x08017884

0801325c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b082      	sub	sp, #8
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013264:	f7f9 ff04 	bl	800d070 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013268:	4b0a      	ldr	r3, [pc, #40]	; (8013294 <tcpip_tcp_timer+0x38>)
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d103      	bne.n	8013278 <tcpip_tcp_timer+0x1c>
 8013270:	4b09      	ldr	r3, [pc, #36]	; (8013298 <tcpip_tcp_timer+0x3c>)
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d005      	beq.n	8013284 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013278:	2200      	movs	r2, #0
 801327a:	4908      	ldr	r1, [pc, #32]	; (801329c <tcpip_tcp_timer+0x40>)
 801327c:	20fa      	movs	r0, #250	; 0xfa
 801327e:	f000 f8f3 	bl	8013468 <sys_timeout>
 8013282:	e003      	b.n	801328c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013284:	4b06      	ldr	r3, [pc, #24]	; (80132a0 <tcpip_tcp_timer+0x44>)
 8013286:	2200      	movs	r2, #0
 8013288:	601a      	str	r2, [r3, #0]
  }
}
 801328a:	bf00      	nop
 801328c:	bf00      	nop
 801328e:	3708      	adds	r7, #8
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}
 8013294:	2400744c 	.word	0x2400744c
 8013298:	24007450 	.word	0x24007450
 801329c:	0801325d 	.word	0x0801325d
 80132a0:	240074a8 	.word	0x240074a8

080132a4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80132a8:	4b0a      	ldr	r3, [pc, #40]	; (80132d4 <tcp_timer_needed+0x30>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d10f      	bne.n	80132d0 <tcp_timer_needed+0x2c>
 80132b0:	4b09      	ldr	r3, [pc, #36]	; (80132d8 <tcp_timer_needed+0x34>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d103      	bne.n	80132c0 <tcp_timer_needed+0x1c>
 80132b8:	4b08      	ldr	r3, [pc, #32]	; (80132dc <tcp_timer_needed+0x38>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d007      	beq.n	80132d0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80132c0:	4b04      	ldr	r3, [pc, #16]	; (80132d4 <tcp_timer_needed+0x30>)
 80132c2:	2201      	movs	r2, #1
 80132c4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80132c6:	2200      	movs	r2, #0
 80132c8:	4905      	ldr	r1, [pc, #20]	; (80132e0 <tcp_timer_needed+0x3c>)
 80132ca:	20fa      	movs	r0, #250	; 0xfa
 80132cc:	f000 f8cc 	bl	8013468 <sys_timeout>
  }
}
 80132d0:	bf00      	nop
 80132d2:	bd80      	pop	{r7, pc}
 80132d4:	240074a8 	.word	0x240074a8
 80132d8:	2400744c 	.word	0x2400744c
 80132dc:	24007450 	.word	0x24007450
 80132e0:	0801325d 	.word	0x0801325d

080132e4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b086      	sub	sp, #24
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	60f8      	str	r0, [r7, #12]
 80132ec:	60b9      	str	r1, [r7, #8]
 80132ee:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80132f0:	200a      	movs	r0, #10
 80132f2:	f7f8 fb17 	bl	800b924 <memp_malloc>
 80132f6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d109      	bne.n	8013312 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d151      	bne.n	80133a8 <sys_timeout_abs+0xc4>
 8013304:	4b2a      	ldr	r3, [pc, #168]	; (80133b0 <sys_timeout_abs+0xcc>)
 8013306:	22be      	movs	r2, #190	; 0xbe
 8013308:	492a      	ldr	r1, [pc, #168]	; (80133b4 <sys_timeout_abs+0xd0>)
 801330a:	482b      	ldr	r0, [pc, #172]	; (80133b8 <sys_timeout_abs+0xd4>)
 801330c:	f000 fb62 	bl	80139d4 <iprintf>
    return;
 8013310:	e04a      	b.n	80133a8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	2200      	movs	r2, #0
 8013316:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	68ba      	ldr	r2, [r7, #8]
 801331c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801331e:	693b      	ldr	r3, [r7, #16]
 8013320:	687a      	ldr	r2, [r7, #4]
 8013322:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	68fa      	ldr	r2, [r7, #12]
 8013328:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801332a:	4b24      	ldr	r3, [pc, #144]	; (80133bc <sys_timeout_abs+0xd8>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d103      	bne.n	801333a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013332:	4a22      	ldr	r2, [pc, #136]	; (80133bc <sys_timeout_abs+0xd8>)
 8013334:	693b      	ldr	r3, [r7, #16]
 8013336:	6013      	str	r3, [r2, #0]
    return;
 8013338:	e037      	b.n	80133aa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801333a:	693b      	ldr	r3, [r7, #16]
 801333c:	685a      	ldr	r2, [r3, #4]
 801333e:	4b1f      	ldr	r3, [pc, #124]	; (80133bc <sys_timeout_abs+0xd8>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	685b      	ldr	r3, [r3, #4]
 8013344:	1ad3      	subs	r3, r2, r3
 8013346:	0fdb      	lsrs	r3, r3, #31
 8013348:	f003 0301 	and.w	r3, r3, #1
 801334c:	b2db      	uxtb	r3, r3
 801334e:	2b00      	cmp	r3, #0
 8013350:	d007      	beq.n	8013362 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013352:	4b1a      	ldr	r3, [pc, #104]	; (80133bc <sys_timeout_abs+0xd8>)
 8013354:	681a      	ldr	r2, [r3, #0]
 8013356:	693b      	ldr	r3, [r7, #16]
 8013358:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801335a:	4a18      	ldr	r2, [pc, #96]	; (80133bc <sys_timeout_abs+0xd8>)
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	6013      	str	r3, [r2, #0]
 8013360:	e023      	b.n	80133aa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013362:	4b16      	ldr	r3, [pc, #88]	; (80133bc <sys_timeout_abs+0xd8>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	617b      	str	r3, [r7, #20]
 8013368:	e01a      	b.n	80133a0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d00b      	beq.n	801338a <sys_timeout_abs+0xa6>
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	685a      	ldr	r2, [r3, #4]
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	685b      	ldr	r3, [r3, #4]
 801337c:	1ad3      	subs	r3, r2, r3
 801337e:	0fdb      	lsrs	r3, r3, #31
 8013380:	f003 0301 	and.w	r3, r3, #1
 8013384:	b2db      	uxtb	r3, r3
 8013386:	2b00      	cmp	r3, #0
 8013388:	d007      	beq.n	801339a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	681a      	ldr	r2, [r3, #0]
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013392:	697b      	ldr	r3, [r7, #20]
 8013394:	693a      	ldr	r2, [r7, #16]
 8013396:	601a      	str	r2, [r3, #0]
        break;
 8013398:	e007      	b.n	80133aa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801339a:	697b      	ldr	r3, [r7, #20]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	617b      	str	r3, [r7, #20]
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d1e1      	bne.n	801336a <sys_timeout_abs+0x86>
 80133a6:	e000      	b.n	80133aa <sys_timeout_abs+0xc6>
    return;
 80133a8:	bf00      	nop
      }
    }
  }
}
 80133aa:	3718      	adds	r7, #24
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}
 80133b0:	08017894 	.word	0x08017894
 80133b4:	08017908 	.word	0x08017908
 80133b8:	08017948 	.word	0x08017948
 80133bc:	240074a0 	.word	0x240074a0

080133c0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b086      	sub	sp, #24
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	4798      	blx	r3

  now = sys_now();
 80133d2:	f7f2 f857 	bl	8005484 <sys_now>
 80133d6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	681a      	ldr	r2, [r3, #0]
 80133dc:	4b0f      	ldr	r3, [pc, #60]	; (801341c <lwip_cyclic_timer+0x5c>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	4413      	add	r3, r2
 80133e2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80133e4:	68fa      	ldr	r2, [r7, #12]
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	1ad3      	subs	r3, r2, r3
 80133ea:	0fdb      	lsrs	r3, r3, #31
 80133ec:	f003 0301 	and.w	r3, r3, #1
 80133f0:	b2db      	uxtb	r3, r3
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d009      	beq.n	801340a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	4413      	add	r3, r2
 80133fe:	687a      	ldr	r2, [r7, #4]
 8013400:	4907      	ldr	r1, [pc, #28]	; (8013420 <lwip_cyclic_timer+0x60>)
 8013402:	4618      	mov	r0, r3
 8013404:	f7ff ff6e 	bl	80132e4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013408:	e004      	b.n	8013414 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801340a:	687a      	ldr	r2, [r7, #4]
 801340c:	4904      	ldr	r1, [pc, #16]	; (8013420 <lwip_cyclic_timer+0x60>)
 801340e:	68f8      	ldr	r0, [r7, #12]
 8013410:	f7ff ff68 	bl	80132e4 <sys_timeout_abs>
}
 8013414:	bf00      	nop
 8013416:	3718      	adds	r7, #24
 8013418:	46bd      	mov	sp, r7
 801341a:	bd80      	pop	{r7, pc}
 801341c:	240074a4 	.word	0x240074a4
 8013420:	080133c1 	.word	0x080133c1

08013424 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b082      	sub	sp, #8
 8013428:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801342a:	2301      	movs	r3, #1
 801342c:	607b      	str	r3, [r7, #4]
 801342e:	e00e      	b.n	801344e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013430:	4a0b      	ldr	r2, [pc, #44]	; (8013460 <sys_timeouts_init+0x3c>)
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	00db      	lsls	r3, r3, #3
 801343c:	4a08      	ldr	r2, [pc, #32]	; (8013460 <sys_timeouts_init+0x3c>)
 801343e:	4413      	add	r3, r2
 8013440:	461a      	mov	r2, r3
 8013442:	4908      	ldr	r1, [pc, #32]	; (8013464 <sys_timeouts_init+0x40>)
 8013444:	f000 f810 	bl	8013468 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	3301      	adds	r3, #1
 801344c:	607b      	str	r3, [r7, #4]
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	2b02      	cmp	r3, #2
 8013452:	d9ed      	bls.n	8013430 <sys_timeouts_init+0xc>
  }
}
 8013454:	bf00      	nop
 8013456:	bf00      	nop
 8013458:	3708      	adds	r7, #8
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}
 801345e:	bf00      	nop
 8013460:	08017e8c 	.word	0x08017e8c
 8013464:	080133c1 	.word	0x080133c1

08013468 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b086      	sub	sp, #24
 801346c:	af00      	add	r7, sp, #0
 801346e:	60f8      	str	r0, [r7, #12]
 8013470:	60b9      	str	r1, [r7, #8]
 8013472:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801347a:	d306      	bcc.n	801348a <sys_timeout+0x22>
 801347c:	4b0a      	ldr	r3, [pc, #40]	; (80134a8 <sys_timeout+0x40>)
 801347e:	f240 1229 	movw	r2, #297	; 0x129
 8013482:	490a      	ldr	r1, [pc, #40]	; (80134ac <sys_timeout+0x44>)
 8013484:	480a      	ldr	r0, [pc, #40]	; (80134b0 <sys_timeout+0x48>)
 8013486:	f000 faa5 	bl	80139d4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801348a:	f7f1 fffb 	bl	8005484 <sys_now>
 801348e:	4602      	mov	r2, r0
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	4413      	add	r3, r2
 8013494:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013496:	687a      	ldr	r2, [r7, #4]
 8013498:	68b9      	ldr	r1, [r7, #8]
 801349a:	6978      	ldr	r0, [r7, #20]
 801349c:	f7ff ff22 	bl	80132e4 <sys_timeout_abs>
#endif
}
 80134a0:	bf00      	nop
 80134a2:	3718      	adds	r7, #24
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}
 80134a8:	08017894 	.word	0x08017894
 80134ac:	08017970 	.word	0x08017970
 80134b0:	08017948 	.word	0x08017948

080134b4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b084      	sub	sp, #16
 80134b8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80134ba:	f7f1 ffe3 	bl	8005484 <sys_now>
 80134be:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80134c0:	4b17      	ldr	r3, [pc, #92]	; (8013520 <sys_check_timeouts+0x6c>)
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d022      	beq.n	8013512 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	685b      	ldr	r3, [r3, #4]
 80134d0:	68fa      	ldr	r2, [r7, #12]
 80134d2:	1ad3      	subs	r3, r2, r3
 80134d4:	0fdb      	lsrs	r3, r3, #31
 80134d6:	f003 0301 	and.w	r3, r3, #1
 80134da:	b2db      	uxtb	r3, r3
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d11a      	bne.n	8013516 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	4a0e      	ldr	r2, [pc, #56]	; (8013520 <sys_check_timeouts+0x6c>)
 80134e6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	689b      	ldr	r3, [r3, #8]
 80134ec:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	68db      	ldr	r3, [r3, #12]
 80134f2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	685b      	ldr	r3, [r3, #4]
 80134f8:	4a0a      	ldr	r2, [pc, #40]	; (8013524 <sys_check_timeouts+0x70>)
 80134fa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80134fc:	68b9      	ldr	r1, [r7, #8]
 80134fe:	200a      	movs	r0, #10
 8013500:	f7f8 fa86 	bl	800ba10 <memp_free>
    if (handler != NULL) {
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d0da      	beq.n	80134c0 <sys_check_timeouts+0xc>
      handler(arg);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6838      	ldr	r0, [r7, #0]
 801350e:	4798      	blx	r3
  do {
 8013510:	e7d6      	b.n	80134c0 <sys_check_timeouts+0xc>
      return;
 8013512:	bf00      	nop
 8013514:	e000      	b.n	8013518 <sys_check_timeouts+0x64>
      return;
 8013516:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013518:	3710      	adds	r7, #16
 801351a:	46bd      	mov	sp, r7
 801351c:	bd80      	pop	{r7, pc}
 801351e:	bf00      	nop
 8013520:	240074a0 	.word	0x240074a0
 8013524:	240074a4 	.word	0x240074a4

08013528 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801352e:	4b16      	ldr	r3, [pc, #88]	; (8013588 <sys_timeouts_sleeptime+0x60>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d102      	bne.n	801353c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013536:	f04f 33ff 	mov.w	r3, #4294967295
 801353a:	e020      	b.n	801357e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801353c:	f7f1 ffa2 	bl	8005484 <sys_now>
 8013540:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013542:	4b11      	ldr	r3, [pc, #68]	; (8013588 <sys_timeouts_sleeptime+0x60>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	685a      	ldr	r2, [r3, #4]
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	1ad3      	subs	r3, r2, r3
 801354c:	0fdb      	lsrs	r3, r3, #31
 801354e:	f003 0301 	and.w	r3, r3, #1
 8013552:	b2db      	uxtb	r3, r3
 8013554:	2b00      	cmp	r3, #0
 8013556:	d001      	beq.n	801355c <sys_timeouts_sleeptime+0x34>
    return 0;
 8013558:	2300      	movs	r3, #0
 801355a:	e010      	b.n	801357e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801355c:	4b0a      	ldr	r3, [pc, #40]	; (8013588 <sys_timeouts_sleeptime+0x60>)
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	685a      	ldr	r2, [r3, #4]
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	1ad3      	subs	r3, r2, r3
 8013566:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	2b00      	cmp	r3, #0
 801356c:	da06      	bge.n	801357c <sys_timeouts_sleeptime+0x54>
 801356e:	4b07      	ldr	r3, [pc, #28]	; (801358c <sys_timeouts_sleeptime+0x64>)
 8013570:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013574:	4906      	ldr	r1, [pc, #24]	; (8013590 <sys_timeouts_sleeptime+0x68>)
 8013576:	4807      	ldr	r0, [pc, #28]	; (8013594 <sys_timeouts_sleeptime+0x6c>)
 8013578:	f000 fa2c 	bl	80139d4 <iprintf>
    return ret;
 801357c:	683b      	ldr	r3, [r7, #0]
  }
}
 801357e:	4618      	mov	r0, r3
 8013580:	3708      	adds	r7, #8
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}
 8013586:	bf00      	nop
 8013588:	240074a0 	.word	0x240074a0
 801358c:	08017894 	.word	0x08017894
 8013590:	080179a8 	.word	0x080179a8
 8013594:	08017948 	.word	0x08017948

08013598 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801359c:	f000 fa32 	bl	8013a04 <rand>
 80135a0:	4603      	mov	r3, r0
 80135a2:	b29b      	uxth	r3, r3
 80135a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80135a8:	b29b      	uxth	r3, r3
 80135aa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80135ae:	b29a      	uxth	r2, r3
 80135b0:	4b01      	ldr	r3, [pc, #4]	; (80135b8 <udp_init+0x20>)
 80135b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80135b4:	bf00      	nop
 80135b6:	bd80      	pop	{r7, pc}
 80135b8:	24000030 	.word	0x24000030

080135bc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b084      	sub	sp, #16
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	60f8      	str	r0, [r7, #12]
 80135c4:	60b9      	str	r1, [r7, #8]
 80135c6:	4613      	mov	r3, r2
 80135c8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d105      	bne.n	80135dc <udp_input_local_match+0x20>
 80135d0:	4b27      	ldr	r3, [pc, #156]	; (8013670 <udp_input_local_match+0xb4>)
 80135d2:	2287      	movs	r2, #135	; 0x87
 80135d4:	4927      	ldr	r1, [pc, #156]	; (8013674 <udp_input_local_match+0xb8>)
 80135d6:	4828      	ldr	r0, [pc, #160]	; (8013678 <udp_input_local_match+0xbc>)
 80135d8:	f000 f9fc 	bl	80139d4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d105      	bne.n	80135ee <udp_input_local_match+0x32>
 80135e2:	4b23      	ldr	r3, [pc, #140]	; (8013670 <udp_input_local_match+0xb4>)
 80135e4:	2288      	movs	r2, #136	; 0x88
 80135e6:	4925      	ldr	r1, [pc, #148]	; (801367c <udp_input_local_match+0xc0>)
 80135e8:	4823      	ldr	r0, [pc, #140]	; (8013678 <udp_input_local_match+0xbc>)
 80135ea:	f000 f9f3 	bl	80139d4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	7a1b      	ldrb	r3, [r3, #8]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d00b      	beq.n	801360e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	7a1a      	ldrb	r2, [r3, #8]
 80135fa:	4b21      	ldr	r3, [pc, #132]	; (8013680 <udp_input_local_match+0xc4>)
 80135fc:	685b      	ldr	r3, [r3, #4]
 80135fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013602:	3301      	adds	r3, #1
 8013604:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013606:	429a      	cmp	r2, r3
 8013608:	d001      	beq.n	801360e <udp_input_local_match+0x52>
    return 0;
 801360a:	2300      	movs	r3, #0
 801360c:	e02b      	b.n	8013666 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801360e:	79fb      	ldrb	r3, [r7, #7]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d018      	beq.n	8013646 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d013      	beq.n	8013642 <udp_input_local_match+0x86>
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d00f      	beq.n	8013642 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013622:	4b17      	ldr	r3, [pc, #92]	; (8013680 <udp_input_local_match+0xc4>)
 8013624:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801362a:	d00a      	beq.n	8013642 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	681a      	ldr	r2, [r3, #0]
 8013630:	4b13      	ldr	r3, [pc, #76]	; (8013680 <udp_input_local_match+0xc4>)
 8013632:	695b      	ldr	r3, [r3, #20]
 8013634:	405a      	eors	r2, r3
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	3308      	adds	r3, #8
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801363e:	2b00      	cmp	r3, #0
 8013640:	d110      	bne.n	8013664 <udp_input_local_match+0xa8>
          return 1;
 8013642:	2301      	movs	r3, #1
 8013644:	e00f      	b.n	8013666 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d009      	beq.n	8013660 <udp_input_local_match+0xa4>
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d005      	beq.n	8013660 <udp_input_local_match+0xa4>
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	681a      	ldr	r2, [r3, #0]
 8013658:	4b09      	ldr	r3, [pc, #36]	; (8013680 <udp_input_local_match+0xc4>)
 801365a:	695b      	ldr	r3, [r3, #20]
 801365c:	429a      	cmp	r2, r3
 801365e:	d101      	bne.n	8013664 <udp_input_local_match+0xa8>
        return 1;
 8013660:	2301      	movs	r3, #1
 8013662:	e000      	b.n	8013666 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013664:	2300      	movs	r3, #0
}
 8013666:	4618      	mov	r0, r3
 8013668:	3710      	adds	r7, #16
 801366a:	46bd      	mov	sp, r7
 801366c:	bd80      	pop	{r7, pc}
 801366e:	bf00      	nop
 8013670:	080179bc 	.word	0x080179bc
 8013674:	08017a28 	.word	0x08017a28
 8013678:	08017a4c 	.word	0x08017a4c
 801367c:	08017a74 	.word	0x08017a74
 8013680:	2400431c 	.word	0x2400431c

08013684 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013684:	b590      	push	{r4, r7, lr}
 8013686:	b08d      	sub	sp, #52	; 0x34
 8013688:	af02      	add	r7, sp, #8
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801368e:	2300      	movs	r3, #0
 8013690:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d105      	bne.n	80136a4 <udp_input+0x20>
 8013698:	4b7c      	ldr	r3, [pc, #496]	; (801388c <udp_input+0x208>)
 801369a:	22cf      	movs	r2, #207	; 0xcf
 801369c:	497c      	ldr	r1, [pc, #496]	; (8013890 <udp_input+0x20c>)
 801369e:	487d      	ldr	r0, [pc, #500]	; (8013894 <udp_input+0x210>)
 80136a0:	f000 f998 	bl	80139d4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d105      	bne.n	80136b6 <udp_input+0x32>
 80136aa:	4b78      	ldr	r3, [pc, #480]	; (801388c <udp_input+0x208>)
 80136ac:	22d0      	movs	r2, #208	; 0xd0
 80136ae:	497a      	ldr	r1, [pc, #488]	; (8013898 <udp_input+0x214>)
 80136b0:	4878      	ldr	r0, [pc, #480]	; (8013894 <udp_input+0x210>)
 80136b2:	f000 f98f 	bl	80139d4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	895b      	ldrh	r3, [r3, #10]
 80136ba:	2b07      	cmp	r3, #7
 80136bc:	d803      	bhi.n	80136c6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80136be:	6878      	ldr	r0, [r7, #4]
 80136c0:	f7f9 f84a 	bl	800c758 <pbuf_free>
    goto end;
 80136c4:	e0de      	b.n	8013884 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	685b      	ldr	r3, [r3, #4]
 80136ca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80136cc:	4b73      	ldr	r3, [pc, #460]	; (801389c <udp_input+0x218>)
 80136ce:	695b      	ldr	r3, [r3, #20]
 80136d0:	4a72      	ldr	r2, [pc, #456]	; (801389c <udp_input+0x218>)
 80136d2:	6812      	ldr	r2, [r2, #0]
 80136d4:	4611      	mov	r1, r2
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7f6 fd76 	bl	800a1c8 <ip4_addr_isbroadcast_u32>
 80136dc:	4603      	mov	r3, r0
 80136de:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	881b      	ldrh	r3, [r3, #0]
 80136e4:	b29b      	uxth	r3, r3
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7f5 f800 	bl	80086ec <lwip_htons>
 80136ec:	4603      	mov	r3, r0
 80136ee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	885b      	ldrh	r3, [r3, #2]
 80136f4:	b29b      	uxth	r3, r3
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7f4 fff8 	bl	80086ec <lwip_htons>
 80136fc:	4603      	mov	r3, r0
 80136fe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013700:	2300      	movs	r3, #0
 8013702:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013704:	2300      	movs	r3, #0
 8013706:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013708:	2300      	movs	r3, #0
 801370a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801370c:	4b64      	ldr	r3, [pc, #400]	; (80138a0 <udp_input+0x21c>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	627b      	str	r3, [r7, #36]	; 0x24
 8013712:	e054      	b.n	80137be <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013716:	8a5b      	ldrh	r3, [r3, #18]
 8013718:	89fa      	ldrh	r2, [r7, #14]
 801371a:	429a      	cmp	r2, r3
 801371c:	d14a      	bne.n	80137b4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801371e:	7cfb      	ldrb	r3, [r7, #19]
 8013720:	461a      	mov	r2, r3
 8013722:	6839      	ldr	r1, [r7, #0]
 8013724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013726:	f7ff ff49 	bl	80135bc <udp_input_local_match>
 801372a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801372c:	2b00      	cmp	r3, #0
 801372e:	d041      	beq.n	80137b4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013732:	7c1b      	ldrb	r3, [r3, #16]
 8013734:	f003 0304 	and.w	r3, r3, #4
 8013738:	2b00      	cmp	r3, #0
 801373a:	d11d      	bne.n	8013778 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d102      	bne.n	8013748 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013744:	61fb      	str	r3, [r7, #28]
 8013746:	e017      	b.n	8013778 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013748:	7cfb      	ldrb	r3, [r7, #19]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d014      	beq.n	8013778 <udp_input+0xf4>
 801374e:	4b53      	ldr	r3, [pc, #332]	; (801389c <udp_input+0x218>)
 8013750:	695b      	ldr	r3, [r3, #20]
 8013752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013756:	d10f      	bne.n	8013778 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013758:	69fb      	ldr	r3, [r7, #28]
 801375a:	681a      	ldr	r2, [r3, #0]
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	3304      	adds	r3, #4
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	429a      	cmp	r2, r3
 8013764:	d008      	beq.n	8013778 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013768:	681a      	ldr	r2, [r3, #0]
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	3304      	adds	r3, #4
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	429a      	cmp	r2, r3
 8013772:	d101      	bne.n	8013778 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013776:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801377a:	8a9b      	ldrh	r3, [r3, #20]
 801377c:	8a3a      	ldrh	r2, [r7, #16]
 801377e:	429a      	cmp	r2, r3
 8013780:	d118      	bne.n	80137b4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013784:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013786:	2b00      	cmp	r3, #0
 8013788:	d005      	beq.n	8013796 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801378c:	685a      	ldr	r2, [r3, #4]
 801378e:	4b43      	ldr	r3, [pc, #268]	; (801389c <udp_input+0x218>)
 8013790:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013792:	429a      	cmp	r2, r3
 8013794:	d10e      	bne.n	80137b4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013796:	6a3b      	ldr	r3, [r7, #32]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d014      	beq.n	80137c6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801379e:	68da      	ldr	r2, [r3, #12]
 80137a0:	6a3b      	ldr	r3, [r7, #32]
 80137a2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80137a4:	4b3e      	ldr	r3, [pc, #248]	; (80138a0 <udp_input+0x21c>)
 80137a6:	681a      	ldr	r2, [r3, #0]
 80137a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137aa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80137ac:	4a3c      	ldr	r2, [pc, #240]	; (80138a0 <udp_input+0x21c>)
 80137ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80137b2:	e008      	b.n	80137c6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80137b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80137b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ba:	68db      	ldr	r3, [r3, #12]
 80137bc:	627b      	str	r3, [r7, #36]	; 0x24
 80137be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d1a7      	bne.n	8013714 <udp_input+0x90>
 80137c4:	e000      	b.n	80137c8 <udp_input+0x144>
        break;
 80137c6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80137c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d101      	bne.n	80137d2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80137ce:	69fb      	ldr	r3, [r7, #28]
 80137d0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80137d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d002      	beq.n	80137de <udp_input+0x15a>
    for_us = 1;
 80137d8:	2301      	movs	r3, #1
 80137da:	76fb      	strb	r3, [r7, #27]
 80137dc:	e00a      	b.n	80137f4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	3304      	adds	r3, #4
 80137e2:	681a      	ldr	r2, [r3, #0]
 80137e4:	4b2d      	ldr	r3, [pc, #180]	; (801389c <udp_input+0x218>)
 80137e6:	695b      	ldr	r3, [r3, #20]
 80137e8:	429a      	cmp	r2, r3
 80137ea:	bf0c      	ite	eq
 80137ec:	2301      	moveq	r3, #1
 80137ee:	2300      	movne	r3, #0
 80137f0:	b2db      	uxtb	r3, r3
 80137f2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80137f4:	7efb      	ldrb	r3, [r7, #27]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d041      	beq.n	801387e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80137fa:	2108      	movs	r1, #8
 80137fc:	6878      	ldr	r0, [r7, #4]
 80137fe:	f7f8 ff25 	bl	800c64c <pbuf_remove_header>
 8013802:	4603      	mov	r3, r0
 8013804:	2b00      	cmp	r3, #0
 8013806:	d00a      	beq.n	801381e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013808:	4b20      	ldr	r3, [pc, #128]	; (801388c <udp_input+0x208>)
 801380a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801380e:	4925      	ldr	r1, [pc, #148]	; (80138a4 <udp_input+0x220>)
 8013810:	4820      	ldr	r0, [pc, #128]	; (8013894 <udp_input+0x210>)
 8013812:	f000 f8df 	bl	80139d4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013816:	6878      	ldr	r0, [r7, #4]
 8013818:	f7f8 ff9e 	bl	800c758 <pbuf_free>
      goto end;
 801381c:	e032      	b.n	8013884 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013820:	2b00      	cmp	r3, #0
 8013822:	d012      	beq.n	801384a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013826:	699b      	ldr	r3, [r3, #24]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d00a      	beq.n	8013842 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382e:	699c      	ldr	r4, [r3, #24]
 8013830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013832:	69d8      	ldr	r0, [r3, #28]
 8013834:	8a3b      	ldrh	r3, [r7, #16]
 8013836:	9300      	str	r3, [sp, #0]
 8013838:	4b1b      	ldr	r3, [pc, #108]	; (80138a8 <udp_input+0x224>)
 801383a:	687a      	ldr	r2, [r7, #4]
 801383c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801383e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013840:	e021      	b.n	8013886 <udp_input+0x202>
        pbuf_free(p);
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f7f8 ff88 	bl	800c758 <pbuf_free>
        goto end;
 8013848:	e01c      	b.n	8013884 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801384a:	7cfb      	ldrb	r3, [r7, #19]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d112      	bne.n	8013876 <udp_input+0x1f2>
 8013850:	4b12      	ldr	r3, [pc, #72]	; (801389c <udp_input+0x218>)
 8013852:	695b      	ldr	r3, [r3, #20]
 8013854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013858:	2be0      	cmp	r3, #224	; 0xe0
 801385a:	d00c      	beq.n	8013876 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801385c:	4b0f      	ldr	r3, [pc, #60]	; (801389c <udp_input+0x218>)
 801385e:	899b      	ldrh	r3, [r3, #12]
 8013860:	3308      	adds	r3, #8
 8013862:	b29b      	uxth	r3, r3
 8013864:	b21b      	sxth	r3, r3
 8013866:	4619      	mov	r1, r3
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f7f8 ff62 	bl	800c732 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801386e:	2103      	movs	r1, #3
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f7f6 f8ab 	bl	80099cc <icmp_dest_unreach>
      pbuf_free(p);
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f7f8 ff6e 	bl	800c758 <pbuf_free>
  return;
 801387c:	e003      	b.n	8013886 <udp_input+0x202>
    pbuf_free(p);
 801387e:	6878      	ldr	r0, [r7, #4]
 8013880:	f7f8 ff6a 	bl	800c758 <pbuf_free>
  return;
 8013884:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013886:	372c      	adds	r7, #44	; 0x2c
 8013888:	46bd      	mov	sp, r7
 801388a:	bd90      	pop	{r4, r7, pc}
 801388c:	080179bc 	.word	0x080179bc
 8013890:	08017a9c 	.word	0x08017a9c
 8013894:	08017a4c 	.word	0x08017a4c
 8013898:	08017ab4 	.word	0x08017ab4
 801389c:	2400431c 	.word	0x2400431c
 80138a0:	240074ac 	.word	0x240074ac
 80138a4:	08017ad0 	.word	0x08017ad0
 80138a8:	2400432c 	.word	0x2400432c

080138ac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80138ac:	b480      	push	{r7}
 80138ae:	b085      	sub	sp, #20
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d01e      	beq.n	80138fa <udp_netif_ip_addr_changed+0x4e>
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d01a      	beq.n	80138fa <udp_netif_ip_addr_changed+0x4e>
 80138c4:	683b      	ldr	r3, [r7, #0]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d017      	beq.n	80138fa <udp_netif_ip_addr_changed+0x4e>
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d013      	beq.n	80138fa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80138d2:	4b0d      	ldr	r3, [pc, #52]	; (8013908 <udp_netif_ip_addr_changed+0x5c>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	60fb      	str	r3, [r7, #12]
 80138d8:	e00c      	b.n	80138f4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	681a      	ldr	r2, [r3, #0]
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	429a      	cmp	r2, r3
 80138e4:	d103      	bne.n	80138ee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80138e6:	683b      	ldr	r3, [r7, #0]
 80138e8:	681a      	ldr	r2, [r3, #0]
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	68db      	ldr	r3, [r3, #12]
 80138f2:	60fb      	str	r3, [r7, #12]
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d1ef      	bne.n	80138da <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80138fa:	bf00      	nop
 80138fc:	3714      	adds	r7, #20
 80138fe:	46bd      	mov	sp, r7
 8013900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013904:	4770      	bx	lr
 8013906:	bf00      	nop
 8013908:	240074ac 	.word	0x240074ac

0801390c <__libc_init_array>:
 801390c:	b570      	push	{r4, r5, r6, lr}
 801390e:	4d0d      	ldr	r5, [pc, #52]	; (8013944 <__libc_init_array+0x38>)
 8013910:	4c0d      	ldr	r4, [pc, #52]	; (8013948 <__libc_init_array+0x3c>)
 8013912:	1b64      	subs	r4, r4, r5
 8013914:	10a4      	asrs	r4, r4, #2
 8013916:	2600      	movs	r6, #0
 8013918:	42a6      	cmp	r6, r4
 801391a:	d109      	bne.n	8013930 <__libc_init_array+0x24>
 801391c:	4d0b      	ldr	r5, [pc, #44]	; (801394c <__libc_init_array+0x40>)
 801391e:	4c0c      	ldr	r4, [pc, #48]	; (8013950 <__libc_init_array+0x44>)
 8013920:	f001 fa5c 	bl	8014ddc <_init>
 8013924:	1b64      	subs	r4, r4, r5
 8013926:	10a4      	asrs	r4, r4, #2
 8013928:	2600      	movs	r6, #0
 801392a:	42a6      	cmp	r6, r4
 801392c:	d105      	bne.n	801393a <__libc_init_array+0x2e>
 801392e:	bd70      	pop	{r4, r5, r6, pc}
 8013930:	f855 3b04 	ldr.w	r3, [r5], #4
 8013934:	4798      	blx	r3
 8013936:	3601      	adds	r6, #1
 8013938:	e7ee      	b.n	8013918 <__libc_init_array+0xc>
 801393a:	f855 3b04 	ldr.w	r3, [r5], #4
 801393e:	4798      	blx	r3
 8013940:	3601      	adds	r6, #1
 8013942:	e7f2      	b.n	801392a <__libc_init_array+0x1e>
 8013944:	08017fec 	.word	0x08017fec
 8013948:	08017fec 	.word	0x08017fec
 801394c:	08017fec 	.word	0x08017fec
 8013950:	08017ff0 	.word	0x08017ff0

08013954 <memcmp>:
 8013954:	b510      	push	{r4, lr}
 8013956:	3901      	subs	r1, #1
 8013958:	4402      	add	r2, r0
 801395a:	4290      	cmp	r0, r2
 801395c:	d101      	bne.n	8013962 <memcmp+0xe>
 801395e:	2000      	movs	r0, #0
 8013960:	e005      	b.n	801396e <memcmp+0x1a>
 8013962:	7803      	ldrb	r3, [r0, #0]
 8013964:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013968:	42a3      	cmp	r3, r4
 801396a:	d001      	beq.n	8013970 <memcmp+0x1c>
 801396c:	1b18      	subs	r0, r3, r4
 801396e:	bd10      	pop	{r4, pc}
 8013970:	3001      	adds	r0, #1
 8013972:	e7f2      	b.n	801395a <memcmp+0x6>

08013974 <memcpy>:
 8013974:	440a      	add	r2, r1
 8013976:	4291      	cmp	r1, r2
 8013978:	f100 33ff 	add.w	r3, r0, #4294967295
 801397c:	d100      	bne.n	8013980 <memcpy+0xc>
 801397e:	4770      	bx	lr
 8013980:	b510      	push	{r4, lr}
 8013982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013986:	f803 4f01 	strb.w	r4, [r3, #1]!
 801398a:	4291      	cmp	r1, r2
 801398c:	d1f9      	bne.n	8013982 <memcpy+0xe>
 801398e:	bd10      	pop	{r4, pc}

08013990 <memmove>:
 8013990:	4288      	cmp	r0, r1
 8013992:	b510      	push	{r4, lr}
 8013994:	eb01 0402 	add.w	r4, r1, r2
 8013998:	d902      	bls.n	80139a0 <memmove+0x10>
 801399a:	4284      	cmp	r4, r0
 801399c:	4623      	mov	r3, r4
 801399e:	d807      	bhi.n	80139b0 <memmove+0x20>
 80139a0:	1e43      	subs	r3, r0, #1
 80139a2:	42a1      	cmp	r1, r4
 80139a4:	d008      	beq.n	80139b8 <memmove+0x28>
 80139a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80139aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80139ae:	e7f8      	b.n	80139a2 <memmove+0x12>
 80139b0:	4402      	add	r2, r0
 80139b2:	4601      	mov	r1, r0
 80139b4:	428a      	cmp	r2, r1
 80139b6:	d100      	bne.n	80139ba <memmove+0x2a>
 80139b8:	bd10      	pop	{r4, pc}
 80139ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80139be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80139c2:	e7f7      	b.n	80139b4 <memmove+0x24>

080139c4 <memset>:
 80139c4:	4402      	add	r2, r0
 80139c6:	4603      	mov	r3, r0
 80139c8:	4293      	cmp	r3, r2
 80139ca:	d100      	bne.n	80139ce <memset+0xa>
 80139cc:	4770      	bx	lr
 80139ce:	f803 1b01 	strb.w	r1, [r3], #1
 80139d2:	e7f9      	b.n	80139c8 <memset+0x4>

080139d4 <iprintf>:
 80139d4:	b40f      	push	{r0, r1, r2, r3}
 80139d6:	4b0a      	ldr	r3, [pc, #40]	; (8013a00 <iprintf+0x2c>)
 80139d8:	b513      	push	{r0, r1, r4, lr}
 80139da:	681c      	ldr	r4, [r3, #0]
 80139dc:	b124      	cbz	r4, 80139e8 <iprintf+0x14>
 80139de:	69a3      	ldr	r3, [r4, #24]
 80139e0:	b913      	cbnz	r3, 80139e8 <iprintf+0x14>
 80139e2:	4620      	mov	r0, r4
 80139e4:	f000 f8e2 	bl	8013bac <__sinit>
 80139e8:	ab05      	add	r3, sp, #20
 80139ea:	9a04      	ldr	r2, [sp, #16]
 80139ec:	68a1      	ldr	r1, [r4, #8]
 80139ee:	9301      	str	r3, [sp, #4]
 80139f0:	4620      	mov	r0, r4
 80139f2:	f000 fbfb 	bl	80141ec <_vfiprintf_r>
 80139f6:	b002      	add	sp, #8
 80139f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139fc:	b004      	add	sp, #16
 80139fe:	4770      	bx	lr
 8013a00:	24000034 	.word	0x24000034

08013a04 <rand>:
 8013a04:	4b16      	ldr	r3, [pc, #88]	; (8013a60 <rand+0x5c>)
 8013a06:	b510      	push	{r4, lr}
 8013a08:	681c      	ldr	r4, [r3, #0]
 8013a0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013a0c:	b9b3      	cbnz	r3, 8013a3c <rand+0x38>
 8013a0e:	2018      	movs	r0, #24
 8013a10:	f000 f97e 	bl	8013d10 <malloc>
 8013a14:	63a0      	str	r0, [r4, #56]	; 0x38
 8013a16:	b928      	cbnz	r0, 8013a24 <rand+0x20>
 8013a18:	4602      	mov	r2, r0
 8013a1a:	4b12      	ldr	r3, [pc, #72]	; (8013a64 <rand+0x60>)
 8013a1c:	4812      	ldr	r0, [pc, #72]	; (8013a68 <rand+0x64>)
 8013a1e:	214e      	movs	r1, #78	; 0x4e
 8013a20:	f000 f84e 	bl	8013ac0 <__assert_func>
 8013a24:	4a11      	ldr	r2, [pc, #68]	; (8013a6c <rand+0x68>)
 8013a26:	4b12      	ldr	r3, [pc, #72]	; (8013a70 <rand+0x6c>)
 8013a28:	e9c0 2300 	strd	r2, r3, [r0]
 8013a2c:	4b11      	ldr	r3, [pc, #68]	; (8013a74 <rand+0x70>)
 8013a2e:	6083      	str	r3, [r0, #8]
 8013a30:	230b      	movs	r3, #11
 8013a32:	8183      	strh	r3, [r0, #12]
 8013a34:	2201      	movs	r2, #1
 8013a36:	2300      	movs	r3, #0
 8013a38:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013a3c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013a3e:	4a0e      	ldr	r2, [pc, #56]	; (8013a78 <rand+0x74>)
 8013a40:	6920      	ldr	r0, [r4, #16]
 8013a42:	6963      	ldr	r3, [r4, #20]
 8013a44:	490d      	ldr	r1, [pc, #52]	; (8013a7c <rand+0x78>)
 8013a46:	4342      	muls	r2, r0
 8013a48:	fb01 2203 	mla	r2, r1, r3, r2
 8013a4c:	fba0 0101 	umull	r0, r1, r0, r1
 8013a50:	1c43      	adds	r3, r0, #1
 8013a52:	eb42 0001 	adc.w	r0, r2, r1
 8013a56:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013a5a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013a5e:	bd10      	pop	{r4, pc}
 8013a60:	24000034 	.word	0x24000034
 8013a64:	08017ea8 	.word	0x08017ea8
 8013a68:	08017ebf 	.word	0x08017ebf
 8013a6c:	abcd330e 	.word	0xabcd330e
 8013a70:	e66d1234 	.word	0xe66d1234
 8013a74:	0005deec 	.word	0x0005deec
 8013a78:	5851f42d 	.word	0x5851f42d
 8013a7c:	4c957f2d 	.word	0x4c957f2d

08013a80 <siprintf>:
 8013a80:	b40e      	push	{r1, r2, r3}
 8013a82:	b500      	push	{lr}
 8013a84:	b09c      	sub	sp, #112	; 0x70
 8013a86:	ab1d      	add	r3, sp, #116	; 0x74
 8013a88:	9002      	str	r0, [sp, #8]
 8013a8a:	9006      	str	r0, [sp, #24]
 8013a8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013a90:	4809      	ldr	r0, [pc, #36]	; (8013ab8 <siprintf+0x38>)
 8013a92:	9107      	str	r1, [sp, #28]
 8013a94:	9104      	str	r1, [sp, #16]
 8013a96:	4909      	ldr	r1, [pc, #36]	; (8013abc <siprintf+0x3c>)
 8013a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a9c:	9105      	str	r1, [sp, #20]
 8013a9e:	6800      	ldr	r0, [r0, #0]
 8013aa0:	9301      	str	r3, [sp, #4]
 8013aa2:	a902      	add	r1, sp, #8
 8013aa4:	f000 fa78 	bl	8013f98 <_svfiprintf_r>
 8013aa8:	9b02      	ldr	r3, [sp, #8]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	701a      	strb	r2, [r3, #0]
 8013aae:	b01c      	add	sp, #112	; 0x70
 8013ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ab4:	b003      	add	sp, #12
 8013ab6:	4770      	bx	lr
 8013ab8:	24000034 	.word	0x24000034
 8013abc:	ffff0208 	.word	0xffff0208

08013ac0 <__assert_func>:
 8013ac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013ac2:	4614      	mov	r4, r2
 8013ac4:	461a      	mov	r2, r3
 8013ac6:	4b09      	ldr	r3, [pc, #36]	; (8013aec <__assert_func+0x2c>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	4605      	mov	r5, r0
 8013acc:	68d8      	ldr	r0, [r3, #12]
 8013ace:	b14c      	cbz	r4, 8013ae4 <__assert_func+0x24>
 8013ad0:	4b07      	ldr	r3, [pc, #28]	; (8013af0 <__assert_func+0x30>)
 8013ad2:	9100      	str	r1, [sp, #0]
 8013ad4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013ad8:	4906      	ldr	r1, [pc, #24]	; (8013af4 <__assert_func+0x34>)
 8013ada:	462b      	mov	r3, r5
 8013adc:	f000 f8e4 	bl	8013ca8 <fiprintf>
 8013ae0:	f000 ff6e 	bl	80149c0 <abort>
 8013ae4:	4b04      	ldr	r3, [pc, #16]	; (8013af8 <__assert_func+0x38>)
 8013ae6:	461c      	mov	r4, r3
 8013ae8:	e7f3      	b.n	8013ad2 <__assert_func+0x12>
 8013aea:	bf00      	nop
 8013aec:	24000034 	.word	0x24000034
 8013af0:	08017f1a 	.word	0x08017f1a
 8013af4:	08017f27 	.word	0x08017f27
 8013af8:	08017f55 	.word	0x08017f55

08013afc <std>:
 8013afc:	2300      	movs	r3, #0
 8013afe:	b510      	push	{r4, lr}
 8013b00:	4604      	mov	r4, r0
 8013b02:	e9c0 3300 	strd	r3, r3, [r0]
 8013b06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013b0a:	6083      	str	r3, [r0, #8]
 8013b0c:	8181      	strh	r1, [r0, #12]
 8013b0e:	6643      	str	r3, [r0, #100]	; 0x64
 8013b10:	81c2      	strh	r2, [r0, #14]
 8013b12:	6183      	str	r3, [r0, #24]
 8013b14:	4619      	mov	r1, r3
 8013b16:	2208      	movs	r2, #8
 8013b18:	305c      	adds	r0, #92	; 0x5c
 8013b1a:	f7ff ff53 	bl	80139c4 <memset>
 8013b1e:	4b05      	ldr	r3, [pc, #20]	; (8013b34 <std+0x38>)
 8013b20:	6263      	str	r3, [r4, #36]	; 0x24
 8013b22:	4b05      	ldr	r3, [pc, #20]	; (8013b38 <std+0x3c>)
 8013b24:	62a3      	str	r3, [r4, #40]	; 0x28
 8013b26:	4b05      	ldr	r3, [pc, #20]	; (8013b3c <std+0x40>)
 8013b28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013b2a:	4b05      	ldr	r3, [pc, #20]	; (8013b40 <std+0x44>)
 8013b2c:	6224      	str	r4, [r4, #32]
 8013b2e:	6323      	str	r3, [r4, #48]	; 0x30
 8013b30:	bd10      	pop	{r4, pc}
 8013b32:	bf00      	nop
 8013b34:	08014795 	.word	0x08014795
 8013b38:	080147b7 	.word	0x080147b7
 8013b3c:	080147ef 	.word	0x080147ef
 8013b40:	08014813 	.word	0x08014813

08013b44 <_cleanup_r>:
 8013b44:	4901      	ldr	r1, [pc, #4]	; (8013b4c <_cleanup_r+0x8>)
 8013b46:	f000 b8c1 	b.w	8013ccc <_fwalk_reent>
 8013b4a:	bf00      	nop
 8013b4c:	08014afd 	.word	0x08014afd

08013b50 <__sfmoreglue>:
 8013b50:	b570      	push	{r4, r5, r6, lr}
 8013b52:	2268      	movs	r2, #104	; 0x68
 8013b54:	1e4d      	subs	r5, r1, #1
 8013b56:	4355      	muls	r5, r2
 8013b58:	460e      	mov	r6, r1
 8013b5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013b5e:	f000 f94b 	bl	8013df8 <_malloc_r>
 8013b62:	4604      	mov	r4, r0
 8013b64:	b140      	cbz	r0, 8013b78 <__sfmoreglue+0x28>
 8013b66:	2100      	movs	r1, #0
 8013b68:	e9c0 1600 	strd	r1, r6, [r0]
 8013b6c:	300c      	adds	r0, #12
 8013b6e:	60a0      	str	r0, [r4, #8]
 8013b70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013b74:	f7ff ff26 	bl	80139c4 <memset>
 8013b78:	4620      	mov	r0, r4
 8013b7a:	bd70      	pop	{r4, r5, r6, pc}

08013b7c <__sfp_lock_acquire>:
 8013b7c:	4801      	ldr	r0, [pc, #4]	; (8013b84 <__sfp_lock_acquire+0x8>)
 8013b7e:	f000 b8c5 	b.w	8013d0c <__retarget_lock_acquire_recursive>
 8013b82:	bf00      	nop
 8013b84:	240074b1 	.word	0x240074b1

08013b88 <__sfp_lock_release>:
 8013b88:	4801      	ldr	r0, [pc, #4]	; (8013b90 <__sfp_lock_release+0x8>)
 8013b8a:	f000 b8c0 	b.w	8013d0e <__retarget_lock_release_recursive>
 8013b8e:	bf00      	nop
 8013b90:	240074b1 	.word	0x240074b1

08013b94 <__sinit_lock_acquire>:
 8013b94:	4801      	ldr	r0, [pc, #4]	; (8013b9c <__sinit_lock_acquire+0x8>)
 8013b96:	f000 b8b9 	b.w	8013d0c <__retarget_lock_acquire_recursive>
 8013b9a:	bf00      	nop
 8013b9c:	240074b2 	.word	0x240074b2

08013ba0 <__sinit_lock_release>:
 8013ba0:	4801      	ldr	r0, [pc, #4]	; (8013ba8 <__sinit_lock_release+0x8>)
 8013ba2:	f000 b8b4 	b.w	8013d0e <__retarget_lock_release_recursive>
 8013ba6:	bf00      	nop
 8013ba8:	240074b2 	.word	0x240074b2

08013bac <__sinit>:
 8013bac:	b510      	push	{r4, lr}
 8013bae:	4604      	mov	r4, r0
 8013bb0:	f7ff fff0 	bl	8013b94 <__sinit_lock_acquire>
 8013bb4:	69a3      	ldr	r3, [r4, #24]
 8013bb6:	b11b      	cbz	r3, 8013bc0 <__sinit+0x14>
 8013bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bbc:	f7ff bff0 	b.w	8013ba0 <__sinit_lock_release>
 8013bc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013bc4:	6523      	str	r3, [r4, #80]	; 0x50
 8013bc6:	4b13      	ldr	r3, [pc, #76]	; (8013c14 <__sinit+0x68>)
 8013bc8:	4a13      	ldr	r2, [pc, #76]	; (8013c18 <__sinit+0x6c>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8013bce:	42a3      	cmp	r3, r4
 8013bd0:	bf04      	itt	eq
 8013bd2:	2301      	moveq	r3, #1
 8013bd4:	61a3      	streq	r3, [r4, #24]
 8013bd6:	4620      	mov	r0, r4
 8013bd8:	f000 f820 	bl	8013c1c <__sfp>
 8013bdc:	6060      	str	r0, [r4, #4]
 8013bde:	4620      	mov	r0, r4
 8013be0:	f000 f81c 	bl	8013c1c <__sfp>
 8013be4:	60a0      	str	r0, [r4, #8]
 8013be6:	4620      	mov	r0, r4
 8013be8:	f000 f818 	bl	8013c1c <__sfp>
 8013bec:	2200      	movs	r2, #0
 8013bee:	60e0      	str	r0, [r4, #12]
 8013bf0:	2104      	movs	r1, #4
 8013bf2:	6860      	ldr	r0, [r4, #4]
 8013bf4:	f7ff ff82 	bl	8013afc <std>
 8013bf8:	68a0      	ldr	r0, [r4, #8]
 8013bfa:	2201      	movs	r2, #1
 8013bfc:	2109      	movs	r1, #9
 8013bfe:	f7ff ff7d 	bl	8013afc <std>
 8013c02:	68e0      	ldr	r0, [r4, #12]
 8013c04:	2202      	movs	r2, #2
 8013c06:	2112      	movs	r1, #18
 8013c08:	f7ff ff78 	bl	8013afc <std>
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	61a3      	str	r3, [r4, #24]
 8013c10:	e7d2      	b.n	8013bb8 <__sinit+0xc>
 8013c12:	bf00      	nop
 8013c14:	08017ea4 	.word	0x08017ea4
 8013c18:	08013b45 	.word	0x08013b45

08013c1c <__sfp>:
 8013c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c1e:	4607      	mov	r7, r0
 8013c20:	f7ff ffac 	bl	8013b7c <__sfp_lock_acquire>
 8013c24:	4b1e      	ldr	r3, [pc, #120]	; (8013ca0 <__sfp+0x84>)
 8013c26:	681e      	ldr	r6, [r3, #0]
 8013c28:	69b3      	ldr	r3, [r6, #24]
 8013c2a:	b913      	cbnz	r3, 8013c32 <__sfp+0x16>
 8013c2c:	4630      	mov	r0, r6
 8013c2e:	f7ff ffbd 	bl	8013bac <__sinit>
 8013c32:	3648      	adds	r6, #72	; 0x48
 8013c34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013c38:	3b01      	subs	r3, #1
 8013c3a:	d503      	bpl.n	8013c44 <__sfp+0x28>
 8013c3c:	6833      	ldr	r3, [r6, #0]
 8013c3e:	b30b      	cbz	r3, 8013c84 <__sfp+0x68>
 8013c40:	6836      	ldr	r6, [r6, #0]
 8013c42:	e7f7      	b.n	8013c34 <__sfp+0x18>
 8013c44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013c48:	b9d5      	cbnz	r5, 8013c80 <__sfp+0x64>
 8013c4a:	4b16      	ldr	r3, [pc, #88]	; (8013ca4 <__sfp+0x88>)
 8013c4c:	60e3      	str	r3, [r4, #12]
 8013c4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013c52:	6665      	str	r5, [r4, #100]	; 0x64
 8013c54:	f000 f859 	bl	8013d0a <__retarget_lock_init_recursive>
 8013c58:	f7ff ff96 	bl	8013b88 <__sfp_lock_release>
 8013c5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013c60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013c64:	6025      	str	r5, [r4, #0]
 8013c66:	61a5      	str	r5, [r4, #24]
 8013c68:	2208      	movs	r2, #8
 8013c6a:	4629      	mov	r1, r5
 8013c6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013c70:	f7ff fea8 	bl	80139c4 <memset>
 8013c74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013c78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c80:	3468      	adds	r4, #104	; 0x68
 8013c82:	e7d9      	b.n	8013c38 <__sfp+0x1c>
 8013c84:	2104      	movs	r1, #4
 8013c86:	4638      	mov	r0, r7
 8013c88:	f7ff ff62 	bl	8013b50 <__sfmoreglue>
 8013c8c:	4604      	mov	r4, r0
 8013c8e:	6030      	str	r0, [r6, #0]
 8013c90:	2800      	cmp	r0, #0
 8013c92:	d1d5      	bne.n	8013c40 <__sfp+0x24>
 8013c94:	f7ff ff78 	bl	8013b88 <__sfp_lock_release>
 8013c98:	230c      	movs	r3, #12
 8013c9a:	603b      	str	r3, [r7, #0]
 8013c9c:	e7ee      	b.n	8013c7c <__sfp+0x60>
 8013c9e:	bf00      	nop
 8013ca0:	08017ea4 	.word	0x08017ea4
 8013ca4:	ffff0001 	.word	0xffff0001

08013ca8 <fiprintf>:
 8013ca8:	b40e      	push	{r1, r2, r3}
 8013caa:	b503      	push	{r0, r1, lr}
 8013cac:	4601      	mov	r1, r0
 8013cae:	ab03      	add	r3, sp, #12
 8013cb0:	4805      	ldr	r0, [pc, #20]	; (8013cc8 <fiprintf+0x20>)
 8013cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cb6:	6800      	ldr	r0, [r0, #0]
 8013cb8:	9301      	str	r3, [sp, #4]
 8013cba:	f000 fa97 	bl	80141ec <_vfiprintf_r>
 8013cbe:	b002      	add	sp, #8
 8013cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8013cc4:	b003      	add	sp, #12
 8013cc6:	4770      	bx	lr
 8013cc8:	24000034 	.word	0x24000034

08013ccc <_fwalk_reent>:
 8013ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cd0:	4606      	mov	r6, r0
 8013cd2:	4688      	mov	r8, r1
 8013cd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013cd8:	2700      	movs	r7, #0
 8013cda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013cde:	f1b9 0901 	subs.w	r9, r9, #1
 8013ce2:	d505      	bpl.n	8013cf0 <_fwalk_reent+0x24>
 8013ce4:	6824      	ldr	r4, [r4, #0]
 8013ce6:	2c00      	cmp	r4, #0
 8013ce8:	d1f7      	bne.n	8013cda <_fwalk_reent+0xe>
 8013cea:	4638      	mov	r0, r7
 8013cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cf0:	89ab      	ldrh	r3, [r5, #12]
 8013cf2:	2b01      	cmp	r3, #1
 8013cf4:	d907      	bls.n	8013d06 <_fwalk_reent+0x3a>
 8013cf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013cfa:	3301      	adds	r3, #1
 8013cfc:	d003      	beq.n	8013d06 <_fwalk_reent+0x3a>
 8013cfe:	4629      	mov	r1, r5
 8013d00:	4630      	mov	r0, r6
 8013d02:	47c0      	blx	r8
 8013d04:	4307      	orrs	r7, r0
 8013d06:	3568      	adds	r5, #104	; 0x68
 8013d08:	e7e9      	b.n	8013cde <_fwalk_reent+0x12>

08013d0a <__retarget_lock_init_recursive>:
 8013d0a:	4770      	bx	lr

08013d0c <__retarget_lock_acquire_recursive>:
 8013d0c:	4770      	bx	lr

08013d0e <__retarget_lock_release_recursive>:
 8013d0e:	4770      	bx	lr

08013d10 <malloc>:
 8013d10:	4b02      	ldr	r3, [pc, #8]	; (8013d1c <malloc+0xc>)
 8013d12:	4601      	mov	r1, r0
 8013d14:	6818      	ldr	r0, [r3, #0]
 8013d16:	f000 b86f 	b.w	8013df8 <_malloc_r>
 8013d1a:	bf00      	nop
 8013d1c:	24000034 	.word	0x24000034

08013d20 <_free_r>:
 8013d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d22:	2900      	cmp	r1, #0
 8013d24:	d044      	beq.n	8013db0 <_free_r+0x90>
 8013d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d2a:	9001      	str	r0, [sp, #4]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	f1a1 0404 	sub.w	r4, r1, #4
 8013d32:	bfb8      	it	lt
 8013d34:	18e4      	addlt	r4, r4, r3
 8013d36:	f000 ff95 	bl	8014c64 <__malloc_lock>
 8013d3a:	4a1e      	ldr	r2, [pc, #120]	; (8013db4 <_free_r+0x94>)
 8013d3c:	9801      	ldr	r0, [sp, #4]
 8013d3e:	6813      	ldr	r3, [r2, #0]
 8013d40:	b933      	cbnz	r3, 8013d50 <_free_r+0x30>
 8013d42:	6063      	str	r3, [r4, #4]
 8013d44:	6014      	str	r4, [r2, #0]
 8013d46:	b003      	add	sp, #12
 8013d48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013d4c:	f000 bf90 	b.w	8014c70 <__malloc_unlock>
 8013d50:	42a3      	cmp	r3, r4
 8013d52:	d908      	bls.n	8013d66 <_free_r+0x46>
 8013d54:	6825      	ldr	r5, [r4, #0]
 8013d56:	1961      	adds	r1, r4, r5
 8013d58:	428b      	cmp	r3, r1
 8013d5a:	bf01      	itttt	eq
 8013d5c:	6819      	ldreq	r1, [r3, #0]
 8013d5e:	685b      	ldreq	r3, [r3, #4]
 8013d60:	1949      	addeq	r1, r1, r5
 8013d62:	6021      	streq	r1, [r4, #0]
 8013d64:	e7ed      	b.n	8013d42 <_free_r+0x22>
 8013d66:	461a      	mov	r2, r3
 8013d68:	685b      	ldr	r3, [r3, #4]
 8013d6a:	b10b      	cbz	r3, 8013d70 <_free_r+0x50>
 8013d6c:	42a3      	cmp	r3, r4
 8013d6e:	d9fa      	bls.n	8013d66 <_free_r+0x46>
 8013d70:	6811      	ldr	r1, [r2, #0]
 8013d72:	1855      	adds	r5, r2, r1
 8013d74:	42a5      	cmp	r5, r4
 8013d76:	d10b      	bne.n	8013d90 <_free_r+0x70>
 8013d78:	6824      	ldr	r4, [r4, #0]
 8013d7a:	4421      	add	r1, r4
 8013d7c:	1854      	adds	r4, r2, r1
 8013d7e:	42a3      	cmp	r3, r4
 8013d80:	6011      	str	r1, [r2, #0]
 8013d82:	d1e0      	bne.n	8013d46 <_free_r+0x26>
 8013d84:	681c      	ldr	r4, [r3, #0]
 8013d86:	685b      	ldr	r3, [r3, #4]
 8013d88:	6053      	str	r3, [r2, #4]
 8013d8a:	4421      	add	r1, r4
 8013d8c:	6011      	str	r1, [r2, #0]
 8013d8e:	e7da      	b.n	8013d46 <_free_r+0x26>
 8013d90:	d902      	bls.n	8013d98 <_free_r+0x78>
 8013d92:	230c      	movs	r3, #12
 8013d94:	6003      	str	r3, [r0, #0]
 8013d96:	e7d6      	b.n	8013d46 <_free_r+0x26>
 8013d98:	6825      	ldr	r5, [r4, #0]
 8013d9a:	1961      	adds	r1, r4, r5
 8013d9c:	428b      	cmp	r3, r1
 8013d9e:	bf04      	itt	eq
 8013da0:	6819      	ldreq	r1, [r3, #0]
 8013da2:	685b      	ldreq	r3, [r3, #4]
 8013da4:	6063      	str	r3, [r4, #4]
 8013da6:	bf04      	itt	eq
 8013da8:	1949      	addeq	r1, r1, r5
 8013daa:	6021      	streq	r1, [r4, #0]
 8013dac:	6054      	str	r4, [r2, #4]
 8013dae:	e7ca      	b.n	8013d46 <_free_r+0x26>
 8013db0:	b003      	add	sp, #12
 8013db2:	bd30      	pop	{r4, r5, pc}
 8013db4:	240074b4 	.word	0x240074b4

08013db8 <sbrk_aligned>:
 8013db8:	b570      	push	{r4, r5, r6, lr}
 8013dba:	4e0e      	ldr	r6, [pc, #56]	; (8013df4 <sbrk_aligned+0x3c>)
 8013dbc:	460c      	mov	r4, r1
 8013dbe:	6831      	ldr	r1, [r6, #0]
 8013dc0:	4605      	mov	r5, r0
 8013dc2:	b911      	cbnz	r1, 8013dca <sbrk_aligned+0x12>
 8013dc4:	f000 fcd6 	bl	8014774 <_sbrk_r>
 8013dc8:	6030      	str	r0, [r6, #0]
 8013dca:	4621      	mov	r1, r4
 8013dcc:	4628      	mov	r0, r5
 8013dce:	f000 fcd1 	bl	8014774 <_sbrk_r>
 8013dd2:	1c43      	adds	r3, r0, #1
 8013dd4:	d00a      	beq.n	8013dec <sbrk_aligned+0x34>
 8013dd6:	1cc4      	adds	r4, r0, #3
 8013dd8:	f024 0403 	bic.w	r4, r4, #3
 8013ddc:	42a0      	cmp	r0, r4
 8013dde:	d007      	beq.n	8013df0 <sbrk_aligned+0x38>
 8013de0:	1a21      	subs	r1, r4, r0
 8013de2:	4628      	mov	r0, r5
 8013de4:	f000 fcc6 	bl	8014774 <_sbrk_r>
 8013de8:	3001      	adds	r0, #1
 8013dea:	d101      	bne.n	8013df0 <sbrk_aligned+0x38>
 8013dec:	f04f 34ff 	mov.w	r4, #4294967295
 8013df0:	4620      	mov	r0, r4
 8013df2:	bd70      	pop	{r4, r5, r6, pc}
 8013df4:	240074b8 	.word	0x240074b8

08013df8 <_malloc_r>:
 8013df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dfc:	1ccd      	adds	r5, r1, #3
 8013dfe:	f025 0503 	bic.w	r5, r5, #3
 8013e02:	3508      	adds	r5, #8
 8013e04:	2d0c      	cmp	r5, #12
 8013e06:	bf38      	it	cc
 8013e08:	250c      	movcc	r5, #12
 8013e0a:	2d00      	cmp	r5, #0
 8013e0c:	4607      	mov	r7, r0
 8013e0e:	db01      	blt.n	8013e14 <_malloc_r+0x1c>
 8013e10:	42a9      	cmp	r1, r5
 8013e12:	d905      	bls.n	8013e20 <_malloc_r+0x28>
 8013e14:	230c      	movs	r3, #12
 8013e16:	603b      	str	r3, [r7, #0]
 8013e18:	2600      	movs	r6, #0
 8013e1a:	4630      	mov	r0, r6
 8013e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e20:	4e2e      	ldr	r6, [pc, #184]	; (8013edc <_malloc_r+0xe4>)
 8013e22:	f000 ff1f 	bl	8014c64 <__malloc_lock>
 8013e26:	6833      	ldr	r3, [r6, #0]
 8013e28:	461c      	mov	r4, r3
 8013e2a:	bb34      	cbnz	r4, 8013e7a <_malloc_r+0x82>
 8013e2c:	4629      	mov	r1, r5
 8013e2e:	4638      	mov	r0, r7
 8013e30:	f7ff ffc2 	bl	8013db8 <sbrk_aligned>
 8013e34:	1c43      	adds	r3, r0, #1
 8013e36:	4604      	mov	r4, r0
 8013e38:	d14d      	bne.n	8013ed6 <_malloc_r+0xde>
 8013e3a:	6834      	ldr	r4, [r6, #0]
 8013e3c:	4626      	mov	r6, r4
 8013e3e:	2e00      	cmp	r6, #0
 8013e40:	d140      	bne.n	8013ec4 <_malloc_r+0xcc>
 8013e42:	6823      	ldr	r3, [r4, #0]
 8013e44:	4631      	mov	r1, r6
 8013e46:	4638      	mov	r0, r7
 8013e48:	eb04 0803 	add.w	r8, r4, r3
 8013e4c:	f000 fc92 	bl	8014774 <_sbrk_r>
 8013e50:	4580      	cmp	r8, r0
 8013e52:	d13a      	bne.n	8013eca <_malloc_r+0xd2>
 8013e54:	6821      	ldr	r1, [r4, #0]
 8013e56:	3503      	adds	r5, #3
 8013e58:	1a6d      	subs	r5, r5, r1
 8013e5a:	f025 0503 	bic.w	r5, r5, #3
 8013e5e:	3508      	adds	r5, #8
 8013e60:	2d0c      	cmp	r5, #12
 8013e62:	bf38      	it	cc
 8013e64:	250c      	movcc	r5, #12
 8013e66:	4629      	mov	r1, r5
 8013e68:	4638      	mov	r0, r7
 8013e6a:	f7ff ffa5 	bl	8013db8 <sbrk_aligned>
 8013e6e:	3001      	adds	r0, #1
 8013e70:	d02b      	beq.n	8013eca <_malloc_r+0xd2>
 8013e72:	6823      	ldr	r3, [r4, #0]
 8013e74:	442b      	add	r3, r5
 8013e76:	6023      	str	r3, [r4, #0]
 8013e78:	e00e      	b.n	8013e98 <_malloc_r+0xa0>
 8013e7a:	6822      	ldr	r2, [r4, #0]
 8013e7c:	1b52      	subs	r2, r2, r5
 8013e7e:	d41e      	bmi.n	8013ebe <_malloc_r+0xc6>
 8013e80:	2a0b      	cmp	r2, #11
 8013e82:	d916      	bls.n	8013eb2 <_malloc_r+0xba>
 8013e84:	1961      	adds	r1, r4, r5
 8013e86:	42a3      	cmp	r3, r4
 8013e88:	6025      	str	r5, [r4, #0]
 8013e8a:	bf18      	it	ne
 8013e8c:	6059      	strne	r1, [r3, #4]
 8013e8e:	6863      	ldr	r3, [r4, #4]
 8013e90:	bf08      	it	eq
 8013e92:	6031      	streq	r1, [r6, #0]
 8013e94:	5162      	str	r2, [r4, r5]
 8013e96:	604b      	str	r3, [r1, #4]
 8013e98:	4638      	mov	r0, r7
 8013e9a:	f104 060b 	add.w	r6, r4, #11
 8013e9e:	f000 fee7 	bl	8014c70 <__malloc_unlock>
 8013ea2:	f026 0607 	bic.w	r6, r6, #7
 8013ea6:	1d23      	adds	r3, r4, #4
 8013ea8:	1af2      	subs	r2, r6, r3
 8013eaa:	d0b6      	beq.n	8013e1a <_malloc_r+0x22>
 8013eac:	1b9b      	subs	r3, r3, r6
 8013eae:	50a3      	str	r3, [r4, r2]
 8013eb0:	e7b3      	b.n	8013e1a <_malloc_r+0x22>
 8013eb2:	6862      	ldr	r2, [r4, #4]
 8013eb4:	42a3      	cmp	r3, r4
 8013eb6:	bf0c      	ite	eq
 8013eb8:	6032      	streq	r2, [r6, #0]
 8013eba:	605a      	strne	r2, [r3, #4]
 8013ebc:	e7ec      	b.n	8013e98 <_malloc_r+0xa0>
 8013ebe:	4623      	mov	r3, r4
 8013ec0:	6864      	ldr	r4, [r4, #4]
 8013ec2:	e7b2      	b.n	8013e2a <_malloc_r+0x32>
 8013ec4:	4634      	mov	r4, r6
 8013ec6:	6876      	ldr	r6, [r6, #4]
 8013ec8:	e7b9      	b.n	8013e3e <_malloc_r+0x46>
 8013eca:	230c      	movs	r3, #12
 8013ecc:	603b      	str	r3, [r7, #0]
 8013ece:	4638      	mov	r0, r7
 8013ed0:	f000 fece 	bl	8014c70 <__malloc_unlock>
 8013ed4:	e7a1      	b.n	8013e1a <_malloc_r+0x22>
 8013ed6:	6025      	str	r5, [r4, #0]
 8013ed8:	e7de      	b.n	8013e98 <_malloc_r+0xa0>
 8013eda:	bf00      	nop
 8013edc:	240074b4 	.word	0x240074b4

08013ee0 <__ssputs_r>:
 8013ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ee4:	688e      	ldr	r6, [r1, #8]
 8013ee6:	429e      	cmp	r6, r3
 8013ee8:	4682      	mov	sl, r0
 8013eea:	460c      	mov	r4, r1
 8013eec:	4690      	mov	r8, r2
 8013eee:	461f      	mov	r7, r3
 8013ef0:	d838      	bhi.n	8013f64 <__ssputs_r+0x84>
 8013ef2:	898a      	ldrh	r2, [r1, #12]
 8013ef4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013ef8:	d032      	beq.n	8013f60 <__ssputs_r+0x80>
 8013efa:	6825      	ldr	r5, [r4, #0]
 8013efc:	6909      	ldr	r1, [r1, #16]
 8013efe:	eba5 0901 	sub.w	r9, r5, r1
 8013f02:	6965      	ldr	r5, [r4, #20]
 8013f04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013f0c:	3301      	adds	r3, #1
 8013f0e:	444b      	add	r3, r9
 8013f10:	106d      	asrs	r5, r5, #1
 8013f12:	429d      	cmp	r5, r3
 8013f14:	bf38      	it	cc
 8013f16:	461d      	movcc	r5, r3
 8013f18:	0553      	lsls	r3, r2, #21
 8013f1a:	d531      	bpl.n	8013f80 <__ssputs_r+0xa0>
 8013f1c:	4629      	mov	r1, r5
 8013f1e:	f7ff ff6b 	bl	8013df8 <_malloc_r>
 8013f22:	4606      	mov	r6, r0
 8013f24:	b950      	cbnz	r0, 8013f3c <__ssputs_r+0x5c>
 8013f26:	230c      	movs	r3, #12
 8013f28:	f8ca 3000 	str.w	r3, [sl]
 8013f2c:	89a3      	ldrh	r3, [r4, #12]
 8013f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f32:	81a3      	strh	r3, [r4, #12]
 8013f34:	f04f 30ff 	mov.w	r0, #4294967295
 8013f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f3c:	6921      	ldr	r1, [r4, #16]
 8013f3e:	464a      	mov	r2, r9
 8013f40:	f7ff fd18 	bl	8013974 <memcpy>
 8013f44:	89a3      	ldrh	r3, [r4, #12]
 8013f46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f4e:	81a3      	strh	r3, [r4, #12]
 8013f50:	6126      	str	r6, [r4, #16]
 8013f52:	6165      	str	r5, [r4, #20]
 8013f54:	444e      	add	r6, r9
 8013f56:	eba5 0509 	sub.w	r5, r5, r9
 8013f5a:	6026      	str	r6, [r4, #0]
 8013f5c:	60a5      	str	r5, [r4, #8]
 8013f5e:	463e      	mov	r6, r7
 8013f60:	42be      	cmp	r6, r7
 8013f62:	d900      	bls.n	8013f66 <__ssputs_r+0x86>
 8013f64:	463e      	mov	r6, r7
 8013f66:	6820      	ldr	r0, [r4, #0]
 8013f68:	4632      	mov	r2, r6
 8013f6a:	4641      	mov	r1, r8
 8013f6c:	f7ff fd10 	bl	8013990 <memmove>
 8013f70:	68a3      	ldr	r3, [r4, #8]
 8013f72:	1b9b      	subs	r3, r3, r6
 8013f74:	60a3      	str	r3, [r4, #8]
 8013f76:	6823      	ldr	r3, [r4, #0]
 8013f78:	4433      	add	r3, r6
 8013f7a:	6023      	str	r3, [r4, #0]
 8013f7c:	2000      	movs	r0, #0
 8013f7e:	e7db      	b.n	8013f38 <__ssputs_r+0x58>
 8013f80:	462a      	mov	r2, r5
 8013f82:	f000 fe7b 	bl	8014c7c <_realloc_r>
 8013f86:	4606      	mov	r6, r0
 8013f88:	2800      	cmp	r0, #0
 8013f8a:	d1e1      	bne.n	8013f50 <__ssputs_r+0x70>
 8013f8c:	6921      	ldr	r1, [r4, #16]
 8013f8e:	4650      	mov	r0, sl
 8013f90:	f7ff fec6 	bl	8013d20 <_free_r>
 8013f94:	e7c7      	b.n	8013f26 <__ssputs_r+0x46>
	...

08013f98 <_svfiprintf_r>:
 8013f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f9c:	4698      	mov	r8, r3
 8013f9e:	898b      	ldrh	r3, [r1, #12]
 8013fa0:	061b      	lsls	r3, r3, #24
 8013fa2:	b09d      	sub	sp, #116	; 0x74
 8013fa4:	4607      	mov	r7, r0
 8013fa6:	460d      	mov	r5, r1
 8013fa8:	4614      	mov	r4, r2
 8013faa:	d50e      	bpl.n	8013fca <_svfiprintf_r+0x32>
 8013fac:	690b      	ldr	r3, [r1, #16]
 8013fae:	b963      	cbnz	r3, 8013fca <_svfiprintf_r+0x32>
 8013fb0:	2140      	movs	r1, #64	; 0x40
 8013fb2:	f7ff ff21 	bl	8013df8 <_malloc_r>
 8013fb6:	6028      	str	r0, [r5, #0]
 8013fb8:	6128      	str	r0, [r5, #16]
 8013fba:	b920      	cbnz	r0, 8013fc6 <_svfiprintf_r+0x2e>
 8013fbc:	230c      	movs	r3, #12
 8013fbe:	603b      	str	r3, [r7, #0]
 8013fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8013fc4:	e0d1      	b.n	801416a <_svfiprintf_r+0x1d2>
 8013fc6:	2340      	movs	r3, #64	; 0x40
 8013fc8:	616b      	str	r3, [r5, #20]
 8013fca:	2300      	movs	r3, #0
 8013fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8013fce:	2320      	movs	r3, #32
 8013fd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013fd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8013fd8:	2330      	movs	r3, #48	; 0x30
 8013fda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014184 <_svfiprintf_r+0x1ec>
 8013fde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013fe2:	f04f 0901 	mov.w	r9, #1
 8013fe6:	4623      	mov	r3, r4
 8013fe8:	469a      	mov	sl, r3
 8013fea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013fee:	b10a      	cbz	r2, 8013ff4 <_svfiprintf_r+0x5c>
 8013ff0:	2a25      	cmp	r2, #37	; 0x25
 8013ff2:	d1f9      	bne.n	8013fe8 <_svfiprintf_r+0x50>
 8013ff4:	ebba 0b04 	subs.w	fp, sl, r4
 8013ff8:	d00b      	beq.n	8014012 <_svfiprintf_r+0x7a>
 8013ffa:	465b      	mov	r3, fp
 8013ffc:	4622      	mov	r2, r4
 8013ffe:	4629      	mov	r1, r5
 8014000:	4638      	mov	r0, r7
 8014002:	f7ff ff6d 	bl	8013ee0 <__ssputs_r>
 8014006:	3001      	adds	r0, #1
 8014008:	f000 80aa 	beq.w	8014160 <_svfiprintf_r+0x1c8>
 801400c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801400e:	445a      	add	r2, fp
 8014010:	9209      	str	r2, [sp, #36]	; 0x24
 8014012:	f89a 3000 	ldrb.w	r3, [sl]
 8014016:	2b00      	cmp	r3, #0
 8014018:	f000 80a2 	beq.w	8014160 <_svfiprintf_r+0x1c8>
 801401c:	2300      	movs	r3, #0
 801401e:	f04f 32ff 	mov.w	r2, #4294967295
 8014022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014026:	f10a 0a01 	add.w	sl, sl, #1
 801402a:	9304      	str	r3, [sp, #16]
 801402c:	9307      	str	r3, [sp, #28]
 801402e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014032:	931a      	str	r3, [sp, #104]	; 0x68
 8014034:	4654      	mov	r4, sl
 8014036:	2205      	movs	r2, #5
 8014038:	f814 1b01 	ldrb.w	r1, [r4], #1
 801403c:	4851      	ldr	r0, [pc, #324]	; (8014184 <_svfiprintf_r+0x1ec>)
 801403e:	f7ec f94f 	bl	80002e0 <memchr>
 8014042:	9a04      	ldr	r2, [sp, #16]
 8014044:	b9d8      	cbnz	r0, 801407e <_svfiprintf_r+0xe6>
 8014046:	06d0      	lsls	r0, r2, #27
 8014048:	bf44      	itt	mi
 801404a:	2320      	movmi	r3, #32
 801404c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014050:	0711      	lsls	r1, r2, #28
 8014052:	bf44      	itt	mi
 8014054:	232b      	movmi	r3, #43	; 0x2b
 8014056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801405a:	f89a 3000 	ldrb.w	r3, [sl]
 801405e:	2b2a      	cmp	r3, #42	; 0x2a
 8014060:	d015      	beq.n	801408e <_svfiprintf_r+0xf6>
 8014062:	9a07      	ldr	r2, [sp, #28]
 8014064:	4654      	mov	r4, sl
 8014066:	2000      	movs	r0, #0
 8014068:	f04f 0c0a 	mov.w	ip, #10
 801406c:	4621      	mov	r1, r4
 801406e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014072:	3b30      	subs	r3, #48	; 0x30
 8014074:	2b09      	cmp	r3, #9
 8014076:	d94e      	bls.n	8014116 <_svfiprintf_r+0x17e>
 8014078:	b1b0      	cbz	r0, 80140a8 <_svfiprintf_r+0x110>
 801407a:	9207      	str	r2, [sp, #28]
 801407c:	e014      	b.n	80140a8 <_svfiprintf_r+0x110>
 801407e:	eba0 0308 	sub.w	r3, r0, r8
 8014082:	fa09 f303 	lsl.w	r3, r9, r3
 8014086:	4313      	orrs	r3, r2
 8014088:	9304      	str	r3, [sp, #16]
 801408a:	46a2      	mov	sl, r4
 801408c:	e7d2      	b.n	8014034 <_svfiprintf_r+0x9c>
 801408e:	9b03      	ldr	r3, [sp, #12]
 8014090:	1d19      	adds	r1, r3, #4
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	9103      	str	r1, [sp, #12]
 8014096:	2b00      	cmp	r3, #0
 8014098:	bfbb      	ittet	lt
 801409a:	425b      	neglt	r3, r3
 801409c:	f042 0202 	orrlt.w	r2, r2, #2
 80140a0:	9307      	strge	r3, [sp, #28]
 80140a2:	9307      	strlt	r3, [sp, #28]
 80140a4:	bfb8      	it	lt
 80140a6:	9204      	strlt	r2, [sp, #16]
 80140a8:	7823      	ldrb	r3, [r4, #0]
 80140aa:	2b2e      	cmp	r3, #46	; 0x2e
 80140ac:	d10c      	bne.n	80140c8 <_svfiprintf_r+0x130>
 80140ae:	7863      	ldrb	r3, [r4, #1]
 80140b0:	2b2a      	cmp	r3, #42	; 0x2a
 80140b2:	d135      	bne.n	8014120 <_svfiprintf_r+0x188>
 80140b4:	9b03      	ldr	r3, [sp, #12]
 80140b6:	1d1a      	adds	r2, r3, #4
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	9203      	str	r2, [sp, #12]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	bfb8      	it	lt
 80140c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80140c4:	3402      	adds	r4, #2
 80140c6:	9305      	str	r3, [sp, #20]
 80140c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014194 <_svfiprintf_r+0x1fc>
 80140cc:	7821      	ldrb	r1, [r4, #0]
 80140ce:	2203      	movs	r2, #3
 80140d0:	4650      	mov	r0, sl
 80140d2:	f7ec f905 	bl	80002e0 <memchr>
 80140d6:	b140      	cbz	r0, 80140ea <_svfiprintf_r+0x152>
 80140d8:	2340      	movs	r3, #64	; 0x40
 80140da:	eba0 000a 	sub.w	r0, r0, sl
 80140de:	fa03 f000 	lsl.w	r0, r3, r0
 80140e2:	9b04      	ldr	r3, [sp, #16]
 80140e4:	4303      	orrs	r3, r0
 80140e6:	3401      	adds	r4, #1
 80140e8:	9304      	str	r3, [sp, #16]
 80140ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140ee:	4826      	ldr	r0, [pc, #152]	; (8014188 <_svfiprintf_r+0x1f0>)
 80140f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80140f4:	2206      	movs	r2, #6
 80140f6:	f7ec f8f3 	bl	80002e0 <memchr>
 80140fa:	2800      	cmp	r0, #0
 80140fc:	d038      	beq.n	8014170 <_svfiprintf_r+0x1d8>
 80140fe:	4b23      	ldr	r3, [pc, #140]	; (801418c <_svfiprintf_r+0x1f4>)
 8014100:	bb1b      	cbnz	r3, 801414a <_svfiprintf_r+0x1b2>
 8014102:	9b03      	ldr	r3, [sp, #12]
 8014104:	3307      	adds	r3, #7
 8014106:	f023 0307 	bic.w	r3, r3, #7
 801410a:	3308      	adds	r3, #8
 801410c:	9303      	str	r3, [sp, #12]
 801410e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014110:	4433      	add	r3, r6
 8014112:	9309      	str	r3, [sp, #36]	; 0x24
 8014114:	e767      	b.n	8013fe6 <_svfiprintf_r+0x4e>
 8014116:	fb0c 3202 	mla	r2, ip, r2, r3
 801411a:	460c      	mov	r4, r1
 801411c:	2001      	movs	r0, #1
 801411e:	e7a5      	b.n	801406c <_svfiprintf_r+0xd4>
 8014120:	2300      	movs	r3, #0
 8014122:	3401      	adds	r4, #1
 8014124:	9305      	str	r3, [sp, #20]
 8014126:	4619      	mov	r1, r3
 8014128:	f04f 0c0a 	mov.w	ip, #10
 801412c:	4620      	mov	r0, r4
 801412e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014132:	3a30      	subs	r2, #48	; 0x30
 8014134:	2a09      	cmp	r2, #9
 8014136:	d903      	bls.n	8014140 <_svfiprintf_r+0x1a8>
 8014138:	2b00      	cmp	r3, #0
 801413a:	d0c5      	beq.n	80140c8 <_svfiprintf_r+0x130>
 801413c:	9105      	str	r1, [sp, #20]
 801413e:	e7c3      	b.n	80140c8 <_svfiprintf_r+0x130>
 8014140:	fb0c 2101 	mla	r1, ip, r1, r2
 8014144:	4604      	mov	r4, r0
 8014146:	2301      	movs	r3, #1
 8014148:	e7f0      	b.n	801412c <_svfiprintf_r+0x194>
 801414a:	ab03      	add	r3, sp, #12
 801414c:	9300      	str	r3, [sp, #0]
 801414e:	462a      	mov	r2, r5
 8014150:	4b0f      	ldr	r3, [pc, #60]	; (8014190 <_svfiprintf_r+0x1f8>)
 8014152:	a904      	add	r1, sp, #16
 8014154:	4638      	mov	r0, r7
 8014156:	f3af 8000 	nop.w
 801415a:	1c42      	adds	r2, r0, #1
 801415c:	4606      	mov	r6, r0
 801415e:	d1d6      	bne.n	801410e <_svfiprintf_r+0x176>
 8014160:	89ab      	ldrh	r3, [r5, #12]
 8014162:	065b      	lsls	r3, r3, #25
 8014164:	f53f af2c 	bmi.w	8013fc0 <_svfiprintf_r+0x28>
 8014168:	9809      	ldr	r0, [sp, #36]	; 0x24
 801416a:	b01d      	add	sp, #116	; 0x74
 801416c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014170:	ab03      	add	r3, sp, #12
 8014172:	9300      	str	r3, [sp, #0]
 8014174:	462a      	mov	r2, r5
 8014176:	4b06      	ldr	r3, [pc, #24]	; (8014190 <_svfiprintf_r+0x1f8>)
 8014178:	a904      	add	r1, sp, #16
 801417a:	4638      	mov	r0, r7
 801417c:	f000 f9d4 	bl	8014528 <_printf_i>
 8014180:	e7eb      	b.n	801415a <_svfiprintf_r+0x1c2>
 8014182:	bf00      	nop
 8014184:	08017fb8 	.word	0x08017fb8
 8014188:	08017fc2 	.word	0x08017fc2
 801418c:	00000000 	.word	0x00000000
 8014190:	08013ee1 	.word	0x08013ee1
 8014194:	08017fbe 	.word	0x08017fbe

08014198 <__sfputc_r>:
 8014198:	6893      	ldr	r3, [r2, #8]
 801419a:	3b01      	subs	r3, #1
 801419c:	2b00      	cmp	r3, #0
 801419e:	b410      	push	{r4}
 80141a0:	6093      	str	r3, [r2, #8]
 80141a2:	da08      	bge.n	80141b6 <__sfputc_r+0x1e>
 80141a4:	6994      	ldr	r4, [r2, #24]
 80141a6:	42a3      	cmp	r3, r4
 80141a8:	db01      	blt.n	80141ae <__sfputc_r+0x16>
 80141aa:	290a      	cmp	r1, #10
 80141ac:	d103      	bne.n	80141b6 <__sfputc_r+0x1e>
 80141ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141b2:	f000 bb33 	b.w	801481c <__swbuf_r>
 80141b6:	6813      	ldr	r3, [r2, #0]
 80141b8:	1c58      	adds	r0, r3, #1
 80141ba:	6010      	str	r0, [r2, #0]
 80141bc:	7019      	strb	r1, [r3, #0]
 80141be:	4608      	mov	r0, r1
 80141c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141c4:	4770      	bx	lr

080141c6 <__sfputs_r>:
 80141c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141c8:	4606      	mov	r6, r0
 80141ca:	460f      	mov	r7, r1
 80141cc:	4614      	mov	r4, r2
 80141ce:	18d5      	adds	r5, r2, r3
 80141d0:	42ac      	cmp	r4, r5
 80141d2:	d101      	bne.n	80141d8 <__sfputs_r+0x12>
 80141d4:	2000      	movs	r0, #0
 80141d6:	e007      	b.n	80141e8 <__sfputs_r+0x22>
 80141d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141dc:	463a      	mov	r2, r7
 80141de:	4630      	mov	r0, r6
 80141e0:	f7ff ffda 	bl	8014198 <__sfputc_r>
 80141e4:	1c43      	adds	r3, r0, #1
 80141e6:	d1f3      	bne.n	80141d0 <__sfputs_r+0xa>
 80141e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080141ec <_vfiprintf_r>:
 80141ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f0:	460d      	mov	r5, r1
 80141f2:	b09d      	sub	sp, #116	; 0x74
 80141f4:	4614      	mov	r4, r2
 80141f6:	4698      	mov	r8, r3
 80141f8:	4606      	mov	r6, r0
 80141fa:	b118      	cbz	r0, 8014204 <_vfiprintf_r+0x18>
 80141fc:	6983      	ldr	r3, [r0, #24]
 80141fe:	b90b      	cbnz	r3, 8014204 <_vfiprintf_r+0x18>
 8014200:	f7ff fcd4 	bl	8013bac <__sinit>
 8014204:	4b89      	ldr	r3, [pc, #548]	; (801442c <_vfiprintf_r+0x240>)
 8014206:	429d      	cmp	r5, r3
 8014208:	d11b      	bne.n	8014242 <_vfiprintf_r+0x56>
 801420a:	6875      	ldr	r5, [r6, #4]
 801420c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801420e:	07d9      	lsls	r1, r3, #31
 8014210:	d405      	bmi.n	801421e <_vfiprintf_r+0x32>
 8014212:	89ab      	ldrh	r3, [r5, #12]
 8014214:	059a      	lsls	r2, r3, #22
 8014216:	d402      	bmi.n	801421e <_vfiprintf_r+0x32>
 8014218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801421a:	f7ff fd77 	bl	8013d0c <__retarget_lock_acquire_recursive>
 801421e:	89ab      	ldrh	r3, [r5, #12]
 8014220:	071b      	lsls	r3, r3, #28
 8014222:	d501      	bpl.n	8014228 <_vfiprintf_r+0x3c>
 8014224:	692b      	ldr	r3, [r5, #16]
 8014226:	b9eb      	cbnz	r3, 8014264 <_vfiprintf_r+0x78>
 8014228:	4629      	mov	r1, r5
 801422a:	4630      	mov	r0, r6
 801422c:	f000 fb5a 	bl	80148e4 <__swsetup_r>
 8014230:	b1c0      	cbz	r0, 8014264 <_vfiprintf_r+0x78>
 8014232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014234:	07dc      	lsls	r4, r3, #31
 8014236:	d50e      	bpl.n	8014256 <_vfiprintf_r+0x6a>
 8014238:	f04f 30ff 	mov.w	r0, #4294967295
 801423c:	b01d      	add	sp, #116	; 0x74
 801423e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014242:	4b7b      	ldr	r3, [pc, #492]	; (8014430 <_vfiprintf_r+0x244>)
 8014244:	429d      	cmp	r5, r3
 8014246:	d101      	bne.n	801424c <_vfiprintf_r+0x60>
 8014248:	68b5      	ldr	r5, [r6, #8]
 801424a:	e7df      	b.n	801420c <_vfiprintf_r+0x20>
 801424c:	4b79      	ldr	r3, [pc, #484]	; (8014434 <_vfiprintf_r+0x248>)
 801424e:	429d      	cmp	r5, r3
 8014250:	bf08      	it	eq
 8014252:	68f5      	ldreq	r5, [r6, #12]
 8014254:	e7da      	b.n	801420c <_vfiprintf_r+0x20>
 8014256:	89ab      	ldrh	r3, [r5, #12]
 8014258:	0598      	lsls	r0, r3, #22
 801425a:	d4ed      	bmi.n	8014238 <_vfiprintf_r+0x4c>
 801425c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801425e:	f7ff fd56 	bl	8013d0e <__retarget_lock_release_recursive>
 8014262:	e7e9      	b.n	8014238 <_vfiprintf_r+0x4c>
 8014264:	2300      	movs	r3, #0
 8014266:	9309      	str	r3, [sp, #36]	; 0x24
 8014268:	2320      	movs	r3, #32
 801426a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801426e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014272:	2330      	movs	r3, #48	; 0x30
 8014274:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014438 <_vfiprintf_r+0x24c>
 8014278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801427c:	f04f 0901 	mov.w	r9, #1
 8014280:	4623      	mov	r3, r4
 8014282:	469a      	mov	sl, r3
 8014284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014288:	b10a      	cbz	r2, 801428e <_vfiprintf_r+0xa2>
 801428a:	2a25      	cmp	r2, #37	; 0x25
 801428c:	d1f9      	bne.n	8014282 <_vfiprintf_r+0x96>
 801428e:	ebba 0b04 	subs.w	fp, sl, r4
 8014292:	d00b      	beq.n	80142ac <_vfiprintf_r+0xc0>
 8014294:	465b      	mov	r3, fp
 8014296:	4622      	mov	r2, r4
 8014298:	4629      	mov	r1, r5
 801429a:	4630      	mov	r0, r6
 801429c:	f7ff ff93 	bl	80141c6 <__sfputs_r>
 80142a0:	3001      	adds	r0, #1
 80142a2:	f000 80aa 	beq.w	80143fa <_vfiprintf_r+0x20e>
 80142a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142a8:	445a      	add	r2, fp
 80142aa:	9209      	str	r2, [sp, #36]	; 0x24
 80142ac:	f89a 3000 	ldrb.w	r3, [sl]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	f000 80a2 	beq.w	80143fa <_vfiprintf_r+0x20e>
 80142b6:	2300      	movs	r3, #0
 80142b8:	f04f 32ff 	mov.w	r2, #4294967295
 80142bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142c0:	f10a 0a01 	add.w	sl, sl, #1
 80142c4:	9304      	str	r3, [sp, #16]
 80142c6:	9307      	str	r3, [sp, #28]
 80142c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80142cc:	931a      	str	r3, [sp, #104]	; 0x68
 80142ce:	4654      	mov	r4, sl
 80142d0:	2205      	movs	r2, #5
 80142d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142d6:	4858      	ldr	r0, [pc, #352]	; (8014438 <_vfiprintf_r+0x24c>)
 80142d8:	f7ec f802 	bl	80002e0 <memchr>
 80142dc:	9a04      	ldr	r2, [sp, #16]
 80142de:	b9d8      	cbnz	r0, 8014318 <_vfiprintf_r+0x12c>
 80142e0:	06d1      	lsls	r1, r2, #27
 80142e2:	bf44      	itt	mi
 80142e4:	2320      	movmi	r3, #32
 80142e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80142ea:	0713      	lsls	r3, r2, #28
 80142ec:	bf44      	itt	mi
 80142ee:	232b      	movmi	r3, #43	; 0x2b
 80142f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80142f4:	f89a 3000 	ldrb.w	r3, [sl]
 80142f8:	2b2a      	cmp	r3, #42	; 0x2a
 80142fa:	d015      	beq.n	8014328 <_vfiprintf_r+0x13c>
 80142fc:	9a07      	ldr	r2, [sp, #28]
 80142fe:	4654      	mov	r4, sl
 8014300:	2000      	movs	r0, #0
 8014302:	f04f 0c0a 	mov.w	ip, #10
 8014306:	4621      	mov	r1, r4
 8014308:	f811 3b01 	ldrb.w	r3, [r1], #1
 801430c:	3b30      	subs	r3, #48	; 0x30
 801430e:	2b09      	cmp	r3, #9
 8014310:	d94e      	bls.n	80143b0 <_vfiprintf_r+0x1c4>
 8014312:	b1b0      	cbz	r0, 8014342 <_vfiprintf_r+0x156>
 8014314:	9207      	str	r2, [sp, #28]
 8014316:	e014      	b.n	8014342 <_vfiprintf_r+0x156>
 8014318:	eba0 0308 	sub.w	r3, r0, r8
 801431c:	fa09 f303 	lsl.w	r3, r9, r3
 8014320:	4313      	orrs	r3, r2
 8014322:	9304      	str	r3, [sp, #16]
 8014324:	46a2      	mov	sl, r4
 8014326:	e7d2      	b.n	80142ce <_vfiprintf_r+0xe2>
 8014328:	9b03      	ldr	r3, [sp, #12]
 801432a:	1d19      	adds	r1, r3, #4
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	9103      	str	r1, [sp, #12]
 8014330:	2b00      	cmp	r3, #0
 8014332:	bfbb      	ittet	lt
 8014334:	425b      	neglt	r3, r3
 8014336:	f042 0202 	orrlt.w	r2, r2, #2
 801433a:	9307      	strge	r3, [sp, #28]
 801433c:	9307      	strlt	r3, [sp, #28]
 801433e:	bfb8      	it	lt
 8014340:	9204      	strlt	r2, [sp, #16]
 8014342:	7823      	ldrb	r3, [r4, #0]
 8014344:	2b2e      	cmp	r3, #46	; 0x2e
 8014346:	d10c      	bne.n	8014362 <_vfiprintf_r+0x176>
 8014348:	7863      	ldrb	r3, [r4, #1]
 801434a:	2b2a      	cmp	r3, #42	; 0x2a
 801434c:	d135      	bne.n	80143ba <_vfiprintf_r+0x1ce>
 801434e:	9b03      	ldr	r3, [sp, #12]
 8014350:	1d1a      	adds	r2, r3, #4
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	9203      	str	r2, [sp, #12]
 8014356:	2b00      	cmp	r3, #0
 8014358:	bfb8      	it	lt
 801435a:	f04f 33ff 	movlt.w	r3, #4294967295
 801435e:	3402      	adds	r4, #2
 8014360:	9305      	str	r3, [sp, #20]
 8014362:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014448 <_vfiprintf_r+0x25c>
 8014366:	7821      	ldrb	r1, [r4, #0]
 8014368:	2203      	movs	r2, #3
 801436a:	4650      	mov	r0, sl
 801436c:	f7eb ffb8 	bl	80002e0 <memchr>
 8014370:	b140      	cbz	r0, 8014384 <_vfiprintf_r+0x198>
 8014372:	2340      	movs	r3, #64	; 0x40
 8014374:	eba0 000a 	sub.w	r0, r0, sl
 8014378:	fa03 f000 	lsl.w	r0, r3, r0
 801437c:	9b04      	ldr	r3, [sp, #16]
 801437e:	4303      	orrs	r3, r0
 8014380:	3401      	adds	r4, #1
 8014382:	9304      	str	r3, [sp, #16]
 8014384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014388:	482c      	ldr	r0, [pc, #176]	; (801443c <_vfiprintf_r+0x250>)
 801438a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801438e:	2206      	movs	r2, #6
 8014390:	f7eb ffa6 	bl	80002e0 <memchr>
 8014394:	2800      	cmp	r0, #0
 8014396:	d03f      	beq.n	8014418 <_vfiprintf_r+0x22c>
 8014398:	4b29      	ldr	r3, [pc, #164]	; (8014440 <_vfiprintf_r+0x254>)
 801439a:	bb1b      	cbnz	r3, 80143e4 <_vfiprintf_r+0x1f8>
 801439c:	9b03      	ldr	r3, [sp, #12]
 801439e:	3307      	adds	r3, #7
 80143a0:	f023 0307 	bic.w	r3, r3, #7
 80143a4:	3308      	adds	r3, #8
 80143a6:	9303      	str	r3, [sp, #12]
 80143a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143aa:	443b      	add	r3, r7
 80143ac:	9309      	str	r3, [sp, #36]	; 0x24
 80143ae:	e767      	b.n	8014280 <_vfiprintf_r+0x94>
 80143b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80143b4:	460c      	mov	r4, r1
 80143b6:	2001      	movs	r0, #1
 80143b8:	e7a5      	b.n	8014306 <_vfiprintf_r+0x11a>
 80143ba:	2300      	movs	r3, #0
 80143bc:	3401      	adds	r4, #1
 80143be:	9305      	str	r3, [sp, #20]
 80143c0:	4619      	mov	r1, r3
 80143c2:	f04f 0c0a 	mov.w	ip, #10
 80143c6:	4620      	mov	r0, r4
 80143c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143cc:	3a30      	subs	r2, #48	; 0x30
 80143ce:	2a09      	cmp	r2, #9
 80143d0:	d903      	bls.n	80143da <_vfiprintf_r+0x1ee>
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d0c5      	beq.n	8014362 <_vfiprintf_r+0x176>
 80143d6:	9105      	str	r1, [sp, #20]
 80143d8:	e7c3      	b.n	8014362 <_vfiprintf_r+0x176>
 80143da:	fb0c 2101 	mla	r1, ip, r1, r2
 80143de:	4604      	mov	r4, r0
 80143e0:	2301      	movs	r3, #1
 80143e2:	e7f0      	b.n	80143c6 <_vfiprintf_r+0x1da>
 80143e4:	ab03      	add	r3, sp, #12
 80143e6:	9300      	str	r3, [sp, #0]
 80143e8:	462a      	mov	r2, r5
 80143ea:	4b16      	ldr	r3, [pc, #88]	; (8014444 <_vfiprintf_r+0x258>)
 80143ec:	a904      	add	r1, sp, #16
 80143ee:	4630      	mov	r0, r6
 80143f0:	f3af 8000 	nop.w
 80143f4:	4607      	mov	r7, r0
 80143f6:	1c78      	adds	r0, r7, #1
 80143f8:	d1d6      	bne.n	80143a8 <_vfiprintf_r+0x1bc>
 80143fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80143fc:	07d9      	lsls	r1, r3, #31
 80143fe:	d405      	bmi.n	801440c <_vfiprintf_r+0x220>
 8014400:	89ab      	ldrh	r3, [r5, #12]
 8014402:	059a      	lsls	r2, r3, #22
 8014404:	d402      	bmi.n	801440c <_vfiprintf_r+0x220>
 8014406:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014408:	f7ff fc81 	bl	8013d0e <__retarget_lock_release_recursive>
 801440c:	89ab      	ldrh	r3, [r5, #12]
 801440e:	065b      	lsls	r3, r3, #25
 8014410:	f53f af12 	bmi.w	8014238 <_vfiprintf_r+0x4c>
 8014414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014416:	e711      	b.n	801423c <_vfiprintf_r+0x50>
 8014418:	ab03      	add	r3, sp, #12
 801441a:	9300      	str	r3, [sp, #0]
 801441c:	462a      	mov	r2, r5
 801441e:	4b09      	ldr	r3, [pc, #36]	; (8014444 <_vfiprintf_r+0x258>)
 8014420:	a904      	add	r1, sp, #16
 8014422:	4630      	mov	r0, r6
 8014424:	f000 f880 	bl	8014528 <_printf_i>
 8014428:	e7e4      	b.n	80143f4 <_vfiprintf_r+0x208>
 801442a:	bf00      	nop
 801442c:	08017f78 	.word	0x08017f78
 8014430:	08017f98 	.word	0x08017f98
 8014434:	08017f58 	.word	0x08017f58
 8014438:	08017fb8 	.word	0x08017fb8
 801443c:	08017fc2 	.word	0x08017fc2
 8014440:	00000000 	.word	0x00000000
 8014444:	080141c7 	.word	0x080141c7
 8014448:	08017fbe 	.word	0x08017fbe

0801444c <_printf_common>:
 801444c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014450:	4616      	mov	r6, r2
 8014452:	4699      	mov	r9, r3
 8014454:	688a      	ldr	r2, [r1, #8]
 8014456:	690b      	ldr	r3, [r1, #16]
 8014458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801445c:	4293      	cmp	r3, r2
 801445e:	bfb8      	it	lt
 8014460:	4613      	movlt	r3, r2
 8014462:	6033      	str	r3, [r6, #0]
 8014464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014468:	4607      	mov	r7, r0
 801446a:	460c      	mov	r4, r1
 801446c:	b10a      	cbz	r2, 8014472 <_printf_common+0x26>
 801446e:	3301      	adds	r3, #1
 8014470:	6033      	str	r3, [r6, #0]
 8014472:	6823      	ldr	r3, [r4, #0]
 8014474:	0699      	lsls	r1, r3, #26
 8014476:	bf42      	ittt	mi
 8014478:	6833      	ldrmi	r3, [r6, #0]
 801447a:	3302      	addmi	r3, #2
 801447c:	6033      	strmi	r3, [r6, #0]
 801447e:	6825      	ldr	r5, [r4, #0]
 8014480:	f015 0506 	ands.w	r5, r5, #6
 8014484:	d106      	bne.n	8014494 <_printf_common+0x48>
 8014486:	f104 0a19 	add.w	sl, r4, #25
 801448a:	68e3      	ldr	r3, [r4, #12]
 801448c:	6832      	ldr	r2, [r6, #0]
 801448e:	1a9b      	subs	r3, r3, r2
 8014490:	42ab      	cmp	r3, r5
 8014492:	dc26      	bgt.n	80144e2 <_printf_common+0x96>
 8014494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014498:	1e13      	subs	r3, r2, #0
 801449a:	6822      	ldr	r2, [r4, #0]
 801449c:	bf18      	it	ne
 801449e:	2301      	movne	r3, #1
 80144a0:	0692      	lsls	r2, r2, #26
 80144a2:	d42b      	bmi.n	80144fc <_printf_common+0xb0>
 80144a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80144a8:	4649      	mov	r1, r9
 80144aa:	4638      	mov	r0, r7
 80144ac:	47c0      	blx	r8
 80144ae:	3001      	adds	r0, #1
 80144b0:	d01e      	beq.n	80144f0 <_printf_common+0xa4>
 80144b2:	6823      	ldr	r3, [r4, #0]
 80144b4:	68e5      	ldr	r5, [r4, #12]
 80144b6:	6832      	ldr	r2, [r6, #0]
 80144b8:	f003 0306 	and.w	r3, r3, #6
 80144bc:	2b04      	cmp	r3, #4
 80144be:	bf08      	it	eq
 80144c0:	1aad      	subeq	r5, r5, r2
 80144c2:	68a3      	ldr	r3, [r4, #8]
 80144c4:	6922      	ldr	r2, [r4, #16]
 80144c6:	bf0c      	ite	eq
 80144c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80144cc:	2500      	movne	r5, #0
 80144ce:	4293      	cmp	r3, r2
 80144d0:	bfc4      	itt	gt
 80144d2:	1a9b      	subgt	r3, r3, r2
 80144d4:	18ed      	addgt	r5, r5, r3
 80144d6:	2600      	movs	r6, #0
 80144d8:	341a      	adds	r4, #26
 80144da:	42b5      	cmp	r5, r6
 80144dc:	d11a      	bne.n	8014514 <_printf_common+0xc8>
 80144de:	2000      	movs	r0, #0
 80144e0:	e008      	b.n	80144f4 <_printf_common+0xa8>
 80144e2:	2301      	movs	r3, #1
 80144e4:	4652      	mov	r2, sl
 80144e6:	4649      	mov	r1, r9
 80144e8:	4638      	mov	r0, r7
 80144ea:	47c0      	blx	r8
 80144ec:	3001      	adds	r0, #1
 80144ee:	d103      	bne.n	80144f8 <_printf_common+0xac>
 80144f0:	f04f 30ff 	mov.w	r0, #4294967295
 80144f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144f8:	3501      	adds	r5, #1
 80144fa:	e7c6      	b.n	801448a <_printf_common+0x3e>
 80144fc:	18e1      	adds	r1, r4, r3
 80144fe:	1c5a      	adds	r2, r3, #1
 8014500:	2030      	movs	r0, #48	; 0x30
 8014502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014506:	4422      	add	r2, r4
 8014508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801450c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014510:	3302      	adds	r3, #2
 8014512:	e7c7      	b.n	80144a4 <_printf_common+0x58>
 8014514:	2301      	movs	r3, #1
 8014516:	4622      	mov	r2, r4
 8014518:	4649      	mov	r1, r9
 801451a:	4638      	mov	r0, r7
 801451c:	47c0      	blx	r8
 801451e:	3001      	adds	r0, #1
 8014520:	d0e6      	beq.n	80144f0 <_printf_common+0xa4>
 8014522:	3601      	adds	r6, #1
 8014524:	e7d9      	b.n	80144da <_printf_common+0x8e>
	...

08014528 <_printf_i>:
 8014528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801452c:	7e0f      	ldrb	r7, [r1, #24]
 801452e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014530:	2f78      	cmp	r7, #120	; 0x78
 8014532:	4691      	mov	r9, r2
 8014534:	4680      	mov	r8, r0
 8014536:	460c      	mov	r4, r1
 8014538:	469a      	mov	sl, r3
 801453a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801453e:	d807      	bhi.n	8014550 <_printf_i+0x28>
 8014540:	2f62      	cmp	r7, #98	; 0x62
 8014542:	d80a      	bhi.n	801455a <_printf_i+0x32>
 8014544:	2f00      	cmp	r7, #0
 8014546:	f000 80d8 	beq.w	80146fa <_printf_i+0x1d2>
 801454a:	2f58      	cmp	r7, #88	; 0x58
 801454c:	f000 80a3 	beq.w	8014696 <_printf_i+0x16e>
 8014550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014558:	e03a      	b.n	80145d0 <_printf_i+0xa8>
 801455a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801455e:	2b15      	cmp	r3, #21
 8014560:	d8f6      	bhi.n	8014550 <_printf_i+0x28>
 8014562:	a101      	add	r1, pc, #4	; (adr r1, 8014568 <_printf_i+0x40>)
 8014564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014568:	080145c1 	.word	0x080145c1
 801456c:	080145d5 	.word	0x080145d5
 8014570:	08014551 	.word	0x08014551
 8014574:	08014551 	.word	0x08014551
 8014578:	08014551 	.word	0x08014551
 801457c:	08014551 	.word	0x08014551
 8014580:	080145d5 	.word	0x080145d5
 8014584:	08014551 	.word	0x08014551
 8014588:	08014551 	.word	0x08014551
 801458c:	08014551 	.word	0x08014551
 8014590:	08014551 	.word	0x08014551
 8014594:	080146e1 	.word	0x080146e1
 8014598:	08014605 	.word	0x08014605
 801459c:	080146c3 	.word	0x080146c3
 80145a0:	08014551 	.word	0x08014551
 80145a4:	08014551 	.word	0x08014551
 80145a8:	08014703 	.word	0x08014703
 80145ac:	08014551 	.word	0x08014551
 80145b0:	08014605 	.word	0x08014605
 80145b4:	08014551 	.word	0x08014551
 80145b8:	08014551 	.word	0x08014551
 80145bc:	080146cb 	.word	0x080146cb
 80145c0:	682b      	ldr	r3, [r5, #0]
 80145c2:	1d1a      	adds	r2, r3, #4
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	602a      	str	r2, [r5, #0]
 80145c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80145cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80145d0:	2301      	movs	r3, #1
 80145d2:	e0a3      	b.n	801471c <_printf_i+0x1f4>
 80145d4:	6820      	ldr	r0, [r4, #0]
 80145d6:	6829      	ldr	r1, [r5, #0]
 80145d8:	0606      	lsls	r6, r0, #24
 80145da:	f101 0304 	add.w	r3, r1, #4
 80145de:	d50a      	bpl.n	80145f6 <_printf_i+0xce>
 80145e0:	680e      	ldr	r6, [r1, #0]
 80145e2:	602b      	str	r3, [r5, #0]
 80145e4:	2e00      	cmp	r6, #0
 80145e6:	da03      	bge.n	80145f0 <_printf_i+0xc8>
 80145e8:	232d      	movs	r3, #45	; 0x2d
 80145ea:	4276      	negs	r6, r6
 80145ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145f0:	485e      	ldr	r0, [pc, #376]	; (801476c <_printf_i+0x244>)
 80145f2:	230a      	movs	r3, #10
 80145f4:	e019      	b.n	801462a <_printf_i+0x102>
 80145f6:	680e      	ldr	r6, [r1, #0]
 80145f8:	602b      	str	r3, [r5, #0]
 80145fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80145fe:	bf18      	it	ne
 8014600:	b236      	sxthne	r6, r6
 8014602:	e7ef      	b.n	80145e4 <_printf_i+0xbc>
 8014604:	682b      	ldr	r3, [r5, #0]
 8014606:	6820      	ldr	r0, [r4, #0]
 8014608:	1d19      	adds	r1, r3, #4
 801460a:	6029      	str	r1, [r5, #0]
 801460c:	0601      	lsls	r1, r0, #24
 801460e:	d501      	bpl.n	8014614 <_printf_i+0xec>
 8014610:	681e      	ldr	r6, [r3, #0]
 8014612:	e002      	b.n	801461a <_printf_i+0xf2>
 8014614:	0646      	lsls	r6, r0, #25
 8014616:	d5fb      	bpl.n	8014610 <_printf_i+0xe8>
 8014618:	881e      	ldrh	r6, [r3, #0]
 801461a:	4854      	ldr	r0, [pc, #336]	; (801476c <_printf_i+0x244>)
 801461c:	2f6f      	cmp	r7, #111	; 0x6f
 801461e:	bf0c      	ite	eq
 8014620:	2308      	moveq	r3, #8
 8014622:	230a      	movne	r3, #10
 8014624:	2100      	movs	r1, #0
 8014626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801462a:	6865      	ldr	r5, [r4, #4]
 801462c:	60a5      	str	r5, [r4, #8]
 801462e:	2d00      	cmp	r5, #0
 8014630:	bfa2      	ittt	ge
 8014632:	6821      	ldrge	r1, [r4, #0]
 8014634:	f021 0104 	bicge.w	r1, r1, #4
 8014638:	6021      	strge	r1, [r4, #0]
 801463a:	b90e      	cbnz	r6, 8014640 <_printf_i+0x118>
 801463c:	2d00      	cmp	r5, #0
 801463e:	d04d      	beq.n	80146dc <_printf_i+0x1b4>
 8014640:	4615      	mov	r5, r2
 8014642:	fbb6 f1f3 	udiv	r1, r6, r3
 8014646:	fb03 6711 	mls	r7, r3, r1, r6
 801464a:	5dc7      	ldrb	r7, [r0, r7]
 801464c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014650:	4637      	mov	r7, r6
 8014652:	42bb      	cmp	r3, r7
 8014654:	460e      	mov	r6, r1
 8014656:	d9f4      	bls.n	8014642 <_printf_i+0x11a>
 8014658:	2b08      	cmp	r3, #8
 801465a:	d10b      	bne.n	8014674 <_printf_i+0x14c>
 801465c:	6823      	ldr	r3, [r4, #0]
 801465e:	07de      	lsls	r6, r3, #31
 8014660:	d508      	bpl.n	8014674 <_printf_i+0x14c>
 8014662:	6923      	ldr	r3, [r4, #16]
 8014664:	6861      	ldr	r1, [r4, #4]
 8014666:	4299      	cmp	r1, r3
 8014668:	bfde      	ittt	le
 801466a:	2330      	movle	r3, #48	; 0x30
 801466c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014670:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014674:	1b52      	subs	r2, r2, r5
 8014676:	6122      	str	r2, [r4, #16]
 8014678:	f8cd a000 	str.w	sl, [sp]
 801467c:	464b      	mov	r3, r9
 801467e:	aa03      	add	r2, sp, #12
 8014680:	4621      	mov	r1, r4
 8014682:	4640      	mov	r0, r8
 8014684:	f7ff fee2 	bl	801444c <_printf_common>
 8014688:	3001      	adds	r0, #1
 801468a:	d14c      	bne.n	8014726 <_printf_i+0x1fe>
 801468c:	f04f 30ff 	mov.w	r0, #4294967295
 8014690:	b004      	add	sp, #16
 8014692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014696:	4835      	ldr	r0, [pc, #212]	; (801476c <_printf_i+0x244>)
 8014698:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801469c:	6829      	ldr	r1, [r5, #0]
 801469e:	6823      	ldr	r3, [r4, #0]
 80146a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80146a4:	6029      	str	r1, [r5, #0]
 80146a6:	061d      	lsls	r5, r3, #24
 80146a8:	d514      	bpl.n	80146d4 <_printf_i+0x1ac>
 80146aa:	07df      	lsls	r7, r3, #31
 80146ac:	bf44      	itt	mi
 80146ae:	f043 0320 	orrmi.w	r3, r3, #32
 80146b2:	6023      	strmi	r3, [r4, #0]
 80146b4:	b91e      	cbnz	r6, 80146be <_printf_i+0x196>
 80146b6:	6823      	ldr	r3, [r4, #0]
 80146b8:	f023 0320 	bic.w	r3, r3, #32
 80146bc:	6023      	str	r3, [r4, #0]
 80146be:	2310      	movs	r3, #16
 80146c0:	e7b0      	b.n	8014624 <_printf_i+0xfc>
 80146c2:	6823      	ldr	r3, [r4, #0]
 80146c4:	f043 0320 	orr.w	r3, r3, #32
 80146c8:	6023      	str	r3, [r4, #0]
 80146ca:	2378      	movs	r3, #120	; 0x78
 80146cc:	4828      	ldr	r0, [pc, #160]	; (8014770 <_printf_i+0x248>)
 80146ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80146d2:	e7e3      	b.n	801469c <_printf_i+0x174>
 80146d4:	0659      	lsls	r1, r3, #25
 80146d6:	bf48      	it	mi
 80146d8:	b2b6      	uxthmi	r6, r6
 80146da:	e7e6      	b.n	80146aa <_printf_i+0x182>
 80146dc:	4615      	mov	r5, r2
 80146de:	e7bb      	b.n	8014658 <_printf_i+0x130>
 80146e0:	682b      	ldr	r3, [r5, #0]
 80146e2:	6826      	ldr	r6, [r4, #0]
 80146e4:	6961      	ldr	r1, [r4, #20]
 80146e6:	1d18      	adds	r0, r3, #4
 80146e8:	6028      	str	r0, [r5, #0]
 80146ea:	0635      	lsls	r5, r6, #24
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	d501      	bpl.n	80146f4 <_printf_i+0x1cc>
 80146f0:	6019      	str	r1, [r3, #0]
 80146f2:	e002      	b.n	80146fa <_printf_i+0x1d2>
 80146f4:	0670      	lsls	r0, r6, #25
 80146f6:	d5fb      	bpl.n	80146f0 <_printf_i+0x1c8>
 80146f8:	8019      	strh	r1, [r3, #0]
 80146fa:	2300      	movs	r3, #0
 80146fc:	6123      	str	r3, [r4, #16]
 80146fe:	4615      	mov	r5, r2
 8014700:	e7ba      	b.n	8014678 <_printf_i+0x150>
 8014702:	682b      	ldr	r3, [r5, #0]
 8014704:	1d1a      	adds	r2, r3, #4
 8014706:	602a      	str	r2, [r5, #0]
 8014708:	681d      	ldr	r5, [r3, #0]
 801470a:	6862      	ldr	r2, [r4, #4]
 801470c:	2100      	movs	r1, #0
 801470e:	4628      	mov	r0, r5
 8014710:	f7eb fde6 	bl	80002e0 <memchr>
 8014714:	b108      	cbz	r0, 801471a <_printf_i+0x1f2>
 8014716:	1b40      	subs	r0, r0, r5
 8014718:	6060      	str	r0, [r4, #4]
 801471a:	6863      	ldr	r3, [r4, #4]
 801471c:	6123      	str	r3, [r4, #16]
 801471e:	2300      	movs	r3, #0
 8014720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014724:	e7a8      	b.n	8014678 <_printf_i+0x150>
 8014726:	6923      	ldr	r3, [r4, #16]
 8014728:	462a      	mov	r2, r5
 801472a:	4649      	mov	r1, r9
 801472c:	4640      	mov	r0, r8
 801472e:	47d0      	blx	sl
 8014730:	3001      	adds	r0, #1
 8014732:	d0ab      	beq.n	801468c <_printf_i+0x164>
 8014734:	6823      	ldr	r3, [r4, #0]
 8014736:	079b      	lsls	r3, r3, #30
 8014738:	d413      	bmi.n	8014762 <_printf_i+0x23a>
 801473a:	68e0      	ldr	r0, [r4, #12]
 801473c:	9b03      	ldr	r3, [sp, #12]
 801473e:	4298      	cmp	r0, r3
 8014740:	bfb8      	it	lt
 8014742:	4618      	movlt	r0, r3
 8014744:	e7a4      	b.n	8014690 <_printf_i+0x168>
 8014746:	2301      	movs	r3, #1
 8014748:	4632      	mov	r2, r6
 801474a:	4649      	mov	r1, r9
 801474c:	4640      	mov	r0, r8
 801474e:	47d0      	blx	sl
 8014750:	3001      	adds	r0, #1
 8014752:	d09b      	beq.n	801468c <_printf_i+0x164>
 8014754:	3501      	adds	r5, #1
 8014756:	68e3      	ldr	r3, [r4, #12]
 8014758:	9903      	ldr	r1, [sp, #12]
 801475a:	1a5b      	subs	r3, r3, r1
 801475c:	42ab      	cmp	r3, r5
 801475e:	dcf2      	bgt.n	8014746 <_printf_i+0x21e>
 8014760:	e7eb      	b.n	801473a <_printf_i+0x212>
 8014762:	2500      	movs	r5, #0
 8014764:	f104 0619 	add.w	r6, r4, #25
 8014768:	e7f5      	b.n	8014756 <_printf_i+0x22e>
 801476a:	bf00      	nop
 801476c:	08017fc9 	.word	0x08017fc9
 8014770:	08017fda 	.word	0x08017fda

08014774 <_sbrk_r>:
 8014774:	b538      	push	{r3, r4, r5, lr}
 8014776:	4d06      	ldr	r5, [pc, #24]	; (8014790 <_sbrk_r+0x1c>)
 8014778:	2300      	movs	r3, #0
 801477a:	4604      	mov	r4, r0
 801477c:	4608      	mov	r0, r1
 801477e:	602b      	str	r3, [r5, #0]
 8014780:	f7ec fa18 	bl	8000bb4 <_sbrk>
 8014784:	1c43      	adds	r3, r0, #1
 8014786:	d102      	bne.n	801478e <_sbrk_r+0x1a>
 8014788:	682b      	ldr	r3, [r5, #0]
 801478a:	b103      	cbz	r3, 801478e <_sbrk_r+0x1a>
 801478c:	6023      	str	r3, [r4, #0]
 801478e:	bd38      	pop	{r3, r4, r5, pc}
 8014790:	24007438 	.word	0x24007438

08014794 <__sread>:
 8014794:	b510      	push	{r4, lr}
 8014796:	460c      	mov	r4, r1
 8014798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801479c:	f000 fa9e 	bl	8014cdc <_read_r>
 80147a0:	2800      	cmp	r0, #0
 80147a2:	bfab      	itete	ge
 80147a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80147a6:	89a3      	ldrhlt	r3, [r4, #12]
 80147a8:	181b      	addge	r3, r3, r0
 80147aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80147ae:	bfac      	ite	ge
 80147b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80147b2:	81a3      	strhlt	r3, [r4, #12]
 80147b4:	bd10      	pop	{r4, pc}

080147b6 <__swrite>:
 80147b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147ba:	461f      	mov	r7, r3
 80147bc:	898b      	ldrh	r3, [r1, #12]
 80147be:	05db      	lsls	r3, r3, #23
 80147c0:	4605      	mov	r5, r0
 80147c2:	460c      	mov	r4, r1
 80147c4:	4616      	mov	r6, r2
 80147c6:	d505      	bpl.n	80147d4 <__swrite+0x1e>
 80147c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147cc:	2302      	movs	r3, #2
 80147ce:	2200      	movs	r2, #0
 80147d0:	f000 f9d0 	bl	8014b74 <_lseek_r>
 80147d4:	89a3      	ldrh	r3, [r4, #12]
 80147d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80147de:	81a3      	strh	r3, [r4, #12]
 80147e0:	4632      	mov	r2, r6
 80147e2:	463b      	mov	r3, r7
 80147e4:	4628      	mov	r0, r5
 80147e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147ea:	f000 b869 	b.w	80148c0 <_write_r>

080147ee <__sseek>:
 80147ee:	b510      	push	{r4, lr}
 80147f0:	460c      	mov	r4, r1
 80147f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147f6:	f000 f9bd 	bl	8014b74 <_lseek_r>
 80147fa:	1c43      	adds	r3, r0, #1
 80147fc:	89a3      	ldrh	r3, [r4, #12]
 80147fe:	bf15      	itete	ne
 8014800:	6560      	strne	r0, [r4, #84]	; 0x54
 8014802:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014806:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801480a:	81a3      	strheq	r3, [r4, #12]
 801480c:	bf18      	it	ne
 801480e:	81a3      	strhne	r3, [r4, #12]
 8014810:	bd10      	pop	{r4, pc}

08014812 <__sclose>:
 8014812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014816:	f000 b8db 	b.w	80149d0 <_close_r>
	...

0801481c <__swbuf_r>:
 801481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801481e:	460e      	mov	r6, r1
 8014820:	4614      	mov	r4, r2
 8014822:	4605      	mov	r5, r0
 8014824:	b118      	cbz	r0, 801482e <__swbuf_r+0x12>
 8014826:	6983      	ldr	r3, [r0, #24]
 8014828:	b90b      	cbnz	r3, 801482e <__swbuf_r+0x12>
 801482a:	f7ff f9bf 	bl	8013bac <__sinit>
 801482e:	4b21      	ldr	r3, [pc, #132]	; (80148b4 <__swbuf_r+0x98>)
 8014830:	429c      	cmp	r4, r3
 8014832:	d12b      	bne.n	801488c <__swbuf_r+0x70>
 8014834:	686c      	ldr	r4, [r5, #4]
 8014836:	69a3      	ldr	r3, [r4, #24]
 8014838:	60a3      	str	r3, [r4, #8]
 801483a:	89a3      	ldrh	r3, [r4, #12]
 801483c:	071a      	lsls	r2, r3, #28
 801483e:	d52f      	bpl.n	80148a0 <__swbuf_r+0x84>
 8014840:	6923      	ldr	r3, [r4, #16]
 8014842:	b36b      	cbz	r3, 80148a0 <__swbuf_r+0x84>
 8014844:	6923      	ldr	r3, [r4, #16]
 8014846:	6820      	ldr	r0, [r4, #0]
 8014848:	1ac0      	subs	r0, r0, r3
 801484a:	6963      	ldr	r3, [r4, #20]
 801484c:	b2f6      	uxtb	r6, r6
 801484e:	4283      	cmp	r3, r0
 8014850:	4637      	mov	r7, r6
 8014852:	dc04      	bgt.n	801485e <__swbuf_r+0x42>
 8014854:	4621      	mov	r1, r4
 8014856:	4628      	mov	r0, r5
 8014858:	f000 f950 	bl	8014afc <_fflush_r>
 801485c:	bb30      	cbnz	r0, 80148ac <__swbuf_r+0x90>
 801485e:	68a3      	ldr	r3, [r4, #8]
 8014860:	3b01      	subs	r3, #1
 8014862:	60a3      	str	r3, [r4, #8]
 8014864:	6823      	ldr	r3, [r4, #0]
 8014866:	1c5a      	adds	r2, r3, #1
 8014868:	6022      	str	r2, [r4, #0]
 801486a:	701e      	strb	r6, [r3, #0]
 801486c:	6963      	ldr	r3, [r4, #20]
 801486e:	3001      	adds	r0, #1
 8014870:	4283      	cmp	r3, r0
 8014872:	d004      	beq.n	801487e <__swbuf_r+0x62>
 8014874:	89a3      	ldrh	r3, [r4, #12]
 8014876:	07db      	lsls	r3, r3, #31
 8014878:	d506      	bpl.n	8014888 <__swbuf_r+0x6c>
 801487a:	2e0a      	cmp	r6, #10
 801487c:	d104      	bne.n	8014888 <__swbuf_r+0x6c>
 801487e:	4621      	mov	r1, r4
 8014880:	4628      	mov	r0, r5
 8014882:	f000 f93b 	bl	8014afc <_fflush_r>
 8014886:	b988      	cbnz	r0, 80148ac <__swbuf_r+0x90>
 8014888:	4638      	mov	r0, r7
 801488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801488c:	4b0a      	ldr	r3, [pc, #40]	; (80148b8 <__swbuf_r+0x9c>)
 801488e:	429c      	cmp	r4, r3
 8014890:	d101      	bne.n	8014896 <__swbuf_r+0x7a>
 8014892:	68ac      	ldr	r4, [r5, #8]
 8014894:	e7cf      	b.n	8014836 <__swbuf_r+0x1a>
 8014896:	4b09      	ldr	r3, [pc, #36]	; (80148bc <__swbuf_r+0xa0>)
 8014898:	429c      	cmp	r4, r3
 801489a:	bf08      	it	eq
 801489c:	68ec      	ldreq	r4, [r5, #12]
 801489e:	e7ca      	b.n	8014836 <__swbuf_r+0x1a>
 80148a0:	4621      	mov	r1, r4
 80148a2:	4628      	mov	r0, r5
 80148a4:	f000 f81e 	bl	80148e4 <__swsetup_r>
 80148a8:	2800      	cmp	r0, #0
 80148aa:	d0cb      	beq.n	8014844 <__swbuf_r+0x28>
 80148ac:	f04f 37ff 	mov.w	r7, #4294967295
 80148b0:	e7ea      	b.n	8014888 <__swbuf_r+0x6c>
 80148b2:	bf00      	nop
 80148b4:	08017f78 	.word	0x08017f78
 80148b8:	08017f98 	.word	0x08017f98
 80148bc:	08017f58 	.word	0x08017f58

080148c0 <_write_r>:
 80148c0:	b538      	push	{r3, r4, r5, lr}
 80148c2:	4d07      	ldr	r5, [pc, #28]	; (80148e0 <_write_r+0x20>)
 80148c4:	4604      	mov	r4, r0
 80148c6:	4608      	mov	r0, r1
 80148c8:	4611      	mov	r1, r2
 80148ca:	2200      	movs	r2, #0
 80148cc:	602a      	str	r2, [r5, #0]
 80148ce:	461a      	mov	r2, r3
 80148d0:	f7ec f91f 	bl	8000b12 <_write>
 80148d4:	1c43      	adds	r3, r0, #1
 80148d6:	d102      	bne.n	80148de <_write_r+0x1e>
 80148d8:	682b      	ldr	r3, [r5, #0]
 80148da:	b103      	cbz	r3, 80148de <_write_r+0x1e>
 80148dc:	6023      	str	r3, [r4, #0]
 80148de:	bd38      	pop	{r3, r4, r5, pc}
 80148e0:	24007438 	.word	0x24007438

080148e4 <__swsetup_r>:
 80148e4:	4b32      	ldr	r3, [pc, #200]	; (80149b0 <__swsetup_r+0xcc>)
 80148e6:	b570      	push	{r4, r5, r6, lr}
 80148e8:	681d      	ldr	r5, [r3, #0]
 80148ea:	4606      	mov	r6, r0
 80148ec:	460c      	mov	r4, r1
 80148ee:	b125      	cbz	r5, 80148fa <__swsetup_r+0x16>
 80148f0:	69ab      	ldr	r3, [r5, #24]
 80148f2:	b913      	cbnz	r3, 80148fa <__swsetup_r+0x16>
 80148f4:	4628      	mov	r0, r5
 80148f6:	f7ff f959 	bl	8013bac <__sinit>
 80148fa:	4b2e      	ldr	r3, [pc, #184]	; (80149b4 <__swsetup_r+0xd0>)
 80148fc:	429c      	cmp	r4, r3
 80148fe:	d10f      	bne.n	8014920 <__swsetup_r+0x3c>
 8014900:	686c      	ldr	r4, [r5, #4]
 8014902:	89a3      	ldrh	r3, [r4, #12]
 8014904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014908:	0719      	lsls	r1, r3, #28
 801490a:	d42c      	bmi.n	8014966 <__swsetup_r+0x82>
 801490c:	06dd      	lsls	r5, r3, #27
 801490e:	d411      	bmi.n	8014934 <__swsetup_r+0x50>
 8014910:	2309      	movs	r3, #9
 8014912:	6033      	str	r3, [r6, #0]
 8014914:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014918:	81a3      	strh	r3, [r4, #12]
 801491a:	f04f 30ff 	mov.w	r0, #4294967295
 801491e:	e03e      	b.n	801499e <__swsetup_r+0xba>
 8014920:	4b25      	ldr	r3, [pc, #148]	; (80149b8 <__swsetup_r+0xd4>)
 8014922:	429c      	cmp	r4, r3
 8014924:	d101      	bne.n	801492a <__swsetup_r+0x46>
 8014926:	68ac      	ldr	r4, [r5, #8]
 8014928:	e7eb      	b.n	8014902 <__swsetup_r+0x1e>
 801492a:	4b24      	ldr	r3, [pc, #144]	; (80149bc <__swsetup_r+0xd8>)
 801492c:	429c      	cmp	r4, r3
 801492e:	bf08      	it	eq
 8014930:	68ec      	ldreq	r4, [r5, #12]
 8014932:	e7e6      	b.n	8014902 <__swsetup_r+0x1e>
 8014934:	0758      	lsls	r0, r3, #29
 8014936:	d512      	bpl.n	801495e <__swsetup_r+0x7a>
 8014938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801493a:	b141      	cbz	r1, 801494e <__swsetup_r+0x6a>
 801493c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014940:	4299      	cmp	r1, r3
 8014942:	d002      	beq.n	801494a <__swsetup_r+0x66>
 8014944:	4630      	mov	r0, r6
 8014946:	f7ff f9eb 	bl	8013d20 <_free_r>
 801494a:	2300      	movs	r3, #0
 801494c:	6363      	str	r3, [r4, #52]	; 0x34
 801494e:	89a3      	ldrh	r3, [r4, #12]
 8014950:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014954:	81a3      	strh	r3, [r4, #12]
 8014956:	2300      	movs	r3, #0
 8014958:	6063      	str	r3, [r4, #4]
 801495a:	6923      	ldr	r3, [r4, #16]
 801495c:	6023      	str	r3, [r4, #0]
 801495e:	89a3      	ldrh	r3, [r4, #12]
 8014960:	f043 0308 	orr.w	r3, r3, #8
 8014964:	81a3      	strh	r3, [r4, #12]
 8014966:	6923      	ldr	r3, [r4, #16]
 8014968:	b94b      	cbnz	r3, 801497e <__swsetup_r+0x9a>
 801496a:	89a3      	ldrh	r3, [r4, #12]
 801496c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014974:	d003      	beq.n	801497e <__swsetup_r+0x9a>
 8014976:	4621      	mov	r1, r4
 8014978:	4630      	mov	r0, r6
 801497a:	f000 f933 	bl	8014be4 <__smakebuf_r>
 801497e:	89a0      	ldrh	r0, [r4, #12]
 8014980:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014984:	f010 0301 	ands.w	r3, r0, #1
 8014988:	d00a      	beq.n	80149a0 <__swsetup_r+0xbc>
 801498a:	2300      	movs	r3, #0
 801498c:	60a3      	str	r3, [r4, #8]
 801498e:	6963      	ldr	r3, [r4, #20]
 8014990:	425b      	negs	r3, r3
 8014992:	61a3      	str	r3, [r4, #24]
 8014994:	6923      	ldr	r3, [r4, #16]
 8014996:	b943      	cbnz	r3, 80149aa <__swsetup_r+0xc6>
 8014998:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801499c:	d1ba      	bne.n	8014914 <__swsetup_r+0x30>
 801499e:	bd70      	pop	{r4, r5, r6, pc}
 80149a0:	0781      	lsls	r1, r0, #30
 80149a2:	bf58      	it	pl
 80149a4:	6963      	ldrpl	r3, [r4, #20]
 80149a6:	60a3      	str	r3, [r4, #8]
 80149a8:	e7f4      	b.n	8014994 <__swsetup_r+0xb0>
 80149aa:	2000      	movs	r0, #0
 80149ac:	e7f7      	b.n	801499e <__swsetup_r+0xba>
 80149ae:	bf00      	nop
 80149b0:	24000034 	.word	0x24000034
 80149b4:	08017f78 	.word	0x08017f78
 80149b8:	08017f98 	.word	0x08017f98
 80149bc:	08017f58 	.word	0x08017f58

080149c0 <abort>:
 80149c0:	b508      	push	{r3, lr}
 80149c2:	2006      	movs	r0, #6
 80149c4:	f000 f9c4 	bl	8014d50 <raise>
 80149c8:	2001      	movs	r0, #1
 80149ca:	f7ec f87b 	bl	8000ac4 <_exit>
	...

080149d0 <_close_r>:
 80149d0:	b538      	push	{r3, r4, r5, lr}
 80149d2:	4d06      	ldr	r5, [pc, #24]	; (80149ec <_close_r+0x1c>)
 80149d4:	2300      	movs	r3, #0
 80149d6:	4604      	mov	r4, r0
 80149d8:	4608      	mov	r0, r1
 80149da:	602b      	str	r3, [r5, #0]
 80149dc:	f7ec f8b5 	bl	8000b4a <_close>
 80149e0:	1c43      	adds	r3, r0, #1
 80149e2:	d102      	bne.n	80149ea <_close_r+0x1a>
 80149e4:	682b      	ldr	r3, [r5, #0]
 80149e6:	b103      	cbz	r3, 80149ea <_close_r+0x1a>
 80149e8:	6023      	str	r3, [r4, #0]
 80149ea:	bd38      	pop	{r3, r4, r5, pc}
 80149ec:	24007438 	.word	0x24007438

080149f0 <__sflush_r>:
 80149f0:	898a      	ldrh	r2, [r1, #12]
 80149f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149f6:	4605      	mov	r5, r0
 80149f8:	0710      	lsls	r0, r2, #28
 80149fa:	460c      	mov	r4, r1
 80149fc:	d458      	bmi.n	8014ab0 <__sflush_r+0xc0>
 80149fe:	684b      	ldr	r3, [r1, #4]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	dc05      	bgt.n	8014a10 <__sflush_r+0x20>
 8014a04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	dc02      	bgt.n	8014a10 <__sflush_r+0x20>
 8014a0a:	2000      	movs	r0, #0
 8014a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a12:	2e00      	cmp	r6, #0
 8014a14:	d0f9      	beq.n	8014a0a <__sflush_r+0x1a>
 8014a16:	2300      	movs	r3, #0
 8014a18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014a1c:	682f      	ldr	r7, [r5, #0]
 8014a1e:	602b      	str	r3, [r5, #0]
 8014a20:	d032      	beq.n	8014a88 <__sflush_r+0x98>
 8014a22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014a24:	89a3      	ldrh	r3, [r4, #12]
 8014a26:	075a      	lsls	r2, r3, #29
 8014a28:	d505      	bpl.n	8014a36 <__sflush_r+0x46>
 8014a2a:	6863      	ldr	r3, [r4, #4]
 8014a2c:	1ac0      	subs	r0, r0, r3
 8014a2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014a30:	b10b      	cbz	r3, 8014a36 <__sflush_r+0x46>
 8014a32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014a34:	1ac0      	subs	r0, r0, r3
 8014a36:	2300      	movs	r3, #0
 8014a38:	4602      	mov	r2, r0
 8014a3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a3c:	6a21      	ldr	r1, [r4, #32]
 8014a3e:	4628      	mov	r0, r5
 8014a40:	47b0      	blx	r6
 8014a42:	1c43      	adds	r3, r0, #1
 8014a44:	89a3      	ldrh	r3, [r4, #12]
 8014a46:	d106      	bne.n	8014a56 <__sflush_r+0x66>
 8014a48:	6829      	ldr	r1, [r5, #0]
 8014a4a:	291d      	cmp	r1, #29
 8014a4c:	d82c      	bhi.n	8014aa8 <__sflush_r+0xb8>
 8014a4e:	4a2a      	ldr	r2, [pc, #168]	; (8014af8 <__sflush_r+0x108>)
 8014a50:	40ca      	lsrs	r2, r1
 8014a52:	07d6      	lsls	r6, r2, #31
 8014a54:	d528      	bpl.n	8014aa8 <__sflush_r+0xb8>
 8014a56:	2200      	movs	r2, #0
 8014a58:	6062      	str	r2, [r4, #4]
 8014a5a:	04d9      	lsls	r1, r3, #19
 8014a5c:	6922      	ldr	r2, [r4, #16]
 8014a5e:	6022      	str	r2, [r4, #0]
 8014a60:	d504      	bpl.n	8014a6c <__sflush_r+0x7c>
 8014a62:	1c42      	adds	r2, r0, #1
 8014a64:	d101      	bne.n	8014a6a <__sflush_r+0x7a>
 8014a66:	682b      	ldr	r3, [r5, #0]
 8014a68:	b903      	cbnz	r3, 8014a6c <__sflush_r+0x7c>
 8014a6a:	6560      	str	r0, [r4, #84]	; 0x54
 8014a6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a6e:	602f      	str	r7, [r5, #0]
 8014a70:	2900      	cmp	r1, #0
 8014a72:	d0ca      	beq.n	8014a0a <__sflush_r+0x1a>
 8014a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a78:	4299      	cmp	r1, r3
 8014a7a:	d002      	beq.n	8014a82 <__sflush_r+0x92>
 8014a7c:	4628      	mov	r0, r5
 8014a7e:	f7ff f94f 	bl	8013d20 <_free_r>
 8014a82:	2000      	movs	r0, #0
 8014a84:	6360      	str	r0, [r4, #52]	; 0x34
 8014a86:	e7c1      	b.n	8014a0c <__sflush_r+0x1c>
 8014a88:	6a21      	ldr	r1, [r4, #32]
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	4628      	mov	r0, r5
 8014a8e:	47b0      	blx	r6
 8014a90:	1c41      	adds	r1, r0, #1
 8014a92:	d1c7      	bne.n	8014a24 <__sflush_r+0x34>
 8014a94:	682b      	ldr	r3, [r5, #0]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d0c4      	beq.n	8014a24 <__sflush_r+0x34>
 8014a9a:	2b1d      	cmp	r3, #29
 8014a9c:	d001      	beq.n	8014aa2 <__sflush_r+0xb2>
 8014a9e:	2b16      	cmp	r3, #22
 8014aa0:	d101      	bne.n	8014aa6 <__sflush_r+0xb6>
 8014aa2:	602f      	str	r7, [r5, #0]
 8014aa4:	e7b1      	b.n	8014a0a <__sflush_r+0x1a>
 8014aa6:	89a3      	ldrh	r3, [r4, #12]
 8014aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014aac:	81a3      	strh	r3, [r4, #12]
 8014aae:	e7ad      	b.n	8014a0c <__sflush_r+0x1c>
 8014ab0:	690f      	ldr	r7, [r1, #16]
 8014ab2:	2f00      	cmp	r7, #0
 8014ab4:	d0a9      	beq.n	8014a0a <__sflush_r+0x1a>
 8014ab6:	0793      	lsls	r3, r2, #30
 8014ab8:	680e      	ldr	r6, [r1, #0]
 8014aba:	bf08      	it	eq
 8014abc:	694b      	ldreq	r3, [r1, #20]
 8014abe:	600f      	str	r7, [r1, #0]
 8014ac0:	bf18      	it	ne
 8014ac2:	2300      	movne	r3, #0
 8014ac4:	eba6 0807 	sub.w	r8, r6, r7
 8014ac8:	608b      	str	r3, [r1, #8]
 8014aca:	f1b8 0f00 	cmp.w	r8, #0
 8014ace:	dd9c      	ble.n	8014a0a <__sflush_r+0x1a>
 8014ad0:	6a21      	ldr	r1, [r4, #32]
 8014ad2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014ad4:	4643      	mov	r3, r8
 8014ad6:	463a      	mov	r2, r7
 8014ad8:	4628      	mov	r0, r5
 8014ada:	47b0      	blx	r6
 8014adc:	2800      	cmp	r0, #0
 8014ade:	dc06      	bgt.n	8014aee <__sflush_r+0xfe>
 8014ae0:	89a3      	ldrh	r3, [r4, #12]
 8014ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ae6:	81a3      	strh	r3, [r4, #12]
 8014ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8014aec:	e78e      	b.n	8014a0c <__sflush_r+0x1c>
 8014aee:	4407      	add	r7, r0
 8014af0:	eba8 0800 	sub.w	r8, r8, r0
 8014af4:	e7e9      	b.n	8014aca <__sflush_r+0xda>
 8014af6:	bf00      	nop
 8014af8:	20400001 	.word	0x20400001

08014afc <_fflush_r>:
 8014afc:	b538      	push	{r3, r4, r5, lr}
 8014afe:	690b      	ldr	r3, [r1, #16]
 8014b00:	4605      	mov	r5, r0
 8014b02:	460c      	mov	r4, r1
 8014b04:	b913      	cbnz	r3, 8014b0c <_fflush_r+0x10>
 8014b06:	2500      	movs	r5, #0
 8014b08:	4628      	mov	r0, r5
 8014b0a:	bd38      	pop	{r3, r4, r5, pc}
 8014b0c:	b118      	cbz	r0, 8014b16 <_fflush_r+0x1a>
 8014b0e:	6983      	ldr	r3, [r0, #24]
 8014b10:	b90b      	cbnz	r3, 8014b16 <_fflush_r+0x1a>
 8014b12:	f7ff f84b 	bl	8013bac <__sinit>
 8014b16:	4b14      	ldr	r3, [pc, #80]	; (8014b68 <_fflush_r+0x6c>)
 8014b18:	429c      	cmp	r4, r3
 8014b1a:	d11b      	bne.n	8014b54 <_fflush_r+0x58>
 8014b1c:	686c      	ldr	r4, [r5, #4]
 8014b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d0ef      	beq.n	8014b06 <_fflush_r+0xa>
 8014b26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014b28:	07d0      	lsls	r0, r2, #31
 8014b2a:	d404      	bmi.n	8014b36 <_fflush_r+0x3a>
 8014b2c:	0599      	lsls	r1, r3, #22
 8014b2e:	d402      	bmi.n	8014b36 <_fflush_r+0x3a>
 8014b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b32:	f7ff f8eb 	bl	8013d0c <__retarget_lock_acquire_recursive>
 8014b36:	4628      	mov	r0, r5
 8014b38:	4621      	mov	r1, r4
 8014b3a:	f7ff ff59 	bl	80149f0 <__sflush_r>
 8014b3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b40:	07da      	lsls	r2, r3, #31
 8014b42:	4605      	mov	r5, r0
 8014b44:	d4e0      	bmi.n	8014b08 <_fflush_r+0xc>
 8014b46:	89a3      	ldrh	r3, [r4, #12]
 8014b48:	059b      	lsls	r3, r3, #22
 8014b4a:	d4dd      	bmi.n	8014b08 <_fflush_r+0xc>
 8014b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b4e:	f7ff f8de 	bl	8013d0e <__retarget_lock_release_recursive>
 8014b52:	e7d9      	b.n	8014b08 <_fflush_r+0xc>
 8014b54:	4b05      	ldr	r3, [pc, #20]	; (8014b6c <_fflush_r+0x70>)
 8014b56:	429c      	cmp	r4, r3
 8014b58:	d101      	bne.n	8014b5e <_fflush_r+0x62>
 8014b5a:	68ac      	ldr	r4, [r5, #8]
 8014b5c:	e7df      	b.n	8014b1e <_fflush_r+0x22>
 8014b5e:	4b04      	ldr	r3, [pc, #16]	; (8014b70 <_fflush_r+0x74>)
 8014b60:	429c      	cmp	r4, r3
 8014b62:	bf08      	it	eq
 8014b64:	68ec      	ldreq	r4, [r5, #12]
 8014b66:	e7da      	b.n	8014b1e <_fflush_r+0x22>
 8014b68:	08017f78 	.word	0x08017f78
 8014b6c:	08017f98 	.word	0x08017f98
 8014b70:	08017f58 	.word	0x08017f58

08014b74 <_lseek_r>:
 8014b74:	b538      	push	{r3, r4, r5, lr}
 8014b76:	4d07      	ldr	r5, [pc, #28]	; (8014b94 <_lseek_r+0x20>)
 8014b78:	4604      	mov	r4, r0
 8014b7a:	4608      	mov	r0, r1
 8014b7c:	4611      	mov	r1, r2
 8014b7e:	2200      	movs	r2, #0
 8014b80:	602a      	str	r2, [r5, #0]
 8014b82:	461a      	mov	r2, r3
 8014b84:	f7ec f808 	bl	8000b98 <_lseek>
 8014b88:	1c43      	adds	r3, r0, #1
 8014b8a:	d102      	bne.n	8014b92 <_lseek_r+0x1e>
 8014b8c:	682b      	ldr	r3, [r5, #0]
 8014b8e:	b103      	cbz	r3, 8014b92 <_lseek_r+0x1e>
 8014b90:	6023      	str	r3, [r4, #0]
 8014b92:	bd38      	pop	{r3, r4, r5, pc}
 8014b94:	24007438 	.word	0x24007438

08014b98 <__swhatbuf_r>:
 8014b98:	b570      	push	{r4, r5, r6, lr}
 8014b9a:	460e      	mov	r6, r1
 8014b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ba0:	2900      	cmp	r1, #0
 8014ba2:	b096      	sub	sp, #88	; 0x58
 8014ba4:	4614      	mov	r4, r2
 8014ba6:	461d      	mov	r5, r3
 8014ba8:	da08      	bge.n	8014bbc <__swhatbuf_r+0x24>
 8014baa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014bae:	2200      	movs	r2, #0
 8014bb0:	602a      	str	r2, [r5, #0]
 8014bb2:	061a      	lsls	r2, r3, #24
 8014bb4:	d410      	bmi.n	8014bd8 <__swhatbuf_r+0x40>
 8014bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014bba:	e00e      	b.n	8014bda <__swhatbuf_r+0x42>
 8014bbc:	466a      	mov	r2, sp
 8014bbe:	f000 f8e3 	bl	8014d88 <_fstat_r>
 8014bc2:	2800      	cmp	r0, #0
 8014bc4:	dbf1      	blt.n	8014baa <__swhatbuf_r+0x12>
 8014bc6:	9a01      	ldr	r2, [sp, #4]
 8014bc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014bcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014bd0:	425a      	negs	r2, r3
 8014bd2:	415a      	adcs	r2, r3
 8014bd4:	602a      	str	r2, [r5, #0]
 8014bd6:	e7ee      	b.n	8014bb6 <__swhatbuf_r+0x1e>
 8014bd8:	2340      	movs	r3, #64	; 0x40
 8014bda:	2000      	movs	r0, #0
 8014bdc:	6023      	str	r3, [r4, #0]
 8014bde:	b016      	add	sp, #88	; 0x58
 8014be0:	bd70      	pop	{r4, r5, r6, pc}
	...

08014be4 <__smakebuf_r>:
 8014be4:	898b      	ldrh	r3, [r1, #12]
 8014be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014be8:	079d      	lsls	r5, r3, #30
 8014bea:	4606      	mov	r6, r0
 8014bec:	460c      	mov	r4, r1
 8014bee:	d507      	bpl.n	8014c00 <__smakebuf_r+0x1c>
 8014bf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014bf4:	6023      	str	r3, [r4, #0]
 8014bf6:	6123      	str	r3, [r4, #16]
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	6163      	str	r3, [r4, #20]
 8014bfc:	b002      	add	sp, #8
 8014bfe:	bd70      	pop	{r4, r5, r6, pc}
 8014c00:	ab01      	add	r3, sp, #4
 8014c02:	466a      	mov	r2, sp
 8014c04:	f7ff ffc8 	bl	8014b98 <__swhatbuf_r>
 8014c08:	9900      	ldr	r1, [sp, #0]
 8014c0a:	4605      	mov	r5, r0
 8014c0c:	4630      	mov	r0, r6
 8014c0e:	f7ff f8f3 	bl	8013df8 <_malloc_r>
 8014c12:	b948      	cbnz	r0, 8014c28 <__smakebuf_r+0x44>
 8014c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c18:	059a      	lsls	r2, r3, #22
 8014c1a:	d4ef      	bmi.n	8014bfc <__smakebuf_r+0x18>
 8014c1c:	f023 0303 	bic.w	r3, r3, #3
 8014c20:	f043 0302 	orr.w	r3, r3, #2
 8014c24:	81a3      	strh	r3, [r4, #12]
 8014c26:	e7e3      	b.n	8014bf0 <__smakebuf_r+0xc>
 8014c28:	4b0d      	ldr	r3, [pc, #52]	; (8014c60 <__smakebuf_r+0x7c>)
 8014c2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8014c2c:	89a3      	ldrh	r3, [r4, #12]
 8014c2e:	6020      	str	r0, [r4, #0]
 8014c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c34:	81a3      	strh	r3, [r4, #12]
 8014c36:	9b00      	ldr	r3, [sp, #0]
 8014c38:	6163      	str	r3, [r4, #20]
 8014c3a:	9b01      	ldr	r3, [sp, #4]
 8014c3c:	6120      	str	r0, [r4, #16]
 8014c3e:	b15b      	cbz	r3, 8014c58 <__smakebuf_r+0x74>
 8014c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c44:	4630      	mov	r0, r6
 8014c46:	f000 f8b1 	bl	8014dac <_isatty_r>
 8014c4a:	b128      	cbz	r0, 8014c58 <__smakebuf_r+0x74>
 8014c4c:	89a3      	ldrh	r3, [r4, #12]
 8014c4e:	f023 0303 	bic.w	r3, r3, #3
 8014c52:	f043 0301 	orr.w	r3, r3, #1
 8014c56:	81a3      	strh	r3, [r4, #12]
 8014c58:	89a0      	ldrh	r0, [r4, #12]
 8014c5a:	4305      	orrs	r5, r0
 8014c5c:	81a5      	strh	r5, [r4, #12]
 8014c5e:	e7cd      	b.n	8014bfc <__smakebuf_r+0x18>
 8014c60:	08013b45 	.word	0x08013b45

08014c64 <__malloc_lock>:
 8014c64:	4801      	ldr	r0, [pc, #4]	; (8014c6c <__malloc_lock+0x8>)
 8014c66:	f7ff b851 	b.w	8013d0c <__retarget_lock_acquire_recursive>
 8014c6a:	bf00      	nop
 8014c6c:	240074b0 	.word	0x240074b0

08014c70 <__malloc_unlock>:
 8014c70:	4801      	ldr	r0, [pc, #4]	; (8014c78 <__malloc_unlock+0x8>)
 8014c72:	f7ff b84c 	b.w	8013d0e <__retarget_lock_release_recursive>
 8014c76:	bf00      	nop
 8014c78:	240074b0 	.word	0x240074b0

08014c7c <_realloc_r>:
 8014c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c80:	4680      	mov	r8, r0
 8014c82:	4614      	mov	r4, r2
 8014c84:	460e      	mov	r6, r1
 8014c86:	b921      	cbnz	r1, 8014c92 <_realloc_r+0x16>
 8014c88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c8c:	4611      	mov	r1, r2
 8014c8e:	f7ff b8b3 	b.w	8013df8 <_malloc_r>
 8014c92:	b92a      	cbnz	r2, 8014ca0 <_realloc_r+0x24>
 8014c94:	f7ff f844 	bl	8013d20 <_free_r>
 8014c98:	4625      	mov	r5, r4
 8014c9a:	4628      	mov	r0, r5
 8014c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ca0:	f000 f894 	bl	8014dcc <_malloc_usable_size_r>
 8014ca4:	4284      	cmp	r4, r0
 8014ca6:	4607      	mov	r7, r0
 8014ca8:	d802      	bhi.n	8014cb0 <_realloc_r+0x34>
 8014caa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014cae:	d812      	bhi.n	8014cd6 <_realloc_r+0x5a>
 8014cb0:	4621      	mov	r1, r4
 8014cb2:	4640      	mov	r0, r8
 8014cb4:	f7ff f8a0 	bl	8013df8 <_malloc_r>
 8014cb8:	4605      	mov	r5, r0
 8014cba:	2800      	cmp	r0, #0
 8014cbc:	d0ed      	beq.n	8014c9a <_realloc_r+0x1e>
 8014cbe:	42bc      	cmp	r4, r7
 8014cc0:	4622      	mov	r2, r4
 8014cc2:	4631      	mov	r1, r6
 8014cc4:	bf28      	it	cs
 8014cc6:	463a      	movcs	r2, r7
 8014cc8:	f7fe fe54 	bl	8013974 <memcpy>
 8014ccc:	4631      	mov	r1, r6
 8014cce:	4640      	mov	r0, r8
 8014cd0:	f7ff f826 	bl	8013d20 <_free_r>
 8014cd4:	e7e1      	b.n	8014c9a <_realloc_r+0x1e>
 8014cd6:	4635      	mov	r5, r6
 8014cd8:	e7df      	b.n	8014c9a <_realloc_r+0x1e>
	...

08014cdc <_read_r>:
 8014cdc:	b538      	push	{r3, r4, r5, lr}
 8014cde:	4d07      	ldr	r5, [pc, #28]	; (8014cfc <_read_r+0x20>)
 8014ce0:	4604      	mov	r4, r0
 8014ce2:	4608      	mov	r0, r1
 8014ce4:	4611      	mov	r1, r2
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	602a      	str	r2, [r5, #0]
 8014cea:	461a      	mov	r2, r3
 8014cec:	f7eb fef4 	bl	8000ad8 <_read>
 8014cf0:	1c43      	adds	r3, r0, #1
 8014cf2:	d102      	bne.n	8014cfa <_read_r+0x1e>
 8014cf4:	682b      	ldr	r3, [r5, #0]
 8014cf6:	b103      	cbz	r3, 8014cfa <_read_r+0x1e>
 8014cf8:	6023      	str	r3, [r4, #0]
 8014cfa:	bd38      	pop	{r3, r4, r5, pc}
 8014cfc:	24007438 	.word	0x24007438

08014d00 <_raise_r>:
 8014d00:	291f      	cmp	r1, #31
 8014d02:	b538      	push	{r3, r4, r5, lr}
 8014d04:	4604      	mov	r4, r0
 8014d06:	460d      	mov	r5, r1
 8014d08:	d904      	bls.n	8014d14 <_raise_r+0x14>
 8014d0a:	2316      	movs	r3, #22
 8014d0c:	6003      	str	r3, [r0, #0]
 8014d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8014d12:	bd38      	pop	{r3, r4, r5, pc}
 8014d14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014d16:	b112      	cbz	r2, 8014d1e <_raise_r+0x1e>
 8014d18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014d1c:	b94b      	cbnz	r3, 8014d32 <_raise_r+0x32>
 8014d1e:	4620      	mov	r0, r4
 8014d20:	f000 f830 	bl	8014d84 <_getpid_r>
 8014d24:	462a      	mov	r2, r5
 8014d26:	4601      	mov	r1, r0
 8014d28:	4620      	mov	r0, r4
 8014d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d2e:	f000 b817 	b.w	8014d60 <_kill_r>
 8014d32:	2b01      	cmp	r3, #1
 8014d34:	d00a      	beq.n	8014d4c <_raise_r+0x4c>
 8014d36:	1c59      	adds	r1, r3, #1
 8014d38:	d103      	bne.n	8014d42 <_raise_r+0x42>
 8014d3a:	2316      	movs	r3, #22
 8014d3c:	6003      	str	r3, [r0, #0]
 8014d3e:	2001      	movs	r0, #1
 8014d40:	e7e7      	b.n	8014d12 <_raise_r+0x12>
 8014d42:	2400      	movs	r4, #0
 8014d44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014d48:	4628      	mov	r0, r5
 8014d4a:	4798      	blx	r3
 8014d4c:	2000      	movs	r0, #0
 8014d4e:	e7e0      	b.n	8014d12 <_raise_r+0x12>

08014d50 <raise>:
 8014d50:	4b02      	ldr	r3, [pc, #8]	; (8014d5c <raise+0xc>)
 8014d52:	4601      	mov	r1, r0
 8014d54:	6818      	ldr	r0, [r3, #0]
 8014d56:	f7ff bfd3 	b.w	8014d00 <_raise_r>
 8014d5a:	bf00      	nop
 8014d5c:	24000034 	.word	0x24000034

08014d60 <_kill_r>:
 8014d60:	b538      	push	{r3, r4, r5, lr}
 8014d62:	4d07      	ldr	r5, [pc, #28]	; (8014d80 <_kill_r+0x20>)
 8014d64:	2300      	movs	r3, #0
 8014d66:	4604      	mov	r4, r0
 8014d68:	4608      	mov	r0, r1
 8014d6a:	4611      	mov	r1, r2
 8014d6c:	602b      	str	r3, [r5, #0]
 8014d6e:	f7eb fe97 	bl	8000aa0 <_kill>
 8014d72:	1c43      	adds	r3, r0, #1
 8014d74:	d102      	bne.n	8014d7c <_kill_r+0x1c>
 8014d76:	682b      	ldr	r3, [r5, #0]
 8014d78:	b103      	cbz	r3, 8014d7c <_kill_r+0x1c>
 8014d7a:	6023      	str	r3, [r4, #0]
 8014d7c:	bd38      	pop	{r3, r4, r5, pc}
 8014d7e:	bf00      	nop
 8014d80:	24007438 	.word	0x24007438

08014d84 <_getpid_r>:
 8014d84:	f7eb be84 	b.w	8000a90 <_getpid>

08014d88 <_fstat_r>:
 8014d88:	b538      	push	{r3, r4, r5, lr}
 8014d8a:	4d07      	ldr	r5, [pc, #28]	; (8014da8 <_fstat_r+0x20>)
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	4604      	mov	r4, r0
 8014d90:	4608      	mov	r0, r1
 8014d92:	4611      	mov	r1, r2
 8014d94:	602b      	str	r3, [r5, #0]
 8014d96:	f7eb fee4 	bl	8000b62 <_fstat>
 8014d9a:	1c43      	adds	r3, r0, #1
 8014d9c:	d102      	bne.n	8014da4 <_fstat_r+0x1c>
 8014d9e:	682b      	ldr	r3, [r5, #0]
 8014da0:	b103      	cbz	r3, 8014da4 <_fstat_r+0x1c>
 8014da2:	6023      	str	r3, [r4, #0]
 8014da4:	bd38      	pop	{r3, r4, r5, pc}
 8014da6:	bf00      	nop
 8014da8:	24007438 	.word	0x24007438

08014dac <_isatty_r>:
 8014dac:	b538      	push	{r3, r4, r5, lr}
 8014dae:	4d06      	ldr	r5, [pc, #24]	; (8014dc8 <_isatty_r+0x1c>)
 8014db0:	2300      	movs	r3, #0
 8014db2:	4604      	mov	r4, r0
 8014db4:	4608      	mov	r0, r1
 8014db6:	602b      	str	r3, [r5, #0]
 8014db8:	f7eb fee3 	bl	8000b82 <_isatty>
 8014dbc:	1c43      	adds	r3, r0, #1
 8014dbe:	d102      	bne.n	8014dc6 <_isatty_r+0x1a>
 8014dc0:	682b      	ldr	r3, [r5, #0]
 8014dc2:	b103      	cbz	r3, 8014dc6 <_isatty_r+0x1a>
 8014dc4:	6023      	str	r3, [r4, #0]
 8014dc6:	bd38      	pop	{r3, r4, r5, pc}
 8014dc8:	24007438 	.word	0x24007438

08014dcc <_malloc_usable_size_r>:
 8014dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014dd0:	1f18      	subs	r0, r3, #4
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	bfbc      	itt	lt
 8014dd6:	580b      	ldrlt	r3, [r1, r0]
 8014dd8:	18c0      	addlt	r0, r0, r3
 8014dda:	4770      	bx	lr

08014ddc <_init>:
 8014ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dde:	bf00      	nop
 8014de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014de2:	bc08      	pop	{r3}
 8014de4:	469e      	mov	lr, r3
 8014de6:	4770      	bx	lr

08014de8 <_fini>:
 8014de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dea:	bf00      	nop
 8014dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014dee:	bc08      	pop	{r3}
 8014df0:	469e      	mov	lr, r3
 8014df2:	4770      	bx	lr
