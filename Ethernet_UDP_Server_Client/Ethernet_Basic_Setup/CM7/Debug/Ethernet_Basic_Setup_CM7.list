
Ethernet_Basic_Setup_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014190  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032e4  08014430  08014430  00024430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017714  08017714  00030098  2**0
                  CONTENTS
  4 .ARM          00000000  08017714  08017714  00030098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017714  08017714  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017714  08017714  00027714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017718  08017718  00027718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  0801771c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007474  24000098  080177b4  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400750c  080177b4  0003750c  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002eea1  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007130  00000000  00000000  0005ef67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021b8  00000000  00000000  00066098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002028  00000000  00000000  00068250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00049b13  00000000  00000000  0006a278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003571c  00000000  00000000  000b3d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a2844  00000000  00000000  000e94a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0028bceb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009448  00000000  00000000  0028bd3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014418 	.word	0x08014418

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08014418 	.word	0x08014418

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3d      	ldr	r3, [pc, #244]	; (800047c <SystemInit+0xfc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3c      	ldr	r2, [pc, #240]	; (800047c <SystemInit+0xfc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b39      	ldr	r3, [pc, #228]	; (800047c <SystemInit+0xfc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a38      	ldr	r2, [pc, #224]	; (800047c <SystemInit+0xfc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b34      	ldr	r3, [pc, #208]	; (8000480 <SystemInit+0x100>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a32      	ldr	r2, [pc, #200]	; (8000480 <SystemInit+0x100>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <SystemInit+0x104>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a30      	ldr	r2, [pc, #192]	; (8000484 <SystemInit+0x104>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <SystemInit+0x104>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <SystemInit+0x104>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492c      	ldr	r1, [pc, #176]	; (8000484 <SystemInit+0x104>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <SystemInit+0x108>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <SystemInit+0x100>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a24      	ldr	r2, [pc, #144]	; (8000480 <SystemInit+0x100>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <SystemInit+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <SystemInit+0x104>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <SystemInit+0x104>)
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SystemInit+0x104>)
 8000410:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <SystemInit+0x110>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SystemInit+0x104>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	; (8000494 <SystemInit+0x114>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <SystemInit+0x104>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <SystemInit+0x114>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SystemInit+0x104>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <SystemInit+0x114>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x104>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <SystemInit+0x104>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SystemInit+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <SystemInit+0x118>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <SystemInit+0x118>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x11c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <SystemInit+0x120>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x124>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <SystemInit+0x128>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	52002000 	.word	0x52002000
 8000484:	58024400 	.word	0x58024400
 8000488:	eaf6ed7f 	.word	0xeaf6ed7f
 800048c:	02020200 	.word	0x02020200
 8000490:	01ff0000 	.word	0x01ff0000
 8000494:	01010280 	.word	0x01010280
 8000498:	580000c0 	.word	0x580000c0
 800049c:	5c001000 	.word	0x5c001000
 80004a0:	ffff0000 	.word	0xffff0000
 80004a4:	51008108 	.word	0x51008108
 80004a8:	52004000 	.word	0x52004000

080004ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80004bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	4a06      	ldr	r2, [pc, #24]	; (80004dc <vApplicationGetIdleTaskMemory+0x30>)
 80004c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2280      	movs	r2, #128	; 0x80
 80004c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	240000b4 	.word	0x240000b4
 80004dc:	24000108 	.word	0x24000108

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b5b0      	push	{r4, r5, r7, lr}
 80004e2:	b08c      	sub	sp, #48	; 0x30
 80004e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80004e6:	f000 f9dd 	bl	80008a4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004ea:	4b5d      	ldr	r3, [pc, #372]	; (8000660 <main+0x180>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d11b      	bne.n	800052e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004f6:	f3bf 8f4f 	dsb	sy
}
 80004fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004fc:	f3bf 8f6f 	isb	sy
}
 8000500:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000502:	4b57      	ldr	r3, [pc, #348]	; (8000660 <main+0x180>)
 8000504:	2200      	movs	r2, #0
 8000506:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800050a:	f3bf 8f4f 	dsb	sy
}
 800050e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000510:	f3bf 8f6f 	isb	sy
}
 8000514:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000516:	4b52      	ldr	r3, [pc, #328]	; (8000660 <main+0x180>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a51      	ldr	r2, [pc, #324]	; (8000660 <main+0x180>)
 800051c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000520:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000522:	f3bf 8f4f 	dsb	sy
}
 8000526:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000528:	f3bf 8f6f 	isb	sy
}
 800052c:	e000      	b.n	8000530 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800052e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000530:	4b4b      	ldr	r3, [pc, #300]	; (8000660 <main+0x180>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000538:	2b00      	cmp	r3, #0
 800053a:	d138      	bne.n	80005ae <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800053c:	4b48      	ldr	r3, [pc, #288]	; (8000660 <main+0x180>)
 800053e:	2200      	movs	r2, #0
 8000540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000544:	f3bf 8f4f 	dsb	sy
}
 8000548:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800054a:	4b45      	ldr	r3, [pc, #276]	; (8000660 <main+0x180>)
 800054c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000554:	0b5b      	lsrs	r3, r3, #13
 8000556:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800055a:	627b      	str	r3, [r7, #36]	; 0x24
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800055c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800055e:	08db      	lsrs	r3, r3, #3
 8000560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000564:	623b      	str	r3, [r7, #32]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	015a      	lsls	r2, r3, #5
 800056a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800056e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000570:	6a3a      	ldr	r2, [r7, #32]
 8000572:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000574:	493a      	ldr	r1, [pc, #232]	; (8000660 <main+0x180>)
 8000576:	4313      	orrs	r3, r2
 8000578:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800057c:	6a3b      	ldr	r3, [r7, #32]
 800057e:	1e5a      	subs	r2, r3, #1
 8000580:	623a      	str	r2, [r7, #32]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1ef      	bne.n	8000566 <main+0x86>
    } while(sets-- != 0U);
 8000586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000588:	1e5a      	subs	r2, r3, #1
 800058a:	627a      	str	r2, [r7, #36]	; 0x24
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1e5      	bne.n	800055c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000590:	f3bf 8f4f 	dsb	sy
}
 8000594:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000596:	4b32      	ldr	r3, [pc, #200]	; (8000660 <main+0x180>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a31      	ldr	r2, [pc, #196]	; (8000660 <main+0x180>)
 800059c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005a2:	f3bf 8f4f 	dsb	sy
}
 80005a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005a8:	f3bf 8f6f 	isb	sy
}
 80005ac:	e000      	b.n	80005b0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005ae:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80005b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80005b6:	bf00      	nop
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <main+0x184>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d004      	beq.n	80005ce <main+0xee>
 80005c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c6:	1e5a      	subs	r2, r3, #1
 80005c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	dcf4      	bgt.n	80005b8 <main+0xd8>
  if ( timeout < 0 )
 80005ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	da01      	bge.n	80005d8 <main+0xf8>
  {
  Error_Handler();
 80005d4:	f000 f9c6 	bl	8000964 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fcd2 	bl	8000f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f848 	bl	8000670 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <main+0x184>)
 80005e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e6:	4a1f      	ldr	r2, [pc, #124]	; (8000664 <main+0x184>)
 80005e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <main+0x184>)
 80005f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80005fe:	2000      	movs	r0, #0
 8000600:	f002 fe32 	bl	8003268 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000604:	2100      	movs	r1, #0
 8000606:	2000      	movs	r0, #0
 8000608:	f002 fe48 	bl	800329c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800060c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000610:	62fb      	str	r3, [r7, #44]	; 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000612:	bf00      	nop
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <main+0x184>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800061c:	2b00      	cmp	r3, #0
 800061e:	d104      	bne.n	800062a <main+0x14a>
 8000620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000622:	1e5a      	subs	r2, r3, #1
 8000624:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000626:	2b00      	cmp	r3, #0
 8000628:	dcf4      	bgt.n	8000614 <main+0x134>
if ( timeout < 0 )
 800062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062c:	2b00      	cmp	r3, #0
 800062e:	da01      	bge.n	8000634 <main+0x154>
{
Error_Handler();
 8000630:	f000 f998 	bl	8000964 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 f898 	bl	8000768 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <main+0x188>)
 800063a:	1d3c      	adds	r4, r7, #4
 800063c:	461d      	mov	r5, r3
 800063e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f005 f85a 	bl	8005708 <osThreadCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <main+0x18c>)
 8000658:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065a:	f005 f83e 	bl	80056da <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0x17e>
 8000660:	e000ed00 	.word	0xe000ed00
 8000664:	58024400 	.word	0x58024400
 8000668:	0801443c 	.word	0x0801443c
 800066c:	24000308 	.word	0x24000308

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09c      	sub	sp, #112	; 0x70
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067a:	224c      	movs	r2, #76	; 0x4c
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f012 fcaa 	bl	8012fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2220      	movs	r2, #32
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f012 fca4 	bl	8012fd8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000690:	2004      	movs	r0, #4
 8000692:	f002 fe17 	bl	80032c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	4b31      	ldr	r3, [pc, #196]	; (8000760 <SystemClock_Config+0xf0>)
 800069c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069e:	4a30      	ldr	r2, [pc, #192]	; (8000760 <SystemClock_Config+0xf0>)
 80006a0:	f023 0301 	bic.w	r3, r3, #1
 80006a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006a6:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <SystemClock_Config+0xf0>)
 80006a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <SystemClock_Config+0xf4>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a2b      	ldr	r2, [pc, #172]	; (8000764 <SystemClock_Config+0xf4>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b29      	ldr	r3, [pc, #164]	; (8000764 <SystemClock_Config+0xf4>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c8:	bf00      	nop
 80006ca:	4b26      	ldr	r3, [pc, #152]	; (8000764 <SystemClock_Config+0xf4>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d6:	d1f8      	bne.n	80006ca <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006dc:	2301      	movs	r3, #1
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2340      	movs	r3, #64	; 0x40
 80006e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006f0:	2332      	movs	r3, #50	; 0x32
 80006f2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000700:	230c      	movs	r3, #12
 8000702:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000704:	2300      	movs	r3, #0
 8000706:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000710:	4618      	mov	r0, r3
 8000712:	f002 fe31 	bl	8003378 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800071c:	f000 f922 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	233f      	movs	r3, #63	; 0x3f
 8000722:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2303      	movs	r3, #3
 8000726:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800072c:	2308      	movs	r3, #8
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000730:	2340      	movs	r3, #64	; 0x40
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800073e:	2340      	movs	r3, #64	; 0x40
 8000740:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2102      	movs	r1, #2
 8000746:	4618      	mov	r0, r3
 8000748:	f003 fa44 	bl	8003bd4 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000752:	f000 f907 	bl	8000964 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3770      	adds	r7, #112	; 0x70
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	58000400 	.word	0x58000400
 8000764:	58024800 	.word	0x58024800

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	4b40      	ldr	r3, [pc, #256]	; (8000880 <MX_GPIO_Init+0x118>)
 8000780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000784:	4a3e      	ldr	r2, [pc, #248]	; (8000880 <MX_GPIO_Init+0x118>)
 8000786:	f043 0304 	orr.w	r3, r3, #4
 800078a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078e:	4b3c      	ldr	r3, [pc, #240]	; (8000880 <MX_GPIO_Init+0x118>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079c:	4b38      	ldr	r3, [pc, #224]	; (8000880 <MX_GPIO_Init+0x118>)
 800079e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a2:	4a37      	ldr	r2, [pc, #220]	; (8000880 <MX_GPIO_Init+0x118>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ac:	4b34      	ldr	r3, [pc, #208]	; (8000880 <MX_GPIO_Init+0x118>)
 80007ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <MX_GPIO_Init+0x118>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c0:	4a2f      	ldr	r2, [pc, #188]	; (8000880 <MX_GPIO_Init+0x118>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ca:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <MX_GPIO_Init+0x118>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <MX_GPIO_Init+0x118>)
 80007da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007de:	4a28      	ldr	r2, [pc, #160]	; (8000880 <MX_GPIO_Init+0x118>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <MX_GPIO_Init+0x118>)
 80007ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MX_GPIO_Init+0x118>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a20      	ldr	r2, [pc, #128]	; (8000880 <MX_GPIO_Init+0x118>)
 80007fe:	f043 0308 	orr.w	r3, r3, #8
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_GPIO_Init+0x118>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 0308 	and.w	r3, r3, #8
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_GPIO_Init+0x118>)
 8000816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081a:	4a19      	ldr	r2, [pc, #100]	; (8000880 <MX_GPIO_Init+0x118>)
 800081c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_GPIO_Init+0x118>)
 8000826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000832:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000844:	2307      	movs	r3, #7
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	4619      	mov	r1, r3
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_GPIO_Init+0x11c>)
 8000850:	f002 fb5a 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000854:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000866:	230a      	movs	r3, #10
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_GPIO_Init+0x120>)
 8000872:	f002 fb49 	bl	8002f08 <HAL_GPIO_Init>

}
 8000876:	bf00      	nop
 8000878:	3730      	adds	r7, #48	; 0x30
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	58024400 	.word	0x58024400
 8000884:	58020c00 	.word	0x58020c00
 8000888:	58020000 	.word	0x58020000

0800088c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000894:	f004 f8b8 	bl	8004a08 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  udpClient_connect();
 8000898:	f004 f82e 	bl	80048f8 <udpClient_connect>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f004 ff7f 	bl	80057a0 <osDelay>
 80008a2:	e7fb      	b.n	800089c <StartDefaultTask+0x10>

080008a4 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008aa:	463b      	mov	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008b6:	f000 fcbf 	bl	8001238 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008ba:	2301      	movs	r3, #1
 80008bc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008be:	2300      	movs	r3, #0
 80008c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MPU_Config+0x74>)
 80008c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80008c6:	230e      	movs	r3, #14
 80008c8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008d2:	2303      	movs	r3, #3
 80008d4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008d6:	2301      	movs	r3, #1
 80008d8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008e6:	463b      	mov	r3, r7
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fcdd 	bl	80012a8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80008f2:	2307      	movs	r3, #7
 80008f4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008fa:	2301      	movs	r3, #1
 80008fc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80008fe:	2301      	movs	r3, #1
 8000900:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000902:	463b      	mov	r3, r7
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fccf 	bl	80012a8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800090a:	2004      	movs	r0, #4
 800090c:	f000 fcac 	bl	8001268 <HAL_MPU_Enable>

}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	30040000 	.word	0x30040000

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0c      	ldr	r2, [pc, #48]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d111      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x36>
    HAL_IncTick();
 800092e:	f000 fb63 	bl	8000ff8 <HAL_IncTick>
    Timer_Count++;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	3301      	adds	r3, #1
 8000938:	b29a      	uxth	r2, r3
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800093c:	801a      	strh	r2, [r3, #0]

    if(Timer_Count == 1000)
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000946:	d104      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x36>
    {
    	udpClient_send();
 8000948:	f004 f80c 	bl	8004964 <udpClient_send>
    	Timer_Count = 0;
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800094e:	2200      	movs	r2, #0
 8000950:	801a      	strh	r2, [r3, #0]
    }
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40000400 	.word	0x40000400
 8000960:	2400030c 	.word	0x2400030c

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_MspInit+0x38>)
 8000978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800097c:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_MspInit+0x38>)
 800097e:	f043 0302 	orr.w	r3, r3, #2
 8000982:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_MspInit+0x38>)
 8000988:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800098c:	f003 0302 	and.w	r3, r3, #2
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	210f      	movs	r1, #15
 8000998:	f06f 0001 	mvn.w	r0, #1
 800099c:	f000 fc24 	bl	80011e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	58024400 	.word	0x58024400

080009ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b090      	sub	sp, #64	; 0x40
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM3 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b0f      	cmp	r3, #15
 80009b8:	d827      	bhi.n	8000a0a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0U);
 80009ba:	2200      	movs	r2, #0
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	201d      	movs	r0, #29
 80009c0:	f000 fc12 	bl	80011e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80009c4:	201d      	movs	r0, #29
 80009c6:	f000 fc29 	bl	800121c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80009ca:	4a29      	ldr	r2, [pc, #164]	; (8000a70 <HAL_InitTick+0xc4>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80009d0:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <HAL_InitTick+0xc8>)
 80009d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009d6:	4a27      	ldr	r2, [pc, #156]	; (8000a74 <HAL_InitTick+0xc8>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <HAL_InitTick+0xc8>)
 80009e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ee:	f107 0210 	add.w	r2, r7, #16
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f003 fc61 	bl	80042c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a00:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d106      	bne.n	8000a16 <HAL_InitTick+0x6a>
 8000a08:	e001      	b.n	8000a0e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e02b      	b.n	8000a66 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a0e:	f003 fc41 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 8000a12:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000a14:	e004      	b.n	8000a20 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a16:	f003 fc3d 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a22:	4a15      	ldr	r2, [pc, #84]	; (8000a78 <HAL_InitTick+0xcc>)
 8000a24:	fba2 2303 	umull	r2, r3, r2, r3
 8000a28:	0c9b      	lsrs	r3, r3, #18
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <HAL_InitTick+0xd0>)
 8000a30:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <HAL_InitTick+0xd4>)
 8000a32:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_InitTick+0xd0>)
 8000a36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a3a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000a3c:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <HAL_InitTick+0xd0>)
 8000a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a40:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_InitTick+0xd0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <HAL_InitTick+0xd0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000a4e:	480b      	ldr	r0, [pc, #44]	; (8000a7c <HAL_InitTick+0xd0>)
 8000a50:	f003 fc78 	bl	8004344 <HAL_TIM_Base_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d104      	bne.n	8000a64 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000a5a:	4808      	ldr	r0, [pc, #32]	; (8000a7c <HAL_InitTick+0xd0>)
 8000a5c:	f003 fcd4 	bl	8004408 <HAL_TIM_Base_Start_IT>
 8000a60:	4603      	mov	r3, r0
 8000a62:	e000      	b.n	8000a66 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3740      	adds	r7, #64	; 0x40
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	24000008 	.word	0x24000008
 8000a74:	58024400 	.word	0x58024400
 8000a78:	431bde83 	.word	0x431bde83
 8000a7c:	24000310 	.word	0x24000310
 8000a80:	40000400 	.word	0x40000400

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <TIM3_IRQHandler+0x10>)
 8000ab6:	f003 fd1f 	bl	80044f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	24000310 	.word	0x24000310

08000ac4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <ETH_IRQHandler+0x10>)
 8000aca:	f001 f86b 	bl	8001ba4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2400042c 	.word	0x2400042c

08000ad8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	return 1;
 8000adc:	2301      	movs	r3, #1
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <_kill>:

int _kill(int pid, int sig)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <_kill+0x20>)
 8000af4:	2216      	movs	r2, #22
 8000af6:	601a      	str	r2, [r3, #0]
	return -1;
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	24007488 	.word	0x24007488

08000b0c <_exit>:

void _exit (int status)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ffe5 	bl	8000ae8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b1e:	e7fe      	b.n	8000b1e <_exit+0x12>

08000b20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e00a      	b.n	8000b48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b32:	f3af 8000 	nop.w
 8000b36:	4601      	mov	r1, r0
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf0      	blt.n	8000b32 <_read+0x12>
	}

return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	e009      	b.n	8000b80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	60ba      	str	r2, [r7, #8]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbf1      	blt.n	8000b6c <_write+0x12>
	}
	return len;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_close>:

int _close(int file)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
	return -1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bba:	605a      	str	r2, [r3, #4]
	return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <_isatty>:

int _isatty(int file)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
	return 1;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
	return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b087      	sub	sp, #28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d205      	bcs.n	8000c38 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <_sbrk+0x6c>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	371c      	adds	r7, #28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	24080000 	.word	0x24080000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	2400035c 	.word	0x2400035c
 8000c64:	24007510 	.word	0x24007510
 8000c68:	24007488 	.word	0x24007488

08000c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c70:	f7ff fb86 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	; (8000cac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	; (8000cb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f012 f941 	bl	8012f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9e:	f7ff fc1f 	bl	80004e0 <main>
  bx  lr
 8000ca2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ca4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ca8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cac:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8000cb0:	0801771c 	.word	0x0801771c
  ldr r2, =_sbss
 8000cb4:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8000cb8:	2400750c 	.word	0x2400750c

08000cbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC3_IRQHandler>

08000cbe <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00b      	beq.n	8000ce6 <LAN8742_RegisterBusIO+0x28>
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d007      	beq.n	8000ce6 <LAN8742_RegisterBusIO+0x28>
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <LAN8742_RegisterBusIO+0x28>
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e014      	b.n	8000d16 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	691a      	ldr	r2, [r3, #16]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d17c      	bne.n	8000e3c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d002      	beq.n	8000d50 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2220      	movs	r2, #32
 8000d54:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	e01c      	b.n	8000d96 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	f107 0208 	add.w	r2, r7, #8
 8000d64:	2112      	movs	r1, #18
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	4798      	blx	r3
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	da03      	bge.n	8000d78 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000d70:	f06f 0304 	mvn.w	r3, #4
 8000d74:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000d76:	e00b      	b.n	8000d90 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	f003 031f 	and.w	r3, r3, #31
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d105      	bne.n	8000d90 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
         break;
 8000d8e:	e005      	b.n	8000d9c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	3301      	adds	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2b1f      	cmp	r3, #31
 8000d9a:	d9df      	bls.n	8000d5c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b1f      	cmp	r3, #31
 8000da2:	d902      	bls.n	8000daa <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000da4:	f06f 0302 	mvn.w	r3, #2
 8000da8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d145      	bne.n	8000e3c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	6810      	ldr	r0, [r2, #0]
 8000db8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4798      	blx	r3
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db37      	blt.n	8000e36 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6810      	ldr	r0, [r2, #0]
 8000dce:	f107 0208 	add.w	r2, r7, #8
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4798      	blx	r3
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db28      	blt.n	8000e2e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4798      	blx	r3
 8000de2:	4603      	mov	r3, r0
 8000de4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000de6:	e01c      	b.n	8000e22 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4798      	blx	r3
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000dfa:	d80e      	bhi.n	8000e1a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	6810      	ldr	r0, [r2, #0]
 8000e04:	f107 0208 	add.w	r2, r7, #8
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4798      	blx	r3
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	da07      	bge.n	8000e22 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000e12:	f06f 0304 	mvn.w	r3, #4
 8000e16:	613b      	str	r3, [r7, #16]
                 break;
 8000e18:	e010      	b.n	8000e3c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000e1a:	f06f 0301 	mvn.w	r3, #1
 8000e1e:	613b      	str	r3, [r7, #16]
               break;
 8000e20:	e00c      	b.n	8000e3c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1dd      	bne.n	8000de8 <LAN8742_Init+0xc6>
 8000e2c:	e006      	b.n	8000e3c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000e2e:	f06f 0304 	mvn.w	r3, #4
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	e002      	b.n	8000e3c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000e36:	f06f 0303 	mvn.w	r3, #3
 8000e3a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d112      	bne.n	8000e68 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4798      	blx	r3
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e4c:	bf00      	nop
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4798      	blx	r3
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e60:	d9f5      	bls.n	8000e4e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2201      	movs	r2, #1
 8000e66:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000e68:	693b      	ldr	r3, [r7, #16]
 }
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	6810      	ldr	r0, [r2, #0]
 8000e86:	f107 020c 	add.w	r2, r7, #12
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4798      	blx	r3
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	da02      	bge.n	8000e9a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e94:	f06f 0304 	mvn.w	r3, #4
 8000e98:	e06e      	b.n	8000f78 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6810      	ldr	r0, [r2, #0]
 8000ea2:	f107 020c 	add.w	r2, r7, #12
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	4798      	blx	r3
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	da02      	bge.n	8000eb6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000eb0:	f06f 0304 	mvn.w	r3, #4
 8000eb4:	e060      	b.n	8000f78 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e059      	b.n	8000f78 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6810      	ldr	r0, [r2, #0]
 8000ecc:	f107 020c 	add.w	r2, r7, #12
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4798      	blx	r3
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	da02      	bge.n	8000ee0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000eda:	f06f 0304 	mvn.w	r3, #4
 8000ede:	e04b      	b.n	8000f78 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d11b      	bne.n	8000f22 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d006      	beq.n	8000f02 <LAN8742_GetLinkState+0x90>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000efe:	2302      	movs	r3, #2
 8000f00:	e03a      	b.n	8000f78 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e033      	b.n	8000f78 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e02c      	b.n	8000f78 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f1e:	2305      	movs	r3, #5
 8000f20:	e02a      	b.n	8000f78 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	6810      	ldr	r0, [r2, #0]
 8000f2a:	f107 020c 	add.w	r2, r7, #12
 8000f2e:	211f      	movs	r1, #31
 8000f30:	4798      	blx	r3
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	da02      	bge.n	8000f3e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f38:	f06f 0304 	mvn.w	r3, #4
 8000f3c:	e01c      	b.n	8000f78 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f48:	2306      	movs	r3, #6
 8000f4a:	e015      	b.n	8000f78 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 031c 	and.w	r3, r3, #28
 8000f52:	2b18      	cmp	r3, #24
 8000f54:	d101      	bne.n	8000f5a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f56:	2302      	movs	r3, #2
 8000f58:	e00e      	b.n	8000f78 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f003 031c 	and.w	r3, r3, #28
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d101      	bne.n	8000f68 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e007      	b.n	8000f78 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 031c 	and.w	r3, r3, #28
 8000f6e:	2b14      	cmp	r3, #20
 8000f70:	d101      	bne.n	8000f76 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f72:	2304      	movs	r3, #4
 8000f74:	e000      	b.n	8000f78 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f76:	2305      	movs	r3, #5
    }				
  }
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f86:	2003      	movs	r0, #3
 8000f88:	f000 f923 	bl	80011d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f8c:	f002 ffd8 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 8000f90:	4602      	mov	r2, r0
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_Init+0x68>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	f003 030f 	and.w	r3, r3, #15
 8000f9c:	4913      	ldr	r1, [pc, #76]	; (8000fec <HAL_Init+0x6c>)
 8000f9e:	5ccb      	ldrb	r3, [r1, r3]
 8000fa0:	f003 031f 	and.w	r3, r3, #31
 8000fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <HAL_Init+0x68>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_Init+0x6c>)
 8000fb4:	5cd3      	ldrb	r3, [r2, r3]
 8000fb6:	f003 031f 	and.w	r3, r3, #31
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc0:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <HAL_Init+0x70>)
 8000fc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <HAL_Init+0x74>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f7ff fcee 	bl	80009ac <HAL_InitTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e002      	b.n	8000fe0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fda:	f7ff fcc9 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	58024400 	.word	0x58024400
 8000fec:	08017484 	.word	0x08017484
 8000ff0:	24000004 	.word	0x24000004
 8000ff4:	24000000 	.word	0x24000000

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	2400000c 	.word	0x2400000c
 800101c:	24000360 	.word	0x24000360

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	24000360 	.word	0x24000360

08001038 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetREVID+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	0c1b      	lsrs	r3, r3, #16
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	5c001000 	.word	0x5c001000

08001050 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001060:	4904      	ldr	r1, [pc, #16]	; (8001074 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4313      	orrs	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	58000400 	.word	0x58000400

08001078 <__NVIC_SetPriorityGrouping>:
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <__NVIC_SetPriorityGrouping+0x40>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x40>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	05fa0000 	.word	0x05fa0000

080010c0 <__NVIC_GetPriorityGrouping>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff4c 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f6:	f7ff ff63 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 80011fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	6978      	ldr	r0, [r7, #20]
 8001202:	f7ff ffb3 	bl	800116c <NVIC_EncodePriority>
 8001206:	4602      	mov	r2, r0
 8001208:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff82 	bl	8001118 <__NVIC_SetPriority>
}
 8001214:	bf00      	nop
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff56 	bl	80010dc <__NVIC_EnableIRQ>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800123c:	f3bf 8f5f 	dmb	sy
}
 8001240:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <HAL_MPU_Disable+0x28>)
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_MPU_Disable+0x28>)
 8001248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_MPU_Disable+0x2c>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	e000ed90 	.word	0xe000ed90

08001268 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <HAL_MPU_Enable+0x38>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_MPU_Enable+0x3c>)
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <HAL_MPU_Enable+0x3c>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001286:	f3bf 8f4f 	dsb	sy
}
 800128a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800128c:	f3bf 8f6f 	isb	sy
}
 8001290:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed90 	.word	0xe000ed90
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	785a      	ldrb	r2, [r3, #1]
 80012b4:	4b1d      	ldr	r3, [pc, #116]	; (800132c <HAL_MPU_ConfigRegion+0x84>)
 80012b6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d029      	beq.n	8001314 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80012c0:	4a1a      	ldr	r2, [pc, #104]	; (800132c <HAL_MPU_ConfigRegion+0x84>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7b1b      	ldrb	r3, [r3, #12]
 80012cc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	7adb      	ldrb	r3, [r3, #11]
 80012d2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7a9b      	ldrb	r3, [r3, #10]
 80012da:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7b5b      	ldrb	r3, [r3, #13]
 80012e2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7b9b      	ldrb	r3, [r3, #14]
 80012ea:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7bdb      	ldrb	r3, [r3, #15]
 80012f2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7a5b      	ldrb	r3, [r3, #9]
 80012fa:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7a1b      	ldrb	r3, [r3, #8]
 8001302:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001304:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	7812      	ldrb	r2, [r2, #0]
 800130a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800130e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001310:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001312:	e005      	b.n	8001320 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <HAL_MPU_ConfigRegion+0x84>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <HAL_MPU_ConfigRegion+0x84>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed90 	.word	0xe000ed90

08001330 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001334:	4b07      	ldr	r3, [pc, #28]	; (8001354 <HAL_GetCurrentCPUID+0x24>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	091b      	lsrs	r3, r3, #4
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	2b07      	cmp	r3, #7
 8001340:	d101      	bne.n	8001346 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001342:	2303      	movs	r3, #3
 8001344:	e000      	b.n	8001348 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001346:	2301      	movs	r3, #1
  }
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e0cf      	b.n	800150a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001370:	2b00      	cmp	r3, #0
 8001372:	d106      	bne.n	8001382 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2223      	movs	r2, #35	; 0x23
 8001378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f003 ff2d 	bl	80051dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b64      	ldr	r3, [pc, #400]	; (8001514 <HAL_ETH_Init+0x1bc>)
 8001384:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001388:	4a62      	ldr	r2, [pc, #392]	; (8001514 <HAL_ETH_Init+0x1bc>)
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001392:	4b60      	ldr	r3, [pc, #384]	; (8001514 <HAL_ETH_Init+0x1bc>)
 8001394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7a1b      	ldrb	r3, [r3, #8]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d103      	bne.n	80013b0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff fe51 	bl	8001050 <HAL_SYSCFG_ETHInterfaceSelect>
 80013ae:	e003      	b.n	80013b8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80013b0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80013b4:	f7ff fe4c 	bl	8001050 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80013b8:	4b57      	ldr	r3, [pc, #348]	; (8001518 <HAL_ETH_Init+0x1c0>)
 80013ba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d4:	f7ff fe24 	bl	8001020 <HAL_GetTick>
 80013d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013da:	e011      	b.n	8001400 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013dc:	f7ff fe20 	bl	8001020 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013ea:	d909      	bls.n	8001400 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2204      	movs	r2, #4
 80013f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	22e0      	movs	r2, #224	; 0xe0
 80013f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e084      	b.n	800150a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1e4      	bne.n	80013dc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 ff9e 	bl	8002354 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001418:	f002 ff0c 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 800141c:	4603      	mov	r3, r0
 800141e:	4a3f      	ldr	r2, [pc, #252]	; (800151c <HAL_ETH_Init+0x1c4>)
 8001420:	fba2 2303 	umull	r2, r3, r2, r3
 8001424:	0c9a      	lsrs	r2, r3, #18
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3a01      	subs	r2, #1
 800142c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f001 f997 	bl	8002764 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800143e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001442:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800144e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001452:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d009      	beq.n	8001476 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	22e0      	movs	r2, #224	; 0xe0
 800146e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e049      	b.n	800150a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800147e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001482:	4b27      	ldr	r3, [pc, #156]	; (8001520 <HAL_ETH_Init+0x1c8>)
 8001484:	4013      	ands	r3, r2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6952      	ldr	r2, [r2, #20]
 800148a:	0051      	lsls	r1, r2, #1
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	430b      	orrs	r3, r1
 8001492:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001496:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f001 f9ff 	bl	800289e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f001 fa45 	bl	8002930 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	3305      	adds	r3, #5
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	021a      	lsls	r2, r3, #8
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	3304      	adds	r3, #4
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	3303      	adds	r3, #3
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	061a      	lsls	r2, r3, #24
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	3302      	adds	r3, #2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	041b      	lsls	r3, r3, #16
 80014d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014e4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014f2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2210      	movs	r2, #16
 8001504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	58024400 	.word	0x58024400
 8001518:	58000400 	.word	0x58000400
 800151c:	431bde83 	.word	0x431bde83
 8001520:	ffff8001 	.word	0xffff8001

08001524 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001532:	2b10      	cmp	r3, #16
 8001534:	d153      	bne.n	80015de <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2223      	movs	r2, #35	; 0x23
 800153a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2204      	movs	r2, #4
 8001542:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 fa64 	bl	8001a12 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0202 	orr.w	r2, r2, #2
 8001558:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f042 0201 	orr.w	r2, r2, #1
 8001568:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0201 	orr.w	r2, r2, #1
 800157a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001586:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001596:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015b2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015be:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80015ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ce:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2223      	movs	r2, #35	; 0x23
 80015d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
  }
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015f6:	2b10      	cmp	r3, #16
 80015f8:	d179      	bne.n	80016ee <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2223      	movs	r2, #35	; 0x23
 80015fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <HAL_ETH_Start_IT+0x110>)
 8001616:	430b      	orrs	r3, r1
 8001618:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_ETH_Start_IT+0x114>)
 800162a:	430b      	orrs	r3, r1
 800162c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2204      	movs	r2, #4
 8001634:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f9eb 	bl	8001a12 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0202 	orr.w	r2, r2, #2
 800164a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0201 	orr.w	r2, r2, #1
 800166c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001678:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001688:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001694:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016a4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80016bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016c0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016cc:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 80016d8:	430b      	orrs	r3, r1
 80016da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016de:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2223      	movs	r2, #35	; 0x23
 80016e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
  }
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	0c020060 	.word	0x0c020060
 80016fc:	0c20c000 	.word	0x0c20c000

08001700 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800170e:	2b23      	cmp	r3, #35	; 0x23
 8001710:	d165      	bne.n	80017de <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2223      	movs	r2, #35	; 0x23
 8001716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001722:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b30      	ldr	r3, [pc, #192]	; (80017ec <HAL_ETH_Stop_IT+0xec>)
 800172c:	400b      	ands	r3, r1
 800172e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001732:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800174e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800175a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800176a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0202 	bic.w	r2, r2, #2
 80017a0:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	e00e      	b.n	80017c6 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	3212      	adds	r2, #18
 80017ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b2:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3301      	adds	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d9ed      	bls.n	80017a8 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2210      	movs	r2, #16
 80017d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
  }
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	ffff2f3e 	.word	0xffff2f3e

080017f0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d109      	bne.n	8001814 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e03a      	b.n	800188a <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800181a:	2b23      	cmp	r3, #35	; 0x23
 800181c:	d134      	bne.n	8001888 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001826:	2201      	movs	r2, #1
 8001828:	6839      	ldr	r1, [r7, #0]
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f001 f8de 	bl	80029ec <ETH_Prepare_Tx_Descriptors>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183c:	f043 0202 	orr.w	r2, r3, #2
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e01f      	b.n	800188a <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 800184a:	f3bf 8f4f 	dsb	sy
}
 800184e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	629a      	str	r2, [r3, #40]	; 0x28
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	2b03      	cmp	r3, #3
 8001860:	d904      	bls.n	800186c <HAL_ETH_Transmit_IT+0x7c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	1f1a      	subs	r2, r3, #4
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3106      	adds	r1, #6
 8001878:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800187c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001880:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	e000      	b.n	800188a <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
  }
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b088      	sub	sp, #32
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b0:	f043 0201 	orr.w	r2, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e0a5      	b.n	8001a0a <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018c4:	2b23      	cmp	r3, #35	; 0x23
 80018c6:	d001      	beq.n	80018cc <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e09e      	b.n	8001a0a <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	3212      	adds	r2, #18
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018e2:	f1c3 0304 	rsb	r3, r3, #4
 80018e6:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018e8:	e067      	b.n	80019ba <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d103      	bne.n	800191a <HAL_ETH_ReadData+0x88>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001916:	2b00      	cmp	r3, #0
 8001918:	d03d      	beq.n	8001996 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00d      	beq.n	8001960 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001970:	461a      	mov	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	b29b      	uxth	r3, r3
 8001976:	f003 fe13 	bl	80055a0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	441a      	add	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3301      	adds	r3, #1
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d902      	bls.n	80019a8 <HAL_ETH_ReadData+0x116>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b04      	subs	r3, #4
 80019a6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	3212      	adds	r2, #18
 80019ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3301      	adds	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db06      	blt.n	80019d0 <HAL_ETH_ReadData+0x13e>
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d202      	bcs.n	80019d0 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d08c      	beq.n	80018ea <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	441a      	add	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f814 	bl	8001a12 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d108      	bne.n	8001a08 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	e000      	b.n	8001a0a <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b088      	sub	sp, #32
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a26:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	3212      	adds	r2, #18
 8001a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a32:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a38:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a3a:	e03b      	b.n	8001ab4 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d112      	bne.n	8001a6a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 fd79 	bl	8005540 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	74fb      	strb	r3, [r7, #19]
 8001a58:	e007      	b.n	8001a6a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	461a      	mov	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001a6a:	7cfb      	ldrb	r3, [r7, #19]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d021      	beq.n	8001ab4 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001a70:	f3bf 8f5f 	dmb	sy
}
 8001a74:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d004      	beq.n	8001a88 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	e003      	b.n	8001a90 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001a8e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	3301      	adds	r3, #1
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d902      	bls.n	8001aa2 <ETH_UpdateDescriptor+0x90>
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	3212      	adds	r2, #18
 8001aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aac:	617b      	str	r3, [r7, #20]
      desccount--;
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <ETH_UpdateDescriptor+0xae>
 8001aba:	7cfb      	ldrb	r3, [r7, #19]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1bd      	bne.n	8001a3c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d00d      	beq.n	8001ae6 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3318      	adds	r3, #24
 8001afa:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b0c:	e03f      	b.n	8001b8e <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d106      	bne.n	8001b36 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001b36:	7bbb      	ldrb	r3, [r7, #14]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d028      	beq.n	8001b8e <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68d9      	ldr	r1, [r3, #12]
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	db1b      	blt.n	8001b8a <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	3304      	adds	r3, #4
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 fd86 	bl	8005670 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	2200      	movs	r2, #0
 8001b70:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	3301      	adds	r3, #1
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b88:	e001      	b.n	8001b8e <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <HAL_ETH_ReleaseTxPacket+0xac>
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1b9      	bne.n	8001b0e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bbc:	2b40      	cmp	r3, #64	; 0x40
 8001bbe:	d115      	bne.n	8001bec <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd0:	2b40      	cmp	r3, #64	; 0x40
 8001bd2:	d10b      	bne.n	8001bec <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f248 0340 	movw	r3, #32832	; 0x8040
 8001be2:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f003 f85e 	bl	8004ca8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d115      	bne.n	8001c2c <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c08:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d10b      	bne.n	8001c2c <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	f248 0301 	movw	r3, #32769	; 0x8001
 8001c22:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f003 f84e 	bl	8004cc8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c34:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c40:	d153      	bne.n	8001cea <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c56:	d148      	bne.n	8001cea <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5e:	f043 0208 	orr.w	r2, r3, #8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c70:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c7c:	d11e      	bne.n	8001cbc <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c86:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001c8a:	f241 1302 	movw	r3, #4354	; 0x1102
 8001c8e:	4013      	ands	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001caa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cae:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	22e0      	movs	r2, #224	; 0xe0
 8001cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001cba:	e013      	b.n	8001ce4 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001cc8:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001ce0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f002 ffff 	bl	8004ce8 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001cf2:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d104      	bne.n	8001d08 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d019      	beq.n	8001d3c <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0e:	f043 0210 	orr.w	r2, r3, #16
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	22e0      	movs	r2, #224	; 0xe0
 8001d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f002 ffda 	bl	8004ce8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b10      	cmp	r3, #16
 8001d4a:	d10f      	bne.n	8001d6c <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d54:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f844 	bl	8001dec <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d74:	f003 0320 	and.w	r3, r3, #32
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	d10f      	bne.n	8001d9c <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d84:	f003 020f 	and.w	r2, r3, #15
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f836 	bl	8001e00 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001d9c:	f7ff fac8 	bl	8001330 <HAL_GetCurrentCPUID>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d10d      	bne.n	8001dc2 <HAL_ETH_IRQHandler+0x21e>
  {
    /* check ETH WAKEUP exti flag */
    if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001da6:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <HAL_ETH_IRQHandler+0x240>)
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d014      	beq.n	8001ddc <HAL_ETH_IRQHandler+0x238>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <HAL_ETH_IRQHandler+0x240>)
 8001db4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f82a 	bl	8001e14 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8001dc0:	e00c      	b.n	8001ddc <HAL_ETH_IRQHandler+0x238>
    if (__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_ETH_IRQHandler+0x244>)
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <HAL_ETH_IRQHandler+0x238>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_ETH_IRQHandler+0x244>)
 8001dd0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f81c 	bl	8001e14 <HAL_ETH_WakeUpCallback>
}
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	58000080 	.word	0x58000080
 8001de8:	580000c0 	.word	0x580000c0

08001dec <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e03e      	b.n	8001ec8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e52:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	055b      	lsls	r3, r3, #21
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	041b      	lsls	r3, r3, #16
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f043 030c 	orr.w	r3, r3, #12
 8001e76:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001e8a:	f7ff f8c9 	bl	8001020 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e90:	e009      	b.n	8001ea6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001e92:	f7ff f8c5 	bl	8001020 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ea0:	d901      	bls.n	8001ea6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e010      	b.n	8001ec8 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1ed      	bne.n	8001e92 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e03c      	b.n	8001f6c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001efa:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	055b      	lsls	r3, r3, #21
 8001f06:	4313      	orrs	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	4313      	orrs	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f023 030c 	bic.w	r3, r3, #12
 8001f1e:	f043 0304 	orr.w	r3, r3, #4
 8001f22:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_ETH_WritePHYRegister+0xa4>)
 8001f32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <HAL_ETH_WritePHYRegister+0xa4>)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001f3e:	f7ff f86f 	bl	8001020 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f44:	e009      	b.n	8001f5a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f46:	f7ff f86b 	bl	8001020 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f54:	d901      	bls.n	8001f5a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e008      	b.n	8001f6c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1ed      	bne.n	8001f46 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40028000 	.word	0x40028000

08001f78 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e1c3      	b.n	8002314 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 020c 	and.w	r2, r3, #12
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bf0c      	ite	eq
 8001fd2:	2301      	moveq	r3, #1
 8001fd4:	2300      	movne	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800201a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800201e:	2b00      	cmp	r3, #0
 8002020:	bf14      	ite	ne
 8002022:	2301      	movne	r3, #1
 8002024:	2300      	moveq	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf14      	ite	ne
 800203c:	2301      	movne	r3, #1
 800203e:	2300      	moveq	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	bf14      	ite	ne
 8002072:	2301      	movne	r3, #1
 8002074:	2300      	moveq	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bf0c      	ite	eq
 80020a6:	2301      	moveq	r3, #1
 80020a8:	2300      	movne	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	461a      	mov	r2, r3
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf14      	ite	ne
 80020c0:	2301      	movne	r3, #1
 80020c2:	2300      	moveq	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bf14      	ite	ne
 80020da:	2301      	movne	r3, #1
 80020dc:	2300      	moveq	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf14      	ite	ne
 800210e:	2301      	movne	r3, #1
 8002110:	2300      	moveq	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	bf14      	ite	ne
 8002136:	2301      	movne	r3, #1
 8002138:	2300      	moveq	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf14      	ite	ne
 8002188:	2301      	movne	r3, #1
 800218a:	2300      	moveq	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800219c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf14      	ite	ne
 80021a4:	2301      	movne	r3, #1
 80021a6:	2300      	moveq	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bf14      	ite	ne
 80021c0:	2301      	movne	r3, #1
 80021c2:	2300      	moveq	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	0e5b      	lsrs	r3, r3, #25
 80021d6:	f003 021f 	and.w	r2, r3, #31
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf14      	ite	ne
 80021ec:	2301      	movne	r3, #1
 80021ee:	2300      	moveq	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 020f 	and.w	r2, r3, #15
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	bf14      	ite	ne
 8002216:	2301      	movne	r3, #1
 8002218:	2300      	moveq	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222e:	2b00      	cmp	r3, #0
 8002230:	bf0c      	ite	eq
 8002232:	2301      	moveq	r3, #1
 8002234:	2300      	movne	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	0c1b      	lsrs	r3, r3, #16
 8002256:	b29a      	uxth	r2, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf14      	ite	ne
 800226c:	2301      	movne	r3, #1
 800226e:	2300      	moveq	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002282:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002286:	2b00      	cmp	r3, #0
 8002288:	bf14      	ite	ne
 800228a:	2301      	movne	r3, #1
 800228c:	2300      	moveq	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80022a0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80022b0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf14      	ite	ne
 80022c8:	2301      	movne	r3, #1
 80022ca:	2300      	moveq	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bf14      	ite	ne
 80022e6:	2301      	movne	r3, #1
 80022e8:	2300      	moveq	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80022fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e00b      	b.n	800234c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800233a:	2b10      	cmp	r3, #16
 800233c:	d105      	bne.n	800234a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800233e:	6839      	ldr	r1, [r7, #0]
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f86d 	bl	8002420 <ETH_SetMACConfig>

    return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e000      	b.n	800234c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
  }
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002364:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800236c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800236e:	f001 ff61 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 8002372:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4a1e      	ldr	r2, [pc, #120]	; (80023f0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d908      	bls.n	800238e <HAL_ETH_SetMDIOClockRange+0x3a>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4a1d      	ldr	r2, [pc, #116]	; (80023f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d804      	bhi.n	800238e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e027      	b.n	80023de <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d908      	bls.n	80023a8 <HAL_ETH_SetMDIOClockRange+0x54>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4a17      	ldr	r2, [pc, #92]	; (80023f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d204      	bcs.n	80023a8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	e01a      	b.n	80023de <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d303      	bcc.n	80023b8 <HAL_ETH_SetMDIOClockRange+0x64>
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4a12      	ldr	r2, [pc, #72]	; (80023fc <HAL_ETH_SetMDIOClockRange+0xa8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d911      	bls.n	80023dc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4a10      	ldr	r2, [pc, #64]	; (80023fc <HAL_ETH_SetMDIOClockRange+0xa8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d908      	bls.n	80023d2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4a0f      	ldr	r2, [pc, #60]	; (8002400 <HAL_ETH_SetMDIOClockRange+0xac>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d804      	bhi.n	80023d2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	e005      	b.n	80023de <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	e000      	b.n	80023de <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80023dc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	01312cff 	.word	0x01312cff
 80023f4:	02160ebf 	.word	0x02160ebf
 80023f8:	03938700 	.word	0x03938700
 80023fc:	05f5e0ff 	.word	0x05f5e0ff
 8002400:	08f0d17f 	.word	0x08f0d17f

08002404 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002432:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	791b      	ldrb	r3, [r3, #4]
 8002438:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800243a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	7b1b      	ldrb	r3, [r3, #12]
 8002440:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002442:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	7b5b      	ldrb	r3, [r3, #13]
 8002448:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800244a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	7b9b      	ldrb	r3, [r3, #14]
 8002450:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002452:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	7bdb      	ldrb	r3, [r3, #15]
 8002458:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800245a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	7c12      	ldrb	r2, [r2, #16]
 8002460:	2a00      	cmp	r2, #0
 8002462:	d102      	bne.n	800246a <ETH_SetMACConfig+0x4a>
 8002464:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002468:	e000      	b.n	800246c <ETH_SetMACConfig+0x4c>
 800246a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800246c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	7c52      	ldrb	r2, [r2, #17]
 8002472:	2a00      	cmp	r2, #0
 8002474:	d102      	bne.n	800247c <ETH_SetMACConfig+0x5c>
 8002476:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800247a:	e000      	b.n	800247e <ETH_SetMACConfig+0x5e>
 800247c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800247e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	7c9b      	ldrb	r3, [r3, #18]
 8002484:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002486:	431a      	orrs	r2, r3
               macconf->Speed |
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800248c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002492:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	7f1b      	ldrb	r3, [r3, #28]
 8002498:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800249a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	7f5b      	ldrb	r3, [r3, #29]
 80024a0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80024a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	7f92      	ldrb	r2, [r2, #30]
 80024a8:	2a00      	cmp	r2, #0
 80024aa:	d102      	bne.n	80024b2 <ETH_SetMACConfig+0x92>
 80024ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b0:	e000      	b.n	80024b4 <ETH_SetMACConfig+0x94>
 80024b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80024b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	7fdb      	ldrb	r3, [r3, #31]
 80024ba:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80024bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024c4:	2a00      	cmp	r2, #0
 80024c6:	d102      	bne.n	80024ce <ETH_SetMACConfig+0xae>
 80024c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024cc:	e000      	b.n	80024d0 <ETH_SetMACConfig+0xb0>
 80024ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80024d0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80024d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024de:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80024e0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b56      	ldr	r3, [pc, #344]	; (800264c <ETH_SetMACConfig+0x22c>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	68f9      	ldr	r1, [r7, #12]
 80024fa:	430b      	orrs	r3, r1
 80024fc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800250a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800250c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002514:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002516:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800251e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002520:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002528:	2a00      	cmp	r2, #0
 800252a:	d102      	bne.n	8002532 <ETH_SetMACConfig+0x112>
 800252c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002530:	e000      	b.n	8002534 <ETH_SetMACConfig+0x114>
 8002532:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002534:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	4b42      	ldr	r3, [pc, #264]	; (8002650 <ETH_SetMACConfig+0x230>)
 8002546:	4013      	ands	r3, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	68f9      	ldr	r1, [r7, #12]
 800254e:	430b      	orrs	r3, r1
 8002550:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002558:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	4b3a      	ldr	r3, [pc, #232]	; (8002654 <ETH_SetMACConfig+0x234>)
 800256a:	4013      	ands	r3, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	68f9      	ldr	r1, [r7, #12]
 8002572:	430b      	orrs	r3, r1
 8002574:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800257c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002582:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800258a:	2a00      	cmp	r2, #0
 800258c:	d101      	bne.n	8002592 <ETH_SetMACConfig+0x172>
 800258e:	2280      	movs	r2, #128	; 0x80
 8002590:	e000      	b.n	8002594 <ETH_SetMACConfig+0x174>
 8002592:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002594:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025a6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80025aa:	4013      	ands	r3, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	68f9      	ldr	r1, [r7, #12]
 80025b2:	430b      	orrs	r3, r1
 80025b4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80025bc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80025c4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	f023 0103 	bic.w	r1, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	430a      	orrs	r2, r1
 80025de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80025ea:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002606:	2a00      	cmp	r2, #0
 8002608:	d101      	bne.n	800260e <ETH_SetMACConfig+0x1ee>
 800260a:	2240      	movs	r2, #64	; 0x40
 800260c:	e000      	b.n	8002610 <ETH_SetMACConfig+0x1f0>
 800260e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002610:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002618:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800261a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002622:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002624:	4313      	orrs	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002630:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	430a      	orrs	r2, r1
 800263c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	00048083 	.word	0x00048083
 8002650:	c0f88000 	.word	0xc0f88000
 8002654:	fffffef0 	.word	0xfffffef0

08002658 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b38      	ldr	r3, [pc, #224]	; (8002750 <ETH_SetDMAConfig+0xf8>)
 800266e:	4013      	ands	r3, r2
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	6811      	ldr	r1, [r2, #0]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	430b      	orrs	r3, r1
 800267a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800267e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	791b      	ldrb	r3, [r3, #4]
 8002684:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800268a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	7b1b      	ldrb	r3, [r3, #12]
 8002690:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <ETH_SetDMAConfig+0xfc>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	68f9      	ldr	r1, [r7, #12]
 80026aa:	430b      	orrs	r3, r1
 80026ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026b0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	7b5b      	ldrb	r3, [r3, #13]
 80026b6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80026bc:	4313      	orrs	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80026cc:	4b22      	ldr	r3, [pc, #136]	; (8002758 <ETH_SetDMAConfig+0x100>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	68f9      	ldr	r1, [r7, #12]
 80026d6:	430b      	orrs	r3, r1
 80026d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026dc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	7d1b      	ldrb	r3, [r3, #20]
 80026e8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80026ea:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	7f5b      	ldrb	r3, [r3, #29]
 80026f0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <ETH_SetDMAConfig+0x104>)
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	68f9      	ldr	r1, [r7, #12]
 800270c:	430b      	orrs	r3, r1
 800270e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002712:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	7f1b      	ldrb	r3, [r3, #28]
 800271a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002720:	4313      	orrs	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800272c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <ETH_SetDMAConfig+0x108>)
 8002732:	4013      	ands	r3, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	68f9      	ldr	r1, [r7, #12]
 800273a:	430b      	orrs	r3, r1
 800273c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002740:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	ffff87fd 	.word	0xffff87fd
 8002754:	ffff2ffe 	.word	0xffff2ffe
 8002758:	fffec000 	.word	0xfffec000
 800275c:	ffc0efef 	.word	0xffc0efef
 8002760:	7fc0ffff 	.word	0x7fc0ffff

08002764 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b0a4      	sub	sp, #144	; 0x90
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002772:	2300      	movs	r3, #0
 8002774:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002776:	2300      	movs	r3, #0
 8002778:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002782:	2301      	movs	r3, #1
 8002784:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800279a:	2301      	movs	r3, #1
 800279c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027a4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80027bc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80027c0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80027c8:	2300      	movs	r3, #0
 80027ca:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80027de:	2300      	movs	r3, #0
 80027e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80027e6:	2300      	movs	r3, #0
 80027e8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80027fc:	2320      	movs	r3, #32
 80027fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002802:	2301      	movs	r3, #1
 8002804:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002808:	2300      	movs	r3, #0
 800280a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800280e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002814:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002818:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002820:	2302      	movs	r3, #2
 8002822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800282c:	2300      	movs	r3, #0
 800282e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002832:	2300      	movs	r3, #0
 8002834:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800283e:	2300      	movs	r3, #0
 8002840:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002842:	2301      	movs	r3, #1
 8002844:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800284c:	4619      	mov	r1, r3
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff fde6 	bl	8002420 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002854:	2301      	movs	r3, #1
 8002856:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002858:	2301      	movs	r3, #1
 800285a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002866:	2300      	movs	r3, #0
 8002868:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800286a:	2300      	movs	r3, #0
 800286c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800286e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002872:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002878:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800287c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002884:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800288a:	f107 0308 	add.w	r3, r7, #8
 800288e:	4619      	mov	r1, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff fee1 	bl	8002658 <ETH_SetDMAConfig>
}
 8002896:	bf00      	nop
 8002898:	3790      	adds	r7, #144	; 0x90
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	e01d      	b.n	80028e8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68d9      	ldr	r1, [r3, #12]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4613      	mov	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	440b      	add	r3, r1
 80028bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2200      	movs	r2, #0
 80028c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2200      	movs	r2, #0
 80028d4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	3206      	adds	r2, #6
 80028de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	3301      	adds	r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d9de      	bls.n	80028ac <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fc:	461a      	mov	r2, r3
 80028fe:	2303      	movs	r3, #3
 8002900:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002910:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002920:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	e023      	b.n	8002986 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6919      	ldr	r1, [r3, #16]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2200      	movs	r2, #0
 800295a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2200      	movs	r2, #0
 8002966:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2200      	movs	r2, #0
 8002972:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	3212      	adds	r2, #18
 800297c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3301      	adds	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d9d8      	bls.n	800293e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b2:	461a      	mov	r2, r3
 80029b4:	2303      	movs	r3, #3
 80029b6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029da:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80029de:	bf00      	nop
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b08d      	sub	sp, #52	; 0x34
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3318      	adds	r3, #24
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a16:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a2e:	d007      	beq.n	8002a40 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	3304      	adds	r3, #4
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002a40:	2302      	movs	r3, #2
 8002a42:	e259      	b.n	8002ef8 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d044      	beq.n	8002ada <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	4b75      	ldr	r3, [pc, #468]	; (8002c2c <ETH_Prepare_Tx_Descriptors+0x240>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a7c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d027      	beq.n	8002ada <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	041b      	lsls	r3, r3, #16
 8002a96:	431a      	orrs	r2, r3
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ac8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ad8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00e      	beq.n	8002b04 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	4b51      	ldr	r3, [pc, #324]	; (8002c30 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	6992      	ldr	r2, [r2, #24]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d036      	beq.n	8002b8a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b28:	f3bf 8f5f 	dmb	sy
}
 8002b2c:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d902      	bls.n	8002b4c <ETH_Prepare_Tx_Descriptors+0x160>
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	3b04      	subs	r3, #4
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b54:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	3301      	adds	r3, #1
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b68:	d10f      	bne.n	8002b8a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b74:	f3bf 8f5f 	dmb	sy
}
 8002b78:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002b86:	2302      	movs	r3, #2
 8002b88:	e1b6      	b.n	8002ef8 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	6852      	ldr	r2, [r2, #4]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d012      	beq.n	8002bda <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	6852      	ldr	r2, [r2, #4]
 8002bd0:	0412      	lsls	r2, r2, #16
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	e008      	b.n	8002bec <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	6a3a      	ldr	r2, [r7, #32]
 8002bea:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d021      	beq.n	8002c3c <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	04db      	lsls	r3, r3, #19
 8002c06:	431a      	orrs	r2, r3
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	69d2      	ldr	r2, [r2, #28]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	e02e      	b.n	8002c8a <ETH_Prepare_Tx_Descriptors+0x29e>
 8002c2c:	ffff0000 	.word	0xffff0000
 8002c30:	ffffc000 	.word	0xffffc000
 8002c34:	c000ffff 	.word	0xc000ffff
 8002c38:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	4b7b      	ldr	r3, [pc, #492]	; (8002e30 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	6852      	ldr	r2, [r2, #4]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d008      	beq.n	8002c6c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002cc0:	f3bf 8f5f 	dmb	sy
}
 8002cc4:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80da 	beq.w	8002e94 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002cf2:	e0cf      	b.n	8002e94 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d02:	3301      	adds	r3, #1
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d902      	bls.n	8002d12 <ETH_Prepare_Tx_Descriptors+0x326>
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	3b04      	subs	r3, #4
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1a:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d34:	d007      	beq.n	8002d46 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d029      	beq.n	8002d9a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d52:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002d54:	2300      	movs	r3, #0
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d58:	e019      	b.n	8002d8e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d5a:	f3bf 8f5f 	dmb	sy
}
 8002d5e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6e:	3301      	adds	r3, #1
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d902      	bls.n	8002d7e <ETH_Prepare_Tx_Descriptors+0x392>
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	3b04      	subs	r3, #4
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d86:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d3e1      	bcc.n	8002d5a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002d96:	2302      	movs	r3, #2
 8002d98:	e0ae      	b.n	8002ef8 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	6852      	ldr	r2, [r2, #4]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d012      	beq.n	8002df0 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	6852      	ldr	r2, [r2, #4]
 8002de6:	0412      	lsls	r2, r2, #16
 8002de8:	431a      	orrs	r2, r3
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	e008      	b.n	8002e02 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	2200      	movs	r2, #0
 8002df4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	6a3a      	ldr	r2, [r7, #32]
 8002e00:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d018      	beq.n	8002e40 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <ETH_Prepare_Tx_Descriptors+0x450>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	69d2      	ldr	r2, [r2, #28]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	60da      	str	r2, [r3, #12]
 8002e2c:	e020      	b.n	8002e70 <ETH_Prepare_Tx_Descriptors+0x484>
 8002e2e:	bf00      	nop
 8002e30:	ffff8000 	.word	0xffff8000
 8002e34:	ffffc000 	.word	0xffffc000
 8002e38:	c000ffff 	.word	0xc000ffff
 8002e3c:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	4b2f      	ldr	r3, [pc, #188]	; (8002f04 <ETH_Prepare_Tx_Descriptors+0x518>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	6852      	ldr	r2, [r2, #4]
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d008      	beq.n	8002e70 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	3301      	adds	r3, #1
 8002e74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e76:	f3bf 8f5f 	dmb	sy
}
 8002e7a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f47f af2b 	bne.w	8002cf4 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	e005      	b.n	8002ebe <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ece:	6979      	ldr	r1, [r7, #20]
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ede:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee0:	b672      	cpsid	i
}
 8002ee2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	4413      	add	r3, r2
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002ef2:	b662      	cpsie	i
}
 8002ef4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3734      	adds	r7, #52	; 0x34
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	ffff8000 	.word	0xffff8000

08002f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	; 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f16:	4b89      	ldr	r3, [pc, #548]	; (800313c <HAL_GPIO_Init+0x234>)
 8002f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f1a:	e194      	b.n	8003246 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	2101      	movs	r1, #1
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa01 f303 	lsl.w	r3, r1, r3
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8186 	beq.w	8003240 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d005      	beq.n	8002f4c <HAL_GPIO_Init+0x44>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d130      	bne.n	8002fae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	2203      	movs	r2, #3
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f82:	2201      	movs	r2, #1
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	f003 0201 	and.w	r2, r3, #1
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d017      	beq.n	8002fea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d123      	bne.n	800303e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	08da      	lsrs	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3208      	adds	r2, #8
 8002ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	220f      	movs	r2, #15
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	08da      	lsrs	r2, r3, #3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3208      	adds	r2, #8
 8003038:	69b9      	ldr	r1, [r7, #24]
 800303a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	2203      	movs	r2, #3
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 0203 	and.w	r2, r3, #3
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80e0 	beq.w	8003240 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003080:	4b2f      	ldr	r3, [pc, #188]	; (8003140 <HAL_GPIO_Init+0x238>)
 8003082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003086:	4a2e      	ldr	r2, [pc, #184]	; (8003140 <HAL_GPIO_Init+0x238>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003090:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <HAL_GPIO_Init+0x238>)
 8003092:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800309e:	4a29      	ldr	r2, [pc, #164]	; (8003144 <HAL_GPIO_Init+0x23c>)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	220f      	movs	r2, #15
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a20      	ldr	r2, [pc, #128]	; (8003148 <HAL_GPIO_Init+0x240>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d052      	beq.n	8003170 <HAL_GPIO_Init+0x268>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a1f      	ldr	r2, [pc, #124]	; (800314c <HAL_GPIO_Init+0x244>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d031      	beq.n	8003136 <HAL_GPIO_Init+0x22e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a1e      	ldr	r2, [pc, #120]	; (8003150 <HAL_GPIO_Init+0x248>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02b      	beq.n	8003132 <HAL_GPIO_Init+0x22a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a1d      	ldr	r2, [pc, #116]	; (8003154 <HAL_GPIO_Init+0x24c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d025      	beq.n	800312e <HAL_GPIO_Init+0x226>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a1c      	ldr	r2, [pc, #112]	; (8003158 <HAL_GPIO_Init+0x250>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01f      	beq.n	800312a <HAL_GPIO_Init+0x222>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a1b      	ldr	r2, [pc, #108]	; (800315c <HAL_GPIO_Init+0x254>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d019      	beq.n	8003126 <HAL_GPIO_Init+0x21e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a1a      	ldr	r2, [pc, #104]	; (8003160 <HAL_GPIO_Init+0x258>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <HAL_GPIO_Init+0x21a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a19      	ldr	r2, [pc, #100]	; (8003164 <HAL_GPIO_Init+0x25c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00d      	beq.n	800311e <HAL_GPIO_Init+0x216>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a18      	ldr	r2, [pc, #96]	; (8003168 <HAL_GPIO_Init+0x260>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <HAL_GPIO_Init+0x212>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a17      	ldr	r2, [pc, #92]	; (800316c <HAL_GPIO_Init+0x264>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_GPIO_Init+0x20e>
 8003112:	2309      	movs	r3, #9
 8003114:	e02d      	b.n	8003172 <HAL_GPIO_Init+0x26a>
 8003116:	230a      	movs	r3, #10
 8003118:	e02b      	b.n	8003172 <HAL_GPIO_Init+0x26a>
 800311a:	2308      	movs	r3, #8
 800311c:	e029      	b.n	8003172 <HAL_GPIO_Init+0x26a>
 800311e:	2307      	movs	r3, #7
 8003120:	e027      	b.n	8003172 <HAL_GPIO_Init+0x26a>
 8003122:	2306      	movs	r3, #6
 8003124:	e025      	b.n	8003172 <HAL_GPIO_Init+0x26a>
 8003126:	2305      	movs	r3, #5
 8003128:	e023      	b.n	8003172 <HAL_GPIO_Init+0x26a>
 800312a:	2304      	movs	r3, #4
 800312c:	e021      	b.n	8003172 <HAL_GPIO_Init+0x26a>
 800312e:	2303      	movs	r3, #3
 8003130:	e01f      	b.n	8003172 <HAL_GPIO_Init+0x26a>
 8003132:	2302      	movs	r3, #2
 8003134:	e01d      	b.n	8003172 <HAL_GPIO_Init+0x26a>
 8003136:	2301      	movs	r3, #1
 8003138:	e01b      	b.n	8003172 <HAL_GPIO_Init+0x26a>
 800313a:	bf00      	nop
 800313c:	58000080 	.word	0x58000080
 8003140:	58024400 	.word	0x58024400
 8003144:	58000400 	.word	0x58000400
 8003148:	58020000 	.word	0x58020000
 800314c:	58020400 	.word	0x58020400
 8003150:	58020800 	.word	0x58020800
 8003154:	58020c00 	.word	0x58020c00
 8003158:	58021000 	.word	0x58021000
 800315c:	58021400 	.word	0x58021400
 8003160:	58021800 	.word	0x58021800
 8003164:	58021c00 	.word	0x58021c00
 8003168:	58022000 	.word	0x58022000
 800316c:	58022400 	.word	0x58022400
 8003170:	2300      	movs	r3, #0
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	f002 0203 	and.w	r2, r2, #3
 8003178:	0092      	lsls	r2, r2, #2
 800317a:	4093      	lsls	r3, r2
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003182:	4938      	ldr	r1, [pc, #224]	; (8003264 <HAL_GPIO_Init+0x35c>)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80031e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	3301      	adds	r3, #1
 8003244:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	f47f ae63 	bne.w	8002f1c <HAL_GPIO_Init+0x14>
  }
}
 8003256:	bf00      	nop
 8003258:	bf00      	nop
 800325a:	3724      	adds	r7, #36	; 0x24
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	58000400 	.word	0x58000400

08003268 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003270:	4a08      	ldr	r2, [pc, #32]	; (8003294 <HAL_HSEM_FastTake+0x2c>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3320      	adds	r3, #32
 8003276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <HAL_HSEM_FastTake+0x30>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
}
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	58026400 	.word	0x58026400
 8003298:	80000300 	.word	0x80000300

0800329c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80032a6:	4906      	ldr	r1, [pc, #24]	; (80032c0 <HAL_HSEM_Release+0x24>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	58026400 	.word	0x58026400

080032c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80032cc:	4b29      	ldr	r3, [pc, #164]	; (8003374 <HAL_PWREx_ConfigSupply+0xb0>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	2b06      	cmp	r3, #6
 80032d6:	d00a      	beq.n	80032ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032d8:	4b26      	ldr	r3, [pc, #152]	; (8003374 <HAL_PWREx_ConfigSupply+0xb0>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d001      	beq.n	80032ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e040      	b.n	800336c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	e03e      	b.n	800336c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032ee:	4b21      	ldr	r3, [pc, #132]	; (8003374 <HAL_PWREx_ConfigSupply+0xb0>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80032f6:	491f      	ldr	r1, [pc, #124]	; (8003374 <HAL_PWREx_ConfigSupply+0xb0>)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80032fe:	f7fd fe8f 	bl	8001020 <HAL_GetTick>
 8003302:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003304:	e009      	b.n	800331a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003306:	f7fd fe8b 	bl	8001020 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003314:	d901      	bls.n	800331a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e028      	b.n	800336c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800331a:	4b16      	ldr	r3, [pc, #88]	; (8003374 <HAL_PWREx_ConfigSupply+0xb0>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003326:	d1ee      	bne.n	8003306 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b1e      	cmp	r3, #30
 800332c:	d008      	beq.n	8003340 <HAL_PWREx_ConfigSupply+0x7c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b2e      	cmp	r3, #46	; 0x2e
 8003332:	d005      	beq.n	8003340 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b1d      	cmp	r3, #29
 8003338:	d002      	beq.n	8003340 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b2d      	cmp	r3, #45	; 0x2d
 800333e:	d114      	bne.n	800336a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003340:	f7fd fe6e 	bl	8001020 <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003346:	e009      	b.n	800335c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003348:	f7fd fe6a 	bl	8001020 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003356:	d901      	bls.n	800335c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e007      	b.n	800336c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_PWREx_ConfigSupply+0xb0>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003368:	d1ee      	bne.n	8003348 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	58024800 	.word	0x58024800

08003378 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08c      	sub	sp, #48	; 0x30
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d102      	bne.n	800338c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f000 bc1d 	b.w	8003bc6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8087 	beq.w	80034a8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339a:	4b99      	ldr	r3, [pc, #612]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033a4:	4b96      	ldr	r3, [pc, #600]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d007      	beq.n	80033c0 <HAL_RCC_OscConfig+0x48>
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	2b18      	cmp	r3, #24
 80033b4:	d110      	bne.n	80033d8 <HAL_RCC_OscConfig+0x60>
 80033b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d10b      	bne.n	80033d8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	4b8f      	ldr	r3, [pc, #572]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d06c      	beq.n	80034a6 <HAL_RCC_OscConfig+0x12e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d168      	bne.n	80034a6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e3f6      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e0:	d106      	bne.n	80033f0 <HAL_RCC_OscConfig+0x78>
 80033e2:	4b87      	ldr	r3, [pc, #540]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a86      	ldr	r2, [pc, #536]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e02e      	b.n	800344e <HAL_RCC_OscConfig+0xd6>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10c      	bne.n	8003412 <HAL_RCC_OscConfig+0x9a>
 80033f8:	4b81      	ldr	r3, [pc, #516]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a80      	ldr	r2, [pc, #512]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 80033fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	4b7e      	ldr	r3, [pc, #504]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a7d      	ldr	r2, [pc, #500]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 800340a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	e01d      	b.n	800344e <HAL_RCC_OscConfig+0xd6>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800341a:	d10c      	bne.n	8003436 <HAL_RCC_OscConfig+0xbe>
 800341c:	4b78      	ldr	r3, [pc, #480]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a77      	ldr	r2, [pc, #476]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 8003422:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	4b75      	ldr	r3, [pc, #468]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a74      	ldr	r2, [pc, #464]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 800342e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	e00b      	b.n	800344e <HAL_RCC_OscConfig+0xd6>
 8003436:	4b72      	ldr	r3, [pc, #456]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a71      	ldr	r2, [pc, #452]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 800343c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b6f      	ldr	r3, [pc, #444]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6e      	ldr	r2, [pc, #440]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 8003448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d013      	beq.n	800347e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7fd fde3 	bl	8001020 <HAL_GetTick>
 800345a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800345e:	f7fd fddf 	bl	8001020 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b64      	cmp	r3, #100	; 0x64
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e3aa      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003470:	4b63      	ldr	r3, [pc, #396]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0xe6>
 800347c:	e014      	b.n	80034a8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fd fdcf 	bl	8001020 <HAL_GetTick>
 8003482:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003486:	f7fd fdcb 	bl	8001020 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b64      	cmp	r3, #100	; 0x64
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e396      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003498:	4b59      	ldr	r3, [pc, #356]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f0      	bne.n	8003486 <HAL_RCC_OscConfig+0x10e>
 80034a4:	e000      	b.n	80034a8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80cb 	beq.w	800364c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034b6:	4b52      	ldr	r3, [pc, #328]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034c0:	4b4f      	ldr	r3, [pc, #316]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_RCC_OscConfig+0x164>
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	2b18      	cmp	r3, #24
 80034d0:	d156      	bne.n	8003580 <HAL_RCC_OscConfig+0x208>
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d151      	bne.n	8003580 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034dc:	4b48      	ldr	r3, [pc, #288]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_OscConfig+0x17c>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e368      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034f4:	4b42      	ldr	r3, [pc, #264]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f023 0219 	bic.w	r2, r3, #25
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	493f      	ldr	r1, [pc, #252]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 8003502:	4313      	orrs	r3, r2
 8003504:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003506:	f7fd fd8b 	bl	8001020 <HAL_GetTick>
 800350a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350e:	f7fd fd87 	bl	8001020 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e352      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003520:	4b37      	ldr	r3, [pc, #220]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352c:	f7fd fd84 	bl	8001038 <HAL_GetREVID>
 8003530:	4603      	mov	r3, r0
 8003532:	f241 0203 	movw	r2, #4099	; 0x1003
 8003536:	4293      	cmp	r3, r2
 8003538:	d817      	bhi.n	800356a <HAL_RCC_OscConfig+0x1f2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b40      	cmp	r3, #64	; 0x40
 8003540:	d108      	bne.n	8003554 <HAL_RCC_OscConfig+0x1dc>
 8003542:	4b2f      	ldr	r3, [pc, #188]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800354a:	4a2d      	ldr	r2, [pc, #180]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 800354c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003550:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003552:	e07b      	b.n	800364c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003554:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	031b      	lsls	r3, r3, #12
 8003562:	4927      	ldr	r1, [pc, #156]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 8003564:	4313      	orrs	r3, r2
 8003566:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003568:	e070      	b.n	800364c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356a:	4b25      	ldr	r3, [pc, #148]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	061b      	lsls	r3, r3, #24
 8003578:	4921      	ldr	r1, [pc, #132]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800357e:	e065      	b.n	800364c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d048      	beq.n	800361a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003588:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f023 0219 	bic.w	r2, r3, #25
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	491a      	ldr	r1, [pc, #104]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359a:	f7fd fd41 	bl	8001020 <HAL_GetTick>
 800359e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a2:	f7fd fd3d 	bl	8001020 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e308      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c0:	f7fd fd3a 	bl	8001038 <HAL_GetREVID>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d81a      	bhi.n	8003604 <HAL_RCC_OscConfig+0x28c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b40      	cmp	r3, #64	; 0x40
 80035d4:	d108      	bne.n	80035e8 <HAL_RCC_OscConfig+0x270>
 80035d6:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80035de:	4a08      	ldr	r2, [pc, #32]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 80035e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e4:	6053      	str	r3, [r2, #4]
 80035e6:	e031      	b.n	800364c <HAL_RCC_OscConfig+0x2d4>
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	031b      	lsls	r3, r3, #12
 80035f6:	4902      	ldr	r1, [pc, #8]	; (8003600 <HAL_RCC_OscConfig+0x288>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	604b      	str	r3, [r1, #4]
 80035fc:	e026      	b.n	800364c <HAL_RCC_OscConfig+0x2d4>
 80035fe:	bf00      	nop
 8003600:	58024400 	.word	0x58024400
 8003604:	4b9a      	ldr	r3, [pc, #616]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	4997      	ldr	r1, [pc, #604]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]
 8003618:	e018      	b.n	800364c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361a:	4b95      	ldr	r3, [pc, #596]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a94      	ldr	r2, [pc, #592]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003626:	f7fd fcfb 	bl	8001020 <HAL_GetTick>
 800362a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800362e:	f7fd fcf7 	bl	8001020 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e2c2      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003640:	4b8b      	ldr	r3, [pc, #556]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f0      	bne.n	800362e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80a9 	beq.w	80037ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800365a:	4b85      	ldr	r3, [pc, #532]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003662:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003664:	4b82      	ldr	r3, [pc, #520]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d007      	beq.n	8003680 <HAL_RCC_OscConfig+0x308>
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b18      	cmp	r3, #24
 8003674:	d13a      	bne.n	80036ec <HAL_RCC_OscConfig+0x374>
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	2b01      	cmp	r3, #1
 800367e:	d135      	bne.n	80036ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003680:	4b7b      	ldr	r3, [pc, #492]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_OscConfig+0x320>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	2b80      	cmp	r3, #128	; 0x80
 8003692:	d001      	beq.n	8003698 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e296      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003698:	f7fd fcce 	bl	8001038 <HAL_GetREVID>
 800369c:	4603      	mov	r3, r0
 800369e:	f241 0203 	movw	r2, #4099	; 0x1003
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d817      	bhi.n	80036d6 <HAL_RCC_OscConfig+0x35e>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d108      	bne.n	80036c0 <HAL_RCC_OscConfig+0x348>
 80036ae:	4b70      	ldr	r3, [pc, #448]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80036b6:	4a6e      	ldr	r2, [pc, #440]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036bc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036be:	e075      	b.n	80037ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036c0:	4b6b      	ldr	r3, [pc, #428]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	069b      	lsls	r3, r3, #26
 80036ce:	4968      	ldr	r1, [pc, #416]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036d4:	e06a      	b.n	80037ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036d6:	4b66      	ldr	r3, [pc, #408]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	061b      	lsls	r3, r3, #24
 80036e4:	4962      	ldr	r1, [pc, #392]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036ea:	e05f      	b.n	80037ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d042      	beq.n	800377a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036f4:	4b5e      	ldr	r3, [pc, #376]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a5d      	ldr	r2, [pc, #372]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80036fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fd fc8e 	bl	8001020 <HAL_GetTick>
 8003704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003708:	f7fd fc8a 	bl	8001020 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e255      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800371a:	4b55      	ldr	r3, [pc, #340]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003726:	f7fd fc87 	bl	8001038 <HAL_GetREVID>
 800372a:	4603      	mov	r3, r0
 800372c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003730:	4293      	cmp	r3, r2
 8003732:	d817      	bhi.n	8003764 <HAL_RCC_OscConfig+0x3ec>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	2b20      	cmp	r3, #32
 800373a:	d108      	bne.n	800374e <HAL_RCC_OscConfig+0x3d6>
 800373c:	4b4c      	ldr	r3, [pc, #304]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003744:	4a4a      	ldr	r2, [pc, #296]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800374a:	6053      	str	r3, [r2, #4]
 800374c:	e02e      	b.n	80037ac <HAL_RCC_OscConfig+0x434>
 800374e:	4b48      	ldr	r3, [pc, #288]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	069b      	lsls	r3, r3, #26
 800375c:	4944      	ldr	r1, [pc, #272]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800375e:	4313      	orrs	r3, r2
 8003760:	604b      	str	r3, [r1, #4]
 8003762:	e023      	b.n	80037ac <HAL_RCC_OscConfig+0x434>
 8003764:	4b42      	ldr	r3, [pc, #264]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	493f      	ldr	r1, [pc, #252]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003774:	4313      	orrs	r3, r2
 8003776:	60cb      	str	r3, [r1, #12]
 8003778:	e018      	b.n	80037ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800377a:	4b3d      	ldr	r3, [pc, #244]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a3c      	ldr	r2, [pc, #240]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7fd fc4b 	bl	8001020 <HAL_GetTick>
 800378a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800378e:	f7fd fc47 	bl	8001020 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e212      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80037a0:	4b33      	ldr	r3, [pc, #204]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d036      	beq.n	8003826 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d019      	beq.n	80037f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c0:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80037c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c4:	4a2a      	ldr	r2, [pc, #168]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7fd fc28 	bl	8001020 <HAL_GetTick>
 80037d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d4:	f7fd fc24 	bl	8001020 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e1ef      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037e6:	4b22      	ldr	r3, [pc, #136]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80037e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x45c>
 80037f2:	e018      	b.n	8003826 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f4:	4b1e      	ldr	r3, [pc, #120]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80037f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f8:	4a1d      	ldr	r2, [pc, #116]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fd fc0e 	bl	8001020 <HAL_GetTick>
 8003804:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003808:	f7fd fc0a 	bl	8001020 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e1d5      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800381a:	4b15      	ldr	r3, [pc, #84]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800381c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d039      	beq.n	80038a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01c      	beq.n	8003874 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800383a:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a0c      	ldr	r2, [pc, #48]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003840:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003844:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003846:	f7fd fbeb 	bl	8001020 <HAL_GetTick>
 800384a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800384e:	f7fd fbe7 	bl	8001020 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e1b2      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_RCC_OscConfig+0x4f8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x4d6>
 800386c:	e01b      	b.n	80038a6 <HAL_RCC_OscConfig+0x52e>
 800386e:	bf00      	nop
 8003870:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003874:	4b9b      	ldr	r3, [pc, #620]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a9a      	ldr	r2, [pc, #616]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 800387a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800387e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003880:	f7fd fbce 	bl	8001020 <HAL_GetTick>
 8003884:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003888:	f7fd fbca 	bl	8001020 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e195      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800389a:	4b92      	ldr	r3, [pc, #584]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8081 	beq.w	80039b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038b4:	4b8c      	ldr	r3, [pc, #560]	; (8003ae8 <HAL_RCC_OscConfig+0x770>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a8b      	ldr	r2, [pc, #556]	; (8003ae8 <HAL_RCC_OscConfig+0x770>)
 80038ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038c0:	f7fd fbae 	bl	8001020 <HAL_GetTick>
 80038c4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038c8:	f7fd fbaa 	bl	8001020 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e175      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038da:	4b83      	ldr	r3, [pc, #524]	; (8003ae8 <HAL_RCC_OscConfig+0x770>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d106      	bne.n	80038fc <HAL_RCC_OscConfig+0x584>
 80038ee:	4b7d      	ldr	r3, [pc, #500]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	4a7c      	ldr	r2, [pc, #496]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6713      	str	r3, [r2, #112]	; 0x70
 80038fa:	e02d      	b.n	8003958 <HAL_RCC_OscConfig+0x5e0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10c      	bne.n	800391e <HAL_RCC_OscConfig+0x5a6>
 8003904:	4b77      	ldr	r3, [pc, #476]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4a76      	ldr	r2, [pc, #472]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	6713      	str	r3, [r2, #112]	; 0x70
 8003910:	4b74      	ldr	r3, [pc, #464]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	4a73      	ldr	r2, [pc, #460]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003916:	f023 0304 	bic.w	r3, r3, #4
 800391a:	6713      	str	r3, [r2, #112]	; 0x70
 800391c:	e01c      	b.n	8003958 <HAL_RCC_OscConfig+0x5e0>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b05      	cmp	r3, #5
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0x5c8>
 8003926:	4b6f      	ldr	r3, [pc, #444]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	4a6e      	ldr	r2, [pc, #440]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 800392c:	f043 0304 	orr.w	r3, r3, #4
 8003930:	6713      	str	r3, [r2, #112]	; 0x70
 8003932:	4b6c      	ldr	r3, [pc, #432]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	4a6b      	ldr	r2, [pc, #428]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	6713      	str	r3, [r2, #112]	; 0x70
 800393e:	e00b      	b.n	8003958 <HAL_RCC_OscConfig+0x5e0>
 8003940:	4b68      	ldr	r3, [pc, #416]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	4a67      	ldr	r2, [pc, #412]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	6713      	str	r3, [r2, #112]	; 0x70
 800394c:	4b65      	ldr	r3, [pc, #404]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	4a64      	ldr	r2, [pc, #400]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003952:	f023 0304 	bic.w	r3, r3, #4
 8003956:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d015      	beq.n	800398c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003960:	f7fd fb5e 	bl	8001020 <HAL_GetTick>
 8003964:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003966:	e00a      	b.n	800397e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003968:	f7fd fb5a 	bl	8001020 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	; 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e123      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800397e:	4b59      	ldr	r3, [pc, #356]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0ee      	beq.n	8003968 <HAL_RCC_OscConfig+0x5f0>
 800398a:	e014      	b.n	80039b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fd fb48 	bl	8001020 <HAL_GetTick>
 8003990:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003992:	e00a      	b.n	80039aa <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003994:	f7fd fb44 	bl	8001020 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e10d      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039aa:	4b4e      	ldr	r3, [pc, #312]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1ee      	bne.n	8003994 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 8102 	beq.w	8003bc4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80039c0:	4b48      	ldr	r3, [pc, #288]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039c8:	2b18      	cmp	r3, #24
 80039ca:	f000 80bd 	beq.w	8003b48 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	f040 809e 	bne.w	8003b14 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d8:	4b42      	ldr	r3, [pc, #264]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a41      	ldr	r2, [pc, #260]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 80039de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fd fb1c 	bl	8001020 <HAL_GetTick>
 80039e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ec:	f7fd fb18 	bl	8001020 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e0e3      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039fe:	4b39      	ldr	r3, [pc, #228]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a0a:	4b36      	ldr	r3, [pc, #216]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a0e:	4b37      	ldr	r3, [pc, #220]	; (8003aec <HAL_RCC_OscConfig+0x774>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a1a:	0112      	lsls	r2, r2, #4
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	4931      	ldr	r1, [pc, #196]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	628b      	str	r3, [r1, #40]	; 0x28
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a32:	3b01      	subs	r3, #1
 8003a34:	025b      	lsls	r3, r3, #9
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	061b      	lsls	r3, r3, #24
 8003a50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a54:	4923      	ldr	r1, [pc, #140]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003a5a:	4b22      	ldr	r3, [pc, #136]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	4a21      	ldr	r2, [pc, #132]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a66:	4b1f      	ldr	r3, [pc, #124]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a6a:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <HAL_RCC_OscConfig+0x778>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a72:	00d2      	lsls	r2, r2, #3
 8003a74:	491b      	ldr	r1, [pc, #108]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	f023 020c 	bic.w	r2, r3, #12
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	4917      	ldr	r1, [pc, #92]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a8c:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	f023 0202 	bic.w	r2, r3, #2
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a98:	4912      	ldr	r1, [pc, #72]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a9e:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	4a10      	ldr	r2, [pc, #64]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	4a0d      	ldr	r2, [pc, #52]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003ac2:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	4a07      	ldr	r2, [pc, #28]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ace:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a04      	ldr	r2, [pc, #16]	; (8003ae4 <HAL_RCC_OscConfig+0x76c>)
 8003ad4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ada:	f7fd faa1 	bl	8001020 <HAL_GetTick>
 8003ade:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ae0:	e011      	b.n	8003b06 <HAL_RCC_OscConfig+0x78e>
 8003ae2:	bf00      	nop
 8003ae4:	58024400 	.word	0x58024400
 8003ae8:	58024800 	.word	0x58024800
 8003aec:	fffffc0c 	.word	0xfffffc0c
 8003af0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af4:	f7fd fa94 	bl	8001020 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e05f      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b06:	4b32      	ldr	r3, [pc, #200]	; (8003bd0 <HAL_RCC_OscConfig+0x858>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x77c>
 8003b12:	e057      	b.n	8003bc4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b14:	4b2e      	ldr	r3, [pc, #184]	; (8003bd0 <HAL_RCC_OscConfig+0x858>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a2d      	ldr	r2, [pc, #180]	; (8003bd0 <HAL_RCC_OscConfig+0x858>)
 8003b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd fa7e 	bl	8001020 <HAL_GetTick>
 8003b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fd fa7a 	bl	8001020 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e045      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b3a:	4b25      	ldr	r3, [pc, #148]	; (8003bd0 <HAL_RCC_OscConfig+0x858>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x7b0>
 8003b46:	e03d      	b.n	8003bc4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b48:	4b21      	ldr	r3, [pc, #132]	; (8003bd0 <HAL_RCC_OscConfig+0x858>)
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_RCC_OscConfig+0x858>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d031      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f003 0203 	and.w	r2, r3, #3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d12a      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d122      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d11a      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	0a5b      	lsrs	r3, r3, #9
 8003b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d111      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d108      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	0e1b      	lsrs	r3, r3, #24
 8003bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3730      	adds	r7, #48	; 0x30
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	58024400 	.word	0x58024400

08003bd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e19c      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be8:	4b8a      	ldr	r3, [pc, #552]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d910      	bls.n	8003c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b87      	ldr	r3, [pc, #540]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 020f 	bic.w	r2, r3, #15
 8003bfe:	4985      	ldr	r1, [pc, #532]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	4b83      	ldr	r3, [pc, #524]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e184      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d010      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	4b7b      	ldr	r3, [pc, #492]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d908      	bls.n	8003c46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c34:	4b78      	ldr	r3, [pc, #480]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	4975      	ldr	r1, [pc, #468]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d010      	beq.n	8003c74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	4b70      	ldr	r3, [pc, #448]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d908      	bls.n	8003c74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c62:	4b6d      	ldr	r3, [pc, #436]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	496a      	ldr	r1, [pc, #424]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d010      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699a      	ldr	r2, [r3, #24]
 8003c84:	4b64      	ldr	r3, [pc, #400]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d908      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c90:	4b61      	ldr	r3, [pc, #388]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	495e      	ldr	r1, [pc, #376]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d010      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69da      	ldr	r2, [r3, #28]
 8003cb2:	4b59      	ldr	r3, [pc, #356]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d908      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003cbe:	4b56      	ldr	r3, [pc, #344]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	4953      	ldr	r1, [pc, #332]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d010      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	4b4d      	ldr	r3, [pc, #308]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d908      	bls.n	8003cfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cec:	4b4a      	ldr	r3, [pc, #296]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f023 020f 	bic.w	r2, r3, #15
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4947      	ldr	r1, [pc, #284]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d055      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d0a:	4b43      	ldr	r3, [pc, #268]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	4940      	ldr	r1, [pc, #256]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d107      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d24:	4b3c      	ldr	r3, [pc, #240]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d121      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0f6      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d107      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d3c:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d115      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0ea      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d54:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d109      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0de      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d64:	4b2c      	ldr	r3, [pc, #176]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0d6      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d74:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f023 0207 	bic.w	r2, r3, #7
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4925      	ldr	r1, [pc, #148]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7fd f94b 	bl	8001020 <HAL_GetTick>
 8003d8a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d8e:	f7fd f947 	bl	8001020 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e0be      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da4:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d1eb      	bne.n	8003d8e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d010      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d208      	bcs.n	8003de4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd2:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f023 020f 	bic.w	r2, r3, #15
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	490e      	ldr	r1, [pc, #56]	; (8003e18 <HAL_RCC_ClockConfig+0x244>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d214      	bcs.n	8003e1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 020f 	bic.w	r2, r3, #15
 8003dfa:	4906      	ldr	r1, [pc, #24]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e02:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <HAL_RCC_ClockConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e086      	b.n	8003f22 <HAL_RCC_ClockConfig+0x34e>
 8003e14:	52002000 	.word	0x52002000
 8003e18:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d010      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	4b3f      	ldr	r3, [pc, #252]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d208      	bcs.n	8003e4a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e38:	4b3c      	ldr	r3, [pc, #240]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	4939      	ldr	r1, [pc, #228]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d010      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695a      	ldr	r2, [r3, #20]
 8003e5a:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d208      	bcs.n	8003e78 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e66:	4b31      	ldr	r3, [pc, #196]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	492e      	ldr	r1, [pc, #184]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d010      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699a      	ldr	r2, [r3, #24]
 8003e88:	4b28      	ldr	r3, [pc, #160]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d208      	bcs.n	8003ea6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e94:	4b25      	ldr	r3, [pc, #148]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	4922      	ldr	r1, [pc, #136]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d010      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d208      	bcs.n	8003ed4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ec2:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	4917      	ldr	r1, [pc, #92]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ed4:	f000 f834 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	4912      	ldr	r1, [pc, #72]	; (8003f30 <HAL_RCC_ClockConfig+0x35c>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <HAL_RCC_ClockConfig+0x358>)
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	4a0d      	ldr	r2, [pc, #52]	; (8003f30 <HAL_RCC_ClockConfig+0x35c>)
 8003efc:	5cd3      	ldrb	r3, [r2, r3]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
 8003f08:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <HAL_RCC_ClockConfig+0x360>)
 8003f0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f0c:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <HAL_RCC_ClockConfig+0x364>)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003f12:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <HAL_RCC_ClockConfig+0x368>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc fd48 	bl	80009ac <HAL_InitTick>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	58024400 	.word	0x58024400
 8003f30:	08017484 	.word	0x08017484
 8003f34:	24000004 	.word	0x24000004
 8003f38:	24000000 	.word	0x24000000
 8003f3c:	24000008 	.word	0x24000008

08003f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b089      	sub	sp, #36	; 0x24
 8003f44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f46:	4bb3      	ldr	r3, [pc, #716]	; (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f4e:	2b18      	cmp	r3, #24
 8003f50:	f200 8155 	bhi.w	80041fe <HAL_RCC_GetSysClockFreq+0x2be>
 8003f54:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003fc1 	.word	0x08003fc1
 8003f60:	080041ff 	.word	0x080041ff
 8003f64:	080041ff 	.word	0x080041ff
 8003f68:	080041ff 	.word	0x080041ff
 8003f6c:	080041ff 	.word	0x080041ff
 8003f70:	080041ff 	.word	0x080041ff
 8003f74:	080041ff 	.word	0x080041ff
 8003f78:	080041ff 	.word	0x080041ff
 8003f7c:	08003fe7 	.word	0x08003fe7
 8003f80:	080041ff 	.word	0x080041ff
 8003f84:	080041ff 	.word	0x080041ff
 8003f88:	080041ff 	.word	0x080041ff
 8003f8c:	080041ff 	.word	0x080041ff
 8003f90:	080041ff 	.word	0x080041ff
 8003f94:	080041ff 	.word	0x080041ff
 8003f98:	080041ff 	.word	0x080041ff
 8003f9c:	08003fed 	.word	0x08003fed
 8003fa0:	080041ff 	.word	0x080041ff
 8003fa4:	080041ff 	.word	0x080041ff
 8003fa8:	080041ff 	.word	0x080041ff
 8003fac:	080041ff 	.word	0x080041ff
 8003fb0:	080041ff 	.word	0x080041ff
 8003fb4:	080041ff 	.word	0x080041ff
 8003fb8:	080041ff 	.word	0x080041ff
 8003fbc:	08003ff3 	.word	0x08003ff3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fc0:	4b94      	ldr	r3, [pc, #592]	; (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fcc:	4b91      	ldr	r3, [pc, #580]	; (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	08db      	lsrs	r3, r3, #3
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	4a90      	ldr	r2, [pc, #576]	; (8004218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003fde:	e111      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003fe0:	4b8d      	ldr	r3, [pc, #564]	; (8004218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fe2:	61bb      	str	r3, [r7, #24]
    break;
 8003fe4:	e10e      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003fe6:	4b8d      	ldr	r3, [pc, #564]	; (800421c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fe8:	61bb      	str	r3, [r7, #24]
    break;
 8003fea:	e10b      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003fec:	4b8c      	ldr	r3, [pc, #560]	; (8004220 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003fee:	61bb      	str	r3, [r7, #24]
    break;
 8003ff0:	e108      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ff2:	4b88      	ldr	r3, [pc, #544]	; (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003ffc:	4b85      	ldr	r3, [pc, #532]	; (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004006:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004008:	4b82      	ldr	r3, [pc, #520]	; (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004012:	4b80      	ldr	r3, [pc, #512]	; (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	08db      	lsrs	r3, r3, #3
 8004018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80e1 	beq.w	80041f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b02      	cmp	r3, #2
 800403a:	f000 8083 	beq.w	8004144 <HAL_RCC_GetSysClockFreq+0x204>
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b02      	cmp	r3, #2
 8004042:	f200 80a1 	bhi.w	8004188 <HAL_RCC_GetSysClockFreq+0x248>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0x114>
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d056      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004052:	e099      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004054:	4b6f      	ldr	r3, [pc, #444]	; (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d02d      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004060:	4b6c      	ldr	r3, [pc, #432]	; (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	08db      	lsrs	r3, r3, #3
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	4a6b      	ldr	r2, [pc, #428]	; (8004218 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
 8004070:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800408a:	4b62      	ldr	r3, [pc, #392]	; (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409a:	ed97 6a02 	vldr	s12, [r7, #8]
 800409e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80040ba:	e087      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004228 <HAL_RCC_GetSysClockFreq+0x2e8>
 80040ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ce:	4b51      	ldr	r3, [pc, #324]	; (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040de:	ed97 6a02 	vldr	s12, [r7, #8]
 80040e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040fe:	e065      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800422c <HAL_RCC_GetSysClockFreq+0x2ec>
 800410e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004112:	4b40      	ldr	r3, [pc, #256]	; (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004122:	ed97 6a02 	vldr	s12, [r7, #8]
 8004126:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004224 <HAL_RCC_GetSysClockFreq+0x2e4>
 800412a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800412e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004142:	e043      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004230 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004156:	4b2f      	ldr	r3, [pc, #188]	; (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004166:	ed97 6a02 	vldr	s12, [r7, #8]
 800416a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004224 <HAL_RCC_GetSysClockFreq+0x2e4>
 800416e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800417a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800417e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004186:	e021      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004192:	eddf 6a26 	vldr	s13, [pc, #152]	; 800422c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419a:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80041ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004224 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80041cc:	4b11      	ldr	r3, [pc, #68]	; (8004214 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	0a5b      	lsrs	r3, r3, #9
 80041d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041d6:	3301      	adds	r3, #1
 80041d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	ee07 3a90 	vmov	s15, r3
 80041e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80041e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f0:	ee17 3a90 	vmov	r3, s15
 80041f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80041f6:	e005      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61bb      	str	r3, [r7, #24]
    break;
 80041fc:	e002      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004200:	61bb      	str	r3, [r7, #24]
    break;
 8004202:	bf00      	nop
  }

  return sysclockfreq;
 8004204:	69bb      	ldr	r3, [r7, #24]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3724      	adds	r7, #36	; 0x24
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	58024400 	.word	0x58024400
 8004218:	03d09000 	.word	0x03d09000
 800421c:	003d0900 	.word	0x003d0900
 8004220:	017d7840 	.word	0x017d7840
 8004224:	46000000 	.word	0x46000000
 8004228:	4c742400 	.word	0x4c742400
 800422c:	4a742400 	.word	0x4a742400
 8004230:	4bbebc20 	.word	0x4bbebc20

08004234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800423a:	f7ff fe81 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 800423e:	4602      	mov	r2, r0
 8004240:	4b10      	ldr	r3, [pc, #64]	; (8004284 <HAL_RCC_GetHCLKFreq+0x50>)
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	0a1b      	lsrs	r3, r3, #8
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	490f      	ldr	r1, [pc, #60]	; (8004288 <HAL_RCC_GetHCLKFreq+0x54>)
 800424c:	5ccb      	ldrb	r3, [r1, r3]
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	fa22 f303 	lsr.w	r3, r2, r3
 8004256:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <HAL_RCC_GetHCLKFreq+0x50>)
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	4a09      	ldr	r2, [pc, #36]	; (8004288 <HAL_RCC_GetHCLKFreq+0x54>)
 8004262:	5cd3      	ldrb	r3, [r2, r3]
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	fa22 f303 	lsr.w	r3, r2, r3
 800426e:	4a07      	ldr	r2, [pc, #28]	; (800428c <HAL_RCC_GetHCLKFreq+0x58>)
 8004270:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004272:	4a07      	ldr	r2, [pc, #28]	; (8004290 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <HAL_RCC_GetHCLKFreq+0x58>)
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	58024400 	.word	0x58024400
 8004288:	08017484 	.word	0x08017484
 800428c:	24000004 	.word	0x24000004
 8004290:	24000000 	.word	0x24000000

08004294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004298:	f7ff ffcc 	bl	8004234 <HAL_RCC_GetHCLKFreq>
 800429c:	4602      	mov	r2, r0
 800429e:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	091b      	lsrs	r3, r3, #4
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	4904      	ldr	r1, [pc, #16]	; (80042bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80042aa:	5ccb      	ldrb	r3, [r1, r3]
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	58024400 	.word	0x58024400
 80042bc:	08017484 	.word	0x08017484

080042c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	223f      	movs	r2, #63	; 0x3f
 80042ce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042d0:	4b1a      	ldr	r3, [pc, #104]	; (800433c <HAL_RCC_GetClockConfig+0x7c>)
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f003 0207 	and.w	r2, r3, #7
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80042dc:	4b17      	ldr	r3, [pc, #92]	; (800433c <HAL_RCC_GetClockConfig+0x7c>)
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80042e8:	4b14      	ldr	r3, [pc, #80]	; (800433c <HAL_RCC_GetClockConfig+0x7c>)
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f003 020f 	and.w	r2, r3, #15
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80042f4:	4b11      	ldr	r3, [pc, #68]	; (800433c <HAL_RCC_GetClockConfig+0x7c>)
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004300:	4b0e      	ldr	r3, [pc, #56]	; (800433c <HAL_RCC_GetClockConfig+0x7c>)
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_RCC_GetClockConfig+0x7c>)
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004318:	4b08      	ldr	r3, [pc, #32]	; (800433c <HAL_RCC_GetClockConfig+0x7c>)
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <HAL_RCC_GetClockConfig+0x80>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 020f 	and.w	r2, r3, #15
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	601a      	str	r2, [r3, #0]
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	58024400 	.word	0x58024400
 8004340:	52002000 	.word	0x52002000

08004344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e049      	b.n	80043ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f841 	bl	80043f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f000 fa00 	bl	8004788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d001      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e054      	b.n	80044ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a26      	ldr	r2, [pc, #152]	; (80044d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d022      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x80>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d01d      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x80>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a22      	ldr	r2, [pc, #136]	; (80044dc <HAL_TIM_Base_Start_IT+0xd4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d018      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x80>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a21      	ldr	r2, [pc, #132]	; (80044e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d013      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x80>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1f      	ldr	r2, [pc, #124]	; (80044e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00e      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x80>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1e      	ldr	r2, [pc, #120]	; (80044e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d009      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x80>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1c      	ldr	r2, [pc, #112]	; (80044ec <HAL_TIM_Base_Start_IT+0xe4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x80>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d115      	bne.n	80044b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	4b19      	ldr	r3, [pc, #100]	; (80044f4 <HAL_TIM_Base_Start_IT+0xec>)
 8004490:	4013      	ands	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b06      	cmp	r3, #6
 8004498:	d015      	beq.n	80044c6 <HAL_TIM_Base_Start_IT+0xbe>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a0:	d011      	beq.n	80044c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0201 	orr.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b2:	e008      	b.n	80044c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e000      	b.n	80044c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40010000 	.word	0x40010000
 80044dc:	40000400 	.word	0x40000400
 80044e0:	40000800 	.word	0x40000800
 80044e4:	40000c00 	.word	0x40000c00
 80044e8:	40010400 	.word	0x40010400
 80044ec:	40001800 	.word	0x40001800
 80044f0:	40014000 	.word	0x40014000
 80044f4:	00010007 	.word	0x00010007

080044f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	d122      	bne.n	8004554 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b02      	cmp	r3, #2
 800451a:	d11b      	bne.n	8004554 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0202 	mvn.w	r2, #2
 8004524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f905 	bl	800474a <HAL_TIM_IC_CaptureCallback>
 8004540:	e005      	b.n	800454e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f8f7 	bl	8004736 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f908 	bl	800475e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d122      	bne.n	80045a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b04      	cmp	r3, #4
 800456e:	d11b      	bne.n	80045a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0204 	mvn.w	r2, #4
 8004578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2202      	movs	r2, #2
 800457e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f8db 	bl	800474a <HAL_TIM_IC_CaptureCallback>
 8004594:	e005      	b.n	80045a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f8cd 	bl	8004736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f8de 	bl	800475e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d122      	bne.n	80045fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d11b      	bne.n	80045fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0208 	mvn.w	r2, #8
 80045cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2204      	movs	r2, #4
 80045d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f8b1 	bl	800474a <HAL_TIM_IC_CaptureCallback>
 80045e8:	e005      	b.n	80045f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f8a3 	bl	8004736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f8b4 	bl	800475e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b10      	cmp	r3, #16
 8004608:	d122      	bne.n	8004650 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b10      	cmp	r3, #16
 8004616:	d11b      	bne.n	8004650 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0210 	mvn.w	r2, #16
 8004620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2208      	movs	r2, #8
 8004626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f887 	bl	800474a <HAL_TIM_IC_CaptureCallback>
 800463c:	e005      	b.n	800464a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f879 	bl	8004736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f88a 	bl	800475e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b01      	cmp	r3, #1
 800465c:	d10e      	bne.n	800467c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d107      	bne.n	800467c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0201 	mvn.w	r2, #1
 8004674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fc f950 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004686:	2b80      	cmp	r3, #128	; 0x80
 8004688:	d10e      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b80      	cmp	r3, #128	; 0x80
 8004696:	d107      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f914 	bl	80048d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b6:	d10e      	bne.n	80046d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c2:	2b80      	cmp	r3, #128	; 0x80
 80046c4:	d107      	bne.n	80046d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f907 	bl	80048e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b40      	cmp	r3, #64	; 0x40
 80046e2:	d10e      	bne.n	8004702 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d107      	bne.n	8004702 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f838 	bl	8004772 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b20      	cmp	r3, #32
 800470e:	d10e      	bne.n	800472e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b20      	cmp	r3, #32
 800471c:	d107      	bne.n	800472e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f06f 0220 	mvn.w	r2, #32
 8004726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f8c7 	bl	80048bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800472e:	bf00      	nop
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a40      	ldr	r2, [pc, #256]	; (800489c <TIM_Base_SetConfig+0x114>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <TIM_Base_SetConfig+0x40>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a6:	d00f      	beq.n	80047c8 <TIM_Base_SetConfig+0x40>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a3d      	ldr	r2, [pc, #244]	; (80048a0 <TIM_Base_SetConfig+0x118>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00b      	beq.n	80047c8 <TIM_Base_SetConfig+0x40>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a3c      	ldr	r2, [pc, #240]	; (80048a4 <TIM_Base_SetConfig+0x11c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d007      	beq.n	80047c8 <TIM_Base_SetConfig+0x40>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a3b      	ldr	r2, [pc, #236]	; (80048a8 <TIM_Base_SetConfig+0x120>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d003      	beq.n	80047c8 <TIM_Base_SetConfig+0x40>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a3a      	ldr	r2, [pc, #232]	; (80048ac <TIM_Base_SetConfig+0x124>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d108      	bne.n	80047da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a2f      	ldr	r2, [pc, #188]	; (800489c <TIM_Base_SetConfig+0x114>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d01f      	beq.n	8004822 <TIM_Base_SetConfig+0x9a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e8:	d01b      	beq.n	8004822 <TIM_Base_SetConfig+0x9a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a2c      	ldr	r2, [pc, #176]	; (80048a0 <TIM_Base_SetConfig+0x118>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d017      	beq.n	8004822 <TIM_Base_SetConfig+0x9a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a2b      	ldr	r2, [pc, #172]	; (80048a4 <TIM_Base_SetConfig+0x11c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <TIM_Base_SetConfig+0x9a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <TIM_Base_SetConfig+0x120>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00f      	beq.n	8004822 <TIM_Base_SetConfig+0x9a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a29      	ldr	r2, [pc, #164]	; (80048ac <TIM_Base_SetConfig+0x124>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00b      	beq.n	8004822 <TIM_Base_SetConfig+0x9a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a28      	ldr	r2, [pc, #160]	; (80048b0 <TIM_Base_SetConfig+0x128>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d007      	beq.n	8004822 <TIM_Base_SetConfig+0x9a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a27      	ldr	r2, [pc, #156]	; (80048b4 <TIM_Base_SetConfig+0x12c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d003      	beq.n	8004822 <TIM_Base_SetConfig+0x9a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a26      	ldr	r2, [pc, #152]	; (80048b8 <TIM_Base_SetConfig+0x130>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d108      	bne.n	8004834 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a10      	ldr	r2, [pc, #64]	; (800489c <TIM_Base_SetConfig+0x114>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00f      	beq.n	8004880 <TIM_Base_SetConfig+0xf8>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a12      	ldr	r2, [pc, #72]	; (80048ac <TIM_Base_SetConfig+0x124>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00b      	beq.n	8004880 <TIM_Base_SetConfig+0xf8>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a11      	ldr	r2, [pc, #68]	; (80048b0 <TIM_Base_SetConfig+0x128>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d007      	beq.n	8004880 <TIM_Base_SetConfig+0xf8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a10      	ldr	r2, [pc, #64]	; (80048b4 <TIM_Base_SetConfig+0x12c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_Base_SetConfig+0xf8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a0f      	ldr	r2, [pc, #60]	; (80048b8 <TIM_Base_SetConfig+0x130>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d103      	bne.n	8004888 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	615a      	str	r2, [r3, #20]
}
 800488e:	bf00      	nop
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40010000 	.word	0x40010000
 80048a0:	40000400 	.word	0x40000400
 80048a4:	40000800 	.word	0x40000800
 80048a8:	40000c00 	.word	0x40000c00
 80048ac:	40010400 	.word	0x40010400
 80048b0:	40014000 	.word	0x40014000
 80048b4:	40014400 	.word	0x40014400
 80048b8:	40014800 	.word	0x40014800

080048bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <udpClient_connect>:
5. Close socket descriptor and exit.
*/


void udpClient_connect(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 80048fe:	f00e fac7 	bl	8012e90 <udp_new>
 8004902:	4603      	mov	r3, r0
 8004904:	4a13      	ldr	r2, [pc, #76]	; (8004954 <udpClient_connect+0x5c>)
 8004906:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 192, 168, 1, 1);
 8004908:	4b13      	ldr	r3, [pc, #76]	; (8004958 <udpClient_connect+0x60>)
 800490a:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 8);
 800490c:	4b11      	ldr	r3, [pc, #68]	; (8004954 <udpClient_connect+0x5c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f107 0108 	add.w	r1, r7, #8
 8004914:	2208      	movs	r2, #8
 8004916:	4618      	mov	r0, r3
 8004918:	f00e f9a4 	bl	8012c64 <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 1, 100);
 800491c:	4b0f      	ldr	r3, [pc, #60]	; (800495c <udpClient_connect+0x64>)
 800491e:	607b      	str	r3, [r7, #4]
	err= udp_connect(upcb, &DestIPaddr, 7);
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <udpClient_connect+0x5c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	1d39      	adds	r1, r7, #4
 8004926:	2207      	movs	r2, #7
 8004928:	4618      	mov	r0, r3
 800492a:	f00e fa23 	bl	8012d74 <udp_connect>
 800492e:	4603      	mov	r3, r0
 8004930:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 8004932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d108      	bne.n	800494c <udpClient_connect+0x54>
	{
		/* 2. Send message to server */
		udpClient_send ();
 800493a:	f000 f813 	bl	8004964 <udpClient_send>

		/* 3. Set a receive callback for the upcb */
		udp_recv(upcb, udp_receive_callback, NULL);
 800493e:	4b05      	ldr	r3, [pc, #20]	; (8004954 <udpClient_connect+0x5c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2200      	movs	r2, #0
 8004944:	4906      	ldr	r1, [pc, #24]	; (8004960 <udpClient_connect+0x68>)
 8004946:	4618      	mov	r0, r3
 8004948:	f00e fa82 	bl	8012e50 <udp_recv>
	}
}
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	24000364 	.word	0x24000364
 8004958:	0101a8c0 	.word	0x0101a8c0
 800495c:	6401a8c0 	.word	0x6401a8c0
 8004960:	080049c9 	.word	0x080049c9

08004964 <udpClient_send>:

void udpClient_send(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b09c      	sub	sp, #112	; 0x70
 8004968:	af00      	add	r7, sp, #0
  struct pbuf *txBuf;
  char data[100];

  int len = sprintf(data, "Sending UDP client message %d.\r\n", counter);
 800496a:	4b14      	ldr	r3, [pc, #80]	; (80049bc <udpClient_send+0x58>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	1d3b      	adds	r3, r7, #4
 8004970:	4913      	ldr	r1, [pc, #76]	; (80049c0 <udpClient_send+0x5c>)
 8004972:	4618      	mov	r0, r3
 8004974:	f00e fb8e 	bl	8013094 <siprintf>
 8004978:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800497a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497c:	b29b      	uxth	r3, r3
 800497e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8004982:	4619      	mov	r1, r3
 8004984:	2036      	movs	r0, #54	; 0x36
 8004986:	f007 fa13 	bl	800bdb0 <pbuf_alloc>
 800498a:	66b8      	str	r0, [r7, #104]	; 0x68

  if (txBuf != NULL)
 800498c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00f      	beq.n	80049b2 <udpClient_send+0x4e>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 8004992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004994:	b29a      	uxth	r2, r3
 8004996:	1d3b      	adds	r3, r7, #4
 8004998:	4619      	mov	r1, r3
 800499a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800499c:	f007 ff64 	bl	800c868 <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 80049a0:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <udpClient_send+0x60>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049a6:	4618      	mov	r0, r3
 80049a8:	f00d ff72 	bl	8012890 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 80049ac:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80049ae:	f007 fce3 	bl	800c378 <pbuf_free>
  }
}
 80049b2:	bf00      	nop
 80049b4:	3770      	adds	r7, #112	; 0x70
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	240003cc 	.word	0x240003cc
 80049c0:	08014458 	.word	0x08014458
 80049c4:	24000364 	.word	0x24000364

080049c8 <udp_receive_callback>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	strncpy (buffer, (char *)p->payload, p->len);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	895b      	ldrh	r3, [r3, #10]
 80049de:	461a      	mov	r2, r3
 80049e0:	4807      	ldr	r0, [pc, #28]	; (8004a00 <udp_receive_callback+0x38>)
 80049e2:	f00e fb77 	bl	80130d4 <strncpy>

	/*increment message count */
	counter++;
 80049e6:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <udp_receive_callback+0x3c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3301      	adds	r3, #1
 80049ec:	4a05      	ldr	r2, [pc, #20]	; (8004a04 <udp_receive_callback+0x3c>)
 80049ee:	6013      	str	r3, [r2, #0]

	/* Free receive pbuf */
	pbuf_free(p);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f007 fcc1 	bl	800c378 <pbuf_free>
}
 80049f6:	bf00      	nop
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	24000368 	.word	0x24000368
 8004a04:	240003cc 	.word	0x240003cc

08004a08 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004a08:	b5b0      	push	{r4, r5, r7, lr}
 8004a0a:	b08c      	sub	sp, #48	; 0x30
 8004a0c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004a0e:	4b96      	ldr	r3, [pc, #600]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004a10:	22c0      	movs	r2, #192	; 0xc0
 8004a12:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004a14:	4b94      	ldr	r3, [pc, #592]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004a16:	22a8      	movs	r2, #168	; 0xa8
 8004a18:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004a1a:	4b93      	ldr	r3, [pc, #588]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 8004a20:	4b91      	ldr	r3, [pc, #580]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004a26:	4b91      	ldr	r3, [pc, #580]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004a28:	22ff      	movs	r2, #255	; 0xff
 8004a2a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004a2c:	4b8f      	ldr	r3, [pc, #572]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004a2e:	22ff      	movs	r2, #255	; 0xff
 8004a30:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004a32:	4b8e      	ldr	r3, [pc, #568]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004a34:	22ff      	movs	r2, #255	; 0xff
 8004a36:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004a38:	4b8c      	ldr	r3, [pc, #560]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004a3e:	4b8c      	ldr	r3, [pc, #560]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004a40:	22c0      	movs	r2, #192	; 0xc0
 8004a42:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004a44:	4b8a      	ldr	r3, [pc, #552]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004a46:	22a8      	movs	r2, #168	; 0xa8
 8004a48:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004a4a:	4b89      	ldr	r3, [pc, #548]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 8004a50:	4b87      	ldr	r3, [pc, #540]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004a52:	2264      	movs	r2, #100	; 0x64
 8004a54:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004a56:	2100      	movs	r1, #0
 8004a58:	2000      	movs	r0, #0
 8004a5a:	f00d fb6f 	bl	801213c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004a5e:	4b82      	ldr	r3, [pc, #520]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	061a      	lsls	r2, r3, #24
 8004a64:	4b80      	ldr	r3, [pc, #512]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	4b7e      	ldr	r3, [pc, #504]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004a6e:	789b      	ldrb	r3, [r3, #2]
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	4313      	orrs	r3, r2
 8004a74:	4a7c      	ldr	r2, [pc, #496]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004a76:	78d2      	ldrb	r2, [r2, #3]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	061a      	lsls	r2, r3, #24
 8004a7c:	4b7a      	ldr	r3, [pc, #488]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	0619      	lsls	r1, r3, #24
 8004a82:	4b79      	ldr	r3, [pc, #484]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	041b      	lsls	r3, r3, #16
 8004a88:	4319      	orrs	r1, r3
 8004a8a:	4b77      	ldr	r3, [pc, #476]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004a8c:	789b      	ldrb	r3, [r3, #2]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	430b      	orrs	r3, r1
 8004a92:	4975      	ldr	r1, [pc, #468]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004a94:	78c9      	ldrb	r1, [r1, #3]
 8004a96:	430b      	orrs	r3, r1
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	4b71      	ldr	r3, [pc, #452]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	0619      	lsls	r1, r3, #24
 8004aa6:	4b70      	ldr	r3, [pc, #448]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	041b      	lsls	r3, r3, #16
 8004aac:	4319      	orrs	r1, r3
 8004aae:	4b6e      	ldr	r3, [pc, #440]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004ab0:	789b      	ldrb	r3, [r3, #2]
 8004ab2:	021b      	lsls	r3, r3, #8
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	496c      	ldr	r1, [pc, #432]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004ab8:	78c9      	ldrb	r1, [r1, #3]
 8004aba:	430b      	orrs	r3, r1
 8004abc:	0a1b      	lsrs	r3, r3, #8
 8004abe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	4b68      	ldr	r3, [pc, #416]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	0619      	lsls	r1, r3, #24
 8004aca:	4b67      	ldr	r3, [pc, #412]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004acc:	785b      	ldrb	r3, [r3, #1]
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	4319      	orrs	r1, r3
 8004ad2:	4b65      	ldr	r3, [pc, #404]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004ad4:	789b      	ldrb	r3, [r3, #2]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	4963      	ldr	r1, [pc, #396]	; (8004c68 <MX_LWIP_Init+0x260>)
 8004adc:	78c9      	ldrb	r1, [r1, #3]
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	0e1b      	lsrs	r3, r3, #24
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	4a63      	ldr	r2, [pc, #396]	; (8004c74 <MX_LWIP_Init+0x26c>)
 8004ae6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004ae8:	4b60      	ldr	r3, [pc, #384]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	061a      	lsls	r2, r3, #24
 8004aee:	4b5f      	ldr	r3, [pc, #380]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004af0:	785b      	ldrb	r3, [r3, #1]
 8004af2:	041b      	lsls	r3, r3, #16
 8004af4:	431a      	orrs	r2, r3
 8004af6:	4b5d      	ldr	r3, [pc, #372]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004af8:	789b      	ldrb	r3, [r3, #2]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	4313      	orrs	r3, r2
 8004afe:	4a5b      	ldr	r2, [pc, #364]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004b00:	78d2      	ldrb	r2, [r2, #3]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	061a      	lsls	r2, r3, #24
 8004b06:	4b59      	ldr	r3, [pc, #356]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	0619      	lsls	r1, r3, #24
 8004b0c:	4b57      	ldr	r3, [pc, #348]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004b0e:	785b      	ldrb	r3, [r3, #1]
 8004b10:	041b      	lsls	r3, r3, #16
 8004b12:	4319      	orrs	r1, r3
 8004b14:	4b55      	ldr	r3, [pc, #340]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004b16:	789b      	ldrb	r3, [r3, #2]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	4953      	ldr	r1, [pc, #332]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004b1e:	78c9      	ldrb	r1, [r1, #3]
 8004b20:	430b      	orrs	r3, r1
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	4b50      	ldr	r3, [pc, #320]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	0619      	lsls	r1, r3, #24
 8004b30:	4b4e      	ldr	r3, [pc, #312]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004b32:	785b      	ldrb	r3, [r3, #1]
 8004b34:	041b      	lsls	r3, r3, #16
 8004b36:	4319      	orrs	r1, r3
 8004b38:	4b4c      	ldr	r3, [pc, #304]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004b3a:	789b      	ldrb	r3, [r3, #2]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	494a      	ldr	r1, [pc, #296]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004b42:	78c9      	ldrb	r1, [r1, #3]
 8004b44:	430b      	orrs	r3, r1
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	4b47      	ldr	r3, [pc, #284]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	0619      	lsls	r1, r3, #24
 8004b54:	4b45      	ldr	r3, [pc, #276]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	4319      	orrs	r1, r3
 8004b5c:	4b43      	ldr	r3, [pc, #268]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004b5e:	789b      	ldrb	r3, [r3, #2]
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	430b      	orrs	r3, r1
 8004b64:	4941      	ldr	r1, [pc, #260]	; (8004c6c <MX_LWIP_Init+0x264>)
 8004b66:	78c9      	ldrb	r1, [r1, #3]
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	0e1b      	lsrs	r3, r3, #24
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	4a42      	ldr	r2, [pc, #264]	; (8004c78 <MX_LWIP_Init+0x270>)
 8004b70:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004b72:	4b3f      	ldr	r3, [pc, #252]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	061a      	lsls	r2, r3, #24
 8004b78:	4b3d      	ldr	r3, [pc, #244]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	041b      	lsls	r3, r3, #16
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	4b3b      	ldr	r3, [pc, #236]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004b82:	789b      	ldrb	r3, [r3, #2]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	4313      	orrs	r3, r2
 8004b88:	4a39      	ldr	r2, [pc, #228]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004b8a:	78d2      	ldrb	r2, [r2, #3]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	061a      	lsls	r2, r3, #24
 8004b90:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	0619      	lsls	r1, r3, #24
 8004b96:	4b36      	ldr	r3, [pc, #216]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004b98:	785b      	ldrb	r3, [r3, #1]
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	4319      	orrs	r1, r3
 8004b9e:	4b34      	ldr	r3, [pc, #208]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004ba0:	789b      	ldrb	r3, [r3, #2]
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	4932      	ldr	r1, [pc, #200]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004ba8:	78c9      	ldrb	r1, [r1, #3]
 8004baa:	430b      	orrs	r3, r1
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	4b2e      	ldr	r3, [pc, #184]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	0619      	lsls	r1, r3, #24
 8004bba:	4b2d      	ldr	r3, [pc, #180]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004bbc:	785b      	ldrb	r3, [r3, #1]
 8004bbe:	041b      	lsls	r3, r3, #16
 8004bc0:	4319      	orrs	r1, r3
 8004bc2:	4b2b      	ldr	r3, [pc, #172]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004bc4:	789b      	ldrb	r3, [r3, #2]
 8004bc6:	021b      	lsls	r3, r3, #8
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	4929      	ldr	r1, [pc, #164]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004bcc:	78c9      	ldrb	r1, [r1, #3]
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	0a1b      	lsrs	r3, r3, #8
 8004bd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	4b25      	ldr	r3, [pc, #148]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	0619      	lsls	r1, r3, #24
 8004bde:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	4319      	orrs	r1, r3
 8004be6:	4b22      	ldr	r3, [pc, #136]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004be8:	789b      	ldrb	r3, [r3, #2]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	430b      	orrs	r3, r1
 8004bee:	4920      	ldr	r1, [pc, #128]	; (8004c70 <MX_LWIP_Init+0x268>)
 8004bf0:	78c9      	ldrb	r1, [r1, #3]
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	0e1b      	lsrs	r3, r3, #24
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	4a20      	ldr	r2, [pc, #128]	; (8004c7c <MX_LWIP_Init+0x274>)
 8004bfa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004bfc:	4b20      	ldr	r3, [pc, #128]	; (8004c80 <MX_LWIP_Init+0x278>)
 8004bfe:	9302      	str	r3, [sp, #8]
 8004c00:	4b20      	ldr	r3, [pc, #128]	; (8004c84 <MX_LWIP_Init+0x27c>)
 8004c02:	9301      	str	r3, [sp, #4]
 8004c04:	2300      	movs	r3, #0
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	4b1c      	ldr	r3, [pc, #112]	; (8004c7c <MX_LWIP_Init+0x274>)
 8004c0a:	4a1b      	ldr	r2, [pc, #108]	; (8004c78 <MX_LWIP_Init+0x270>)
 8004c0c:	4919      	ldr	r1, [pc, #100]	; (8004c74 <MX_LWIP_Init+0x26c>)
 8004c0e:	481e      	ldr	r0, [pc, #120]	; (8004c88 <MX_LWIP_Init+0x280>)
 8004c10:	f006 fd40 	bl	800b694 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004c14:	481c      	ldr	r0, [pc, #112]	; (8004c88 <MX_LWIP_Init+0x280>)
 8004c16:	f006 feef 	bl	800b9f8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <MX_LWIP_Init+0x280>)
 8004c1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c20:	089b      	lsrs	r3, r3, #2
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004c2c:	4816      	ldr	r0, [pc, #88]	; (8004c88 <MX_LWIP_Init+0x280>)
 8004c2e:	f006 fef3 	bl	800ba18 <netif_set_up>
 8004c32:	e002      	b.n	8004c3a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004c34:	4814      	ldr	r0, [pc, #80]	; (8004c88 <MX_LWIP_Init+0x280>)
 8004c36:	f006 ff5b 	bl	800baf0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004c3a:	4914      	ldr	r1, [pc, #80]	; (8004c8c <MX_LWIP_Init+0x284>)
 8004c3c:	4812      	ldr	r0, [pc, #72]	; (8004c88 <MX_LWIP_Init+0x280>)
 8004c3e:	f006 ffed 	bl	800bc1c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004c42:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <MX_LWIP_Init+0x288>)
 8004c44:	1d3c      	adds	r4, r7, #4
 8004c46:	461d      	mov	r5, r3
 8004c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004c54:	1d3b      	adds	r3, r7, #4
 8004c56:	490c      	ldr	r1, [pc, #48]	; (8004c88 <MX_LWIP_Init+0x280>)
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fd55 	bl	8005708 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004c5e:	bf00      	nop
 8004c60:	3720      	adds	r7, #32
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bdb0      	pop	{r4, r5, r7, pc}
 8004c66:	bf00      	nop
 8004c68:	24000410 	.word	0x24000410
 8004c6c:	24000414 	.word	0x24000414
 8004c70:	24000418 	.word	0x24000418
 8004c74:	24000404 	.word	0x24000404
 8004c78:	24000408 	.word	0x24000408
 8004c7c:	2400040c 	.word	0x2400040c
 8004c80:	08012079 	.word	0x08012079
 8004c84:	08005131 	.word	0x08005131
 8004c88:	240003d0 	.word	0x240003d0
 8004c8c:	08004c95 	.word	0x08004c95
 8004c90:	08014484 	.word	0x08014484

08004c94 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004cb0:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <HAL_ETH_RxCpltCallback+0x1c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fe71 	bl	800599c <osSemaphoreRelease>
}
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	24000424 	.word	0x24000424

08004cc8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004cd0:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <HAL_ETH_TxCpltCallback+0x1c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fe61 	bl	800599c <osSemaphoreRelease>
}
 8004cda:	bf00      	nop
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	24000428 	.word	0x24000428

08004ce8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fd fb87 	bl	8002404 <HAL_ETH_GetDMAError>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfc:	2b80      	cmp	r3, #128	; 0x80
 8004cfe:	d104      	bne.n	8004d0a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004d00:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <HAL_ETH_ErrorCallback+0x2c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fe49 	bl	800599c <osSemaphoreRelease>
  }
}
 8004d0a:	bf00      	nop
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	24000424 	.word	0x24000424

08004d18 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004d18:	b5b0      	push	{r4, r5, r7, lr}
 8004d1a:	b0a8      	sub	sp, #160	; 0xa0
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d36:	2264      	movs	r2, #100	; 0x64
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f00e f94c 	bl	8012fd8 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004d40:	4b84      	ldr	r3, [pc, #528]	; (8004f54 <low_level_init+0x23c>)
 8004d42:	4a85      	ldr	r2, [pc, #532]	; (8004f58 <low_level_init+0x240>)
 8004d44:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004d46:	2300      	movs	r3, #0
 8004d48:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8004d52:	23e1      	movs	r3, #225	; 0xe1
 8004d54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8004d6a:	4a7a      	ldr	r2, [pc, #488]	; (8004f54 <low_level_init+0x23c>)
 8004d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d70:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004d72:	4b78      	ldr	r3, [pc, #480]	; (8004f54 <low_level_init+0x23c>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004d78:	4b76      	ldr	r3, [pc, #472]	; (8004f54 <low_level_init+0x23c>)
 8004d7a:	4a78      	ldr	r2, [pc, #480]	; (8004f5c <low_level_init+0x244>)
 8004d7c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004d7e:	4b75      	ldr	r3, [pc, #468]	; (8004f54 <low_level_init+0x23c>)
 8004d80:	4a77      	ldr	r2, [pc, #476]	; (8004f60 <low_level_init+0x248>)
 8004d82:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004d84:	4b73      	ldr	r3, [pc, #460]	; (8004f54 <low_level_init+0x23c>)
 8004d86:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004d8a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004d8c:	4871      	ldr	r0, [pc, #452]	; (8004f54 <low_level_init+0x23c>)
 8004d8e:	f7fc fae3 	bl	8001358 <HAL_ETH_Init>
 8004d92:	4603      	mov	r3, r0
 8004d94:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004d98:	2238      	movs	r2, #56	; 0x38
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4871      	ldr	r0, [pc, #452]	; (8004f64 <low_level_init+0x24c>)
 8004d9e:	f00e f91b 	bl	8012fd8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004da2:	4b70      	ldr	r3, [pc, #448]	; (8004f64 <low_level_init+0x24c>)
 8004da4:	2221      	movs	r2, #33	; 0x21
 8004da6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004da8:	4b6e      	ldr	r3, [pc, #440]	; (8004f64 <low_level_init+0x24c>)
 8004daa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004dae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004db0:	4b6c      	ldr	r3, [pc, #432]	; (8004f64 <low_level_init+0x24c>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004db6:	486c      	ldr	r0, [pc, #432]	; (8004f68 <low_level_init+0x250>)
 8004db8:	f006 fb26 	bl	800b408 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2206      	movs	r2, #6
 8004dc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004dc4:	4b63      	ldr	r3, [pc, #396]	; (8004f54 <low_level_init+0x23c>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	781a      	ldrb	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004dd0:	4b60      	ldr	r3, [pc, #384]	; (8004f54 <low_level_init+0x23c>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	785a      	ldrb	r2, [r3, #1]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004ddc:	4b5d      	ldr	r3, [pc, #372]	; (8004f54 <low_level_init+0x23c>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	789a      	ldrb	r2, [r3, #2]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004de8:	4b5a      	ldr	r3, [pc, #360]	; (8004f54 <low_level_init+0x23c>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	78da      	ldrb	r2, [r3, #3]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004df4:	4b57      	ldr	r3, [pc, #348]	; (8004f54 <low_level_init+0x23c>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	791a      	ldrb	r2, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004e00:	4b54      	ldr	r3, [pc, #336]	; (8004f54 <low_level_init+0x23c>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	795a      	ldrb	r2, [r3, #5]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004e12:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e1a:	f043 030a 	orr.w	r3, r3, #10
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004e26:	2203      	movs	r2, #3
 8004e28:	2100      	movs	r1, #0
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	f001 fc94 	bl	8006758 <xQueueGenericCreate>
 8004e30:	4603      	mov	r3, r0
 8004e32:	4a4e      	ldr	r2, [pc, #312]	; (8004f6c <low_level_init+0x254>)
 8004e34:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004e36:	2203      	movs	r2, #3
 8004e38:	2100      	movs	r1, #0
 8004e3a:	2001      	movs	r0, #1
 8004e3c:	f001 fc8c 	bl	8006758 <xQueueGenericCreate>
 8004e40:	4603      	mov	r3, r0
 8004e42:	4a4b      	ldr	r2, [pc, #300]	; (8004f70 <low_level_init+0x258>)
 8004e44:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004e46:	4b4b      	ldr	r3, [pc, #300]	; (8004f74 <low_level_init+0x25c>)
 8004e48:	f107 0408 	add.w	r4, r7, #8
 8004e4c:	461d      	mov	r5, r3
 8004e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004e5a:	f107 0308 	add.w	r3, r7, #8
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fc51 	bl	8005708 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004e66:	4944      	ldr	r1, [pc, #272]	; (8004f78 <low_level_init+0x260>)
 8004e68:	4844      	ldr	r0, [pc, #272]	; (8004f7c <low_level_init+0x264>)
 8004e6a:	f7fb ff28 	bl	8000cbe <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004e6e:	4843      	ldr	r0, [pc, #268]	; (8004f7c <low_level_init+0x264>)
 8004e70:	f7fb ff57 	bl	8000d22 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004e74:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d164      	bne.n	8004f46 <low_level_init+0x22e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004e7c:	483f      	ldr	r0, [pc, #252]	; (8004f7c <low_level_init+0x264>)
 8004e7e:	f7fb fff8 	bl	8000e72 <LAN8742_GetLinkState>
 8004e82:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	dc06      	bgt.n	8004e9c <low_level_init+0x184>
    {
      netif_set_link_down(netif);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f006 fe94 	bl	800bbbc <netif_set_link_down>
      netif_set_down(netif);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f006 fe2b 	bl	800baf0 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004e9a:	e056      	b.n	8004f4a <low_level_init+0x232>
      switch (PHYLinkState)
 8004e9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ea0:	3b02      	subs	r3, #2
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d82a      	bhi.n	8004efc <low_level_init+0x1e4>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <low_level_init+0x194>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004ebd 	.word	0x08004ebd
 8004eb0:	08004ecf 	.word	0x08004ecf
 8004eb4:	08004edf 	.word	0x08004edf
 8004eb8:	08004eef 	.word	0x08004eef
        duplex = ETH_FULLDUPLEX_MODE;
 8004ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ec0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004ec4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004ecc:	e01f      	b.n	8004f0e <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004ed4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004edc:	e017      	b.n	8004f0e <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 8004ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004eec:	e00f      	b.n	8004f0e <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004efa:	e008      	b.n	8004f0e <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 8004efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004f04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004f0c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f12:	4619      	mov	r1, r3
 8004f14:	480f      	ldr	r0, [pc, #60]	; (8004f54 <low_level_init+0x23c>)
 8004f16:	f7fd f82f 	bl	8001f78 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004f1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f1e:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f24:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4809      	ldr	r0, [pc, #36]	; (8004f54 <low_level_init+0x23c>)
 8004f2e:	f7fd f9f7 	bl	8002320 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004f32:	4808      	ldr	r0, [pc, #32]	; (8004f54 <low_level_init+0x23c>)
 8004f34:	f7fc fb58 	bl	80015e8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f006 fd6d 	bl	800ba18 <netif_set_up>
    netif_set_link_up(netif);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f006 fe08 	bl	800bb54 <netif_set_link_up>
}
 8004f44:	e001      	b.n	8004f4a <low_level_init+0x232>
    Error_Handler();
 8004f46:	f7fb fd0d 	bl	8000964 <Error_Handler>
}
 8004f4a:	bf00      	nop
 8004f4c:	37a0      	adds	r7, #160	; 0xa0
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bdb0      	pop	{r4, r5, r7, pc}
 8004f52:	bf00      	nop
 8004f54:	2400042c 	.word	0x2400042c
 8004f58:	40028000 	.word	0x40028000
 8004f5c:	30040060 	.word	0x30040060
 8004f60:	30040000 	.word	0x30040000
 8004f64:	240004dc 	.word	0x240004dc
 8004f68:	08017494 	.word	0x08017494
 8004f6c:	24000424 	.word	0x24000424
 8004f70:	24000428 	.word	0x24000428
 8004f74:	080144a8 	.word	0x080144a8
 8004f78:	24000010 	.word	0x24000010
 8004f7c:	24000514 	.word	0x24000514

08004f80 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b092      	sub	sp, #72	; 0x48
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004f98:	f107 030c 	add.w	r3, r7, #12
 8004f9c:	2230      	movs	r2, #48	; 0x30
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f00e f819 	bl	8012fd8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004fa6:	f107 030c 	add.w	r3, r7, #12
 8004faa:	2230      	movs	r2, #48	; 0x30
 8004fac:	2100      	movs	r1, #0
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f00e f812 	bl	8012fd8 <memset>

  for(q = p; q != NULL; q = q->next)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8004fb8:	e045      	b.n	8005046 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fbc:	2b03      	cmp	r3, #3
 8004fbe:	d902      	bls.n	8004fc6 <low_level_output+0x46>
      return ERR_IF;
 8004fc0:	f06f 030b 	mvn.w	r3, #11
 8004fc4:	e065      	b.n	8005092 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fc8:	6859      	ldr	r1, [r3, #4]
 8004fca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fcc:	4613      	mov	r3, r2
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	3348      	adds	r3, #72	; 0x48
 8004fd6:	443b      	add	r3, r7
 8004fd8:	3b3c      	subs	r3, #60	; 0x3c
 8004fda:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fde:	895b      	ldrh	r3, [r3, #10]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	3348      	adds	r3, #72	; 0x48
 8004fee:	443b      	add	r3, r7
 8004ff0:	3b38      	subs	r3, #56	; 0x38
 8004ff2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d011      	beq.n	800501e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffc:	1e5a      	subs	r2, r3, #1
 8004ffe:	f107 000c 	add.w	r0, r7, #12
 8005002:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005004:	460b      	mov	r3, r1
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	440b      	add	r3, r1
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	18c1      	adds	r1, r0, r3
 800500e:	4613      	mov	r3, r2
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	3348      	adds	r3, #72	; 0x48
 8005018:	443b      	add	r3, r7
 800501a:	3b34      	subs	r3, #52	; 0x34
 800501c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800501e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005028:	4613      	mov	r3, r2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	3348      	adds	r3, #72	; 0x48
 8005032:	443b      	add	r3, r7
 8005034:	3b34      	subs	r3, #52	; 0x34
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
    }

    i++;
 800503a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800503c:	3301      	adds	r3, #1
 800503e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	643b      	str	r3, [r7, #64]	; 0x40
 8005046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1b6      	bne.n	8004fba <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	891b      	ldrh	r3, [r3, #8]
 8005050:	461a      	mov	r2, r3
 8005052:	4b12      	ldr	r3, [pc, #72]	; (800509c <low_level_output+0x11c>)
 8005054:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005056:	4a11      	ldr	r2, [pc, #68]	; (800509c <low_level_output+0x11c>)
 8005058:	f107 030c 	add.w	r3, r7, #12
 800505c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800505e:	4a0f      	ldr	r2, [pc, #60]	; (800509c <low_level_output+0x11c>)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005064:	6838      	ldr	r0, [r7, #0]
 8005066:	f007 fa2d 	bl	800c4c4 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800506a:	490c      	ldr	r1, [pc, #48]	; (800509c <low_level_output+0x11c>)
 800506c:	480c      	ldr	r0, [pc, #48]	; (80050a0 <low_level_output+0x120>)
 800506e:	f7fc fbbf 	bl	80017f0 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005072:	bf00      	nop
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <low_level_output+0x124>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f04f 31ff 	mov.w	r1, #4294967295
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fc3f 	bl	8005900 <osSemaphoreWait>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f5      	bne.n	8005074 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005088:	4805      	ldr	r0, [pc, #20]	; (80050a0 <low_level_output+0x120>)
 800508a:	f7fc fd30 	bl	8001aee <HAL_ETH_ReleaseTxPacket>

  return errval;
 800508e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005092:	4618      	mov	r0, r3
 8005094:	3748      	adds	r7, #72	; 0x48
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	240004dc 	.word	0x240004dc
 80050a0:	2400042c 	.word	0x2400042c
 80050a4:	24000428 	.word	0x24000428

080050a8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80050b4:	4b07      	ldr	r3, [pc, #28]	; (80050d4 <low_level_input+0x2c>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d105      	bne.n	80050c8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80050bc:	f107 030c 	add.w	r3, r7, #12
 80050c0:	4619      	mov	r1, r3
 80050c2:	4805      	ldr	r0, [pc, #20]	; (80050d8 <low_level_input+0x30>)
 80050c4:	f7fc fbe5 	bl	8001892 <HAL_ETH_ReadData>
  }

  return p;
 80050c8:	68fb      	ldr	r3, [r7, #12]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	24000420 	.word	0x24000420
 80050d8:	2400042c 	.word	0x2400042c

080050dc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80050ec:	4b0f      	ldr	r3, [pc, #60]	; (800512c <ethernetif_input+0x50>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f04f 31ff 	mov.w	r1, #4294967295
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fc03 	bl	8005900 <osSemaphoreWait>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1f5      	bne.n	80050ec <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005100:	68b8      	ldr	r0, [r7, #8]
 8005102:	f7ff ffd1 	bl	80050a8 <low_level_input>
 8005106:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	4798      	blx	r3
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f007 f92a 	bl	800c378 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1ea      	bne.n	8005100 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800512a:	e7df      	b.n	80050ec <ethernetif_input+0x10>
 800512c:	24000424 	.word	0x24000424

08005130 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <ethernetif_init+0x1c>
 800513e:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <ethernetif_init+0x48>)
 8005140:	f240 12f9 	movw	r2, #505	; 0x1f9
 8005144:	490d      	ldr	r1, [pc, #52]	; (800517c <ethernetif_init+0x4c>)
 8005146:	480e      	ldr	r0, [pc, #56]	; (8005180 <ethernetif_init+0x50>)
 8005148:	f00d ff4e 	bl	8012fe8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2273      	movs	r2, #115	; 0x73
 8005150:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2274      	movs	r2, #116	; 0x74
 8005158:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a09      	ldr	r2, [pc, #36]	; (8005184 <ethernetif_init+0x54>)
 8005160:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a08      	ldr	r2, [pc, #32]	; (8005188 <ethernetif_init+0x58>)
 8005166:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff fdd5 	bl	8004d18 <low_level_init>

  return ERR_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	080144c4 	.word	0x080144c4
 800517c:	080144e0 	.word	0x080144e0
 8005180:	080144f0 	.word	0x080144f0
 8005184:	08008d21 	.word	0x08008d21
 8005188:	08004f81 	.word	0x08004f81

0800518c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005198:	68f9      	ldr	r1, [r7, #12]
 800519a:	4809      	ldr	r0, [pc, #36]	; (80051c0 <pbuf_free_custom+0x34>)
 800519c:	f006 fa24 	bl	800b5e8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80051a0:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <pbuf_free_custom+0x38>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d107      	bne.n	80051b8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80051a8:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <pbuf_free_custom+0x38>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80051ae:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <pbuf_free_custom+0x3c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fbf2 	bl	800599c <osSemaphoreRelease>
  }
}
 80051b8:	bf00      	nop
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	08017494 	.word	0x08017494
 80051c4:	24000420 	.word	0x24000420
 80051c8:	24000424 	.word	0x24000424

080051cc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80051d0:	f7fb ff26 	bl	8001020 <HAL_GetTick>
 80051d4:	4603      	mov	r3, r0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08e      	sub	sp, #56	; 0x38
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	605a      	str	r2, [r3, #4]
 80051ee:	609a      	str	r2, [r3, #8]
 80051f0:	60da      	str	r2, [r3, #12]
 80051f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a5d      	ldr	r2, [pc, #372]	; (8005370 <HAL_ETH_MspInit+0x194>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	f040 80b3 	bne.w	8005366 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8005200:	4b5c      	ldr	r3, [pc, #368]	; (8005374 <HAL_ETH_MspInit+0x198>)
 8005202:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005206:	4a5b      	ldr	r2, [pc, #364]	; (8005374 <HAL_ETH_MspInit+0x198>)
 8005208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800520c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005210:	4b58      	ldr	r3, [pc, #352]	; (8005374 <HAL_ETH_MspInit+0x198>)
 8005212:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800521a:	623b      	str	r3, [r7, #32]
 800521c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800521e:	4b55      	ldr	r3, [pc, #340]	; (8005374 <HAL_ETH_MspInit+0x198>)
 8005220:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005224:	4a53      	ldr	r2, [pc, #332]	; (8005374 <HAL_ETH_MspInit+0x198>)
 8005226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800522e:	4b51      	ldr	r3, [pc, #324]	; (8005374 <HAL_ETH_MspInit+0x198>)
 8005230:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800523c:	4b4d      	ldr	r3, [pc, #308]	; (8005374 <HAL_ETH_MspInit+0x198>)
 800523e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005242:	4a4c      	ldr	r2, [pc, #304]	; (8005374 <HAL_ETH_MspInit+0x198>)
 8005244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005248:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800524c:	4b49      	ldr	r3, [pc, #292]	; (8005374 <HAL_ETH_MspInit+0x198>)
 800524e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005256:	61bb      	str	r3, [r7, #24]
 8005258:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800525a:	4b46      	ldr	r3, [pc, #280]	; (8005374 <HAL_ETH_MspInit+0x198>)
 800525c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005260:	4a44      	ldr	r2, [pc, #272]	; (8005374 <HAL_ETH_MspInit+0x198>)
 8005262:	f043 0304 	orr.w	r3, r3, #4
 8005266:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800526a:	4b42      	ldr	r3, [pc, #264]	; (8005374 <HAL_ETH_MspInit+0x198>)
 800526c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005278:	4b3e      	ldr	r3, [pc, #248]	; (8005374 <HAL_ETH_MspInit+0x198>)
 800527a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800527e:	4a3d      	ldr	r2, [pc, #244]	; (8005374 <HAL_ETH_MspInit+0x198>)
 8005280:	f043 0301 	orr.w	r3, r3, #1
 8005284:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005288:	4b3a      	ldr	r3, [pc, #232]	; (8005374 <HAL_ETH_MspInit+0x198>)
 800528a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005296:	4b37      	ldr	r3, [pc, #220]	; (8005374 <HAL_ETH_MspInit+0x198>)
 8005298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800529c:	4a35      	ldr	r2, [pc, #212]	; (8005374 <HAL_ETH_MspInit+0x198>)
 800529e:	f043 0302 	orr.w	r3, r3, #2
 80052a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052a6:	4b33      	ldr	r3, [pc, #204]	; (8005374 <HAL_ETH_MspInit+0x198>)
 80052a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80052b4:	4b2f      	ldr	r3, [pc, #188]	; (8005374 <HAL_ETH_MspInit+0x198>)
 80052b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052ba:	4a2e      	ldr	r2, [pc, #184]	; (8005374 <HAL_ETH_MspInit+0x198>)
 80052bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052c4:	4b2b      	ldr	r3, [pc, #172]	; (8005374 <HAL_ETH_MspInit+0x198>)
 80052c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ce:	60bb      	str	r3, [r7, #8]
 80052d0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80052d2:	2332      	movs	r3, #50	; 0x32
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d6:	2302      	movs	r3, #2
 80052d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052de:	2303      	movs	r3, #3
 80052e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80052e2:	230b      	movs	r3, #11
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052ea:	4619      	mov	r1, r3
 80052ec:	4822      	ldr	r0, [pc, #136]	; (8005378 <HAL_ETH_MspInit+0x19c>)
 80052ee:	f7fd fe0b 	bl	8002f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80052f2:	2386      	movs	r3, #134	; 0x86
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f6:	2302      	movs	r3, #2
 80052f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fe:	2303      	movs	r3, #3
 8005300:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005302:	230b      	movs	r3, #11
 8005304:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800530a:	4619      	mov	r1, r3
 800530c:	481b      	ldr	r0, [pc, #108]	; (800537c <HAL_ETH_MspInit+0x1a0>)
 800530e:	f7fd fdfb 	bl	8002f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005318:	2302      	movs	r3, #2
 800531a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531c:	2300      	movs	r3, #0
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005320:	2303      	movs	r3, #3
 8005322:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005324:	230b      	movs	r3, #11
 8005326:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800532c:	4619      	mov	r1, r3
 800532e:	4814      	ldr	r0, [pc, #80]	; (8005380 <HAL_ETH_MspInit+0x1a4>)
 8005330:	f7fd fdea 	bl	8002f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005334:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800533a:	2302      	movs	r3, #2
 800533c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533e:	2300      	movs	r3, #0
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005342:	2303      	movs	r3, #3
 8005344:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005346:	230b      	movs	r3, #11
 8005348:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800534a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800534e:	4619      	mov	r1, r3
 8005350:	480c      	ldr	r0, [pc, #48]	; (8005384 <HAL_ETH_MspInit+0x1a8>)
 8005352:	f7fd fdd9 	bl	8002f08 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005356:	2200      	movs	r2, #0
 8005358:	2105      	movs	r1, #5
 800535a:	203d      	movs	r0, #61	; 0x3d
 800535c:	f7fb ff44 	bl	80011e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005360:	203d      	movs	r0, #61	; 0x3d
 8005362:	f7fb ff5b 	bl	800121c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005366:	bf00      	nop
 8005368:	3738      	adds	r7, #56	; 0x38
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40028000 	.word	0x40028000
 8005374:	58024400 	.word	0x58024400
 8005378:	58020800 	.word	0x58020800
 800537c:	58020000 	.word	0x58020000
 8005380:	58020400 	.word	0x58020400
 8005384:	58021800 	.word	0x58021800

08005388 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800538c:	4802      	ldr	r0, [pc, #8]	; (8005398 <ETH_PHY_IO_Init+0x10>)
 800538e:	f7fc ffe1 	bl	8002354 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	2400042c 	.word	0x2400042c

0800539c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  return 0;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	68f9      	ldr	r1, [r7, #12]
 80053be:	4807      	ldr	r0, [pc, #28]	; (80053dc <ETH_PHY_IO_ReadReg+0x30>)
 80053c0:	f7fc fd32 	bl	8001e28 <HAL_ETH_ReadPHYRegister>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80053ca:	f04f 33ff 	mov.w	r3, #4294967295
 80053ce:	e000      	b.n	80053d2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	2400042c 	.word	0x2400042c

080053e0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	68f9      	ldr	r1, [r7, #12]
 80053f2:	4807      	ldr	r0, [pc, #28]	; (8005410 <ETH_PHY_IO_WriteReg+0x30>)
 80053f4:	f7fc fd6c 	bl	8001ed0 <HAL_ETH_WritePHYRegister>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80053fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005402:	e000      	b.n	8005406 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	2400042c 	.word	0x2400042c

08005414 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005418:	f7fb fe02 	bl	8001020 <HAL_GetTick>
 800541c:	4603      	mov	r3, r0
}
 800541e:	4618      	mov	r0, r3
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b0a0      	sub	sp, #128	; 0x80
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800542c:	f107 0308 	add.w	r3, r7, #8
 8005430:	2264      	movs	r2, #100	; 0x64
 8005432:	2100      	movs	r1, #0
 8005434:	4618      	mov	r0, r3
 8005436:	f00d fdcf 	bl	8012fd8 <memset>
  int32_t PHYLinkState = 0;
 800543a:	2300      	movs	r3, #0
 800543c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005442:	2300      	movs	r3, #0
 8005444:	67bb      	str	r3, [r7, #120]	; 0x78
 8005446:	2300      	movs	r3, #0
 8005448:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800544e:	483a      	ldr	r0, [pc, #232]	; (8005538 <ethernet_link_thread+0x114>)
 8005450:	f7fb fd0f 	bl	8000e72 <LAN8742_GetLinkState>
 8005454:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005458:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800545c:	089b      	lsrs	r3, r3, #2
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00c      	beq.n	8005482 <ethernet_link_thread+0x5e>
 8005468:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800546a:	2b01      	cmp	r3, #1
 800546c:	dc09      	bgt.n	8005482 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800546e:	4833      	ldr	r0, [pc, #204]	; (800553c <ethernet_link_thread+0x118>)
 8005470:	f7fc f946 	bl	8001700 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005474:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005476:	f006 fb3b 	bl	800baf0 <netif_set_down>
    netif_set_link_down(netif);
 800547a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800547c:	f006 fb9e 	bl	800bbbc <netif_set_link_down>
 8005480:	e055      	b.n	800552e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005484:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d14e      	bne.n	800552e <ethernet_link_thread+0x10a>
 8005490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005492:	2b01      	cmp	r3, #1
 8005494:	dd4b      	ble.n	800552e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005498:	3b02      	subs	r3, #2
 800549a:	2b03      	cmp	r3, #3
 800549c:	d82a      	bhi.n	80054f4 <ethernet_link_thread+0xd0>
 800549e:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <ethernet_link_thread+0x80>)
 80054a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a4:	080054b5 	.word	0x080054b5
 80054a8:	080054c7 	.word	0x080054c7
 80054ac:	080054d7 	.word	0x080054d7
 80054b0:	080054e7 	.word	0x080054e7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80054b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054b8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80054ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054be:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054c0:	2301      	movs	r3, #1
 80054c2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054c4:	e017      	b.n	80054f6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80054c6:	2300      	movs	r3, #0
 80054c8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80054ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054ce:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054d0:	2301      	movs	r3, #1
 80054d2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054d4:	e00f      	b.n	80054f6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80054d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054da:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80054dc:	2300      	movs	r3, #0
 80054de:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054e0:	2301      	movs	r3, #1
 80054e2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054e4:	e007      	b.n	80054f6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80054ea:	2300      	movs	r3, #0
 80054ec:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80054ee:	2301      	movs	r3, #1
 80054f0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80054f2:	e000      	b.n	80054f6 <ethernet_link_thread+0xd2>
    default:
      break;
 80054f4:	bf00      	nop
    }

    if(linkchanged)
 80054f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d018      	beq.n	800552e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80054fc:	f107 0308 	add.w	r3, r7, #8
 8005500:	4619      	mov	r1, r3
 8005502:	480e      	ldr	r0, [pc, #56]	; (800553c <ethernet_link_thread+0x118>)
 8005504:	f7fc fd38 	bl	8001f78 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800550a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800550c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800550e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005510:	f107 0308 	add.w	r3, r7, #8
 8005514:	4619      	mov	r1, r3
 8005516:	4809      	ldr	r0, [pc, #36]	; (800553c <ethernet_link_thread+0x118>)
 8005518:	f7fc ff02 	bl	8002320 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800551c:	4807      	ldr	r0, [pc, #28]	; (800553c <ethernet_link_thread+0x118>)
 800551e:	f7fc f801 	bl	8001524 <HAL_ETH_Start>
      netif_set_up(netif);
 8005522:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005524:	f006 fa78 	bl	800ba18 <netif_set_up>
      netif_set_link_up(netif);
 8005528:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800552a:	f006 fb13 	bl	800bb54 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800552e:	2064      	movs	r0, #100	; 0x64
 8005530:	f000 f936 	bl	80057a0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005534:	e78b      	b.n	800544e <ethernet_link_thread+0x2a>
 8005536:	bf00      	nop
 8005538:	24000514 	.word	0x24000514
 800553c:	2400042c 	.word	0x2400042c

08005540 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af02      	add	r7, sp, #8
 8005546:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005548:	4812      	ldr	r0, [pc, #72]	; (8005594 <HAL_ETH_RxAllocateCallback+0x54>)
 800554a:	f005 ffd9 	bl	800b500 <memp_malloc_pool>
 800554e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d014      	beq.n	8005580 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f103 0220 	add.w	r2, r3, #32
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4a0d      	ldr	r2, [pc, #52]	; (8005598 <HAL_ETH_RxAllocateCallback+0x58>)
 8005564:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800556e:	9201      	str	r2, [sp, #4]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2241      	movs	r2, #65	; 0x41
 8005576:	2100      	movs	r1, #0
 8005578:	2000      	movs	r0, #0
 800557a:	f006 fd43 	bl	800c004 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800557e:	e005      	b.n	800558c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005580:	4b06      	ldr	r3, [pc, #24]	; (800559c <HAL_ETH_RxAllocateCallback+0x5c>)
 8005582:	2201      	movs	r2, #1
 8005584:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
}
 800558c:	bf00      	nop
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	08017494 	.word	0x08017494
 8005598:	0800518d 	.word	0x0800518d
 800559c:	24000420 	.word	0x24000420

080055a0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b08d      	sub	sp, #52	; 0x34
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3b20      	subs	r3, #32
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80055c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c8:	2200      	movs	r2, #0
 80055ca:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80055cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ce:	887a      	ldrh	r2, [r7, #2]
 80055d0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d103      	bne.n	80055e2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	e003      	b.n	80055ea <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055e8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ee:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055f6:	e009      	b.n	800560c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	891a      	ldrh	r2, [r3, #8]
 80055fc:	887b      	ldrh	r3, [r7, #2]
 80055fe:	4413      	add	r3, r2
 8005600:	b29a      	uxth	r2, r3
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1f2      	bne.n	80055f8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005612:	887b      	ldrh	r3, [r7, #2]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	623a      	str	r2, [r7, #32]
 8005618:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	2b00      	cmp	r3, #0
 800561e:	dd1d      	ble.n	800565c <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	f003 021f 	and.w	r2, r3, #31
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005630:	f3bf 8f4f 	dsb	sy
}
 8005634:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005636:	4a0d      	ldr	r2, [pc, #52]	; (800566c <HAL_ETH_RxLinkCallback+0xcc>)
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	3320      	adds	r3, #32
 8005642:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	3b20      	subs	r3, #32
 8005648:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	dcf2      	bgt.n	8005636 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8005650:	f3bf 8f4f 	dsb	sy
}
 8005654:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005656:	f3bf 8f6f 	isb	sy
}
 800565a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800565c:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800565e:	bf00      	nop
 8005660:	3734      	adds	r7, #52	; 0x34
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	e000ed00 	.word	0xe000ed00

08005670 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f006 fe7d 	bl	800c378 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005686:	b480      	push	{r7}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	4603      	mov	r3, r0
 800568e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005690:	2300      	movs	r3, #0
 8005692:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005698:	2b84      	cmp	r3, #132	; 0x84
 800569a:	d005      	beq.n	80056a8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800569c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	3303      	adds	r3, #3
 80056a6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80056a8:	68fb      	ldr	r3, [r7, #12]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056bc:	f3ef 8305 	mrs	r3, IPSR
 80056c0:	607b      	str	r3, [r7, #4]
  return(result);
 80056c2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	bf14      	ite	ne
 80056c8:	2301      	movne	r3, #1
 80056ca:	2300      	moveq	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80056de:	f002 f863 	bl	80077a8 <vTaskStartScheduler>
  
  return osOK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80056ec:	f7ff ffe3 	bl	80056b6 <inHandlerMode>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80056f6:	f002 f971 	bl	80079dc <xTaskGetTickCountFromISR>
 80056fa:	4603      	mov	r3, r0
 80056fc:	e002      	b.n	8005704 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80056fe:	f002 f95d 	bl	80079bc <xTaskGetTickCount>
 8005702:	4603      	mov	r3, r0
  }
}
 8005704:	4618      	mov	r0, r3
 8005706:	bd80      	pop	{r7, pc}

08005708 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800570a:	b089      	sub	sp, #36	; 0x24
 800570c:	af04      	add	r7, sp, #16
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d020      	beq.n	800575c <osThreadCreate+0x54>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d01c      	beq.n	800575c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685c      	ldr	r4, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681d      	ldr	r5, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691e      	ldr	r6, [r3, #16]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff ffa6 	bl	8005686 <makeFreeRtosPriority>
 800573a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005744:	9202      	str	r2, [sp, #8]
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	9100      	str	r1, [sp, #0]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	4632      	mov	r2, r6
 800574e:	4629      	mov	r1, r5
 8005750:	4620      	mov	r0, r4
 8005752:	f001 fe61 	bl	8007418 <xTaskCreateStatic>
 8005756:	4603      	mov	r3, r0
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	e01c      	b.n	8005796 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685c      	ldr	r4, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005768:	b29e      	uxth	r6, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff ff88 	bl	8005686 <makeFreeRtosPriority>
 8005776:	4602      	mov	r2, r0
 8005778:	f107 030c 	add.w	r3, r7, #12
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	9200      	str	r2, [sp, #0]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	4632      	mov	r2, r6
 8005784:	4629      	mov	r1, r5
 8005786:	4620      	mov	r0, r4
 8005788:	f001 fea3 	bl	80074d2 <xTaskCreate>
 800578c:	4603      	mov	r3, r0
 800578e:	2b01      	cmp	r3, #1
 8005790:	d001      	beq.n	8005796 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005792:	2300      	movs	r3, #0
 8005794:	e000      	b.n	8005798 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005796:	68fb      	ldr	r3, [r7, #12]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <osDelay+0x16>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	e000      	b.n	80057b8 <osDelay+0x18>
 80057b6:	2301      	movs	r3, #1
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 ffc1 	bl	8007740 <vTaskDelay>
  
  return osOK;
 80057be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d007      	beq.n	80057e8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	4619      	mov	r1, r3
 80057de:	2001      	movs	r0, #1
 80057e0:	f001 f845 	bl	800686e <xQueueCreateMutexStatic>
 80057e4:	4603      	mov	r3, r0
 80057e6:	e003      	b.n	80057f0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80057e8:	2001      	movs	r0, #1
 80057ea:	f001 f828 	bl	800683e <xQueueCreateMutex>
 80057ee:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005802:	2300      	movs	r3, #0
 8005804:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <osMutexWait+0x18>
    return osErrorParameter;
 800580c:	2380      	movs	r3, #128	; 0x80
 800580e:	e03a      	b.n	8005886 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d103      	bne.n	8005824 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800581c:	f04f 33ff 	mov.w	r3, #4294967295
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	e009      	b.n	8005838 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d006      	beq.n	8005838 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <osMutexWait+0x40>
      ticks = 1;
 8005834:	2301      	movs	r3, #1
 8005836:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005838:	f7ff ff3d 	bl	80056b6 <inHandlerMode>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d017      	beq.n	8005872 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005842:	f107 0308 	add.w	r3, r7, #8
 8005846:	461a      	mov	r2, r3
 8005848:	2100      	movs	r1, #0
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f001 fc3c 	bl	80070c8 <xQueueReceiveFromISR>
 8005850:	4603      	mov	r3, r0
 8005852:	2b01      	cmp	r3, #1
 8005854:	d001      	beq.n	800585a <osMutexWait+0x62>
      return osErrorOS;
 8005856:	23ff      	movs	r3, #255	; 0xff
 8005858:	e015      	b.n	8005886 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d011      	beq.n	8005884 <osMutexWait+0x8c>
 8005860:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <osMutexWait+0x98>)
 8005862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	e008      	b.n	8005884 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005872:	68f9      	ldr	r1, [r7, #12]
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f001 fb1b 	bl	8006eb0 <xQueueSemaphoreTake>
 800587a:	4603      	mov	r3, r0
 800587c:	2b01      	cmp	r3, #1
 800587e:	d001      	beq.n	8005884 <osMutexWait+0x8c>
    return osErrorOS;
 8005880:	23ff      	movs	r3, #255	; 0xff
 8005882:	e000      	b.n	8005886 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	e000ed04 	.word	0xe000ed04

08005894 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80058a4:	f7ff ff07 	bl	80056b6 <inHandlerMode>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d016      	beq.n	80058dc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80058ae:	f107 0308 	add.w	r3, r7, #8
 80058b2:	4619      	mov	r1, r3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 f98e 	bl	8006bd6 <xQueueGiveFromISR>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d001      	beq.n	80058c4 <osMutexRelease+0x30>
      return osErrorOS;
 80058c0:	23ff      	movs	r3, #255	; 0xff
 80058c2:	e017      	b.n	80058f4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d013      	beq.n	80058f2 <osMutexRelease+0x5e>
 80058ca:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <osMutexRelease+0x68>)
 80058cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	e00a      	b.n	80058f2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80058dc:	2300      	movs	r3, #0
 80058de:	2200      	movs	r2, #0
 80058e0:	2100      	movs	r1, #0
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 ffde 	bl	80068a4 <xQueueGenericSend>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d001      	beq.n	80058f2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80058ee:	23ff      	movs	r3, #255	; 0xff
 80058f0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80058f2:	68fb      	ldr	r3, [r7, #12]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	e000ed04 	.word	0xe000ed04

08005900 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800590a:	2300      	movs	r3, #0
 800590c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005914:	2380      	movs	r3, #128	; 0x80
 8005916:	e03a      	b.n	800598e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005922:	d103      	bne.n	800592c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005924:	f04f 33ff 	mov.w	r3, #4294967295
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	e009      	b.n	8005940 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d006      	beq.n	8005940 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <osSemaphoreWait+0x40>
      ticks = 1;
 800593c:	2301      	movs	r3, #1
 800593e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005940:	f7ff feb9 	bl	80056b6 <inHandlerMode>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d017      	beq.n	800597a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800594a:	f107 0308 	add.w	r3, r7, #8
 800594e:	461a      	mov	r2, r3
 8005950:	2100      	movs	r1, #0
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f001 fbb8 	bl	80070c8 <xQueueReceiveFromISR>
 8005958:	4603      	mov	r3, r0
 800595a:	2b01      	cmp	r3, #1
 800595c:	d001      	beq.n	8005962 <osSemaphoreWait+0x62>
      return osErrorOS;
 800595e:	23ff      	movs	r3, #255	; 0xff
 8005960:	e015      	b.n	800598e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d011      	beq.n	800598c <osSemaphoreWait+0x8c>
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <osSemaphoreWait+0x98>)
 800596a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	e008      	b.n	800598c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800597a:	68f9      	ldr	r1, [r7, #12]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f001 fa97 	bl	8006eb0 <xQueueSemaphoreTake>
 8005982:	4603      	mov	r3, r0
 8005984:	2b01      	cmp	r3, #1
 8005986:	d001      	beq.n	800598c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005988:	23ff      	movs	r3, #255	; 0xff
 800598a:	e000      	b.n	800598e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	e000ed04 	.word	0xe000ed04

0800599c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80059a8:	2300      	movs	r3, #0
 80059aa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80059ac:	f7ff fe83 	bl	80056b6 <inHandlerMode>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d016      	beq.n	80059e4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80059b6:	f107 0308 	add.w	r3, r7, #8
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 f90a 	bl	8006bd6 <xQueueGiveFromISR>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d001      	beq.n	80059cc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80059c8:	23ff      	movs	r3, #255	; 0xff
 80059ca:	e017      	b.n	80059fc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d013      	beq.n	80059fa <osSemaphoreRelease+0x5e>
 80059d2:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <osSemaphoreRelease+0x68>)
 80059d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	e00a      	b.n	80059fa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80059e4:	2300      	movs	r3, #0
 80059e6:	2200      	movs	r2, #0
 80059e8:	2100      	movs	r1, #0
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 ff5a 	bl	80068a4 <xQueueGenericSend>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d001      	beq.n	80059fa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80059f6:	23ff      	movs	r3, #255	; 0xff
 80059f8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80059fa:	68fb      	ldr	r3, [r7, #12]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3710      	adds	r7, #16
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005a08:	b590      	push	{r4, r7, lr}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d011      	beq.n	8005a3e <osMessageCreate+0x36>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00d      	beq.n	8005a3e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6818      	ldr	r0, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6859      	ldr	r1, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2400      	movs	r4, #0
 8005a34:	9400      	str	r4, [sp, #0]
 8005a36:	f000 fe17 	bl	8006668 <xQueueGenericCreateStatic>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	e008      	b.n	8005a50 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	4619      	mov	r1, r3
 8005a4a:	f000 fe85 	bl	8006758 <xQueueGenericCreate>
 8005a4e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd90      	pop	{r4, r7, pc}

08005a58 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005a64:	2300      	movs	r3, #0
 8005a66:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <osMessagePut+0x1e>
    ticks = 1;
 8005a72:	2301      	movs	r3, #1
 8005a74:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005a76:	f7ff fe1e 	bl	80056b6 <inHandlerMode>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d018      	beq.n	8005ab2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005a80:	f107 0210 	add.w	r2, r7, #16
 8005a84:	f107 0108 	add.w	r1, r7, #8
 8005a88:	2300      	movs	r3, #0
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f001 f808 	bl	8006aa0 <xQueueGenericSendFromISR>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d001      	beq.n	8005a9a <osMessagePut+0x42>
      return osErrorOS;
 8005a96:	23ff      	movs	r3, #255	; 0xff
 8005a98:	e018      	b.n	8005acc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d014      	beq.n	8005aca <osMessagePut+0x72>
 8005aa0:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <osMessagePut+0x7c>)
 8005aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	e00b      	b.n	8005aca <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005ab2:	f107 0108 	add.w	r1, r7, #8
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 fef2 	bl	80068a4 <xQueueGenericSend>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d001      	beq.n	8005aca <osMessagePut+0x72>
      return osErrorOS;
 8005ac6:	23ff      	movs	r3, #255	; 0xff
 8005ac8:	e000      	b.n	8005acc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	e000ed04 	.word	0xe000ed04

08005ad8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005ad8:	b590      	push	{r4, r7, lr}
 8005ada:	b08b      	sub	sp, #44	; 0x2c
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	617b      	str	r3, [r7, #20]
    return event;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	461c      	mov	r4, r3
 8005afa:	f107 0314 	add.w	r3, r7, #20
 8005afe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b06:	e054      	b.n	8005bb2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b16:	d103      	bne.n	8005b20 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005b18:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b1e:	e009      	b.n	8005b34 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d006      	beq.n	8005b34 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <osMessageGet+0x5c>
      ticks = 1;
 8005b30:	2301      	movs	r3, #1
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005b34:	f7ff fdbf 	bl	80056b6 <inHandlerMode>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d01c      	beq.n	8005b78 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005b3e:	f107 0220 	add.w	r2, r7, #32
 8005b42:	f107 0314 	add.w	r3, r7, #20
 8005b46:	3304      	adds	r3, #4
 8005b48:	4619      	mov	r1, r3
 8005b4a:	68b8      	ldr	r0, [r7, #8]
 8005b4c:	f001 fabc 	bl	80070c8 <xQueueReceiveFromISR>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d102      	bne.n	8005b5c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005b56:	2310      	movs	r3, #16
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	e001      	b.n	8005b60 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01d      	beq.n	8005ba2 <osMessageGet+0xca>
 8005b66:	4b15      	ldr	r3, [pc, #84]	; (8005bbc <osMessageGet+0xe4>)
 8005b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	e014      	b.n	8005ba2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005b78:	f107 0314 	add.w	r3, r7, #20
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b80:	4619      	mov	r1, r3
 8005b82:	68b8      	ldr	r0, [r7, #8]
 8005b84:	f001 f8b4 	bl	8006cf0 <xQueueReceive>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d102      	bne.n	8005b94 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005b8e:	2310      	movs	r3, #16
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	e006      	b.n	8005ba2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <osMessageGet+0xc6>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e000      	b.n	8005ba0 <osMessageGet+0xc8>
 8005b9e:	2340      	movs	r3, #64	; 0x40
 8005ba0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	461c      	mov	r4, r3
 8005ba6:	f107 0314 	add.w	r3, r7, #20
 8005baa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005bae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	372c      	adds	r7, #44	; 0x2c
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd90      	pop	{r4, r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	e000ed04 	.word	0xe000ed04

08005bc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	; 0x28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005bcc:	f001 fe4c 	bl	8007868 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005bd0:	4b5b      	ldr	r3, [pc, #364]	; (8005d40 <pvPortMalloc+0x180>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005bd8:	f000 f920 	bl	8005e1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bdc:	4b59      	ldr	r3, [pc, #356]	; (8005d44 <pvPortMalloc+0x184>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f040 8093 	bne.w	8005d10 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01d      	beq.n	8005c2c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005bf0:	2208      	movs	r2, #8
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d014      	beq.n	8005c2c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f023 0307 	bic.w	r3, r3, #7
 8005c08:	3308      	adds	r3, #8
 8005c0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d06e      	beq.n	8005d10 <pvPortMalloc+0x150>
 8005c32:	4b45      	ldr	r3, [pc, #276]	; (8005d48 <pvPortMalloc+0x188>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d869      	bhi.n	8005d10 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c3c:	4b43      	ldr	r3, [pc, #268]	; (8005d4c <pvPortMalloc+0x18c>)
 8005c3e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c40:	4b42      	ldr	r3, [pc, #264]	; (8005d4c <pvPortMalloc+0x18c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c46:	e004      	b.n	8005c52 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d903      	bls.n	8005c64 <pvPortMalloc+0xa4>
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f1      	bne.n	8005c48 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c64:	4b36      	ldr	r3, [pc, #216]	; (8005d40 <pvPortMalloc+0x180>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d050      	beq.n	8005d10 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2208      	movs	r2, #8
 8005c74:	4413      	add	r3, r2
 8005c76:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	1ad2      	subs	r2, r2, r3
 8005c88:	2308      	movs	r3, #8
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d91f      	bls.n	8005cd0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4413      	add	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <pvPortMalloc+0xf8>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	613b      	str	r3, [r7, #16]
}
 8005cb4:	bf00      	nop
 8005cb6:	e7fe      	b.n	8005cb6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	1ad2      	subs	r2, r2, r3
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cca:	69b8      	ldr	r0, [r7, #24]
 8005ccc:	f000 f908 	bl	8005ee0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005cd0:	4b1d      	ldr	r3, [pc, #116]	; (8005d48 <pvPortMalloc+0x188>)
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <pvPortMalloc+0x188>)
 8005cdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cde:	4b1a      	ldr	r3, [pc, #104]	; (8005d48 <pvPortMalloc+0x188>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <pvPortMalloc+0x190>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d203      	bcs.n	8005cf2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cea:	4b17      	ldr	r3, [pc, #92]	; (8005d48 <pvPortMalloc+0x188>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a18      	ldr	r2, [pc, #96]	; (8005d50 <pvPortMalloc+0x190>)
 8005cf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	4b13      	ldr	r3, [pc, #76]	; (8005d44 <pvPortMalloc+0x184>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d06:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <pvPortMalloc+0x194>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	4a11      	ldr	r2, [pc, #68]	; (8005d54 <pvPortMalloc+0x194>)
 8005d0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d10:	f001 fdb8 	bl	8007884 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f003 0307 	and.w	r3, r3, #7
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <pvPortMalloc+0x174>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	60fb      	str	r3, [r7, #12]
}
 8005d30:	bf00      	nop
 8005d32:	e7fe      	b.n	8005d32 <pvPortMalloc+0x172>
	return pvReturn;
 8005d34:	69fb      	ldr	r3, [r7, #28]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3728      	adds	r7, #40	; 0x28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	2400413c 	.word	0x2400413c
 8005d44:	24004150 	.word	0x24004150
 8005d48:	24004140 	.word	0x24004140
 8005d4c:	24004134 	.word	0x24004134
 8005d50:	24004144 	.word	0x24004144
 8005d54:	24004148 	.word	0x24004148

08005d58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d04d      	beq.n	8005e06 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	425b      	negs	r3, r3
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4413      	add	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	4b24      	ldr	r3, [pc, #144]	; (8005e10 <vPortFree+0xb8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4013      	ands	r3, r2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10a      	bne.n	8005d9c <vPortFree+0x44>
	__asm volatile
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	60fb      	str	r3, [r7, #12]
}
 8005d98:	bf00      	nop
 8005d9a:	e7fe      	b.n	8005d9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <vPortFree+0x62>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	60bb      	str	r3, [r7, #8]
}
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	4b14      	ldr	r3, [pc, #80]	; (8005e10 <vPortFree+0xb8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01e      	beq.n	8005e06 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d11a      	bne.n	8005e06 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	4b0e      	ldr	r3, [pc, #56]	; (8005e10 <vPortFree+0xb8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	401a      	ands	r2, r3
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005de0:	f001 fd42 	bl	8007868 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <vPortFree+0xbc>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4413      	add	r3, r2
 8005dee:	4a09      	ldr	r2, [pc, #36]	; (8005e14 <vPortFree+0xbc>)
 8005df0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005df2:	6938      	ldr	r0, [r7, #16]
 8005df4:	f000 f874 	bl	8005ee0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005df8:	4b07      	ldr	r3, [pc, #28]	; (8005e18 <vPortFree+0xc0>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	4a06      	ldr	r2, [pc, #24]	; (8005e18 <vPortFree+0xc0>)
 8005e00:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e02:	f001 fd3f 	bl	8007884 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e06:	bf00      	nop
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	24004150 	.word	0x24004150
 8005e14:	24004140 	.word	0x24004140
 8005e18:	2400414c 	.word	0x2400414c

08005e1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e22:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e28:	4b27      	ldr	r3, [pc, #156]	; (8005ec8 <prvHeapInit+0xac>)
 8005e2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00c      	beq.n	8005e50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3307      	adds	r3, #7
 8005e3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0307 	bic.w	r3, r3, #7
 8005e42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	4a1f      	ldr	r2, [pc, #124]	; (8005ec8 <prvHeapInit+0xac>)
 8005e4c:	4413      	add	r3, r2
 8005e4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e54:	4a1d      	ldr	r2, [pc, #116]	; (8005ecc <prvHeapInit+0xb0>)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e5a:	4b1c      	ldr	r3, [pc, #112]	; (8005ecc <prvHeapInit+0xb0>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	4413      	add	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e68:	2208      	movs	r2, #8
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	1a9b      	subs	r3, r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0307 	bic.w	r3, r3, #7
 8005e76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4a15      	ldr	r2, [pc, #84]	; (8005ed0 <prvHeapInit+0xb4>)
 8005e7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e7e:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <prvHeapInit+0xb4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2200      	movs	r2, #0
 8005e84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e86:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <prvHeapInit+0xb4>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	1ad2      	subs	r2, r2, r3
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e9c:	4b0c      	ldr	r3, [pc, #48]	; (8005ed0 <prvHeapInit+0xb4>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	4a0a      	ldr	r2, [pc, #40]	; (8005ed4 <prvHeapInit+0xb8>)
 8005eaa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <prvHeapInit+0xbc>)
 8005eb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005eb4:	4b09      	ldr	r3, [pc, #36]	; (8005edc <prvHeapInit+0xc0>)
 8005eb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005eba:	601a      	str	r2, [r3, #0]
}
 8005ebc:	bf00      	nop
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	24000534 	.word	0x24000534
 8005ecc:	24004134 	.word	0x24004134
 8005ed0:	2400413c 	.word	0x2400413c
 8005ed4:	24004144 	.word	0x24004144
 8005ed8:	24004140 	.word	0x24004140
 8005edc:	24004150 	.word	0x24004150

08005ee0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ee8:	4b28      	ldr	r3, [pc, #160]	; (8005f8c <prvInsertBlockIntoFreeList+0xac>)
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	e002      	b.n	8005ef4 <prvInsertBlockIntoFreeList+0x14>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d8f7      	bhi.n	8005eee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	4413      	add	r3, r2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d108      	bne.n	8005f22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	441a      	add	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	441a      	add	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d118      	bne.n	8005f68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4b15      	ldr	r3, [pc, #84]	; (8005f90 <prvInsertBlockIntoFreeList+0xb0>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d00d      	beq.n	8005f5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	441a      	add	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	e008      	b.n	8005f70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f5e:	4b0c      	ldr	r3, [pc, #48]	; (8005f90 <prvInsertBlockIntoFreeList+0xb0>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e003      	b.n	8005f70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d002      	beq.n	8005f7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f7e:	bf00      	nop
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	24004134 	.word	0x24004134
 8005f90:	2400413c 	.word	0x2400413c

08005f94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f103 0208 	add.w	r2, r3, #8
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f103 0208 	add.w	r2, r3, #8
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f103 0208 	add.w	r2, r3, #8
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	601a      	str	r2, [r3, #0]
}
 800602a:	bf00      	nop
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604c:	d103      	bne.n	8006056 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	e00c      	b.n	8006070 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3308      	adds	r3, #8
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	e002      	b.n	8006064 <vListInsert+0x2e>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	429a      	cmp	r2, r3
 800606e:	d2f6      	bcs.n	800605e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	601a      	str	r2, [r3, #0]
}
 800609c:	bf00      	nop
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6892      	ldr	r2, [r2, #8]
 80060be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6852      	ldr	r2, [r2, #4]
 80060c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d103      	bne.n	80060dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	1e5a      	subs	r2, r3, #1
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3b04      	subs	r3, #4
 800610c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3b04      	subs	r3, #4
 800611a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f023 0201 	bic.w	r2, r3, #1
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3b04      	subs	r3, #4
 800612a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800612c:	4a0c      	ldr	r2, [pc, #48]	; (8006160 <pxPortInitialiseStack+0x64>)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3b14      	subs	r3, #20
 8006136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3b04      	subs	r3, #4
 8006142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f06f 0202 	mvn.w	r2, #2
 800614a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3b20      	subs	r3, #32
 8006150:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006152:	68fb      	ldr	r3, [r7, #12]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	08006165 	.word	0x08006165

08006164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800616a:	2300      	movs	r3, #0
 800616c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800616e:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <prvTaskExitError+0x54>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006176:	d00a      	beq.n	800618e <prvTaskExitError+0x2a>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	60fb      	str	r3, [r7, #12]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <prvTaskExitError+0x28>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	60bb      	str	r3, [r7, #8]
}
 80061a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061a2:	bf00      	nop
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0fc      	beq.n	80061a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061aa:	bf00      	nop
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	24000024 	.word	0x24000024
 80061bc:	00000000 	.word	0x00000000

080061c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061c0:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <pxCurrentTCBConst2>)
 80061c2:	6819      	ldr	r1, [r3, #0]
 80061c4:	6808      	ldr	r0, [r1, #0]
 80061c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ca:	f380 8809 	msr	PSP, r0
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f04f 0000 	mov.w	r0, #0
 80061d6:	f380 8811 	msr	BASEPRI, r0
 80061da:	4770      	bx	lr
 80061dc:	f3af 8000 	nop.w

080061e0 <pxCurrentTCBConst2>:
 80061e0:	2400415c 	.word	0x2400415c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop

080061e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061e8:	4808      	ldr	r0, [pc, #32]	; (800620c <prvPortStartFirstTask+0x24>)
 80061ea:	6800      	ldr	r0, [r0, #0]
 80061ec:	6800      	ldr	r0, [r0, #0]
 80061ee:	f380 8808 	msr	MSP, r0
 80061f2:	f04f 0000 	mov.w	r0, #0
 80061f6:	f380 8814 	msr	CONTROL, r0
 80061fa:	b662      	cpsie	i
 80061fc:	b661      	cpsie	f
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	df00      	svc	0
 8006208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800620a:	bf00      	nop
 800620c:	e000ed08 	.word	0xe000ed08

08006210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006216:	4b46      	ldr	r3, [pc, #280]	; (8006330 <xPortStartScheduler+0x120>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a46      	ldr	r2, [pc, #280]	; (8006334 <xPortStartScheduler+0x124>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d10a      	bne.n	8006236 <xPortStartScheduler+0x26>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	613b      	str	r3, [r7, #16]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006236:	4b3e      	ldr	r3, [pc, #248]	; (8006330 <xPortStartScheduler+0x120>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a3f      	ldr	r2, [pc, #252]	; (8006338 <xPortStartScheduler+0x128>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d10a      	bne.n	8006256 <xPortStartScheduler+0x46>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	60fb      	str	r3, [r7, #12]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006256:	4b39      	ldr	r3, [pc, #228]	; (800633c <xPortStartScheduler+0x12c>)
 8006258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	22ff      	movs	r2, #255	; 0xff
 8006266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006278:	b2da      	uxtb	r2, r3
 800627a:	4b31      	ldr	r3, [pc, #196]	; (8006340 <xPortStartScheduler+0x130>)
 800627c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800627e:	4b31      	ldr	r3, [pc, #196]	; (8006344 <xPortStartScheduler+0x134>)
 8006280:	2207      	movs	r2, #7
 8006282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006284:	e009      	b.n	800629a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006286:	4b2f      	ldr	r3, [pc, #188]	; (8006344 <xPortStartScheduler+0x134>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3b01      	subs	r3, #1
 800628c:	4a2d      	ldr	r2, [pc, #180]	; (8006344 <xPortStartScheduler+0x134>)
 800628e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	b2db      	uxtb	r3, r3
 8006298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800629a:	78fb      	ldrb	r3, [r7, #3]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a2:	2b80      	cmp	r3, #128	; 0x80
 80062a4:	d0ef      	beq.n	8006286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062a6:	4b27      	ldr	r3, [pc, #156]	; (8006344 <xPortStartScheduler+0x134>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1c3 0307 	rsb	r3, r3, #7
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d00a      	beq.n	80062c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	60bb      	str	r3, [r7, #8]
}
 80062c4:	bf00      	nop
 80062c6:	e7fe      	b.n	80062c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062c8:	4b1e      	ldr	r3, [pc, #120]	; (8006344 <xPortStartScheduler+0x134>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	4a1d      	ldr	r2, [pc, #116]	; (8006344 <xPortStartScheduler+0x134>)
 80062d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062d2:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <xPortStartScheduler+0x134>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062da:	4a1a      	ldr	r2, [pc, #104]	; (8006344 <xPortStartScheduler+0x134>)
 80062dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062e6:	4b18      	ldr	r3, [pc, #96]	; (8006348 <xPortStartScheduler+0x138>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a17      	ldr	r2, [pc, #92]	; (8006348 <xPortStartScheduler+0x138>)
 80062ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062f2:	4b15      	ldr	r3, [pc, #84]	; (8006348 <xPortStartScheduler+0x138>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a14      	ldr	r2, [pc, #80]	; (8006348 <xPortStartScheduler+0x138>)
 80062f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062fe:	f000 f8dd 	bl	80064bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006302:	4b12      	ldr	r3, [pc, #72]	; (800634c <xPortStartScheduler+0x13c>)
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006308:	f000 f8fc 	bl	8006504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800630c:	4b10      	ldr	r3, [pc, #64]	; (8006350 <xPortStartScheduler+0x140>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a0f      	ldr	r2, [pc, #60]	; (8006350 <xPortStartScheduler+0x140>)
 8006312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006318:	f7ff ff66 	bl	80061e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800631c:	f001 fc28 	bl	8007b70 <vTaskSwitchContext>
	prvTaskExitError();
 8006320:	f7ff ff20 	bl	8006164 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	e000ed00 	.word	0xe000ed00
 8006334:	410fc271 	.word	0x410fc271
 8006338:	410fc270 	.word	0x410fc270
 800633c:	e000e400 	.word	0xe000e400
 8006340:	24004154 	.word	0x24004154
 8006344:	24004158 	.word	0x24004158
 8006348:	e000ed20 	.word	0xe000ed20
 800634c:	24000024 	.word	0x24000024
 8006350:	e000ef34 	.word	0xe000ef34

08006354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	607b      	str	r3, [r7, #4]
}
 800636c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800636e:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <vPortEnterCritical+0x58>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3301      	adds	r3, #1
 8006374:	4a0d      	ldr	r2, [pc, #52]	; (80063ac <vPortEnterCritical+0x58>)
 8006376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006378:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <vPortEnterCritical+0x58>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d10f      	bne.n	80063a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <vPortEnterCritical+0x5c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	603b      	str	r3, [r7, #0]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <vPortEnterCritical+0x4a>
	}
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	24000024 	.word	0x24000024
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063ba:	4b12      	ldr	r3, [pc, #72]	; (8006404 <vPortExitCritical+0x50>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <vPortExitCritical+0x24>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	607b      	str	r3, [r7, #4]
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063d8:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <vPortExitCritical+0x50>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3b01      	subs	r3, #1
 80063de:	4a09      	ldr	r2, [pc, #36]	; (8006404 <vPortExitCritical+0x50>)
 80063e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063e2:	4b08      	ldr	r3, [pc, #32]	; (8006404 <vPortExitCritical+0x50>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d105      	bne.n	80063f6 <vPortExitCritical+0x42>
 80063ea:	2300      	movs	r3, #0
 80063ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	24000024 	.word	0x24000024
	...

08006410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006410:	f3ef 8009 	mrs	r0, PSP
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	4b15      	ldr	r3, [pc, #84]	; (8006470 <pxCurrentTCBConst>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f01e 0f10 	tst.w	lr, #16
 8006420:	bf08      	it	eq
 8006422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	6010      	str	r0, [r2, #0]
 800642c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006434:	f380 8811 	msr	BASEPRI, r0
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f001 fb96 	bl	8007b70 <vTaskSwitchContext>
 8006444:	f04f 0000 	mov.w	r0, #0
 8006448:	f380 8811 	msr	BASEPRI, r0
 800644c:	bc09      	pop	{r0, r3}
 800644e:	6819      	ldr	r1, [r3, #0]
 8006450:	6808      	ldr	r0, [r1, #0]
 8006452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006456:	f01e 0f10 	tst.w	lr, #16
 800645a:	bf08      	it	eq
 800645c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006460:	f380 8809 	msr	PSP, r0
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	f3af 8000 	nop.w

08006470 <pxCurrentTCBConst>:
 8006470:	2400415c 	.word	0x2400415c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop

08006478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	607b      	str	r3, [r7, #4]
}
 8006490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006492:	f001 fab5 	bl	8007a00 <xTaskIncrementTick>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800649c:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <SysTick_Handler+0x40>)
 800649e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	2300      	movs	r3, #0
 80064a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f383 8811 	msr	BASEPRI, r3
}
 80064ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064b0:	bf00      	nop
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	e000ed04 	.word	0xe000ed04

080064bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <vPortSetupTimerInterrupt+0x34>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064c6:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <vPortSetupTimerInterrupt+0x38>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <vPortSetupTimerInterrupt+0x3c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <vPortSetupTimerInterrupt+0x40>)
 80064d2:	fba2 2303 	umull	r2, r3, r2, r3
 80064d6:	099b      	lsrs	r3, r3, #6
 80064d8:	4a09      	ldr	r2, [pc, #36]	; (8006500 <vPortSetupTimerInterrupt+0x44>)
 80064da:	3b01      	subs	r3, #1
 80064dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064de:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <vPortSetupTimerInterrupt+0x34>)
 80064e0:	2207      	movs	r2, #7
 80064e2:	601a      	str	r2, [r3, #0]
}
 80064e4:	bf00      	nop
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	e000e010 	.word	0xe000e010
 80064f4:	e000e018 	.word	0xe000e018
 80064f8:	24000000 	.word	0x24000000
 80064fc:	10624dd3 	.word	0x10624dd3
 8006500:	e000e014 	.word	0xe000e014

08006504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006514 <vPortEnableVFP+0x10>
 8006508:	6801      	ldr	r1, [r0, #0]
 800650a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800650e:	6001      	str	r1, [r0, #0]
 8006510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006512:	bf00      	nop
 8006514:	e000ed88 	.word	0xe000ed88

08006518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800651e:	f3ef 8305 	mrs	r3, IPSR
 8006522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b0f      	cmp	r3, #15
 8006528:	d914      	bls.n	8006554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800652a:	4a17      	ldr	r2, [pc, #92]	; (8006588 <vPortValidateInterruptPriority+0x70>)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006534:	4b15      	ldr	r3, [pc, #84]	; (800658c <vPortValidateInterruptPriority+0x74>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	7afa      	ldrb	r2, [r7, #11]
 800653a:	429a      	cmp	r2, r3
 800653c:	d20a      	bcs.n	8006554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	607b      	str	r3, [r7, #4]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006554:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <vPortValidateInterruptPriority+0x78>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800655c:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <vPortValidateInterruptPriority+0x7c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d90a      	bls.n	800657a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	603b      	str	r3, [r7, #0]
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <vPortValidateInterruptPriority+0x60>
	}
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	e000e3f0 	.word	0xe000e3f0
 800658c:	24004154 	.word	0x24004154
 8006590:	e000ed0c 	.word	0xe000ed0c
 8006594:	24004158 	.word	0x24004158

08006598 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <xQueueGenericReset+0x2a>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	60bb      	str	r3, [r7, #8]
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80065c2:	f7ff fec7 	bl	8006354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ce:	68f9      	ldr	r1, [r7, #12]
 80065d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065d2:	fb01 f303 	mul.w	r3, r1, r3
 80065d6:	441a      	add	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f2:	3b01      	subs	r3, #1
 80065f4:	68f9      	ldr	r1, [r7, #12]
 80065f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065f8:	fb01 f303 	mul.w	r3, r1, r3
 80065fc:	441a      	add	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	22ff      	movs	r2, #255	; 0xff
 8006606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	22ff      	movs	r2, #255	; 0xff
 800660e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d114      	bne.n	8006642 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01a      	beq.n	8006656 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3310      	adds	r3, #16
 8006624:	4618      	mov	r0, r3
 8006626:	f001 fb23 	bl	8007c70 <xTaskRemoveFromEventList>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d012      	beq.n	8006656 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006630:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <xQueueGenericReset+0xcc>)
 8006632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	e009      	b.n	8006656 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3310      	adds	r3, #16
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff fca4 	bl	8005f94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3324      	adds	r3, #36	; 0x24
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff fc9f 	bl	8005f94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006656:	f7ff fead 	bl	80063b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800665a:	2301      	movs	r3, #1
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	e000ed04 	.word	0xe000ed04

08006668 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08e      	sub	sp, #56	; 0x38
 800666c:	af02      	add	r7, sp, #8
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10a      	bne.n	80066ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066aa:	bf00      	nop
 80066ac:	e7fe      	b.n	80066ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <xQueueGenericCreateStatic+0x52>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <xQueueGenericCreateStatic+0x56>
 80066ba:	2301      	movs	r3, #1
 80066bc:	e000      	b.n	80066c0 <xQueueGenericCreateStatic+0x58>
 80066be:	2300      	movs	r3, #0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	623b      	str	r3, [r7, #32]
}
 80066d6:	bf00      	nop
 80066d8:	e7fe      	b.n	80066d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <xQueueGenericCreateStatic+0x7e>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <xQueueGenericCreateStatic+0x82>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <xQueueGenericCreateStatic+0x84>
 80066ea:	2300      	movs	r3, #0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	61fb      	str	r3, [r7, #28]
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006706:	2348      	movs	r3, #72	; 0x48
 8006708:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b48      	cmp	r3, #72	; 0x48
 800670e:	d00a      	beq.n	8006726 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	61bb      	str	r3, [r7, #24]
}
 8006722:	bf00      	nop
 8006724:	e7fe      	b.n	8006724 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006726:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00d      	beq.n	800674e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800673a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	4613      	mov	r3, r2
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 f83f 	bl	80067cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006750:	4618      	mov	r0, r3
 8006752:	3730      	adds	r7, #48	; 0x30
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08a      	sub	sp, #40	; 0x28
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	4613      	mov	r3, r2
 8006764:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10a      	bne.n	8006782 <xQueueGenericCreate+0x2a>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	613b      	str	r3, [r7, #16]
}
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	fb02 f303 	mul.w	r3, r2, r3
 800678a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	3348      	adds	r3, #72	; 0x48
 8006790:	4618      	mov	r0, r3
 8006792:	f7ff fa15 	bl	8005bc0 <pvPortMalloc>
 8006796:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d011      	beq.n	80067c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	3348      	adds	r3, #72	; 0x48
 80067a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067b0:	79fa      	ldrb	r2, [r7, #7]
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	4613      	mov	r3, r2
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 f805 	bl	80067cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067c2:	69bb      	ldr	r3, [r7, #24]
	}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3720      	adds	r7, #32
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d103      	bne.n	80067e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	e002      	b.n	80067ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067fa:	2101      	movs	r1, #1
 80067fc:	69b8      	ldr	r0, [r7, #24]
 80067fe:	f7ff fecb 	bl	8006598 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006802:	bf00      	nop
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00e      	beq.n	8006836 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800682a:	2300      	movs	r3, #0
 800682c:	2200      	movs	r2, #0
 800682e:	2100      	movs	r1, #0
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f837 	bl	80068a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800683e:	b580      	push	{r7, lr}
 8006840:	b086      	sub	sp, #24
 8006842:	af00      	add	r7, sp, #0
 8006844:	4603      	mov	r3, r0
 8006846:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006848:	2301      	movs	r3, #1
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	2300      	movs	r3, #0
 800684e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	461a      	mov	r2, r3
 8006854:	6939      	ldr	r1, [r7, #16]
 8006856:	6978      	ldr	r0, [r7, #20]
 8006858:	f7ff ff7e 	bl	8006758 <xQueueGenericCreate>
 800685c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f7ff ffd3 	bl	800680a <prvInitialiseMutex>

		return xNewQueue;
 8006864:	68fb      	ldr	r3, [r7, #12]
	}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800686e:	b580      	push	{r7, lr}
 8006870:	b088      	sub	sp, #32
 8006872:	af02      	add	r7, sp, #8
 8006874:	4603      	mov	r3, r0
 8006876:	6039      	str	r1, [r7, #0]
 8006878:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800687a:	2301      	movs	r3, #1
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	2300      	movs	r3, #0
 8006880:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2200      	movs	r2, #0
 800688a:	6939      	ldr	r1, [r7, #16]
 800688c:	6978      	ldr	r0, [r7, #20]
 800688e:	f7ff feeb 	bl	8006668 <xQueueGenericCreateStatic>
 8006892:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f7ff ffb8 	bl	800680a <prvInitialiseMutex>

		return xNewQueue;
 800689a:	68fb      	ldr	r3, [r7, #12]
	}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b08e      	sub	sp, #56	; 0x38
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068b2:	2300      	movs	r3, #0
 80068b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10a      	bne.n	80068d6 <xQueueGenericSend+0x32>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d103      	bne.n	80068e4 <xQueueGenericSend+0x40>
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <xQueueGenericSend+0x44>
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <xQueueGenericSend+0x46>
 80068e8:	2300      	movs	r3, #0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10a      	bne.n	8006904 <xQueueGenericSend+0x60>
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006900:	bf00      	nop
 8006902:	e7fe      	b.n	8006902 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b02      	cmp	r3, #2
 8006908:	d103      	bne.n	8006912 <xQueueGenericSend+0x6e>
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <xQueueGenericSend+0x72>
 8006912:	2301      	movs	r3, #1
 8006914:	e000      	b.n	8006918 <xQueueGenericSend+0x74>
 8006916:	2300      	movs	r3, #0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <xQueueGenericSend+0x8e>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	623b      	str	r3, [r7, #32]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006932:	f001 fb59 	bl	8007fe8 <xTaskGetSchedulerState>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d102      	bne.n	8006942 <xQueueGenericSend+0x9e>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <xQueueGenericSend+0xa2>
 8006942:	2301      	movs	r3, #1
 8006944:	e000      	b.n	8006948 <xQueueGenericSend+0xa4>
 8006946:	2300      	movs	r3, #0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10a      	bne.n	8006962 <xQueueGenericSend+0xbe>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	61fb      	str	r3, [r7, #28]
}
 800695e:	bf00      	nop
 8006960:	e7fe      	b.n	8006960 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006962:	f7ff fcf7 	bl	8006354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696e:	429a      	cmp	r2, r3
 8006970:	d302      	bcc.n	8006978 <xQueueGenericSend+0xd4>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b02      	cmp	r3, #2
 8006976:	d129      	bne.n	80069cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	68b9      	ldr	r1, [r7, #8]
 800697c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800697e:	f000 fc3b 	bl	80071f8 <prvCopyDataToQueue>
 8006982:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	2b00      	cmp	r3, #0
 800698a:	d010      	beq.n	80069ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	3324      	adds	r3, #36	; 0x24
 8006990:	4618      	mov	r0, r3
 8006992:	f001 f96d 	bl	8007c70 <xTaskRemoveFromEventList>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d013      	beq.n	80069c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800699c:	4b3f      	ldr	r3, [pc, #252]	; (8006a9c <xQueueGenericSend+0x1f8>)
 800699e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	e00a      	b.n	80069c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d007      	beq.n	80069c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069b4:	4b39      	ldr	r3, [pc, #228]	; (8006a9c <xQueueGenericSend+0x1f8>)
 80069b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069c4:	f7ff fcf6 	bl	80063b4 <vPortExitCritical>
				return pdPASS;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e063      	b.n	8006a94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d103      	bne.n	80069da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069d2:	f7ff fcef 	bl	80063b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	e05c      	b.n	8006a94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d106      	bne.n	80069ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069e0:	f107 0314 	add.w	r3, r7, #20
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 f9a5 	bl	8007d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069ea:	2301      	movs	r3, #1
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069ee:	f7ff fce1 	bl	80063b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069f2:	f000 ff39 	bl	8007868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069f6:	f7ff fcad 	bl	8006354 <vPortEnterCritical>
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a00:	b25b      	sxtb	r3, r3
 8006a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a06:	d103      	bne.n	8006a10 <xQueueGenericSend+0x16c>
 8006a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a16:	b25b      	sxtb	r3, r3
 8006a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1c:	d103      	bne.n	8006a26 <xQueueGenericSend+0x182>
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a26:	f7ff fcc5 	bl	80063b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a2a:	1d3a      	adds	r2, r7, #4
 8006a2c:	f107 0314 	add.w	r3, r7, #20
 8006a30:	4611      	mov	r1, r2
 8006a32:	4618      	mov	r0, r3
 8006a34:	f001 f994 	bl	8007d60 <xTaskCheckForTimeOut>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d124      	bne.n	8006a88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a40:	f000 fcd2 	bl	80073e8 <prvIsQueueFull>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d018      	beq.n	8006a7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	3310      	adds	r3, #16
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	4611      	mov	r1, r2
 8006a52:	4618      	mov	r0, r3
 8006a54:	f001 f8e8 	bl	8007c28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a5a:	f000 fc5d 	bl	8007318 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a5e:	f000 ff11 	bl	8007884 <xTaskResumeAll>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f47f af7c 	bne.w	8006962 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006a6a:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <xQueueGenericSend+0x1f8>)
 8006a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	e772      	b.n	8006962 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a7e:	f000 fc4b 	bl	8007318 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a82:	f000 feff 	bl	8007884 <xTaskResumeAll>
 8006a86:	e76c      	b.n	8006962 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a8a:	f000 fc45 	bl	8007318 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a8e:	f000 fef9 	bl	8007884 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3738      	adds	r7, #56	; 0x38
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	e000ed04 	.word	0xe000ed04

08006aa0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b090      	sub	sp, #64	; 0x40
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006aca:	bf00      	nop
 8006acc:	e7fe      	b.n	8006acc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d103      	bne.n	8006adc <xQueueGenericSendFromISR+0x3c>
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <xQueueGenericSendFromISR+0x40>
 8006adc:	2301      	movs	r3, #1
 8006ade:	e000      	b.n	8006ae2 <xQueueGenericSendFromISR+0x42>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10a      	bne.n	8006afc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d103      	bne.n	8006b0a <xQueueGenericSendFromISR+0x6a>
 8006b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <xQueueGenericSendFromISR+0x6e>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e000      	b.n	8006b10 <xQueueGenericSendFromISR+0x70>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	623b      	str	r3, [r7, #32]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b2a:	f7ff fcf5 	bl	8006518 <vPortValidateInterruptPriority>
	__asm volatile
 8006b2e:	f3ef 8211 	mrs	r2, BASEPRI
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	61fa      	str	r2, [r7, #28]
 8006b44:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006b46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d302      	bcc.n	8006b5c <xQueueGenericSendFromISR+0xbc>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d12f      	bne.n	8006bbc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	68b9      	ldr	r1, [r7, #8]
 8006b70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b72:	f000 fb41 	bl	80071f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7e:	d112      	bne.n	8006ba6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d016      	beq.n	8006bb6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8a:	3324      	adds	r3, #36	; 0x24
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f001 f86f 	bl	8007c70 <xTaskRemoveFromEventList>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00e      	beq.n	8006bb6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00b      	beq.n	8006bb6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	e007      	b.n	8006bb6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ba6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006baa:	3301      	adds	r3, #1
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	b25a      	sxtb	r2, r3
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006bba:	e001      	b.n	8006bc0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc2:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f383 8811 	msr	BASEPRI, r3
}
 8006bca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3740      	adds	r7, #64	; 0x40
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b08e      	sub	sp, #56	; 0x38
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10a      	bne.n	8006c00 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	623b      	str	r3, [r7, #32]
}
 8006bfc:	bf00      	nop
 8006bfe:	e7fe      	b.n	8006bfe <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00a      	beq.n	8006c1e <xQueueGiveFromISR+0x48>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	61fb      	str	r3, [r7, #28]
}
 8006c1a:	bf00      	nop
 8006c1c:	e7fe      	b.n	8006c1c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d103      	bne.n	8006c2e <xQueueGiveFromISR+0x58>
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <xQueueGiveFromISR+0x5c>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <xQueueGiveFromISR+0x5e>
 8006c32:	2300      	movs	r3, #0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	61bb      	str	r3, [r7, #24]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c4e:	f7ff fc63 	bl	8006518 <vPortValidateInterruptPriority>
	__asm volatile
 8006c52:	f3ef 8211 	mrs	r2, BASEPRI
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	617a      	str	r2, [r7, #20]
 8006c68:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006c6a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d22b      	bcs.n	8006cd6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c98:	d112      	bne.n	8006cc0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d016      	beq.n	8006cd0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	3324      	adds	r3, #36	; 0x24
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 ffe2 	bl	8007c70 <xTaskRemoveFromEventList>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00e      	beq.n	8006cd0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00b      	beq.n	8006cd0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	e007      	b.n	8006cd0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	b25a      	sxtb	r2, r3
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd4:	e001      	b.n	8006cda <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cdc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f383 8811 	msr	BASEPRI, r3
}
 8006ce4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3738      	adds	r7, #56	; 0x38
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08c      	sub	sp, #48	; 0x30
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10a      	bne.n	8006d20 <xQueueReceive+0x30>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	623b      	str	r3, [r7, #32]
}
 8006d1c:	bf00      	nop
 8006d1e:	e7fe      	b.n	8006d1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d103      	bne.n	8006d2e <xQueueReceive+0x3e>
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <xQueueReceive+0x42>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <xQueueReceive+0x44>
 8006d32:	2300      	movs	r3, #0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10a      	bne.n	8006d4e <xQueueReceive+0x5e>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	61fb      	str	r3, [r7, #28]
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d4e:	f001 f94b 	bl	8007fe8 <xTaskGetSchedulerState>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d102      	bne.n	8006d5e <xQueueReceive+0x6e>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <xQueueReceive+0x72>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <xQueueReceive+0x74>
 8006d62:	2300      	movs	r3, #0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <xQueueReceive+0x8e>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	61bb      	str	r3, [r7, #24]
}
 8006d7a:	bf00      	nop
 8006d7c:	e7fe      	b.n	8006d7c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d7e:	f7ff fae9 	bl	8006354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d01f      	beq.n	8006dce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d8e:	68b9      	ldr	r1, [r7, #8]
 8006d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d92:	f000 fa9b 	bl	80072cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	1e5a      	subs	r2, r3, #1
 8006d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00f      	beq.n	8006dc6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	3310      	adds	r3, #16
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 ff60 	bl	8007c70 <xTaskRemoveFromEventList>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d007      	beq.n	8006dc6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006db6:	4b3d      	ldr	r3, [pc, #244]	; (8006eac <xQueueReceive+0x1bc>)
 8006db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dc6:	f7ff faf5 	bl	80063b4 <vPortExitCritical>
				return pdPASS;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e069      	b.n	8006ea2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d103      	bne.n	8006ddc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dd4:	f7ff faee 	bl	80063b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	e062      	b.n	8006ea2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d106      	bne.n	8006df0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006de2:	f107 0310 	add.w	r3, r7, #16
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 ffa4 	bl	8007d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dec:	2301      	movs	r3, #1
 8006dee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006df0:	f7ff fae0 	bl	80063b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006df4:	f000 fd38 	bl	8007868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006df8:	f7ff faac 	bl	8006354 <vPortEnterCritical>
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e02:	b25b      	sxtb	r3, r3
 8006e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e08:	d103      	bne.n	8006e12 <xQueueReceive+0x122>
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e18:	b25b      	sxtb	r3, r3
 8006e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1e:	d103      	bne.n	8006e28 <xQueueReceive+0x138>
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e28:	f7ff fac4 	bl	80063b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e2c:	1d3a      	adds	r2, r7, #4
 8006e2e:	f107 0310 	add.w	r3, r7, #16
 8006e32:	4611      	mov	r1, r2
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 ff93 	bl	8007d60 <xTaskCheckForTimeOut>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d123      	bne.n	8006e88 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e42:	f000 fabb 	bl	80073bc <prvIsQueueEmpty>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d017      	beq.n	8006e7c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	3324      	adds	r3, #36	; 0x24
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	4611      	mov	r1, r2
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 fee7 	bl	8007c28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e5c:	f000 fa5c 	bl	8007318 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e60:	f000 fd10 	bl	8007884 <xTaskResumeAll>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d189      	bne.n	8006d7e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e6a:	4b10      	ldr	r3, [pc, #64]	; (8006eac <xQueueReceive+0x1bc>)
 8006e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	e780      	b.n	8006d7e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e7e:	f000 fa4b 	bl	8007318 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e82:	f000 fcff 	bl	8007884 <xTaskResumeAll>
 8006e86:	e77a      	b.n	8006d7e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e8a:	f000 fa45 	bl	8007318 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e8e:	f000 fcf9 	bl	8007884 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e94:	f000 fa92 	bl	80073bc <prvIsQueueEmpty>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f43f af6f 	beq.w	8006d7e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ea0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3730      	adds	r7, #48	; 0x30
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	e000ed04 	.word	0xe000ed04

08006eb0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08e      	sub	sp, #56	; 0x38
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	623b      	str	r3, [r7, #32]
}
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	61fb      	str	r3, [r7, #28]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f00:	f001 f872 	bl	8007fe8 <xTaskGetSchedulerState>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d102      	bne.n	8006f10 <xQueueSemaphoreTake+0x60>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <xQueueSemaphoreTake+0x64>
 8006f10:	2301      	movs	r3, #1
 8006f12:	e000      	b.n	8006f16 <xQueueSemaphoreTake+0x66>
 8006f14:	2300      	movs	r3, #0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10a      	bne.n	8006f30 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	61bb      	str	r3, [r7, #24]
}
 8006f2c:	bf00      	nop
 8006f2e:	e7fe      	b.n	8006f2e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f30:	f7ff fa10 	bl	8006354 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f38:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d024      	beq.n	8006f8a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	1e5a      	subs	r2, r3, #1
 8006f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f46:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d104      	bne.n	8006f5a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f50:	f001 f9f2 	bl	8008338 <pvTaskIncrementMutexHeldCount>
 8006f54:	4602      	mov	r2, r0
 8006f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f58:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00f      	beq.n	8006f82 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f64:	3310      	adds	r3, #16
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 fe82 	bl	8007c70 <xTaskRemoveFromEventList>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d007      	beq.n	8006f82 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f72:	4b54      	ldr	r3, [pc, #336]	; (80070c4 <xQueueSemaphoreTake+0x214>)
 8006f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f82:	f7ff fa17 	bl	80063b4 <vPortExitCritical>
				return pdPASS;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e097      	b.n	80070ba <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d111      	bne.n	8006fb4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	617b      	str	r3, [r7, #20]
}
 8006fa8:	bf00      	nop
 8006faa:	e7fe      	b.n	8006faa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006fac:	f7ff fa02 	bl	80063b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e082      	b.n	80070ba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fba:	f107 030c 	add.w	r3, r7, #12
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 feb8 	bl	8007d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fc8:	f7ff f9f4 	bl	80063b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fcc:	f000 fc4c 	bl	8007868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fd0:	f7ff f9c0 	bl	8006354 <vPortEnterCritical>
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fda:	b25b      	sxtb	r3, r3
 8006fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe0:	d103      	bne.n	8006fea <xQueueSemaphoreTake+0x13a>
 8006fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ff0:	b25b      	sxtb	r3, r3
 8006ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff6:	d103      	bne.n	8007000 <xQueueSemaphoreTake+0x150>
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007000:	f7ff f9d8 	bl	80063b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007004:	463a      	mov	r2, r7
 8007006:	f107 030c 	add.w	r3, r7, #12
 800700a:	4611      	mov	r1, r2
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fea7 	bl	8007d60 <xTaskCheckForTimeOut>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d132      	bne.n	800707e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800701a:	f000 f9cf 	bl	80073bc <prvIsQueueEmpty>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d026      	beq.n	8007072 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d109      	bne.n	8007040 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800702c:	f7ff f992 	bl	8006354 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fff5 	bl	8008024 <xTaskPriorityInherit>
 800703a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800703c:	f7ff f9ba 	bl	80063b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	3324      	adds	r3, #36	; 0x24
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	4611      	mov	r1, r2
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fded 	bl	8007c28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800704e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007050:	f000 f962 	bl	8007318 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007054:	f000 fc16 	bl	8007884 <xTaskResumeAll>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	f47f af68 	bne.w	8006f30 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007060:	4b18      	ldr	r3, [pc, #96]	; (80070c4 <xQueueSemaphoreTake+0x214>)
 8007062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	e75e      	b.n	8006f30 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007072:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007074:	f000 f950 	bl	8007318 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007078:	f000 fc04 	bl	8007884 <xTaskResumeAll>
 800707c:	e758      	b.n	8006f30 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800707e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007080:	f000 f94a 	bl	8007318 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007084:	f000 fbfe 	bl	8007884 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800708a:	f000 f997 	bl	80073bc <prvIsQueueEmpty>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	f43f af4d 	beq.w	8006f30 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00d      	beq.n	80070b8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800709c:	f7ff f95a 	bl	8006354 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80070a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070a2:	f000 f891 	bl	80071c8 <prvGetDisinheritPriorityAfterTimeout>
 80070a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80070a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070ae:	4618      	mov	r0, r3
 80070b0:	f001 f8b4 	bl	800821c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80070b4:	f7ff f97e 	bl	80063b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3738      	adds	r7, #56	; 0x38
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	e000ed04 	.word	0xe000ed04

080070c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08e      	sub	sp, #56	; 0x38
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10a      	bne.n	80070f4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	623b      	str	r3, [r7, #32]
}
 80070f0:	bf00      	nop
 80070f2:	e7fe      	b.n	80070f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d103      	bne.n	8007102 <xQueueReceiveFromISR+0x3a>
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <xQueueReceiveFromISR+0x3e>
 8007102:	2301      	movs	r3, #1
 8007104:	e000      	b.n	8007108 <xQueueReceiveFromISR+0x40>
 8007106:	2300      	movs	r3, #0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	61fb      	str	r3, [r7, #28]
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007122:	f7ff f9f9 	bl	8006518 <vPortValidateInterruptPriority>
	__asm volatile
 8007126:	f3ef 8211 	mrs	r2, BASEPRI
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	61ba      	str	r2, [r7, #24]
 800713c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800713e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007140:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	2b00      	cmp	r3, #0
 800714c:	d02f      	beq.n	80071ae <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800715c:	f000 f8b6 	bl	80072cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	1e5a      	subs	r2, r3, #1
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007166:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007168:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007170:	d112      	bne.n	8007198 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d016      	beq.n	80071a8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717c:	3310      	adds	r3, #16
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fd76 	bl	8007c70 <xTaskRemoveFromEventList>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00e      	beq.n	80071a8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	e007      	b.n	80071a8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800719c:	3301      	adds	r3, #1
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	b25a      	sxtb	r2, r3
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80071a8:	2301      	movs	r3, #1
 80071aa:	637b      	str	r3, [r7, #52]	; 0x34
 80071ac:	e001      	b.n	80071b2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	637b      	str	r3, [r7, #52]	; 0x34
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f383 8811 	msr	BASEPRI, r3
}
 80071bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3738      	adds	r7, #56	; 0x38
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d006      	beq.n	80071e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f1c3 0307 	rsb	r3, r3, #7
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	e001      	b.n	80071ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80071e6:	2300      	movs	r3, #0
 80071e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80071ea:	68fb      	ldr	r3, [r7, #12]
	}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007204:	2300      	movs	r3, #0
 8007206:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10d      	bne.n	8007232 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d14d      	bne.n	80072ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	4618      	mov	r0, r3
 8007224:	f000 ff74 	bl	8008110 <xTaskPriorityDisinherit>
 8007228:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	609a      	str	r2, [r3, #8]
 8007230:	e043      	b.n	80072ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d119      	bne.n	800726c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6858      	ldr	r0, [r3, #4]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007240:	461a      	mov	r2, r3
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	f00b fea0 	bl	8012f88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007250:	441a      	add	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	429a      	cmp	r2, r3
 8007260:	d32b      	bcc.n	80072ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	605a      	str	r2, [r3, #4]
 800726a:	e026      	b.n	80072ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	68d8      	ldr	r0, [r3, #12]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	461a      	mov	r2, r3
 8007276:	68b9      	ldr	r1, [r7, #8]
 8007278:	f00b fe86 	bl	8012f88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	68da      	ldr	r2, [r3, #12]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007284:	425b      	negs	r3, r3
 8007286:	441a      	add	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d207      	bcs.n	80072a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a0:	425b      	negs	r3, r3
 80072a2:	441a      	add	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d105      	bne.n	80072ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072c2:	697b      	ldr	r3, [r7, #20]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d018      	beq.n	8007310 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	441a      	add	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d303      	bcc.n	8007300 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68d9      	ldr	r1, [r3, #12]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	461a      	mov	r2, r3
 800730a:	6838      	ldr	r0, [r7, #0]
 800730c:	f00b fe3c 	bl	8012f88 <memcpy>
	}
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007320:	f7ff f818 	bl	8006354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800732a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800732c:	e011      	b.n	8007352 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	2b00      	cmp	r3, #0
 8007334:	d012      	beq.n	800735c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3324      	adds	r3, #36	; 0x24
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fc98 	bl	8007c70 <xTaskRemoveFromEventList>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007346:	f000 fd6d 	bl	8007e24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	3b01      	subs	r3, #1
 800734e:	b2db      	uxtb	r3, r3
 8007350:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007356:	2b00      	cmp	r3, #0
 8007358:	dce9      	bgt.n	800732e <prvUnlockQueue+0x16>
 800735a:	e000      	b.n	800735e <prvUnlockQueue+0x46>
					break;
 800735c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	22ff      	movs	r2, #255	; 0xff
 8007362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007366:	f7ff f825 	bl	80063b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800736a:	f7fe fff3 	bl	8006354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007374:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007376:	e011      	b.n	800739c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d012      	beq.n	80073a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3310      	adds	r3, #16
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fc73 	bl	8007c70 <xTaskRemoveFromEventList>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007390:	f000 fd48 	bl	8007e24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	3b01      	subs	r3, #1
 8007398:	b2db      	uxtb	r3, r3
 800739a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800739c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	dce9      	bgt.n	8007378 <prvUnlockQueue+0x60>
 80073a4:	e000      	b.n	80073a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	22ff      	movs	r2, #255	; 0xff
 80073ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073b0:	f7ff f800 	bl	80063b4 <vPortExitCritical>
}
 80073b4:	bf00      	nop
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073c4:	f7fe ffc6 	bl	8006354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d102      	bne.n	80073d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073d0:	2301      	movs	r3, #1
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	e001      	b.n	80073da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073da:	f7fe ffeb 	bl	80063b4 <vPortExitCritical>

	return xReturn;
 80073de:	68fb      	ldr	r3, [r7, #12]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073f0:	f7fe ffb0 	bl	8006354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d102      	bne.n	8007406 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007400:	2301      	movs	r3, #1
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	e001      	b.n	800740a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007406:	2300      	movs	r3, #0
 8007408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800740a:	f7fe ffd3 	bl	80063b4 <vPortExitCritical>

	return xReturn;
 800740e:	68fb      	ldr	r3, [r7, #12]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007418:	b580      	push	{r7, lr}
 800741a:	b08e      	sub	sp, #56	; 0x38
 800741c:	af04      	add	r7, sp, #16
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10a      	bne.n	8007442 <xTaskCreateStatic+0x2a>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	623b      	str	r3, [r7, #32]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <xTaskCreateStatic+0x46>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	61fb      	str	r3, [r7, #28]
}
 800745a:	bf00      	nop
 800745c:	e7fe      	b.n	800745c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800745e:	2354      	movs	r3, #84	; 0x54
 8007460:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	2b54      	cmp	r3, #84	; 0x54
 8007466:	d00a      	beq.n	800747e <xTaskCreateStatic+0x66>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	61bb      	str	r3, [r7, #24]
}
 800747a:	bf00      	nop
 800747c:	e7fe      	b.n	800747c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800747e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007482:	2b00      	cmp	r3, #0
 8007484:	d01e      	beq.n	80074c4 <xTaskCreateStatic+0xac>
 8007486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01b      	beq.n	80074c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800748c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007494:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	2202      	movs	r2, #2
 800749a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800749e:	2300      	movs	r3, #0
 80074a0:	9303      	str	r3, [sp, #12]
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	9302      	str	r3, [sp, #8]
 80074a6:	f107 0314 	add.w	r3, r7, #20
 80074aa:	9301      	str	r3, [sp, #4]
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	68b9      	ldr	r1, [r7, #8]
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 f850 	bl	800755c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074be:	f000 f8d5 	bl	800766c <prvAddNewTaskToReadyList>
 80074c2:	e001      	b.n	80074c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074c8:	697b      	ldr	r3, [r7, #20]
	}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3728      	adds	r7, #40	; 0x28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b08c      	sub	sp, #48	; 0x30
 80074d6:	af04      	add	r7, sp, #16
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	603b      	str	r3, [r7, #0]
 80074de:	4613      	mov	r3, r2
 80074e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074e2:	88fb      	ldrh	r3, [r7, #6]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fe fb6a 	bl	8005bc0 <pvPortMalloc>
 80074ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00e      	beq.n	8007512 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074f4:	2054      	movs	r0, #84	; 0x54
 80074f6:	f7fe fb63 	bl	8005bc0 <pvPortMalloc>
 80074fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	631a      	str	r2, [r3, #48]	; 0x30
 8007508:	e005      	b.n	8007516 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800750a:	6978      	ldr	r0, [r7, #20]
 800750c:	f7fe fc24 	bl	8005d58 <vPortFree>
 8007510:	e001      	b.n	8007516 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d017      	beq.n	800754c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007524:	88fa      	ldrh	r2, [r7, #6]
 8007526:	2300      	movs	r3, #0
 8007528:	9303      	str	r3, [sp, #12]
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	9302      	str	r3, [sp, #8]
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68b9      	ldr	r1, [r7, #8]
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 f80e 	bl	800755c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007540:	69f8      	ldr	r0, [r7, #28]
 8007542:	f000 f893 	bl	800766c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007546:	2301      	movs	r3, #1
 8007548:	61bb      	str	r3, [r7, #24]
 800754a:	e002      	b.n	8007552 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800754c:	f04f 33ff 	mov.w	r3, #4294967295
 8007550:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007552:	69bb      	ldr	r3, [r7, #24]
	}
 8007554:	4618      	mov	r0, r3
 8007556:	3720      	adds	r7, #32
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b088      	sub	sp, #32
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800756e:	6879      	ldr	r1, [r7, #4]
 8007570:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007574:	440b      	add	r3, r1
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	f023 0307 	bic.w	r3, r3, #7
 8007582:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00a      	beq.n	80075a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	617b      	str	r3, [r7, #20]
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d01f      	beq.n	80075ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075aa:	2300      	movs	r3, #0
 80075ac:	61fb      	str	r3, [r7, #28]
 80075ae:	e012      	b.n	80075d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	7819      	ldrb	r1, [r3, #0]
 80075b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	4413      	add	r3, r2
 80075be:	3334      	adds	r3, #52	; 0x34
 80075c0:	460a      	mov	r2, r1
 80075c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d006      	beq.n	80075de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	3301      	adds	r3, #1
 80075d4:	61fb      	str	r3, [r7, #28]
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	2b0f      	cmp	r3, #15
 80075da:	d9e9      	bls.n	80075b0 <prvInitialiseNewTask+0x54>
 80075dc:	e000      	b.n	80075e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80075de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075e8:	e003      	b.n	80075f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	2b06      	cmp	r3, #6
 80075f6:	d901      	bls.n	80075fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075f8:	2306      	movs	r3, #6
 80075fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007600:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007606:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	2200      	movs	r2, #0
 800760c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	3304      	adds	r3, #4
 8007612:	4618      	mov	r0, r3
 8007614:	f7fe fcde 	bl	8005fd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	3318      	adds	r3, #24
 800761c:	4618      	mov	r0, r3
 800761e:	f7fe fcd9 	bl	8005fd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007626:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762a:	f1c3 0207 	rsb	r2, r3, #7
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007636:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763a:	2200      	movs	r2, #0
 800763c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	68f9      	ldr	r1, [r7, #12]
 800764a:	69b8      	ldr	r0, [r7, #24]
 800764c:	f7fe fd56 	bl	80060fc <pxPortInitialiseStack>
 8007650:	4602      	mov	r2, r0
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800765c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007662:	bf00      	nop
 8007664:	3720      	adds	r7, #32
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007674:	f7fe fe6e 	bl	8006354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007678:	4b2a      	ldr	r3, [pc, #168]	; (8007724 <prvAddNewTaskToReadyList+0xb8>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3301      	adds	r3, #1
 800767e:	4a29      	ldr	r2, [pc, #164]	; (8007724 <prvAddNewTaskToReadyList+0xb8>)
 8007680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007682:	4b29      	ldr	r3, [pc, #164]	; (8007728 <prvAddNewTaskToReadyList+0xbc>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d109      	bne.n	800769e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800768a:	4a27      	ldr	r2, [pc, #156]	; (8007728 <prvAddNewTaskToReadyList+0xbc>)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007690:	4b24      	ldr	r3, [pc, #144]	; (8007724 <prvAddNewTaskToReadyList+0xb8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d110      	bne.n	80076ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007698:	f000 fbe8 	bl	8007e6c <prvInitialiseTaskLists>
 800769c:	e00d      	b.n	80076ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800769e:	4b23      	ldr	r3, [pc, #140]	; (800772c <prvAddNewTaskToReadyList+0xc0>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d109      	bne.n	80076ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076a6:	4b20      	ldr	r3, [pc, #128]	; (8007728 <prvAddNewTaskToReadyList+0xbc>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d802      	bhi.n	80076ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076b4:	4a1c      	ldr	r2, [pc, #112]	; (8007728 <prvAddNewTaskToReadyList+0xbc>)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076ba:	4b1d      	ldr	r3, [pc, #116]	; (8007730 <prvAddNewTaskToReadyList+0xc4>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3301      	adds	r3, #1
 80076c0:	4a1b      	ldr	r2, [pc, #108]	; (8007730 <prvAddNewTaskToReadyList+0xc4>)
 80076c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c8:	2201      	movs	r2, #1
 80076ca:	409a      	lsls	r2, r3
 80076cc:	4b19      	ldr	r3, [pc, #100]	; (8007734 <prvAddNewTaskToReadyList+0xc8>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	4a18      	ldr	r2, [pc, #96]	; (8007734 <prvAddNewTaskToReadyList+0xc8>)
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4a15      	ldr	r2, [pc, #84]	; (8007738 <prvAddNewTaskToReadyList+0xcc>)
 80076e4:	441a      	add	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	3304      	adds	r3, #4
 80076ea:	4619      	mov	r1, r3
 80076ec:	4610      	mov	r0, r2
 80076ee:	f7fe fc7e 	bl	8005fee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076f2:	f7fe fe5f 	bl	80063b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076f6:	4b0d      	ldr	r3, [pc, #52]	; (800772c <prvAddNewTaskToReadyList+0xc0>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00e      	beq.n	800771c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076fe:	4b0a      	ldr	r3, [pc, #40]	; (8007728 <prvAddNewTaskToReadyList+0xbc>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007708:	429a      	cmp	r2, r3
 800770a:	d207      	bcs.n	800771c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800770c:	4b0b      	ldr	r3, [pc, #44]	; (800773c <prvAddNewTaskToReadyList+0xd0>)
 800770e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800771c:	bf00      	nop
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	2400425c 	.word	0x2400425c
 8007728:	2400415c 	.word	0x2400415c
 800772c:	24004268 	.word	0x24004268
 8007730:	24004278 	.word	0x24004278
 8007734:	24004264 	.word	0x24004264
 8007738:	24004160 	.word	0x24004160
 800773c:	e000ed04 	.word	0xe000ed04

08007740 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007748:	2300      	movs	r3, #0
 800774a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d017      	beq.n	8007782 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007752:	4b13      	ldr	r3, [pc, #76]	; (80077a0 <vTaskDelay+0x60>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <vTaskDelay+0x30>
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	60bb      	str	r3, [r7, #8]
}
 800776c:	bf00      	nop
 800776e:	e7fe      	b.n	800776e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007770:	f000 f87a 	bl	8007868 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007774:	2100      	movs	r1, #0
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fdf2 	bl	8008360 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800777c:	f000 f882 	bl	8007884 <xTaskResumeAll>
 8007780:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d107      	bne.n	8007798 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007788:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <vTaskDelay+0x64>)
 800778a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007798:	bf00      	nop
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	24004284 	.word	0x24004284
 80077a4:	e000ed04 	.word	0xe000ed04

080077a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	; 0x28
 80077ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077b2:	2300      	movs	r3, #0
 80077b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077b6:	463a      	mov	r2, r7
 80077b8:	1d39      	adds	r1, r7, #4
 80077ba:	f107 0308 	add.w	r3, r7, #8
 80077be:	4618      	mov	r0, r3
 80077c0:	f7f8 fe74 	bl	80004ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	9202      	str	r2, [sp, #8]
 80077cc:	9301      	str	r3, [sp, #4]
 80077ce:	2300      	movs	r3, #0
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	2300      	movs	r3, #0
 80077d4:	460a      	mov	r2, r1
 80077d6:	491e      	ldr	r1, [pc, #120]	; (8007850 <vTaskStartScheduler+0xa8>)
 80077d8:	481e      	ldr	r0, [pc, #120]	; (8007854 <vTaskStartScheduler+0xac>)
 80077da:	f7ff fe1d 	bl	8007418 <xTaskCreateStatic>
 80077de:	4603      	mov	r3, r0
 80077e0:	4a1d      	ldr	r2, [pc, #116]	; (8007858 <vTaskStartScheduler+0xb0>)
 80077e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077e4:	4b1c      	ldr	r3, [pc, #112]	; (8007858 <vTaskStartScheduler+0xb0>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077ec:	2301      	movs	r3, #1
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	e001      	b.n	80077f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d116      	bne.n	800782a <vTaskStartScheduler+0x82>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	613b      	str	r3, [r7, #16]
}
 800780e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007810:	4b12      	ldr	r3, [pc, #72]	; (800785c <vTaskStartScheduler+0xb4>)
 8007812:	f04f 32ff 	mov.w	r2, #4294967295
 8007816:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007818:	4b11      	ldr	r3, [pc, #68]	; (8007860 <vTaskStartScheduler+0xb8>)
 800781a:	2201      	movs	r2, #1
 800781c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800781e:	4b11      	ldr	r3, [pc, #68]	; (8007864 <vTaskStartScheduler+0xbc>)
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007824:	f7fe fcf4 	bl	8006210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007828:	e00e      	b.n	8007848 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d10a      	bne.n	8007848 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	60fb      	str	r3, [r7, #12]
}
 8007844:	bf00      	nop
 8007846:	e7fe      	b.n	8007846 <vTaskStartScheduler+0x9e>
}
 8007848:	bf00      	nop
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	08014518 	.word	0x08014518
 8007854:	08007e3d 	.word	0x08007e3d
 8007858:	24004280 	.word	0x24004280
 800785c:	2400427c 	.word	0x2400427c
 8007860:	24004268 	.word	0x24004268
 8007864:	24004260 	.word	0x24004260

08007868 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007868:	b480      	push	{r7}
 800786a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800786c:	4b04      	ldr	r3, [pc, #16]	; (8007880 <vTaskSuspendAll+0x18>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3301      	adds	r3, #1
 8007872:	4a03      	ldr	r2, [pc, #12]	; (8007880 <vTaskSuspendAll+0x18>)
 8007874:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007876:	bf00      	nop
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	24004284 	.word	0x24004284

08007884 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800788e:	2300      	movs	r3, #0
 8007890:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007892:	4b41      	ldr	r3, [pc, #260]	; (8007998 <xTaskResumeAll+0x114>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10a      	bne.n	80078b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	603b      	str	r3, [r7, #0]
}
 80078ac:	bf00      	nop
 80078ae:	e7fe      	b.n	80078ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078b0:	f7fe fd50 	bl	8006354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078b4:	4b38      	ldr	r3, [pc, #224]	; (8007998 <xTaskResumeAll+0x114>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	4a37      	ldr	r2, [pc, #220]	; (8007998 <xTaskResumeAll+0x114>)
 80078bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078be:	4b36      	ldr	r3, [pc, #216]	; (8007998 <xTaskResumeAll+0x114>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d161      	bne.n	800798a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078c6:	4b35      	ldr	r3, [pc, #212]	; (800799c <xTaskResumeAll+0x118>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d05d      	beq.n	800798a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078ce:	e02e      	b.n	800792e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d0:	4b33      	ldr	r3, [pc, #204]	; (80079a0 <xTaskResumeAll+0x11c>)
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3318      	adds	r3, #24
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fe fbe3 	bl	80060a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3304      	adds	r3, #4
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe fbde 	bl	80060a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f0:	2201      	movs	r2, #1
 80078f2:	409a      	lsls	r2, r3
 80078f4:	4b2b      	ldr	r3, [pc, #172]	; (80079a4 <xTaskResumeAll+0x120>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	4a2a      	ldr	r2, [pc, #168]	; (80079a4 <xTaskResumeAll+0x120>)
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4a27      	ldr	r2, [pc, #156]	; (80079a8 <xTaskResumeAll+0x124>)
 800790c:	441a      	add	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3304      	adds	r3, #4
 8007912:	4619      	mov	r1, r3
 8007914:	4610      	mov	r0, r2
 8007916:	f7fe fb6a 	bl	8005fee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791e:	4b23      	ldr	r3, [pc, #140]	; (80079ac <xTaskResumeAll+0x128>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	429a      	cmp	r2, r3
 8007926:	d302      	bcc.n	800792e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007928:	4b21      	ldr	r3, [pc, #132]	; (80079b0 <xTaskResumeAll+0x12c>)
 800792a:	2201      	movs	r2, #1
 800792c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800792e:	4b1c      	ldr	r3, [pc, #112]	; (80079a0 <xTaskResumeAll+0x11c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1cc      	bne.n	80078d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800793c:	f000 fb34 	bl	8007fa8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007940:	4b1c      	ldr	r3, [pc, #112]	; (80079b4 <xTaskResumeAll+0x130>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d010      	beq.n	800796e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800794c:	f000 f858 	bl	8007a00 <xTaskIncrementTick>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007956:	4b16      	ldr	r3, [pc, #88]	; (80079b0 <xTaskResumeAll+0x12c>)
 8007958:	2201      	movs	r2, #1
 800795a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	3b01      	subs	r3, #1
 8007960:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1f1      	bne.n	800794c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007968:	4b12      	ldr	r3, [pc, #72]	; (80079b4 <xTaskResumeAll+0x130>)
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800796e:	4b10      	ldr	r3, [pc, #64]	; (80079b0 <xTaskResumeAll+0x12c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d009      	beq.n	800798a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007976:	2301      	movs	r3, #1
 8007978:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800797a:	4b0f      	ldr	r3, [pc, #60]	; (80079b8 <xTaskResumeAll+0x134>)
 800797c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800798a:	f7fe fd13 	bl	80063b4 <vPortExitCritical>

	return xAlreadyYielded;
 800798e:	68bb      	ldr	r3, [r7, #8]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	24004284 	.word	0x24004284
 800799c:	2400425c 	.word	0x2400425c
 80079a0:	2400421c 	.word	0x2400421c
 80079a4:	24004264 	.word	0x24004264
 80079a8:	24004160 	.word	0x24004160
 80079ac:	2400415c 	.word	0x2400415c
 80079b0:	24004270 	.word	0x24004270
 80079b4:	2400426c 	.word	0x2400426c
 80079b8:	e000ed04 	.word	0xe000ed04

080079bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079c2:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <xTaskGetTickCount+0x1c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079c8:	687b      	ldr	r3, [r7, #4]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	24004260 	.word	0x24004260

080079dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079e2:	f7fe fd99 	bl	8006518 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80079e6:	2300      	movs	r3, #0
 80079e8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80079ea:	4b04      	ldr	r3, [pc, #16]	; (80079fc <xTaskGetTickCountFromISR+0x20>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079f0:	683b      	ldr	r3, [r7, #0]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	24004260 	.word	0x24004260

08007a00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a06:	2300      	movs	r3, #0
 8007a08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a0a:	4b4e      	ldr	r3, [pc, #312]	; (8007b44 <xTaskIncrementTick+0x144>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f040 808e 	bne.w	8007b30 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a14:	4b4c      	ldr	r3, [pc, #304]	; (8007b48 <xTaskIncrementTick+0x148>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a1c:	4a4a      	ldr	r2, [pc, #296]	; (8007b48 <xTaskIncrementTick+0x148>)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d120      	bne.n	8007a6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a28:	4b48      	ldr	r3, [pc, #288]	; (8007b4c <xTaskIncrementTick+0x14c>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	603b      	str	r3, [r7, #0]
}
 8007a44:	bf00      	nop
 8007a46:	e7fe      	b.n	8007a46 <xTaskIncrementTick+0x46>
 8007a48:	4b40      	ldr	r3, [pc, #256]	; (8007b4c <xTaskIncrementTick+0x14c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	60fb      	str	r3, [r7, #12]
 8007a4e:	4b40      	ldr	r3, [pc, #256]	; (8007b50 <xTaskIncrementTick+0x150>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a3e      	ldr	r2, [pc, #248]	; (8007b4c <xTaskIncrementTick+0x14c>)
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	4a3e      	ldr	r2, [pc, #248]	; (8007b50 <xTaskIncrementTick+0x150>)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	4b3d      	ldr	r3, [pc, #244]	; (8007b54 <xTaskIncrementTick+0x154>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3301      	adds	r3, #1
 8007a62:	4a3c      	ldr	r2, [pc, #240]	; (8007b54 <xTaskIncrementTick+0x154>)
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	f000 fa9f 	bl	8007fa8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a6a:	4b3b      	ldr	r3, [pc, #236]	; (8007b58 <xTaskIncrementTick+0x158>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d348      	bcc.n	8007b06 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a74:	4b35      	ldr	r3, [pc, #212]	; (8007b4c <xTaskIncrementTick+0x14c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d104      	bne.n	8007a88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a7e:	4b36      	ldr	r3, [pc, #216]	; (8007b58 <xTaskIncrementTick+0x158>)
 8007a80:	f04f 32ff 	mov.w	r2, #4294967295
 8007a84:	601a      	str	r2, [r3, #0]
					break;
 8007a86:	e03e      	b.n	8007b06 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a88:	4b30      	ldr	r3, [pc, #192]	; (8007b4c <xTaskIncrementTick+0x14c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d203      	bcs.n	8007aa8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007aa0:	4a2d      	ldr	r2, [pc, #180]	; (8007b58 <xTaskIncrementTick+0x158>)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007aa6:	e02e      	b.n	8007b06 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	3304      	adds	r3, #4
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7fe fafb 	bl	80060a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d004      	beq.n	8007ac4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	3318      	adds	r3, #24
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe faf2 	bl	80060a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac8:	2201      	movs	r2, #1
 8007aca:	409a      	lsls	r2, r3
 8007acc:	4b23      	ldr	r3, [pc, #140]	; (8007b5c <xTaskIncrementTick+0x15c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	4a22      	ldr	r2, [pc, #136]	; (8007b5c <xTaskIncrementTick+0x15c>)
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4a1f      	ldr	r2, [pc, #124]	; (8007b60 <xTaskIncrementTick+0x160>)
 8007ae4:	441a      	add	r2, r3
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f7fe fa7e 	bl	8005fee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af6:	4b1b      	ldr	r3, [pc, #108]	; (8007b64 <xTaskIncrementTick+0x164>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d3b9      	bcc.n	8007a74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b00:	2301      	movs	r3, #1
 8007b02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b04:	e7b6      	b.n	8007a74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b06:	4b17      	ldr	r3, [pc, #92]	; (8007b64 <xTaskIncrementTick+0x164>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0c:	4914      	ldr	r1, [pc, #80]	; (8007b60 <xTaskIncrementTick+0x160>)
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	440b      	add	r3, r1
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d901      	bls.n	8007b22 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b22:	4b11      	ldr	r3, [pc, #68]	; (8007b68 <xTaskIncrementTick+0x168>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d007      	beq.n	8007b3a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	e004      	b.n	8007b3a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b30:	4b0e      	ldr	r3, [pc, #56]	; (8007b6c <xTaskIncrementTick+0x16c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3301      	adds	r3, #1
 8007b36:	4a0d      	ldr	r2, [pc, #52]	; (8007b6c <xTaskIncrementTick+0x16c>)
 8007b38:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b3a:	697b      	ldr	r3, [r7, #20]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	24004284 	.word	0x24004284
 8007b48:	24004260 	.word	0x24004260
 8007b4c:	24004214 	.word	0x24004214
 8007b50:	24004218 	.word	0x24004218
 8007b54:	24004274 	.word	0x24004274
 8007b58:	2400427c 	.word	0x2400427c
 8007b5c:	24004264 	.word	0x24004264
 8007b60:	24004160 	.word	0x24004160
 8007b64:	2400415c 	.word	0x2400415c
 8007b68:	24004270 	.word	0x24004270
 8007b6c:	2400426c 	.word	0x2400426c

08007b70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b76:	4b27      	ldr	r3, [pc, #156]	; (8007c14 <vTaskSwitchContext+0xa4>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b7e:	4b26      	ldr	r3, [pc, #152]	; (8007c18 <vTaskSwitchContext+0xa8>)
 8007b80:	2201      	movs	r2, #1
 8007b82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b84:	e03f      	b.n	8007c06 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007b86:	4b24      	ldr	r3, [pc, #144]	; (8007c18 <vTaskSwitchContext+0xa8>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b8c:	4b23      	ldr	r3, [pc, #140]	; (8007c1c <vTaskSwitchContext+0xac>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	fab3 f383 	clz	r3, r3
 8007b98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007b9a:	7afb      	ldrb	r3, [r7, #11]
 8007b9c:	f1c3 031f 	rsb	r3, r3, #31
 8007ba0:	617b      	str	r3, [r7, #20]
 8007ba2:	491f      	ldr	r1, [pc, #124]	; (8007c20 <vTaskSwitchContext+0xb0>)
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	440b      	add	r3, r1
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10a      	bne.n	8007bcc <vTaskSwitchContext+0x5c>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	607b      	str	r3, [r7, #4]
}
 8007bc8:	bf00      	nop
 8007bca:	e7fe      	b.n	8007bca <vTaskSwitchContext+0x5a>
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4a12      	ldr	r2, [pc, #72]	; (8007c20 <vTaskSwitchContext+0xb0>)
 8007bd8:	4413      	add	r3, r2
 8007bda:	613b      	str	r3, [r7, #16]
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	605a      	str	r2, [r3, #4]
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	3308      	adds	r3, #8
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d104      	bne.n	8007bfc <vTaskSwitchContext+0x8c>
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	605a      	str	r2, [r3, #4]
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	4a08      	ldr	r2, [pc, #32]	; (8007c24 <vTaskSwitchContext+0xb4>)
 8007c04:	6013      	str	r3, [r2, #0]
}
 8007c06:	bf00      	nop
 8007c08:	371c      	adds	r7, #28
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	24004284 	.word	0x24004284
 8007c18:	24004270 	.word	0x24004270
 8007c1c:	24004264 	.word	0x24004264
 8007c20:	24004160 	.word	0x24004160
 8007c24:	2400415c 	.word	0x2400415c

08007c28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10a      	bne.n	8007c4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3c:	f383 8811 	msr	BASEPRI, r3
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	60fb      	str	r3, [r7, #12]
}
 8007c4a:	bf00      	nop
 8007c4c:	e7fe      	b.n	8007c4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c4e:	4b07      	ldr	r3, [pc, #28]	; (8007c6c <vTaskPlaceOnEventList+0x44>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3318      	adds	r3, #24
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7fe f9ed 	bl	8006036 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	6838      	ldr	r0, [r7, #0]
 8007c60:	f000 fb7e 	bl	8008360 <prvAddCurrentTaskToDelayedList>
}
 8007c64:	bf00      	nop
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	2400415c 	.word	0x2400415c

08007c70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10a      	bne.n	8007c9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	60fb      	str	r3, [r7, #12]
}
 8007c98:	bf00      	nop
 8007c9a:	e7fe      	b.n	8007c9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	3318      	adds	r3, #24
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fe fa01 	bl	80060a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ca6:	4b1d      	ldr	r3, [pc, #116]	; (8007d1c <xTaskRemoveFromEventList+0xac>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d11c      	bne.n	8007ce8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe f9f8 	bl	80060a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	409a      	lsls	r2, r3
 8007cc0:	4b17      	ldr	r3, [pc, #92]	; (8007d20 <xTaskRemoveFromEventList+0xb0>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	4a16      	ldr	r2, [pc, #88]	; (8007d20 <xTaskRemoveFromEventList+0xb0>)
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cce:	4613      	mov	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4a13      	ldr	r2, [pc, #76]	; (8007d24 <xTaskRemoveFromEventList+0xb4>)
 8007cd8:	441a      	add	r2, r3
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	f7fe f984 	bl	8005fee <vListInsertEnd>
 8007ce6:	e005      	b.n	8007cf4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	3318      	adds	r3, #24
 8007cec:	4619      	mov	r1, r3
 8007cee:	480e      	ldr	r0, [pc, #56]	; (8007d28 <xTaskRemoveFromEventList+0xb8>)
 8007cf0:	f7fe f97d 	bl	8005fee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf8:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <xTaskRemoveFromEventList+0xbc>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d905      	bls.n	8007d0e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d02:	2301      	movs	r3, #1
 8007d04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d06:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <xTaskRemoveFromEventList+0xc0>)
 8007d08:	2201      	movs	r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	e001      	b.n	8007d12 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d12:	697b      	ldr	r3, [r7, #20]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	24004284 	.word	0x24004284
 8007d20:	24004264 	.word	0x24004264
 8007d24:	24004160 	.word	0x24004160
 8007d28:	2400421c 	.word	0x2400421c
 8007d2c:	2400415c 	.word	0x2400415c
 8007d30:	24004270 	.word	0x24004270

08007d34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d3c:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <vTaskInternalSetTimeOutState+0x24>)
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d44:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <vTaskInternalSetTimeOutState+0x28>)
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	605a      	str	r2, [r3, #4]
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	24004274 	.word	0x24004274
 8007d5c:	24004260 	.word	0x24004260

08007d60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10a      	bne.n	8007d86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	613b      	str	r3, [r7, #16]
}
 8007d82:	bf00      	nop
 8007d84:	e7fe      	b.n	8007d84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	60fb      	str	r3, [r7, #12]
}
 8007d9e:	bf00      	nop
 8007da0:	e7fe      	b.n	8007da0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007da2:	f7fe fad7 	bl	8006354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007da6:	4b1d      	ldr	r3, [pc, #116]	; (8007e1c <xTaskCheckForTimeOut+0xbc>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dbe:	d102      	bne.n	8007dc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	61fb      	str	r3, [r7, #28]
 8007dc4:	e023      	b.n	8007e0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <xTaskCheckForTimeOut+0xc0>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d007      	beq.n	8007de2 <xTaskCheckForTimeOut+0x82>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d302      	bcc.n	8007de2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	61fb      	str	r3, [r7, #28]
 8007de0:	e015      	b.n	8007e0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d20b      	bcs.n	8007e04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	1ad2      	subs	r2, r2, r3
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7ff ff9b 	bl	8007d34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	61fb      	str	r3, [r7, #28]
 8007e02:	e004      	b.n	8007e0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2200      	movs	r2, #0
 8007e08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e0e:	f7fe fad1 	bl	80063b4 <vPortExitCritical>

	return xReturn;
 8007e12:	69fb      	ldr	r3, [r7, #28]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3720      	adds	r7, #32
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	24004260 	.word	0x24004260
 8007e20:	24004274 	.word	0x24004274

08007e24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e28:	4b03      	ldr	r3, [pc, #12]	; (8007e38 <vTaskMissedYield+0x14>)
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	601a      	str	r2, [r3, #0]
}
 8007e2e:	bf00      	nop
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	24004270 	.word	0x24004270

08007e3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e44:	f000 f852 	bl	8007eec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e48:	4b06      	ldr	r3, [pc, #24]	; (8007e64 <prvIdleTask+0x28>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d9f9      	bls.n	8007e44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e50:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <prvIdleTask+0x2c>)
 8007e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e56:	601a      	str	r2, [r3, #0]
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e60:	e7f0      	b.n	8007e44 <prvIdleTask+0x8>
 8007e62:	bf00      	nop
 8007e64:	24004160 	.word	0x24004160
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e72:	2300      	movs	r3, #0
 8007e74:	607b      	str	r3, [r7, #4]
 8007e76:	e00c      	b.n	8007e92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4a12      	ldr	r2, [pc, #72]	; (8007ecc <prvInitialiseTaskLists+0x60>)
 8007e84:	4413      	add	r3, r2
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fe f884 	bl	8005f94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	607b      	str	r3, [r7, #4]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b06      	cmp	r3, #6
 8007e96:	d9ef      	bls.n	8007e78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e98:	480d      	ldr	r0, [pc, #52]	; (8007ed0 <prvInitialiseTaskLists+0x64>)
 8007e9a:	f7fe f87b 	bl	8005f94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e9e:	480d      	ldr	r0, [pc, #52]	; (8007ed4 <prvInitialiseTaskLists+0x68>)
 8007ea0:	f7fe f878 	bl	8005f94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ea4:	480c      	ldr	r0, [pc, #48]	; (8007ed8 <prvInitialiseTaskLists+0x6c>)
 8007ea6:	f7fe f875 	bl	8005f94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007eaa:	480c      	ldr	r0, [pc, #48]	; (8007edc <prvInitialiseTaskLists+0x70>)
 8007eac:	f7fe f872 	bl	8005f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007eb0:	480b      	ldr	r0, [pc, #44]	; (8007ee0 <prvInitialiseTaskLists+0x74>)
 8007eb2:	f7fe f86f 	bl	8005f94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007eb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <prvInitialiseTaskLists+0x78>)
 8007eb8:	4a05      	ldr	r2, [pc, #20]	; (8007ed0 <prvInitialiseTaskLists+0x64>)
 8007eba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <prvInitialiseTaskLists+0x7c>)
 8007ebe:	4a05      	ldr	r2, [pc, #20]	; (8007ed4 <prvInitialiseTaskLists+0x68>)
 8007ec0:	601a      	str	r2, [r3, #0]
}
 8007ec2:	bf00      	nop
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	24004160 	.word	0x24004160
 8007ed0:	240041ec 	.word	0x240041ec
 8007ed4:	24004200 	.word	0x24004200
 8007ed8:	2400421c 	.word	0x2400421c
 8007edc:	24004230 	.word	0x24004230
 8007ee0:	24004248 	.word	0x24004248
 8007ee4:	24004214 	.word	0x24004214
 8007ee8:	24004218 	.word	0x24004218

08007eec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ef2:	e019      	b.n	8007f28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ef4:	f7fe fa2e 	bl	8006354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef8:	4b10      	ldr	r3, [pc, #64]	; (8007f3c <prvCheckTasksWaitingTermination+0x50>)
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3304      	adds	r3, #4
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe f8cf 	bl	80060a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f0a:	4b0d      	ldr	r3, [pc, #52]	; (8007f40 <prvCheckTasksWaitingTermination+0x54>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	4a0b      	ldr	r2, [pc, #44]	; (8007f40 <prvCheckTasksWaitingTermination+0x54>)
 8007f12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f14:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <prvCheckTasksWaitingTermination+0x58>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	4a0a      	ldr	r2, [pc, #40]	; (8007f44 <prvCheckTasksWaitingTermination+0x58>)
 8007f1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f1e:	f7fe fa49 	bl	80063b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f810 	bl	8007f48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f28:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <prvCheckTasksWaitingTermination+0x58>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1e1      	bne.n	8007ef4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	24004230 	.word	0x24004230
 8007f40:	2400425c 	.word	0x2400425c
 8007f44:	24004244 	.word	0x24004244

08007f48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d108      	bne.n	8007f6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fd fefa 	bl	8005d58 <vPortFree>
				vPortFree( pxTCB );
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7fd fef7 	bl	8005d58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f6a:	e018      	b.n	8007f9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d103      	bne.n	8007f7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fd feee 	bl	8005d58 <vPortFree>
	}
 8007f7c:	e00f      	b.n	8007f9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d00a      	beq.n	8007f9e <prvDeleteTCB+0x56>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	60fb      	str	r3, [r7, #12]
}
 8007f9a:	bf00      	nop
 8007f9c:	e7fe      	b.n	8007f9c <prvDeleteTCB+0x54>
	}
 8007f9e:	bf00      	nop
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fae:	4b0c      	ldr	r3, [pc, #48]	; (8007fe0 <prvResetNextTaskUnblockTime+0x38>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d104      	bne.n	8007fc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fb8:	4b0a      	ldr	r3, [pc, #40]	; (8007fe4 <prvResetNextTaskUnblockTime+0x3c>)
 8007fba:	f04f 32ff 	mov.w	r2, #4294967295
 8007fbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fc0:	e008      	b.n	8007fd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc2:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <prvResetNextTaskUnblockTime+0x38>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	4a04      	ldr	r2, [pc, #16]	; (8007fe4 <prvResetNextTaskUnblockTime+0x3c>)
 8007fd2:	6013      	str	r3, [r2, #0]
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	24004214 	.word	0x24004214
 8007fe4:	2400427c 	.word	0x2400427c

08007fe8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fee:	4b0b      	ldr	r3, [pc, #44]	; (800801c <xTaskGetSchedulerState+0x34>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d102      	bne.n	8007ffc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	607b      	str	r3, [r7, #4]
 8007ffa:	e008      	b.n	800800e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ffc:	4b08      	ldr	r3, [pc, #32]	; (8008020 <xTaskGetSchedulerState+0x38>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d102      	bne.n	800800a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008004:	2302      	movs	r3, #2
 8008006:	607b      	str	r3, [r7, #4]
 8008008:	e001      	b.n	800800e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800800a:	2300      	movs	r3, #0
 800800c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800800e:	687b      	ldr	r3, [r7, #4]
	}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	24004268 	.word	0x24004268
 8008020:	24004284 	.word	0x24004284

08008024 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008030:	2300      	movs	r3, #0
 8008032:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d05e      	beq.n	80080f8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803e:	4b31      	ldr	r3, [pc, #196]	; (8008104 <xTaskPriorityInherit+0xe0>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	429a      	cmp	r2, r3
 8008046:	d24e      	bcs.n	80080e6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	2b00      	cmp	r3, #0
 800804e:	db06      	blt.n	800805e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008050:	4b2c      	ldr	r3, [pc, #176]	; (8008104 <xTaskPriorityInherit+0xe0>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008056:	f1c3 0207 	rsb	r2, r3, #7
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	6959      	ldr	r1, [r3, #20]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4a26      	ldr	r2, [pc, #152]	; (8008108 <xTaskPriorityInherit+0xe4>)
 8008070:	4413      	add	r3, r2
 8008072:	4299      	cmp	r1, r3
 8008074:	d12f      	bne.n	80080d6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	3304      	adds	r3, #4
 800807a:	4618      	mov	r0, r3
 800807c:	f7fe f814 	bl	80060a8 <uxListRemove>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10a      	bne.n	800809c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808a:	2201      	movs	r2, #1
 800808c:	fa02 f303 	lsl.w	r3, r2, r3
 8008090:	43da      	mvns	r2, r3
 8008092:	4b1e      	ldr	r3, [pc, #120]	; (800810c <xTaskPriorityInherit+0xe8>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4013      	ands	r3, r2
 8008098:	4a1c      	ldr	r2, [pc, #112]	; (800810c <xTaskPriorityInherit+0xe8>)
 800809a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800809c:	4b19      	ldr	r3, [pc, #100]	; (8008104 <xTaskPriorityInherit+0xe0>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080aa:	2201      	movs	r2, #1
 80080ac:	409a      	lsls	r2, r3
 80080ae:	4b17      	ldr	r3, [pc, #92]	; (800810c <xTaskPriorityInherit+0xe8>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	4a15      	ldr	r2, [pc, #84]	; (800810c <xTaskPriorityInherit+0xe8>)
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4a10      	ldr	r2, [pc, #64]	; (8008108 <xTaskPriorityInherit+0xe4>)
 80080c6:	441a      	add	r2, r3
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	3304      	adds	r3, #4
 80080cc:	4619      	mov	r1, r3
 80080ce:	4610      	mov	r0, r2
 80080d0:	f7fd ff8d 	bl	8005fee <vListInsertEnd>
 80080d4:	e004      	b.n	80080e0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080d6:	4b0b      	ldr	r3, [pc, #44]	; (8008104 <xTaskPriorityInherit+0xe0>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80080e0:	2301      	movs	r3, #1
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	e008      	b.n	80080f8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ea:	4b06      	ldr	r3, [pc, #24]	; (8008104 <xTaskPriorityInherit+0xe0>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d201      	bcs.n	80080f8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80080f4:	2301      	movs	r3, #1
 80080f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080f8:	68fb      	ldr	r3, [r7, #12]
	}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	2400415c 	.word	0x2400415c
 8008108:	24004160 	.word	0x24004160
 800810c:	24004264 	.word	0x24004264

08008110 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800811c:	2300      	movs	r3, #0
 800811e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d06e      	beq.n	8008204 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008126:	4b3a      	ldr	r3, [pc, #232]	; (8008210 <xTaskPriorityDisinherit+0x100>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	429a      	cmp	r2, r3
 800812e:	d00a      	beq.n	8008146 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	60fb      	str	r3, [r7, #12]
}
 8008142:	bf00      	nop
 8008144:	e7fe      	b.n	8008144 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10a      	bne.n	8008164 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	60bb      	str	r3, [r7, #8]
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008168:	1e5a      	subs	r2, r3, #1
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008176:	429a      	cmp	r2, r3
 8008178:	d044      	beq.n	8008204 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800817e:	2b00      	cmp	r3, #0
 8008180:	d140      	bne.n	8008204 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	3304      	adds	r3, #4
 8008186:	4618      	mov	r0, r3
 8008188:	f7fd ff8e 	bl	80060a8 <uxListRemove>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d115      	bne.n	80081be <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008196:	491f      	ldr	r1, [pc, #124]	; (8008214 <xTaskPriorityDisinherit+0x104>)
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	440b      	add	r3, r1
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10a      	bne.n	80081be <xTaskPriorityDisinherit+0xae>
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ac:	2201      	movs	r2, #1
 80081ae:	fa02 f303 	lsl.w	r3, r2, r3
 80081b2:	43da      	mvns	r2, r3
 80081b4:	4b18      	ldr	r3, [pc, #96]	; (8008218 <xTaskPriorityDisinherit+0x108>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4013      	ands	r3, r2
 80081ba:	4a17      	ldr	r2, [pc, #92]	; (8008218 <xTaskPriorityDisinherit+0x108>)
 80081bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ca:	f1c3 0207 	rsb	r2, r3, #7
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d6:	2201      	movs	r2, #1
 80081d8:	409a      	lsls	r2, r3
 80081da:	4b0f      	ldr	r3, [pc, #60]	; (8008218 <xTaskPriorityDisinherit+0x108>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4313      	orrs	r3, r2
 80081e0:	4a0d      	ldr	r2, [pc, #52]	; (8008218 <xTaskPriorityDisinherit+0x108>)
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e8:	4613      	mov	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4a08      	ldr	r2, [pc, #32]	; (8008214 <xTaskPriorityDisinherit+0x104>)
 80081f2:	441a      	add	r2, r3
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	3304      	adds	r3, #4
 80081f8:	4619      	mov	r1, r3
 80081fa:	4610      	mov	r0, r2
 80081fc:	f7fd fef7 	bl	8005fee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008200:	2301      	movs	r3, #1
 8008202:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008204:	697b      	ldr	r3, [r7, #20]
	}
 8008206:	4618      	mov	r0, r3
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	2400415c 	.word	0x2400415c
 8008214:	24004160 	.word	0x24004160
 8008218:	24004264 	.word	0x24004264

0800821c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800821c:	b580      	push	{r7, lr}
 800821e:	b088      	sub	sp, #32
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800822a:	2301      	movs	r3, #1
 800822c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d077      	beq.n	8008324 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	60fb      	str	r3, [r7, #12]
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	429a      	cmp	r2, r3
 800825a:	d902      	bls.n	8008262 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	61fb      	str	r3, [r7, #28]
 8008260:	e002      	b.n	8008268 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008266:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826c:	69fa      	ldr	r2, [r7, #28]
 800826e:	429a      	cmp	r2, r3
 8008270:	d058      	beq.n	8008324 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	429a      	cmp	r2, r3
 800827a:	d153      	bne.n	8008324 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800827c:	4b2b      	ldr	r3, [pc, #172]	; (800832c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	69ba      	ldr	r2, [r7, #24]
 8008282:	429a      	cmp	r2, r3
 8008284:	d10a      	bne.n	800829c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	60bb      	str	r3, [r7, #8]
}
 8008298:	bf00      	nop
 800829a:	e7fe      	b.n	800829a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	db04      	blt.n	80082ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	f1c3 0207 	rsb	r2, r3, #7
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	6959      	ldr	r1, [r3, #20]
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	4613      	mov	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4a19      	ldr	r2, [pc, #100]	; (8008330 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80082ca:	4413      	add	r3, r2
 80082cc:	4299      	cmp	r1, r3
 80082ce:	d129      	bne.n	8008324 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fd fee7 	bl	80060a8 <uxListRemove>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10a      	bne.n	80082f6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	2201      	movs	r2, #1
 80082e6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ea:	43da      	mvns	r2, r3
 80082ec:	4b11      	ldr	r3, [pc, #68]	; (8008334 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4013      	ands	r3, r2
 80082f2:	4a10      	ldr	r2, [pc, #64]	; (8008334 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80082f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fa:	2201      	movs	r2, #1
 80082fc:	409a      	lsls	r2, r3
 80082fe:	4b0d      	ldr	r3, [pc, #52]	; (8008334 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4313      	orrs	r3, r2
 8008304:	4a0b      	ldr	r2, [pc, #44]	; (8008334 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830c:	4613      	mov	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4a06      	ldr	r2, [pc, #24]	; (8008330 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008316:	441a      	add	r2, r3
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	3304      	adds	r3, #4
 800831c:	4619      	mov	r1, r3
 800831e:	4610      	mov	r0, r2
 8008320:	f7fd fe65 	bl	8005fee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008324:	bf00      	nop
 8008326:	3720      	adds	r7, #32
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	2400415c 	.word	0x2400415c
 8008330:	24004160 	.word	0x24004160
 8008334:	24004264 	.word	0x24004264

08008338 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008338:	b480      	push	{r7}
 800833a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800833c:	4b07      	ldr	r3, [pc, #28]	; (800835c <pvTaskIncrementMutexHeldCount+0x24>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d004      	beq.n	800834e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008344:	4b05      	ldr	r3, [pc, #20]	; (800835c <pvTaskIncrementMutexHeldCount+0x24>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800834a:	3201      	adds	r2, #1
 800834c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800834e:	4b03      	ldr	r3, [pc, #12]	; (800835c <pvTaskIncrementMutexHeldCount+0x24>)
 8008350:	681b      	ldr	r3, [r3, #0]
	}
 8008352:	4618      	mov	r0, r3
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	2400415c 	.word	0x2400415c

08008360 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800836a:	4b29      	ldr	r3, [pc, #164]	; (8008410 <prvAddCurrentTaskToDelayedList+0xb0>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008370:	4b28      	ldr	r3, [pc, #160]	; (8008414 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3304      	adds	r3, #4
 8008376:	4618      	mov	r0, r3
 8008378:	f7fd fe96 	bl	80060a8 <uxListRemove>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10b      	bne.n	800839a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008382:	4b24      	ldr	r3, [pc, #144]	; (8008414 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008388:	2201      	movs	r2, #1
 800838a:	fa02 f303 	lsl.w	r3, r2, r3
 800838e:	43da      	mvns	r2, r3
 8008390:	4b21      	ldr	r3, [pc, #132]	; (8008418 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4013      	ands	r3, r2
 8008396:	4a20      	ldr	r2, [pc, #128]	; (8008418 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008398:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a0:	d10a      	bne.n	80083b8 <prvAddCurrentTaskToDelayedList+0x58>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d007      	beq.n	80083b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083a8:	4b1a      	ldr	r3, [pc, #104]	; (8008414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3304      	adds	r3, #4
 80083ae:	4619      	mov	r1, r3
 80083b0:	481a      	ldr	r0, [pc, #104]	; (800841c <prvAddCurrentTaskToDelayedList+0xbc>)
 80083b2:	f7fd fe1c 	bl	8005fee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083b6:	e026      	b.n	8008406 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4413      	add	r3, r2
 80083be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083c0:	4b14      	ldr	r3, [pc, #80]	; (8008414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d209      	bcs.n	80083e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083d0:	4b13      	ldr	r3, [pc, #76]	; (8008420 <prvAddCurrentTaskToDelayedList+0xc0>)
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	4b0f      	ldr	r3, [pc, #60]	; (8008414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3304      	adds	r3, #4
 80083da:	4619      	mov	r1, r3
 80083dc:	4610      	mov	r0, r2
 80083de:	f7fd fe2a 	bl	8006036 <vListInsert>
}
 80083e2:	e010      	b.n	8008406 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083e4:	4b0f      	ldr	r3, [pc, #60]	; (8008424 <prvAddCurrentTaskToDelayedList+0xc4>)
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	4b0a      	ldr	r3, [pc, #40]	; (8008414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	3304      	adds	r3, #4
 80083ee:	4619      	mov	r1, r3
 80083f0:	4610      	mov	r0, r2
 80083f2:	f7fd fe20 	bl	8006036 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80083f6:	4b0c      	ldr	r3, [pc, #48]	; (8008428 <prvAddCurrentTaskToDelayedList+0xc8>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d202      	bcs.n	8008406 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008400:	4a09      	ldr	r2, [pc, #36]	; (8008428 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	6013      	str	r3, [r2, #0]
}
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	24004260 	.word	0x24004260
 8008414:	2400415c 	.word	0x2400415c
 8008418:	24004264 	.word	0x24004264
 800841c:	24004248 	.word	0x24004248
 8008420:	24004218 	.word	0x24004218
 8008424:	24004214 	.word	0x24004214
 8008428:	2400427c 	.word	0x2400427c

0800842c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008436:	88fb      	ldrh	r3, [r7, #6]
 8008438:	021b      	lsls	r3, r3, #8
 800843a:	b21a      	sxth	r2, r3
 800843c:	88fb      	ldrh	r3, [r7, #6]
 800843e:	0a1b      	lsrs	r3, r3, #8
 8008440:	b29b      	uxth	r3, r3
 8008442:	b21b      	sxth	r3, r3
 8008444:	4313      	orrs	r3, r2
 8008446:	b21b      	sxth	r3, r3
 8008448:	b29b      	uxth	r3, r3
}
 800844a:	4618      	mov	r0, r3
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	061a      	lsls	r2, r3, #24
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800846a:	431a      	orrs	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	0a1b      	lsrs	r3, r3, #8
 8008470:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008474:	431a      	orrs	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	0e1b      	lsrs	r3, r3, #24
 800847a:	4313      	orrs	r3, r2
}
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8008490:	4915      	ldr	r1, [pc, #84]	; (80084e8 <etharp_free_entry+0x60>)
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	4613      	mov	r3, r2
 8008496:	005b      	lsls	r3, r3, #1
 8008498:	4413      	add	r3, r2
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	440b      	add	r3, r1
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d013      	beq.n	80084cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80084a4:	4910      	ldr	r1, [pc, #64]	; (80084e8 <etharp_free_entry+0x60>)
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	4613      	mov	r3, r2
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	4413      	add	r3, r2
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	440b      	add	r3, r1
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f003 ff5f 	bl	800c378 <pbuf_free>
    arp_table[i].q = NULL;
 80084ba:	490b      	ldr	r1, [pc, #44]	; (80084e8 <etharp_free_entry+0x60>)
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	4613      	mov	r3, r2
 80084c0:	005b      	lsls	r3, r3, #1
 80084c2:	4413      	add	r3, r2
 80084c4:	00db      	lsls	r3, r3, #3
 80084c6:	440b      	add	r3, r1
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80084cc:	4906      	ldr	r1, [pc, #24]	; (80084e8 <etharp_free_entry+0x60>)
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	4613      	mov	r3, r2
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	4413      	add	r3, r2
 80084d6:	00db      	lsls	r3, r3, #3
 80084d8:	440b      	add	r3, r1
 80084da:	3314      	adds	r3, #20
 80084dc:	2200      	movs	r2, #0
 80084de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	24004288 	.word	0x24004288

080084ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80084f2:	2300      	movs	r3, #0
 80084f4:	607b      	str	r3, [r7, #4]
 80084f6:	e096      	b.n	8008626 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80084f8:	494f      	ldr	r1, [pc, #316]	; (8008638 <etharp_tmr+0x14c>)
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	4613      	mov	r3, r2
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	4413      	add	r3, r2
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	440b      	add	r3, r1
 8008506:	3314      	adds	r3, #20
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800850c:	78fb      	ldrb	r3, [r7, #3]
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 8086 	beq.w	8008620 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8008514:	4948      	ldr	r1, [pc, #288]	; (8008638 <etharp_tmr+0x14c>)
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	4613      	mov	r3, r2
 800851a:	005b      	lsls	r3, r3, #1
 800851c:	4413      	add	r3, r2
 800851e:	00db      	lsls	r3, r3, #3
 8008520:	440b      	add	r3, r1
 8008522:	3312      	adds	r3, #18
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	3301      	adds	r3, #1
 8008528:	b298      	uxth	r0, r3
 800852a:	4943      	ldr	r1, [pc, #268]	; (8008638 <etharp_tmr+0x14c>)
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	4613      	mov	r3, r2
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	4413      	add	r3, r2
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	440b      	add	r3, r1
 8008538:	3312      	adds	r3, #18
 800853a:	4602      	mov	r2, r0
 800853c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800853e:	493e      	ldr	r1, [pc, #248]	; (8008638 <etharp_tmr+0x14c>)
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	4613      	mov	r3, r2
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	4413      	add	r3, r2
 8008548:	00db      	lsls	r3, r3, #3
 800854a:	440b      	add	r3, r1
 800854c:	3312      	adds	r3, #18
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008554:	d215      	bcs.n	8008582 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8008556:	4938      	ldr	r1, [pc, #224]	; (8008638 <etharp_tmr+0x14c>)
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	4613      	mov	r3, r2
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	4413      	add	r3, r2
 8008560:	00db      	lsls	r3, r3, #3
 8008562:	440b      	add	r3, r1
 8008564:	3314      	adds	r3, #20
 8008566:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8008568:	2b01      	cmp	r3, #1
 800856a:	d10e      	bne.n	800858a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800856c:	4932      	ldr	r1, [pc, #200]	; (8008638 <etharp_tmr+0x14c>)
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	4613      	mov	r3, r2
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	4413      	add	r3, r2
 8008576:	00db      	lsls	r3, r3, #3
 8008578:	440b      	add	r3, r1
 800857a:	3312      	adds	r3, #18
 800857c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800857e:	2b04      	cmp	r3, #4
 8008580:	d903      	bls.n	800858a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7ff ff80 	bl	8008488 <etharp_free_entry>
 8008588:	e04a      	b.n	8008620 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800858a:	492b      	ldr	r1, [pc, #172]	; (8008638 <etharp_tmr+0x14c>)
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	4613      	mov	r3, r2
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	4413      	add	r3, r2
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	440b      	add	r3, r1
 8008598:	3314      	adds	r3, #20
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b03      	cmp	r3, #3
 800859e:	d10a      	bne.n	80085b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80085a0:	4925      	ldr	r1, [pc, #148]	; (8008638 <etharp_tmr+0x14c>)
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	4613      	mov	r3, r2
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	4413      	add	r3, r2
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	440b      	add	r3, r1
 80085ae:	3314      	adds	r3, #20
 80085b0:	2204      	movs	r2, #4
 80085b2:	701a      	strb	r2, [r3, #0]
 80085b4:	e034      	b.n	8008620 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80085b6:	4920      	ldr	r1, [pc, #128]	; (8008638 <etharp_tmr+0x14c>)
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	4613      	mov	r3, r2
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	4413      	add	r3, r2
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	440b      	add	r3, r1
 80085c4:	3314      	adds	r3, #20
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	d10a      	bne.n	80085e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80085cc:	491a      	ldr	r1, [pc, #104]	; (8008638 <etharp_tmr+0x14c>)
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	4613      	mov	r3, r2
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	4413      	add	r3, r2
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	440b      	add	r3, r1
 80085da:	3314      	adds	r3, #20
 80085dc:	2202      	movs	r2, #2
 80085de:	701a      	strb	r2, [r3, #0]
 80085e0:	e01e      	b.n	8008620 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80085e2:	4915      	ldr	r1, [pc, #84]	; (8008638 <etharp_tmr+0x14c>)
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	4613      	mov	r3, r2
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	4413      	add	r3, r2
 80085ec:	00db      	lsls	r3, r3, #3
 80085ee:	440b      	add	r3, r1
 80085f0:	3314      	adds	r3, #20
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d113      	bne.n	8008620 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80085f8:	490f      	ldr	r1, [pc, #60]	; (8008638 <etharp_tmr+0x14c>)
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	4613      	mov	r3, r2
 80085fe:	005b      	lsls	r3, r3, #1
 8008600:	4413      	add	r3, r2
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	440b      	add	r3, r1
 8008606:	3308      	adds	r3, #8
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	4613      	mov	r3, r2
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	4413      	add	r3, r2
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	4a08      	ldr	r2, [pc, #32]	; (8008638 <etharp_tmr+0x14c>)
 8008616:	4413      	add	r3, r2
 8008618:	3304      	adds	r3, #4
 800861a:	4619      	mov	r1, r3
 800861c:	f000 fe6e 	bl	80092fc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3301      	adds	r3, #1
 8008624:	607b      	str	r3, [r7, #4]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b09      	cmp	r3, #9
 800862a:	f77f af65 	ble.w	80084f8 <etharp_tmr+0xc>
      }
    }
  }
}
 800862e:	bf00      	nop
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	24004288 	.word	0x24004288

0800863c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b08a      	sub	sp, #40	; 0x28
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	460b      	mov	r3, r1
 8008646:	607a      	str	r2, [r7, #4]
 8008648:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800864a:	230a      	movs	r3, #10
 800864c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800864e:	230a      	movs	r3, #10
 8008650:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8008652:	230a      	movs	r3, #10
 8008654:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8008656:	2300      	movs	r3, #0
 8008658:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800865a:	230a      	movs	r3, #10
 800865c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	83bb      	strh	r3, [r7, #28]
 8008662:	2300      	movs	r3, #0
 8008664:	837b      	strh	r3, [r7, #26]
 8008666:	2300      	movs	r3, #0
 8008668:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800866a:	2300      	movs	r3, #0
 800866c:	843b      	strh	r3, [r7, #32]
 800866e:	e0ae      	b.n	80087ce <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8008670:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008674:	49a6      	ldr	r1, [pc, #664]	; (8008910 <etharp_find_entry+0x2d4>)
 8008676:	4613      	mov	r3, r2
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	4413      	add	r3, r2
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	440b      	add	r3, r1
 8008680:	3314      	adds	r3, #20
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008686:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800868a:	2b0a      	cmp	r3, #10
 800868c:	d105      	bne.n	800869a <etharp_find_entry+0x5e>
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d102      	bne.n	800869a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8008694:	8c3b      	ldrh	r3, [r7, #32]
 8008696:	847b      	strh	r3, [r7, #34]	; 0x22
 8008698:	e095      	b.n	80087c6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 8092 	beq.w	80087c6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d009      	beq.n	80086bc <etharp_find_entry+0x80>
 80086a8:	7dfb      	ldrb	r3, [r7, #23]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d806      	bhi.n	80086bc <etharp_find_entry+0x80>
 80086ae:	4b99      	ldr	r3, [pc, #612]	; (8008914 <etharp_find_entry+0x2d8>)
 80086b0:	f240 1223 	movw	r2, #291	; 0x123
 80086b4:	4998      	ldr	r1, [pc, #608]	; (8008918 <etharp_find_entry+0x2dc>)
 80086b6:	4899      	ldr	r0, [pc, #612]	; (800891c <etharp_find_entry+0x2e0>)
 80086b8:	f00a fc96 	bl	8012fe8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d020      	beq.n	8008704 <etharp_find_entry+0xc8>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6819      	ldr	r1, [r3, #0]
 80086c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80086ca:	4891      	ldr	r0, [pc, #580]	; (8008910 <etharp_find_entry+0x2d4>)
 80086cc:	4613      	mov	r3, r2
 80086ce:	005b      	lsls	r3, r3, #1
 80086d0:	4413      	add	r3, r2
 80086d2:	00db      	lsls	r3, r3, #3
 80086d4:	4403      	add	r3, r0
 80086d6:	3304      	adds	r3, #4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4299      	cmp	r1, r3
 80086dc:	d112      	bne.n	8008704 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00c      	beq.n	80086fe <etharp_find_entry+0xc2>
 80086e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80086e8:	4989      	ldr	r1, [pc, #548]	; (8008910 <etharp_find_entry+0x2d4>)
 80086ea:	4613      	mov	r3, r2
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	4413      	add	r3, r2
 80086f0:	00db      	lsls	r3, r3, #3
 80086f2:	440b      	add	r3, r1
 80086f4:	3308      	adds	r3, #8
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d102      	bne.n	8008704 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80086fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008702:	e100      	b.n	8008906 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d140      	bne.n	800878c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800870a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800870e:	4980      	ldr	r1, [pc, #512]	; (8008910 <etharp_find_entry+0x2d4>)
 8008710:	4613      	mov	r3, r2
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	4413      	add	r3, r2
 8008716:	00db      	lsls	r3, r3, #3
 8008718:	440b      	add	r3, r1
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d01a      	beq.n	8008756 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8008720:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008724:	497a      	ldr	r1, [pc, #488]	; (8008910 <etharp_find_entry+0x2d4>)
 8008726:	4613      	mov	r3, r2
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	4413      	add	r3, r2
 800872c:	00db      	lsls	r3, r3, #3
 800872e:	440b      	add	r3, r1
 8008730:	3312      	adds	r3, #18
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	8bba      	ldrh	r2, [r7, #28]
 8008736:	429a      	cmp	r2, r3
 8008738:	d845      	bhi.n	80087c6 <etharp_find_entry+0x18a>
            old_queue = i;
 800873a:	8c3b      	ldrh	r3, [r7, #32]
 800873c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800873e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008742:	4973      	ldr	r1, [pc, #460]	; (8008910 <etharp_find_entry+0x2d4>)
 8008744:	4613      	mov	r3, r2
 8008746:	005b      	lsls	r3, r3, #1
 8008748:	4413      	add	r3, r2
 800874a:	00db      	lsls	r3, r3, #3
 800874c:	440b      	add	r3, r1
 800874e:	3312      	adds	r3, #18
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	83bb      	strh	r3, [r7, #28]
 8008754:	e037      	b.n	80087c6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8008756:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800875a:	496d      	ldr	r1, [pc, #436]	; (8008910 <etharp_find_entry+0x2d4>)
 800875c:	4613      	mov	r3, r2
 800875e:	005b      	lsls	r3, r3, #1
 8008760:	4413      	add	r3, r2
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	440b      	add	r3, r1
 8008766:	3312      	adds	r3, #18
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	8b7a      	ldrh	r2, [r7, #26]
 800876c:	429a      	cmp	r2, r3
 800876e:	d82a      	bhi.n	80087c6 <etharp_find_entry+0x18a>
            old_pending = i;
 8008770:	8c3b      	ldrh	r3, [r7, #32]
 8008772:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8008774:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008778:	4965      	ldr	r1, [pc, #404]	; (8008910 <etharp_find_entry+0x2d4>)
 800877a:	4613      	mov	r3, r2
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	4413      	add	r3, r2
 8008780:	00db      	lsls	r3, r3, #3
 8008782:	440b      	add	r3, r1
 8008784:	3312      	adds	r3, #18
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	837b      	strh	r3, [r7, #26]
 800878a:	e01c      	b.n	80087c6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d919      	bls.n	80087c6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8008792:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008796:	495e      	ldr	r1, [pc, #376]	; (8008910 <etharp_find_entry+0x2d4>)
 8008798:	4613      	mov	r3, r2
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	4413      	add	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	440b      	add	r3, r1
 80087a2:	3312      	adds	r3, #18
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	8b3a      	ldrh	r2, [r7, #24]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d80c      	bhi.n	80087c6 <etharp_find_entry+0x18a>
            old_stable = i;
 80087ac:	8c3b      	ldrh	r3, [r7, #32]
 80087ae:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80087b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80087b4:	4956      	ldr	r1, [pc, #344]	; (8008910 <etharp_find_entry+0x2d4>)
 80087b6:	4613      	mov	r3, r2
 80087b8:	005b      	lsls	r3, r3, #1
 80087ba:	4413      	add	r3, r2
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	440b      	add	r3, r1
 80087c0:	3312      	adds	r3, #18
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80087c6:	8c3b      	ldrh	r3, [r7, #32]
 80087c8:	3301      	adds	r3, #1
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	843b      	strh	r3, [r7, #32]
 80087ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80087d2:	2b09      	cmp	r3, #9
 80087d4:	f77f af4c 	ble.w	8008670 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80087d8:	7afb      	ldrb	r3, [r7, #11]
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d108      	bne.n	80087f4 <etharp_find_entry+0x1b8>
 80087e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80087e6:	2b0a      	cmp	r3, #10
 80087e8:	d107      	bne.n	80087fa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80087ea:	7afb      	ldrb	r3, [r7, #11]
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d102      	bne.n	80087fa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80087f4:	f04f 33ff 	mov.w	r3, #4294967295
 80087f8:	e085      	b.n	8008906 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80087fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80087fe:	2b09      	cmp	r3, #9
 8008800:	dc02      	bgt.n	8008808 <etharp_find_entry+0x1cc>
    i = empty;
 8008802:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008804:	843b      	strh	r3, [r7, #32]
 8008806:	e039      	b.n	800887c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8008808:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800880c:	2b09      	cmp	r3, #9
 800880e:	dc14      	bgt.n	800883a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8008810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008812:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8008814:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008818:	493d      	ldr	r1, [pc, #244]	; (8008910 <etharp_find_entry+0x2d4>)
 800881a:	4613      	mov	r3, r2
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	4413      	add	r3, r2
 8008820:	00db      	lsls	r3, r3, #3
 8008822:	440b      	add	r3, r1
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d018      	beq.n	800885c <etharp_find_entry+0x220>
 800882a:	4b3a      	ldr	r3, [pc, #232]	; (8008914 <etharp_find_entry+0x2d8>)
 800882c:	f240 126d 	movw	r2, #365	; 0x16d
 8008830:	493b      	ldr	r1, [pc, #236]	; (8008920 <etharp_find_entry+0x2e4>)
 8008832:	483a      	ldr	r0, [pc, #232]	; (800891c <etharp_find_entry+0x2e0>)
 8008834:	f00a fbd8 	bl	8012fe8 <iprintf>
 8008838:	e010      	b.n	800885c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800883a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800883e:	2b09      	cmp	r3, #9
 8008840:	dc02      	bgt.n	8008848 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8008842:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008844:	843b      	strh	r3, [r7, #32]
 8008846:	e009      	b.n	800885c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8008848:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800884c:	2b09      	cmp	r3, #9
 800884e:	dc02      	bgt.n	8008856 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8008850:	8bfb      	ldrh	r3, [r7, #30]
 8008852:	843b      	strh	r3, [r7, #32]
 8008854:	e002      	b.n	800885c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8008856:	f04f 33ff 	mov.w	r3, #4294967295
 800885a:	e054      	b.n	8008906 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800885c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008860:	2b09      	cmp	r3, #9
 8008862:	dd06      	ble.n	8008872 <etharp_find_entry+0x236>
 8008864:	4b2b      	ldr	r3, [pc, #172]	; (8008914 <etharp_find_entry+0x2d8>)
 8008866:	f240 127f 	movw	r2, #383	; 0x17f
 800886a:	492e      	ldr	r1, [pc, #184]	; (8008924 <etharp_find_entry+0x2e8>)
 800886c:	482b      	ldr	r0, [pc, #172]	; (800891c <etharp_find_entry+0x2e0>)
 800886e:	f00a fbbb 	bl	8012fe8 <iprintf>
    etharp_free_entry(i);
 8008872:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008876:	4618      	mov	r0, r3
 8008878:	f7ff fe06 	bl	8008488 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800887c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008880:	2b09      	cmp	r3, #9
 8008882:	dd06      	ble.n	8008892 <etharp_find_entry+0x256>
 8008884:	4b23      	ldr	r3, [pc, #140]	; (8008914 <etharp_find_entry+0x2d8>)
 8008886:	f240 1283 	movw	r2, #387	; 0x183
 800888a:	4926      	ldr	r1, [pc, #152]	; (8008924 <etharp_find_entry+0x2e8>)
 800888c:	4823      	ldr	r0, [pc, #140]	; (800891c <etharp_find_entry+0x2e0>)
 800888e:	f00a fbab 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8008892:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008896:	491e      	ldr	r1, [pc, #120]	; (8008910 <etharp_find_entry+0x2d4>)
 8008898:	4613      	mov	r3, r2
 800889a:	005b      	lsls	r3, r3, #1
 800889c:	4413      	add	r3, r2
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	440b      	add	r3, r1
 80088a2:	3314      	adds	r3, #20
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d006      	beq.n	80088b8 <etharp_find_entry+0x27c>
 80088aa:	4b1a      	ldr	r3, [pc, #104]	; (8008914 <etharp_find_entry+0x2d8>)
 80088ac:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80088b0:	491d      	ldr	r1, [pc, #116]	; (8008928 <etharp_find_entry+0x2ec>)
 80088b2:	481a      	ldr	r0, [pc, #104]	; (800891c <etharp_find_entry+0x2e0>)
 80088b4:	f00a fb98 	bl	8012fe8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00b      	beq.n	80088d6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80088be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6819      	ldr	r1, [r3, #0]
 80088c6:	4812      	ldr	r0, [pc, #72]	; (8008910 <etharp_find_entry+0x2d4>)
 80088c8:	4613      	mov	r3, r2
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	4413      	add	r3, r2
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	4403      	add	r3, r0
 80088d2:	3304      	adds	r3, #4
 80088d4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80088d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80088da:	490d      	ldr	r1, [pc, #52]	; (8008910 <etharp_find_entry+0x2d4>)
 80088dc:	4613      	mov	r3, r2
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	4413      	add	r3, r2
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	440b      	add	r3, r1
 80088e6:	3312      	adds	r3, #18
 80088e8:	2200      	movs	r2, #0
 80088ea:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80088ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80088f0:	4907      	ldr	r1, [pc, #28]	; (8008910 <etharp_find_entry+0x2d4>)
 80088f2:	4613      	mov	r3, r2
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	4413      	add	r3, r2
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	440b      	add	r3, r1
 80088fc:	3308      	adds	r3, #8
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8008902:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3728      	adds	r7, #40	; 0x28
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	24004288 	.word	0x24004288
 8008914:	08014520 	.word	0x08014520
 8008918:	080145ac 	.word	0x080145ac
 800891c:	080145ec 	.word	0x080145ec
 8008920:	08014614 	.word	0x08014614
 8008924:	0801462c 	.word	0x0801462c
 8008928:	08014640 	.word	0x08014640

0800892c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b088      	sub	sp, #32
 8008930:	af02      	add	r7, sp, #8
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008940:	2b06      	cmp	r3, #6
 8008942:	d006      	beq.n	8008952 <etharp_update_arp_entry+0x26>
 8008944:	4b48      	ldr	r3, [pc, #288]	; (8008a68 <etharp_update_arp_entry+0x13c>)
 8008946:	f240 12a9 	movw	r2, #425	; 0x1a9
 800894a:	4948      	ldr	r1, [pc, #288]	; (8008a6c <etharp_update_arp_entry+0x140>)
 800894c:	4848      	ldr	r0, [pc, #288]	; (8008a70 <etharp_update_arp_entry+0x144>)
 800894e:	f00a fb4b 	bl	8012fe8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d012      	beq.n	800897e <etharp_update_arp_entry+0x52>
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00e      	beq.n	800897e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68f9      	ldr	r1, [r7, #12]
 8008966:	4618      	mov	r0, r3
 8008968:	f001 face 	bl	8009f08 <ip4_addr_isbroadcast_u32>
 800896c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800896e:	2b00      	cmp	r3, #0
 8008970:	d105      	bne.n	800897e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800897a:	2be0      	cmp	r3, #224	; 0xe0
 800897c:	d102      	bne.n	8008984 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800897e:	f06f 030f 	mvn.w	r3, #15
 8008982:	e06c      	b.n	8008a5e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	4619      	mov	r1, r3
 800898a:	68b8      	ldr	r0, [r7, #8]
 800898c:	f7ff fe56 	bl	800863c <etharp_find_entry>
 8008990:	4603      	mov	r3, r0
 8008992:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8008994:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008998:	2b00      	cmp	r3, #0
 800899a:	da02      	bge.n	80089a2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800899c:	8afb      	ldrh	r3, [r7, #22]
 800899e:	b25b      	sxtb	r3, r3
 80089a0:	e05d      	b.n	8008a5e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80089a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80089a6:	4933      	ldr	r1, [pc, #204]	; (8008a74 <etharp_update_arp_entry+0x148>)
 80089a8:	4613      	mov	r3, r2
 80089aa:	005b      	lsls	r3, r3, #1
 80089ac:	4413      	add	r3, r2
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	440b      	add	r3, r1
 80089b2:	3314      	adds	r3, #20
 80089b4:	2202      	movs	r2, #2
 80089b6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80089b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80089bc:	492d      	ldr	r1, [pc, #180]	; (8008a74 <etharp_update_arp_entry+0x148>)
 80089be:	4613      	mov	r3, r2
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	4413      	add	r3, r2
 80089c4:	00db      	lsls	r3, r3, #3
 80089c6:	440b      	add	r3, r1
 80089c8:	3308      	adds	r3, #8
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80089ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80089d2:	4613      	mov	r3, r2
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	4413      	add	r3, r2
 80089d8:	00db      	lsls	r3, r3, #3
 80089da:	3308      	adds	r3, #8
 80089dc:	4a25      	ldr	r2, [pc, #148]	; (8008a74 <etharp_update_arp_entry+0x148>)
 80089de:	4413      	add	r3, r2
 80089e0:	3304      	adds	r3, #4
 80089e2:	2206      	movs	r2, #6
 80089e4:	6879      	ldr	r1, [r7, #4]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f00a face 	bl	8012f88 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80089ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80089f0:	4920      	ldr	r1, [pc, #128]	; (8008a74 <etharp_update_arp_entry+0x148>)
 80089f2:	4613      	mov	r3, r2
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	4413      	add	r3, r2
 80089f8:	00db      	lsls	r3, r3, #3
 80089fa:	440b      	add	r3, r1
 80089fc:	3312      	adds	r3, #18
 80089fe:	2200      	movs	r2, #0
 8008a00:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8008a02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008a06:	491b      	ldr	r1, [pc, #108]	; (8008a74 <etharp_update_arp_entry+0x148>)
 8008a08:	4613      	mov	r3, r2
 8008a0a:	005b      	lsls	r3, r3, #1
 8008a0c:	4413      	add	r3, r2
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	440b      	add	r3, r1
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d021      	beq.n	8008a5c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8008a18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008a1c:	4915      	ldr	r1, [pc, #84]	; (8008a74 <etharp_update_arp_entry+0x148>)
 8008a1e:	4613      	mov	r3, r2
 8008a20:	005b      	lsls	r3, r3, #1
 8008a22:	4413      	add	r3, r2
 8008a24:	00db      	lsls	r3, r3, #3
 8008a26:	440b      	add	r3, r1
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8008a2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008a30:	4910      	ldr	r1, [pc, #64]	; (8008a74 <etharp_update_arp_entry+0x148>)
 8008a32:	4613      	mov	r3, r2
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	4413      	add	r3, r2
 8008a38:	00db      	lsls	r3, r3, #3
 8008a3a:	440b      	add	r3, r1
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8008a46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6939      	ldr	r1, [r7, #16]
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 fcf3 	bl	800943c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8008a56:	6938      	ldr	r0, [r7, #16]
 8008a58:	f003 fc8e 	bl	800c378 <pbuf_free>
  }
  return ERR_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	08014520 	.word	0x08014520
 8008a6c:	0801466c 	.word	0x0801466c
 8008a70:	080145ec 	.word	0x080145ec
 8008a74:	24004288 	.word	0x24004288

08008a78 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008a80:	2300      	movs	r3, #0
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	e01e      	b.n	8008ac4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8008a86:	4913      	ldr	r1, [pc, #76]	; (8008ad4 <etharp_cleanup_netif+0x5c>)
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	4413      	add	r3, r2
 8008a90:	00db      	lsls	r3, r3, #3
 8008a92:	440b      	add	r3, r1
 8008a94:	3314      	adds	r3, #20
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8008a9a:	7afb      	ldrb	r3, [r7, #11]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00e      	beq.n	8008abe <etharp_cleanup_netif+0x46>
 8008aa0:	490c      	ldr	r1, [pc, #48]	; (8008ad4 <etharp_cleanup_netif+0x5c>)
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	4413      	add	r3, r2
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	440b      	add	r3, r1
 8008aae:	3308      	adds	r3, #8
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d102      	bne.n	8008abe <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f7ff fce5 	bl	8008488 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b09      	cmp	r3, #9
 8008ac8:	dddd      	ble.n	8008a86 <etharp_cleanup_netif+0xe>
    }
  }
}
 8008aca:	bf00      	nop
 8008acc:	bf00      	nop
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	24004288 	.word	0x24004288

08008ad8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8008ad8:	b5b0      	push	{r4, r5, r7, lr}
 8008ada:	b08a      	sub	sp, #40	; 0x28
 8008adc:	af04      	add	r7, sp, #16
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d107      	bne.n	8008af8 <etharp_input+0x20>
 8008ae8:	4b3d      	ldr	r3, [pc, #244]	; (8008be0 <etharp_input+0x108>)
 8008aea:	f240 228a 	movw	r2, #650	; 0x28a
 8008aee:	493d      	ldr	r1, [pc, #244]	; (8008be4 <etharp_input+0x10c>)
 8008af0:	483d      	ldr	r0, [pc, #244]	; (8008be8 <etharp_input+0x110>)
 8008af2:	f00a fa79 	bl	8012fe8 <iprintf>
 8008af6:	e06f      	b.n	8008bd8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	881b      	ldrh	r3, [r3, #0]
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b08:	d10c      	bne.n	8008b24 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008b0e:	2b06      	cmp	r3, #6
 8008b10:	d108      	bne.n	8008b24 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008b16:	2b04      	cmp	r3, #4
 8008b18:	d104      	bne.n	8008b24 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	885b      	ldrh	r3, [r3, #2]
 8008b1e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008b20:	2b08      	cmp	r3, #8
 8008b22:	d003      	beq.n	8008b2c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f003 fc27 	bl	800c378 <pbuf_free>
    return;
 8008b2a:	e055      	b.n	8008bd8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	330e      	adds	r3, #14
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	3318      	adds	r3, #24
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d102      	bne.n	8008b4c <etharp_input+0x74>
    for_us = 0;
 8008b46:	2300      	movs	r3, #0
 8008b48:	75fb      	strb	r3, [r7, #23]
 8008b4a:	e009      	b.n	8008b60 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	3304      	adds	r3, #4
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	bf0c      	ite	eq
 8008b58:	2301      	moveq	r3, #1
 8008b5a:	2300      	movne	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f103 0208 	add.w	r2, r3, #8
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d001      	beq.n	8008b70 <etharp_input+0x98>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e000      	b.n	8008b72 <etharp_input+0x9a>
 8008b70:	2302      	movs	r3, #2
 8008b72:	f107 010c 	add.w	r1, r7, #12
 8008b76:	6838      	ldr	r0, [r7, #0]
 8008b78:	f7ff fed8 	bl	800892c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	88db      	ldrh	r3, [r3, #6]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b86:	d003      	beq.n	8008b90 <etharp_input+0xb8>
 8008b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b8c:	d01e      	beq.n	8008bcc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8008b8e:	e020      	b.n	8008bd2 <etharp_input+0xfa>
      if (for_us) {
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d01c      	beq.n	8008bd0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	3208      	adds	r2, #8
        etharp_raw(netif,
 8008bb0:	2102      	movs	r1, #2
 8008bb2:	9103      	str	r1, [sp, #12]
 8008bb4:	f107 010c 	add.w	r1, r7, #12
 8008bb8:	9102      	str	r1, [sp, #8]
 8008bba:	9201      	str	r2, [sp, #4]
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	462b      	mov	r3, r5
 8008bc0:	4622      	mov	r2, r4
 8008bc2:	4601      	mov	r1, r0
 8008bc4:	6838      	ldr	r0, [r7, #0]
 8008bc6:	f000 faeb 	bl	80091a0 <etharp_raw>
      break;
 8008bca:	e001      	b.n	8008bd0 <etharp_input+0xf8>
      break;
 8008bcc:	bf00      	nop
 8008bce:	e000      	b.n	8008bd2 <etharp_input+0xfa>
      break;
 8008bd0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f003 fbd0 	bl	800c378 <pbuf_free>
}
 8008bd8:	3718      	adds	r7, #24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8008bde:	bf00      	nop
 8008be0:	08014520 	.word	0x08014520
 8008be4:	080146c4 	.word	0x080146c4
 8008be8:	080145ec 	.word	0x080145ec

08008bec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af02      	add	r7, sp, #8
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008bfa:	79fa      	ldrb	r2, [r7, #7]
 8008bfc:	4944      	ldr	r1, [pc, #272]	; (8008d10 <etharp_output_to_arp_index+0x124>)
 8008bfe:	4613      	mov	r3, r2
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	4413      	add	r3, r2
 8008c04:	00db      	lsls	r3, r3, #3
 8008c06:	440b      	add	r3, r1
 8008c08:	3314      	adds	r3, #20
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d806      	bhi.n	8008c1e <etharp_output_to_arp_index+0x32>
 8008c10:	4b40      	ldr	r3, [pc, #256]	; (8008d14 <etharp_output_to_arp_index+0x128>)
 8008c12:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008c16:	4940      	ldr	r1, [pc, #256]	; (8008d18 <etharp_output_to_arp_index+0x12c>)
 8008c18:	4840      	ldr	r0, [pc, #256]	; (8008d1c <etharp_output_to_arp_index+0x130>)
 8008c1a:	f00a f9e5 	bl	8012fe8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008c1e:	79fa      	ldrb	r2, [r7, #7]
 8008c20:	493b      	ldr	r1, [pc, #236]	; (8008d10 <etharp_output_to_arp_index+0x124>)
 8008c22:	4613      	mov	r3, r2
 8008c24:	005b      	lsls	r3, r3, #1
 8008c26:	4413      	add	r3, r2
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	440b      	add	r3, r1
 8008c2c:	3314      	adds	r3, #20
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d153      	bne.n	8008cdc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8008c34:	79fa      	ldrb	r2, [r7, #7]
 8008c36:	4936      	ldr	r1, [pc, #216]	; (8008d10 <etharp_output_to_arp_index+0x124>)
 8008c38:	4613      	mov	r3, r2
 8008c3a:	005b      	lsls	r3, r3, #1
 8008c3c:	4413      	add	r3, r2
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	440b      	add	r3, r1
 8008c42:	3312      	adds	r3, #18
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8008c4a:	d919      	bls.n	8008c80 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8008c4c:	79fa      	ldrb	r2, [r7, #7]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	005b      	lsls	r3, r3, #1
 8008c52:	4413      	add	r3, r2
 8008c54:	00db      	lsls	r3, r3, #3
 8008c56:	4a2e      	ldr	r2, [pc, #184]	; (8008d10 <etharp_output_to_arp_index+0x124>)
 8008c58:	4413      	add	r3, r2
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 fb4c 	bl	80092fc <etharp_request>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d138      	bne.n	8008cdc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008c6a:	79fa      	ldrb	r2, [r7, #7]
 8008c6c:	4928      	ldr	r1, [pc, #160]	; (8008d10 <etharp_output_to_arp_index+0x124>)
 8008c6e:	4613      	mov	r3, r2
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	4413      	add	r3, r2
 8008c74:	00db      	lsls	r3, r3, #3
 8008c76:	440b      	add	r3, r1
 8008c78:	3314      	adds	r3, #20
 8008c7a:	2203      	movs	r2, #3
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	e02d      	b.n	8008cdc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8008c80:	79fa      	ldrb	r2, [r7, #7]
 8008c82:	4923      	ldr	r1, [pc, #140]	; (8008d10 <etharp_output_to_arp_index+0x124>)
 8008c84:	4613      	mov	r3, r2
 8008c86:	005b      	lsls	r3, r3, #1
 8008c88:	4413      	add	r3, r2
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	440b      	add	r3, r1
 8008c8e:	3312      	adds	r3, #18
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008c96:	d321      	bcc.n	8008cdc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008c98:	79fa      	ldrb	r2, [r7, #7]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	005b      	lsls	r3, r3, #1
 8008c9e:	4413      	add	r3, r2
 8008ca0:	00db      	lsls	r3, r3, #3
 8008ca2:	4a1b      	ldr	r2, [pc, #108]	; (8008d10 <etharp_output_to_arp_index+0x124>)
 8008ca4:	4413      	add	r3, r2
 8008ca6:	1d19      	adds	r1, r3, #4
 8008ca8:	79fa      	ldrb	r2, [r7, #7]
 8008caa:	4613      	mov	r3, r2
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	4413      	add	r3, r2
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	4a16      	ldr	r2, [pc, #88]	; (8008d10 <etharp_output_to_arp_index+0x124>)
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3304      	adds	r3, #4
 8008cba:	461a      	mov	r2, r3
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 fafb 	bl	80092b8 <etharp_request_dst>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d109      	bne.n	8008cdc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008cc8:	79fa      	ldrb	r2, [r7, #7]
 8008cca:	4911      	ldr	r1, [pc, #68]	; (8008d10 <etharp_output_to_arp_index+0x124>)
 8008ccc:	4613      	mov	r3, r2
 8008cce:	005b      	lsls	r3, r3, #1
 8008cd0:	4413      	add	r3, r2
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	440b      	add	r3, r1
 8008cd6:	3314      	adds	r3, #20
 8008cd8:	2203      	movs	r2, #3
 8008cda:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8008ce2:	79fa      	ldrb	r2, [r7, #7]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	005b      	lsls	r3, r3, #1
 8008ce8:	4413      	add	r3, r2
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	3308      	adds	r3, #8
 8008cee:	4a08      	ldr	r2, [pc, #32]	; (8008d10 <etharp_output_to_arp_index+0x124>)
 8008cf0:	4413      	add	r3, r2
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cf8:	9200      	str	r2, [sp, #0]
 8008cfa:	460a      	mov	r2, r1
 8008cfc:	68b9      	ldr	r1, [r7, #8]
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f000 fb9c 	bl	800943c <ethernet_output>
 8008d04:	4603      	mov	r3, r0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	24004288 	.word	0x24004288
 8008d14:	08014520 	.word	0x08014520
 8008d18:	080146e4 	.word	0x080146e4
 8008d1c:	080145ec 	.word	0x080145ec

08008d20 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b08a      	sub	sp, #40	; 0x28
 8008d24:	af02      	add	r7, sp, #8
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d106      	bne.n	8008d44 <etharp_output+0x24>
 8008d36:	4b73      	ldr	r3, [pc, #460]	; (8008f04 <etharp_output+0x1e4>)
 8008d38:	f240 321e 	movw	r2, #798	; 0x31e
 8008d3c:	4972      	ldr	r1, [pc, #456]	; (8008f08 <etharp_output+0x1e8>)
 8008d3e:	4873      	ldr	r0, [pc, #460]	; (8008f0c <etharp_output+0x1ec>)
 8008d40:	f00a f952 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d106      	bne.n	8008d58 <etharp_output+0x38>
 8008d4a:	4b6e      	ldr	r3, [pc, #440]	; (8008f04 <etharp_output+0x1e4>)
 8008d4c:	f240 321f 	movw	r2, #799	; 0x31f
 8008d50:	496f      	ldr	r1, [pc, #444]	; (8008f10 <etharp_output+0x1f0>)
 8008d52:	486e      	ldr	r0, [pc, #440]	; (8008f0c <etharp_output+0x1ec>)
 8008d54:	f00a f948 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d106      	bne.n	8008d6c <etharp_output+0x4c>
 8008d5e:	4b69      	ldr	r3, [pc, #420]	; (8008f04 <etharp_output+0x1e4>)
 8008d60:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008d64:	496b      	ldr	r1, [pc, #428]	; (8008f14 <etharp_output+0x1f4>)
 8008d66:	4869      	ldr	r0, [pc, #420]	; (8008f0c <etharp_output+0x1ec>)
 8008d68:	f00a f93e 	bl	8012fe8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68f9      	ldr	r1, [r7, #12]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f001 f8c8 	bl	8009f08 <ip4_addr_isbroadcast_u32>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8008d7e:	4b66      	ldr	r3, [pc, #408]	; (8008f18 <etharp_output+0x1f8>)
 8008d80:	61fb      	str	r3, [r7, #28]
 8008d82:	e0af      	b.n	8008ee4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d8c:	2be0      	cmp	r3, #224	; 0xe0
 8008d8e:	d118      	bne.n	8008dc2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008d90:	2301      	movs	r3, #1
 8008d92:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8008d94:	2300      	movs	r3, #0
 8008d96:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8008d98:	235e      	movs	r3, #94	; 0x5e
 8008d9a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	3302      	adds	r3, #2
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3303      	adds	r3, #3
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8008dba:	f107 0310 	add.w	r3, r7, #16
 8008dbe:	61fb      	str	r3, [r7, #28]
 8008dc0:	e090      	b.n	8008ee4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	3304      	adds	r3, #4
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	405a      	eors	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d012      	beq.n	8008e00 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008de0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d00b      	beq.n	8008e00 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	330c      	adds	r3, #12
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d003      	beq.n	8008dfa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	330c      	adds	r3, #12
 8008df6:	61bb      	str	r3, [r7, #24]
 8008df8:	e002      	b.n	8008e00 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8008dfa:	f06f 0303 	mvn.w	r3, #3
 8008dfe:	e07d      	b.n	8008efc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008e00:	4b46      	ldr	r3, [pc, #280]	; (8008f1c <etharp_output+0x1fc>)
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	4619      	mov	r1, r3
 8008e06:	4a46      	ldr	r2, [pc, #280]	; (8008f20 <etharp_output+0x200>)
 8008e08:	460b      	mov	r3, r1
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	440b      	add	r3, r1
 8008e0e:	00db      	lsls	r3, r3, #3
 8008e10:	4413      	add	r3, r2
 8008e12:	3314      	adds	r3, #20
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d925      	bls.n	8008e66 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008e1a:	4b40      	ldr	r3, [pc, #256]	; (8008f1c <etharp_output+0x1fc>)
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	4a3f      	ldr	r2, [pc, #252]	; (8008f20 <etharp_output+0x200>)
 8008e22:	460b      	mov	r3, r1
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	440b      	add	r3, r1
 8008e28:	00db      	lsls	r3, r3, #3
 8008e2a:	4413      	add	r3, r2
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d117      	bne.n	8008e66 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	4b38      	ldr	r3, [pc, #224]	; (8008f1c <etharp_output+0x1fc>)
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	4937      	ldr	r1, [pc, #220]	; (8008f20 <etharp_output+0x200>)
 8008e42:	4603      	mov	r3, r0
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	4403      	add	r3, r0
 8008e48:	00db      	lsls	r3, r3, #3
 8008e4a:	440b      	add	r3, r1
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d108      	bne.n	8008e66 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8008e54:	4b31      	ldr	r3, [pc, #196]	; (8008f1c <etharp_output+0x1fc>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	68b9      	ldr	r1, [r7, #8]
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f7ff fec5 	bl	8008bec <etharp_output_to_arp_index>
 8008e62:	4603      	mov	r3, r0
 8008e64:	e04a      	b.n	8008efc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008e66:	2300      	movs	r3, #0
 8008e68:	75fb      	strb	r3, [r7, #23]
 8008e6a:	e031      	b.n	8008ed0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008e6c:	7dfa      	ldrb	r2, [r7, #23]
 8008e6e:	492c      	ldr	r1, [pc, #176]	; (8008f20 <etharp_output+0x200>)
 8008e70:	4613      	mov	r3, r2
 8008e72:	005b      	lsls	r3, r3, #1
 8008e74:	4413      	add	r3, r2
 8008e76:	00db      	lsls	r3, r3, #3
 8008e78:	440b      	add	r3, r1
 8008e7a:	3314      	adds	r3, #20
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d923      	bls.n	8008eca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8008e82:	7dfa      	ldrb	r2, [r7, #23]
 8008e84:	4926      	ldr	r1, [pc, #152]	; (8008f20 <etharp_output+0x200>)
 8008e86:	4613      	mov	r3, r2
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	4413      	add	r3, r2
 8008e8c:	00db      	lsls	r3, r3, #3
 8008e8e:	440b      	add	r3, r1
 8008e90:	3308      	adds	r3, #8
 8008e92:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d117      	bne.n	8008eca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	6819      	ldr	r1, [r3, #0]
 8008e9e:	7dfa      	ldrb	r2, [r7, #23]
 8008ea0:	481f      	ldr	r0, [pc, #124]	; (8008f20 <etharp_output+0x200>)
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	005b      	lsls	r3, r3, #1
 8008ea6:	4413      	add	r3, r2
 8008ea8:	00db      	lsls	r3, r3, #3
 8008eaa:	4403      	add	r3, r0
 8008eac:	3304      	adds	r3, #4
 8008eae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8008eb0:	4299      	cmp	r1, r3
 8008eb2:	d10a      	bne.n	8008eca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8008eb4:	4a19      	ldr	r2, [pc, #100]	; (8008f1c <etharp_output+0x1fc>)
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7ff fe93 	bl	8008bec <etharp_output_to_arp_index>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	e018      	b.n	8008efc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	75fb      	strb	r3, [r7, #23]
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
 8008ed2:	2b09      	cmp	r3, #9
 8008ed4:	d9ca      	bls.n	8008e6c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	69b9      	ldr	r1, [r7, #24]
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f000 f822 	bl	8008f24 <etharp_query>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	e00b      	b.n	8008efc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8008eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	68b9      	ldr	r1, [r7, #8]
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f000 faa1 	bl	800943c <ethernet_output>
 8008efa:	4603      	mov	r3, r0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3720      	adds	r7, #32
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	08014520 	.word	0x08014520
 8008f08:	080146c4 	.word	0x080146c4
 8008f0c:	080145ec 	.word	0x080145ec
 8008f10:	08014714 	.word	0x08014714
 8008f14:	080146b4 	.word	0x080146b4
 8008f18:	080174a0 	.word	0x080174a0
 8008f1c:	24004378 	.word	0x24004378
 8008f20:	24004288 	.word	0x24004288

08008f24 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08c      	sub	sp, #48	; 0x30
 8008f28:	af02      	add	r7, sp, #8
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	3326      	adds	r3, #38	; 0x26
 8008f34:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8008f36:	23ff      	movs	r3, #255	; 0xff
 8008f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68f9      	ldr	r1, [r7, #12]
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 ffde 	bl	8009f08 <ip4_addr_isbroadcast_u32>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d10c      	bne.n	8008f6c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008f5a:	2be0      	cmp	r3, #224	; 0xe0
 8008f5c:	d006      	beq.n	8008f6c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d003      	beq.n	8008f6c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d102      	bne.n	8008f72 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8008f6c:	f06f 030f 	mvn.w	r3, #15
 8008f70:	e101      	b.n	8009176 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	2101      	movs	r1, #1
 8008f76:	68b8      	ldr	r0, [r7, #8]
 8008f78:	f7ff fb60 	bl	800863c <etharp_find_entry>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8008f80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	da02      	bge.n	8008f8e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8008f88:	8a7b      	ldrh	r3, [r7, #18]
 8008f8a:	b25b      	sxtb	r3, r3
 8008f8c:	e0f3      	b.n	8009176 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8008f8e:	8a7b      	ldrh	r3, [r7, #18]
 8008f90:	2b7e      	cmp	r3, #126	; 0x7e
 8008f92:	d906      	bls.n	8008fa2 <etharp_query+0x7e>
 8008f94:	4b7a      	ldr	r3, [pc, #488]	; (8009180 <etharp_query+0x25c>)
 8008f96:	f240 32c1 	movw	r2, #961	; 0x3c1
 8008f9a:	497a      	ldr	r1, [pc, #488]	; (8009184 <etharp_query+0x260>)
 8008f9c:	487a      	ldr	r0, [pc, #488]	; (8009188 <etharp_query+0x264>)
 8008f9e:	f00a f823 	bl	8012fe8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8008fa2:	8a7b      	ldrh	r3, [r7, #18]
 8008fa4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8008fa6:	7c7a      	ldrb	r2, [r7, #17]
 8008fa8:	4978      	ldr	r1, [pc, #480]	; (800918c <etharp_query+0x268>)
 8008faa:	4613      	mov	r3, r2
 8008fac:	005b      	lsls	r3, r3, #1
 8008fae:	4413      	add	r3, r2
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	440b      	add	r3, r1
 8008fb4:	3314      	adds	r3, #20
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d115      	bne.n	8008fe8 <etharp_query+0xc4>
    is_new_entry = 1;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8008fc0:	7c7a      	ldrb	r2, [r7, #17]
 8008fc2:	4972      	ldr	r1, [pc, #456]	; (800918c <etharp_query+0x268>)
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	005b      	lsls	r3, r3, #1
 8008fc8:	4413      	add	r3, r2
 8008fca:	00db      	lsls	r3, r3, #3
 8008fcc:	440b      	add	r3, r1
 8008fce:	3314      	adds	r3, #20
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8008fd4:	7c7a      	ldrb	r2, [r7, #17]
 8008fd6:	496d      	ldr	r1, [pc, #436]	; (800918c <etharp_query+0x268>)
 8008fd8:	4613      	mov	r3, r2
 8008fda:	005b      	lsls	r3, r3, #1
 8008fdc:	4413      	add	r3, r2
 8008fde:	00db      	lsls	r3, r3, #3
 8008fe0:	440b      	add	r3, r1
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8008fe8:	7c7a      	ldrb	r2, [r7, #17]
 8008fea:	4968      	ldr	r1, [pc, #416]	; (800918c <etharp_query+0x268>)
 8008fec:	4613      	mov	r3, r2
 8008fee:	005b      	lsls	r3, r3, #1
 8008ff0:	4413      	add	r3, r2
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	440b      	add	r3, r1
 8008ff6:	3314      	adds	r3, #20
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d011      	beq.n	8009022 <etharp_query+0xfe>
 8008ffe:	7c7a      	ldrb	r2, [r7, #17]
 8009000:	4962      	ldr	r1, [pc, #392]	; (800918c <etharp_query+0x268>)
 8009002:	4613      	mov	r3, r2
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	4413      	add	r3, r2
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	440b      	add	r3, r1
 800900c:	3314      	adds	r3, #20
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d806      	bhi.n	8009022 <etharp_query+0xfe>
 8009014:	4b5a      	ldr	r3, [pc, #360]	; (8009180 <etharp_query+0x25c>)
 8009016:	f240 32cd 	movw	r2, #973	; 0x3cd
 800901a:	495d      	ldr	r1, [pc, #372]	; (8009190 <etharp_query+0x26c>)
 800901c:	485a      	ldr	r0, [pc, #360]	; (8009188 <etharp_query+0x264>)
 800901e:	f009 ffe3 	bl	8012fe8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d102      	bne.n	800902e <etharp_query+0x10a>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10c      	bne.n	8009048 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800902e:	68b9      	ldr	r1, [r7, #8]
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 f963 	bl	80092fc <etharp_request>
 8009036:	4603      	mov	r3, r0
 8009038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d102      	bne.n	8009048 <etharp_query+0x124>
      return result;
 8009042:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009046:	e096      	b.n	8009176 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d106      	bne.n	800905c <etharp_query+0x138>
 800904e:	4b4c      	ldr	r3, [pc, #304]	; (8009180 <etharp_query+0x25c>)
 8009050:	f240 32e1 	movw	r2, #993	; 0x3e1
 8009054:	494f      	ldr	r1, [pc, #316]	; (8009194 <etharp_query+0x270>)
 8009056:	484c      	ldr	r0, [pc, #304]	; (8009188 <etharp_query+0x264>)
 8009058:	f009 ffc6 	bl	8012fe8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800905c:	7c7a      	ldrb	r2, [r7, #17]
 800905e:	494b      	ldr	r1, [pc, #300]	; (800918c <etharp_query+0x268>)
 8009060:	4613      	mov	r3, r2
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	4413      	add	r3, r2
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	440b      	add	r3, r1
 800906a:	3314      	adds	r3, #20
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d917      	bls.n	80090a2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8009072:	4a49      	ldr	r2, [pc, #292]	; (8009198 <etharp_query+0x274>)
 8009074:	7c7b      	ldrb	r3, [r7, #17]
 8009076:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8009078:	7c7a      	ldrb	r2, [r7, #17]
 800907a:	4613      	mov	r3, r2
 800907c:	005b      	lsls	r3, r3, #1
 800907e:	4413      	add	r3, r2
 8009080:	00db      	lsls	r3, r3, #3
 8009082:	3308      	adds	r3, #8
 8009084:	4a41      	ldr	r2, [pc, #260]	; (800918c <etharp_query+0x268>)
 8009086:	4413      	add	r3, r2
 8009088:	3304      	adds	r3, #4
 800908a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800908e:	9200      	str	r2, [sp, #0]
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	6879      	ldr	r1, [r7, #4]
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f000 f9d1 	bl	800943c <ethernet_output>
 800909a:	4603      	mov	r3, r0
 800909c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090a0:	e067      	b.n	8009172 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80090a2:	7c7a      	ldrb	r2, [r7, #17]
 80090a4:	4939      	ldr	r1, [pc, #228]	; (800918c <etharp_query+0x268>)
 80090a6:	4613      	mov	r3, r2
 80090a8:	005b      	lsls	r3, r3, #1
 80090aa:	4413      	add	r3, r2
 80090ac:	00db      	lsls	r3, r3, #3
 80090ae:	440b      	add	r3, r1
 80090b0:	3314      	adds	r3, #20
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d15c      	bne.n	8009172 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	61fb      	str	r3, [r7, #28]
    while (p) {
 80090c0:	e01c      	b.n	80090fc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	895a      	ldrh	r2, [r3, #10]
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	891b      	ldrh	r3, [r3, #8]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d10a      	bne.n	80090e4 <etharp_query+0x1c0>
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d006      	beq.n	80090e4 <etharp_query+0x1c0>
 80090d6:	4b2a      	ldr	r3, [pc, #168]	; (8009180 <etharp_query+0x25c>)
 80090d8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80090dc:	492f      	ldr	r1, [pc, #188]	; (800919c <etharp_query+0x278>)
 80090de:	482a      	ldr	r0, [pc, #168]	; (8009188 <etharp_query+0x264>)
 80090e0:	f009 ff82 	bl	8012fe8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	7b1b      	ldrb	r3, [r3, #12]
 80090e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <etharp_query+0x1d2>
        copy_needed = 1;
 80090f0:	2301      	movs	r3, #1
 80090f2:	61bb      	str	r3, [r7, #24]
        break;
 80090f4:	e005      	b.n	8009102 <etharp_query+0x1de>
      }
      p = p->next;
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1df      	bne.n	80090c2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d007      	beq.n	8009118 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800910e:	200e      	movs	r0, #14
 8009110:	f003 fc3c 	bl	800c98c <pbuf_clone>
 8009114:	61f8      	str	r0, [r7, #28]
 8009116:	e004      	b.n	8009122 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800911c:	69f8      	ldr	r0, [r7, #28]
 800911e:	f003 f9d1 	bl	800c4c4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d021      	beq.n	800916c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8009128:	7c7a      	ldrb	r2, [r7, #17]
 800912a:	4918      	ldr	r1, [pc, #96]	; (800918c <etharp_query+0x268>)
 800912c:	4613      	mov	r3, r2
 800912e:	005b      	lsls	r3, r3, #1
 8009130:	4413      	add	r3, r2
 8009132:	00db      	lsls	r3, r3, #3
 8009134:	440b      	add	r3, r1
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00a      	beq.n	8009152 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800913c:	7c7a      	ldrb	r2, [r7, #17]
 800913e:	4913      	ldr	r1, [pc, #76]	; (800918c <etharp_query+0x268>)
 8009140:	4613      	mov	r3, r2
 8009142:	005b      	lsls	r3, r3, #1
 8009144:	4413      	add	r3, r2
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	440b      	add	r3, r1
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4618      	mov	r0, r3
 800914e:	f003 f913 	bl	800c378 <pbuf_free>
      }
      arp_table[i].q = p;
 8009152:	7c7a      	ldrb	r2, [r7, #17]
 8009154:	490d      	ldr	r1, [pc, #52]	; (800918c <etharp_query+0x268>)
 8009156:	4613      	mov	r3, r2
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	4413      	add	r3, r2
 800915c:	00db      	lsls	r3, r3, #3
 800915e:	440b      	add	r3, r1
 8009160:	69fa      	ldr	r2, [r7, #28]
 8009162:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800916a:	e002      	b.n	8009172 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800916c:	23ff      	movs	r3, #255	; 0xff
 800916e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8009172:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009176:	4618      	mov	r0, r3
 8009178:	3728      	adds	r7, #40	; 0x28
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	08014520 	.word	0x08014520
 8009184:	08014720 	.word	0x08014720
 8009188:	080145ec 	.word	0x080145ec
 800918c:	24004288 	.word	0x24004288
 8009190:	08014730 	.word	0x08014730
 8009194:	08014714 	.word	0x08014714
 8009198:	24004378 	.word	0x24004378
 800919c:	08014758 	.word	0x08014758

080091a0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08a      	sub	sp, #40	; 0x28
 80091a4:	af02      	add	r7, sp, #8
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
 80091ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d106      	bne.n	80091c6 <etharp_raw+0x26>
 80091b8:	4b3a      	ldr	r3, [pc, #232]	; (80092a4 <etharp_raw+0x104>)
 80091ba:	f240 4257 	movw	r2, #1111	; 0x457
 80091be:	493a      	ldr	r1, [pc, #232]	; (80092a8 <etharp_raw+0x108>)
 80091c0:	483a      	ldr	r0, [pc, #232]	; (80092ac <etharp_raw+0x10c>)
 80091c2:	f009 ff11 	bl	8012fe8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80091c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80091ca:	211c      	movs	r1, #28
 80091cc:	200e      	movs	r0, #14
 80091ce:	f002 fdef 	bl	800bdb0 <pbuf_alloc>
 80091d2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d102      	bne.n	80091e0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80091da:	f04f 33ff 	mov.w	r3, #4294967295
 80091de:	e05d      	b.n	800929c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	895b      	ldrh	r3, [r3, #10]
 80091e4:	2b1b      	cmp	r3, #27
 80091e6:	d806      	bhi.n	80091f6 <etharp_raw+0x56>
 80091e8:	4b2e      	ldr	r3, [pc, #184]	; (80092a4 <etharp_raw+0x104>)
 80091ea:	f240 4262 	movw	r2, #1122	; 0x462
 80091ee:	4930      	ldr	r1, [pc, #192]	; (80092b0 <etharp_raw+0x110>)
 80091f0:	482e      	ldr	r0, [pc, #184]	; (80092ac <etharp_raw+0x10c>)
 80091f2:	f009 fef9 	bl	8012fe8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80091fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80091fe:	4618      	mov	r0, r3
 8009200:	f7ff f914 	bl	800842c <lwip_htons>
 8009204:	4603      	mov	r3, r0
 8009206:	461a      	mov	r2, r3
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009212:	2b06      	cmp	r3, #6
 8009214:	d006      	beq.n	8009224 <etharp_raw+0x84>
 8009216:	4b23      	ldr	r3, [pc, #140]	; (80092a4 <etharp_raw+0x104>)
 8009218:	f240 4269 	movw	r2, #1129	; 0x469
 800921c:	4925      	ldr	r1, [pc, #148]	; (80092b4 <etharp_raw+0x114>)
 800921e:	4823      	ldr	r0, [pc, #140]	; (80092ac <etharp_raw+0x10c>)
 8009220:	f009 fee2 	bl	8012fe8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	3308      	adds	r3, #8
 8009228:	2206      	movs	r2, #6
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f009 feab 	bl	8012f88 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	3312      	adds	r3, #18
 8009236:	2206      	movs	r2, #6
 8009238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800923a:	4618      	mov	r0, r3
 800923c:	f009 fea4 	bl	8012f88 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	330e      	adds	r3, #14
 8009244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009246:	6812      	ldr	r2, [r2, #0]
 8009248:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	3318      	adds	r3, #24
 800924e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009250:	6812      	ldr	r2, [r2, #0]
 8009252:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	2200      	movs	r2, #0
 800925c:	f042 0201 	orr.w	r2, r2, #1
 8009260:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2200      	movs	r2, #0
 8009266:	f042 0208 	orr.w	r2, r2, #8
 800926a:	709a      	strb	r2, [r3, #2]
 800926c:	2200      	movs	r2, #0
 800926e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	2206      	movs	r2, #6
 8009274:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2204      	movs	r2, #4
 800927a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800927c:	f640 0306 	movw	r3, #2054	; 0x806
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	69b9      	ldr	r1, [r7, #24]
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 f8d7 	bl	800943c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800928e:	69b8      	ldr	r0, [r7, #24]
 8009290:	f003 f872 	bl	800c378 <pbuf_free>
  p = NULL;
 8009294:	2300      	movs	r3, #0
 8009296:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8009298:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3720      	adds	r7, #32
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	08014520 	.word	0x08014520
 80092a8:	080146c4 	.word	0x080146c4
 80092ac:	080145ec 	.word	0x080145ec
 80092b0:	08014774 	.word	0x08014774
 80092b4:	080147a8 	.word	0x080147a8

080092b8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b088      	sub	sp, #32
 80092bc:	af04      	add	r7, sp, #16
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80092d4:	2201      	movs	r2, #1
 80092d6:	9203      	str	r2, [sp, #12]
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	9202      	str	r2, [sp, #8]
 80092dc:	4a06      	ldr	r2, [pc, #24]	; (80092f8 <etharp_request_dst+0x40>)
 80092de:	9201      	str	r2, [sp, #4]
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	4603      	mov	r3, r0
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f7ff ff5a 	bl	80091a0 <etharp_raw>
 80092ec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	080174a8 	.word	0x080174a8

080092fc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8009306:	4a05      	ldr	r2, [pc, #20]	; (800931c <etharp_request+0x20>)
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7ff ffd4 	bl	80092b8 <etharp_request_dst>
 8009310:	4603      	mov	r3, r0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	080174a0 	.word	0x080174a0

08009320 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800932a:	230e      	movs	r3, #14
 800932c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	895b      	ldrh	r3, [r3, #10]
 8009332:	2b0e      	cmp	r3, #14
 8009334:	d96e      	bls.n	8009414 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	7bdb      	ldrb	r3, [r3, #15]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d106      	bne.n	800934c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009344:	3301      	adds	r3, #1
 8009346:	b2da      	uxtb	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	7b1a      	ldrb	r2, [r3, #12]
 8009356:	7b5b      	ldrb	r3, [r3, #13]
 8009358:	021b      	lsls	r3, r3, #8
 800935a:	4313      	orrs	r3, r2
 800935c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d023      	beq.n	80093b2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d10f      	bne.n	8009392 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	785b      	ldrb	r3, [r3, #1]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d11b      	bne.n	80093b2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800937e:	2b5e      	cmp	r3, #94	; 0x5e
 8009380:	d117      	bne.n	80093b2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	7b5b      	ldrb	r3, [r3, #13]
 8009386:	f043 0310 	orr.w	r3, r3, #16
 800938a:	b2da      	uxtb	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	735a      	strb	r2, [r3, #13]
 8009390:	e00f      	b.n	80093b2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	2206      	movs	r2, #6
 8009396:	4928      	ldr	r1, [pc, #160]	; (8009438 <ethernet_input+0x118>)
 8009398:	4618      	mov	r0, r3
 800939a:	f009 fde5 	bl	8012f68 <memcmp>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d106      	bne.n	80093b2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	7b5b      	ldrb	r3, [r3, #13]
 80093a8:	f043 0308 	orr.w	r3, r3, #8
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80093b2:	89fb      	ldrh	r3, [r7, #14]
 80093b4:	2b08      	cmp	r3, #8
 80093b6:	d003      	beq.n	80093c0 <ethernet_input+0xa0>
 80093b8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80093bc:	d014      	beq.n	80093e8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80093be:	e032      	b.n	8009426 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093c6:	f003 0308 	and.w	r3, r3, #8
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d024      	beq.n	8009418 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80093ce:	8afb      	ldrh	r3, [r7, #22]
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f002 ff4a 	bl	800c26c <pbuf_remove_header>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d11e      	bne.n	800941c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fb95 	bl	8009b10 <ip4_input>
      break;
 80093e6:	e013      	b.n	8009410 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093ee:	f003 0308 	and.w	r3, r3, #8
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d014      	beq.n	8009420 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80093f6:	8afb      	ldrh	r3, [r7, #22]
 80093f8:	4619      	mov	r1, r3
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f002 ff36 	bl	800c26c <pbuf_remove_header>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10e      	bne.n	8009424 <ethernet_input+0x104>
        etharp_input(p, netif);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f7ff fb65 	bl	8008ad8 <etharp_input>
      break;
 800940e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	e00c      	b.n	800942e <ethernet_input+0x10e>
    goto free_and_return;
 8009414:	bf00      	nop
 8009416:	e006      	b.n	8009426 <ethernet_input+0x106>
        goto free_and_return;
 8009418:	bf00      	nop
 800941a:	e004      	b.n	8009426 <ethernet_input+0x106>
        goto free_and_return;
 800941c:	bf00      	nop
 800941e:	e002      	b.n	8009426 <ethernet_input+0x106>
        goto free_and_return;
 8009420:	bf00      	nop
 8009422:	e000      	b.n	8009426 <ethernet_input+0x106>
        goto free_and_return;
 8009424:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f002 ffa6 	bl	800c378 <pbuf_free>
  return ERR_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	080174a0 	.word	0x080174a0

0800943c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]
 8009448:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800944a:	8c3b      	ldrh	r3, [r7, #32]
 800944c:	4618      	mov	r0, r3
 800944e:	f7fe ffed 	bl	800842c <lwip_htons>
 8009452:	4603      	mov	r3, r0
 8009454:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8009456:	210e      	movs	r1, #14
 8009458:	68b8      	ldr	r0, [r7, #8]
 800945a:	f002 fef7 	bl	800c24c <pbuf_add_header>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d125      	bne.n	80094b0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	8afa      	ldrh	r2, [r7, #22]
 800946e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	2206      	movs	r2, #6
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	4618      	mov	r0, r3
 8009478:	f009 fd86 	bl	8012f88 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	3306      	adds	r3, #6
 8009480:	2206      	movs	r2, #6
 8009482:	6879      	ldr	r1, [r7, #4]
 8009484:	4618      	mov	r0, r3
 8009486:	f009 fd7f 	bl	8012f88 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009490:	2b06      	cmp	r3, #6
 8009492:	d006      	beq.n	80094a2 <ethernet_output+0x66>
 8009494:	4b0a      	ldr	r3, [pc, #40]	; (80094c0 <ethernet_output+0x84>)
 8009496:	f44f 7299 	mov.w	r2, #306	; 0x132
 800949a:	490a      	ldr	r1, [pc, #40]	; (80094c4 <ethernet_output+0x88>)
 800949c:	480a      	ldr	r0, [pc, #40]	; (80094c8 <ethernet_output+0x8c>)
 800949e:	f009 fda3 	bl	8012fe8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	68b9      	ldr	r1, [r7, #8]
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	4798      	blx	r3
 80094ac:	4603      	mov	r3, r0
 80094ae:	e002      	b.n	80094b6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80094b0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80094b2:	f06f 0301 	mvn.w	r3, #1
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3718      	adds	r7, #24
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	080147ec 	.word	0x080147ec
 80094c4:	08014874 	.word	0x08014874
 80094c8:	080148a8 	.word	0x080148a8

080094cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08e      	sub	sp, #56	; 0x38
 80094d0:	af04      	add	r7, sp, #16
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80094d6:	4b87      	ldr	r3, [pc, #540]	; (80096f4 <icmp_input+0x228>)
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	f003 030f 	and.w	r3, r3, #15
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80094ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094ee:	2b13      	cmp	r3, #19
 80094f0:	f240 80e8 	bls.w	80096c4 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	895b      	ldrh	r3, [r3, #10]
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	f240 80e5 	bls.w	80096c8 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8009508:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800950c:	2b00      	cmp	r3, #0
 800950e:	f000 80d2 	beq.w	80096b6 <icmp_input+0x1ea>
 8009512:	2b08      	cmp	r3, #8
 8009514:	f040 80d2 	bne.w	80096bc <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8009518:	4b77      	ldr	r3, [pc, #476]	; (80096f8 <icmp_input+0x22c>)
 800951a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800951c:	4b75      	ldr	r3, [pc, #468]	; (80096f4 <icmp_input+0x228>)
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009524:	2be0      	cmp	r3, #224	; 0xe0
 8009526:	f000 80d6 	beq.w	80096d6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800952a:	4b72      	ldr	r3, [pc, #456]	; (80096f4 <icmp_input+0x228>)
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	4a71      	ldr	r2, [pc, #452]	; (80096f4 <icmp_input+0x228>)
 8009530:	6812      	ldr	r2, [r2, #0]
 8009532:	4611      	mov	r1, r2
 8009534:	4618      	mov	r0, r3
 8009536:	f000 fce7 	bl	8009f08 <ip4_addr_isbroadcast_u32>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	f040 80cc 	bne.w	80096da <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	891b      	ldrh	r3, [r3, #8]
 8009546:	2b07      	cmp	r3, #7
 8009548:	f240 80c0 	bls.w	80096cc <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f9e0 	bl	8009912 <inet_chksum_pbuf>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d003      	beq.n	8009560 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f002 ff0d 	bl	800c378 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800955e:	e0c5      	b.n	80096ec <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009560:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009562:	330e      	adds	r3, #14
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f002 fe70 	bl	800c24c <pbuf_add_header>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d04b      	beq.n	800960a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	891a      	ldrh	r2, [r3, #8]
 8009576:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009578:	4413      	add	r3, r2
 800957a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	891b      	ldrh	r3, [r3, #8]
 8009580:	8b7a      	ldrh	r2, [r7, #26]
 8009582:	429a      	cmp	r2, r3
 8009584:	f0c0 80ab 	bcc.w	80096de <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8009588:	8b7b      	ldrh	r3, [r7, #26]
 800958a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800958e:	4619      	mov	r1, r3
 8009590:	200e      	movs	r0, #14
 8009592:	f002 fc0d 	bl	800bdb0 <pbuf_alloc>
 8009596:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 80a1 	beq.w	80096e2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	895b      	ldrh	r3, [r3, #10]
 80095a4:	461a      	mov	r2, r3
 80095a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095a8:	3308      	adds	r3, #8
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d203      	bcs.n	80095b6 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80095ae:	6978      	ldr	r0, [r7, #20]
 80095b0:	f002 fee2 	bl	800c378 <pbuf_free>
          goto icmperr;
 80095b4:	e096      	b.n	80096e4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80095bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095be:	4618      	mov	r0, r3
 80095c0:	f009 fce2 	bl	8012f88 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80095c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095c6:	4619      	mov	r1, r3
 80095c8:	6978      	ldr	r0, [r7, #20]
 80095ca:	f002 fe4f 	bl	800c26c <pbuf_remove_header>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d009      	beq.n	80095e8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80095d4:	4b49      	ldr	r3, [pc, #292]	; (80096fc <icmp_input+0x230>)
 80095d6:	22b6      	movs	r2, #182	; 0xb6
 80095d8:	4949      	ldr	r1, [pc, #292]	; (8009700 <icmp_input+0x234>)
 80095da:	484a      	ldr	r0, [pc, #296]	; (8009704 <icmp_input+0x238>)
 80095dc:	f009 fd04 	bl	8012fe8 <iprintf>
          pbuf_free(r);
 80095e0:	6978      	ldr	r0, [r7, #20]
 80095e2:	f002 fec9 	bl	800c378 <pbuf_free>
          goto icmperr;
 80095e6:	e07d      	b.n	80096e4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80095e8:	6879      	ldr	r1, [r7, #4]
 80095ea:	6978      	ldr	r0, [r7, #20]
 80095ec:	f002 fff8 	bl	800c5e0 <pbuf_copy>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80095f6:	6978      	ldr	r0, [r7, #20]
 80095f8:	f002 febe 	bl	800c378 <pbuf_free>
          goto icmperr;
 80095fc:	e072      	b.n	80096e4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f002 feba 	bl	800c378 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	607b      	str	r3, [r7, #4]
 8009608:	e00f      	b.n	800962a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800960a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800960c:	330e      	adds	r3, #14
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f002 fe2b 	bl	800c26c <pbuf_remove_header>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d006      	beq.n	800962a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800961c:	4b37      	ldr	r3, [pc, #220]	; (80096fc <icmp_input+0x230>)
 800961e:	22c7      	movs	r2, #199	; 0xc7
 8009620:	4939      	ldr	r1, [pc, #228]	; (8009708 <icmp_input+0x23c>)
 8009622:	4838      	ldr	r0, [pc, #224]	; (8009704 <icmp_input+0x238>)
 8009624:	f009 fce0 	bl	8012fe8 <iprintf>
          goto icmperr;
 8009628:	e05c      	b.n	80096e4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8009630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f002 fe09 	bl	800c24c <pbuf_add_header>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d13c      	bne.n	80096ba <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800964e:	4b29      	ldr	r3, [pc, #164]	; (80096f4 <icmp_input+0x228>)
 8009650:	691a      	ldr	r2, [r3, #16]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2200      	movs	r2, #0
 800965a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	885b      	ldrh	r3, [r3, #2]
 8009660:	b29b      	uxth	r3, r3
 8009662:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8009666:	4293      	cmp	r3, r2
 8009668:	d907      	bls.n	800967a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	885b      	ldrh	r3, [r3, #2]
 800966e:	b29b      	uxth	r3, r3
 8009670:	3309      	adds	r3, #9
 8009672:	b29a      	uxth	r2, r3
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	805a      	strh	r2, [r3, #2]
 8009678:	e006      	b.n	8009688 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	885b      	ldrh	r3, [r3, #2]
 800967e:	b29b      	uxth	r3, r3
 8009680:	3308      	adds	r3, #8
 8009682:	b29a      	uxth	r2, r3
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	22ff      	movs	r2, #255	; 0xff
 800968c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	729a      	strb	r2, [r3, #10]
 8009694:	2200      	movs	r2, #0
 8009696:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	9302      	str	r3, [sp, #8]
 800969c:	2301      	movs	r3, #1
 800969e:	9301      	str	r3, [sp, #4]
 80096a0:	2300      	movs	r3, #0
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	23ff      	movs	r3, #255	; 0xff
 80096a6:	2200      	movs	r2, #0
 80096a8:	69f9      	ldr	r1, [r7, #28]
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fb54 	bl	8009d58 <ip4_output_if>
 80096b0:	4603      	mov	r3, r0
 80096b2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80096b4:	e001      	b.n	80096ba <icmp_input+0x1ee>
      break;
 80096b6:	bf00      	nop
 80096b8:	e000      	b.n	80096bc <icmp_input+0x1f0>
      break;
 80096ba:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f002 fe5b 	bl	800c378 <pbuf_free>
  return;
 80096c2:	e013      	b.n	80096ec <icmp_input+0x220>
    goto lenerr;
 80096c4:	bf00      	nop
 80096c6:	e002      	b.n	80096ce <icmp_input+0x202>
    goto lenerr;
 80096c8:	bf00      	nop
 80096ca:	e000      	b.n	80096ce <icmp_input+0x202>
        goto lenerr;
 80096cc:	bf00      	nop
lenerr:
  pbuf_free(p);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f002 fe52 	bl	800c378 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80096d4:	e00a      	b.n	80096ec <icmp_input+0x220>
        goto icmperr;
 80096d6:	bf00      	nop
 80096d8:	e004      	b.n	80096e4 <icmp_input+0x218>
        goto icmperr;
 80096da:	bf00      	nop
 80096dc:	e002      	b.n	80096e4 <icmp_input+0x218>
          goto icmperr;
 80096de:	bf00      	nop
 80096e0:	e000      	b.n	80096e4 <icmp_input+0x218>
          goto icmperr;
 80096e2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f002 fe47 	bl	800c378 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80096ea:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80096ec:	3728      	adds	r7, #40	; 0x28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	2400437c 	.word	0x2400437c
 80096f8:	24004390 	.word	0x24004390
 80096fc:	080148d0 	.word	0x080148d0
 8009700:	08014958 	.word	0x08014958
 8009704:	08014990 	.word	0x08014990
 8009708:	080149b8 	.word	0x080149b8

0800970c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	460b      	mov	r3, r1
 8009716:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8009718:	78fb      	ldrb	r3, [r7, #3]
 800971a:	461a      	mov	r2, r3
 800971c:	2103      	movs	r1, #3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f814 	bl	800974c <icmp_send_response>
}
 8009724:	bf00      	nop
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	460b      	mov	r3, r1
 8009736:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8009738:	78fb      	ldrb	r3, [r7, #3]
 800973a:	461a      	mov	r2, r3
 800973c:	210b      	movs	r1, #11
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f804 	bl	800974c <icmp_send_response>
}
 8009744:	bf00      	nop
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b08c      	sub	sp, #48	; 0x30
 8009750:	af04      	add	r7, sp, #16
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
 8009758:	4613      	mov	r3, r2
 800975a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800975c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009760:	2124      	movs	r1, #36	; 0x24
 8009762:	2022      	movs	r0, #34	; 0x22
 8009764:	f002 fb24 	bl	800bdb0 <pbuf_alloc>
 8009768:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d056      	beq.n	800981e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	895b      	ldrh	r3, [r3, #10]
 8009774:	2b23      	cmp	r3, #35	; 0x23
 8009776:	d806      	bhi.n	8009786 <icmp_send_response+0x3a>
 8009778:	4b2b      	ldr	r3, [pc, #172]	; (8009828 <icmp_send_response+0xdc>)
 800977a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800977e:	492b      	ldr	r1, [pc, #172]	; (800982c <icmp_send_response+0xe0>)
 8009780:	482b      	ldr	r0, [pc, #172]	; (8009830 <icmp_send_response+0xe4>)
 8009782:	f009 fc31 	bl	8012fe8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	78fa      	ldrb	r2, [r7, #3]
 8009796:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	78ba      	ldrb	r2, [r7, #2]
 800979c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2200      	movs	r2, #0
 80097a2:	711a      	strb	r2, [r3, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	2200      	movs	r2, #0
 80097ac:	719a      	strb	r2, [r3, #6]
 80097ae:	2200      	movs	r2, #0
 80097b0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f103 0008 	add.w	r0, r3, #8
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	221c      	movs	r2, #28
 80097c0:	4619      	mov	r1, r3
 80097c2:	f009 fbe1 	bl	8012f88 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80097cc:	f107 030c 	add.w	r3, r7, #12
 80097d0:	4618      	mov	r0, r3
 80097d2:	f000 f903 	bl	80099dc <ip4_route>
 80097d6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d01b      	beq.n	8009816 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2200      	movs	r2, #0
 80097e2:	709a      	strb	r2, [r3, #2]
 80097e4:	2200      	movs	r2, #0
 80097e6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	895b      	ldrh	r3, [r3, #10]
 80097ec:	4619      	mov	r1, r3
 80097ee:	6978      	ldr	r0, [r7, #20]
 80097f0:	f000 f87d 	bl	80098ee <inet_chksum>
 80097f4:	4603      	mov	r3, r0
 80097f6:	461a      	mov	r2, r3
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80097fc:	f107 020c 	add.w	r2, r7, #12
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	9302      	str	r3, [sp, #8]
 8009804:	2301      	movs	r3, #1
 8009806:	9301      	str	r3, [sp, #4]
 8009808:	2300      	movs	r3, #0
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	23ff      	movs	r3, #255	; 0xff
 800980e:	2100      	movs	r1, #0
 8009810:	69f8      	ldr	r0, [r7, #28]
 8009812:	f000 faa1 	bl	8009d58 <ip4_output_if>
  }
  pbuf_free(q);
 8009816:	69f8      	ldr	r0, [r7, #28]
 8009818:	f002 fdae 	bl	800c378 <pbuf_free>
 800981c:	e000      	b.n	8009820 <icmp_send_response+0xd4>
    return;
 800981e:	bf00      	nop
}
 8009820:	3720      	adds	r7, #32
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	080148d0 	.word	0x080148d0
 800982c:	080149ec 	.word	0x080149ec
 8009830:	08014990 	.word	0x08014990

08009834 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009834:	b480      	push	{r7}
 8009836:	b089      	sub	sp, #36	; 0x24
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8009842:	2300      	movs	r3, #0
 8009844:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00d      	beq.n	8009874 <lwip_standard_chksum+0x40>
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	dd0a      	ble.n	8009874 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800985e:	69fa      	ldr	r2, [r7, #28]
 8009860:	1c53      	adds	r3, r2, #1
 8009862:	61fb      	str	r3, [r7, #28]
 8009864:	f107 030e 	add.w	r3, r7, #14
 8009868:	3301      	adds	r3, #1
 800986a:	7812      	ldrb	r2, [r2, #0]
 800986c:	701a      	strb	r2, [r3, #0]
    len--;
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	3b01      	subs	r3, #1
 8009872:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8009878:	e00a      	b.n	8009890 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	1c9a      	adds	r2, r3, #2
 800987e:	61ba      	str	r2, [r7, #24]
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	461a      	mov	r2, r3
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	4413      	add	r3, r2
 8009888:	617b      	str	r3, [r7, #20]
    len -= 2;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	3b02      	subs	r3, #2
 800988e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2b01      	cmp	r3, #1
 8009894:	dcf1      	bgt.n	800987a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	dd04      	ble.n	80098a6 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800989c:	f107 030e 	add.w	r3, r7, #14
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	7812      	ldrb	r2, [r2, #0]
 80098a4:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80098a6:	89fb      	ldrh	r3, [r7, #14]
 80098a8:	461a      	mov	r2, r3
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	4413      	add	r3, r2
 80098ae:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	0c1a      	lsrs	r2, r3, #16
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	4413      	add	r3, r2
 80098ba:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	0c1a      	lsrs	r2, r3, #16
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	4413      	add	r3, r2
 80098c6:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d007      	beq.n	80098de <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	021b      	lsls	r3, r3, #8
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	0a1b      	lsrs	r3, r3, #8
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	4313      	orrs	r3, r2
 80098dc:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	b29b      	uxth	r3, r3
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3724      	adds	r7, #36	; 0x24
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b082      	sub	sp, #8
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	460b      	mov	r3, r1
 80098f8:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80098fa:	887b      	ldrh	r3, [r7, #2]
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7ff ff98 	bl	8009834 <lwip_standard_chksum>
 8009904:	4603      	mov	r3, r0
 8009906:	43db      	mvns	r3, r3
 8009908:	b29b      	uxth	r3, r3
}
 800990a:	4618      	mov	r0, r3
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b086      	sub	sp, #24
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	613b      	str	r3, [r7, #16]
 8009926:	e02b      	b.n	8009980 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	895b      	ldrh	r3, [r3, #10]
 8009930:	4619      	mov	r1, r3
 8009932:	4610      	mov	r0, r2
 8009934:	f7ff ff7e 	bl	8009834 <lwip_standard_chksum>
 8009938:	4603      	mov	r3, r0
 800993a:	461a      	mov	r2, r3
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	4413      	add	r3, r2
 8009940:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	0c1a      	lsrs	r2, r3, #16
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	b29b      	uxth	r3, r3
 800994a:	4413      	add	r3, r2
 800994c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	895b      	ldrh	r3, [r3, #10]
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	b29b      	uxth	r3, r3
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00e      	beq.n	800997a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2b00      	cmp	r3, #0
 8009960:	bf0c      	ite	eq
 8009962:	2301      	moveq	r3, #1
 8009964:	2300      	movne	r3, #0
 8009966:	b2db      	uxtb	r3, r3
 8009968:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	021b      	lsls	r3, r3, #8
 800996e:	b29a      	uxth	r2, r3
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	0a1b      	lsrs	r3, r3, #8
 8009974:	b2db      	uxtb	r3, r3
 8009976:	4313      	orrs	r3, r2
 8009978:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	613b      	str	r3, [r7, #16]
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1d0      	bne.n	8009928 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d007      	beq.n	800999c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	021b      	lsls	r3, r3, #8
 8009990:	b29a      	uxth	r2, r3
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	0a1b      	lsrs	r3, r3, #8
 8009996:	b2db      	uxtb	r3, r3
 8009998:	4313      	orrs	r3, r2
 800999a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	b29b      	uxth	r3, r3
 80099a0:	43db      	mvns	r3, r3
 80099a2:	b29b      	uxth	r3, r3
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80099b6:	f003 f8a7 	bl	800cb08 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80099ba:	f001 f9ef 	bl	800ad9c <mem_init>
  memp_init();
 80099be:	f001 fd53 	bl	800b468 <memp_init>
  pbuf_init();
  netif_init();
 80099c2:	f001 fe5f 	bl	800b684 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80099c6:	f008 fda1 	bl	801250c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80099ca:	f003 f927 	bl	800cc1c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80099ce:	f008 fce3 	bl	8012398 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80099d2:	bf00      	nop
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80099e4:	4b33      	ldr	r3, [pc, #204]	; (8009ab4 <ip4_route+0xd8>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	60fb      	str	r3, [r7, #12]
 80099ea:	e036      	b.n	8009a5a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d02b      	beq.n	8009a54 <ip4_route+0x78>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a02:	089b      	lsrs	r3, r3, #2
 8009a04:	f003 0301 	and.w	r3, r3, #1
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d022      	beq.n	8009a54 <ip4_route+0x78>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	3304      	adds	r3, #4
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d01d      	beq.n	8009a54 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	3304      	adds	r3, #4
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	405a      	eors	r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	3308      	adds	r3, #8
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	e038      	b.n	8009aa6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a3a:	f003 0302 	and.w	r3, r3, #2
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d108      	bne.n	8009a54 <ip4_route+0x78>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	330c      	adds	r3, #12
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d101      	bne.n	8009a54 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	e028      	b.n	8009aa6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	60fb      	str	r3, [r7, #12]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1c5      	bne.n	80099ec <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009a60:	4b15      	ldr	r3, [pc, #84]	; (8009ab8 <ip4_route+0xdc>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d01a      	beq.n	8009a9e <ip4_route+0xc2>
 8009a68:	4b13      	ldr	r3, [pc, #76]	; (8009ab8 <ip4_route+0xdc>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d012      	beq.n	8009a9e <ip4_route+0xc2>
 8009a78:	4b0f      	ldr	r3, [pc, #60]	; (8009ab8 <ip4_route+0xdc>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a80:	f003 0304 	and.w	r3, r3, #4
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00a      	beq.n	8009a9e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009a88:	4b0b      	ldr	r3, [pc, #44]	; (8009ab8 <ip4_route+0xdc>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d004      	beq.n	8009a9e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8009a9c:	d101      	bne.n	8009aa2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	e001      	b.n	8009aa6 <ip4_route+0xca>
  }

  return netif_default;
 8009aa2:	4b05      	ldr	r3, [pc, #20]	; (8009ab8 <ip4_route+0xdc>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	2400747c 	.word	0x2400747c
 8009ab8:	24007480 	.word	0x24007480

08009abc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d016      	beq.n	8009b02 <ip4_input_accept+0x46>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d011      	beq.n	8009b02 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009ade:	4b0b      	ldr	r3, [pc, #44]	; (8009b0c <ip4_input_accept+0x50>)
 8009ae0:	695a      	ldr	r2, [r3, #20]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d008      	beq.n	8009afe <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8009aec:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <ip4_input_accept+0x50>)
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	6879      	ldr	r1, [r7, #4]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fa08 	bl	8009f08 <ip4_addr_isbroadcast_u32>
 8009af8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d001      	beq.n	8009b02 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e000      	b.n	8009b04 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	2400437c 	.word	0x2400437c

08009b10 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	091b      	lsrs	r3, r3, #4
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b04      	cmp	r3, #4
 8009b2a:	d004      	beq.n	8009b36 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f002 fc23 	bl	800c378 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	e107      	b.n	8009d46 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	f003 030f 	and.w	r3, r3, #15
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	885b      	ldrh	r3, [r3, #2]
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fe fc6d 	bl	800842c <lwip_htons>
 8009b52:	4603      	mov	r3, r0
 8009b54:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	891b      	ldrh	r3, [r3, #8]
 8009b5a:	89ba      	ldrh	r2, [r7, #12]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d204      	bcs.n	8009b6a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8009b60:	89bb      	ldrh	r3, [r7, #12]
 8009b62:	4619      	mov	r1, r3
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f002 fa81 	bl	800c06c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	895b      	ldrh	r3, [r3, #10]
 8009b6e:	89fa      	ldrh	r2, [r7, #14]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d807      	bhi.n	8009b84 <ip4_input+0x74>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	891b      	ldrh	r3, [r3, #8]
 8009b78:	89ba      	ldrh	r2, [r7, #12]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d802      	bhi.n	8009b84 <ip4_input+0x74>
 8009b7e:	89fb      	ldrh	r3, [r7, #14]
 8009b80:	2b13      	cmp	r3, #19
 8009b82:	d804      	bhi.n	8009b8e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f002 fbf7 	bl	800c378 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	e0db      	b.n	8009d46 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	4a6f      	ldr	r2, [pc, #444]	; (8009d50 <ip4_input+0x240>)
 8009b94:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	4a6d      	ldr	r2, [pc, #436]	; (8009d50 <ip4_input+0x240>)
 8009b9c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009b9e:	4b6c      	ldr	r3, [pc, #432]	; (8009d50 <ip4_input+0x240>)
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ba6:	2be0      	cmp	r3, #224	; 0xe0
 8009ba8:	d112      	bne.n	8009bd0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bb0:	f003 0301 	and.w	r3, r3, #1
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d007      	beq.n	8009bca <ip4_input+0xba>
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d002      	beq.n	8009bca <ip4_input+0xba>
      netif = inp;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	613b      	str	r3, [r7, #16]
 8009bc8:	e02a      	b.n	8009c20 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	613b      	str	r3, [r7, #16]
 8009bce:	e027      	b.n	8009c20 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8009bd0:	6838      	ldr	r0, [r7, #0]
 8009bd2:	f7ff ff73 	bl	8009abc <ip4_input_accept>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <ip4_input+0xd2>
      netif = inp;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	613b      	str	r3, [r7, #16]
 8009be0:	e01e      	b.n	8009c20 <ip4_input+0x110>
    } else {
      netif = NULL;
 8009be2:	2300      	movs	r3, #0
 8009be4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8009be6:	4b5a      	ldr	r3, [pc, #360]	; (8009d50 <ip4_input+0x240>)
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	2b7f      	cmp	r3, #127	; 0x7f
 8009bee:	d017      	beq.n	8009c20 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8009bf0:	4b58      	ldr	r3, [pc, #352]	; (8009d54 <ip4_input+0x244>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	613b      	str	r3, [r7, #16]
 8009bf6:	e00e      	b.n	8009c16 <ip4_input+0x106>
          if (netif == inp) {
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d006      	beq.n	8009c0e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8009c00:	6938      	ldr	r0, [r7, #16]
 8009c02:	f7ff ff5b 	bl	8009abc <ip4_input_accept>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d108      	bne.n	8009c1e <ip4_input+0x10e>
 8009c0c:	e000      	b.n	8009c10 <ip4_input+0x100>
            continue;
 8009c0e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	613b      	str	r3, [r7, #16]
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1ed      	bne.n	8009bf8 <ip4_input+0xe8>
 8009c1c:	e000      	b.n	8009c20 <ip4_input+0x110>
            break;
 8009c1e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009c20:	4b4b      	ldr	r3, [pc, #300]	; (8009d50 <ip4_input+0x240>)
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 f96e 	bl	8009f08 <ip4_addr_isbroadcast_u32>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d105      	bne.n	8009c3e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8009c32:	4b47      	ldr	r3, [pc, #284]	; (8009d50 <ip4_input+0x240>)
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009c3a:	2be0      	cmp	r3, #224	; 0xe0
 8009c3c:	d104      	bne.n	8009c48 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f002 fb9a 	bl	800c378 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	e07e      	b.n	8009d46 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d104      	bne.n	8009c58 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f002 fb92 	bl	800c378 <pbuf_free>
    return ERR_OK;
 8009c54:	2300      	movs	r3, #0
 8009c56:	e076      	b.n	8009d46 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	88db      	ldrh	r3, [r3, #6]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8009c64:	4013      	ands	r3, r2
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00b      	beq.n	8009c82 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fc92 	bl	800a594 <ip4_reass>
 8009c70:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d101      	bne.n	8009c7c <ip4_input+0x16c>
      return ERR_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	e064      	b.n	8009d46 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8009c82:	4a33      	ldr	r2, [pc, #204]	; (8009d50 <ip4_input+0x240>)
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8009c88:	4a31      	ldr	r2, [pc, #196]	; (8009d50 <ip4_input+0x240>)
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8009c8e:	4a30      	ldr	r2, [pc, #192]	; (8009d50 <ip4_input+0x240>)
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	f003 030f 	and.w	r3, r3, #15
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	4b2a      	ldr	r3, [pc, #168]	; (8009d50 <ip4_input+0x240>)
 8009ca6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8009ca8:	89fb      	ldrh	r3, [r7, #14]
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f002 fadd 	bl	800c26c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	7a5b      	ldrb	r3, [r3, #9]
 8009cb6:	2b11      	cmp	r3, #17
 8009cb8:	d006      	beq.n	8009cc8 <ip4_input+0x1b8>
 8009cba:	2b11      	cmp	r3, #17
 8009cbc:	dc13      	bgt.n	8009ce6 <ip4_input+0x1d6>
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d00c      	beq.n	8009cdc <ip4_input+0x1cc>
 8009cc2:	2b06      	cmp	r3, #6
 8009cc4:	d005      	beq.n	8009cd2 <ip4_input+0x1c2>
 8009cc6:	e00e      	b.n	8009ce6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f008 fccc 	bl	8012668 <udp_input>
        break;
 8009cd0:	e026      	b.n	8009d20 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f004 fb3b 	bl	800e350 <tcp_input>
        break;
 8009cda:	e021      	b.n	8009d20 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7ff fbf4 	bl	80094cc <icmp_input>
        break;
 8009ce4:	e01c      	b.n	8009d20 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009ce6:	4b1a      	ldr	r3, [pc, #104]	; (8009d50 <ip4_input+0x240>)
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	6939      	ldr	r1, [r7, #16]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 f90b 	bl	8009f08 <ip4_addr_isbroadcast_u32>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10f      	bne.n	8009d18 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009cf8:	4b15      	ldr	r3, [pc, #84]	; (8009d50 <ip4_input+0x240>)
 8009cfa:	695b      	ldr	r3, [r3, #20]
 8009cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009d00:	2be0      	cmp	r3, #224	; 0xe0
 8009d02:	d009      	beq.n	8009d18 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8009d04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f002 fb21 	bl	800c352 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8009d10:	2102      	movs	r1, #2
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7ff fcfa 	bl	800970c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f002 fb2d 	bl	800c378 <pbuf_free>
        break;
 8009d1e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8009d20:	4b0b      	ldr	r3, [pc, #44]	; (8009d50 <ip4_input+0x240>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8009d26:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <ip4_input+0x240>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8009d2c:	4b08      	ldr	r3, [pc, #32]	; (8009d50 <ip4_input+0x240>)
 8009d2e:	2200      	movs	r2, #0
 8009d30:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8009d32:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <ip4_input+0x240>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8009d38:	4b05      	ldr	r3, [pc, #20]	; (8009d50 <ip4_input+0x240>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8009d3e:	4b04      	ldr	r3, [pc, #16]	; (8009d50 <ip4_input+0x240>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	2400437c 	.word	0x2400437c
 8009d54:	2400747c 	.word	0x2400747c

08009d58 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08a      	sub	sp, #40	; 0x28
 8009d5c:	af04      	add	r7, sp, #16
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
 8009d64:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d009      	beq.n	8009d84 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <ip4_output_if+0x26>
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d102      	bne.n	8009d84 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8009d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d80:	3304      	adds	r3, #4
 8009d82:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009d84:	78fa      	ldrb	r2, [r7, #3]
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	9302      	str	r3, [sp, #8]
 8009d8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009d8e:	9301      	str	r3, [sp, #4]
 8009d90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	4613      	mov	r3, r2
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	6979      	ldr	r1, [r7, #20]
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 f805 	bl	8009dac <ip4_output_if_src>
 8009da2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3718      	adds	r7, #24
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	7b9b      	ldrb	r3, [r3, #14]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d006      	beq.n	8009dd0 <ip4_output_if_src+0x24>
 8009dc2:	4b4b      	ldr	r3, [pc, #300]	; (8009ef0 <ip4_output_if_src+0x144>)
 8009dc4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8009dc8:	494a      	ldr	r1, [pc, #296]	; (8009ef4 <ip4_output_if_src+0x148>)
 8009dca:	484b      	ldr	r0, [pc, #300]	; (8009ef8 <ip4_output_if_src+0x14c>)
 8009dcc:	f009 f90c 	bl	8012fe8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d060      	beq.n	8009e98 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8009dd6:	2314      	movs	r3, #20
 8009dd8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8009dda:	2114      	movs	r1, #20
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f002 fa35 	bl	800c24c <pbuf_add_header>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009de8:	f06f 0301 	mvn.w	r3, #1
 8009dec:	e07c      	b.n	8009ee8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	895b      	ldrh	r3, [r3, #10]
 8009df8:	2b13      	cmp	r3, #19
 8009dfa:	d806      	bhi.n	8009e0a <ip4_output_if_src+0x5e>
 8009dfc:	4b3c      	ldr	r3, [pc, #240]	; (8009ef0 <ip4_output_if_src+0x144>)
 8009dfe:	f44f 7262 	mov.w	r2, #904	; 0x388
 8009e02:	493e      	ldr	r1, [pc, #248]	; (8009efc <ip4_output_if_src+0x150>)
 8009e04:	483c      	ldr	r0, [pc, #240]	; (8009ef8 <ip4_output_if_src+0x14c>)
 8009e06:	f009 f8ef 	bl	8012fe8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	78fa      	ldrb	r2, [r7, #3]
 8009e0e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8009e16:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8009e20:	8b7b      	ldrh	r3, [r7, #26]
 8009e22:	089b      	lsrs	r3, r3, #2
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8009e32:	69fb      	ldr	r3, [r7, #28]
 8009e34:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009e38:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	891b      	ldrh	r3, [r3, #8]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fe faf4 	bl	800842c <lwip_htons>
 8009e44:	4603      	mov	r3, r0
 8009e46:	461a      	mov	r2, r3
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	719a      	strb	r2, [r3, #6]
 8009e52:	2200      	movs	r2, #0
 8009e54:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009e56:	4b2a      	ldr	r3, [pc, #168]	; (8009f00 <ip4_output_if_src+0x154>)
 8009e58:	881b      	ldrh	r3, [r3, #0]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fe fae6 	bl	800842c <lwip_htons>
 8009e60:	4603      	mov	r3, r0
 8009e62:	461a      	mov	r2, r3
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8009e68:	4b25      	ldr	r3, [pc, #148]	; (8009f00 <ip4_output_if_src+0x154>)
 8009e6a:	881b      	ldrh	r3, [r3, #0]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	4b23      	ldr	r3, [pc, #140]	; (8009f00 <ip4_output_if_src+0x154>)
 8009e72:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d104      	bne.n	8009e84 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8009e7a:	4b22      	ldr	r3, [pc, #136]	; (8009f04 <ip4_output_if_src+0x158>)
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	60da      	str	r2, [r3, #12]
 8009e82:	e003      	b.n	8009e8c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	729a      	strb	r2, [r3, #10]
 8009e92:	2200      	movs	r2, #0
 8009e94:	72da      	strb	r2, [r3, #11]
 8009e96:	e00f      	b.n	8009eb8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	895b      	ldrh	r3, [r3, #10]
 8009e9c:	2b13      	cmp	r3, #19
 8009e9e:	d802      	bhi.n	8009ea6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009ea0:	f06f 0301 	mvn.w	r3, #1
 8009ea4:	e020      	b.n	8009ee8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8009eb2:	f107 0314 	add.w	r3, r7, #20
 8009eb6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8009eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00c      	beq.n	8009eda <ip4_output_if_src+0x12e>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	891a      	ldrh	r2, [r3, #8]
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d906      	bls.n	8009eda <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f000 fd53 	bl	800a97c <ip4_frag>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	e006      	b.n	8009ee8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8009eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	68f9      	ldr	r1, [r7, #12]
 8009ee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ee4:	4798      	blx	r3
 8009ee6:	4603      	mov	r3, r0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3720      	adds	r7, #32
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	08014a18 	.word	0x08014a18
 8009ef4:	08014aa0 	.word	0x08014aa0
 8009ef8:	08014aac 	.word	0x08014aac
 8009efc:	08014ad4 	.word	0x08014ad4
 8009f00:	24004394 	.word	0x24004394
 8009f04:	080174b0 	.word	0x080174b0

08009f08 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f1c:	d002      	beq.n	8009f24 <ip4_addr_isbroadcast_u32+0x1c>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d101      	bne.n	8009f28 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8009f24:	2301      	movs	r3, #1
 8009f26:	e02a      	b.n	8009f7e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d101      	bne.n	8009f3a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	e021      	b.n	8009f7e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d101      	bne.n	8009f4a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	e019      	b.n	8009f7e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	3304      	adds	r3, #4
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	405a      	eors	r2, r3
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	3308      	adds	r3, #8
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d10d      	bne.n	8009f7c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	3308      	adds	r3, #8
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	43da      	mvns	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	3308      	adds	r3, #8
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d101      	bne.n	8009f7c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e000      	b.n	8009f7e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8009f7c:	2300      	movs	r3, #0
  }
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
	...

08009f8c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8009f92:	2300      	movs	r3, #0
 8009f94:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8009f96:	4b12      	ldr	r3, [pc, #72]	; (8009fe0 <ip_reass_tmr+0x54>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8009f9c:	e018      	b.n	8009fd0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	7fdb      	ldrb	r3, [r3, #31]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00b      	beq.n	8009fbe <ip_reass_tmr+0x32>
      r->timer--;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	7fdb      	ldrb	r3, [r3, #31]
 8009faa:	3b01      	subs	r3, #1
 8009fac:	b2da      	uxtb	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	e008      	b.n	8009fd0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8009fc8:	68b9      	ldr	r1, [r7, #8]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f80a 	bl	8009fe4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1e3      	bne.n	8009f9e <ip_reass_tmr+0x12>
    }
  }
}
 8009fd6:	bf00      	nop
 8009fd8:	bf00      	nop
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	24004398 	.word	0x24004398

08009fe4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b088      	sub	sp, #32
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d105      	bne.n	800a006 <ip_reass_free_complete_datagram+0x22>
 8009ffa:	4b45      	ldr	r3, [pc, #276]	; (800a110 <ip_reass_free_complete_datagram+0x12c>)
 8009ffc:	22ab      	movs	r2, #171	; 0xab
 8009ffe:	4945      	ldr	r1, [pc, #276]	; (800a114 <ip_reass_free_complete_datagram+0x130>)
 800a000:	4845      	ldr	r0, [pc, #276]	; (800a118 <ip_reass_free_complete_datagram+0x134>)
 800a002:	f008 fff1 	bl	8012fe8 <iprintf>
  if (prev != NULL) {
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00a      	beq.n	800a022 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	429a      	cmp	r2, r3
 800a014:	d005      	beq.n	800a022 <ip_reass_free_complete_datagram+0x3e>
 800a016:	4b3e      	ldr	r3, [pc, #248]	; (800a110 <ip_reass_free_complete_datagram+0x12c>)
 800a018:	22ad      	movs	r2, #173	; 0xad
 800a01a:	4940      	ldr	r1, [pc, #256]	; (800a11c <ip_reass_free_complete_datagram+0x138>)
 800a01c:	483e      	ldr	r0, [pc, #248]	; (800a118 <ip_reass_free_complete_datagram+0x134>)
 800a01e:	f008 ffe3 	bl	8012fe8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	889b      	ldrh	r3, [r3, #4]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	2b00      	cmp	r3, #0
 800a032:	d12a      	bne.n	800a08a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	6858      	ldr	r0, [r3, #4]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	3308      	adds	r3, #8
 800a04a:	2214      	movs	r2, #20
 800a04c:	4619      	mov	r1, r3
 800a04e:	f008 ff9b 	bl	8012f88 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800a052:	2101      	movs	r1, #1
 800a054:	69b8      	ldr	r0, [r7, #24]
 800a056:	f7ff fb69 	bl	800972c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800a05a:	69b8      	ldr	r0, [r7, #24]
 800a05c:	f002 fa1a 	bl	800c494 <pbuf_clen>
 800a060:	4603      	mov	r3, r0
 800a062:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a064:	8bfa      	ldrh	r2, [r7, #30]
 800a066:	8a7b      	ldrh	r3, [r7, #18]
 800a068:	4413      	add	r3, r2
 800a06a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a06e:	db05      	blt.n	800a07c <ip_reass_free_complete_datagram+0x98>
 800a070:	4b27      	ldr	r3, [pc, #156]	; (800a110 <ip_reass_free_complete_datagram+0x12c>)
 800a072:	22bc      	movs	r2, #188	; 0xbc
 800a074:	492a      	ldr	r1, [pc, #168]	; (800a120 <ip_reass_free_complete_datagram+0x13c>)
 800a076:	4828      	ldr	r0, [pc, #160]	; (800a118 <ip_reass_free_complete_datagram+0x134>)
 800a078:	f008 ffb6 	bl	8012fe8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800a07c:	8bfa      	ldrh	r2, [r7, #30]
 800a07e:	8a7b      	ldrh	r3, [r7, #18]
 800a080:	4413      	add	r3, r2
 800a082:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800a084:	69b8      	ldr	r0, [r7, #24]
 800a086:	f002 f977 	bl	800c378 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800a090:	e01f      	b.n	800a0d2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	617b      	str	r3, [r7, #20]
    pcur = p;
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f002 f9f6 	bl	800c494 <pbuf_clen>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a0ac:	8bfa      	ldrh	r2, [r7, #30]
 800a0ae:	8a7b      	ldrh	r3, [r7, #18]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0b6:	db05      	blt.n	800a0c4 <ip_reass_free_complete_datagram+0xe0>
 800a0b8:	4b15      	ldr	r3, [pc, #84]	; (800a110 <ip_reass_free_complete_datagram+0x12c>)
 800a0ba:	22cc      	movs	r2, #204	; 0xcc
 800a0bc:	4918      	ldr	r1, [pc, #96]	; (800a120 <ip_reass_free_complete_datagram+0x13c>)
 800a0be:	4816      	ldr	r0, [pc, #88]	; (800a118 <ip_reass_free_complete_datagram+0x134>)
 800a0c0:	f008 ff92 	bl	8012fe8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800a0c4:	8bfa      	ldrh	r2, [r7, #30]
 800a0c6:	8a7b      	ldrh	r3, [r7, #18]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f002 f953 	bl	800c378 <pbuf_free>
  while (p != NULL) {
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1dc      	bne.n	800a092 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f8c2 	bl	800a264 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800a0e0:	4b10      	ldr	r3, [pc, #64]	; (800a124 <ip_reass_free_complete_datagram+0x140>)
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	8bfa      	ldrh	r2, [r7, #30]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d905      	bls.n	800a0f6 <ip_reass_free_complete_datagram+0x112>
 800a0ea:	4b09      	ldr	r3, [pc, #36]	; (800a110 <ip_reass_free_complete_datagram+0x12c>)
 800a0ec:	22d2      	movs	r2, #210	; 0xd2
 800a0ee:	490e      	ldr	r1, [pc, #56]	; (800a128 <ip_reass_free_complete_datagram+0x144>)
 800a0f0:	4809      	ldr	r0, [pc, #36]	; (800a118 <ip_reass_free_complete_datagram+0x134>)
 800a0f2:	f008 ff79 	bl	8012fe8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800a0f6:	4b0b      	ldr	r3, [pc, #44]	; (800a124 <ip_reass_free_complete_datagram+0x140>)
 800a0f8:	881a      	ldrh	r2, [r3, #0]
 800a0fa:	8bfb      	ldrh	r3, [r7, #30]
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	b29a      	uxth	r2, r3
 800a100:	4b08      	ldr	r3, [pc, #32]	; (800a124 <ip_reass_free_complete_datagram+0x140>)
 800a102:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800a104:	8bfb      	ldrh	r3, [r7, #30]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3720      	adds	r7, #32
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	08014b04 	.word	0x08014b04
 800a114:	08014b90 	.word	0x08014b90
 800a118:	08014b9c 	.word	0x08014b9c
 800a11c:	08014bc4 	.word	0x08014bc4
 800a120:	08014bd8 	.word	0x08014bd8
 800a124:	2400439c 	.word	0x2400439c
 800a128:	08014bf8 	.word	0x08014bf8

0800a12c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b08a      	sub	sp, #40	; 0x28
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800a136:	2300      	movs	r3, #0
 800a138:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800a13a:	2300      	movs	r3, #0
 800a13c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800a13e:	2300      	movs	r3, #0
 800a140:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800a142:	2300      	movs	r3, #0
 800a144:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800a146:	2300      	movs	r3, #0
 800a148:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800a14a:	4b28      	ldr	r3, [pc, #160]	; (800a1ec <ip_reass_remove_oldest_datagram+0xc0>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a150:	e030      	b.n	800a1b4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800a152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a154:	695a      	ldr	r2, [r3, #20]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d10c      	bne.n	800a178 <ip_reass_remove_oldest_datagram+0x4c>
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	699a      	ldr	r2, [r3, #24]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	429a      	cmp	r2, r3
 800a168:	d106      	bne.n	800a178 <ip_reass_remove_oldest_datagram+0x4c>
 800a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16c:	899a      	ldrh	r2, [r3, #12]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	889b      	ldrh	r3, [r3, #4]
 800a172:	b29b      	uxth	r3, r3
 800a174:	429a      	cmp	r2, r3
 800a176:	d014      	beq.n	800a1a2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	3301      	adds	r3, #1
 800a17c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d104      	bne.n	800a18e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	61bb      	str	r3, [r7, #24]
 800a18c:	e009      	b.n	800a1a2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800a18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a190:	7fda      	ldrb	r2, [r3, #31]
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	7fdb      	ldrb	r3, [r3, #31]
 800a196:	429a      	cmp	r2, r3
 800a198:	d803      	bhi.n	800a1a2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1cb      	bne.n	800a152 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800a1ba:	6a3b      	ldr	r3, [r7, #32]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d008      	beq.n	800a1d2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800a1c0:	69b9      	ldr	r1, [r7, #24]
 800a1c2:	6a38      	ldr	r0, [r7, #32]
 800a1c4:	f7ff ff0e 	bl	8009fe4 <ip_reass_free_complete_datagram>
 800a1c8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800a1d2:	697a      	ldr	r2, [r7, #20]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	da02      	bge.n	800a1e0 <ip_reass_remove_oldest_datagram+0xb4>
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	dcac      	bgt.n	800a13a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800a1e0:	697b      	ldr	r3, [r7, #20]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3728      	adds	r7, #40	; 0x28
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	24004398 	.word	0x24004398

0800a1f0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a1fa:	2004      	movs	r0, #4
 800a1fc:	f001 f9a2 	bl	800b544 <memp_malloc>
 800a200:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d110      	bne.n	800a22a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800a208:	6839      	ldr	r1, [r7, #0]
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7ff ff8e 	bl	800a12c <ip_reass_remove_oldest_datagram>
 800a210:	4602      	mov	r2, r0
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	4293      	cmp	r3, r2
 800a216:	dc03      	bgt.n	800a220 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a218:	2004      	movs	r0, #4
 800a21a:	f001 f993 	bl	800b544 <memp_malloc>
 800a21e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d101      	bne.n	800a22a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800a226:	2300      	movs	r3, #0
 800a228:	e016      	b.n	800a258 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a22a:	2220      	movs	r2, #32
 800a22c:	2100      	movs	r1, #0
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f008 fed2 	bl	8012fd8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	220f      	movs	r2, #15
 800a238:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800a23a:	4b09      	ldr	r3, [pc, #36]	; (800a260 <ip_reass_enqueue_new_datagram+0x70>)
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800a242:	4a07      	ldr	r2, [pc, #28]	; (800a260 <ip_reass_enqueue_new_datagram+0x70>)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	3308      	adds	r3, #8
 800a24c:	2214      	movs	r2, #20
 800a24e:	6879      	ldr	r1, [r7, #4]
 800a250:	4618      	mov	r0, r3
 800a252:	f008 fe99 	bl	8012f88 <memcpy>
  return ipr;
 800a256:	68fb      	ldr	r3, [r7, #12]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	24004398 	.word	0x24004398

0800a264 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800a26e:	4b10      	ldr	r3, [pc, #64]	; (800a2b0 <ip_reass_dequeue_datagram+0x4c>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	429a      	cmp	r2, r3
 800a276:	d104      	bne.n	800a282 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a0c      	ldr	r2, [pc, #48]	; (800a2b0 <ip_reass_dequeue_datagram+0x4c>)
 800a27e:	6013      	str	r3, [r2, #0]
 800a280:	e00d      	b.n	800a29e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d106      	bne.n	800a296 <ip_reass_dequeue_datagram+0x32>
 800a288:	4b0a      	ldr	r3, [pc, #40]	; (800a2b4 <ip_reass_dequeue_datagram+0x50>)
 800a28a:	f240 1245 	movw	r2, #325	; 0x145
 800a28e:	490a      	ldr	r1, [pc, #40]	; (800a2b8 <ip_reass_dequeue_datagram+0x54>)
 800a290:	480a      	ldr	r0, [pc, #40]	; (800a2bc <ip_reass_dequeue_datagram+0x58>)
 800a292:	f008 fea9 	bl	8012fe8 <iprintf>
    prev->next = ipr->next;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	2004      	movs	r0, #4
 800a2a2:	f001 f9c5 	bl	800b630 <memp_free>
}
 800a2a6:	bf00      	nop
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	24004398 	.word	0x24004398
 800a2b4:	08014b04 	.word	0x08014b04
 800a2b8:	08014c1c 	.word	0x08014c1c
 800a2bc:	08014b9c 	.word	0x08014b9c

0800a2c0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b08c      	sub	sp, #48	; 0x30
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	885b      	ldrh	r3, [r3, #2]
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fe f8a3 	bl	800842c <lwip_htons>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	f003 030f 	and.w	r3, r3, #15
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800a2f8:	7e7b      	ldrb	r3, [r7, #25]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	8b7a      	ldrh	r2, [r7, #26]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d202      	bcs.n	800a308 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a302:	f04f 33ff 	mov.w	r3, #4294967295
 800a306:	e135      	b.n	800a574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800a308:	7e7b      	ldrb	r3, [r7, #25]
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	8b7a      	ldrh	r2, [r7, #26]
 800a30e:	1ad3      	subs	r3, r2, r3
 800a310:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	88db      	ldrh	r3, [r3, #6]
 800a316:	b29b      	uxth	r3, r3
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fe f887 	bl	800842c <lwip_htons>
 800a31e:	4603      	mov	r3, r0
 800a320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a324:	b29b      	uxth	r3, r3
 800a326:	00db      	lsls	r3, r3, #3
 800a328:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800a330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a332:	2200      	movs	r2, #0
 800a334:	701a      	strb	r2, [r3, #0]
 800a336:	2200      	movs	r2, #0
 800a338:	705a      	strb	r2, [r3, #1]
 800a33a:	2200      	movs	r2, #0
 800a33c:	709a      	strb	r2, [r3, #2]
 800a33e:	2200      	movs	r2, #0
 800a340:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800a342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a344:	8afa      	ldrh	r2, [r7, #22]
 800a346:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800a348:	8afa      	ldrh	r2, [r7, #22]
 800a34a:	8b7b      	ldrh	r3, [r7, #26]
 800a34c:	4413      	add	r3, r2
 800a34e:	b29a      	uxth	r2, r3
 800a350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a352:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800a354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a356:	88db      	ldrh	r3, [r3, #6]
 800a358:	b29b      	uxth	r3, r3
 800a35a:	8afa      	ldrh	r2, [r7, #22]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d902      	bls.n	800a366 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a360:	f04f 33ff 	mov.w	r3, #4294967295
 800a364:	e106      	b.n	800a574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	627b      	str	r3, [r7, #36]	; 0x24
 800a36c:	e068      	b.n	800a440 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800a374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a376:	889b      	ldrh	r3, [r3, #4]
 800a378:	b29a      	uxth	r2, r3
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	889b      	ldrh	r3, [r3, #4]
 800a37e:	b29b      	uxth	r3, r3
 800a380:	429a      	cmp	r2, r3
 800a382:	d235      	bcs.n	800a3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800a384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a388:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d020      	beq.n	800a3d2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800a390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a392:	889b      	ldrh	r3, [r3, #4]
 800a394:	b29a      	uxth	r2, r3
 800a396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a398:	88db      	ldrh	r3, [r3, #6]
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d307      	bcc.n	800a3b0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	88db      	ldrh	r3, [r3, #6]
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	889b      	ldrh	r3, [r3, #4]
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d902      	bls.n	800a3b6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a3b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b4:	e0de      	b.n	800a574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800a3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800a3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3be:	88db      	ldrh	r3, [r3, #6]
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c4:	889b      	ldrh	r3, [r3, #4]
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d03d      	beq.n	800a448 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800a3d0:	e03a      	b.n	800a448 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d4:	88db      	ldrh	r3, [r3, #6]
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	889b      	ldrh	r3, [r3, #4]
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d902      	bls.n	800a3e8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a3e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e6:	e0c5      	b.n	800a574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	605a      	str	r2, [r3, #4]
      break;
 800a3ee:	e02b      	b.n	800a448 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f2:	889b      	ldrh	r3, [r3, #4]
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	889b      	ldrh	r3, [r3, #4]
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d102      	bne.n	800a406 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a400:	f04f 33ff 	mov.w	r3, #4294967295
 800a404:	e0b6      	b.n	800a574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800a406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a408:	889b      	ldrh	r3, [r3, #4]
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	88db      	ldrh	r3, [r3, #6]
 800a410:	b29b      	uxth	r3, r3
 800a412:	429a      	cmp	r2, r3
 800a414:	d202      	bcs.n	800a41c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800a416:	f04f 33ff 	mov.w	r3, #4294967295
 800a41a:	e0ab      	b.n	800a574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d009      	beq.n	800a436 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800a422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a424:	88db      	ldrh	r3, [r3, #6]
 800a426:	b29a      	uxth	r2, r3
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	889b      	ldrh	r3, [r3, #4]
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	429a      	cmp	r2, r3
 800a430:	d001      	beq.n	800a436 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	2b00      	cmp	r3, #0
 800a444:	d193      	bne.n	800a36e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800a446:	e000      	b.n	800a44a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800a448:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d12d      	bne.n	800a4ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800a450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a452:	2b00      	cmp	r3, #0
 800a454:	d01c      	beq.n	800a490 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800a456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a458:	88db      	ldrh	r3, [r3, #6]
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45e:	889b      	ldrh	r3, [r3, #4]
 800a460:	b29b      	uxth	r3, r3
 800a462:	429a      	cmp	r2, r3
 800a464:	d906      	bls.n	800a474 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800a466:	4b45      	ldr	r3, [pc, #276]	; (800a57c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a468:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800a46c:	4944      	ldr	r1, [pc, #272]	; (800a580 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800a46e:	4845      	ldr	r0, [pc, #276]	; (800a584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a470:	f008 fdba 	bl	8012fe8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800a474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800a47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47c:	88db      	ldrh	r3, [r3, #6]
 800a47e:	b29a      	uxth	r2, r3
 800a480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a482:	889b      	ldrh	r3, [r3, #4]
 800a484:	b29b      	uxth	r3, r3
 800a486:	429a      	cmp	r2, r3
 800a488:	d010      	beq.n	800a4ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800a48a:	2300      	movs	r3, #0
 800a48c:	623b      	str	r3, [r7, #32]
 800a48e:	e00d      	b.n	800a4ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d006      	beq.n	800a4a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800a498:	4b38      	ldr	r3, [pc, #224]	; (800a57c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a49a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800a49e:	493a      	ldr	r1, [pc, #232]	; (800a588 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800a4a0:	4838      	ldr	r0, [pc, #224]	; (800a584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a4a2:	f008 fda1 	bl	8012fe8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	68ba      	ldr	r2, [r7, #8]
 800a4aa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d105      	bne.n	800a4be <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	7f9b      	ldrb	r3, [r3, #30]
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d059      	beq.n	800a572 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d04f      	beq.n	800a564 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d006      	beq.n	800a4da <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	889b      	ldrh	r3, [r3, #4]
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	623b      	str	r3, [r7, #32]
 800a4de:	e041      	b.n	800a564 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800a4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a4ea:	e012      	b.n	800a512 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800a4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f4:	88db      	ldrh	r3, [r3, #6]
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fa:	889b      	ldrh	r3, [r3, #4]
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d002      	beq.n	800a508 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800a502:	2300      	movs	r3, #0
 800a504:	623b      	str	r3, [r7, #32]
            break;
 800a506:	e007      	b.n	800a518 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800a508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800a50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800a512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1e9      	bne.n	800a4ec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800a518:	6a3b      	ldr	r3, [r7, #32]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d022      	beq.n	800a564 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d106      	bne.n	800a534 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800a526:	4b15      	ldr	r3, [pc, #84]	; (800a57c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a528:	f240 12df 	movw	r2, #479	; 0x1df
 800a52c:	4917      	ldr	r1, [pc, #92]	; (800a58c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800a52e:	4815      	ldr	r0, [pc, #84]	; (800a584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a530:	f008 fd5a 	bl	8012fe8 <iprintf>
          LWIP_ASSERT("sanity check",
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d106      	bne.n	800a54e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800a540:	4b0e      	ldr	r3, [pc, #56]	; (800a57c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a542:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a546:	4911      	ldr	r1, [pc, #68]	; (800a58c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800a548:	480e      	ldr	r0, [pc, #56]	; (800a584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a54a:	f008 fd4d 	bl	8012fe8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d006      	beq.n	800a564 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800a556:	4b09      	ldr	r3, [pc, #36]	; (800a57c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800a558:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800a55c:	490c      	ldr	r1, [pc, #48]	; (800a590 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800a55e:	4809      	ldr	r0, [pc, #36]	; (800a584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800a560:	f008 fd42 	bl	8012fe8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800a564:	6a3b      	ldr	r3, [r7, #32]
 800a566:	2b00      	cmp	r3, #0
 800a568:	bf14      	ite	ne
 800a56a:	2301      	movne	r3, #1
 800a56c:	2300      	moveq	r3, #0
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	e000      	b.n	800a574 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3730      	adds	r7, #48	; 0x30
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	08014b04 	.word	0x08014b04
 800a580:	08014c38 	.word	0x08014c38
 800a584:	08014b9c 	.word	0x08014b9c
 800a588:	08014c58 	.word	0x08014c58
 800a58c:	08014c90 	.word	0x08014c90
 800a590:	08014ca0 	.word	0x08014ca0

0800a594 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b08e      	sub	sp, #56	; 0x38
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800a5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	f003 030f 	and.w	r3, r3, #15
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b14      	cmp	r3, #20
 800a5b2:	f040 8171 	bne.w	800a898 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800a5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b8:	88db      	ldrh	r3, [r3, #6]
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fd ff35 	bl	800842c <lwip_htons>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	00db      	lsls	r3, r3, #3
 800a5cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d0:	885b      	ldrh	r3, [r3, #2]
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7fd ff29 	bl	800842c <lwip_htons>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800a5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	f003 030f 	and.w	r3, r3, #15
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800a5ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	f0c0 8150 	bcc.w	800a89c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800a5fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a600:	b29b      	uxth	r3, r3
 800a602:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f001 ff43 	bl	800c494 <pbuf_clen>
 800a60e:	4603      	mov	r3, r0
 800a610:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800a612:	4b8c      	ldr	r3, [pc, #560]	; (800a844 <ip4_reass+0x2b0>)
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	8c3b      	ldrh	r3, [r7, #32]
 800a61a:	4413      	add	r3, r2
 800a61c:	2b0a      	cmp	r3, #10
 800a61e:	dd10      	ble.n	800a642 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a620:	8c3b      	ldrh	r3, [r7, #32]
 800a622:	4619      	mov	r1, r3
 800a624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a626:	f7ff fd81 	bl	800a12c <ip_reass_remove_oldest_datagram>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f000 8137 	beq.w	800a8a0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800a632:	4b84      	ldr	r3, [pc, #528]	; (800a844 <ip4_reass+0x2b0>)
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	461a      	mov	r2, r3
 800a638:	8c3b      	ldrh	r3, [r7, #32]
 800a63a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a63c:	2b0a      	cmp	r3, #10
 800a63e:	f300 812f 	bgt.w	800a8a0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a642:	4b81      	ldr	r3, [pc, #516]	; (800a848 <ip4_reass+0x2b4>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	633b      	str	r3, [r7, #48]	; 0x30
 800a648:	e015      	b.n	800a676 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64c:	695a      	ldr	r2, [r3, #20]
 800a64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	429a      	cmp	r2, r3
 800a654:	d10c      	bne.n	800a670 <ip4_reass+0xdc>
 800a656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a658:	699a      	ldr	r2, [r3, #24]
 800a65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d106      	bne.n	800a670 <ip4_reass+0xdc>
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	899a      	ldrh	r2, [r3, #12]
 800a666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a668:	889b      	ldrh	r3, [r3, #4]
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d006      	beq.n	800a67e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	633b      	str	r3, [r7, #48]	; 0x30
 800a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1e6      	bne.n	800a64a <ip4_reass+0xb6>
 800a67c:	e000      	b.n	800a680 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800a67e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800a680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a682:	2b00      	cmp	r3, #0
 800a684:	d109      	bne.n	800a69a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800a686:	8c3b      	ldrh	r3, [r7, #32]
 800a688:	4619      	mov	r1, r3
 800a68a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a68c:	f7ff fdb0 	bl	800a1f0 <ip_reass_enqueue_new_datagram>
 800a690:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	2b00      	cmp	r3, #0
 800a696:	d11c      	bne.n	800a6d2 <ip4_reass+0x13e>
      goto nullreturn;
 800a698:	e105      	b.n	800a8a6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69c:	88db      	ldrh	r3, [r3, #6]
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fd fec3 	bl	800842c <lwip_htons>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d110      	bne.n	800a6d2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b2:	89db      	ldrh	r3, [r3, #14]
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fd feb9 	bl	800842c <lwip_htons>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d006      	beq.n	800a6d2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c6:	3308      	adds	r3, #8
 800a6c8:	2214      	movs	r2, #20
 800a6ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f008 fc5b 	bl	8012f88 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	88db      	ldrh	r3, [r3, #6]
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	f003 0320 	and.w	r3, r3, #32
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	bf0c      	ite	eq
 800a6e0:	2301      	moveq	r3, #1
 800a6e2:	2300      	movne	r3, #0
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00e      	beq.n	800a70c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800a6ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a6f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a6f2:	4413      	add	r3, r2
 800a6f4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800a6f6:	8b7a      	ldrh	r2, [r7, #26]
 800a6f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	f0c0 80a0 	bcc.w	800a840 <ip4_reass+0x2ac>
 800a700:	8b7b      	ldrh	r3, [r7, #26]
 800a702:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800a706:	4293      	cmp	r3, r2
 800a708:	f200 809a 	bhi.w	800a840 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800a70c:	69fa      	ldr	r2, [r7, #28]
 800a70e:	6879      	ldr	r1, [r7, #4]
 800a710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a712:	f7ff fdd5 	bl	800a2c0 <ip_reass_chain_frag_into_datagram_and_validate>
 800a716:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71e:	f000 809b 	beq.w	800a858 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800a722:	4b48      	ldr	r3, [pc, #288]	; (800a844 <ip4_reass+0x2b0>)
 800a724:	881a      	ldrh	r2, [r3, #0]
 800a726:	8c3b      	ldrh	r3, [r7, #32]
 800a728:	4413      	add	r3, r2
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	4b45      	ldr	r3, [pc, #276]	; (800a844 <ip4_reass+0x2b0>)
 800a72e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00d      	beq.n	800a752 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800a736:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a73a:	4413      	add	r3, r2
 800a73c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800a73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a740:	8a7a      	ldrh	r2, [r7, #18]
 800a742:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	7f9b      	ldrb	r3, [r3, #30]
 800a748:	f043 0301 	orr.w	r3, r3, #1
 800a74c:	b2da      	uxtb	r2, r3
 800a74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a750:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d171      	bne.n	800a83c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800a758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75a:	8b9b      	ldrh	r3, [r3, #28]
 800a75c:	3314      	adds	r3, #20
 800a75e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800a760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800a76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a774:	3308      	adds	r3, #8
 800a776:	2214      	movs	r2, #20
 800a778:	4619      	mov	r1, r3
 800a77a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a77c:	f008 fc04 	bl	8012f88 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800a780:	8a3b      	ldrh	r3, [r7, #16]
 800a782:	4618      	mov	r0, r3
 800a784:	f7fd fe52 	bl	800842c <lwip_htons>
 800a788:	4603      	mov	r3, r0
 800a78a:	461a      	mov	r2, r3
 800a78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800a790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a792:	2200      	movs	r2, #0
 800a794:	719a      	strb	r2, [r3, #6]
 800a796:	2200      	movs	r2, #0
 800a798:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800a79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79c:	2200      	movs	r2, #0
 800a79e:	729a      	strb	r2, [r3, #10]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800a7aa:	e00d      	b.n	800a7c8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800a7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800a7b2:	2114      	movs	r1, #20
 800a7b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a7b6:	f001 fd59 	bl	800c26c <pbuf_remove_header>
      pbuf_cat(p, r);
 800a7ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f001 fea9 	bl	800c514 <pbuf_cat>
      r = iprh->next_pbuf;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800a7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1ee      	bne.n	800a7ac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800a7ce:	4b1e      	ldr	r3, [pc, #120]	; (800a848 <ip4_reass+0x2b4>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d102      	bne.n	800a7de <ip4_reass+0x24a>
      ipr_prev = NULL;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7dc:	e010      	b.n	800a800 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a7de:	4b1a      	ldr	r3, [pc, #104]	; (800a848 <ip4_reass+0x2b4>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7e4:	e007      	b.n	800a7f6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800a7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d006      	beq.n	800a7fe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1f4      	bne.n	800a7e6 <ip4_reass+0x252>
 800a7fc:	e000      	b.n	800a800 <ip4_reass+0x26c>
          break;
 800a7fe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800a800:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a804:	f7ff fd2e 	bl	800a264 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f001 fe43 	bl	800c494 <pbuf_clen>
 800a80e:	4603      	mov	r3, r0
 800a810:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800a812:	4b0c      	ldr	r3, [pc, #48]	; (800a844 <ip4_reass+0x2b0>)
 800a814:	881b      	ldrh	r3, [r3, #0]
 800a816:	8c3a      	ldrh	r2, [r7, #32]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d906      	bls.n	800a82a <ip4_reass+0x296>
 800a81c:	4b0b      	ldr	r3, [pc, #44]	; (800a84c <ip4_reass+0x2b8>)
 800a81e:	f240 229b 	movw	r2, #667	; 0x29b
 800a822:	490b      	ldr	r1, [pc, #44]	; (800a850 <ip4_reass+0x2bc>)
 800a824:	480b      	ldr	r0, [pc, #44]	; (800a854 <ip4_reass+0x2c0>)
 800a826:	f008 fbdf 	bl	8012fe8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800a82a:	4b06      	ldr	r3, [pc, #24]	; (800a844 <ip4_reass+0x2b0>)
 800a82c:	881a      	ldrh	r2, [r3, #0]
 800a82e:	8c3b      	ldrh	r3, [r7, #32]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	b29a      	uxth	r2, r3
 800a834:	4b03      	ldr	r3, [pc, #12]	; (800a844 <ip4_reass+0x2b0>)
 800a836:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	e038      	b.n	800a8ae <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800a83c:	2300      	movs	r3, #0
 800a83e:	e036      	b.n	800a8ae <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800a840:	bf00      	nop
 800a842:	e00a      	b.n	800a85a <ip4_reass+0x2c6>
 800a844:	2400439c 	.word	0x2400439c
 800a848:	24004398 	.word	0x24004398
 800a84c:	08014b04 	.word	0x08014b04
 800a850:	08014cc4 	.word	0x08014cc4
 800a854:	08014b9c 	.word	0x08014b9c
    goto nullreturn_ipr;
 800a858:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d106      	bne.n	800a86e <ip4_reass+0x2da>
 800a860:	4b15      	ldr	r3, [pc, #84]	; (800a8b8 <ip4_reass+0x324>)
 800a862:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800a866:	4915      	ldr	r1, [pc, #84]	; (800a8bc <ip4_reass+0x328>)
 800a868:	4815      	ldr	r0, [pc, #84]	; (800a8c0 <ip4_reass+0x32c>)
 800a86a:	f008 fbbd 	bl	8012fe8 <iprintf>
  if (ipr->p == NULL) {
 800a86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d116      	bne.n	800a8a4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800a876:	4b13      	ldr	r3, [pc, #76]	; (800a8c4 <ip4_reass+0x330>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d006      	beq.n	800a88e <ip4_reass+0x2fa>
 800a880:	4b0d      	ldr	r3, [pc, #52]	; (800a8b8 <ip4_reass+0x324>)
 800a882:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a886:	4910      	ldr	r1, [pc, #64]	; (800a8c8 <ip4_reass+0x334>)
 800a888:	480d      	ldr	r0, [pc, #52]	; (800a8c0 <ip4_reass+0x32c>)
 800a88a:	f008 fbad 	bl	8012fe8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800a88e:	2100      	movs	r1, #0
 800a890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a892:	f7ff fce7 	bl	800a264 <ip_reass_dequeue_datagram>
 800a896:	e006      	b.n	800a8a6 <ip4_reass+0x312>
    goto nullreturn;
 800a898:	bf00      	nop
 800a89a:	e004      	b.n	800a8a6 <ip4_reass+0x312>
    goto nullreturn;
 800a89c:	bf00      	nop
 800a89e:	e002      	b.n	800a8a6 <ip4_reass+0x312>
      goto nullreturn;
 800a8a0:	bf00      	nop
 800a8a2:	e000      	b.n	800a8a6 <ip4_reass+0x312>
  }

nullreturn:
 800a8a4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f001 fd66 	bl	800c378 <pbuf_free>
  return NULL;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3738      	adds	r7, #56	; 0x38
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	08014b04 	.word	0x08014b04
 800a8bc:	08014ce0 	.word	0x08014ce0
 800a8c0:	08014b9c 	.word	0x08014b9c
 800a8c4:	24004398 	.word	0x24004398
 800a8c8:	08014cec 	.word	0x08014cec

0800a8cc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800a8d0:	2005      	movs	r0, #5
 800a8d2:	f000 fe37 	bl	800b544 <memp_malloc>
 800a8d6:	4603      	mov	r3, r0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d106      	bne.n	800a8f8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800a8ea:	4b07      	ldr	r3, [pc, #28]	; (800a908 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800a8ec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800a8f0:	4906      	ldr	r1, [pc, #24]	; (800a90c <ip_frag_free_pbuf_custom_ref+0x30>)
 800a8f2:	4807      	ldr	r0, [pc, #28]	; (800a910 <ip_frag_free_pbuf_custom_ref+0x34>)
 800a8f4:	f008 fb78 	bl	8012fe8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800a8f8:	6879      	ldr	r1, [r7, #4]
 800a8fa:	2005      	movs	r0, #5
 800a8fc:	f000 fe98 	bl	800b630 <memp_free>
}
 800a900:	bf00      	nop
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	08014b04 	.word	0x08014b04
 800a90c:	08014d0c 	.word	0x08014d0c
 800a910:	08014b9c 	.word	0x08014b9c

0800a914 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d106      	bne.n	800a934 <ipfrag_free_pbuf_custom+0x20>
 800a926:	4b11      	ldr	r3, [pc, #68]	; (800a96c <ipfrag_free_pbuf_custom+0x58>)
 800a928:	f240 22ce 	movw	r2, #718	; 0x2ce
 800a92c:	4910      	ldr	r1, [pc, #64]	; (800a970 <ipfrag_free_pbuf_custom+0x5c>)
 800a92e:	4811      	ldr	r0, [pc, #68]	; (800a974 <ipfrag_free_pbuf_custom+0x60>)
 800a930:	f008 fb5a 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d006      	beq.n	800a94a <ipfrag_free_pbuf_custom+0x36>
 800a93c:	4b0b      	ldr	r3, [pc, #44]	; (800a96c <ipfrag_free_pbuf_custom+0x58>)
 800a93e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800a942:	490d      	ldr	r1, [pc, #52]	; (800a978 <ipfrag_free_pbuf_custom+0x64>)
 800a944:	480b      	ldr	r0, [pc, #44]	; (800a974 <ipfrag_free_pbuf_custom+0x60>)
 800a946:	f008 fb4f 	bl	8012fe8 <iprintf>
  if (pcr->original != NULL) {
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	695b      	ldr	r3, [r3, #20]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d004      	beq.n	800a95c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	4618      	mov	r0, r3
 800a958:	f001 fd0e 	bl	800c378 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f7ff ffbd 	bl	800a8dc <ip_frag_free_pbuf_custom_ref>
}
 800a962:	bf00      	nop
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	08014b04 	.word	0x08014b04
 800a970:	08014d18 	.word	0x08014d18
 800a974:	08014b9c 	.word	0x08014b9c
 800a978:	08014d24 	.word	0x08014d24

0800a97c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b094      	sub	sp, #80	; 0x50
 800a980:	af02      	add	r7, sp, #8
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a992:	3b14      	subs	r3, #20
 800a994:	2b00      	cmp	r3, #0
 800a996:	da00      	bge.n	800a99a <ip4_frag+0x1e>
 800a998:	3307      	adds	r3, #7
 800a99a:	10db      	asrs	r3, r3, #3
 800a99c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800a99e:	2314      	movs	r3, #20
 800a9a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800a9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	f003 030f 	and.w	r3, r3, #15
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2b14      	cmp	r3, #20
 800a9bc:	d002      	beq.n	800a9c4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800a9be:	f06f 0305 	mvn.w	r3, #5
 800a9c2:	e110      	b.n	800abe6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	895b      	ldrh	r3, [r3, #10]
 800a9c8:	2b13      	cmp	r3, #19
 800a9ca:	d809      	bhi.n	800a9e0 <ip4_frag+0x64>
 800a9cc:	4b88      	ldr	r3, [pc, #544]	; (800abf0 <ip4_frag+0x274>)
 800a9ce:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800a9d2:	4988      	ldr	r1, [pc, #544]	; (800abf4 <ip4_frag+0x278>)
 800a9d4:	4888      	ldr	r0, [pc, #544]	; (800abf8 <ip4_frag+0x27c>)
 800a9d6:	f008 fb07 	bl	8012fe8 <iprintf>
 800a9da:	f06f 0305 	mvn.w	r3, #5
 800a9de:	e102      	b.n	800abe6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e2:	88db      	ldrh	r3, [r3, #6]
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7fd fd20 	bl	800842c <lwip_htons>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800a9f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a9f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800a9fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a9fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa00:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	891b      	ldrh	r3, [r3, #8]
 800aa06:	3b14      	subs	r3, #20
 800aa08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800aa0c:	e0e1      	b.n	800abd2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800aa0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aa10:	00db      	lsls	r3, r3, #3
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	bf28      	it	cs
 800aa1c:	4613      	movcs	r3, r2
 800aa1e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800aa20:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aa24:	2114      	movs	r1, #20
 800aa26:	200e      	movs	r0, #14
 800aa28:	f001 f9c2 	bl	800bdb0 <pbuf_alloc>
 800aa2c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f000 80d5 	beq.w	800abe0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	895b      	ldrh	r3, [r3, #10]
 800aa3a:	2b13      	cmp	r3, #19
 800aa3c:	d806      	bhi.n	800aa4c <ip4_frag+0xd0>
 800aa3e:	4b6c      	ldr	r3, [pc, #432]	; (800abf0 <ip4_frag+0x274>)
 800aa40:	f44f 7249 	mov.w	r2, #804	; 0x324
 800aa44:	496d      	ldr	r1, [pc, #436]	; (800abfc <ip4_frag+0x280>)
 800aa46:	486c      	ldr	r0, [pc, #432]	; (800abf8 <ip4_frag+0x27c>)
 800aa48:	f008 face 	bl	8012fe8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	2214      	movs	r2, #20
 800aa52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa54:	4618      	mov	r0, r3
 800aa56:	f008 fa97 	bl	8012f88 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800aa60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aa62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800aa66:	e064      	b.n	800ab32 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	895a      	ldrh	r2, [r3, #10]
 800aa6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	895b      	ldrh	r3, [r3, #10]
 800aa76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d906      	bls.n	800aa8a <ip4_frag+0x10e>
 800aa7c:	4b5c      	ldr	r3, [pc, #368]	; (800abf0 <ip4_frag+0x274>)
 800aa7e:	f240 322d 	movw	r2, #813	; 0x32d
 800aa82:	495f      	ldr	r1, [pc, #380]	; (800ac00 <ip4_frag+0x284>)
 800aa84:	485c      	ldr	r0, [pc, #368]	; (800abf8 <ip4_frag+0x27c>)
 800aa86:	f008 faaf 	bl	8012fe8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800aa8a:	8bfa      	ldrh	r2, [r7, #30]
 800aa8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aa90:	4293      	cmp	r3, r2
 800aa92:	bf28      	it	cs
 800aa94:	4613      	movcs	r3, r2
 800aa96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800aa9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d105      	bne.n	800aaae <ip4_frag+0x132>
        poff = 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	60fb      	str	r3, [r7, #12]
        continue;
 800aaac:	e041      	b.n	800ab32 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800aaae:	f7ff ff0d 	bl	800a8cc <ip_frag_alloc_pbuf_custom_ref>
 800aab2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d103      	bne.n	800aac2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800aaba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aabc:	f001 fc5c 	bl	800c378 <pbuf_free>
        goto memerr;
 800aac0:	e08f      	b.n	800abe2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800aac2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800aac8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aaca:	4413      	add	r3, r2
 800aacc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800aad0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800aad4:	9201      	str	r2, [sp, #4]
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	4603      	mov	r3, r0
 800aada:	2241      	movs	r2, #65	; 0x41
 800aadc:	2000      	movs	r0, #0
 800aade:	f001 fa91 	bl	800c004 <pbuf_alloced_custom>
 800aae2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d106      	bne.n	800aaf8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800aaea:	69b8      	ldr	r0, [r7, #24]
 800aaec:	f7ff fef6 	bl	800a8dc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800aaf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaf2:	f001 fc41 	bl	800c378 <pbuf_free>
        goto memerr;
 800aaf6:	e074      	b.n	800abe2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f001 fce3 	bl	800c4c4 <pbuf_ref>
      pcr->original = p;
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	4a3f      	ldr	r2, [pc, #252]	; (800ac04 <ip4_frag+0x288>)
 800ab08:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ab0a:	6979      	ldr	r1, [r7, #20]
 800ab0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab0e:	f001 fd01 	bl	800c514 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ab12:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ab16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ab20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d004      	beq.n	800ab32 <ip4_frag+0x1b6>
        poff = 0;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ab32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d196      	bne.n	800aa68 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ab3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ab3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ab40:	4413      	add	r3, r2
 800ab42:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ab48:	f1a3 0213 	sub.w	r2, r3, #19
 800ab4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ab50:	429a      	cmp	r2, r3
 800ab52:	bfcc      	ite	gt
 800ab54:	2301      	movgt	r3, #1
 800ab56:	2300      	movle	r3, #0
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ab5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ab60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab64:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800ab66:	6a3b      	ldr	r3, [r7, #32]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <ip4_frag+0x1f6>
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d003      	beq.n	800ab7a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ab72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ab74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ab78:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ab7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fd fc55 	bl	800842c <lwip_htons>
 800ab82:	4603      	mov	r3, r0
 800ab84:	461a      	mov	r2, r3
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ab8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ab8c:	3314      	adds	r3, #20
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7fd fc4b 	bl	800842c <lwip_htons>
 800ab96:	4603      	mov	r3, r0
 800ab98:	461a      	mov	r2, r3
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba0:	2200      	movs	r2, #0
 800aba2:	729a      	strb	r2, [r3, #10]
 800aba4:	2200      	movs	r2, #0
 800aba6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	695b      	ldr	r3, [r3, #20]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abb0:	68b8      	ldr	r0, [r7, #8]
 800abb2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800abb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abb6:	f001 fbdf 	bl	800c378 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800abba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800abbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800abc6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800abca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800abcc:	4413      	add	r3, r2
 800abce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800abd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f47f af19 	bne.w	800aa0e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800abdc:	2300      	movs	r3, #0
 800abde:	e002      	b.n	800abe6 <ip4_frag+0x26a>
      goto memerr;
 800abe0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800abe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3748      	adds	r7, #72	; 0x48
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	08014b04 	.word	0x08014b04
 800abf4:	08014d30 	.word	0x08014d30
 800abf8:	08014b9c 	.word	0x08014b9c
 800abfc:	08014d4c 	.word	0x08014d4c
 800ac00:	08014d6c 	.word	0x08014d6c
 800ac04:	0800a915 	.word	0x0800a915

0800ac08 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	4603      	mov	r3, r0
 800ac10:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ac12:	4b05      	ldr	r3, [pc, #20]	; (800ac28 <ptr_to_mem+0x20>)
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	88fb      	ldrh	r3, [r7, #6]
 800ac18:	4413      	add	r3, r2
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	240043a0 	.word	0x240043a0

0800ac2c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ac34:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <mem_to_ptr+0x20>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	b29b      	uxth	r3, r3
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	240043a0 	.word	0x240043a0

0800ac50 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ac50:	b590      	push	{r4, r7, lr}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ac58:	4b47      	ldr	r3, [pc, #284]	; (800ad78 <plug_holes+0x128>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d206      	bcs.n	800ac70 <plug_holes+0x20>
 800ac62:	4b46      	ldr	r3, [pc, #280]	; (800ad7c <plug_holes+0x12c>)
 800ac64:	f240 12df 	movw	r2, #479	; 0x1df
 800ac68:	4945      	ldr	r1, [pc, #276]	; (800ad80 <plug_holes+0x130>)
 800ac6a:	4846      	ldr	r0, [pc, #280]	; (800ad84 <plug_holes+0x134>)
 800ac6c:	f008 f9bc 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ac70:	4b45      	ldr	r3, [pc, #276]	; (800ad88 <plug_holes+0x138>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d306      	bcc.n	800ac88 <plug_holes+0x38>
 800ac7a:	4b40      	ldr	r3, [pc, #256]	; (800ad7c <plug_holes+0x12c>)
 800ac7c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ac80:	4942      	ldr	r1, [pc, #264]	; (800ad8c <plug_holes+0x13c>)
 800ac82:	4840      	ldr	r0, [pc, #256]	; (800ad84 <plug_holes+0x134>)
 800ac84:	f008 f9b0 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	791b      	ldrb	r3, [r3, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d006      	beq.n	800ac9e <plug_holes+0x4e>
 800ac90:	4b3a      	ldr	r3, [pc, #232]	; (800ad7c <plug_holes+0x12c>)
 800ac92:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ac96:	493e      	ldr	r1, [pc, #248]	; (800ad90 <plug_holes+0x140>)
 800ac98:	483a      	ldr	r0, [pc, #232]	; (800ad84 <plug_holes+0x134>)
 800ac9a:	f008 f9a5 	bl	8012fe8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	881b      	ldrh	r3, [r3, #0]
 800aca2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d906      	bls.n	800acb8 <plug_holes+0x68>
 800acaa:	4b34      	ldr	r3, [pc, #208]	; (800ad7c <plug_holes+0x12c>)
 800acac:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800acb0:	4938      	ldr	r1, [pc, #224]	; (800ad94 <plug_holes+0x144>)
 800acb2:	4834      	ldr	r0, [pc, #208]	; (800ad84 <plug_holes+0x134>)
 800acb4:	f008 f998 	bl	8012fe8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	881b      	ldrh	r3, [r3, #0]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7ff ffa3 	bl	800ac08 <ptr_to_mem>
 800acc2:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d025      	beq.n	800ad18 <plug_holes+0xc8>
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	791b      	ldrb	r3, [r3, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d121      	bne.n	800ad18 <plug_holes+0xc8>
 800acd4:	4b2c      	ldr	r3, [pc, #176]	; (800ad88 <plug_holes+0x138>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d01c      	beq.n	800ad18 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800acde:	4b2e      	ldr	r3, [pc, #184]	; (800ad98 <plug_holes+0x148>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d102      	bne.n	800acee <plug_holes+0x9e>
      lfree = mem;
 800ace8:	4a2b      	ldr	r2, [pc, #172]	; (800ad98 <plug_holes+0x148>)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	881a      	ldrh	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	881b      	ldrh	r3, [r3, #0]
 800acfa:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d00a      	beq.n	800ad18 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	881b      	ldrh	r3, [r3, #0]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7ff ff7e 	bl	800ac08 <ptr_to_mem>
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f7ff ff8c 	bl	800ac2c <mem_to_ptr>
 800ad14:	4603      	mov	r3, r0
 800ad16:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	885b      	ldrh	r3, [r3, #2]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7ff ff73 	bl	800ac08 <ptr_to_mem>
 800ad22:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d020      	beq.n	800ad6e <plug_holes+0x11e>
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	791b      	ldrb	r3, [r3, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d11c      	bne.n	800ad6e <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ad34:	4b18      	ldr	r3, [pc, #96]	; (800ad98 <plug_holes+0x148>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d102      	bne.n	800ad44 <plug_holes+0xf4>
      lfree = pmem;
 800ad3e:	4a16      	ldr	r2, [pc, #88]	; (800ad98 <plug_holes+0x148>)
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	881a      	ldrh	r2, [r3, #0]
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	881b      	ldrh	r3, [r3, #0]
 800ad50:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d00a      	beq.n	800ad6e <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	881b      	ldrh	r3, [r3, #0]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7ff ff53 	bl	800ac08 <ptr_to_mem>
 800ad62:	4604      	mov	r4, r0
 800ad64:	68b8      	ldr	r0, [r7, #8]
 800ad66:	f7ff ff61 	bl	800ac2c <mem_to_ptr>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ad6e:	bf00      	nop
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd90      	pop	{r4, r7, pc}
 800ad76:	bf00      	nop
 800ad78:	240043a0 	.word	0x240043a0
 800ad7c:	08014d7c 	.word	0x08014d7c
 800ad80:	08014e00 	.word	0x08014e00
 800ad84:	08014e18 	.word	0x08014e18
 800ad88:	240043a4 	.word	0x240043a4
 800ad8c:	08014e40 	.word	0x08014e40
 800ad90:	08014e5c 	.word	0x08014e5c
 800ad94:	08014e78 	.word	0x08014e78
 800ad98:	240043ac 	.word	0x240043ac

0800ad9c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ada2:	4b1d      	ldr	r3, [pc, #116]	; (800ae18 <mem_init+0x7c>)
 800ada4:	4a1d      	ldr	r2, [pc, #116]	; (800ae1c <mem_init+0x80>)
 800ada6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ada8:	4b1b      	ldr	r3, [pc, #108]	; (800ae18 <mem_init+0x7c>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800adb4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800adc2:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 800adc6:	f7ff ff1f 	bl	800ac08 <ptr_to_mem>
 800adca:	4603      	mov	r3, r0
 800adcc:	4a14      	ldr	r2, [pc, #80]	; (800ae20 <mem_init+0x84>)
 800adce:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800add0:	4b13      	ldr	r3, [pc, #76]	; (800ae20 <mem_init+0x84>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2201      	movs	r2, #1
 800add6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800add8:	4b11      	ldr	r3, [pc, #68]	; (800ae20 <mem_init+0x84>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ade0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ade2:	4b0f      	ldr	r3, [pc, #60]	; (800ae20 <mem_init+0x84>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800adea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800adec:	4b0a      	ldr	r3, [pc, #40]	; (800ae18 <mem_init+0x7c>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a0c      	ldr	r2, [pc, #48]	; (800ae24 <mem_init+0x88>)
 800adf2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800adf4:	480c      	ldr	r0, [pc, #48]	; (800ae28 <mem_init+0x8c>)
 800adf6:	f001 fe95 	bl	800cb24 <sys_mutex_new>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d006      	beq.n	800ae0e <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ae00:	4b0a      	ldr	r3, [pc, #40]	; (800ae2c <mem_init+0x90>)
 800ae02:	f240 221f 	movw	r2, #543	; 0x21f
 800ae06:	490a      	ldr	r1, [pc, #40]	; (800ae30 <mem_init+0x94>)
 800ae08:	480a      	ldr	r0, [pc, #40]	; (800ae34 <mem_init+0x98>)
 800ae0a:	f008 f8ed 	bl	8012fe8 <iprintf>
  }
}
 800ae0e:	bf00      	nop
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	240043a0 	.word	0x240043a0
 800ae1c:	30044000 	.word	0x30044000
 800ae20:	240043a4 	.word	0x240043a4
 800ae24:	240043ac 	.word	0x240043ac
 800ae28:	240043a8 	.word	0x240043a8
 800ae2c:	08014d7c 	.word	0x08014d7c
 800ae30:	08014ea4 	.word	0x08014ea4
 800ae34:	08014e18 	.word	0x08014e18

0800ae38 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f7ff fef3 	bl	800ac2c <mem_to_ptr>
 800ae46:	4603      	mov	r3, r0
 800ae48:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7ff feda 	bl	800ac08 <ptr_to_mem>
 800ae54:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	885b      	ldrh	r3, [r3, #2]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7ff fed4 	bl	800ac08 <ptr_to_mem>
 800ae60:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d819      	bhi.n	800aea2 <mem_link_valid+0x6a>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	885b      	ldrh	r3, [r3, #2]
 800ae72:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d813      	bhi.n	800aea2 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ae7e:	8afa      	ldrh	r2, [r7, #22]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d004      	beq.n	800ae8e <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	881b      	ldrh	r3, [r3, #0]
 800ae88:	8afa      	ldrh	r2, [r7, #22]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d109      	bne.n	800aea2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ae8e:	4b08      	ldr	r3, [pc, #32]	; (800aeb0 <mem_link_valid+0x78>)
 800ae90:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ae92:	693a      	ldr	r2, [r7, #16]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d006      	beq.n	800aea6 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	885b      	ldrh	r3, [r3, #2]
 800ae9c:	8afa      	ldrh	r2, [r7, #22]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d001      	beq.n	800aea6 <mem_link_valid+0x6e>
    return 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	e000      	b.n	800aea8 <mem_link_valid+0x70>
  }
  return 1;
 800aea6:	2301      	movs	r3, #1
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	240043a4 	.word	0x240043a4

0800aeb4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b088      	sub	sp, #32
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d070      	beq.n	800afa4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f003 0303 	and.w	r3, r3, #3
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00d      	beq.n	800aee8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800aecc:	4b37      	ldr	r3, [pc, #220]	; (800afac <mem_free+0xf8>)
 800aece:	f240 2273 	movw	r2, #627	; 0x273
 800aed2:	4937      	ldr	r1, [pc, #220]	; (800afb0 <mem_free+0xfc>)
 800aed4:	4837      	ldr	r0, [pc, #220]	; (800afb4 <mem_free+0x100>)
 800aed6:	f008 f887 	bl	8012fe8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aeda:	f001 fe81 	bl	800cbe0 <sys_arch_protect>
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f001 fe8b 	bl	800cbfc <sys_arch_unprotect>
    return;
 800aee6:	e05e      	b.n	800afa6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	3b08      	subs	r3, #8
 800aeec:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800aeee:	4b32      	ldr	r3, [pc, #200]	; (800afb8 <mem_free+0x104>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	69fa      	ldr	r2, [r7, #28]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d306      	bcc.n	800af06 <mem_free+0x52>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f103 020c 	add.w	r2, r3, #12
 800aefe:	4b2f      	ldr	r3, [pc, #188]	; (800afbc <mem_free+0x108>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	429a      	cmp	r2, r3
 800af04:	d90d      	bls.n	800af22 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800af06:	4b29      	ldr	r3, [pc, #164]	; (800afac <mem_free+0xf8>)
 800af08:	f240 227f 	movw	r2, #639	; 0x27f
 800af0c:	492c      	ldr	r1, [pc, #176]	; (800afc0 <mem_free+0x10c>)
 800af0e:	4829      	ldr	r0, [pc, #164]	; (800afb4 <mem_free+0x100>)
 800af10:	f008 f86a 	bl	8012fe8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800af14:	f001 fe64 	bl	800cbe0 <sys_arch_protect>
 800af18:	6138      	str	r0, [r7, #16]
 800af1a:	6938      	ldr	r0, [r7, #16]
 800af1c:	f001 fe6e 	bl	800cbfc <sys_arch_unprotect>
    return;
 800af20:	e041      	b.n	800afa6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800af22:	4828      	ldr	r0, [pc, #160]	; (800afc4 <mem_free+0x110>)
 800af24:	f001 fe1a 	bl	800cb5c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	791b      	ldrb	r3, [r3, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d110      	bne.n	800af52 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800af30:	4b1e      	ldr	r3, [pc, #120]	; (800afac <mem_free+0xf8>)
 800af32:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800af36:	4924      	ldr	r1, [pc, #144]	; (800afc8 <mem_free+0x114>)
 800af38:	481e      	ldr	r0, [pc, #120]	; (800afb4 <mem_free+0x100>)
 800af3a:	f008 f855 	bl	8012fe8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800af3e:	4821      	ldr	r0, [pc, #132]	; (800afc4 <mem_free+0x110>)
 800af40:	f001 fe1b 	bl	800cb7a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800af44:	f001 fe4c 	bl	800cbe0 <sys_arch_protect>
 800af48:	6178      	str	r0, [r7, #20]
 800af4a:	6978      	ldr	r0, [r7, #20]
 800af4c:	f001 fe56 	bl	800cbfc <sys_arch_unprotect>
    return;
 800af50:	e029      	b.n	800afa6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800af52:	69f8      	ldr	r0, [r7, #28]
 800af54:	f7ff ff70 	bl	800ae38 <mem_link_valid>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d110      	bne.n	800af80 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800af5e:	4b13      	ldr	r3, [pc, #76]	; (800afac <mem_free+0xf8>)
 800af60:	f240 2295 	movw	r2, #661	; 0x295
 800af64:	4919      	ldr	r1, [pc, #100]	; (800afcc <mem_free+0x118>)
 800af66:	4813      	ldr	r0, [pc, #76]	; (800afb4 <mem_free+0x100>)
 800af68:	f008 f83e 	bl	8012fe8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800af6c:	4815      	ldr	r0, [pc, #84]	; (800afc4 <mem_free+0x110>)
 800af6e:	f001 fe04 	bl	800cb7a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800af72:	f001 fe35 	bl	800cbe0 <sys_arch_protect>
 800af76:	61b8      	str	r0, [r7, #24]
 800af78:	69b8      	ldr	r0, [r7, #24]
 800af7a:	f001 fe3f 	bl	800cbfc <sys_arch_unprotect>
    return;
 800af7e:	e012      	b.n	800afa6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	2200      	movs	r2, #0
 800af84:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800af86:	4b12      	ldr	r3, [pc, #72]	; (800afd0 <mem_free+0x11c>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	69fa      	ldr	r2, [r7, #28]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d202      	bcs.n	800af96 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800af90:	4a0f      	ldr	r2, [pc, #60]	; (800afd0 <mem_free+0x11c>)
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800af96:	69f8      	ldr	r0, [r7, #28]
 800af98:	f7ff fe5a 	bl	800ac50 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800af9c:	4809      	ldr	r0, [pc, #36]	; (800afc4 <mem_free+0x110>)
 800af9e:	f001 fdec 	bl	800cb7a <sys_mutex_unlock>
 800afa2:	e000      	b.n	800afa6 <mem_free+0xf2>
    return;
 800afa4:	bf00      	nop
}
 800afa6:	3720      	adds	r7, #32
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	08014d7c 	.word	0x08014d7c
 800afb0:	08014ec0 	.word	0x08014ec0
 800afb4:	08014e18 	.word	0x08014e18
 800afb8:	240043a0 	.word	0x240043a0
 800afbc:	240043a4 	.word	0x240043a4
 800afc0:	08014ee4 	.word	0x08014ee4
 800afc4:	240043a8 	.word	0x240043a8
 800afc8:	08014f00 	.word	0x08014f00
 800afcc:	08014f28 	.word	0x08014f28
 800afd0:	240043ac 	.word	0x240043ac

0800afd4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	460b      	mov	r3, r1
 800afde:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800afe0:	887b      	ldrh	r3, [r7, #2]
 800afe2:	3303      	adds	r3, #3
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	f023 0303 	bic.w	r3, r3, #3
 800afea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800afec:	8bfb      	ldrh	r3, [r7, #30]
 800afee:	2b0b      	cmp	r3, #11
 800aff0:	d801      	bhi.n	800aff6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800aff2:	230c      	movs	r3, #12
 800aff4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800aff6:	8bfb      	ldrh	r3, [r7, #30]
 800aff8:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800affc:	4293      	cmp	r3, r2
 800affe:	d803      	bhi.n	800b008 <mem_trim+0x34>
 800b000:	8bfa      	ldrh	r2, [r7, #30]
 800b002:	887b      	ldrh	r3, [r7, #2]
 800b004:	429a      	cmp	r2, r3
 800b006:	d201      	bcs.n	800b00c <mem_trim+0x38>
    return NULL;
 800b008:	2300      	movs	r3, #0
 800b00a:	e0dc      	b.n	800b1c6 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b00c:	4b70      	ldr	r3, [pc, #448]	; (800b1d0 <mem_trim+0x1fc>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	429a      	cmp	r2, r3
 800b014:	d304      	bcc.n	800b020 <mem_trim+0x4c>
 800b016:	4b6f      	ldr	r3, [pc, #444]	; (800b1d4 <mem_trim+0x200>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d306      	bcc.n	800b02e <mem_trim+0x5a>
 800b020:	4b6d      	ldr	r3, [pc, #436]	; (800b1d8 <mem_trim+0x204>)
 800b022:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b026:	496d      	ldr	r1, [pc, #436]	; (800b1dc <mem_trim+0x208>)
 800b028:	486d      	ldr	r0, [pc, #436]	; (800b1e0 <mem_trim+0x20c>)
 800b02a:	f007 ffdd 	bl	8012fe8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b02e:	4b68      	ldr	r3, [pc, #416]	; (800b1d0 <mem_trim+0x1fc>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	429a      	cmp	r2, r3
 800b036:	d304      	bcc.n	800b042 <mem_trim+0x6e>
 800b038:	4b66      	ldr	r3, [pc, #408]	; (800b1d4 <mem_trim+0x200>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d307      	bcc.n	800b052 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b042:	f001 fdcd 	bl	800cbe0 <sys_arch_protect>
 800b046:	60b8      	str	r0, [r7, #8]
 800b048:	68b8      	ldr	r0, [r7, #8]
 800b04a:	f001 fdd7 	bl	800cbfc <sys_arch_unprotect>
    return rmem;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	e0b9      	b.n	800b1c6 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	3b08      	subs	r3, #8
 800b056:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b058:	69b8      	ldr	r0, [r7, #24]
 800b05a:	f7ff fde7 	bl	800ac2c <mem_to_ptr>
 800b05e:	4603      	mov	r3, r0
 800b060:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	881a      	ldrh	r2, [r3, #0]
 800b066:	8afb      	ldrh	r3, [r7, #22]
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	3b08      	subs	r3, #8
 800b06e:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b070:	8bfa      	ldrh	r2, [r7, #30]
 800b072:	8abb      	ldrh	r3, [r7, #20]
 800b074:	429a      	cmp	r2, r3
 800b076:	d906      	bls.n	800b086 <mem_trim+0xb2>
 800b078:	4b57      	ldr	r3, [pc, #348]	; (800b1d8 <mem_trim+0x204>)
 800b07a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b07e:	4959      	ldr	r1, [pc, #356]	; (800b1e4 <mem_trim+0x210>)
 800b080:	4857      	ldr	r0, [pc, #348]	; (800b1e0 <mem_trim+0x20c>)
 800b082:	f007 ffb1 	bl	8012fe8 <iprintf>
  if (newsize > size) {
 800b086:	8bfa      	ldrh	r2, [r7, #30]
 800b088:	8abb      	ldrh	r3, [r7, #20]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d901      	bls.n	800b092 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800b08e:	2300      	movs	r3, #0
 800b090:	e099      	b.n	800b1c6 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800b092:	8bfa      	ldrh	r2, [r7, #30]
 800b094:	8abb      	ldrh	r3, [r7, #20]
 800b096:	429a      	cmp	r2, r3
 800b098:	d101      	bne.n	800b09e <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	e093      	b.n	800b1c6 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b09e:	4852      	ldr	r0, [pc, #328]	; (800b1e8 <mem_trim+0x214>)
 800b0a0:	f001 fd5c 	bl	800cb5c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	881b      	ldrh	r3, [r3, #0]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7ff fdad 	bl	800ac08 <ptr_to_mem>
 800b0ae:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	791b      	ldrb	r3, [r3, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d141      	bne.n	800b13c <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	881b      	ldrh	r3, [r3, #0]
 800b0bc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d106      	bne.n	800b0d2 <mem_trim+0xfe>
 800b0c4:	4b44      	ldr	r3, [pc, #272]	; (800b1d8 <mem_trim+0x204>)
 800b0c6:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b0ca:	4948      	ldr	r1, [pc, #288]	; (800b1ec <mem_trim+0x218>)
 800b0cc:	4844      	ldr	r0, [pc, #272]	; (800b1e0 <mem_trim+0x20c>)
 800b0ce:	f007 ff8b 	bl	8012fe8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	881b      	ldrh	r3, [r3, #0]
 800b0d6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b0d8:	8afa      	ldrh	r2, [r7, #22]
 800b0da:	8bfb      	ldrh	r3, [r7, #30]
 800b0dc:	4413      	add	r3, r2
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	3308      	adds	r3, #8
 800b0e2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b0e4:	4b42      	ldr	r3, [pc, #264]	; (800b1f0 <mem_trim+0x21c>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	693a      	ldr	r2, [r7, #16]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d106      	bne.n	800b0fc <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800b0ee:	89fb      	ldrh	r3, [r7, #14]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7ff fd89 	bl	800ac08 <ptr_to_mem>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	4a3d      	ldr	r2, [pc, #244]	; (800b1f0 <mem_trim+0x21c>)
 800b0fa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b0fc:	89fb      	ldrh	r3, [r7, #14]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff fd82 	bl	800ac08 <ptr_to_mem>
 800b104:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	2200      	movs	r2, #0
 800b10a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	89ba      	ldrh	r2, [r7, #12]
 800b110:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	8afa      	ldrh	r2, [r7, #22]
 800b116:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	89fa      	ldrh	r2, [r7, #14]
 800b11c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	881b      	ldrh	r3, [r3, #0]
 800b122:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b126:	4293      	cmp	r3, r2
 800b128:	d049      	beq.n	800b1be <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	4618      	mov	r0, r3
 800b130:	f7ff fd6a 	bl	800ac08 <ptr_to_mem>
 800b134:	4602      	mov	r2, r0
 800b136:	89fb      	ldrh	r3, [r7, #14]
 800b138:	8053      	strh	r3, [r2, #2]
 800b13a:	e040      	b.n	800b1be <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b13c:	8bfb      	ldrh	r3, [r7, #30]
 800b13e:	f103 0214 	add.w	r2, r3, #20
 800b142:	8abb      	ldrh	r3, [r7, #20]
 800b144:	429a      	cmp	r2, r3
 800b146:	d83a      	bhi.n	800b1be <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b148:	8afa      	ldrh	r2, [r7, #22]
 800b14a:	8bfb      	ldrh	r3, [r7, #30]
 800b14c:	4413      	add	r3, r2
 800b14e:	b29b      	uxth	r3, r3
 800b150:	3308      	adds	r3, #8
 800b152:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d106      	bne.n	800b16e <mem_trim+0x19a>
 800b160:	4b1d      	ldr	r3, [pc, #116]	; (800b1d8 <mem_trim+0x204>)
 800b162:	f240 3216 	movw	r2, #790	; 0x316
 800b166:	4921      	ldr	r1, [pc, #132]	; (800b1ec <mem_trim+0x218>)
 800b168:	481d      	ldr	r0, [pc, #116]	; (800b1e0 <mem_trim+0x20c>)
 800b16a:	f007 ff3d 	bl	8012fe8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b16e:	89fb      	ldrh	r3, [r7, #14]
 800b170:	4618      	mov	r0, r3
 800b172:	f7ff fd49 	bl	800ac08 <ptr_to_mem>
 800b176:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b178:	4b1d      	ldr	r3, [pc, #116]	; (800b1f0 <mem_trim+0x21c>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	693a      	ldr	r2, [r7, #16]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d202      	bcs.n	800b188 <mem_trim+0x1b4>
      lfree = mem2;
 800b182:	4a1b      	ldr	r2, [pc, #108]	; (800b1f0 <mem_trim+0x21c>)
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	2200      	movs	r2, #0
 800b18c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	881a      	ldrh	r2, [r3, #0]
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	8afa      	ldrh	r2, [r7, #22]
 800b19a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	89fa      	ldrh	r2, [r7, #14]
 800b1a0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	881b      	ldrh	r3, [r3, #0]
 800b1a6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d007      	beq.n	800b1be <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	881b      	ldrh	r3, [r3, #0]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7ff fd28 	bl	800ac08 <ptr_to_mem>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	89fb      	ldrh	r3, [r7, #14]
 800b1bc:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b1be:	480a      	ldr	r0, [pc, #40]	; (800b1e8 <mem_trim+0x214>)
 800b1c0:	f001 fcdb 	bl	800cb7a <sys_mutex_unlock>
  return rmem;
 800b1c4:	687b      	ldr	r3, [r7, #4]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3720      	adds	r7, #32
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	240043a0 	.word	0x240043a0
 800b1d4:	240043a4 	.word	0x240043a4
 800b1d8:	08014d7c 	.word	0x08014d7c
 800b1dc:	08014f5c 	.word	0x08014f5c
 800b1e0:	08014e18 	.word	0x08014e18
 800b1e4:	08014f74 	.word	0x08014f74
 800b1e8:	240043a8 	.word	0x240043a8
 800b1ec:	08014f94 	.word	0x08014f94
 800b1f0:	240043ac 	.word	0x240043ac

0800b1f4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b088      	sub	sp, #32
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b1fe:	88fb      	ldrh	r3, [r7, #6]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d101      	bne.n	800b208 <mem_malloc+0x14>
    return NULL;
 800b204:	2300      	movs	r3, #0
 800b206:	e0e6      	b.n	800b3d6 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b208:	88fb      	ldrh	r3, [r7, #6]
 800b20a:	3303      	adds	r3, #3
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	f023 0303 	bic.w	r3, r3, #3
 800b212:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b214:	8bbb      	ldrh	r3, [r7, #28]
 800b216:	2b0b      	cmp	r3, #11
 800b218:	d801      	bhi.n	800b21e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b21a:	230c      	movs	r3, #12
 800b21c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b21e:	8bbb      	ldrh	r3, [r7, #28]
 800b220:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b224:	4293      	cmp	r3, r2
 800b226:	d803      	bhi.n	800b230 <mem_malloc+0x3c>
 800b228:	8bba      	ldrh	r2, [r7, #28]
 800b22a:	88fb      	ldrh	r3, [r7, #6]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d201      	bcs.n	800b234 <mem_malloc+0x40>
    return NULL;
 800b230:	2300      	movs	r3, #0
 800b232:	e0d0      	b.n	800b3d6 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b234:	486a      	ldr	r0, [pc, #424]	; (800b3e0 <mem_malloc+0x1ec>)
 800b236:	f001 fc91 	bl	800cb5c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b23a:	4b6a      	ldr	r3, [pc, #424]	; (800b3e4 <mem_malloc+0x1f0>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4618      	mov	r0, r3
 800b240:	f7ff fcf4 	bl	800ac2c <mem_to_ptr>
 800b244:	4603      	mov	r3, r0
 800b246:	83fb      	strh	r3, [r7, #30]
 800b248:	e0b9      	b.n	800b3be <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b24a:	8bfb      	ldrh	r3, [r7, #30]
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7ff fcdb 	bl	800ac08 <ptr_to_mem>
 800b252:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	791b      	ldrb	r3, [r3, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f040 80a9 	bne.w	800b3b0 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	881b      	ldrh	r3, [r3, #0]
 800b262:	461a      	mov	r2, r3
 800b264:	8bfb      	ldrh	r3, [r7, #30]
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	f1a3 0208 	sub.w	r2, r3, #8
 800b26c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b26e:	429a      	cmp	r2, r3
 800b270:	f0c0 809e 	bcc.w	800b3b0 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	881b      	ldrh	r3, [r3, #0]
 800b278:	461a      	mov	r2, r3
 800b27a:	8bfb      	ldrh	r3, [r7, #30]
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	f1a3 0208 	sub.w	r2, r3, #8
 800b282:	8bbb      	ldrh	r3, [r7, #28]
 800b284:	3314      	adds	r3, #20
 800b286:	429a      	cmp	r2, r3
 800b288:	d335      	bcc.n	800b2f6 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b28a:	8bfa      	ldrh	r2, [r7, #30]
 800b28c:	8bbb      	ldrh	r3, [r7, #28]
 800b28e:	4413      	add	r3, r2
 800b290:	b29b      	uxth	r3, r3
 800b292:	3308      	adds	r3, #8
 800b294:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b296:	8a7b      	ldrh	r3, [r7, #18]
 800b298:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d106      	bne.n	800b2ae <mem_malloc+0xba>
 800b2a0:	4b51      	ldr	r3, [pc, #324]	; (800b3e8 <mem_malloc+0x1f4>)
 800b2a2:	f240 3287 	movw	r2, #903	; 0x387
 800b2a6:	4951      	ldr	r1, [pc, #324]	; (800b3ec <mem_malloc+0x1f8>)
 800b2a8:	4851      	ldr	r0, [pc, #324]	; (800b3f0 <mem_malloc+0x1fc>)
 800b2aa:	f007 fe9d 	bl	8012fe8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b2ae:	8a7b      	ldrh	r3, [r7, #18]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7ff fca9 	bl	800ac08 <ptr_to_mem>
 800b2b6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	881a      	ldrh	r2, [r3, #0]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	8bfa      	ldrh	r2, [r7, #30]
 800b2ca:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	8a7a      	ldrh	r2, [r7, #18]
 800b2d0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	881b      	ldrh	r3, [r3, #0]
 800b2dc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d00b      	beq.n	800b2fc <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	881b      	ldrh	r3, [r3, #0]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7ff fc8d 	bl	800ac08 <ptr_to_mem>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	8a7b      	ldrh	r3, [r7, #18]
 800b2f2:	8053      	strh	r3, [r2, #2]
 800b2f4:	e002      	b.n	800b2fc <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b2fc:	4b39      	ldr	r3, [pc, #228]	; (800b3e4 <mem_malloc+0x1f0>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	697a      	ldr	r2, [r7, #20]
 800b302:	429a      	cmp	r2, r3
 800b304:	d127      	bne.n	800b356 <mem_malloc+0x162>
          struct mem *cur = lfree;
 800b306:	4b37      	ldr	r3, [pc, #220]	; (800b3e4 <mem_malloc+0x1f0>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b30c:	e005      	b.n	800b31a <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	881b      	ldrh	r3, [r3, #0]
 800b312:	4618      	mov	r0, r3
 800b314:	f7ff fc78 	bl	800ac08 <ptr_to_mem>
 800b318:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	791b      	ldrb	r3, [r3, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d004      	beq.n	800b32c <mem_malloc+0x138>
 800b322:	4b34      	ldr	r3, [pc, #208]	; (800b3f4 <mem_malloc+0x200>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	69ba      	ldr	r2, [r7, #24]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d1f0      	bne.n	800b30e <mem_malloc+0x11a>
          }
          lfree = cur;
 800b32c:	4a2d      	ldr	r2, [pc, #180]	; (800b3e4 <mem_malloc+0x1f0>)
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b332:	4b2c      	ldr	r3, [pc, #176]	; (800b3e4 <mem_malloc+0x1f0>)
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	4b2f      	ldr	r3, [pc, #188]	; (800b3f4 <mem_malloc+0x200>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d00b      	beq.n	800b356 <mem_malloc+0x162>
 800b33e:	4b29      	ldr	r3, [pc, #164]	; (800b3e4 <mem_malloc+0x1f0>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	791b      	ldrb	r3, [r3, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d006      	beq.n	800b356 <mem_malloc+0x162>
 800b348:	4b27      	ldr	r3, [pc, #156]	; (800b3e8 <mem_malloc+0x1f4>)
 800b34a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b34e:	492a      	ldr	r1, [pc, #168]	; (800b3f8 <mem_malloc+0x204>)
 800b350:	4827      	ldr	r0, [pc, #156]	; (800b3f0 <mem_malloc+0x1fc>)
 800b352:	f007 fe49 	bl	8012fe8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b356:	4822      	ldr	r0, [pc, #136]	; (800b3e0 <mem_malloc+0x1ec>)
 800b358:	f001 fc0f 	bl	800cb7a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b35c:	8bba      	ldrh	r2, [r7, #28]
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	4413      	add	r3, r2
 800b362:	3308      	adds	r3, #8
 800b364:	4a23      	ldr	r2, [pc, #140]	; (800b3f4 <mem_malloc+0x200>)
 800b366:	6812      	ldr	r2, [r2, #0]
 800b368:	4293      	cmp	r3, r2
 800b36a:	d906      	bls.n	800b37a <mem_malloc+0x186>
 800b36c:	4b1e      	ldr	r3, [pc, #120]	; (800b3e8 <mem_malloc+0x1f4>)
 800b36e:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b372:	4922      	ldr	r1, [pc, #136]	; (800b3fc <mem_malloc+0x208>)
 800b374:	481e      	ldr	r0, [pc, #120]	; (800b3f0 <mem_malloc+0x1fc>)
 800b376:	f007 fe37 	bl	8012fe8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	f003 0303 	and.w	r3, r3, #3
 800b380:	2b00      	cmp	r3, #0
 800b382:	d006      	beq.n	800b392 <mem_malloc+0x19e>
 800b384:	4b18      	ldr	r3, [pc, #96]	; (800b3e8 <mem_malloc+0x1f4>)
 800b386:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b38a:	491d      	ldr	r1, [pc, #116]	; (800b400 <mem_malloc+0x20c>)
 800b38c:	4818      	ldr	r0, [pc, #96]	; (800b3f0 <mem_malloc+0x1fc>)
 800b38e:	f007 fe2b 	bl	8012fe8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	f003 0303 	and.w	r3, r3, #3
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d006      	beq.n	800b3aa <mem_malloc+0x1b6>
 800b39c:	4b12      	ldr	r3, [pc, #72]	; (800b3e8 <mem_malloc+0x1f4>)
 800b39e:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b3a2:	4918      	ldr	r1, [pc, #96]	; (800b404 <mem_malloc+0x210>)
 800b3a4:	4812      	ldr	r0, [pc, #72]	; (800b3f0 <mem_malloc+0x1fc>)
 800b3a6:	f007 fe1f 	bl	8012fe8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	e012      	b.n	800b3d6 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800b3b0:	8bfb      	ldrh	r3, [r7, #30]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7ff fc28 	bl	800ac08 <ptr_to_mem>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	881b      	ldrh	r3, [r3, #0]
 800b3bc:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b3be:	8bfa      	ldrh	r2, [r7, #30]
 800b3c0:	8bb9      	ldrh	r1, [r7, #28]
 800b3c2:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 800b3c6:	1a5b      	subs	r3, r3, r1
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	f4ff af3e 	bcc.w	800b24a <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b3ce:	4804      	ldr	r0, [pc, #16]	; (800b3e0 <mem_malloc+0x1ec>)
 800b3d0:	f001 fbd3 	bl	800cb7a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3720      	adds	r7, #32
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	240043a8 	.word	0x240043a8
 800b3e4:	240043ac 	.word	0x240043ac
 800b3e8:	08014d7c 	.word	0x08014d7c
 800b3ec:	08014f94 	.word	0x08014f94
 800b3f0:	08014e18 	.word	0x08014e18
 800b3f4:	240043a4 	.word	0x240043a4
 800b3f8:	08014fa8 	.word	0x08014fa8
 800b3fc:	08014fc4 	.word	0x08014fc4
 800b400:	08014ff4 	.word	0x08014ff4
 800b404:	08015024 	.word	0x08015024

0800b408 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b408:	b480      	push	{r7}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	2200      	movs	r2, #0
 800b416:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	3303      	adds	r3, #3
 800b41e:	f023 0303 	bic.w	r3, r3, #3
 800b422:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b424:	2300      	movs	r3, #0
 800b426:	60fb      	str	r3, [r7, #12]
 800b428:	e011      	b.n	800b44e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	881b      	ldrh	r3, [r3, #0]
 800b440:	461a      	mov	r2, r3
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	4413      	add	r3, r2
 800b446:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3301      	adds	r3, #1
 800b44c:	60fb      	str	r3, [r7, #12]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	885b      	ldrh	r3, [r3, #2]
 800b452:	461a      	mov	r2, r3
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	4293      	cmp	r3, r2
 800b458:	dbe7      	blt.n	800b42a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b45a:	bf00      	nop
 800b45c:	bf00      	nop
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b46e:	2300      	movs	r3, #0
 800b470:	80fb      	strh	r3, [r7, #6]
 800b472:	e009      	b.n	800b488 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b474:	88fb      	ldrh	r3, [r7, #6]
 800b476:	4a08      	ldr	r2, [pc, #32]	; (800b498 <memp_init+0x30>)
 800b478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7ff ffc3 	bl	800b408 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b482:	88fb      	ldrh	r3, [r7, #6]
 800b484:	3301      	adds	r3, #1
 800b486:	80fb      	strh	r3, [r7, #6]
 800b488:	88fb      	ldrh	r3, [r7, #6]
 800b48a:	2b0c      	cmp	r3, #12
 800b48c:	d9f2      	bls.n	800b474 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b48e:	bf00      	nop
 800b490:	bf00      	nop
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	08017550 	.word	0x08017550

0800b49c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b4a4:	f001 fb9c 	bl	800cbe0 <sys_arch_protect>
 800b4a8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d015      	beq.n	800b4e4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	6812      	ldr	r2, [r2, #0]
 800b4c0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	f003 0303 	and.w	r3, r3, #3
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d006      	beq.n	800b4da <do_memp_malloc_pool+0x3e>
 800b4cc:	4b09      	ldr	r3, [pc, #36]	; (800b4f4 <do_memp_malloc_pool+0x58>)
 800b4ce:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b4d2:	4909      	ldr	r1, [pc, #36]	; (800b4f8 <do_memp_malloc_pool+0x5c>)
 800b4d4:	4809      	ldr	r0, [pc, #36]	; (800b4fc <do_memp_malloc_pool+0x60>)
 800b4d6:	f007 fd87 	bl	8012fe8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f001 fb8e 	bl	800cbfc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	e003      	b.n	800b4ec <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f001 fb89 	bl	800cbfc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	08015048 	.word	0x08015048
 800b4f8:	080150cc 	.word	0x080150cc
 800b4fc:	080150f0 	.word	0x080150f0

0800b500 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d106      	bne.n	800b51c <memp_malloc_pool+0x1c>
 800b50e:	4b0a      	ldr	r3, [pc, #40]	; (800b538 <memp_malloc_pool+0x38>)
 800b510:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b514:	4909      	ldr	r1, [pc, #36]	; (800b53c <memp_malloc_pool+0x3c>)
 800b516:	480a      	ldr	r0, [pc, #40]	; (800b540 <memp_malloc_pool+0x40>)
 800b518:	f007 fd66 	bl	8012fe8 <iprintf>
  if (desc == NULL) {
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <memp_malloc_pool+0x26>
    return NULL;
 800b522:	2300      	movs	r3, #0
 800b524:	e003      	b.n	800b52e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f7ff ffb8 	bl	800b49c <do_memp_malloc_pool>
 800b52c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3708      	adds	r7, #8
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	08015048 	.word	0x08015048
 800b53c:	08015118 	.word	0x08015118
 800b540:	080150f0 	.word	0x080150f0

0800b544 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	4603      	mov	r3, r0
 800b54c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	2b0c      	cmp	r3, #12
 800b552:	d908      	bls.n	800b566 <memp_malloc+0x22>
 800b554:	4b0a      	ldr	r3, [pc, #40]	; (800b580 <memp_malloc+0x3c>)
 800b556:	f240 1257 	movw	r2, #343	; 0x157
 800b55a:	490a      	ldr	r1, [pc, #40]	; (800b584 <memp_malloc+0x40>)
 800b55c:	480a      	ldr	r0, [pc, #40]	; (800b588 <memp_malloc+0x44>)
 800b55e:	f007 fd43 	bl	8012fe8 <iprintf>
 800b562:	2300      	movs	r3, #0
 800b564:	e008      	b.n	800b578 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b566:	79fb      	ldrb	r3, [r7, #7]
 800b568:	4a08      	ldr	r2, [pc, #32]	; (800b58c <memp_malloc+0x48>)
 800b56a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b56e:	4618      	mov	r0, r3
 800b570:	f7ff ff94 	bl	800b49c <do_memp_malloc_pool>
 800b574:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b576:	68fb      	ldr	r3, [r7, #12]
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	08015048 	.word	0x08015048
 800b584:	0801512c 	.word	0x0801512c
 800b588:	080150f0 	.word	0x080150f0
 800b58c:	08017550 	.word	0x08017550

0800b590 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	f003 0303 	and.w	r3, r3, #3
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d006      	beq.n	800b5b2 <do_memp_free_pool+0x22>
 800b5a4:	4b0d      	ldr	r3, [pc, #52]	; (800b5dc <do_memp_free_pool+0x4c>)
 800b5a6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b5aa:	490d      	ldr	r1, [pc, #52]	; (800b5e0 <do_memp_free_pool+0x50>)
 800b5ac:	480d      	ldr	r0, [pc, #52]	; (800b5e4 <do_memp_free_pool+0x54>)
 800b5ae:	f007 fd1b 	bl	8012fe8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b5b6:	f001 fb13 	bl	800cbe0 <sys_arch_protect>
 800b5ba:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b5ce:	68b8      	ldr	r0, [r7, #8]
 800b5d0:	f001 fb14 	bl	800cbfc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b5d4:	bf00      	nop
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	08015048 	.word	0x08015048
 800b5e0:	0801514c 	.word	0x0801514c
 800b5e4:	080150f0 	.word	0x080150f0

0800b5e8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d106      	bne.n	800b606 <memp_free_pool+0x1e>
 800b5f8:	4b0a      	ldr	r3, [pc, #40]	; (800b624 <memp_free_pool+0x3c>)
 800b5fa:	f240 1295 	movw	r2, #405	; 0x195
 800b5fe:	490a      	ldr	r1, [pc, #40]	; (800b628 <memp_free_pool+0x40>)
 800b600:	480a      	ldr	r0, [pc, #40]	; (800b62c <memp_free_pool+0x44>)
 800b602:	f007 fcf1 	bl	8012fe8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d007      	beq.n	800b61c <memp_free_pool+0x34>
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d004      	beq.n	800b61c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7ff ffbb 	bl	800b590 <do_memp_free_pool>
 800b61a:	e000      	b.n	800b61e <memp_free_pool+0x36>
    return;
 800b61c:	bf00      	nop
}
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	08015048 	.word	0x08015048
 800b628:	08015118 	.word	0x08015118
 800b62c:	080150f0 	.word	0x080150f0

0800b630 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	4603      	mov	r3, r0
 800b638:	6039      	str	r1, [r7, #0]
 800b63a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b63c:	79fb      	ldrb	r3, [r7, #7]
 800b63e:	2b0c      	cmp	r3, #12
 800b640:	d907      	bls.n	800b652 <memp_free+0x22>
 800b642:	4b0c      	ldr	r3, [pc, #48]	; (800b674 <memp_free+0x44>)
 800b644:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b648:	490b      	ldr	r1, [pc, #44]	; (800b678 <memp_free+0x48>)
 800b64a:	480c      	ldr	r0, [pc, #48]	; (800b67c <memp_free+0x4c>)
 800b64c:	f007 fccc 	bl	8012fe8 <iprintf>
 800b650:	e00c      	b.n	800b66c <memp_free+0x3c>

  if (mem == NULL) {
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d008      	beq.n	800b66a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b658:	79fb      	ldrb	r3, [r7, #7]
 800b65a:	4a09      	ldr	r2, [pc, #36]	; (800b680 <memp_free+0x50>)
 800b65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	4618      	mov	r0, r3
 800b664:	f7ff ff94 	bl	800b590 <do_memp_free_pool>
 800b668:	e000      	b.n	800b66c <memp_free+0x3c>
    return;
 800b66a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	08015048 	.word	0x08015048
 800b678:	0801516c 	.word	0x0801516c
 800b67c:	080150f0 	.word	0x080150f0
 800b680:	08017550 	.word	0x08017550

0800b684 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b684:	b480      	push	{r7}
 800b686:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b688:	bf00      	nop
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
	...

0800b694 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
 800b6a0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d108      	bne.n	800b6ba <netif_add+0x26>
 800b6a8:	4b57      	ldr	r3, [pc, #348]	; (800b808 <netif_add+0x174>)
 800b6aa:	f240 1227 	movw	r2, #295	; 0x127
 800b6ae:	4957      	ldr	r1, [pc, #348]	; (800b80c <netif_add+0x178>)
 800b6b0:	4857      	ldr	r0, [pc, #348]	; (800b810 <netif_add+0x17c>)
 800b6b2:	f007 fc99 	bl	8012fe8 <iprintf>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	e0a2      	b.n	800b800 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d108      	bne.n	800b6d2 <netif_add+0x3e>
 800b6c0:	4b51      	ldr	r3, [pc, #324]	; (800b808 <netif_add+0x174>)
 800b6c2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b6c6:	4953      	ldr	r1, [pc, #332]	; (800b814 <netif_add+0x180>)
 800b6c8:	4851      	ldr	r0, [pc, #324]	; (800b810 <netif_add+0x17c>)
 800b6ca:	f007 fc8d 	bl	8012fe8 <iprintf>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	e096      	b.n	800b800 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d101      	bne.n	800b6dc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b6d8:	4b4f      	ldr	r3, [pc, #316]	; (800b818 <netif_add+0x184>)
 800b6da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d101      	bne.n	800b6e6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b6e2:	4b4d      	ldr	r3, [pc, #308]	; (800b818 <netif_add+0x184>)
 800b6e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d101      	bne.n	800b6f0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b6ec:	4b4a      	ldr	r3, [pc, #296]	; (800b818 <netif_add+0x184>)
 800b6ee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	4a45      	ldr	r2, [pc, #276]	; (800b81c <netif_add+0x188>)
 800b706:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2200      	movs	r2, #0
 800b70c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2200      	movs	r2, #0
 800b712:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6a3a      	ldr	r2, [r7, #32]
 800b720:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b722:	4b3f      	ldr	r3, [pc, #252]	; (800b820 <netif_add+0x18c>)
 800b724:	781a      	ldrb	r2, [r3, #0]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b730:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	68b9      	ldr	r1, [r7, #8]
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f000 f913 	bl	800b964 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	4798      	blx	r3
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <netif_add+0xba>
    return NULL;
 800b74a:	2300      	movs	r3, #0
 800b74c:	e058      	b.n	800b800 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b754:	2bff      	cmp	r3, #255	; 0xff
 800b756:	d103      	bne.n	800b760 <netif_add+0xcc>
        netif->num = 0;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b760:	2300      	movs	r3, #0
 800b762:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b764:	4b2f      	ldr	r3, [pc, #188]	; (800b824 <netif_add+0x190>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	617b      	str	r3, [r7, #20]
 800b76a:	e02b      	b.n	800b7c4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b76c:	697a      	ldr	r2, [r7, #20]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	429a      	cmp	r2, r3
 800b772:	d106      	bne.n	800b782 <netif_add+0xee>
 800b774:	4b24      	ldr	r3, [pc, #144]	; (800b808 <netif_add+0x174>)
 800b776:	f240 128b 	movw	r2, #395	; 0x18b
 800b77a:	492b      	ldr	r1, [pc, #172]	; (800b828 <netif_add+0x194>)
 800b77c:	4824      	ldr	r0, [pc, #144]	; (800b810 <netif_add+0x17c>)
 800b77e:	f007 fc33 	bl	8012fe8 <iprintf>
        num_netifs++;
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	3301      	adds	r3, #1
 800b786:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	2bff      	cmp	r3, #255	; 0xff
 800b78c:	dd06      	ble.n	800b79c <netif_add+0x108>
 800b78e:	4b1e      	ldr	r3, [pc, #120]	; (800b808 <netif_add+0x174>)
 800b790:	f240 128d 	movw	r2, #397	; 0x18d
 800b794:	4925      	ldr	r1, [pc, #148]	; (800b82c <netif_add+0x198>)
 800b796:	481e      	ldr	r0, [pc, #120]	; (800b810 <netif_add+0x17c>)
 800b798:	f007 fc26 	bl	8012fe8 <iprintf>
        if (netif2->num == netif->num) {
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d108      	bne.n	800b7be <netif_add+0x12a>
          netif->num++;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	b2da      	uxtb	r2, r3
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b7bc:	e005      	b.n	800b7ca <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	617b      	str	r3, [r7, #20]
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1d0      	bne.n	800b76c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1be      	bne.n	800b74e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b7d6:	2bfe      	cmp	r3, #254	; 0xfe
 800b7d8:	d103      	bne.n	800b7e2 <netif_add+0x14e>
    netif_num = 0;
 800b7da:	4b11      	ldr	r3, [pc, #68]	; (800b820 <netif_add+0x18c>)
 800b7dc:	2200      	movs	r2, #0
 800b7de:	701a      	strb	r2, [r3, #0]
 800b7e0:	e006      	b.n	800b7f0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	4b0c      	ldr	r3, [pc, #48]	; (800b820 <netif_add+0x18c>)
 800b7ee:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b7f0:	4b0c      	ldr	r3, [pc, #48]	; (800b824 <netif_add+0x190>)
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b7f8:	4a0a      	ldr	r2, [pc, #40]	; (800b824 <netif_add+0x190>)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3718      	adds	r7, #24
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	08015188 	.word	0x08015188
 800b80c:	0801526c 	.word	0x0801526c
 800b810:	08015228 	.word	0x08015228
 800b814:	08015288 	.word	0x08015288
 800b818:	080174b0 	.word	0x080174b0
 800b81c:	0800bc3f 	.word	0x0800bc3f
 800b820:	24007484 	.word	0x24007484
 800b824:	2400747c 	.word	0x2400747c
 800b828:	080152ac 	.word	0x080152ac
 800b82c:	080152c0 	.word	0x080152c0

0800b830 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b83a:	6839      	ldr	r1, [r7, #0]
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f002 fd35 	bl	800e2ac <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b842:	6839      	ldr	r1, [r7, #0]
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f007 fb3b 	bl	8012ec0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b84a:	bf00      	nop
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
	...

0800b854 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d106      	bne.n	800b874 <netif_do_set_ipaddr+0x20>
 800b866:	4b1d      	ldr	r3, [pc, #116]	; (800b8dc <netif_do_set_ipaddr+0x88>)
 800b868:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b86c:	491c      	ldr	r1, [pc, #112]	; (800b8e0 <netif_do_set_ipaddr+0x8c>)
 800b86e:	481d      	ldr	r0, [pc, #116]	; (800b8e4 <netif_do_set_ipaddr+0x90>)
 800b870:	f007 fbba 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d106      	bne.n	800b888 <netif_do_set_ipaddr+0x34>
 800b87a:	4b18      	ldr	r3, [pc, #96]	; (800b8dc <netif_do_set_ipaddr+0x88>)
 800b87c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b880:	4917      	ldr	r1, [pc, #92]	; (800b8e0 <netif_do_set_ipaddr+0x8c>)
 800b882:	4818      	ldr	r0, [pc, #96]	; (800b8e4 <netif_do_set_ipaddr+0x90>)
 800b884:	f007 fbb0 	bl	8012fe8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	3304      	adds	r3, #4
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	429a      	cmp	r2, r3
 800b894:	d01c      	beq.n	800b8d0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b8a6:	f107 0314 	add.w	r3, r7, #20
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f7ff ffbf 	bl	800b830 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d002      	beq.n	800b8be <netif_do_set_ipaddr+0x6a>
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	e000      	b.n	800b8c0 <netif_do_set_ipaddr+0x6c>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b8c4:	2101      	movs	r1, #1
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f000 f8d2 	bl	800ba70 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	e000      	b.n	800b8d2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3718      	adds	r7, #24
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	08015188 	.word	0x08015188
 800b8e0:	080152f0 	.word	0x080152f0
 800b8e4:	08015228 	.word	0x08015228

0800b8e8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	3308      	adds	r3, #8
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d00a      	beq.n	800b918 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <netif_do_set_netmask+0x26>
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	e000      	b.n	800b910 <netif_do_set_netmask+0x28>
 800b90e:	2300      	movs	r3, #0
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b914:	2301      	movs	r3, #1
 800b916:	e000      	b.n	800b91a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3714      	adds	r7, #20
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b926:	b480      	push	{r7}
 800b928:	b085      	sub	sp, #20
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	60f8      	str	r0, [r7, #12]
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	330c      	adds	r3, #12
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d00a      	beq.n	800b956 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d002      	beq.n	800b94c <netif_do_set_gw+0x26>
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	e000      	b.n	800b94e <netif_do_set_gw+0x28>
 800b94c:	2300      	movs	r3, #0
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b952:	2301      	movs	r3, #1
 800b954:	e000      	b.n	800b958 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3714      	adds	r7, #20
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b088      	sub	sp, #32
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
 800b970:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b972:	2300      	movs	r3, #0
 800b974:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b976:	2300      	movs	r3, #0
 800b978:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d101      	bne.n	800b984 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b980:	4b1c      	ldr	r3, [pc, #112]	; (800b9f4 <netif_set_addr+0x90>)
 800b982:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d101      	bne.n	800b98e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b98a:	4b1a      	ldr	r3, [pc, #104]	; (800b9f4 <netif_set_addr+0x90>)
 800b98c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d101      	bne.n	800b998 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b994:	4b17      	ldr	r3, [pc, #92]	; (800b9f4 <netif_set_addr+0x90>)
 800b996:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d003      	beq.n	800b9a6 <netif_set_addr+0x42>
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d101      	bne.n	800b9aa <netif_set_addr+0x46>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e000      	b.n	800b9ac <netif_set_addr+0x48>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d006      	beq.n	800b9c2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b9b4:	f107 0310 	add.w	r3, r7, #16
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	68b9      	ldr	r1, [r7, #8]
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f7ff ff49 	bl	800b854 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b9c2:	69fa      	ldr	r2, [r7, #28]
 800b9c4:	6879      	ldr	r1, [r7, #4]
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f7ff ff8e 	bl	800b8e8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b9cc:	69ba      	ldr	r2, [r7, #24]
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f7ff ffa8 	bl	800b926 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d106      	bne.n	800b9ea <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b9dc:	f107 0310 	add.w	r3, r7, #16
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	68b9      	ldr	r1, [r7, #8]
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f7ff ff35 	bl	800b854 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b9ea:	bf00      	nop
 800b9ec:	3720      	adds	r7, #32
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	080174b0 	.word	0x080174b0

0800b9f8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ba00:	4a04      	ldr	r2, [pc, #16]	; (800ba14 <netif_set_default+0x1c>)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ba06:	bf00      	nop
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	24007480 	.word	0x24007480

0800ba18 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d107      	bne.n	800ba36 <netif_set_up+0x1e>
 800ba26:	4b0f      	ldr	r3, [pc, #60]	; (800ba64 <netif_set_up+0x4c>)
 800ba28:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ba2c:	490e      	ldr	r1, [pc, #56]	; (800ba68 <netif_set_up+0x50>)
 800ba2e:	480f      	ldr	r0, [pc, #60]	; (800ba6c <netif_set_up+0x54>)
 800ba30:	f007 fada 	bl	8012fe8 <iprintf>
 800ba34:	e013      	b.n	800ba5e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba3c:	f003 0301 	and.w	r3, r3, #1
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10c      	bne.n	800ba5e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba4a:	f043 0301 	orr.w	r3, r3, #1
 800ba4e:	b2da      	uxtb	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ba56:	2103      	movs	r1, #3
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 f809 	bl	800ba70 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	08015188 	.word	0x08015188
 800ba68:	08015360 	.word	0x08015360
 800ba6c:	08015228 	.word	0x08015228

0800ba70 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d106      	bne.n	800ba90 <netif_issue_reports+0x20>
 800ba82:	4b18      	ldr	r3, [pc, #96]	; (800bae4 <netif_issue_reports+0x74>)
 800ba84:	f240 326d 	movw	r2, #877	; 0x36d
 800ba88:	4917      	ldr	r1, [pc, #92]	; (800bae8 <netif_issue_reports+0x78>)
 800ba8a:	4818      	ldr	r0, [pc, #96]	; (800baec <netif_issue_reports+0x7c>)
 800ba8c:	f007 faac 	bl	8012fe8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba96:	f003 0304 	and.w	r3, r3, #4
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d01e      	beq.n	800badc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800baa4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d017      	beq.n	800badc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800baac:	78fb      	ldrb	r3, [r7, #3]
 800baae:	f003 0301 	and.w	r3, r3, #1
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d013      	beq.n	800bade <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	3304      	adds	r3, #4
 800baba:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00e      	beq.n	800bade <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bac6:	f003 0308 	and.w	r3, r3, #8
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d007      	beq.n	800bade <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	3304      	adds	r3, #4
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f7fd fc11 	bl	80092fc <etharp_request>
 800bada:	e000      	b.n	800bade <netif_issue_reports+0x6e>
    return;
 800badc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	08015188 	.word	0x08015188
 800bae8:	0801537c 	.word	0x0801537c
 800baec:	08015228 	.word	0x08015228

0800baf0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d107      	bne.n	800bb0e <netif_set_down+0x1e>
 800bafe:	4b12      	ldr	r3, [pc, #72]	; (800bb48 <netif_set_down+0x58>)
 800bb00:	f240 329b 	movw	r2, #923	; 0x39b
 800bb04:	4911      	ldr	r1, [pc, #68]	; (800bb4c <netif_set_down+0x5c>)
 800bb06:	4812      	ldr	r0, [pc, #72]	; (800bb50 <netif_set_down+0x60>)
 800bb08:	f007 fa6e 	bl	8012fe8 <iprintf>
 800bb0c:	e019      	b.n	800bb42 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb14:	f003 0301 	and.w	r3, r3, #1
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d012      	beq.n	800bb42 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb22:	f023 0301 	bic.w	r3, r3, #1
 800bb26:	b2da      	uxtb	r2, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb34:	f003 0308 	and.w	r3, r3, #8
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f7fc ff9b 	bl	8008a78 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	08015188 	.word	0x08015188
 800bb4c:	080153a0 	.word	0x080153a0
 800bb50:	08015228 	.word	0x08015228

0800bb54 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d107      	bne.n	800bb72 <netif_set_link_up+0x1e>
 800bb62:	4b13      	ldr	r3, [pc, #76]	; (800bbb0 <netif_set_link_up+0x5c>)
 800bb64:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800bb68:	4912      	ldr	r1, [pc, #72]	; (800bbb4 <netif_set_link_up+0x60>)
 800bb6a:	4813      	ldr	r0, [pc, #76]	; (800bbb8 <netif_set_link_up+0x64>)
 800bb6c:	f007 fa3c 	bl	8012fe8 <iprintf>
 800bb70:	e01b      	b.n	800bbaa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb78:	f003 0304 	and.w	r3, r3, #4
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d114      	bne.n	800bbaa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb86:	f043 0304 	orr.w	r3, r3, #4
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bb92:	2103      	movs	r1, #3
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7ff ff6b 	bl	800ba70 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	69db      	ldr	r3, [r3, #28]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d003      	beq.n	800bbaa <netif_set_link_up+0x56>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	69db      	ldr	r3, [r3, #28]
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	08015188 	.word	0x08015188
 800bbb4:	080153c0 	.word	0x080153c0
 800bbb8:	08015228 	.word	0x08015228

0800bbbc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d107      	bne.n	800bbda <netif_set_link_down+0x1e>
 800bbca:	4b11      	ldr	r3, [pc, #68]	; (800bc10 <netif_set_link_down+0x54>)
 800bbcc:	f240 4206 	movw	r2, #1030	; 0x406
 800bbd0:	4910      	ldr	r1, [pc, #64]	; (800bc14 <netif_set_link_down+0x58>)
 800bbd2:	4811      	ldr	r0, [pc, #68]	; (800bc18 <netif_set_link_down+0x5c>)
 800bbd4:	f007 fa08 	bl	8012fe8 <iprintf>
 800bbd8:	e017      	b.n	800bc0a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bbe0:	f003 0304 	and.w	r3, r3, #4
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d010      	beq.n	800bc0a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bbee:	f023 0304 	bic.w	r3, r3, #4
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	69db      	ldr	r3, [r3, #28]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d003      	beq.n	800bc0a <netif_set_link_down+0x4e>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	69db      	ldr	r3, [r3, #28]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bc0a:	3708      	adds	r7, #8
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	08015188 	.word	0x08015188
 800bc14:	080153e4 	.word	0x080153e4
 800bc18:	08015228 	.word	0x08015228

0800bc1c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d002      	beq.n	800bc32 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	683a      	ldr	r2, [r7, #0]
 800bc30:	61da      	str	r2, [r3, #28]
  }
}
 800bc32:	bf00      	nop
 800bc34:	370c      	adds	r7, #12
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b085      	sub	sp, #20
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	60f8      	str	r0, [r7, #12]
 800bc46:	60b9      	str	r1, [r7, #8]
 800bc48:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bc4a:	f06f 030b 	mvn.w	r3, #11
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3714      	adds	r7, #20
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
	...

0800bc5c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4603      	mov	r3, r0
 800bc64:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bc66:	79fb      	ldrb	r3, [r7, #7]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d013      	beq.n	800bc94 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bc6c:	4b0d      	ldr	r3, [pc, #52]	; (800bca4 <netif_get_by_index+0x48>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	60fb      	str	r3, [r7, #12]
 800bc72:	e00c      	b.n	800bc8e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	79fa      	ldrb	r2, [r7, #7]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d101      	bne.n	800bc88 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	e006      	b.n	800bc96 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	60fb      	str	r3, [r7, #12]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1ef      	bne.n	800bc74 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3714      	adds	r7, #20
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	2400747c 	.word	0x2400747c

0800bca8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bcae:	f000 ff97 	bl	800cbe0 <sys_arch_protect>
 800bcb2:	6038      	str	r0, [r7, #0]
 800bcb4:	4b0d      	ldr	r3, [pc, #52]	; (800bcec <pbuf_free_ooseq+0x44>)
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	701a      	strb	r2, [r3, #0]
 800bcba:	6838      	ldr	r0, [r7, #0]
 800bcbc:	f000 ff9e 	bl	800cbfc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bcc0:	4b0b      	ldr	r3, [pc, #44]	; (800bcf0 <pbuf_free_ooseq+0x48>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	607b      	str	r3, [r7, #4]
 800bcc6:	e00a      	b.n	800bcde <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d003      	beq.n	800bcd8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f002 fb29 	bl	800e328 <tcp_free_ooseq>
      return;
 800bcd6:	e005      	b.n	800bce4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	607b      	str	r3, [r7, #4]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1f1      	bne.n	800bcc8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	24007485 	.word	0x24007485
 800bcf0:	2400749c 	.word	0x2400749c

0800bcf4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bcfc:	f7ff ffd4 	bl	800bca8 <pbuf_free_ooseq>
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bd0e:	f000 ff67 	bl	800cbe0 <sys_arch_protect>
 800bd12:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bd14:	4b0f      	ldr	r3, [pc, #60]	; (800bd54 <pbuf_pool_is_empty+0x4c>)
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bd1a:	4b0e      	ldr	r3, [pc, #56]	; (800bd54 <pbuf_pool_is_empty+0x4c>)
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 ff6b 	bl	800cbfc <sys_arch_unprotect>

  if (!queued) {
 800bd26:	78fb      	ldrb	r3, [r7, #3]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d10f      	bne.n	800bd4c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	480a      	ldr	r0, [pc, #40]	; (800bd58 <pbuf_pool_is_empty+0x50>)
 800bd30:	f006 f9c4 	bl	80120bc <tcpip_try_callback>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d008      	beq.n	800bd4c <pbuf_pool_is_empty+0x44>
 800bd3a:	f000 ff51 	bl	800cbe0 <sys_arch_protect>
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	4b04      	ldr	r3, [pc, #16]	; (800bd54 <pbuf_pool_is_empty+0x4c>)
 800bd42:	2200      	movs	r2, #0
 800bd44:	701a      	strb	r2, [r3, #0]
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 ff58 	bl	800cbfc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bd4c:	bf00      	nop
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	24007485 	.word	0x24007485
 800bd58:	0800bcf5 	.word	0x0800bcf5

0800bd5c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b085      	sub	sp, #20
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	4611      	mov	r1, r2
 800bd68:	461a      	mov	r2, r3
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	80fb      	strh	r3, [r7, #6]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2200      	movs	r2, #0
 800bd76:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	68ba      	ldr	r2, [r7, #8]
 800bd7c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	88fa      	ldrh	r2, [r7, #6]
 800bd82:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	88ba      	ldrh	r2, [r7, #4]
 800bd88:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bd8a:	8b3b      	ldrh	r3, [r7, #24]
 800bd8c:	b2da      	uxtb	r2, r3
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	7f3a      	ldrb	r2, [r7, #28]
 800bd96:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	73da      	strb	r2, [r3, #15]
}
 800bda4:	bf00      	nop
 800bda6:	3714      	adds	r7, #20
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b08c      	sub	sp, #48	; 0x30
 800bdb4:	af02      	add	r7, sp, #8
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	71fb      	strb	r3, [r7, #7]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	80bb      	strh	r3, [r7, #4]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bdc2:	79fb      	ldrb	r3, [r7, #7]
 800bdc4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bdc6:	887b      	ldrh	r3, [r7, #2]
 800bdc8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bdcc:	d07f      	beq.n	800bece <pbuf_alloc+0x11e>
 800bdce:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bdd2:	f300 80c8 	bgt.w	800bf66 <pbuf_alloc+0x1b6>
 800bdd6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bdda:	d010      	beq.n	800bdfe <pbuf_alloc+0x4e>
 800bddc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bde0:	f300 80c1 	bgt.w	800bf66 <pbuf_alloc+0x1b6>
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d002      	beq.n	800bdee <pbuf_alloc+0x3e>
 800bde8:	2b41      	cmp	r3, #65	; 0x41
 800bdea:	f040 80bc 	bne.w	800bf66 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bdee:	887a      	ldrh	r2, [r7, #2]
 800bdf0:	88bb      	ldrh	r3, [r7, #4]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	f000 f8d1 	bl	800bf9c <pbuf_alloc_reference>
 800bdfa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bdfc:	e0bd      	b.n	800bf7a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bdfe:	2300      	movs	r3, #0
 800be00:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800be02:	2300      	movs	r3, #0
 800be04:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800be06:	88bb      	ldrh	r3, [r7, #4]
 800be08:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800be0a:	200c      	movs	r0, #12
 800be0c:	f7ff fb9a 	bl	800b544 <memp_malloc>
 800be10:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d109      	bne.n	800be2c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800be18:	f7ff ff76 	bl	800bd08 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800be1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d002      	beq.n	800be28 <pbuf_alloc+0x78>
            pbuf_free(p);
 800be22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be24:	f000 faa8 	bl	800c378 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800be28:	2300      	movs	r3, #0
 800be2a:	e0a7      	b.n	800bf7c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800be2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be2e:	3303      	adds	r3, #3
 800be30:	b29b      	uxth	r3, r3
 800be32:	f023 0303 	bic.w	r3, r3, #3
 800be36:	b29b      	uxth	r3, r3
 800be38:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	8b7a      	ldrh	r2, [r7, #26]
 800be40:	4293      	cmp	r3, r2
 800be42:	bf28      	it	cs
 800be44:	4613      	movcs	r3, r2
 800be46:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800be48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be4a:	3310      	adds	r3, #16
 800be4c:	693a      	ldr	r2, [r7, #16]
 800be4e:	4413      	add	r3, r2
 800be50:	3303      	adds	r3, #3
 800be52:	f023 0303 	bic.w	r3, r3, #3
 800be56:	4618      	mov	r0, r3
 800be58:	89f9      	ldrh	r1, [r7, #14]
 800be5a:	8b7a      	ldrh	r2, [r7, #26]
 800be5c:	2300      	movs	r3, #0
 800be5e:	9301      	str	r3, [sp, #4]
 800be60:	887b      	ldrh	r3, [r7, #2]
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	460b      	mov	r3, r1
 800be66:	4601      	mov	r1, r0
 800be68:	6938      	ldr	r0, [r7, #16]
 800be6a:	f7ff ff77 	bl	800bd5c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	f003 0303 	and.w	r3, r3, #3
 800be76:	2b00      	cmp	r3, #0
 800be78:	d006      	beq.n	800be88 <pbuf_alloc+0xd8>
 800be7a:	4b42      	ldr	r3, [pc, #264]	; (800bf84 <pbuf_alloc+0x1d4>)
 800be7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be80:	4941      	ldr	r1, [pc, #260]	; (800bf88 <pbuf_alloc+0x1d8>)
 800be82:	4842      	ldr	r0, [pc, #264]	; (800bf8c <pbuf_alloc+0x1dc>)
 800be84:	f007 f8b0 	bl	8012fe8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800be88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be8a:	3303      	adds	r3, #3
 800be8c:	f023 0303 	bic.w	r3, r3, #3
 800be90:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800be94:	d106      	bne.n	800bea4 <pbuf_alloc+0xf4>
 800be96:	4b3b      	ldr	r3, [pc, #236]	; (800bf84 <pbuf_alloc+0x1d4>)
 800be98:	f44f 7281 	mov.w	r2, #258	; 0x102
 800be9c:	493c      	ldr	r1, [pc, #240]	; (800bf90 <pbuf_alloc+0x1e0>)
 800be9e:	483b      	ldr	r0, [pc, #236]	; (800bf8c <pbuf_alloc+0x1dc>)
 800bea0:	f007 f8a2 	bl	8012fe8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d102      	bne.n	800beb0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	627b      	str	r3, [r7, #36]	; 0x24
 800beae:	e002      	b.n	800beb6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	693a      	ldr	r2, [r7, #16]
 800beb4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800beba:	8b7a      	ldrh	r2, [r7, #26]
 800bebc:	89fb      	ldrh	r3, [r7, #14]
 800bebe:	1ad3      	subs	r3, r2, r3
 800bec0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bec2:	2300      	movs	r3, #0
 800bec4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bec6:	8b7b      	ldrh	r3, [r7, #26]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d19e      	bne.n	800be0a <pbuf_alloc+0x5a>
      break;
 800becc:	e055      	b.n	800bf7a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bece:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bed0:	3303      	adds	r3, #3
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	f023 0303 	bic.w	r3, r3, #3
 800bed8:	b29a      	uxth	r2, r3
 800beda:	88bb      	ldrh	r3, [r7, #4]
 800bedc:	3303      	adds	r3, #3
 800bede:	b29b      	uxth	r3, r3
 800bee0:	f023 0303 	bic.w	r3, r3, #3
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	4413      	add	r3, r2
 800bee8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800beea:	8b3b      	ldrh	r3, [r7, #24]
 800beec:	3310      	adds	r3, #16
 800beee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bef0:	8b3a      	ldrh	r2, [r7, #24]
 800bef2:	88bb      	ldrh	r3, [r7, #4]
 800bef4:	3303      	adds	r3, #3
 800bef6:	f023 0303 	bic.w	r3, r3, #3
 800befa:	429a      	cmp	r2, r3
 800befc:	d306      	bcc.n	800bf0c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800befe:	8afa      	ldrh	r2, [r7, #22]
 800bf00:	88bb      	ldrh	r3, [r7, #4]
 800bf02:	3303      	adds	r3, #3
 800bf04:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d201      	bcs.n	800bf10 <pbuf_alloc+0x160>
        return NULL;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	e035      	b.n	800bf7c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bf10:	8afb      	ldrh	r3, [r7, #22]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7ff f96e 	bl	800b1f4 <mem_malloc>
 800bf18:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d101      	bne.n	800bf24 <pbuf_alloc+0x174>
        return NULL;
 800bf20:	2300      	movs	r3, #0
 800bf22:	e02b      	b.n	800bf7c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bf24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf26:	3310      	adds	r3, #16
 800bf28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf2a:	4413      	add	r3, r2
 800bf2c:	3303      	adds	r3, #3
 800bf2e:	f023 0303 	bic.w	r3, r3, #3
 800bf32:	4618      	mov	r0, r3
 800bf34:	88b9      	ldrh	r1, [r7, #4]
 800bf36:	88ba      	ldrh	r2, [r7, #4]
 800bf38:	2300      	movs	r3, #0
 800bf3a:	9301      	str	r3, [sp, #4]
 800bf3c:	887b      	ldrh	r3, [r7, #2]
 800bf3e:	9300      	str	r3, [sp, #0]
 800bf40:	460b      	mov	r3, r1
 800bf42:	4601      	mov	r1, r0
 800bf44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf46:	f7ff ff09 	bl	800bd5c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	f003 0303 	and.w	r3, r3, #3
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d010      	beq.n	800bf78 <pbuf_alloc+0x1c8>
 800bf56:	4b0b      	ldr	r3, [pc, #44]	; (800bf84 <pbuf_alloc+0x1d4>)
 800bf58:	f44f 7291 	mov.w	r2, #290	; 0x122
 800bf5c:	490d      	ldr	r1, [pc, #52]	; (800bf94 <pbuf_alloc+0x1e4>)
 800bf5e:	480b      	ldr	r0, [pc, #44]	; (800bf8c <pbuf_alloc+0x1dc>)
 800bf60:	f007 f842 	bl	8012fe8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bf64:	e008      	b.n	800bf78 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bf66:	4b07      	ldr	r3, [pc, #28]	; (800bf84 <pbuf_alloc+0x1d4>)
 800bf68:	f240 1227 	movw	r2, #295	; 0x127
 800bf6c:	490a      	ldr	r1, [pc, #40]	; (800bf98 <pbuf_alloc+0x1e8>)
 800bf6e:	4807      	ldr	r0, [pc, #28]	; (800bf8c <pbuf_alloc+0x1dc>)
 800bf70:	f007 f83a 	bl	8012fe8 <iprintf>
      return NULL;
 800bf74:	2300      	movs	r3, #0
 800bf76:	e001      	b.n	800bf7c <pbuf_alloc+0x1cc>
      break;
 800bf78:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3728      	adds	r7, #40	; 0x28
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	08015408 	.word	0x08015408
 800bf88:	0801548c 	.word	0x0801548c
 800bf8c:	080154bc 	.word	0x080154bc
 800bf90:	080154e4 	.word	0x080154e4
 800bf94:	08015518 	.word	0x08015518
 800bf98:	08015544 	.word	0x08015544

0800bf9c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b086      	sub	sp, #24
 800bfa0:	af02      	add	r7, sp, #8
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	807b      	strh	r3, [r7, #2]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bfac:	883b      	ldrh	r3, [r7, #0]
 800bfae:	2b41      	cmp	r3, #65	; 0x41
 800bfb0:	d009      	beq.n	800bfc6 <pbuf_alloc_reference+0x2a>
 800bfb2:	883b      	ldrh	r3, [r7, #0]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d006      	beq.n	800bfc6 <pbuf_alloc_reference+0x2a>
 800bfb8:	4b0f      	ldr	r3, [pc, #60]	; (800bff8 <pbuf_alloc_reference+0x5c>)
 800bfba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bfbe:	490f      	ldr	r1, [pc, #60]	; (800bffc <pbuf_alloc_reference+0x60>)
 800bfc0:	480f      	ldr	r0, [pc, #60]	; (800c000 <pbuf_alloc_reference+0x64>)
 800bfc2:	f007 f811 	bl	8012fe8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bfc6:	200b      	movs	r0, #11
 800bfc8:	f7ff fabc 	bl	800b544 <memp_malloc>
 800bfcc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d101      	bne.n	800bfd8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	e00b      	b.n	800bff0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bfd8:	8879      	ldrh	r1, [r7, #2]
 800bfda:	887a      	ldrh	r2, [r7, #2]
 800bfdc:	2300      	movs	r3, #0
 800bfde:	9301      	str	r3, [sp, #4]
 800bfe0:	883b      	ldrh	r3, [r7, #0]
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	6879      	ldr	r1, [r7, #4]
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	f7ff feb7 	bl	800bd5c <pbuf_init_alloced_pbuf>
  return p;
 800bfee:	68fb      	ldr	r3, [r7, #12]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	08015408 	.word	0x08015408
 800bffc:	08015560 	.word	0x08015560
 800c000:	080154bc 	.word	0x080154bc

0800c004 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b088      	sub	sp, #32
 800c008:	af02      	add	r7, sp, #8
 800c00a:	607b      	str	r3, [r7, #4]
 800c00c:	4603      	mov	r3, r0
 800c00e:	73fb      	strb	r3, [r7, #15]
 800c010:	460b      	mov	r3, r1
 800c012:	81bb      	strh	r3, [r7, #12]
 800c014:	4613      	mov	r3, r2
 800c016:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c018:	7bfb      	ldrb	r3, [r7, #15]
 800c01a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c01c:	8a7b      	ldrh	r3, [r7, #18]
 800c01e:	3303      	adds	r3, #3
 800c020:	f023 0203 	bic.w	r2, r3, #3
 800c024:	89bb      	ldrh	r3, [r7, #12]
 800c026:	441a      	add	r2, r3
 800c028:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d901      	bls.n	800c032 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c02e:	2300      	movs	r3, #0
 800c030:	e018      	b.n	800c064 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d007      	beq.n	800c048 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c038:	8a7b      	ldrh	r3, [r7, #18]
 800c03a:	3303      	adds	r3, #3
 800c03c:	f023 0303 	bic.w	r3, r3, #3
 800c040:	6a3a      	ldr	r2, [r7, #32]
 800c042:	4413      	add	r3, r2
 800c044:	617b      	str	r3, [r7, #20]
 800c046:	e001      	b.n	800c04c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c048:	2300      	movs	r3, #0
 800c04a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	89b9      	ldrh	r1, [r7, #12]
 800c050:	89ba      	ldrh	r2, [r7, #12]
 800c052:	2302      	movs	r3, #2
 800c054:	9301      	str	r3, [sp, #4]
 800c056:	897b      	ldrh	r3, [r7, #10]
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	460b      	mov	r3, r1
 800c05c:	6979      	ldr	r1, [r7, #20]
 800c05e:	f7ff fe7d 	bl	800bd5c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c062:	687b      	ldr	r3, [r7, #4]
}
 800c064:	4618      	mov	r0, r3
 800c066:	3718      	adds	r7, #24
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	460b      	mov	r3, r1
 800c076:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d106      	bne.n	800c08c <pbuf_realloc+0x20>
 800c07e:	4b3a      	ldr	r3, [pc, #232]	; (800c168 <pbuf_realloc+0xfc>)
 800c080:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c084:	4939      	ldr	r1, [pc, #228]	; (800c16c <pbuf_realloc+0x100>)
 800c086:	483a      	ldr	r0, [pc, #232]	; (800c170 <pbuf_realloc+0x104>)
 800c088:	f006 ffae 	bl	8012fe8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	891b      	ldrh	r3, [r3, #8]
 800c090:	887a      	ldrh	r2, [r7, #2]
 800c092:	429a      	cmp	r2, r3
 800c094:	d263      	bcs.n	800c15e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	891a      	ldrh	r2, [r3, #8]
 800c09a:	887b      	ldrh	r3, [r7, #2]
 800c09c:	1ad3      	subs	r3, r2, r3
 800c09e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c0a0:	887b      	ldrh	r3, [r7, #2]
 800c0a2:	817b      	strh	r3, [r7, #10]
  q = p;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c0a8:	e018      	b.n	800c0dc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	895b      	ldrh	r3, [r3, #10]
 800c0ae:	897a      	ldrh	r2, [r7, #10]
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	891a      	ldrh	r2, [r3, #8]
 800c0b8:	893b      	ldrh	r3, [r7, #8]
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d106      	bne.n	800c0dc <pbuf_realloc+0x70>
 800c0ce:	4b26      	ldr	r3, [pc, #152]	; (800c168 <pbuf_realloc+0xfc>)
 800c0d0:	f240 12af 	movw	r2, #431	; 0x1af
 800c0d4:	4927      	ldr	r1, [pc, #156]	; (800c174 <pbuf_realloc+0x108>)
 800c0d6:	4826      	ldr	r0, [pc, #152]	; (800c170 <pbuf_realloc+0x104>)
 800c0d8:	f006 ff86 	bl	8012fe8 <iprintf>
  while (rem_len > q->len) {
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	895b      	ldrh	r3, [r3, #10]
 800c0e0:	897a      	ldrh	r2, [r7, #10]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d8e1      	bhi.n	800c0aa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	7b1b      	ldrb	r3, [r3, #12]
 800c0ea:	f003 030f 	and.w	r3, r3, #15
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d121      	bne.n	800c136 <pbuf_realloc+0xca>
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	895b      	ldrh	r3, [r3, #10]
 800c0f6:	897a      	ldrh	r2, [r7, #10]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d01c      	beq.n	800c136 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	7b5b      	ldrb	r3, [r3, #13]
 800c100:	f003 0302 	and.w	r3, r3, #2
 800c104:	2b00      	cmp	r3, #0
 800c106:	d116      	bne.n	800c136 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	685a      	ldr	r2, [r3, #4]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	b29a      	uxth	r2, r3
 800c112:	897b      	ldrh	r3, [r7, #10]
 800c114:	4413      	add	r3, r2
 800c116:	b29b      	uxth	r3, r3
 800c118:	4619      	mov	r1, r3
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f7fe ff5a 	bl	800afd4 <mem_trim>
 800c120:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d106      	bne.n	800c136 <pbuf_realloc+0xca>
 800c128:	4b0f      	ldr	r3, [pc, #60]	; (800c168 <pbuf_realloc+0xfc>)
 800c12a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c12e:	4912      	ldr	r1, [pc, #72]	; (800c178 <pbuf_realloc+0x10c>)
 800c130:	480f      	ldr	r0, [pc, #60]	; (800c170 <pbuf_realloc+0x104>)
 800c132:	f006 ff59 	bl	8012fe8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	897a      	ldrh	r2, [r7, #10]
 800c13a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	895a      	ldrh	r2, [r3, #10]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d004      	beq.n	800c156 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4618      	mov	r0, r3
 800c152:	f000 f911 	bl	800c378 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	601a      	str	r2, [r3, #0]
 800c15c:	e000      	b.n	800c160 <pbuf_realloc+0xf4>
    return;
 800c15e:	bf00      	nop

}
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	08015408 	.word	0x08015408
 800c16c:	08015574 	.word	0x08015574
 800c170:	080154bc 	.word	0x080154bc
 800c174:	0801558c 	.word	0x0801558c
 800c178:	080155a4 	.word	0x080155a4

0800c17c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b086      	sub	sp, #24
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	4613      	mov	r3, r2
 800c188:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d106      	bne.n	800c19e <pbuf_add_header_impl+0x22>
 800c190:	4b2b      	ldr	r3, [pc, #172]	; (800c240 <pbuf_add_header_impl+0xc4>)
 800c192:	f240 12df 	movw	r2, #479	; 0x1df
 800c196:	492b      	ldr	r1, [pc, #172]	; (800c244 <pbuf_add_header_impl+0xc8>)
 800c198:	482b      	ldr	r0, [pc, #172]	; (800c248 <pbuf_add_header_impl+0xcc>)
 800c19a:	f006 ff25 	bl	8012fe8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d003      	beq.n	800c1ac <pbuf_add_header_impl+0x30>
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1aa:	d301      	bcc.n	800c1b0 <pbuf_add_header_impl+0x34>
    return 1;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	e043      	b.n	800c238 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d101      	bne.n	800c1ba <pbuf_add_header_impl+0x3e>
    return 0;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	e03e      	b.n	800c238 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	891a      	ldrh	r2, [r3, #8]
 800c1c2:	8a7b      	ldrh	r3, [r7, #18]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	8a7a      	ldrh	r2, [r7, #18]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d901      	bls.n	800c1d2 <pbuf_add_header_impl+0x56>
    return 1;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e032      	b.n	800c238 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	7b1b      	ldrb	r3, [r3, #12]
 800c1d6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c1d8:	8a3b      	ldrh	r3, [r7, #16]
 800c1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00c      	beq.n	800c1fc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	685a      	ldr	r2, [r3, #4]
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	425b      	negs	r3, r3
 800c1ea:	4413      	add	r3, r2
 800c1ec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3310      	adds	r3, #16
 800c1f2:	697a      	ldr	r2, [r7, #20]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d20d      	bcs.n	800c214 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e01d      	b.n	800c238 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c1fc:	79fb      	ldrb	r3, [r7, #7]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d006      	beq.n	800c210 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	685a      	ldr	r2, [r3, #4]
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	425b      	negs	r3, r3
 800c20a:	4413      	add	r3, r2
 800c20c:	617b      	str	r3, [r7, #20]
 800c20e:	e001      	b.n	800c214 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c210:	2301      	movs	r3, #1
 800c212:	e011      	b.n	800c238 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	697a      	ldr	r2, [r7, #20]
 800c218:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	895a      	ldrh	r2, [r3, #10]
 800c21e:	8a7b      	ldrh	r3, [r7, #18]
 800c220:	4413      	add	r3, r2
 800c222:	b29a      	uxth	r2, r3
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	891a      	ldrh	r2, [r3, #8]
 800c22c:	8a7b      	ldrh	r3, [r7, #18]
 800c22e:	4413      	add	r3, r2
 800c230:	b29a      	uxth	r2, r3
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	811a      	strh	r2, [r3, #8]


  return 0;
 800c236:	2300      	movs	r3, #0
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3718      	adds	r7, #24
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	08015408 	.word	0x08015408
 800c244:	080155c0 	.word	0x080155c0
 800c248:	080154bc 	.word	0x080154bc

0800c24c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c256:	2200      	movs	r2, #0
 800c258:	6839      	ldr	r1, [r7, #0]
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f7ff ff8e 	bl	800c17c <pbuf_add_header_impl>
 800c260:	4603      	mov	r3, r0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
	...

0800c26c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d106      	bne.n	800c28a <pbuf_remove_header+0x1e>
 800c27c:	4b20      	ldr	r3, [pc, #128]	; (800c300 <pbuf_remove_header+0x94>)
 800c27e:	f240 224b 	movw	r2, #587	; 0x24b
 800c282:	4920      	ldr	r1, [pc, #128]	; (800c304 <pbuf_remove_header+0x98>)
 800c284:	4820      	ldr	r0, [pc, #128]	; (800c308 <pbuf_remove_header+0x9c>)
 800c286:	f006 feaf 	bl	8012fe8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d003      	beq.n	800c298 <pbuf_remove_header+0x2c>
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c296:	d301      	bcc.n	800c29c <pbuf_remove_header+0x30>
    return 1;
 800c298:	2301      	movs	r3, #1
 800c29a:	e02c      	b.n	800c2f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d101      	bne.n	800c2a6 <pbuf_remove_header+0x3a>
    return 0;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	e027      	b.n	800c2f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	895b      	ldrh	r3, [r3, #10]
 800c2ae:	89fa      	ldrh	r2, [r7, #14]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d908      	bls.n	800c2c6 <pbuf_remove_header+0x5a>
 800c2b4:	4b12      	ldr	r3, [pc, #72]	; (800c300 <pbuf_remove_header+0x94>)
 800c2b6:	f240 2255 	movw	r2, #597	; 0x255
 800c2ba:	4914      	ldr	r1, [pc, #80]	; (800c30c <pbuf_remove_header+0xa0>)
 800c2bc:	4812      	ldr	r0, [pc, #72]	; (800c308 <pbuf_remove_header+0x9c>)
 800c2be:	f006 fe93 	bl	8012fe8 <iprintf>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e017      	b.n	800c2f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	685a      	ldr	r2, [r3, #4]
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	441a      	add	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	895a      	ldrh	r2, [r3, #10]
 800c2dc:	89fb      	ldrh	r3, [r7, #14]
 800c2de:	1ad3      	subs	r3, r2, r3
 800c2e0:	b29a      	uxth	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	891a      	ldrh	r2, [r3, #8]
 800c2ea:	89fb      	ldrh	r3, [r7, #14]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3710      	adds	r7, #16
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	08015408 	.word	0x08015408
 800c304:	080155c0 	.word	0x080155c0
 800c308:	080154bc 	.word	0x080154bc
 800c30c:	080155cc 	.word	0x080155cc

0800c310 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	460b      	mov	r3, r1
 800c31a:	807b      	strh	r3, [r7, #2]
 800c31c:	4613      	mov	r3, r2
 800c31e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c320:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c324:	2b00      	cmp	r3, #0
 800c326:	da08      	bge.n	800c33a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c328:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c32c:	425b      	negs	r3, r3
 800c32e:	4619      	mov	r1, r3
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f7ff ff9b 	bl	800c26c <pbuf_remove_header>
 800c336:	4603      	mov	r3, r0
 800c338:	e007      	b.n	800c34a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c33a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c33e:	787a      	ldrb	r2, [r7, #1]
 800c340:	4619      	mov	r1, r3
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7ff ff1a 	bl	800c17c <pbuf_add_header_impl>
 800c348:	4603      	mov	r3, r0
  }
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b082      	sub	sp, #8
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	460b      	mov	r3, r1
 800c35c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c35e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c362:	2201      	movs	r2, #1
 800c364:	4619      	mov	r1, r3
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7ff ffd2 	bl	800c310 <pbuf_header_impl>
 800c36c:	4603      	mov	r3, r0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3708      	adds	r7, #8
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
	...

0800c378 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b088      	sub	sp, #32
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d10b      	bne.n	800c39e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d106      	bne.n	800c39a <pbuf_free+0x22>
 800c38c:	4b3b      	ldr	r3, [pc, #236]	; (800c47c <pbuf_free+0x104>)
 800c38e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c392:	493b      	ldr	r1, [pc, #236]	; (800c480 <pbuf_free+0x108>)
 800c394:	483b      	ldr	r0, [pc, #236]	; (800c484 <pbuf_free+0x10c>)
 800c396:	f006 fe27 	bl	8012fe8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	e069      	b.n	800c472 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c3a2:	e062      	b.n	800c46a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c3a4:	f000 fc1c 	bl	800cbe0 <sys_arch_protect>
 800c3a8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	7b9b      	ldrb	r3, [r3, #14]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d106      	bne.n	800c3c0 <pbuf_free+0x48>
 800c3b2:	4b32      	ldr	r3, [pc, #200]	; (800c47c <pbuf_free+0x104>)
 800c3b4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c3b8:	4933      	ldr	r1, [pc, #204]	; (800c488 <pbuf_free+0x110>)
 800c3ba:	4832      	ldr	r0, [pc, #200]	; (800c484 <pbuf_free+0x10c>)
 800c3bc:	f006 fe14 	bl	8012fe8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	7b9b      	ldrb	r3, [r3, #14]
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	b2da      	uxtb	r2, r3
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	739a      	strb	r2, [r3, #14]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	7b9b      	ldrb	r3, [r3, #14]
 800c3d0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c3d2:	69b8      	ldr	r0, [r7, #24]
 800c3d4:	f000 fc12 	bl	800cbfc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c3d8:	7dfb      	ldrb	r3, [r7, #23]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d143      	bne.n	800c466 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	7b1b      	ldrb	r3, [r3, #12]
 800c3e8:	f003 030f 	and.w	r3, r3, #15
 800c3ec:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	7b5b      	ldrb	r3, [r3, #13]
 800c3f2:	f003 0302 	and.w	r3, r3, #2
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d011      	beq.n	800c41e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	691b      	ldr	r3, [r3, #16]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d106      	bne.n	800c414 <pbuf_free+0x9c>
 800c406:	4b1d      	ldr	r3, [pc, #116]	; (800c47c <pbuf_free+0x104>)
 800c408:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c40c:	491f      	ldr	r1, [pc, #124]	; (800c48c <pbuf_free+0x114>)
 800c40e:	481d      	ldr	r0, [pc, #116]	; (800c484 <pbuf_free+0x10c>)
 800c410:	f006 fdea 	bl	8012fe8 <iprintf>
        pc->custom_free_function(p);
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	691b      	ldr	r3, [r3, #16]
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	4798      	blx	r3
 800c41c:	e01d      	b.n	800c45a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c41e:	7bfb      	ldrb	r3, [r7, #15]
 800c420:	2b02      	cmp	r3, #2
 800c422:	d104      	bne.n	800c42e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c424:	6879      	ldr	r1, [r7, #4]
 800c426:	200c      	movs	r0, #12
 800c428:	f7ff f902 	bl	800b630 <memp_free>
 800c42c:	e015      	b.n	800c45a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
 800c430:	2b01      	cmp	r3, #1
 800c432:	d104      	bne.n	800c43e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c434:	6879      	ldr	r1, [r7, #4]
 800c436:	200b      	movs	r0, #11
 800c438:	f7ff f8fa 	bl	800b630 <memp_free>
 800c43c:	e00d      	b.n	800c45a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c43e:	7bfb      	ldrb	r3, [r7, #15]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d103      	bne.n	800c44c <pbuf_free+0xd4>
          mem_free(p);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f7fe fd35 	bl	800aeb4 <mem_free>
 800c44a:	e006      	b.n	800c45a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c44c:	4b0b      	ldr	r3, [pc, #44]	; (800c47c <pbuf_free+0x104>)
 800c44e:	f240 320f 	movw	r2, #783	; 0x30f
 800c452:	490f      	ldr	r1, [pc, #60]	; (800c490 <pbuf_free+0x118>)
 800c454:	480b      	ldr	r0, [pc, #44]	; (800c484 <pbuf_free+0x10c>)
 800c456:	f006 fdc7 	bl	8012fe8 <iprintf>
        }
      }
      count++;
 800c45a:	7ffb      	ldrb	r3, [r7, #31]
 800c45c:	3301      	adds	r3, #1
 800c45e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	607b      	str	r3, [r7, #4]
 800c464:	e001      	b.n	800c46a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c466:	2300      	movs	r3, #0
 800c468:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d199      	bne.n	800c3a4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c470:	7ffb      	ldrb	r3, [r7, #31]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3720      	adds	r7, #32
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	08015408 	.word	0x08015408
 800c480:	080155c0 	.word	0x080155c0
 800c484:	080154bc 	.word	0x080154bc
 800c488:	080155ec 	.word	0x080155ec
 800c48c:	08015604 	.word	0x08015604
 800c490:	08015628 	.word	0x08015628

0800c494 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c49c:	2300      	movs	r3, #0
 800c49e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c4a0:	e005      	b.n	800c4ae <pbuf_clen+0x1a>
    ++len;
 800c4a2:	89fb      	ldrh	r3, [r7, #14]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d1f6      	bne.n	800c4a2 <pbuf_clen+0xe>
  }
  return len;
 800c4b4:	89fb      	ldrh	r3, [r7, #14]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3714      	adds	r7, #20
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
	...

0800c4c4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d016      	beq.n	800c500 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c4d2:	f000 fb85 	bl	800cbe0 <sys_arch_protect>
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	7b9b      	ldrb	r3, [r3, #14]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	b2da      	uxtb	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	739a      	strb	r2, [r3, #14]
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f000 fb89 	bl	800cbfc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	7b9b      	ldrb	r3, [r3, #14]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d106      	bne.n	800c500 <pbuf_ref+0x3c>
 800c4f2:	4b05      	ldr	r3, [pc, #20]	; (800c508 <pbuf_ref+0x44>)
 800c4f4:	f240 3242 	movw	r2, #834	; 0x342
 800c4f8:	4904      	ldr	r1, [pc, #16]	; (800c50c <pbuf_ref+0x48>)
 800c4fa:	4805      	ldr	r0, [pc, #20]	; (800c510 <pbuf_ref+0x4c>)
 800c4fc:	f006 fd74 	bl	8012fe8 <iprintf>
  }
}
 800c500:	bf00      	nop
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	08015408 	.word	0x08015408
 800c50c:	0801563c 	.word	0x0801563c
 800c510:	080154bc 	.word	0x080154bc

0800c514 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d002      	beq.n	800c52a <pbuf_cat+0x16>
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d107      	bne.n	800c53a <pbuf_cat+0x26>
 800c52a:	4b20      	ldr	r3, [pc, #128]	; (800c5ac <pbuf_cat+0x98>)
 800c52c:	f240 3259 	movw	r2, #857	; 0x359
 800c530:	491f      	ldr	r1, [pc, #124]	; (800c5b0 <pbuf_cat+0x9c>)
 800c532:	4820      	ldr	r0, [pc, #128]	; (800c5b4 <pbuf_cat+0xa0>)
 800c534:	f006 fd58 	bl	8012fe8 <iprintf>
 800c538:	e034      	b.n	800c5a4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	60fb      	str	r3, [r7, #12]
 800c53e:	e00a      	b.n	800c556 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	891a      	ldrh	r2, [r3, #8]
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	891b      	ldrh	r3, [r3, #8]
 800c548:	4413      	add	r3, r2
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	60fb      	str	r3, [r7, #12]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d1f0      	bne.n	800c540 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	891a      	ldrh	r2, [r3, #8]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	895b      	ldrh	r3, [r3, #10]
 800c566:	429a      	cmp	r2, r3
 800c568:	d006      	beq.n	800c578 <pbuf_cat+0x64>
 800c56a:	4b10      	ldr	r3, [pc, #64]	; (800c5ac <pbuf_cat+0x98>)
 800c56c:	f240 3262 	movw	r2, #866	; 0x362
 800c570:	4911      	ldr	r1, [pc, #68]	; (800c5b8 <pbuf_cat+0xa4>)
 800c572:	4810      	ldr	r0, [pc, #64]	; (800c5b4 <pbuf_cat+0xa0>)
 800c574:	f006 fd38 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d006      	beq.n	800c58e <pbuf_cat+0x7a>
 800c580:	4b0a      	ldr	r3, [pc, #40]	; (800c5ac <pbuf_cat+0x98>)
 800c582:	f240 3263 	movw	r2, #867	; 0x363
 800c586:	490d      	ldr	r1, [pc, #52]	; (800c5bc <pbuf_cat+0xa8>)
 800c588:	480a      	ldr	r0, [pc, #40]	; (800c5b4 <pbuf_cat+0xa0>)
 800c58a:	f006 fd2d 	bl	8012fe8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	891a      	ldrh	r2, [r3, #8]
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	891b      	ldrh	r3, [r3, #8]
 800c596:	4413      	add	r3, r2
 800c598:	b29a      	uxth	r2, r3
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	08015408 	.word	0x08015408
 800c5b0:	08015650 	.word	0x08015650
 800c5b4:	080154bc 	.word	0x080154bc
 800c5b8:	08015688 	.word	0x08015688
 800c5bc:	080156b8 	.word	0x080156b8

0800c5c0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c5ca:	6839      	ldr	r1, [r7, #0]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f7ff ffa1 	bl	800c514 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c5d2:	6838      	ldr	r0, [r7, #0]
 800c5d4:	f7ff ff76 	bl	800c4c4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c5d8:	bf00      	nop
 800c5da:	3708      	adds	r7, #8
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b086      	sub	sp, #24
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	617b      	str	r3, [r7, #20]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d008      	beq.n	800c60a <pbuf_copy+0x2a>
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d005      	beq.n	800c60a <pbuf_copy+0x2a>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	891a      	ldrh	r2, [r3, #8]
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	891b      	ldrh	r3, [r3, #8]
 800c606:	429a      	cmp	r2, r3
 800c608:	d209      	bcs.n	800c61e <pbuf_copy+0x3e>
 800c60a:	4b57      	ldr	r3, [pc, #348]	; (800c768 <pbuf_copy+0x188>)
 800c60c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c610:	4956      	ldr	r1, [pc, #344]	; (800c76c <pbuf_copy+0x18c>)
 800c612:	4857      	ldr	r0, [pc, #348]	; (800c770 <pbuf_copy+0x190>)
 800c614:	f006 fce8 	bl	8012fe8 <iprintf>
 800c618:	f06f 030f 	mvn.w	r3, #15
 800c61c:	e09f      	b.n	800c75e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	895b      	ldrh	r3, [r3, #10]
 800c622:	461a      	mov	r2, r3
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	1ad2      	subs	r2, r2, r3
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	895b      	ldrh	r3, [r3, #10]
 800c62c:	4619      	mov	r1, r3
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	1acb      	subs	r3, r1, r3
 800c632:	429a      	cmp	r2, r3
 800c634:	d306      	bcc.n	800c644 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	895b      	ldrh	r3, [r3, #10]
 800c63a:	461a      	mov	r2, r3
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	60fb      	str	r3, [r7, #12]
 800c642:	e005      	b.n	800c650 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	895b      	ldrh	r3, [r3, #10]
 800c648:	461a      	mov	r2, r3
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	1ad3      	subs	r3, r2, r3
 800c64e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	685a      	ldr	r2, [r3, #4]
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	18d0      	adds	r0, r2, r3
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	4413      	add	r3, r2
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	4619      	mov	r1, r3
 800c664:	f006 fc90 	bl	8012f88 <memcpy>
    offset_to += len;
 800c668:	697a      	ldr	r2, [r7, #20]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	4413      	add	r3, r2
 800c66e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c670:	693a      	ldr	r2, [r7, #16]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	4413      	add	r3, r2
 800c676:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	895b      	ldrh	r3, [r3, #10]
 800c67c:	461a      	mov	r2, r3
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	4293      	cmp	r3, r2
 800c682:	d906      	bls.n	800c692 <pbuf_copy+0xb2>
 800c684:	4b38      	ldr	r3, [pc, #224]	; (800c768 <pbuf_copy+0x188>)
 800c686:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c68a:	493a      	ldr	r1, [pc, #232]	; (800c774 <pbuf_copy+0x194>)
 800c68c:	4838      	ldr	r0, [pc, #224]	; (800c770 <pbuf_copy+0x190>)
 800c68e:	f006 fcab 	bl	8012fe8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	895b      	ldrh	r3, [r3, #10]
 800c696:	461a      	mov	r2, r3
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d906      	bls.n	800c6ac <pbuf_copy+0xcc>
 800c69e:	4b32      	ldr	r3, [pc, #200]	; (800c768 <pbuf_copy+0x188>)
 800c6a0:	f240 32da 	movw	r2, #986	; 0x3da
 800c6a4:	4934      	ldr	r1, [pc, #208]	; (800c778 <pbuf_copy+0x198>)
 800c6a6:	4832      	ldr	r0, [pc, #200]	; (800c770 <pbuf_copy+0x190>)
 800c6a8:	f006 fc9e 	bl	8012fe8 <iprintf>
    if (offset_from >= p_from->len) {
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	895b      	ldrh	r3, [r3, #10]
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d304      	bcc.n	800c6c2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	895b      	ldrh	r3, [r3, #10]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d114      	bne.n	800c6f8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d10c      	bne.n	800c6f8 <pbuf_copy+0x118>
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d009      	beq.n	800c6f8 <pbuf_copy+0x118>
 800c6e4:	4b20      	ldr	r3, [pc, #128]	; (800c768 <pbuf_copy+0x188>)
 800c6e6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c6ea:	4924      	ldr	r1, [pc, #144]	; (800c77c <pbuf_copy+0x19c>)
 800c6ec:	4820      	ldr	r0, [pc, #128]	; (800c770 <pbuf_copy+0x190>)
 800c6ee:	f006 fc7b 	bl	8012fe8 <iprintf>
 800c6f2:	f06f 030f 	mvn.w	r3, #15
 800c6f6:	e032      	b.n	800c75e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d013      	beq.n	800c726 <pbuf_copy+0x146>
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	895a      	ldrh	r2, [r3, #10]
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	891b      	ldrh	r3, [r3, #8]
 800c706:	429a      	cmp	r2, r3
 800c708:	d10d      	bne.n	800c726 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d009      	beq.n	800c726 <pbuf_copy+0x146>
 800c712:	4b15      	ldr	r3, [pc, #84]	; (800c768 <pbuf_copy+0x188>)
 800c714:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c718:	4919      	ldr	r1, [pc, #100]	; (800c780 <pbuf_copy+0x1a0>)
 800c71a:	4815      	ldr	r0, [pc, #84]	; (800c770 <pbuf_copy+0x190>)
 800c71c:	f006 fc64 	bl	8012fe8 <iprintf>
 800c720:	f06f 0305 	mvn.w	r3, #5
 800c724:	e01b      	b.n	800c75e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d013      	beq.n	800c754 <pbuf_copy+0x174>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	895a      	ldrh	r2, [r3, #10]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	891b      	ldrh	r3, [r3, #8]
 800c734:	429a      	cmp	r2, r3
 800c736:	d10d      	bne.n	800c754 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d009      	beq.n	800c754 <pbuf_copy+0x174>
 800c740:	4b09      	ldr	r3, [pc, #36]	; (800c768 <pbuf_copy+0x188>)
 800c742:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c746:	490e      	ldr	r1, [pc, #56]	; (800c780 <pbuf_copy+0x1a0>)
 800c748:	4809      	ldr	r0, [pc, #36]	; (800c770 <pbuf_copy+0x190>)
 800c74a:	f006 fc4d 	bl	8012fe8 <iprintf>
 800c74e:	f06f 0305 	mvn.w	r3, #5
 800c752:	e004      	b.n	800c75e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	f47f af61 	bne.w	800c61e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3718      	adds	r7, #24
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	08015408 	.word	0x08015408
 800c76c:	08015704 	.word	0x08015704
 800c770:	080154bc 	.word	0x080154bc
 800c774:	08015734 	.word	0x08015734
 800c778:	0801574c 	.word	0x0801574c
 800c77c:	08015768 	.word	0x08015768
 800c780:	08015778 	.word	0x08015778

0800c784 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b088      	sub	sp, #32
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	4611      	mov	r1, r2
 800c790:	461a      	mov	r2, r3
 800c792:	460b      	mov	r3, r1
 800c794:	80fb      	strh	r3, [r7, #6]
 800c796:	4613      	mov	r3, r2
 800c798:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c79a:	2300      	movs	r3, #0
 800c79c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d108      	bne.n	800c7ba <pbuf_copy_partial+0x36>
 800c7a8:	4b2b      	ldr	r3, [pc, #172]	; (800c858 <pbuf_copy_partial+0xd4>)
 800c7aa:	f240 420a 	movw	r2, #1034	; 0x40a
 800c7ae:	492b      	ldr	r1, [pc, #172]	; (800c85c <pbuf_copy_partial+0xd8>)
 800c7b0:	482b      	ldr	r0, [pc, #172]	; (800c860 <pbuf_copy_partial+0xdc>)
 800c7b2:	f006 fc19 	bl	8012fe8 <iprintf>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	e04a      	b.n	800c850 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d108      	bne.n	800c7d2 <pbuf_copy_partial+0x4e>
 800c7c0:	4b25      	ldr	r3, [pc, #148]	; (800c858 <pbuf_copy_partial+0xd4>)
 800c7c2:	f240 420b 	movw	r2, #1035	; 0x40b
 800c7c6:	4927      	ldr	r1, [pc, #156]	; (800c864 <pbuf_copy_partial+0xe0>)
 800c7c8:	4825      	ldr	r0, [pc, #148]	; (800c860 <pbuf_copy_partial+0xdc>)
 800c7ca:	f006 fc0d 	bl	8012fe8 <iprintf>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	e03e      	b.n	800c850 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	61fb      	str	r3, [r7, #28]
 800c7d6:	e034      	b.n	800c842 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c7d8:	88bb      	ldrh	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d00a      	beq.n	800c7f4 <pbuf_copy_partial+0x70>
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	895b      	ldrh	r3, [r3, #10]
 800c7e2:	88ba      	ldrh	r2, [r7, #4]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d305      	bcc.n	800c7f4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	895b      	ldrh	r3, [r3, #10]
 800c7ec:	88ba      	ldrh	r2, [r7, #4]
 800c7ee:	1ad3      	subs	r3, r2, r3
 800c7f0:	80bb      	strh	r3, [r7, #4]
 800c7f2:	e023      	b.n	800c83c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	895a      	ldrh	r2, [r3, #10]
 800c7f8:	88bb      	ldrh	r3, [r7, #4]
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c7fe:	8b3a      	ldrh	r2, [r7, #24]
 800c800:	88fb      	ldrh	r3, [r7, #6]
 800c802:	429a      	cmp	r2, r3
 800c804:	d901      	bls.n	800c80a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c806:	88fb      	ldrh	r3, [r7, #6]
 800c808:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c80a:	8b7b      	ldrh	r3, [r7, #26]
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	18d0      	adds	r0, r2, r3
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	685a      	ldr	r2, [r3, #4]
 800c814:	88bb      	ldrh	r3, [r7, #4]
 800c816:	4413      	add	r3, r2
 800c818:	8b3a      	ldrh	r2, [r7, #24]
 800c81a:	4619      	mov	r1, r3
 800c81c:	f006 fbb4 	bl	8012f88 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c820:	8afa      	ldrh	r2, [r7, #22]
 800c822:	8b3b      	ldrh	r3, [r7, #24]
 800c824:	4413      	add	r3, r2
 800c826:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c828:	8b7a      	ldrh	r2, [r7, #26]
 800c82a:	8b3b      	ldrh	r3, [r7, #24]
 800c82c:	4413      	add	r3, r2
 800c82e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c830:	88fa      	ldrh	r2, [r7, #6]
 800c832:	8b3b      	ldrh	r3, [r7, #24]
 800c834:	1ad3      	subs	r3, r2, r3
 800c836:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c838:	2300      	movs	r3, #0
 800c83a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	61fb      	str	r3, [r7, #28]
 800c842:	88fb      	ldrh	r3, [r7, #6]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d002      	beq.n	800c84e <pbuf_copy_partial+0xca>
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d1c4      	bne.n	800c7d8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c84e:	8afb      	ldrh	r3, [r7, #22]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3720      	adds	r7, #32
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	08015408 	.word	0x08015408
 800c85c:	080157a4 	.word	0x080157a4
 800c860:	080154bc 	.word	0x080154bc
 800c864:	080157c4 	.word	0x080157c4

0800c868 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b088      	sub	sp, #32
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	4613      	mov	r3, r2
 800c874:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800c876:	88fb      	ldrh	r3, [r7, #6]
 800c878:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800c87a:	2300      	movs	r3, #0
 800c87c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d109      	bne.n	800c898 <pbuf_take+0x30>
 800c884:	4b3a      	ldr	r3, [pc, #232]	; (800c970 <pbuf_take+0x108>)
 800c886:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800c88a:	493a      	ldr	r1, [pc, #232]	; (800c974 <pbuf_take+0x10c>)
 800c88c:	483a      	ldr	r0, [pc, #232]	; (800c978 <pbuf_take+0x110>)
 800c88e:	f006 fbab 	bl	8012fe8 <iprintf>
 800c892:	f06f 030f 	mvn.w	r3, #15
 800c896:	e067      	b.n	800c968 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d109      	bne.n	800c8b2 <pbuf_take+0x4a>
 800c89e:	4b34      	ldr	r3, [pc, #208]	; (800c970 <pbuf_take+0x108>)
 800c8a0:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800c8a4:	4935      	ldr	r1, [pc, #212]	; (800c97c <pbuf_take+0x114>)
 800c8a6:	4834      	ldr	r0, [pc, #208]	; (800c978 <pbuf_take+0x110>)
 800c8a8:	f006 fb9e 	bl	8012fe8 <iprintf>
 800c8ac:	f06f 030f 	mvn.w	r3, #15
 800c8b0:	e05a      	b.n	800c968 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	891b      	ldrh	r3, [r3, #8]
 800c8b6:	88fa      	ldrh	r2, [r7, #6]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d909      	bls.n	800c8d0 <pbuf_take+0x68>
 800c8bc:	4b2c      	ldr	r3, [pc, #176]	; (800c970 <pbuf_take+0x108>)
 800c8be:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800c8c2:	492f      	ldr	r1, [pc, #188]	; (800c980 <pbuf_take+0x118>)
 800c8c4:	482c      	ldr	r0, [pc, #176]	; (800c978 <pbuf_take+0x110>)
 800c8c6:	f006 fb8f 	bl	8012fe8 <iprintf>
 800c8ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ce:	e04b      	b.n	800c968 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d007      	beq.n	800c8e6 <pbuf_take+0x7e>
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d004      	beq.n	800c8e6 <pbuf_take+0x7e>
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	891b      	ldrh	r3, [r3, #8]
 800c8e0:	88fa      	ldrh	r2, [r7, #6]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d902      	bls.n	800c8ec <pbuf_take+0x84>
    return ERR_ARG;
 800c8e6:	f06f 030f 	mvn.w	r3, #15
 800c8ea:	e03d      	b.n	800c968 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	61fb      	str	r3, [r7, #28]
 800c8f0:	e028      	b.n	800c944 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d106      	bne.n	800c906 <pbuf_take+0x9e>
 800c8f8:	4b1d      	ldr	r3, [pc, #116]	; (800c970 <pbuf_take+0x108>)
 800c8fa:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800c8fe:	4921      	ldr	r1, [pc, #132]	; (800c984 <pbuf_take+0x11c>)
 800c900:	481d      	ldr	r0, [pc, #116]	; (800c978 <pbuf_take+0x110>)
 800c902:	f006 fb71 	bl	8012fe8 <iprintf>
    buf_copy_len = total_copy_len;
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	895b      	ldrh	r3, [r3, #10]
 800c90e:	461a      	mov	r2, r3
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	4293      	cmp	r3, r2
 800c914:	d902      	bls.n	800c91c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	895b      	ldrh	r3, [r3, #10]
 800c91a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	6858      	ldr	r0, [r3, #4]
 800c920:	68ba      	ldr	r2, [r7, #8]
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	4413      	add	r3, r2
 800c926:	69ba      	ldr	r2, [r7, #24]
 800c928:	4619      	mov	r1, r3
 800c92a:	f006 fb2d 	bl	8012f88 <memcpy>
    total_copy_len -= buf_copy_len;
 800c92e:	697a      	ldr	r2, [r7, #20]
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	1ad3      	subs	r3, r2, r3
 800c934:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800c936:	693a      	ldr	r2, [r7, #16]
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	4413      	add	r3, r2
 800c93c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	61fb      	str	r3, [r7, #28]
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1d3      	bne.n	800c8f2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d103      	bne.n	800c958 <pbuf_take+0xf0>
 800c950:	88fb      	ldrh	r3, [r7, #6]
 800c952:	693a      	ldr	r2, [r7, #16]
 800c954:	429a      	cmp	r2, r3
 800c956:	d006      	beq.n	800c966 <pbuf_take+0xfe>
 800c958:	4b05      	ldr	r3, [pc, #20]	; (800c970 <pbuf_take+0x108>)
 800c95a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800c95e:	490a      	ldr	r1, [pc, #40]	; (800c988 <pbuf_take+0x120>)
 800c960:	4805      	ldr	r0, [pc, #20]	; (800c978 <pbuf_take+0x110>)
 800c962:	f006 fb41 	bl	8012fe8 <iprintf>
  return ERR_OK;
 800c966:	2300      	movs	r3, #0
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3720      	adds	r7, #32
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	08015408 	.word	0x08015408
 800c974:	08015834 	.word	0x08015834
 800c978:	080154bc 	.word	0x080154bc
 800c97c:	0801584c 	.word	0x0801584c
 800c980:	08015868 	.word	0x08015868
 800c984:	08015888 	.word	0x08015888
 800c988:	080158a0 	.word	0x080158a0

0800c98c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	4603      	mov	r3, r0
 800c994:	603a      	str	r2, [r7, #0]
 800c996:	71fb      	strb	r3, [r7, #7]
 800c998:	460b      	mov	r3, r1
 800c99a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	8919      	ldrh	r1, [r3, #8]
 800c9a0:	88ba      	ldrh	r2, [r7, #4]
 800c9a2:	79fb      	ldrb	r3, [r7, #7]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7ff fa03 	bl	800bdb0 <pbuf_alloc>
 800c9aa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d101      	bne.n	800c9b6 <pbuf_clone+0x2a>
    return NULL;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	e011      	b.n	800c9da <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f7ff fe11 	bl	800c5e0 <pbuf_copy>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c9c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d006      	beq.n	800c9d8 <pbuf_clone+0x4c>
 800c9ca:	4b06      	ldr	r3, [pc, #24]	; (800c9e4 <pbuf_clone+0x58>)
 800c9cc:	f240 5224 	movw	r2, #1316	; 0x524
 800c9d0:	4905      	ldr	r1, [pc, #20]	; (800c9e8 <pbuf_clone+0x5c>)
 800c9d2:	4806      	ldr	r0, [pc, #24]	; (800c9ec <pbuf_clone+0x60>)
 800c9d4:	f006 fb08 	bl	8012fe8 <iprintf>
  return q;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	08015408 	.word	0x08015408
 800c9e8:	080158d0 	.word	0x080158d0
 800c9ec:	080154bc 	.word	0x080154bc

0800c9f0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	60bb      	str	r3, [r7, #8]
 800c9fe:	2304      	movs	r3, #4
 800ca00:	60fb      	str	r3, [r7, #12]
 800ca02:	2300      	movs	r3, #0
 800ca04:	613b      	str	r3, [r7, #16]
 800ca06:	2300      	movs	r3, #0
 800ca08:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800ca0a:	f107 0308 	add.w	r3, r7, #8
 800ca0e:	2100      	movs	r1, #0
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7f8 fff9 	bl	8005a08 <osMessageCreate>
 800ca16:	4602      	mov	r2, r0
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d102      	bne.n	800ca2a <sys_mbox_new+0x3a>
    return ERR_MEM;
 800ca24:	f04f 33ff 	mov.w	r3, #4294967295
 800ca28:	e000      	b.n	800ca2c <sys_mbox_new+0x3c>

  return ERR_OK;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3718      	adds	r7, #24
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	6839      	ldr	r1, [r7, #0]
 800ca44:	2200      	movs	r2, #0
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7f9 f806 	bl	8005a58 <osMessagePut>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d102      	bne.n	800ca58 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 800ca52:	2300      	movs	r3, #0
 800ca54:	73fb      	strb	r3, [r7, #15]
 800ca56:	e001      	b.n	800ca5c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 800ca58:	23ff      	movs	r3, #255	; 0xff
 800ca5a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 800ca5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3710      	adds	r7, #16
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b08c      	sub	sp, #48	; 0x30
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	61f8      	str	r0, [r7, #28]
 800ca70:	61b9      	str	r1, [r7, #24]
 800ca72:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800ca74:	f7f8 fe38 	bl	80056e8 <osKernelSysTick>
 800ca78:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d017      	beq.n	800cab0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800ca80:	69fb      	ldr	r3, [r7, #28]
 800ca82:	6819      	ldr	r1, [r3, #0]
 800ca84:	f107 0320 	add.w	r3, r7, #32
 800ca88:	697a      	ldr	r2, [r7, #20]
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7f9 f824 	bl	8005ad8 <osMessageGet>

    if(event.status == osEventMessage)
 800ca90:	6a3b      	ldr	r3, [r7, #32]
 800ca92:	2b10      	cmp	r3, #16
 800ca94:	d109      	bne.n	800caaa <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 800ca96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca98:	461a      	mov	r2, r3
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 800ca9e:	f7f8 fe23 	bl	80056e8 <osKernelSysTick>
 800caa2:	4602      	mov	r2, r0
 800caa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa6:	1ad3      	subs	r3, r2, r3
 800caa8:	e019      	b.n	800cade <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800caaa:	f04f 33ff 	mov.w	r3, #4294967295
 800caae:	e016      	b.n	800cade <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	6819      	ldr	r1, [r3, #0]
 800cab4:	463b      	mov	r3, r7
 800cab6:	f04f 32ff 	mov.w	r2, #4294967295
 800caba:	4618      	mov	r0, r3
 800cabc:	f7f9 f80c 	bl	8005ad8 <osMessageGet>
 800cac0:	f107 0320 	add.w	r3, r7, #32
 800cac4:	463a      	mov	r2, r7
 800cac6:	ca07      	ldmia	r2, {r0, r1, r2}
 800cac8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	461a      	mov	r2, r3
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 800cad4:	f7f8 fe08 	bl	80056e8 <osKernelSysTick>
 800cad8:	4602      	mov	r2, r0
 800cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cadc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3730      	adds	r7, #48	; 0x30
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 800cae6:	b480      	push	{r7}
 800cae8:	b083      	sub	sp, #12
 800caea:	af00      	add	r7, sp, #0
 800caec:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d101      	bne.n	800cafa <sys_mbox_valid+0x14>
    return 0;
 800caf6:	2300      	movs	r3, #0
 800caf8:	e000      	b.n	800cafc <sys_mbox_valid+0x16>
  else
    return 1;
 800cafa:	2301      	movs	r3, #1
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800cb0c:	4803      	ldr	r0, [pc, #12]	; (800cb1c <sys_init+0x14>)
 800cb0e:	f7f8 fe5b 	bl	80057c8 <osMutexCreate>
 800cb12:	4603      	mov	r3, r0
 800cb14:	4a02      	ldr	r2, [pc, #8]	; (800cb20 <sys_init+0x18>)
 800cb16:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800cb18:	bf00      	nop
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	08017584 	.word	0x08017584
 800cb20:	2400748c 	.word	0x2400748c

0800cb24 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	60bb      	str	r3, [r7, #8]
 800cb30:	2300      	movs	r3, #0
 800cb32:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800cb34:	f107 0308 	add.w	r3, r7, #8
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7f8 fe45 	bl	80057c8 <osMutexCreate>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d102      	bne.n	800cb52 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800cb4c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb50:	e000      	b.n	800cb54 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800cb52:	2300      	movs	r3, #0
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3710      	adds	r7, #16
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f04f 31ff 	mov.w	r1, #4294967295
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7f8 fe43 	bl	80057f8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 800cb72:	bf00      	nop
 800cb74:	3708      	adds	r7, #8
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}

0800cb7a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800cb7a:	b580      	push	{r7, lr}
 800cb7c:	b082      	sub	sp, #8
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7f8 fe84 	bl	8005894 <osMutexRelease>
}
 800cb8c:	bf00      	nop
 800cb8e:	3708      	adds	r7, #8
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b08c      	sub	sp, #48	; 0x30
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
 800cba0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800cba2:	f107 0314 	add.w	r3, r7, #20
 800cba6:	2200      	movs	r2, #0
 800cba8:	601a      	str	r2, [r3, #0]
 800cbaa:	605a      	str	r2, [r3, #4]
 800cbac:	609a      	str	r2, [r3, #8]
 800cbae:	60da      	str	r2, [r3, #12]
 800cbb0:	611a      	str	r2, [r3, #16]
 800cbb2:	615a      	str	r2, [r3, #20]
 800cbb4:	619a      	str	r2, [r3, #24]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	617b      	str	r3, [r7, #20]
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	61bb      	str	r3, [r7, #24]
 800cbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc0:	b21b      	sxth	r3, r3
 800cbc2:	83bb      	strh	r3, [r7, #28]
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 800cbc8:	f107 0314 	add.w	r3, r7, #20
 800cbcc:	6879      	ldr	r1, [r7, #4]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7f8 fd9a 	bl	8005708 <osThreadCreate>
 800cbd4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3730      	adds	r7, #48	; 0x30
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
	...

0800cbe0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800cbe4:	4b04      	ldr	r3, [pc, #16]	; (800cbf8 <sys_arch_protect+0x18>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f04f 31ff 	mov.w	r1, #4294967295
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7f8 fe03 	bl	80057f8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 800cbf2:	2301      	movs	r3, #1
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	2400748c 	.word	0x2400748c

0800cbfc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800cc04:	4b04      	ldr	r3, [pc, #16]	; (800cc18 <sys_arch_unprotect+0x1c>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7f8 fe43 	bl	8005894 <osMutexRelease>
}
 800cc0e:	bf00      	nop
 800cc10:	3708      	adds	r7, #8
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
 800cc16:	bf00      	nop
 800cc18:	2400748c 	.word	0x2400748c

0800cc1c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cc20:	f006 f9fa 	bl	8013018 <rand>
 800cc24:	4603      	mov	r3, r0
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cc32:	b29a      	uxth	r2, r3
 800cc34:	4b01      	ldr	r3, [pc, #4]	; (800cc3c <tcp_init+0x20>)
 800cc36:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cc38:	bf00      	nop
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	24000028 	.word	0x24000028

0800cc40 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	7d1b      	ldrb	r3, [r3, #20]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d105      	bne.n	800cc5c <tcp_free+0x1c>
 800cc50:	4b06      	ldr	r3, [pc, #24]	; (800cc6c <tcp_free+0x2c>)
 800cc52:	22d4      	movs	r2, #212	; 0xd4
 800cc54:	4906      	ldr	r1, [pc, #24]	; (800cc70 <tcp_free+0x30>)
 800cc56:	4807      	ldr	r0, [pc, #28]	; (800cc74 <tcp_free+0x34>)
 800cc58:	f006 f9c6 	bl	8012fe8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800cc5c:	6879      	ldr	r1, [r7, #4]
 800cc5e:	2001      	movs	r0, #1
 800cc60:	f7fe fce6 	bl	800b630 <memp_free>
}
 800cc64:	bf00      	nop
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	0801595c 	.word	0x0801595c
 800cc70:	080159e0 	.word	0x080159e0
 800cc74:	080159f4 	.word	0x080159f4

0800cc78 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	7d1b      	ldrb	r3, [r3, #20]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d105      	bne.n	800cc94 <tcp_free_listen+0x1c>
 800cc88:	4b06      	ldr	r3, [pc, #24]	; (800cca4 <tcp_free_listen+0x2c>)
 800cc8a:	22df      	movs	r2, #223	; 0xdf
 800cc8c:	4906      	ldr	r1, [pc, #24]	; (800cca8 <tcp_free_listen+0x30>)
 800cc8e:	4807      	ldr	r0, [pc, #28]	; (800ccac <tcp_free_listen+0x34>)
 800cc90:	f006 f9aa 	bl	8012fe8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cc94:	6879      	ldr	r1, [r7, #4]
 800cc96:	2002      	movs	r0, #2
 800cc98:	f7fe fcca 	bl	800b630 <memp_free>
}
 800cc9c:	bf00      	nop
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	0801595c 	.word	0x0801595c
 800cca8:	08015a1c 	.word	0x08015a1c
 800ccac:	080159f4 	.word	0x080159f4

0800ccb0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ccb4:	f000 fea2 	bl	800d9fc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ccb8:	4b07      	ldr	r3, [pc, #28]	; (800ccd8 <tcp_tmr+0x28>)
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	b2da      	uxtb	r2, r3
 800ccc0:	4b05      	ldr	r3, [pc, #20]	; (800ccd8 <tcp_tmr+0x28>)
 800ccc2:	701a      	strb	r2, [r3, #0]
 800ccc4:	4b04      	ldr	r3, [pc, #16]	; (800ccd8 <tcp_tmr+0x28>)
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	f003 0301 	and.w	r3, r3, #1
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d001      	beq.n	800ccd4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ccd0:	f000 fb54 	bl	800d37c <tcp_slowtmr>
  }
}
 800ccd4:	bf00      	nop
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	240074a5 	.word	0x240074a5

0800ccdc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d105      	bne.n	800ccf8 <tcp_remove_listener+0x1c>
 800ccec:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <tcp_remove_listener+0x48>)
 800ccee:	22ff      	movs	r2, #255	; 0xff
 800ccf0:	490d      	ldr	r1, [pc, #52]	; (800cd28 <tcp_remove_listener+0x4c>)
 800ccf2:	480e      	ldr	r0, [pc, #56]	; (800cd2c <tcp_remove_listener+0x50>)
 800ccf4:	f006 f978 	bl	8012fe8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	60fb      	str	r3, [r7, #12]
 800ccfc:	e00a      	b.n	800cd14 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd02:	683a      	ldr	r2, [r7, #0]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d102      	bne.n	800cd0e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	60fb      	str	r3, [r7, #12]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1f1      	bne.n	800ccfe <tcp_remove_listener+0x22>
    }
  }
}
 800cd1a:	bf00      	nop
 800cd1c:	bf00      	nop
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	0801595c 	.word	0x0801595c
 800cd28:	08015a38 	.word	0x08015a38
 800cd2c:	080159f4 	.word	0x080159f4

0800cd30 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d106      	bne.n	800cd4c <tcp_listen_closed+0x1c>
 800cd3e:	4b14      	ldr	r3, [pc, #80]	; (800cd90 <tcp_listen_closed+0x60>)
 800cd40:	f240 1211 	movw	r2, #273	; 0x111
 800cd44:	4913      	ldr	r1, [pc, #76]	; (800cd94 <tcp_listen_closed+0x64>)
 800cd46:	4814      	ldr	r0, [pc, #80]	; (800cd98 <tcp_listen_closed+0x68>)
 800cd48:	f006 f94e 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	7d1b      	ldrb	r3, [r3, #20]
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d006      	beq.n	800cd62 <tcp_listen_closed+0x32>
 800cd54:	4b0e      	ldr	r3, [pc, #56]	; (800cd90 <tcp_listen_closed+0x60>)
 800cd56:	f44f 7289 	mov.w	r2, #274	; 0x112
 800cd5a:	4910      	ldr	r1, [pc, #64]	; (800cd9c <tcp_listen_closed+0x6c>)
 800cd5c:	480e      	ldr	r0, [pc, #56]	; (800cd98 <tcp_listen_closed+0x68>)
 800cd5e:	f006 f943 	bl	8012fe8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cd62:	2301      	movs	r3, #1
 800cd64:	60fb      	str	r3, [r7, #12]
 800cd66:	e00b      	b.n	800cd80 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cd68:	4a0d      	ldr	r2, [pc, #52]	; (800cda0 <tcp_listen_closed+0x70>)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	6879      	ldr	r1, [r7, #4]
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7ff ffb1 	bl	800ccdc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	60fb      	str	r3, [r7, #12]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2b03      	cmp	r3, #3
 800cd84:	d9f0      	bls.n	800cd68 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cd86:	bf00      	nop
 800cd88:	bf00      	nop
 800cd8a:	3710      	adds	r7, #16
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	0801595c 	.word	0x0801595c
 800cd94:	08015a60 	.word	0x08015a60
 800cd98:	080159f4 	.word	0x080159f4
 800cd9c:	08015a6c 	.word	0x08015a6c
 800cda0:	080175a4 	.word	0x080175a4

0800cda4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cda4:	b5b0      	push	{r4, r5, r7, lr}
 800cda6:	b088      	sub	sp, #32
 800cda8:	af04      	add	r7, sp, #16
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	460b      	mov	r3, r1
 800cdae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d106      	bne.n	800cdc4 <tcp_close_shutdown+0x20>
 800cdb6:	4b63      	ldr	r3, [pc, #396]	; (800cf44 <tcp_close_shutdown+0x1a0>)
 800cdb8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800cdbc:	4962      	ldr	r1, [pc, #392]	; (800cf48 <tcp_close_shutdown+0x1a4>)
 800cdbe:	4863      	ldr	r0, [pc, #396]	; (800cf4c <tcp_close_shutdown+0x1a8>)
 800cdc0:	f006 f912 	bl	8012fe8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cdc4:	78fb      	ldrb	r3, [r7, #3]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d066      	beq.n	800ce98 <tcp_close_shutdown+0xf4>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	7d1b      	ldrb	r3, [r3, #20]
 800cdce:	2b04      	cmp	r3, #4
 800cdd0:	d003      	beq.n	800cdda <tcp_close_shutdown+0x36>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	7d1b      	ldrb	r3, [r3, #20]
 800cdd6:	2b07      	cmp	r3, #7
 800cdd8:	d15e      	bne.n	800ce98 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d104      	bne.n	800cdec <tcp_close_shutdown+0x48>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cde6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cdea:	d055      	beq.n	800ce98 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	8b5b      	ldrh	r3, [r3, #26]
 800cdf0:	f003 0310 	and.w	r3, r3, #16
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d106      	bne.n	800ce06 <tcp_close_shutdown+0x62>
 800cdf8:	4b52      	ldr	r3, [pc, #328]	; (800cf44 <tcp_close_shutdown+0x1a0>)
 800cdfa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800cdfe:	4954      	ldr	r1, [pc, #336]	; (800cf50 <tcp_close_shutdown+0x1ac>)
 800ce00:	4852      	ldr	r0, [pc, #328]	; (800cf4c <tcp_close_shutdown+0x1a8>)
 800ce02:	f006 f8f1 	bl	8012fe8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ce0e:	687d      	ldr	r5, [r7, #4]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	3304      	adds	r3, #4
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	8ad2      	ldrh	r2, [r2, #22]
 800ce18:	6879      	ldr	r1, [r7, #4]
 800ce1a:	8b09      	ldrh	r1, [r1, #24]
 800ce1c:	9102      	str	r1, [sp, #8]
 800ce1e:	9201      	str	r2, [sp, #4]
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	462b      	mov	r3, r5
 800ce24:	4622      	mov	r2, r4
 800ce26:	4601      	mov	r1, r0
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f004 fe91 	bl	8011b50 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f001 f8c6 	bl	800dfc0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ce34:	4b47      	ldr	r3, [pc, #284]	; (800cf54 <tcp_close_shutdown+0x1b0>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d105      	bne.n	800ce4a <tcp_close_shutdown+0xa6>
 800ce3e:	4b45      	ldr	r3, [pc, #276]	; (800cf54 <tcp_close_shutdown+0x1b0>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	4a43      	ldr	r2, [pc, #268]	; (800cf54 <tcp_close_shutdown+0x1b0>)
 800ce46:	6013      	str	r3, [r2, #0]
 800ce48:	e013      	b.n	800ce72 <tcp_close_shutdown+0xce>
 800ce4a:	4b42      	ldr	r3, [pc, #264]	; (800cf54 <tcp_close_shutdown+0x1b0>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	60fb      	str	r3, [r7, #12]
 800ce50:	e00c      	b.n	800ce6c <tcp_close_shutdown+0xc8>
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	68db      	ldr	r3, [r3, #12]
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d104      	bne.n	800ce66 <tcp_close_shutdown+0xc2>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	68da      	ldr	r2, [r3, #12]
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	60da      	str	r2, [r3, #12]
 800ce64:	e005      	b.n	800ce72 <tcp_close_shutdown+0xce>
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	60fb      	str	r3, [r7, #12]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d1ef      	bne.n	800ce52 <tcp_close_shutdown+0xae>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	60da      	str	r2, [r3, #12]
 800ce78:	4b37      	ldr	r3, [pc, #220]	; (800cf58 <tcp_close_shutdown+0x1b4>)
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ce7e:	4b37      	ldr	r3, [pc, #220]	; (800cf5c <tcp_close_shutdown+0x1b8>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d102      	bne.n	800ce8e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ce88:	f003 fd5e 	bl	8010948 <tcp_trigger_input_pcb_close>
 800ce8c:	e002      	b.n	800ce94 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f7ff fed6 	bl	800cc40 <tcp_free>
      }
      return ERR_OK;
 800ce94:	2300      	movs	r3, #0
 800ce96:	e050      	b.n	800cf3a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	7d1b      	ldrb	r3, [r3, #20]
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	d03b      	beq.n	800cf18 <tcp_close_shutdown+0x174>
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	dc44      	bgt.n	800cf2e <tcp_close_shutdown+0x18a>
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d002      	beq.n	800ceae <tcp_close_shutdown+0x10a>
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d02a      	beq.n	800cf02 <tcp_close_shutdown+0x15e>
 800ceac:	e03f      	b.n	800cf2e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	8adb      	ldrh	r3, [r3, #22]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d021      	beq.n	800cefa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ceb6:	4b2a      	ldr	r3, [pc, #168]	; (800cf60 <tcp_close_shutdown+0x1bc>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d105      	bne.n	800cecc <tcp_close_shutdown+0x128>
 800cec0:	4b27      	ldr	r3, [pc, #156]	; (800cf60 <tcp_close_shutdown+0x1bc>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	4a26      	ldr	r2, [pc, #152]	; (800cf60 <tcp_close_shutdown+0x1bc>)
 800cec8:	6013      	str	r3, [r2, #0]
 800ceca:	e013      	b.n	800cef4 <tcp_close_shutdown+0x150>
 800cecc:	4b24      	ldr	r3, [pc, #144]	; (800cf60 <tcp_close_shutdown+0x1bc>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	60bb      	str	r3, [r7, #8]
 800ced2:	e00c      	b.n	800ceee <tcp_close_shutdown+0x14a>
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d104      	bne.n	800cee8 <tcp_close_shutdown+0x144>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	68da      	ldr	r2, [r3, #12]
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	60da      	str	r2, [r3, #12]
 800cee6:	e005      	b.n	800cef4 <tcp_close_shutdown+0x150>
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	60bb      	str	r3, [r7, #8]
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1ef      	bne.n	800ced4 <tcp_close_shutdown+0x130>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2200      	movs	r2, #0
 800cef8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f7ff fea0 	bl	800cc40 <tcp_free>
      break;
 800cf00:	e01a      	b.n	800cf38 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7ff ff14 	bl	800cd30 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cf08:	6879      	ldr	r1, [r7, #4]
 800cf0a:	4816      	ldr	r0, [pc, #88]	; (800cf64 <tcp_close_shutdown+0x1c0>)
 800cf0c:	f001 f8a8 	bl	800e060 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f7ff feb1 	bl	800cc78 <tcp_free_listen>
      break;
 800cf16:	e00f      	b.n	800cf38 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cf18:	6879      	ldr	r1, [r7, #4]
 800cf1a:	480e      	ldr	r0, [pc, #56]	; (800cf54 <tcp_close_shutdown+0x1b0>)
 800cf1c:	f001 f8a0 	bl	800e060 <tcp_pcb_remove>
 800cf20:	4b0d      	ldr	r3, [pc, #52]	; (800cf58 <tcp_close_shutdown+0x1b4>)
 800cf22:	2201      	movs	r2, #1
 800cf24:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f7ff fe8a 	bl	800cc40 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cf2c:	e004      	b.n	800cf38 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 f81a 	bl	800cf68 <tcp_close_shutdown_fin>
 800cf34:	4603      	mov	r3, r0
 800cf36:	e000      	b.n	800cf3a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3710      	adds	r7, #16
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bdb0      	pop	{r4, r5, r7, pc}
 800cf42:	bf00      	nop
 800cf44:	0801595c 	.word	0x0801595c
 800cf48:	08015a84 	.word	0x08015a84
 800cf4c:	080159f4 	.word	0x080159f4
 800cf50:	08015aa4 	.word	0x08015aa4
 800cf54:	2400749c 	.word	0x2400749c
 800cf58:	240074a4 	.word	0x240074a4
 800cf5c:	240074dc 	.word	0x240074dc
 800cf60:	24007494 	.word	0x24007494
 800cf64:	24007498 	.word	0x24007498

0800cf68 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d106      	bne.n	800cf84 <tcp_close_shutdown_fin+0x1c>
 800cf76:	4b2e      	ldr	r3, [pc, #184]	; (800d030 <tcp_close_shutdown_fin+0xc8>)
 800cf78:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cf7c:	492d      	ldr	r1, [pc, #180]	; (800d034 <tcp_close_shutdown_fin+0xcc>)
 800cf7e:	482e      	ldr	r0, [pc, #184]	; (800d038 <tcp_close_shutdown_fin+0xd0>)
 800cf80:	f006 f832 	bl	8012fe8 <iprintf>

  switch (pcb->state) {
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	7d1b      	ldrb	r3, [r3, #20]
 800cf88:	2b07      	cmp	r3, #7
 800cf8a:	d020      	beq.n	800cfce <tcp_close_shutdown_fin+0x66>
 800cf8c:	2b07      	cmp	r3, #7
 800cf8e:	dc2b      	bgt.n	800cfe8 <tcp_close_shutdown_fin+0x80>
 800cf90:	2b03      	cmp	r3, #3
 800cf92:	d002      	beq.n	800cf9a <tcp_close_shutdown_fin+0x32>
 800cf94:	2b04      	cmp	r3, #4
 800cf96:	d00d      	beq.n	800cfb4 <tcp_close_shutdown_fin+0x4c>
 800cf98:	e026      	b.n	800cfe8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f003 fee6 	bl	8010d6c <tcp_send_fin>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cfa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d11f      	bne.n	800cfec <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2205      	movs	r2, #5
 800cfb0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cfb2:	e01b      	b.n	800cfec <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f003 fed9 	bl	8010d6c <tcp_send_fin>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cfbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d114      	bne.n	800cff0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2205      	movs	r2, #5
 800cfca:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cfcc:	e010      	b.n	800cff0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f003 fecc 	bl	8010d6c <tcp_send_fin>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cfd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d109      	bne.n	800cff4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2209      	movs	r2, #9
 800cfe4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cfe6:	e005      	b.n	800cff4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	e01c      	b.n	800d026 <tcp_close_shutdown_fin+0xbe>
      break;
 800cfec:	bf00      	nop
 800cfee:	e002      	b.n	800cff6 <tcp_close_shutdown_fin+0x8e>
      break;
 800cff0:	bf00      	nop
 800cff2:	e000      	b.n	800cff6 <tcp_close_shutdown_fin+0x8e>
      break;
 800cff4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d103      	bne.n	800d006 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f003 fff2 	bl	8010fe8 <tcp_output>
 800d004:	e00d      	b.n	800d022 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d00e:	d108      	bne.n	800d022 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	8b5b      	ldrh	r3, [r3, #26]
 800d014:	f043 0308 	orr.w	r3, r3, #8
 800d018:	b29a      	uxth	r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d01e:	2300      	movs	r3, #0
 800d020:	e001      	b.n	800d026 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d022:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d026:	4618      	mov	r0, r3
 800d028:	3710      	adds	r7, #16
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	0801595c 	.word	0x0801595c
 800d034:	08015a60 	.word	0x08015a60
 800d038:	080159f4 	.word	0x080159f4

0800d03c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d109      	bne.n	800d05e <tcp_close+0x22>
 800d04a:	4b0f      	ldr	r3, [pc, #60]	; (800d088 <tcp_close+0x4c>)
 800d04c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d050:	490e      	ldr	r1, [pc, #56]	; (800d08c <tcp_close+0x50>)
 800d052:	480f      	ldr	r0, [pc, #60]	; (800d090 <tcp_close+0x54>)
 800d054:	f005 ffc8 	bl	8012fe8 <iprintf>
 800d058:	f06f 030f 	mvn.w	r3, #15
 800d05c:	e00f      	b.n	800d07e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	7d1b      	ldrb	r3, [r3, #20]
 800d062:	2b01      	cmp	r3, #1
 800d064:	d006      	beq.n	800d074 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	8b5b      	ldrh	r3, [r3, #26]
 800d06a:	f043 0310 	orr.w	r3, r3, #16
 800d06e:	b29a      	uxth	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d074:	2101      	movs	r1, #1
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7ff fe94 	bl	800cda4 <tcp_close_shutdown>
 800d07c:	4603      	mov	r3, r0
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	0801595c 	.word	0x0801595c
 800d08c:	08015ac0 	.word	0x08015ac0
 800d090:	080159f4 	.word	0x080159f4

0800d094 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b08e      	sub	sp, #56	; 0x38
 800d098:	af04      	add	r7, sp, #16
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d107      	bne.n	800d0b4 <tcp_abandon+0x20>
 800d0a4:	4b52      	ldr	r3, [pc, #328]	; (800d1f0 <tcp_abandon+0x15c>)
 800d0a6:	f240 223d 	movw	r2, #573	; 0x23d
 800d0aa:	4952      	ldr	r1, [pc, #328]	; (800d1f4 <tcp_abandon+0x160>)
 800d0ac:	4852      	ldr	r0, [pc, #328]	; (800d1f8 <tcp_abandon+0x164>)
 800d0ae:	f005 ff9b 	bl	8012fe8 <iprintf>
 800d0b2:	e099      	b.n	800d1e8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	7d1b      	ldrb	r3, [r3, #20]
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d106      	bne.n	800d0ca <tcp_abandon+0x36>
 800d0bc:	4b4c      	ldr	r3, [pc, #304]	; (800d1f0 <tcp_abandon+0x15c>)
 800d0be:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d0c2:	494e      	ldr	r1, [pc, #312]	; (800d1fc <tcp_abandon+0x168>)
 800d0c4:	484c      	ldr	r0, [pc, #304]	; (800d1f8 <tcp_abandon+0x164>)
 800d0c6:	f005 ff8f 	bl	8012fe8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	7d1b      	ldrb	r3, [r3, #20]
 800d0ce:	2b0a      	cmp	r3, #10
 800d0d0:	d107      	bne.n	800d0e2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d0d2:	6879      	ldr	r1, [r7, #4]
 800d0d4:	484a      	ldr	r0, [pc, #296]	; (800d200 <tcp_abandon+0x16c>)
 800d0d6:	f000 ffc3 	bl	800e060 <tcp_pcb_remove>
    tcp_free(pcb);
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f7ff fdb0 	bl	800cc40 <tcp_free>
 800d0e0:	e082      	b.n	800d1e8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0ee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0fc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	691b      	ldr	r3, [r3, #16]
 800d102:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	7d1b      	ldrb	r3, [r3, #20]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d126      	bne.n	800d15a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	8adb      	ldrh	r3, [r3, #22]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d02e      	beq.n	800d172 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d114:	4b3b      	ldr	r3, [pc, #236]	; (800d204 <tcp_abandon+0x170>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d105      	bne.n	800d12a <tcp_abandon+0x96>
 800d11e:	4b39      	ldr	r3, [pc, #228]	; (800d204 <tcp_abandon+0x170>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	4a37      	ldr	r2, [pc, #220]	; (800d204 <tcp_abandon+0x170>)
 800d126:	6013      	str	r3, [r2, #0]
 800d128:	e013      	b.n	800d152 <tcp_abandon+0xbe>
 800d12a:	4b36      	ldr	r3, [pc, #216]	; (800d204 <tcp_abandon+0x170>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	61fb      	str	r3, [r7, #28]
 800d130:	e00c      	b.n	800d14c <tcp_abandon+0xb8>
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d104      	bne.n	800d146 <tcp_abandon+0xb2>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	68da      	ldr	r2, [r3, #12]
 800d140:	69fb      	ldr	r3, [r7, #28]
 800d142:	60da      	str	r2, [r3, #12]
 800d144:	e005      	b.n	800d152 <tcp_abandon+0xbe>
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	61fb      	str	r3, [r7, #28]
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1ef      	bne.n	800d132 <tcp_abandon+0x9e>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	60da      	str	r2, [r3, #12]
 800d158:	e00b      	b.n	800d172 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	8adb      	ldrh	r3, [r3, #22]
 800d162:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d164:	6879      	ldr	r1, [r7, #4]
 800d166:	4828      	ldr	r0, [pc, #160]	; (800d208 <tcp_abandon+0x174>)
 800d168:	f000 ff7a 	bl	800e060 <tcp_pcb_remove>
 800d16c:	4b27      	ldr	r3, [pc, #156]	; (800d20c <tcp_abandon+0x178>)
 800d16e:	2201      	movs	r2, #1
 800d170:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d176:	2b00      	cmp	r3, #0
 800d178:	d004      	beq.n	800d184 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d17e:	4618      	mov	r0, r3
 800d180:	f000 fd1c 	bl	800dbbc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d004      	beq.n	800d196 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d190:	4618      	mov	r0, r3
 800d192:	f000 fd13 	bl	800dbbc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d004      	beq.n	800d1a8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f000 fd0a 	bl	800dbbc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d00e      	beq.n	800d1cc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d1ae:	6879      	ldr	r1, [r7, #4]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	3304      	adds	r3, #4
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	8b12      	ldrh	r2, [r2, #24]
 800d1b8:	9202      	str	r2, [sp, #8]
 800d1ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d1bc:	9201      	str	r2, [sp, #4]
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	697a      	ldr	r2, [r7, #20]
 800d1c4:	69b9      	ldr	r1, [r7, #24]
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f004 fcc2 	bl	8011b50 <tcp_rst>
    }
    last_state = pcb->state;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	7d1b      	ldrb	r3, [r3, #20]
 800d1d0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f7ff fd34 	bl	800cc40 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d004      	beq.n	800d1e8 <tcp_abandon+0x154>
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	f06f 010c 	mvn.w	r1, #12
 800d1e4:	68f8      	ldr	r0, [r7, #12]
 800d1e6:	4798      	blx	r3
  }
}
 800d1e8:	3728      	adds	r7, #40	; 0x28
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	0801595c 	.word	0x0801595c
 800d1f4:	08015af4 	.word	0x08015af4
 800d1f8:	080159f4 	.word	0x080159f4
 800d1fc:	08015b10 	.word	0x08015b10
 800d200:	240074a0 	.word	0x240074a0
 800d204:	24007494 	.word	0x24007494
 800d208:	2400749c 	.word	0x2400749c
 800d20c:	240074a4 	.word	0x240074a4

0800d210 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d218:	2101      	movs	r1, #1
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f7ff ff3a 	bl	800d094 <tcp_abandon>
}
 800d220:	bf00      	nop
 800d222:	3708      	adds	r7, #8
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d106      	bne.n	800d244 <tcp_update_rcv_ann_wnd+0x1c>
 800d236:	4b25      	ldr	r3, [pc, #148]	; (800d2cc <tcp_update_rcv_ann_wnd+0xa4>)
 800d238:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d23c:	4924      	ldr	r1, [pc, #144]	; (800d2d0 <tcp_update_rcv_ann_wnd+0xa8>)
 800d23e:	4825      	ldr	r0, [pc, #148]	; (800d2d4 <tcp_update_rcv_ann_wnd+0xac>)
 800d240:	f005 fed2 	bl	8012fe8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d24c:	4413      	add	r3, r2
 800d24e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d258:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d25c:	bf28      	it	cs
 800d25e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d262:	b292      	uxth	r2, r2
 800d264:	4413      	add	r3, r2
 800d266:	68fa      	ldr	r2, [r7, #12]
 800d268:	1ad3      	subs	r3, r2, r3
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	db08      	blt.n	800d280 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d27a:	68fa      	ldr	r2, [r7, #12]
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	e020      	b.n	800d2c2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d288:	1ad3      	subs	r3, r2, r3
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	dd03      	ble.n	800d296 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2200      	movs	r2, #0
 800d292:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d294:	e014      	b.n	800d2c0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29e:	1ad3      	subs	r3, r2, r3
 800d2a0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2a8:	d306      	bcc.n	800d2b8 <tcp_update_rcv_ann_wnd+0x90>
 800d2aa:	4b08      	ldr	r3, [pc, #32]	; (800d2cc <tcp_update_rcv_ann_wnd+0xa4>)
 800d2ac:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d2b0:	4909      	ldr	r1, [pc, #36]	; (800d2d8 <tcp_update_rcv_ann_wnd+0xb0>)
 800d2b2:	4808      	ldr	r0, [pc, #32]	; (800d2d4 <tcp_update_rcv_ann_wnd+0xac>)
 800d2b4:	f005 fe98 	bl	8012fe8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	b29a      	uxth	r2, r3
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d2c0:	2300      	movs	r3, #0
  }
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	0801595c 	.word	0x0801595c
 800d2d0:	08015c0c 	.word	0x08015c0c
 800d2d4:	080159f4 	.word	0x080159f4
 800d2d8:	08015c30 	.word	0x08015c30

0800d2dc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d107      	bne.n	800d2fe <tcp_recved+0x22>
 800d2ee:	4b1f      	ldr	r3, [pc, #124]	; (800d36c <tcp_recved+0x90>)
 800d2f0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d2f4:	491e      	ldr	r1, [pc, #120]	; (800d370 <tcp_recved+0x94>)
 800d2f6:	481f      	ldr	r0, [pc, #124]	; (800d374 <tcp_recved+0x98>)
 800d2f8:	f005 fe76 	bl	8012fe8 <iprintf>
 800d2fc:	e032      	b.n	800d364 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	7d1b      	ldrb	r3, [r3, #20]
 800d302:	2b01      	cmp	r3, #1
 800d304:	d106      	bne.n	800d314 <tcp_recved+0x38>
 800d306:	4b19      	ldr	r3, [pc, #100]	; (800d36c <tcp_recved+0x90>)
 800d308:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d30c:	491a      	ldr	r1, [pc, #104]	; (800d378 <tcp_recved+0x9c>)
 800d30e:	4819      	ldr	r0, [pc, #100]	; (800d374 <tcp_recved+0x98>)
 800d310:	f005 fe6a 	bl	8012fe8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d318:	887b      	ldrh	r3, [r7, #2]
 800d31a:	4413      	add	r3, r2
 800d31c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d31e:	89fb      	ldrh	r3, [r7, #14]
 800d320:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d324:	d804      	bhi.n	800d330 <tcp_recved+0x54>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d32a:	89fa      	ldrh	r2, [r7, #14]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d204      	bcs.n	800d33a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d336:	851a      	strh	r2, [r3, #40]	; 0x28
 800d338:	e002      	b.n	800d340 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	89fa      	ldrh	r2, [r7, #14]
 800d33e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f7ff ff71 	bl	800d228 <tcp_update_rcv_ann_wnd>
 800d346:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d34e:	d309      	bcc.n	800d364 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	8b5b      	ldrh	r3, [r3, #26]
 800d354:	f043 0302 	orr.w	r3, r3, #2
 800d358:	b29a      	uxth	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f003 fe42 	bl	8010fe8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d364:	3710      	adds	r7, #16
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	0801595c 	.word	0x0801595c
 800d370:	08015c4c 	.word	0x08015c4c
 800d374:	080159f4 	.word	0x080159f4
 800d378:	08015c64 	.word	0x08015c64

0800d37c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d37c:	b5b0      	push	{r4, r5, r7, lr}
 800d37e:	b090      	sub	sp, #64	; 0x40
 800d380:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d382:	2300      	movs	r3, #0
 800d384:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d388:	4b94      	ldr	r3, [pc, #592]	; (800d5dc <tcp_slowtmr+0x260>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	3301      	adds	r3, #1
 800d38e:	4a93      	ldr	r2, [pc, #588]	; (800d5dc <tcp_slowtmr+0x260>)
 800d390:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d392:	4b93      	ldr	r3, [pc, #588]	; (800d5e0 <tcp_slowtmr+0x264>)
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	3301      	adds	r3, #1
 800d398:	b2da      	uxtb	r2, r3
 800d39a:	4b91      	ldr	r3, [pc, #580]	; (800d5e0 <tcp_slowtmr+0x264>)
 800d39c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d3a2:	4b90      	ldr	r3, [pc, #576]	; (800d5e4 <tcp_slowtmr+0x268>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d3a8:	e29d      	b.n	800d8e6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ac:	7d1b      	ldrb	r3, [r3, #20]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d106      	bne.n	800d3c0 <tcp_slowtmr+0x44>
 800d3b2:	4b8d      	ldr	r3, [pc, #564]	; (800d5e8 <tcp_slowtmr+0x26c>)
 800d3b4:	f240 42be 	movw	r2, #1214	; 0x4be
 800d3b8:	498c      	ldr	r1, [pc, #560]	; (800d5ec <tcp_slowtmr+0x270>)
 800d3ba:	488d      	ldr	r0, [pc, #564]	; (800d5f0 <tcp_slowtmr+0x274>)
 800d3bc:	f005 fe14 	bl	8012fe8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	7d1b      	ldrb	r3, [r3, #20]
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d106      	bne.n	800d3d6 <tcp_slowtmr+0x5a>
 800d3c8:	4b87      	ldr	r3, [pc, #540]	; (800d5e8 <tcp_slowtmr+0x26c>)
 800d3ca:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d3ce:	4989      	ldr	r1, [pc, #548]	; (800d5f4 <tcp_slowtmr+0x278>)
 800d3d0:	4887      	ldr	r0, [pc, #540]	; (800d5f0 <tcp_slowtmr+0x274>)
 800d3d2:	f005 fe09 	bl	8012fe8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d8:	7d1b      	ldrb	r3, [r3, #20]
 800d3da:	2b0a      	cmp	r3, #10
 800d3dc:	d106      	bne.n	800d3ec <tcp_slowtmr+0x70>
 800d3de:	4b82      	ldr	r3, [pc, #520]	; (800d5e8 <tcp_slowtmr+0x26c>)
 800d3e0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d3e4:	4984      	ldr	r1, [pc, #528]	; (800d5f8 <tcp_slowtmr+0x27c>)
 800d3e6:	4882      	ldr	r0, [pc, #520]	; (800d5f0 <tcp_slowtmr+0x274>)
 800d3e8:	f005 fdfe 	bl	8012fe8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ee:	7f9a      	ldrb	r2, [r3, #30]
 800d3f0:	4b7b      	ldr	r3, [pc, #492]	; (800d5e0 <tcp_slowtmr+0x264>)
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d105      	bne.n	800d404 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fe:	68db      	ldr	r3, [r3, #12]
 800d400:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d402:	e270      	b.n	800d8e6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d404:	4b76      	ldr	r3, [pc, #472]	; (800d5e0 <tcp_slowtmr+0x264>)
 800d406:	781a      	ldrb	r2, [r3, #0]
 800d408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d40c:	2300      	movs	r3, #0
 800d40e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d412:	2300      	movs	r3, #0
 800d414:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41a:	7d1b      	ldrb	r3, [r3, #20]
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	d10a      	bne.n	800d436 <tcp_slowtmr+0xba>
 800d420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d422:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d426:	2b05      	cmp	r3, #5
 800d428:	d905      	bls.n	800d436 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d42a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d42e:	3301      	adds	r3, #1
 800d430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d434:	e11e      	b.n	800d674 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d438:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d43c:	2b0b      	cmp	r3, #11
 800d43e:	d905      	bls.n	800d44c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d444:	3301      	adds	r3, #1
 800d446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d44a:	e113      	b.n	800d674 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d452:	2b00      	cmp	r3, #0
 800d454:	d075      	beq.n	800d542 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d006      	beq.n	800d46c <tcp_slowtmr+0xf0>
 800d45e:	4b62      	ldr	r3, [pc, #392]	; (800d5e8 <tcp_slowtmr+0x26c>)
 800d460:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d464:	4965      	ldr	r1, [pc, #404]	; (800d5fc <tcp_slowtmr+0x280>)
 800d466:	4862      	ldr	r0, [pc, #392]	; (800d5f0 <tcp_slowtmr+0x274>)
 800d468:	f005 fdbe 	bl	8012fe8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d470:	2b00      	cmp	r3, #0
 800d472:	d106      	bne.n	800d482 <tcp_slowtmr+0x106>
 800d474:	4b5c      	ldr	r3, [pc, #368]	; (800d5e8 <tcp_slowtmr+0x26c>)
 800d476:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d47a:	4961      	ldr	r1, [pc, #388]	; (800d600 <tcp_slowtmr+0x284>)
 800d47c:	485c      	ldr	r0, [pc, #368]	; (800d5f0 <tcp_slowtmr+0x274>)
 800d47e:	f005 fdb3 	bl	8012fe8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d484:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d488:	2b0b      	cmp	r3, #11
 800d48a:	d905      	bls.n	800d498 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d490:	3301      	adds	r3, #1
 800d492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d496:	e0ed      	b.n	800d674 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d49e:	3b01      	subs	r3, #1
 800d4a0:	4a58      	ldr	r2, [pc, #352]	; (800d604 <tcp_slowtmr+0x288>)
 800d4a2:	5cd3      	ldrb	r3, [r2, r3]
 800d4a4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d4ac:	7c7a      	ldrb	r2, [r7, #17]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d907      	bls.n	800d4c2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	b2da      	uxtb	r2, r3
 800d4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d4c8:	7c7a      	ldrb	r2, [r7, #17]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	f200 80d2 	bhi.w	800d674 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d108      	bne.n	800d4f0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d4de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4e0:	f004 fc2a 	bl	8011d38 <tcp_zero_window_probe>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d014      	beq.n	800d514 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	623b      	str	r3, [r7, #32]
 800d4ee:	e011      	b.n	800d514 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4fa:	f003 faef 	bl	8010adc <tcp_split_unsent_seg>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d107      	bne.n	800d514 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d506:	f003 fd6f 	bl	8010fe8 <tcp_output>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d101      	bne.n	800d514 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d510:	2300      	movs	r3, #0
 800d512:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d514:	6a3b      	ldr	r3, [r7, #32]
 800d516:	2b00      	cmp	r3, #0
 800d518:	f000 80ac 	beq.w	800d674 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51e:	2200      	movs	r2, #0
 800d520:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d526:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d52a:	2b06      	cmp	r3, #6
 800d52c:	f200 80a2 	bhi.w	800d674 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d532:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d536:	3301      	adds	r3, #1
 800d538:	b2da      	uxtb	r2, r3
 800d53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d540:	e098      	b.n	800d674 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d544:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d548:	2b00      	cmp	r3, #0
 800d54a:	db0f      	blt.n	800d56c <tcp_slowtmr+0x1f0>
 800d54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d552:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d556:	4293      	cmp	r3, r2
 800d558:	d008      	beq.n	800d56c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d560:	b29b      	uxth	r3, r3
 800d562:	3301      	adds	r3, #1
 800d564:	b29b      	uxth	r3, r3
 800d566:	b21a      	sxth	r2, r3
 800d568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d574:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d578:	429a      	cmp	r2, r3
 800d57a:	db7b      	blt.n	800d674 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d57c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d57e:	f004 f825 	bl	80115cc <tcp_rexmit_rto_prepare>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d007      	beq.n	800d598 <tcp_slowtmr+0x21c>
 800d588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d171      	bne.n	800d674 <tcp_slowtmr+0x2f8>
 800d590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d594:	2b00      	cmp	r3, #0
 800d596:	d06d      	beq.n	800d674 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59a:	7d1b      	ldrb	r3, [r3, #20]
 800d59c:	2b02      	cmp	r3, #2
 800d59e:	d03a      	beq.n	800d616 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d5a6:	2b0c      	cmp	r3, #12
 800d5a8:	bf28      	it	cs
 800d5aa:	230c      	movcs	r3, #12
 800d5ac:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d5b4:	10db      	asrs	r3, r3, #3
 800d5b6:	b21b      	sxth	r3, r3
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d5c0:	4413      	add	r3, r2
 800d5c2:	7efa      	ldrb	r2, [r7, #27]
 800d5c4:	4910      	ldr	r1, [pc, #64]	; (800d608 <tcp_slowtmr+0x28c>)
 800d5c6:	5c8a      	ldrb	r2, [r1, r2]
 800d5c8:	4093      	lsls	r3, r2
 800d5ca:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	dc1a      	bgt.n	800d60c <tcp_slowtmr+0x290>
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	b21a      	sxth	r2, r3
 800d5da:	e019      	b.n	800d610 <tcp_slowtmr+0x294>
 800d5dc:	24007490 	.word	0x24007490
 800d5e0:	240074a6 	.word	0x240074a6
 800d5e4:	2400749c 	.word	0x2400749c
 800d5e8:	0801595c 	.word	0x0801595c
 800d5ec:	08015cf4 	.word	0x08015cf4
 800d5f0:	080159f4 	.word	0x080159f4
 800d5f4:	08015d20 	.word	0x08015d20
 800d5f8:	08015d4c 	.word	0x08015d4c
 800d5fc:	08015d7c 	.word	0x08015d7c
 800d600:	08015db0 	.word	0x08015db0
 800d604:	0801759c 	.word	0x0801759c
 800d608:	0801758c 	.word	0x0801758c
 800d60c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d612:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d618:	2200      	movs	r2, #0
 800d61a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d624:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d628:	4293      	cmp	r3, r2
 800d62a:	bf28      	it	cs
 800d62c:	4613      	movcs	r3, r2
 800d62e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d630:	8a7b      	ldrh	r3, [r7, #18]
 800d632:	085b      	lsrs	r3, r3, #1
 800d634:	b29a      	uxth	r2, r3
 800d636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d638:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d644:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d646:	005b      	lsls	r3, r3, #1
 800d648:	b29b      	uxth	r3, r3
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d206      	bcs.n	800d65c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d652:	005b      	lsls	r3, r3, #1
 800d654:	b29a      	uxth	r2, r3
 800d656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d658:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d662:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d668:	2200      	movs	r2, #0
 800d66a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d66e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d670:	f004 f81c 	bl	80116ac <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d676:	7d1b      	ldrb	r3, [r3, #20]
 800d678:	2b06      	cmp	r3, #6
 800d67a:	d111      	bne.n	800d6a0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67e:	8b5b      	ldrh	r3, [r3, #26]
 800d680:	f003 0310 	and.w	r3, r3, #16
 800d684:	2b00      	cmp	r3, #0
 800d686:	d00b      	beq.n	800d6a0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d688:	4b9c      	ldr	r3, [pc, #624]	; (800d8fc <tcp_slowtmr+0x580>)
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68e:	6a1b      	ldr	r3, [r3, #32]
 800d690:	1ad3      	subs	r3, r2, r3
 800d692:	2b28      	cmp	r3, #40	; 0x28
 800d694:	d904      	bls.n	800d6a0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d69a:	3301      	adds	r3, #1
 800d69c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a2:	7a5b      	ldrb	r3, [r3, #9]
 800d6a4:	f003 0308 	and.w	r3, r3, #8
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d04a      	beq.n	800d742 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ae:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d6b0:	2b04      	cmp	r3, #4
 800d6b2:	d003      	beq.n	800d6bc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d6b8:	2b07      	cmp	r3, #7
 800d6ba:	d142      	bne.n	800d742 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6bc:	4b8f      	ldr	r3, [pc, #572]	; (800d8fc <tcp_slowtmr+0x580>)
 800d6be:	681a      	ldr	r2, [r3, #0]
 800d6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c2:	6a1b      	ldr	r3, [r3, #32]
 800d6c4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d6cc:	4b8c      	ldr	r3, [pc, #560]	; (800d900 <tcp_slowtmr+0x584>)
 800d6ce:	440b      	add	r3, r1
 800d6d0:	498c      	ldr	r1, [pc, #560]	; (800d904 <tcp_slowtmr+0x588>)
 800d6d2:	fba1 1303 	umull	r1, r3, r1, r3
 800d6d6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d90a      	bls.n	800d6f2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d6dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d6e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d6f0:	e027      	b.n	800d742 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6f2:	4b82      	ldr	r3, [pc, #520]	; (800d8fc <tcp_slowtmr+0x580>)
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f8:	6a1b      	ldr	r3, [r3, #32]
 800d6fa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6fe:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d704:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d708:	4618      	mov	r0, r3
 800d70a:	4b7f      	ldr	r3, [pc, #508]	; (800d908 <tcp_slowtmr+0x58c>)
 800d70c:	fb00 f303 	mul.w	r3, r0, r3
 800d710:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d712:	497c      	ldr	r1, [pc, #496]	; (800d904 <tcp_slowtmr+0x588>)
 800d714:	fba1 1303 	umull	r1, r3, r1, r3
 800d718:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d911      	bls.n	800d742 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d71e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d720:	f004 faca 	bl	8011cb8 <tcp_keepalive>
 800d724:	4603      	mov	r3, r0
 800d726:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d72a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d107      	bne.n	800d742 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d734:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d738:	3301      	adds	r3, #1
 800d73a:	b2da      	uxtb	r2, r3
 800d73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d746:	2b00      	cmp	r3, #0
 800d748:	d011      	beq.n	800d76e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d74a:	4b6c      	ldr	r3, [pc, #432]	; (800d8fc <tcp_slowtmr+0x580>)
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d750:	6a1b      	ldr	r3, [r3, #32]
 800d752:	1ad2      	subs	r2, r2, r3
 800d754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d756:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d75a:	4619      	mov	r1, r3
 800d75c:	460b      	mov	r3, r1
 800d75e:	005b      	lsls	r3, r3, #1
 800d760:	440b      	add	r3, r1
 800d762:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d764:	429a      	cmp	r2, r3
 800d766:	d302      	bcc.n	800d76e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d768:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d76a:	f000 fddd 	bl	800e328 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d770:	7d1b      	ldrb	r3, [r3, #20]
 800d772:	2b03      	cmp	r3, #3
 800d774:	d10b      	bne.n	800d78e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d776:	4b61      	ldr	r3, [pc, #388]	; (800d8fc <tcp_slowtmr+0x580>)
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77c:	6a1b      	ldr	r3, [r3, #32]
 800d77e:	1ad3      	subs	r3, r2, r3
 800d780:	2b28      	cmp	r3, #40	; 0x28
 800d782:	d904      	bls.n	800d78e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d788:	3301      	adds	r3, #1
 800d78a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d790:	7d1b      	ldrb	r3, [r3, #20]
 800d792:	2b09      	cmp	r3, #9
 800d794:	d10b      	bne.n	800d7ae <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d796:	4b59      	ldr	r3, [pc, #356]	; (800d8fc <tcp_slowtmr+0x580>)
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79c:	6a1b      	ldr	r3, [r3, #32]
 800d79e:	1ad3      	subs	r3, r2, r3
 800d7a0:	2bf0      	cmp	r3, #240	; 0xf0
 800d7a2:	d904      	bls.n	800d7ae <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d7a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d7ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d060      	beq.n	800d878 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7bc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d7be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7c0:	f000 fbfe 	bl	800dfc0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d010      	beq.n	800d7ec <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d7ca:	4b50      	ldr	r3, [pc, #320]	; (800d90c <tcp_slowtmr+0x590>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d106      	bne.n	800d7e2 <tcp_slowtmr+0x466>
 800d7d4:	4b4e      	ldr	r3, [pc, #312]	; (800d910 <tcp_slowtmr+0x594>)
 800d7d6:	f240 526d 	movw	r2, #1389	; 0x56d
 800d7da:	494e      	ldr	r1, [pc, #312]	; (800d914 <tcp_slowtmr+0x598>)
 800d7dc:	484e      	ldr	r0, [pc, #312]	; (800d918 <tcp_slowtmr+0x59c>)
 800d7de:	f005 fc03 	bl	8012fe8 <iprintf>
        prev->next = pcb->next;
 800d7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e4:	68da      	ldr	r2, [r3, #12]
 800d7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e8:	60da      	str	r2, [r3, #12]
 800d7ea:	e00f      	b.n	800d80c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d7ec:	4b47      	ldr	r3, [pc, #284]	; (800d90c <tcp_slowtmr+0x590>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d006      	beq.n	800d804 <tcp_slowtmr+0x488>
 800d7f6:	4b46      	ldr	r3, [pc, #280]	; (800d910 <tcp_slowtmr+0x594>)
 800d7f8:	f240 5271 	movw	r2, #1393	; 0x571
 800d7fc:	4947      	ldr	r1, [pc, #284]	; (800d91c <tcp_slowtmr+0x5a0>)
 800d7fe:	4846      	ldr	r0, [pc, #280]	; (800d918 <tcp_slowtmr+0x59c>)
 800d800:	f005 fbf2 	bl	8012fe8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d806:	68db      	ldr	r3, [r3, #12]
 800d808:	4a40      	ldr	r2, [pc, #256]	; (800d90c <tcp_slowtmr+0x590>)
 800d80a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d80c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d810:	2b00      	cmp	r3, #0
 800d812:	d013      	beq.n	800d83c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d816:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d81c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d820:	3304      	adds	r3, #4
 800d822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d824:	8ad2      	ldrh	r2, [r2, #22]
 800d826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d828:	8b09      	ldrh	r1, [r1, #24]
 800d82a:	9102      	str	r1, [sp, #8]
 800d82c:	9201      	str	r2, [sp, #4]
 800d82e:	9300      	str	r3, [sp, #0]
 800d830:	462b      	mov	r3, r5
 800d832:	4622      	mov	r2, r4
 800d834:	4601      	mov	r1, r0
 800d836:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d838:	f004 f98a 	bl	8011b50 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83e:	691b      	ldr	r3, [r3, #16]
 800d840:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d844:	7d1b      	ldrb	r3, [r3, #20]
 800d846:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d852:	6838      	ldr	r0, [r7, #0]
 800d854:	f7ff f9f4 	bl	800cc40 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d858:	4b31      	ldr	r3, [pc, #196]	; (800d920 <tcp_slowtmr+0x5a4>)
 800d85a:	2200      	movs	r2, #0
 800d85c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d004      	beq.n	800d86e <tcp_slowtmr+0x4f2>
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f06f 010c 	mvn.w	r1, #12
 800d86a:	68b8      	ldr	r0, [r7, #8]
 800d86c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d86e:	4b2c      	ldr	r3, [pc, #176]	; (800d920 <tcp_slowtmr+0x5a4>)
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d037      	beq.n	800d8e6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d876:	e592      	b.n	800d39e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87e:	68db      	ldr	r3, [r3, #12]
 800d880:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d884:	7f1b      	ldrb	r3, [r3, #28]
 800d886:	3301      	adds	r3, #1
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d890:	7f1a      	ldrb	r2, [r3, #28]
 800d892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d894:	7f5b      	ldrb	r3, [r3, #29]
 800d896:	429a      	cmp	r2, r3
 800d898:	d325      	bcc.n	800d8e6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89c:	2200      	movs	r2, #0
 800d89e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d8a0:	4b1f      	ldr	r3, [pc, #124]	; (800d920 <tcp_slowtmr+0x5a4>)
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d00b      	beq.n	800d8c8 <tcp_slowtmr+0x54c>
 800d8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8b8:	6912      	ldr	r2, [r2, #16]
 800d8ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8bc:	4610      	mov	r0, r2
 800d8be:	4798      	blx	r3
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d8c6:	e002      	b.n	800d8ce <tcp_slowtmr+0x552>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d8ce:	4b14      	ldr	r3, [pc, #80]	; (800d920 <tcp_slowtmr+0x5a4>)
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d000      	beq.n	800d8d8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d8d6:	e562      	b.n	800d39e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d8d8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d102      	bne.n	800d8e6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d8e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8e2:	f003 fb81 	bl	8010fe8 <tcp_output>
  while (pcb != NULL) {
 800d8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f47f ad5e 	bne.w	800d3aa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d8f2:	4b0c      	ldr	r3, [pc, #48]	; (800d924 <tcp_slowtmr+0x5a8>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d8f8:	e069      	b.n	800d9ce <tcp_slowtmr+0x652>
 800d8fa:	bf00      	nop
 800d8fc:	24007490 	.word	0x24007490
 800d900:	000a4cb8 	.word	0x000a4cb8
 800d904:	10624dd3 	.word	0x10624dd3
 800d908:	000124f8 	.word	0x000124f8
 800d90c:	2400749c 	.word	0x2400749c
 800d910:	0801595c 	.word	0x0801595c
 800d914:	08015de8 	.word	0x08015de8
 800d918:	080159f4 	.word	0x080159f4
 800d91c:	08015e14 	.word	0x08015e14
 800d920:	240074a4 	.word	0x240074a4
 800d924:	240074a0 	.word	0x240074a0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92a:	7d1b      	ldrb	r3, [r3, #20]
 800d92c:	2b0a      	cmp	r3, #10
 800d92e:	d006      	beq.n	800d93e <tcp_slowtmr+0x5c2>
 800d930:	4b2b      	ldr	r3, [pc, #172]	; (800d9e0 <tcp_slowtmr+0x664>)
 800d932:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d936:	492b      	ldr	r1, [pc, #172]	; (800d9e4 <tcp_slowtmr+0x668>)
 800d938:	482b      	ldr	r0, [pc, #172]	; (800d9e8 <tcp_slowtmr+0x66c>)
 800d93a:	f005 fb55 	bl	8012fe8 <iprintf>
    pcb_remove = 0;
 800d93e:	2300      	movs	r3, #0
 800d940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d944:	4b29      	ldr	r3, [pc, #164]	; (800d9ec <tcp_slowtmr+0x670>)
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94a:	6a1b      	ldr	r3, [r3, #32]
 800d94c:	1ad3      	subs	r3, r2, r3
 800d94e:	2bf0      	cmp	r3, #240	; 0xf0
 800d950:	d904      	bls.n	800d95c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d956:	3301      	adds	r3, #1
 800d958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d95c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d960:	2b00      	cmp	r3, #0
 800d962:	d02f      	beq.n	800d9c4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d966:	f000 fb2b 	bl	800dfc0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d010      	beq.n	800d992 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d970:	4b1f      	ldr	r3, [pc, #124]	; (800d9f0 <tcp_slowtmr+0x674>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d976:	429a      	cmp	r2, r3
 800d978:	d106      	bne.n	800d988 <tcp_slowtmr+0x60c>
 800d97a:	4b19      	ldr	r3, [pc, #100]	; (800d9e0 <tcp_slowtmr+0x664>)
 800d97c:	f240 52af 	movw	r2, #1455	; 0x5af
 800d980:	491c      	ldr	r1, [pc, #112]	; (800d9f4 <tcp_slowtmr+0x678>)
 800d982:	4819      	ldr	r0, [pc, #100]	; (800d9e8 <tcp_slowtmr+0x66c>)
 800d984:	f005 fb30 	bl	8012fe8 <iprintf>
        prev->next = pcb->next;
 800d988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98a:	68da      	ldr	r2, [r3, #12]
 800d98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98e:	60da      	str	r2, [r3, #12]
 800d990:	e00f      	b.n	800d9b2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d992:	4b17      	ldr	r3, [pc, #92]	; (800d9f0 <tcp_slowtmr+0x674>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d998:	429a      	cmp	r2, r3
 800d99a:	d006      	beq.n	800d9aa <tcp_slowtmr+0x62e>
 800d99c:	4b10      	ldr	r3, [pc, #64]	; (800d9e0 <tcp_slowtmr+0x664>)
 800d99e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d9a2:	4915      	ldr	r1, [pc, #84]	; (800d9f8 <tcp_slowtmr+0x67c>)
 800d9a4:	4810      	ldr	r0, [pc, #64]	; (800d9e8 <tcp_slowtmr+0x66c>)
 800d9a6:	f005 fb1f 	bl	8012fe8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	4a10      	ldr	r2, [pc, #64]	; (800d9f0 <tcp_slowtmr+0x674>)
 800d9b0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d9bc:	69f8      	ldr	r0, [r7, #28]
 800d9be:	f7ff f93f 	bl	800cc40 <tcp_free>
 800d9c2:	e004      	b.n	800d9ce <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d1a9      	bne.n	800d928 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d9d4:	bf00      	nop
 800d9d6:	bf00      	nop
 800d9d8:	3730      	adds	r7, #48	; 0x30
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bdb0      	pop	{r4, r5, r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	0801595c 	.word	0x0801595c
 800d9e4:	08015e40 	.word	0x08015e40
 800d9e8:	080159f4 	.word	0x080159f4
 800d9ec:	24007490 	.word	0x24007490
 800d9f0:	240074a0 	.word	0x240074a0
 800d9f4:	08015e70 	.word	0x08015e70
 800d9f8:	08015e98 	.word	0x08015e98

0800d9fc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800da02:	4b2d      	ldr	r3, [pc, #180]	; (800dab8 <tcp_fasttmr+0xbc>)
 800da04:	781b      	ldrb	r3, [r3, #0]
 800da06:	3301      	adds	r3, #1
 800da08:	b2da      	uxtb	r2, r3
 800da0a:	4b2b      	ldr	r3, [pc, #172]	; (800dab8 <tcp_fasttmr+0xbc>)
 800da0c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800da0e:	4b2b      	ldr	r3, [pc, #172]	; (800dabc <tcp_fasttmr+0xc0>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800da14:	e048      	b.n	800daa8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	7f9a      	ldrb	r2, [r3, #30]
 800da1a:	4b27      	ldr	r3, [pc, #156]	; (800dab8 <tcp_fasttmr+0xbc>)
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d03f      	beq.n	800daa2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800da22:	4b25      	ldr	r3, [pc, #148]	; (800dab8 <tcp_fasttmr+0xbc>)
 800da24:	781a      	ldrb	r2, [r3, #0]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	8b5b      	ldrh	r3, [r3, #26]
 800da2e:	f003 0301 	and.w	r3, r3, #1
 800da32:	2b00      	cmp	r3, #0
 800da34:	d010      	beq.n	800da58 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	8b5b      	ldrh	r3, [r3, #26]
 800da3a:	f043 0302 	orr.w	r3, r3, #2
 800da3e:	b29a      	uxth	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f003 facf 	bl	8010fe8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	8b5b      	ldrh	r3, [r3, #26]
 800da4e:	f023 0303 	bic.w	r3, r3, #3
 800da52:	b29a      	uxth	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	8b5b      	ldrh	r3, [r3, #26]
 800da5c:	f003 0308 	and.w	r3, r3, #8
 800da60:	2b00      	cmp	r3, #0
 800da62:	d009      	beq.n	800da78 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	8b5b      	ldrh	r3, [r3, #26]
 800da68:	f023 0308 	bic.w	r3, r3, #8
 800da6c:	b29a      	uxth	r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f7ff fa78 	bl	800cf68 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da82:	2b00      	cmp	r3, #0
 800da84:	d00a      	beq.n	800da9c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800da86:	4b0e      	ldr	r3, [pc, #56]	; (800dac0 <tcp_fasttmr+0xc4>)
 800da88:	2200      	movs	r2, #0
 800da8a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 f819 	bl	800dac4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800da92:	4b0b      	ldr	r3, [pc, #44]	; (800dac0 <tcp_fasttmr+0xc4>)
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d000      	beq.n	800da9c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800da9a:	e7b8      	b.n	800da0e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	607b      	str	r3, [r7, #4]
 800daa0:	e002      	b.n	800daa8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	68db      	ldr	r3, [r3, #12]
 800daa6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d1b3      	bne.n	800da16 <tcp_fasttmr+0x1a>
    }
  }
}
 800daae:	bf00      	nop
 800dab0:	bf00      	nop
 800dab2:	3708      	adds	r7, #8
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	240074a6 	.word	0x240074a6
 800dabc:	2400749c 	.word	0x2400749c
 800dac0:	240074a4 	.word	0x240074a4

0800dac4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800dac4:	b590      	push	{r4, r7, lr}
 800dac6:	b085      	sub	sp, #20
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d109      	bne.n	800dae6 <tcp_process_refused_data+0x22>
 800dad2:	4b37      	ldr	r3, [pc, #220]	; (800dbb0 <tcp_process_refused_data+0xec>)
 800dad4:	f240 6209 	movw	r2, #1545	; 0x609
 800dad8:	4936      	ldr	r1, [pc, #216]	; (800dbb4 <tcp_process_refused_data+0xf0>)
 800dada:	4837      	ldr	r0, [pc, #220]	; (800dbb8 <tcp_process_refused_data+0xf4>)
 800dadc:	f005 fa84 	bl	8012fe8 <iprintf>
 800dae0:	f06f 030f 	mvn.w	r3, #15
 800dae4:	e060      	b.n	800dba8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800daea:	7b5b      	ldrb	r3, [r3, #13]
 800daec:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800daf2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2200      	movs	r2, #0
 800daf8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db00:	2b00      	cmp	r3, #0
 800db02:	d00b      	beq.n	800db1c <tcp_process_refused_data+0x58>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6918      	ldr	r0, [r3, #16]
 800db0e:	2300      	movs	r3, #0
 800db10:	68ba      	ldr	r2, [r7, #8]
 800db12:	6879      	ldr	r1, [r7, #4]
 800db14:	47a0      	blx	r4
 800db16:	4603      	mov	r3, r0
 800db18:	73fb      	strb	r3, [r7, #15]
 800db1a:	e007      	b.n	800db2c <tcp_process_refused_data+0x68>
 800db1c:	2300      	movs	r3, #0
 800db1e:	68ba      	ldr	r2, [r7, #8]
 800db20:	6879      	ldr	r1, [r7, #4]
 800db22:	2000      	movs	r0, #0
 800db24:	f000 f8a4 	bl	800dc70 <tcp_recv_null>
 800db28:	4603      	mov	r3, r0
 800db2a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800db2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d12a      	bne.n	800db8a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800db34:	7bbb      	ldrb	r3, [r7, #14]
 800db36:	f003 0320 	and.w	r3, r3, #32
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d033      	beq.n	800dba6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db42:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800db46:	d005      	beq.n	800db54 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db4c:	3301      	adds	r3, #1
 800db4e:	b29a      	uxth	r2, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d00b      	beq.n	800db76 <tcp_process_refused_data+0xb2>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6918      	ldr	r0, [r3, #16]
 800db68:	2300      	movs	r3, #0
 800db6a:	2200      	movs	r2, #0
 800db6c:	6879      	ldr	r1, [r7, #4]
 800db6e:	47a0      	blx	r4
 800db70:	4603      	mov	r3, r0
 800db72:	73fb      	strb	r3, [r7, #15]
 800db74:	e001      	b.n	800db7a <tcp_process_refused_data+0xb6>
 800db76:	2300      	movs	r3, #0
 800db78:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800db7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db7e:	f113 0f0d 	cmn.w	r3, #13
 800db82:	d110      	bne.n	800dba6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800db84:	f06f 030c 	mvn.w	r3, #12
 800db88:	e00e      	b.n	800dba8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800db8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db8e:	f113 0f0d 	cmn.w	r3, #13
 800db92:	d102      	bne.n	800db9a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800db94:	f06f 030c 	mvn.w	r3, #12
 800db98:	e006      	b.n	800dba8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	68ba      	ldr	r2, [r7, #8]
 800db9e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800dba0:	f06f 0304 	mvn.w	r3, #4
 800dba4:	e000      	b.n	800dba8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800dba6:	2300      	movs	r3, #0
}
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3714      	adds	r7, #20
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd90      	pop	{r4, r7, pc}
 800dbb0:	0801595c 	.word	0x0801595c
 800dbb4:	08015ec0 	.word	0x08015ec0
 800dbb8:	080159f4 	.word	0x080159f4

0800dbbc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b084      	sub	sp, #16
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800dbc4:	e007      	b.n	800dbd6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f000 f80a 	bl	800dbe6 <tcp_seg_free>
    seg = next;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d1f4      	bne.n	800dbc6 <tcp_segs_free+0xa>
  }
}
 800dbdc:	bf00      	nop
 800dbde:	bf00      	nop
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b082      	sub	sp, #8
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00c      	beq.n	800dc0e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d004      	beq.n	800dc06 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7fe fbb9 	bl	800c378 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dc06:	6879      	ldr	r1, [r7, #4]
 800dc08:	2003      	movs	r0, #3
 800dc0a:	f7fd fd11 	bl	800b630 <memp_free>
  }
}
 800dc0e:	bf00      	nop
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
	...

0800dc18 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d106      	bne.n	800dc34 <tcp_seg_copy+0x1c>
 800dc26:	4b0f      	ldr	r3, [pc, #60]	; (800dc64 <tcp_seg_copy+0x4c>)
 800dc28:	f240 6282 	movw	r2, #1666	; 0x682
 800dc2c:	490e      	ldr	r1, [pc, #56]	; (800dc68 <tcp_seg_copy+0x50>)
 800dc2e:	480f      	ldr	r0, [pc, #60]	; (800dc6c <tcp_seg_copy+0x54>)
 800dc30:	f005 f9da 	bl	8012fe8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dc34:	2003      	movs	r0, #3
 800dc36:	f7fd fc85 	bl	800b544 <memp_malloc>
 800dc3a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d101      	bne.n	800dc46 <tcp_seg_copy+0x2e>
    return NULL;
 800dc42:	2300      	movs	r3, #0
 800dc44:	e00a      	b.n	800dc5c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800dc46:	2210      	movs	r2, #16
 800dc48:	6879      	ldr	r1, [r7, #4]
 800dc4a:	68f8      	ldr	r0, [r7, #12]
 800dc4c:	f005 f99c 	bl	8012f88 <memcpy>
  pbuf_ref(cseg->p);
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7fe fc35 	bl	800c4c4 <pbuf_ref>
  return cseg;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	0801595c 	.word	0x0801595c
 800dc68:	08015f04 	.word	0x08015f04
 800dc6c:	080159f4 	.word	0x080159f4

0800dc70 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	60f8      	str	r0, [r7, #12]
 800dc78:	60b9      	str	r1, [r7, #8]
 800dc7a:	607a      	str	r2, [r7, #4]
 800dc7c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d109      	bne.n	800dc98 <tcp_recv_null+0x28>
 800dc84:	4b12      	ldr	r3, [pc, #72]	; (800dcd0 <tcp_recv_null+0x60>)
 800dc86:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dc8a:	4912      	ldr	r1, [pc, #72]	; (800dcd4 <tcp_recv_null+0x64>)
 800dc8c:	4812      	ldr	r0, [pc, #72]	; (800dcd8 <tcp_recv_null+0x68>)
 800dc8e:	f005 f9ab 	bl	8012fe8 <iprintf>
 800dc92:	f06f 030f 	mvn.w	r3, #15
 800dc96:	e016      	b.n	800dcc6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d009      	beq.n	800dcb2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	891b      	ldrh	r3, [r3, #8]
 800dca2:	4619      	mov	r1, r3
 800dca4:	68b8      	ldr	r0, [r7, #8]
 800dca6:	f7ff fb19 	bl	800d2dc <tcp_recved>
    pbuf_free(p);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f7fe fb64 	bl	800c378 <pbuf_free>
 800dcb0:	e008      	b.n	800dcc4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800dcb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d104      	bne.n	800dcc4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800dcba:	68b8      	ldr	r0, [r7, #8]
 800dcbc:	f7ff f9be 	bl	800d03c <tcp_close>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	e000      	b.n	800dcc6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	0801595c 	.word	0x0801595c
 800dcd4:	08015f20 	.word	0x08015f20
 800dcd8:	080159f4 	.word	0x080159f4

0800dcdc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	4603      	mov	r3, r0
 800dce4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	db01      	blt.n	800dcf2 <tcp_kill_prio+0x16>
 800dcee:	79fb      	ldrb	r3, [r7, #7]
 800dcf0:	e000      	b.n	800dcf4 <tcp_kill_prio+0x18>
 800dcf2:	237f      	movs	r3, #127	; 0x7f
 800dcf4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dcf6:	7afb      	ldrb	r3, [r7, #11]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d034      	beq.n	800dd66 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dcfc:	7afb      	ldrb	r3, [r7, #11]
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dd02:	2300      	movs	r3, #0
 800dd04:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dd06:	2300      	movs	r3, #0
 800dd08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd0a:	4b19      	ldr	r3, [pc, #100]	; (800dd70 <tcp_kill_prio+0x94>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	617b      	str	r3, [r7, #20]
 800dd10:	e01f      	b.n	800dd52 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	7d5b      	ldrb	r3, [r3, #21]
 800dd16:	7afa      	ldrb	r2, [r7, #11]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d80c      	bhi.n	800dd36 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dd20:	7afa      	ldrb	r2, [r7, #11]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d112      	bne.n	800dd4c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dd26:	4b13      	ldr	r3, [pc, #76]	; (800dd74 <tcp_kill_prio+0x98>)
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	6a1b      	ldr	r3, [r3, #32]
 800dd2e:	1ad3      	subs	r3, r2, r3
 800dd30:	68fa      	ldr	r2, [r7, #12]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d80a      	bhi.n	800dd4c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dd36:	4b0f      	ldr	r3, [pc, #60]	; (800dd74 <tcp_kill_prio+0x98>)
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	6a1b      	ldr	r3, [r3, #32]
 800dd3e:	1ad3      	subs	r3, r2, r3
 800dd40:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	7d5b      	ldrb	r3, [r3, #21]
 800dd4a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	617b      	str	r3, [r7, #20]
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d1dc      	bne.n	800dd12 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d004      	beq.n	800dd68 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dd5e:	6938      	ldr	r0, [r7, #16]
 800dd60:	f7ff fa56 	bl	800d210 <tcp_abort>
 800dd64:	e000      	b.n	800dd68 <tcp_kill_prio+0x8c>
    return;
 800dd66:	bf00      	nop
  }
}
 800dd68:	3718      	adds	r7, #24
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	2400749c 	.word	0x2400749c
 800dd74:	24007490 	.word	0x24007490

0800dd78 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b086      	sub	sp, #24
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	4603      	mov	r3, r0
 800dd80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dd82:	79fb      	ldrb	r3, [r7, #7]
 800dd84:	2b08      	cmp	r3, #8
 800dd86:	d009      	beq.n	800dd9c <tcp_kill_state+0x24>
 800dd88:	79fb      	ldrb	r3, [r7, #7]
 800dd8a:	2b09      	cmp	r3, #9
 800dd8c:	d006      	beq.n	800dd9c <tcp_kill_state+0x24>
 800dd8e:	4b1a      	ldr	r3, [pc, #104]	; (800ddf8 <tcp_kill_state+0x80>)
 800dd90:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800dd94:	4919      	ldr	r1, [pc, #100]	; (800ddfc <tcp_kill_state+0x84>)
 800dd96:	481a      	ldr	r0, [pc, #104]	; (800de00 <tcp_kill_state+0x88>)
 800dd98:	f005 f926 	bl	8012fe8 <iprintf>

  inactivity = 0;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dda0:	2300      	movs	r3, #0
 800dda2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dda4:	4b17      	ldr	r3, [pc, #92]	; (800de04 <tcp_kill_state+0x8c>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	617b      	str	r3, [r7, #20]
 800ddaa:	e017      	b.n	800dddc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	7d1b      	ldrb	r3, [r3, #20]
 800ddb0:	79fa      	ldrb	r2, [r7, #7]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d10f      	bne.n	800ddd6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ddb6:	4b14      	ldr	r3, [pc, #80]	; (800de08 <tcp_kill_state+0x90>)
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	6a1b      	ldr	r3, [r3, #32]
 800ddbe:	1ad3      	subs	r3, r2, r3
 800ddc0:	68fa      	ldr	r2, [r7, #12]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d807      	bhi.n	800ddd6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ddc6:	4b10      	ldr	r3, [pc, #64]	; (800de08 <tcp_kill_state+0x90>)
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	6a1b      	ldr	r3, [r3, #32]
 800ddce:	1ad3      	subs	r3, r2, r3
 800ddd0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	68db      	ldr	r3, [r3, #12]
 800ddda:	617b      	str	r3, [r7, #20]
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d1e4      	bne.n	800ddac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d003      	beq.n	800ddf0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800dde8:	2100      	movs	r1, #0
 800ddea:	6938      	ldr	r0, [r7, #16]
 800ddec:	f7ff f952 	bl	800d094 <tcp_abandon>
  }
}
 800ddf0:	bf00      	nop
 800ddf2:	3718      	adds	r7, #24
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	0801595c 	.word	0x0801595c
 800ddfc:	08015f3c 	.word	0x08015f3c
 800de00:	080159f4 	.word	0x080159f4
 800de04:	2400749c 	.word	0x2400749c
 800de08:	24007490 	.word	0x24007490

0800de0c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800de12:	2300      	movs	r3, #0
 800de14:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800de16:	2300      	movs	r3, #0
 800de18:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de1a:	4b12      	ldr	r3, [pc, #72]	; (800de64 <tcp_kill_timewait+0x58>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	60fb      	str	r3, [r7, #12]
 800de20:	e012      	b.n	800de48 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800de22:	4b11      	ldr	r3, [pc, #68]	; (800de68 <tcp_kill_timewait+0x5c>)
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6a1b      	ldr	r3, [r3, #32]
 800de2a:	1ad3      	subs	r3, r2, r3
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d807      	bhi.n	800de42 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800de32:	4b0d      	ldr	r3, [pc, #52]	; (800de68 <tcp_kill_timewait+0x5c>)
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6a1b      	ldr	r3, [r3, #32]
 800de3a:	1ad3      	subs	r3, r2, r3
 800de3c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	60fb      	str	r3, [r7, #12]
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1e9      	bne.n	800de22 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d002      	beq.n	800de5a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800de54:	68b8      	ldr	r0, [r7, #8]
 800de56:	f7ff f9db 	bl	800d210 <tcp_abort>
  }
}
 800de5a:	bf00      	nop
 800de5c:	3710      	adds	r7, #16
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	240074a0 	.word	0x240074a0
 800de68:	24007490 	.word	0x24007490

0800de6c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800de72:	4b10      	ldr	r3, [pc, #64]	; (800deb4 <tcp_handle_closepend+0x48>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800de78:	e014      	b.n	800dea4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	8b5b      	ldrh	r3, [r3, #26]
 800de84:	f003 0308 	and.w	r3, r3, #8
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d009      	beq.n	800dea0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	8b5b      	ldrh	r3, [r3, #26]
 800de90:	f023 0308 	bic.w	r3, r3, #8
 800de94:	b29a      	uxth	r2, r3
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f7ff f864 	bl	800cf68 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d1e7      	bne.n	800de7a <tcp_handle_closepend+0xe>
  }
}
 800deaa:	bf00      	nop
 800deac:	bf00      	nop
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	2400749c 	.word	0x2400749c

0800deb8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	4603      	mov	r3, r0
 800dec0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dec2:	2001      	movs	r0, #1
 800dec4:	f7fd fb3e 	bl	800b544 <memp_malloc>
 800dec8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d126      	bne.n	800df1e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ded0:	f7ff ffcc 	bl	800de6c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ded4:	f7ff ff9a 	bl	800de0c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ded8:	2001      	movs	r0, #1
 800deda:	f7fd fb33 	bl	800b544 <memp_malloc>
 800dede:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d11b      	bne.n	800df1e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800dee6:	2009      	movs	r0, #9
 800dee8:	f7ff ff46 	bl	800dd78 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800deec:	2001      	movs	r0, #1
 800deee:	f7fd fb29 	bl	800b544 <memp_malloc>
 800def2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d111      	bne.n	800df1e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800defa:	2008      	movs	r0, #8
 800defc:	f7ff ff3c 	bl	800dd78 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df00:	2001      	movs	r0, #1
 800df02:	f7fd fb1f 	bl	800b544 <memp_malloc>
 800df06:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d107      	bne.n	800df1e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800df0e:	79fb      	ldrb	r3, [r7, #7]
 800df10:	4618      	mov	r0, r3
 800df12:	f7ff fee3 	bl	800dcdc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df16:	2001      	movs	r0, #1
 800df18:	f7fd fb14 	bl	800b544 <memp_malloc>
 800df1c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d03f      	beq.n	800dfa4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800df24:	229c      	movs	r2, #156	; 0x9c
 800df26:	2100      	movs	r1, #0
 800df28:	68f8      	ldr	r0, [r7, #12]
 800df2a:	f005 f855 	bl	8012fd8 <memset>
    pcb->prio = prio;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	79fa      	ldrb	r2, [r7, #7]
 800df32:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800df3a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800df44:	855a      	strh	r2, [r3, #42]	; 0x2a
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	22ff      	movs	r2, #255	; 0xff
 800df52:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f44f 7206 	mov.w	r2, #536	; 0x218
 800df5a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2206      	movs	r2, #6
 800df60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2206      	movs	r2, #6
 800df68:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df70:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2201      	movs	r2, #1
 800df76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800df7a:	4b0d      	ldr	r3, [pc, #52]	; (800dfb0 <tcp_alloc+0xf8>)
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800df82:	4b0c      	ldr	r3, [pc, #48]	; (800dfb4 <tcp_alloc+0xfc>)
 800df84:	781a      	ldrb	r2, [r3, #0]
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800df90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	4a08      	ldr	r2, [pc, #32]	; (800dfb8 <tcp_alloc+0x100>)
 800df98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	4a07      	ldr	r2, [pc, #28]	; (800dfbc <tcp_alloc+0x104>)
 800dfa0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3710      	adds	r7, #16
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	24007490 	.word	0x24007490
 800dfb4:	240074a6 	.word	0x240074a6
 800dfb8:	0800dc71 	.word	0x0800dc71
 800dfbc:	006ddd00 	.word	0x006ddd00

0800dfc0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d107      	bne.n	800dfde <tcp_pcb_purge+0x1e>
 800dfce:	4b21      	ldr	r3, [pc, #132]	; (800e054 <tcp_pcb_purge+0x94>)
 800dfd0:	f640 0251 	movw	r2, #2129	; 0x851
 800dfd4:	4920      	ldr	r1, [pc, #128]	; (800e058 <tcp_pcb_purge+0x98>)
 800dfd6:	4821      	ldr	r0, [pc, #132]	; (800e05c <tcp_pcb_purge+0x9c>)
 800dfd8:	f005 f806 	bl	8012fe8 <iprintf>
 800dfdc:	e037      	b.n	800e04e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	7d1b      	ldrb	r3, [r3, #20]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d033      	beq.n	800e04e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800dfea:	2b0a      	cmp	r3, #10
 800dfec:	d02f      	beq.n	800e04e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d02b      	beq.n	800e04e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d007      	beq.n	800e00e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e002:	4618      	mov	r0, r3
 800e004:	f7fe f9b8 	bl	800c378 <pbuf_free>
      pcb->refused_data = NULL;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2200      	movs	r2, #0
 800e00c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e012:	2b00      	cmp	r3, #0
 800e014:	d002      	beq.n	800e01c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 f986 	bl	800e328 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e022:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e028:	4618      	mov	r0, r3
 800e02a:	f7ff fdc7 	bl	800dbbc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e032:	4618      	mov	r0, r3
 800e034:	f7ff fdc2 	bl	800dbbc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2200      	movs	r2, #0
 800e03c:	66da      	str	r2, [r3, #108]	; 0x6c
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2200      	movs	r2, #0
 800e04a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e04e:	3708      	adds	r7, #8
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	0801595c 	.word	0x0801595c
 800e058:	08015ffc 	.word	0x08015ffc
 800e05c:	080159f4 	.word	0x080159f4

0800e060 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d106      	bne.n	800e07e <tcp_pcb_remove+0x1e>
 800e070:	4b3e      	ldr	r3, [pc, #248]	; (800e16c <tcp_pcb_remove+0x10c>)
 800e072:	f640 0283 	movw	r2, #2179	; 0x883
 800e076:	493e      	ldr	r1, [pc, #248]	; (800e170 <tcp_pcb_remove+0x110>)
 800e078:	483e      	ldr	r0, [pc, #248]	; (800e174 <tcp_pcb_remove+0x114>)
 800e07a:	f004 ffb5 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d106      	bne.n	800e092 <tcp_pcb_remove+0x32>
 800e084:	4b39      	ldr	r3, [pc, #228]	; (800e16c <tcp_pcb_remove+0x10c>)
 800e086:	f640 0284 	movw	r2, #2180	; 0x884
 800e08a:	493b      	ldr	r1, [pc, #236]	; (800e178 <tcp_pcb_remove+0x118>)
 800e08c:	4839      	ldr	r0, [pc, #228]	; (800e174 <tcp_pcb_remove+0x114>)
 800e08e:	f004 ffab 	bl	8012fe8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	683a      	ldr	r2, [r7, #0]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d105      	bne.n	800e0a8 <tcp_pcb_remove+0x48>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	68da      	ldr	r2, [r3, #12]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	601a      	str	r2, [r3, #0]
 800e0a6:	e013      	b.n	800e0d0 <tcp_pcb_remove+0x70>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	60fb      	str	r3, [r7, #12]
 800e0ae:	e00c      	b.n	800e0ca <tcp_pcb_remove+0x6a>
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	683a      	ldr	r2, [r7, #0]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d104      	bne.n	800e0c4 <tcp_pcb_remove+0x64>
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	68da      	ldr	r2, [r3, #12]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	60da      	str	r2, [r3, #12]
 800e0c2:	e005      	b.n	800e0d0 <tcp_pcb_remove+0x70>
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	60fb      	str	r3, [r7, #12]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d1ef      	bne.n	800e0b0 <tcp_pcb_remove+0x50>
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e0d6:	6838      	ldr	r0, [r7, #0]
 800e0d8:	f7ff ff72 	bl	800dfc0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	7d1b      	ldrb	r3, [r3, #20]
 800e0e0:	2b0a      	cmp	r3, #10
 800e0e2:	d013      	beq.n	800e10c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d00f      	beq.n	800e10c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	8b5b      	ldrh	r3, [r3, #26]
 800e0f0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d009      	beq.n	800e10c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	8b5b      	ldrh	r3, [r3, #26]
 800e0fc:	f043 0302 	orr.w	r3, r3, #2
 800e100:	b29a      	uxth	r2, r3
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e106:	6838      	ldr	r0, [r7, #0]
 800e108:	f002 ff6e 	bl	8010fe8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	7d1b      	ldrb	r3, [r3, #20]
 800e110:	2b01      	cmp	r3, #1
 800e112:	d020      	beq.n	800e156 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d006      	beq.n	800e12a <tcp_pcb_remove+0xca>
 800e11c:	4b13      	ldr	r3, [pc, #76]	; (800e16c <tcp_pcb_remove+0x10c>)
 800e11e:	f640 0293 	movw	r2, #2195	; 0x893
 800e122:	4916      	ldr	r1, [pc, #88]	; (800e17c <tcp_pcb_remove+0x11c>)
 800e124:	4813      	ldr	r0, [pc, #76]	; (800e174 <tcp_pcb_remove+0x114>)
 800e126:	f004 ff5f 	bl	8012fe8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d006      	beq.n	800e140 <tcp_pcb_remove+0xe0>
 800e132:	4b0e      	ldr	r3, [pc, #56]	; (800e16c <tcp_pcb_remove+0x10c>)
 800e134:	f640 0294 	movw	r2, #2196	; 0x894
 800e138:	4911      	ldr	r1, [pc, #68]	; (800e180 <tcp_pcb_remove+0x120>)
 800e13a:	480e      	ldr	r0, [pc, #56]	; (800e174 <tcp_pcb_remove+0x114>)
 800e13c:	f004 ff54 	bl	8012fe8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e144:	2b00      	cmp	r3, #0
 800e146:	d006      	beq.n	800e156 <tcp_pcb_remove+0xf6>
 800e148:	4b08      	ldr	r3, [pc, #32]	; (800e16c <tcp_pcb_remove+0x10c>)
 800e14a:	f640 0296 	movw	r2, #2198	; 0x896
 800e14e:	490d      	ldr	r1, [pc, #52]	; (800e184 <tcp_pcb_remove+0x124>)
 800e150:	4808      	ldr	r0, [pc, #32]	; (800e174 <tcp_pcb_remove+0x114>)
 800e152:	f004 ff49 	bl	8012fe8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	2200      	movs	r2, #0
 800e15a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	2200      	movs	r2, #0
 800e160:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e162:	bf00      	nop
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	0801595c 	.word	0x0801595c
 800e170:	08016018 	.word	0x08016018
 800e174:	080159f4 	.word	0x080159f4
 800e178:	08016034 	.word	0x08016034
 800e17c:	08016054 	.word	0x08016054
 800e180:	0801606c 	.word	0x0801606c
 800e184:	08016088 	.word	0x08016088

0800e188 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d106      	bne.n	800e1a4 <tcp_next_iss+0x1c>
 800e196:	4b0a      	ldr	r3, [pc, #40]	; (800e1c0 <tcp_next_iss+0x38>)
 800e198:	f640 02af 	movw	r2, #2223	; 0x8af
 800e19c:	4909      	ldr	r1, [pc, #36]	; (800e1c4 <tcp_next_iss+0x3c>)
 800e19e:	480a      	ldr	r0, [pc, #40]	; (800e1c8 <tcp_next_iss+0x40>)
 800e1a0:	f004 ff22 	bl	8012fe8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e1a4:	4b09      	ldr	r3, [pc, #36]	; (800e1cc <tcp_next_iss+0x44>)
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	4b09      	ldr	r3, [pc, #36]	; (800e1d0 <tcp_next_iss+0x48>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	4a07      	ldr	r2, [pc, #28]	; (800e1cc <tcp_next_iss+0x44>)
 800e1b0:	6013      	str	r3, [r2, #0]
  return iss;
 800e1b2:	4b06      	ldr	r3, [pc, #24]	; (800e1cc <tcp_next_iss+0x44>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3708      	adds	r7, #8
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	0801595c 	.word	0x0801595c
 800e1c4:	080160a0 	.word	0x080160a0
 800e1c8:	080159f4 	.word	0x080159f4
 800e1cc:	2400002c 	.word	0x2400002c
 800e1d0:	24007490 	.word	0x24007490

0800e1d4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b086      	sub	sp, #24
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	4603      	mov	r3, r0
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]
 800e1e0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d106      	bne.n	800e1f6 <tcp_eff_send_mss_netif+0x22>
 800e1e8:	4b14      	ldr	r3, [pc, #80]	; (800e23c <tcp_eff_send_mss_netif+0x68>)
 800e1ea:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e1ee:	4914      	ldr	r1, [pc, #80]	; (800e240 <tcp_eff_send_mss_netif+0x6c>)
 800e1f0:	4814      	ldr	r0, [pc, #80]	; (800e244 <tcp_eff_send_mss_netif+0x70>)
 800e1f2:	f004 fef9 	bl	8012fe8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d101      	bne.n	800e200 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e1fc:	89fb      	ldrh	r3, [r7, #14]
 800e1fe:	e019      	b.n	800e234 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e204:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e206:	8afb      	ldrh	r3, [r7, #22]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d012      	beq.n	800e232 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e20c:	2328      	movs	r3, #40	; 0x28
 800e20e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e210:	8afa      	ldrh	r2, [r7, #22]
 800e212:	8abb      	ldrh	r3, [r7, #20]
 800e214:	429a      	cmp	r2, r3
 800e216:	d904      	bls.n	800e222 <tcp_eff_send_mss_netif+0x4e>
 800e218:	8afa      	ldrh	r2, [r7, #22]
 800e21a:	8abb      	ldrh	r3, [r7, #20]
 800e21c:	1ad3      	subs	r3, r2, r3
 800e21e:	b29b      	uxth	r3, r3
 800e220:	e000      	b.n	800e224 <tcp_eff_send_mss_netif+0x50>
 800e222:	2300      	movs	r3, #0
 800e224:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e226:	8a7a      	ldrh	r2, [r7, #18]
 800e228:	89fb      	ldrh	r3, [r7, #14]
 800e22a:	4293      	cmp	r3, r2
 800e22c:	bf28      	it	cs
 800e22e:	4613      	movcs	r3, r2
 800e230:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e232:	89fb      	ldrh	r3, [r7, #14]
}
 800e234:	4618      	mov	r0, r3
 800e236:	3718      	adds	r7, #24
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}
 800e23c:	0801595c 	.word	0x0801595c
 800e240:	080160bc 	.word	0x080160bc
 800e244:	080159f4 	.word	0x080159f4

0800e248 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d119      	bne.n	800e290 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e25c:	4b10      	ldr	r3, [pc, #64]	; (800e2a0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e25e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e262:	4910      	ldr	r1, [pc, #64]	; (800e2a4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e264:	4810      	ldr	r0, [pc, #64]	; (800e2a8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e266:	f004 febf 	bl	8012fe8 <iprintf>

  while (pcb != NULL) {
 800e26a:	e011      	b.n	800e290 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	429a      	cmp	r2, r3
 800e276:	d108      	bne.n	800e28a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	68db      	ldr	r3, [r3, #12]
 800e27c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e27e:	68f8      	ldr	r0, [r7, #12]
 800e280:	f7fe ffc6 	bl	800d210 <tcp_abort>
      pcb = next;
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	60fb      	str	r3, [r7, #12]
 800e288:	e002      	b.n	800e290 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	68db      	ldr	r3, [r3, #12]
 800e28e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d1ea      	bne.n	800e26c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e296:	bf00      	nop
 800e298:	bf00      	nop
 800e29a:	3710      	adds	r7, #16
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}
 800e2a0:	0801595c 	.word	0x0801595c
 800e2a4:	080160e4 	.word	0x080160e4
 800e2a8:	080159f4 	.word	0x080159f4

0800e2ac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b084      	sub	sp, #16
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d02a      	beq.n	800e312 <tcp_netif_ip_addr_changed+0x66>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d026      	beq.n	800e312 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e2c4:	4b15      	ldr	r3, [pc, #84]	; (800e31c <tcp_netif_ip_addr_changed+0x70>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7ff ffbc 	bl	800e248 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e2d0:	4b13      	ldr	r3, [pc, #76]	; (800e320 <tcp_netif_ip_addr_changed+0x74>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f7ff ffb6 	bl	800e248 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d017      	beq.n	800e312 <tcp_netif_ip_addr_changed+0x66>
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d013      	beq.n	800e312 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e2ea:	4b0e      	ldr	r3, [pc, #56]	; (800e324 <tcp_netif_ip_addr_changed+0x78>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	60fb      	str	r3, [r7, #12]
 800e2f0:	e00c      	b.n	800e30c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d103      	bne.n	800e306 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	60fb      	str	r3, [r7, #12]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d1ef      	bne.n	800e2f2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e312:	bf00      	nop
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop
 800e31c:	2400749c 	.word	0x2400749c
 800e320:	24007494 	.word	0x24007494
 800e324:	24007498 	.word	0x24007498

0800e328 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e334:	2b00      	cmp	r3, #0
 800e336:	d007      	beq.n	800e348 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7ff fc3d 	bl	800dbbc <tcp_segs_free>
    pcb->ooseq = NULL;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2200      	movs	r2, #0
 800e346:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e348:	bf00      	nop
 800e34a:	3708      	adds	r7, #8
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e350:	b590      	push	{r4, r7, lr}
 800e352:	b08d      	sub	sp, #52	; 0x34
 800e354:	af04      	add	r7, sp, #16
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d105      	bne.n	800e36c <tcp_input+0x1c>
 800e360:	4b9b      	ldr	r3, [pc, #620]	; (800e5d0 <tcp_input+0x280>)
 800e362:	2283      	movs	r2, #131	; 0x83
 800e364:	499b      	ldr	r1, [pc, #620]	; (800e5d4 <tcp_input+0x284>)
 800e366:	489c      	ldr	r0, [pc, #624]	; (800e5d8 <tcp_input+0x288>)
 800e368:	f004 fe3e 	bl	8012fe8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	4a9a      	ldr	r2, [pc, #616]	; (800e5dc <tcp_input+0x28c>)
 800e372:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	895b      	ldrh	r3, [r3, #10]
 800e378:	2b13      	cmp	r3, #19
 800e37a:	f240 83d1 	bls.w	800eb20 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e37e:	4b98      	ldr	r3, [pc, #608]	; (800e5e0 <tcp_input+0x290>)
 800e380:	695b      	ldr	r3, [r3, #20]
 800e382:	4a97      	ldr	r2, [pc, #604]	; (800e5e0 <tcp_input+0x290>)
 800e384:	6812      	ldr	r2, [r2, #0]
 800e386:	4611      	mov	r1, r2
 800e388:	4618      	mov	r0, r3
 800e38a:	f7fb fdbd 	bl	8009f08 <ip4_addr_isbroadcast_u32>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	f040 83c7 	bne.w	800eb24 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e396:	4b92      	ldr	r3, [pc, #584]	; (800e5e0 <tcp_input+0x290>)
 800e398:	695b      	ldr	r3, [r3, #20]
 800e39a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e39e:	2be0      	cmp	r3, #224	; 0xe0
 800e3a0:	f000 83c0 	beq.w	800eb24 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e3a4:	4b8d      	ldr	r3, [pc, #564]	; (800e5dc <tcp_input+0x28c>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	899b      	ldrh	r3, [r3, #12]
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7fa f83d 	bl	800842c <lwip_htons>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	0b1b      	lsrs	r3, r3, #12
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e3be:	7cbb      	ldrb	r3, [r7, #18]
 800e3c0:	2b13      	cmp	r3, #19
 800e3c2:	f240 83b1 	bls.w	800eb28 <tcp_input+0x7d8>
 800e3c6:	7cbb      	ldrb	r3, [r7, #18]
 800e3c8:	b29a      	uxth	r2, r3
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	891b      	ldrh	r3, [r3, #8]
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	f200 83aa 	bhi.w	800eb28 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e3d4:	7cbb      	ldrb	r3, [r7, #18]
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	3b14      	subs	r3, #20
 800e3da:	b29a      	uxth	r2, r3
 800e3dc:	4b81      	ldr	r3, [pc, #516]	; (800e5e4 <tcp_input+0x294>)
 800e3de:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e3e0:	4b81      	ldr	r3, [pc, #516]	; (800e5e8 <tcp_input+0x298>)
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	895a      	ldrh	r2, [r3, #10]
 800e3ea:	7cbb      	ldrb	r3, [r7, #18]
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d309      	bcc.n	800e406 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e3f2:	4b7c      	ldr	r3, [pc, #496]	; (800e5e4 <tcp_input+0x294>)
 800e3f4:	881a      	ldrh	r2, [r3, #0]
 800e3f6:	4b7d      	ldr	r3, [pc, #500]	; (800e5ec <tcp_input+0x29c>)
 800e3f8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e3fa:	7cbb      	ldrb	r3, [r7, #18]
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f7fd ff34 	bl	800c26c <pbuf_remove_header>
 800e404:	e04e      	b.n	800e4a4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d105      	bne.n	800e41a <tcp_input+0xca>
 800e40e:	4b70      	ldr	r3, [pc, #448]	; (800e5d0 <tcp_input+0x280>)
 800e410:	22c2      	movs	r2, #194	; 0xc2
 800e412:	4977      	ldr	r1, [pc, #476]	; (800e5f0 <tcp_input+0x2a0>)
 800e414:	4870      	ldr	r0, [pc, #448]	; (800e5d8 <tcp_input+0x288>)
 800e416:	f004 fde7 	bl	8012fe8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e41a:	2114      	movs	r1, #20
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f7fd ff25 	bl	800c26c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	895a      	ldrh	r2, [r3, #10]
 800e426:	4b71      	ldr	r3, [pc, #452]	; (800e5ec <tcp_input+0x29c>)
 800e428:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e42a:	4b6e      	ldr	r3, [pc, #440]	; (800e5e4 <tcp_input+0x294>)
 800e42c:	881a      	ldrh	r2, [r3, #0]
 800e42e:	4b6f      	ldr	r3, [pc, #444]	; (800e5ec <tcp_input+0x29c>)
 800e430:	881b      	ldrh	r3, [r3, #0]
 800e432:	1ad3      	subs	r3, r2, r3
 800e434:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e436:	4b6d      	ldr	r3, [pc, #436]	; (800e5ec <tcp_input+0x29c>)
 800e438:	881b      	ldrh	r3, [r3, #0]
 800e43a:	4619      	mov	r1, r3
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f7fd ff15 	bl	800c26c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	895b      	ldrh	r3, [r3, #10]
 800e448:	8a3a      	ldrh	r2, [r7, #16]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	f200 836e 	bhi.w	800eb2c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	4a64      	ldr	r2, [pc, #400]	; (800e5e8 <tcp_input+0x298>)
 800e458:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	8a3a      	ldrh	r2, [r7, #16]
 800e460:	4611      	mov	r1, r2
 800e462:	4618      	mov	r0, r3
 800e464:	f7fd ff02 	bl	800c26c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	891a      	ldrh	r2, [r3, #8]
 800e46c:	8a3b      	ldrh	r3, [r7, #16]
 800e46e:	1ad3      	subs	r3, r2, r3
 800e470:	b29a      	uxth	r2, r3
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	895b      	ldrh	r3, [r3, #10]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d005      	beq.n	800e48a <tcp_input+0x13a>
 800e47e:	4b54      	ldr	r3, [pc, #336]	; (800e5d0 <tcp_input+0x280>)
 800e480:	22df      	movs	r2, #223	; 0xdf
 800e482:	495c      	ldr	r1, [pc, #368]	; (800e5f4 <tcp_input+0x2a4>)
 800e484:	4854      	ldr	r0, [pc, #336]	; (800e5d8 <tcp_input+0x288>)
 800e486:	f004 fdaf 	bl	8012fe8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	891a      	ldrh	r2, [r3, #8]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	891b      	ldrh	r3, [r3, #8]
 800e494:	429a      	cmp	r2, r3
 800e496:	d005      	beq.n	800e4a4 <tcp_input+0x154>
 800e498:	4b4d      	ldr	r3, [pc, #308]	; (800e5d0 <tcp_input+0x280>)
 800e49a:	22e0      	movs	r2, #224	; 0xe0
 800e49c:	4956      	ldr	r1, [pc, #344]	; (800e5f8 <tcp_input+0x2a8>)
 800e49e:	484e      	ldr	r0, [pc, #312]	; (800e5d8 <tcp_input+0x288>)
 800e4a0:	f004 fda2 	bl	8012fe8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e4a4:	4b4d      	ldr	r3, [pc, #308]	; (800e5dc <tcp_input+0x28c>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	881b      	ldrh	r3, [r3, #0]
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	4a4b      	ldr	r2, [pc, #300]	; (800e5dc <tcp_input+0x28c>)
 800e4ae:	6814      	ldr	r4, [r2, #0]
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7f9 ffbb 	bl	800842c <lwip_htons>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e4ba:	4b48      	ldr	r3, [pc, #288]	; (800e5dc <tcp_input+0x28c>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	885b      	ldrh	r3, [r3, #2]
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	4a46      	ldr	r2, [pc, #280]	; (800e5dc <tcp_input+0x28c>)
 800e4c4:	6814      	ldr	r4, [r2, #0]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7f9 ffb0 	bl	800842c <lwip_htons>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e4d0:	4b42      	ldr	r3, [pc, #264]	; (800e5dc <tcp_input+0x28c>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	4a41      	ldr	r2, [pc, #260]	; (800e5dc <tcp_input+0x28c>)
 800e4d8:	6814      	ldr	r4, [r2, #0]
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7f9 ffbb 	bl	8008456 <lwip_htonl>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	6063      	str	r3, [r4, #4]
 800e4e4:	6863      	ldr	r3, [r4, #4]
 800e4e6:	4a45      	ldr	r2, [pc, #276]	; (800e5fc <tcp_input+0x2ac>)
 800e4e8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e4ea:	4b3c      	ldr	r3, [pc, #240]	; (800e5dc <tcp_input+0x28c>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	689b      	ldr	r3, [r3, #8]
 800e4f0:	4a3a      	ldr	r2, [pc, #232]	; (800e5dc <tcp_input+0x28c>)
 800e4f2:	6814      	ldr	r4, [r2, #0]
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7f9 ffae 	bl	8008456 <lwip_htonl>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	60a3      	str	r3, [r4, #8]
 800e4fe:	68a3      	ldr	r3, [r4, #8]
 800e500:	4a3f      	ldr	r2, [pc, #252]	; (800e600 <tcp_input+0x2b0>)
 800e502:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e504:	4b35      	ldr	r3, [pc, #212]	; (800e5dc <tcp_input+0x28c>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	89db      	ldrh	r3, [r3, #14]
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	4a33      	ldr	r2, [pc, #204]	; (800e5dc <tcp_input+0x28c>)
 800e50e:	6814      	ldr	r4, [r2, #0]
 800e510:	4618      	mov	r0, r3
 800e512:	f7f9 ff8b 	bl	800842c <lwip_htons>
 800e516:	4603      	mov	r3, r0
 800e518:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e51a:	4b30      	ldr	r3, [pc, #192]	; (800e5dc <tcp_input+0x28c>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	899b      	ldrh	r3, [r3, #12]
 800e520:	b29b      	uxth	r3, r3
 800e522:	4618      	mov	r0, r3
 800e524:	f7f9 ff82 	bl	800842c <lwip_htons>
 800e528:	4603      	mov	r3, r0
 800e52a:	b2db      	uxtb	r3, r3
 800e52c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e530:	b2da      	uxtb	r2, r3
 800e532:	4b34      	ldr	r3, [pc, #208]	; (800e604 <tcp_input+0x2b4>)
 800e534:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	891a      	ldrh	r2, [r3, #8]
 800e53a:	4b33      	ldr	r3, [pc, #204]	; (800e608 <tcp_input+0x2b8>)
 800e53c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e53e:	4b31      	ldr	r3, [pc, #196]	; (800e604 <tcp_input+0x2b4>)
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	f003 0303 	and.w	r3, r3, #3
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00c      	beq.n	800e564 <tcp_input+0x214>
    tcplen++;
 800e54a:	4b2f      	ldr	r3, [pc, #188]	; (800e608 <tcp_input+0x2b8>)
 800e54c:	881b      	ldrh	r3, [r3, #0]
 800e54e:	3301      	adds	r3, #1
 800e550:	b29a      	uxth	r2, r3
 800e552:	4b2d      	ldr	r3, [pc, #180]	; (800e608 <tcp_input+0x2b8>)
 800e554:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	891a      	ldrh	r2, [r3, #8]
 800e55a:	4b2b      	ldr	r3, [pc, #172]	; (800e608 <tcp_input+0x2b8>)
 800e55c:	881b      	ldrh	r3, [r3, #0]
 800e55e:	429a      	cmp	r2, r3
 800e560:	f200 82e6 	bhi.w	800eb30 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e564:	2300      	movs	r3, #0
 800e566:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e568:	4b28      	ldr	r3, [pc, #160]	; (800e60c <tcp_input+0x2bc>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	61fb      	str	r3, [r7, #28]
 800e56e:	e09d      	b.n	800e6ac <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	7d1b      	ldrb	r3, [r3, #20]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d105      	bne.n	800e584 <tcp_input+0x234>
 800e578:	4b15      	ldr	r3, [pc, #84]	; (800e5d0 <tcp_input+0x280>)
 800e57a:	22fb      	movs	r2, #251	; 0xfb
 800e57c:	4924      	ldr	r1, [pc, #144]	; (800e610 <tcp_input+0x2c0>)
 800e57e:	4816      	ldr	r0, [pc, #88]	; (800e5d8 <tcp_input+0x288>)
 800e580:	f004 fd32 	bl	8012fe8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e584:	69fb      	ldr	r3, [r7, #28]
 800e586:	7d1b      	ldrb	r3, [r3, #20]
 800e588:	2b0a      	cmp	r3, #10
 800e58a:	d105      	bne.n	800e598 <tcp_input+0x248>
 800e58c:	4b10      	ldr	r3, [pc, #64]	; (800e5d0 <tcp_input+0x280>)
 800e58e:	22fc      	movs	r2, #252	; 0xfc
 800e590:	4920      	ldr	r1, [pc, #128]	; (800e614 <tcp_input+0x2c4>)
 800e592:	4811      	ldr	r0, [pc, #68]	; (800e5d8 <tcp_input+0x288>)
 800e594:	f004 fd28 	bl	8012fe8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	7d1b      	ldrb	r3, [r3, #20]
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d105      	bne.n	800e5ac <tcp_input+0x25c>
 800e5a0:	4b0b      	ldr	r3, [pc, #44]	; (800e5d0 <tcp_input+0x280>)
 800e5a2:	22fd      	movs	r2, #253	; 0xfd
 800e5a4:	491c      	ldr	r1, [pc, #112]	; (800e618 <tcp_input+0x2c8>)
 800e5a6:	480c      	ldr	r0, [pc, #48]	; (800e5d8 <tcp_input+0x288>)
 800e5a8:	f004 fd1e 	bl	8012fe8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	7a1b      	ldrb	r3, [r3, #8]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d033      	beq.n	800e61c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	7a1a      	ldrb	r2, [r3, #8]
 800e5b8:	4b09      	ldr	r3, [pc, #36]	; (800e5e0 <tcp_input+0x290>)
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d029      	beq.n	800e61c <tcp_input+0x2cc>
      prev = pcb;
 800e5c8:	69fb      	ldr	r3, [r7, #28]
 800e5ca:	61bb      	str	r3, [r7, #24]
      continue;
 800e5cc:	e06b      	b.n	800e6a6 <tcp_input+0x356>
 800e5ce:	bf00      	nop
 800e5d0:	08016118 	.word	0x08016118
 800e5d4:	080161a0 	.word	0x080161a0
 800e5d8:	080161b8 	.word	0x080161b8
 800e5dc:	240074b8 	.word	0x240074b8
 800e5e0:	2400437c 	.word	0x2400437c
 800e5e4:	240074bc 	.word	0x240074bc
 800e5e8:	240074c0 	.word	0x240074c0
 800e5ec:	240074be 	.word	0x240074be
 800e5f0:	080161e0 	.word	0x080161e0
 800e5f4:	080161f0 	.word	0x080161f0
 800e5f8:	080161fc 	.word	0x080161fc
 800e5fc:	240074c8 	.word	0x240074c8
 800e600:	240074cc 	.word	0x240074cc
 800e604:	240074d4 	.word	0x240074d4
 800e608:	240074d2 	.word	0x240074d2
 800e60c:	2400749c 	.word	0x2400749c
 800e610:	0801621c 	.word	0x0801621c
 800e614:	08016244 	.word	0x08016244
 800e618:	08016270 	.word	0x08016270
    }

    if (pcb->remote_port == tcphdr->src &&
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	8b1a      	ldrh	r2, [r3, #24]
 800e620:	4b72      	ldr	r3, [pc, #456]	; (800e7ec <tcp_input+0x49c>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	881b      	ldrh	r3, [r3, #0]
 800e626:	b29b      	uxth	r3, r3
 800e628:	429a      	cmp	r2, r3
 800e62a:	d13a      	bne.n	800e6a2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	8ada      	ldrh	r2, [r3, #22]
 800e630:	4b6e      	ldr	r3, [pc, #440]	; (800e7ec <tcp_input+0x49c>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	885b      	ldrh	r3, [r3, #2]
 800e636:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e638:	429a      	cmp	r2, r3
 800e63a:	d132      	bne.n	800e6a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	685a      	ldr	r2, [r3, #4]
 800e640:	4b6b      	ldr	r3, [pc, #428]	; (800e7f0 <tcp_input+0x4a0>)
 800e642:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e644:	429a      	cmp	r2, r3
 800e646:	d12c      	bne.n	800e6a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	4b68      	ldr	r3, [pc, #416]	; (800e7f0 <tcp_input+0x4a0>)
 800e64e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e650:	429a      	cmp	r2, r3
 800e652:	d126      	bne.n	800e6a2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	68db      	ldr	r3, [r3, #12]
 800e658:	69fa      	ldr	r2, [r7, #28]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d106      	bne.n	800e66c <tcp_input+0x31c>
 800e65e:	4b65      	ldr	r3, [pc, #404]	; (800e7f4 <tcp_input+0x4a4>)
 800e660:	f240 120d 	movw	r2, #269	; 0x10d
 800e664:	4964      	ldr	r1, [pc, #400]	; (800e7f8 <tcp_input+0x4a8>)
 800e666:	4865      	ldr	r0, [pc, #404]	; (800e7fc <tcp_input+0x4ac>)
 800e668:	f004 fcbe 	bl	8012fe8 <iprintf>
      if (prev != NULL) {
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d00a      	beq.n	800e688 <tcp_input+0x338>
        prev->next = pcb->next;
 800e672:	69fb      	ldr	r3, [r7, #28]
 800e674:	68da      	ldr	r2, [r3, #12]
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e67a:	4b61      	ldr	r3, [pc, #388]	; (800e800 <tcp_input+0x4b0>)
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e682:	4a5f      	ldr	r2, [pc, #380]	; (800e800 <tcp_input+0x4b0>)
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e688:	69fb      	ldr	r3, [r7, #28]
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	69fa      	ldr	r2, [r7, #28]
 800e68e:	429a      	cmp	r2, r3
 800e690:	d111      	bne.n	800e6b6 <tcp_input+0x366>
 800e692:	4b58      	ldr	r3, [pc, #352]	; (800e7f4 <tcp_input+0x4a4>)
 800e694:	f240 1215 	movw	r2, #277	; 0x115
 800e698:	495a      	ldr	r1, [pc, #360]	; (800e804 <tcp_input+0x4b4>)
 800e69a:	4858      	ldr	r0, [pc, #352]	; (800e7fc <tcp_input+0x4ac>)
 800e69c:	f004 fca4 	bl	8012fe8 <iprintf>
      break;
 800e6a0:	e009      	b.n	800e6b6 <tcp_input+0x366>
    }
    prev = pcb;
 800e6a2:	69fb      	ldr	r3, [r7, #28]
 800e6a4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	68db      	ldr	r3, [r3, #12]
 800e6aa:	61fb      	str	r3, [r7, #28]
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	f47f af5e 	bne.w	800e570 <tcp_input+0x220>
 800e6b4:	e000      	b.n	800e6b8 <tcp_input+0x368>
      break;
 800e6b6:	bf00      	nop
  }

  if (pcb == NULL) {
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	f040 80aa 	bne.w	800e814 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6c0:	4b51      	ldr	r3, [pc, #324]	; (800e808 <tcp_input+0x4b8>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	61fb      	str	r3, [r7, #28]
 800e6c6:	e03f      	b.n	800e748 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	7d1b      	ldrb	r3, [r3, #20]
 800e6cc:	2b0a      	cmp	r3, #10
 800e6ce:	d006      	beq.n	800e6de <tcp_input+0x38e>
 800e6d0:	4b48      	ldr	r3, [pc, #288]	; (800e7f4 <tcp_input+0x4a4>)
 800e6d2:	f240 121f 	movw	r2, #287	; 0x11f
 800e6d6:	494d      	ldr	r1, [pc, #308]	; (800e80c <tcp_input+0x4bc>)
 800e6d8:	4848      	ldr	r0, [pc, #288]	; (800e7fc <tcp_input+0x4ac>)
 800e6da:	f004 fc85 	bl	8012fe8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	7a1b      	ldrb	r3, [r3, #8]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d009      	beq.n	800e6fa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e6e6:	69fb      	ldr	r3, [r7, #28]
 800e6e8:	7a1a      	ldrb	r2, [r3, #8]
 800e6ea:	4b41      	ldr	r3, [pc, #260]	; (800e7f0 <tcp_input+0x4a0>)
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d122      	bne.n	800e740 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e6fa:	69fb      	ldr	r3, [r7, #28]
 800e6fc:	8b1a      	ldrh	r2, [r3, #24]
 800e6fe:	4b3b      	ldr	r3, [pc, #236]	; (800e7ec <tcp_input+0x49c>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	881b      	ldrh	r3, [r3, #0]
 800e704:	b29b      	uxth	r3, r3
 800e706:	429a      	cmp	r2, r3
 800e708:	d11b      	bne.n	800e742 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	8ada      	ldrh	r2, [r3, #22]
 800e70e:	4b37      	ldr	r3, [pc, #220]	; (800e7ec <tcp_input+0x49c>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	885b      	ldrh	r3, [r3, #2]
 800e714:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e716:	429a      	cmp	r2, r3
 800e718:	d113      	bne.n	800e742 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	685a      	ldr	r2, [r3, #4]
 800e71e:	4b34      	ldr	r3, [pc, #208]	; (800e7f0 <tcp_input+0x4a0>)
 800e720:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e722:	429a      	cmp	r2, r3
 800e724:	d10d      	bne.n	800e742 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	4b31      	ldr	r3, [pc, #196]	; (800e7f0 <tcp_input+0x4a0>)
 800e72c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e72e:	429a      	cmp	r2, r3
 800e730:	d107      	bne.n	800e742 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e732:	69f8      	ldr	r0, [r7, #28]
 800e734:	f000 fb56 	bl	800ede4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f7fd fe1d 	bl	800c378 <pbuf_free>
        return;
 800e73e:	e1fd      	b.n	800eb3c <tcp_input+0x7ec>
        continue;
 800e740:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	68db      	ldr	r3, [r3, #12]
 800e746:	61fb      	str	r3, [r7, #28]
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d1bc      	bne.n	800e6c8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e74e:	2300      	movs	r3, #0
 800e750:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e752:	4b2f      	ldr	r3, [pc, #188]	; (800e810 <tcp_input+0x4c0>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	617b      	str	r3, [r7, #20]
 800e758:	e02a      	b.n	800e7b0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	7a1b      	ldrb	r3, [r3, #8]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d00c      	beq.n	800e77c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	7a1a      	ldrb	r2, [r3, #8]
 800e766:	4b22      	ldr	r3, [pc, #136]	; (800e7f0 <tcp_input+0x4a0>)
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e76e:	3301      	adds	r3, #1
 800e770:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e772:	429a      	cmp	r2, r3
 800e774:	d002      	beq.n	800e77c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	61bb      	str	r3, [r7, #24]
        continue;
 800e77a:	e016      	b.n	800e7aa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	8ada      	ldrh	r2, [r3, #22]
 800e780:	4b1a      	ldr	r3, [pc, #104]	; (800e7ec <tcp_input+0x49c>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	885b      	ldrh	r3, [r3, #2]
 800e786:	b29b      	uxth	r3, r3
 800e788:	429a      	cmp	r2, r3
 800e78a:	d10c      	bne.n	800e7a6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	681a      	ldr	r2, [r3, #0]
 800e790:	4b17      	ldr	r3, [pc, #92]	; (800e7f0 <tcp_input+0x4a0>)
 800e792:	695b      	ldr	r3, [r3, #20]
 800e794:	429a      	cmp	r2, r3
 800e796:	d00f      	beq.n	800e7b8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d00d      	beq.n	800e7ba <tcp_input+0x46a>
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d009      	beq.n	800e7ba <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	617b      	str	r3, [r7, #20]
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d1d1      	bne.n	800e75a <tcp_input+0x40a>
 800e7b6:	e000      	b.n	800e7ba <tcp_input+0x46a>
            break;
 800e7b8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d029      	beq.n	800e814 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00a      	beq.n	800e7dc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	68da      	ldr	r2, [r3, #12]
 800e7ca:	69bb      	ldr	r3, [r7, #24]
 800e7cc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e7ce:	4b10      	ldr	r3, [pc, #64]	; (800e810 <tcp_input+0x4c0>)
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e7d6:	4a0e      	ldr	r2, [pc, #56]	; (800e810 <tcp_input+0x4c0>)
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e7dc:	6978      	ldr	r0, [r7, #20]
 800e7de:	f000 fa03 	bl	800ebe8 <tcp_listen_input>
      }
      pbuf_free(p);
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f7fd fdc8 	bl	800c378 <pbuf_free>
      return;
 800e7e8:	e1a8      	b.n	800eb3c <tcp_input+0x7ec>
 800e7ea:	bf00      	nop
 800e7ec:	240074b8 	.word	0x240074b8
 800e7f0:	2400437c 	.word	0x2400437c
 800e7f4:	08016118 	.word	0x08016118
 800e7f8:	08016298 	.word	0x08016298
 800e7fc:	080161b8 	.word	0x080161b8
 800e800:	2400749c 	.word	0x2400749c
 800e804:	080162c4 	.word	0x080162c4
 800e808:	240074a0 	.word	0x240074a0
 800e80c:	080162f0 	.word	0x080162f0
 800e810:	24007498 	.word	0x24007498
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	2b00      	cmp	r3, #0
 800e818:	f000 8158 	beq.w	800eacc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e81c:	4b95      	ldr	r3, [pc, #596]	; (800ea74 <tcp_input+0x724>)
 800e81e:	2200      	movs	r2, #0
 800e820:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	891a      	ldrh	r2, [r3, #8]
 800e826:	4b93      	ldr	r3, [pc, #588]	; (800ea74 <tcp_input+0x724>)
 800e828:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e82a:	4a92      	ldr	r2, [pc, #584]	; (800ea74 <tcp_input+0x724>)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e830:	4b91      	ldr	r3, [pc, #580]	; (800ea78 <tcp_input+0x728>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4a8f      	ldr	r2, [pc, #572]	; (800ea74 <tcp_input+0x724>)
 800e836:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e838:	4b90      	ldr	r3, [pc, #576]	; (800ea7c <tcp_input+0x72c>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e83e:	4b90      	ldr	r3, [pc, #576]	; (800ea80 <tcp_input+0x730>)
 800e840:	2200      	movs	r2, #0
 800e842:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e844:	4b8f      	ldr	r3, [pc, #572]	; (800ea84 <tcp_input+0x734>)
 800e846:	2200      	movs	r2, #0
 800e848:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e84a:	4b8f      	ldr	r3, [pc, #572]	; (800ea88 <tcp_input+0x738>)
 800e84c:	781b      	ldrb	r3, [r3, #0]
 800e84e:	f003 0308 	and.w	r3, r3, #8
 800e852:	2b00      	cmp	r3, #0
 800e854:	d006      	beq.n	800e864 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	7b5b      	ldrb	r3, [r3, #13]
 800e85a:	f043 0301 	orr.w	r3, r3, #1
 800e85e:	b2da      	uxtb	r2, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d017      	beq.n	800e89c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e86c:	69f8      	ldr	r0, [r7, #28]
 800e86e:	f7ff f929 	bl	800dac4 <tcp_process_refused_data>
 800e872:	4603      	mov	r3, r0
 800e874:	f113 0f0d 	cmn.w	r3, #13
 800e878:	d007      	beq.n	800e88a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d00c      	beq.n	800e89c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e882:	4b82      	ldr	r3, [pc, #520]	; (800ea8c <tcp_input+0x73c>)
 800e884:	881b      	ldrh	r3, [r3, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d008      	beq.n	800e89c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e88a:	69fb      	ldr	r3, [r7, #28]
 800e88c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e88e:	2b00      	cmp	r3, #0
 800e890:	f040 80e3 	bne.w	800ea5a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e894:	69f8      	ldr	r0, [r7, #28]
 800e896:	f003 f9ad 	bl	8011bf4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e89a:	e0de      	b.n	800ea5a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e89c:	4a7c      	ldr	r2, [pc, #496]	; (800ea90 <tcp_input+0x740>)
 800e89e:	69fb      	ldr	r3, [r7, #28]
 800e8a0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e8a2:	69f8      	ldr	r0, [r7, #28]
 800e8a4:	f000 fb18 	bl	800eed8 <tcp_process>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e8ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e8b0:	f113 0f0d 	cmn.w	r3, #13
 800e8b4:	f000 80d3 	beq.w	800ea5e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e8b8:	4b71      	ldr	r3, [pc, #452]	; (800ea80 <tcp_input+0x730>)
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	f003 0308 	and.w	r3, r3, #8
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d015      	beq.n	800e8f0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d008      	beq.n	800e8e0 <tcp_input+0x590>
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8d4:	69fa      	ldr	r2, [r7, #28]
 800e8d6:	6912      	ldr	r2, [r2, #16]
 800e8d8:	f06f 010d 	mvn.w	r1, #13
 800e8dc:	4610      	mov	r0, r2
 800e8de:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e8e0:	69f9      	ldr	r1, [r7, #28]
 800e8e2:	486c      	ldr	r0, [pc, #432]	; (800ea94 <tcp_input+0x744>)
 800e8e4:	f7ff fbbc 	bl	800e060 <tcp_pcb_remove>
        tcp_free(pcb);
 800e8e8:	69f8      	ldr	r0, [r7, #28]
 800e8ea:	f7fe f9a9 	bl	800cc40 <tcp_free>
 800e8ee:	e0da      	b.n	800eaa6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e8f4:	4b63      	ldr	r3, [pc, #396]	; (800ea84 <tcp_input+0x734>)
 800e8f6:	881b      	ldrh	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d01d      	beq.n	800e938 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e8fc:	4b61      	ldr	r3, [pc, #388]	; (800ea84 <tcp_input+0x734>)
 800e8fe:	881b      	ldrh	r3, [r3, #0]
 800e900:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d00a      	beq.n	800e922 <tcp_input+0x5d2>
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e912:	69fa      	ldr	r2, [r7, #28]
 800e914:	6910      	ldr	r0, [r2, #16]
 800e916:	89fa      	ldrh	r2, [r7, #14]
 800e918:	69f9      	ldr	r1, [r7, #28]
 800e91a:	4798      	blx	r3
 800e91c:	4603      	mov	r3, r0
 800e91e:	74fb      	strb	r3, [r7, #19]
 800e920:	e001      	b.n	800e926 <tcp_input+0x5d6>
 800e922:	2300      	movs	r3, #0
 800e924:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e926:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e92a:	f113 0f0d 	cmn.w	r3, #13
 800e92e:	f000 8098 	beq.w	800ea62 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e932:	4b54      	ldr	r3, [pc, #336]	; (800ea84 <tcp_input+0x734>)
 800e934:	2200      	movs	r2, #0
 800e936:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e938:	69f8      	ldr	r0, [r7, #28]
 800e93a:	f000 f915 	bl	800eb68 <tcp_input_delayed_close>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	f040 8090 	bne.w	800ea66 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e946:	4b4d      	ldr	r3, [pc, #308]	; (800ea7c <tcp_input+0x72c>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d041      	beq.n	800e9d2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e952:	2b00      	cmp	r3, #0
 800e954:	d006      	beq.n	800e964 <tcp_input+0x614>
 800e956:	4b50      	ldr	r3, [pc, #320]	; (800ea98 <tcp_input+0x748>)
 800e958:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e95c:	494f      	ldr	r1, [pc, #316]	; (800ea9c <tcp_input+0x74c>)
 800e95e:	4850      	ldr	r0, [pc, #320]	; (800eaa0 <tcp_input+0x750>)
 800e960:	f004 fb42 	bl	8012fe8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e964:	69fb      	ldr	r3, [r7, #28]
 800e966:	8b5b      	ldrh	r3, [r3, #26]
 800e968:	f003 0310 	and.w	r3, r3, #16
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d008      	beq.n	800e982 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e970:	4b42      	ldr	r3, [pc, #264]	; (800ea7c <tcp_input+0x72c>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4618      	mov	r0, r3
 800e976:	f7fd fcff 	bl	800c378 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e97a:	69f8      	ldr	r0, [r7, #28]
 800e97c:	f7fe fc48 	bl	800d210 <tcp_abort>
            goto aborted;
 800e980:	e091      	b.n	800eaa6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d00c      	beq.n	800e9a6 <tcp_input+0x656>
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	6918      	ldr	r0, [r3, #16]
 800e996:	4b39      	ldr	r3, [pc, #228]	; (800ea7c <tcp_input+0x72c>)
 800e998:	681a      	ldr	r2, [r3, #0]
 800e99a:	2300      	movs	r3, #0
 800e99c:	69f9      	ldr	r1, [r7, #28]
 800e99e:	47a0      	blx	r4
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	74fb      	strb	r3, [r7, #19]
 800e9a4:	e008      	b.n	800e9b8 <tcp_input+0x668>
 800e9a6:	4b35      	ldr	r3, [pc, #212]	; (800ea7c <tcp_input+0x72c>)
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	69f9      	ldr	r1, [r7, #28]
 800e9ae:	2000      	movs	r0, #0
 800e9b0:	f7ff f95e 	bl	800dc70 <tcp_recv_null>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e9b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9bc:	f113 0f0d 	cmn.w	r3, #13
 800e9c0:	d053      	beq.n	800ea6a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e9c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d003      	beq.n	800e9d2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e9ca:	4b2c      	ldr	r3, [pc, #176]	; (800ea7c <tcp_input+0x72c>)
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	69fb      	ldr	r3, [r7, #28]
 800e9d0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e9d2:	4b2b      	ldr	r3, [pc, #172]	; (800ea80 <tcp_input+0x730>)
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	f003 0320 	and.w	r3, r3, #32
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d030      	beq.n	800ea40 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e9de:	69fb      	ldr	r3, [r7, #28]
 800e9e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d009      	beq.n	800e9fa <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9ea:	7b5a      	ldrb	r2, [r3, #13]
 800e9ec:	69fb      	ldr	r3, [r7, #28]
 800e9ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9f0:	f042 0220 	orr.w	r2, r2, #32
 800e9f4:	b2d2      	uxtb	r2, r2
 800e9f6:	735a      	strb	r2, [r3, #13]
 800e9f8:	e022      	b.n	800ea40 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ea02:	d005      	beq.n	800ea10 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ea04:	69fb      	ldr	r3, [r7, #28]
 800ea06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea08:	3301      	adds	r3, #1
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	69fb      	ldr	r3, [r7, #28]
 800ea0e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00b      	beq.n	800ea32 <tcp_input+0x6e2>
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ea20:	69fb      	ldr	r3, [r7, #28]
 800ea22:	6918      	ldr	r0, [r3, #16]
 800ea24:	2300      	movs	r3, #0
 800ea26:	2200      	movs	r2, #0
 800ea28:	69f9      	ldr	r1, [r7, #28]
 800ea2a:	47a0      	blx	r4
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	74fb      	strb	r3, [r7, #19]
 800ea30:	e001      	b.n	800ea36 <tcp_input+0x6e6>
 800ea32:	2300      	movs	r3, #0
 800ea34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ea36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea3a:	f113 0f0d 	cmn.w	r3, #13
 800ea3e:	d016      	beq.n	800ea6e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ea40:	4b13      	ldr	r3, [pc, #76]	; (800ea90 <tcp_input+0x740>)
 800ea42:	2200      	movs	r2, #0
 800ea44:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ea46:	69f8      	ldr	r0, [r7, #28]
 800ea48:	f000 f88e 	bl	800eb68 <tcp_input_delayed_close>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d128      	bne.n	800eaa4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ea52:	69f8      	ldr	r0, [r7, #28]
 800ea54:	f002 fac8 	bl	8010fe8 <tcp_output>
 800ea58:	e025      	b.n	800eaa6 <tcp_input+0x756>
        goto aborted;
 800ea5a:	bf00      	nop
 800ea5c:	e023      	b.n	800eaa6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ea5e:	bf00      	nop
 800ea60:	e021      	b.n	800eaa6 <tcp_input+0x756>
              goto aborted;
 800ea62:	bf00      	nop
 800ea64:	e01f      	b.n	800eaa6 <tcp_input+0x756>
          goto aborted;
 800ea66:	bf00      	nop
 800ea68:	e01d      	b.n	800eaa6 <tcp_input+0x756>
            goto aborted;
 800ea6a:	bf00      	nop
 800ea6c:	e01b      	b.n	800eaa6 <tcp_input+0x756>
              goto aborted;
 800ea6e:	bf00      	nop
 800ea70:	e019      	b.n	800eaa6 <tcp_input+0x756>
 800ea72:	bf00      	nop
 800ea74:	240074a8 	.word	0x240074a8
 800ea78:	240074b8 	.word	0x240074b8
 800ea7c:	240074d8 	.word	0x240074d8
 800ea80:	240074d5 	.word	0x240074d5
 800ea84:	240074d0 	.word	0x240074d0
 800ea88:	240074d4 	.word	0x240074d4
 800ea8c:	240074d2 	.word	0x240074d2
 800ea90:	240074dc 	.word	0x240074dc
 800ea94:	2400749c 	.word	0x2400749c
 800ea98:	08016118 	.word	0x08016118
 800ea9c:	08016320 	.word	0x08016320
 800eaa0:	080161b8 	.word	0x080161b8
          goto aborted;
 800eaa4:	bf00      	nop
    tcp_input_pcb = NULL;
 800eaa6:	4b27      	ldr	r3, [pc, #156]	; (800eb44 <tcp_input+0x7f4>)
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800eaac:	4b26      	ldr	r3, [pc, #152]	; (800eb48 <tcp_input+0x7f8>)
 800eaae:	2200      	movs	r2, #0
 800eab0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800eab2:	4b26      	ldr	r3, [pc, #152]	; (800eb4c <tcp_input+0x7fc>)
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d03f      	beq.n	800eb3a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800eaba:	4b24      	ldr	r3, [pc, #144]	; (800eb4c <tcp_input+0x7fc>)
 800eabc:	685b      	ldr	r3, [r3, #4]
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7fd fc5a 	bl	800c378 <pbuf_free>
      inseg.p = NULL;
 800eac4:	4b21      	ldr	r3, [pc, #132]	; (800eb4c <tcp_input+0x7fc>)
 800eac6:	2200      	movs	r2, #0
 800eac8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800eaca:	e036      	b.n	800eb3a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800eacc:	4b20      	ldr	r3, [pc, #128]	; (800eb50 <tcp_input+0x800>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	899b      	ldrh	r3, [r3, #12]
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7f9 fca9 	bl	800842c <lwip_htons>
 800eada:	4603      	mov	r3, r0
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	f003 0304 	and.w	r3, r3, #4
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d118      	bne.n	800eb18 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eae6:	4b1b      	ldr	r3, [pc, #108]	; (800eb54 <tcp_input+0x804>)
 800eae8:	6819      	ldr	r1, [r3, #0]
 800eaea:	4b1b      	ldr	r3, [pc, #108]	; (800eb58 <tcp_input+0x808>)
 800eaec:	881b      	ldrh	r3, [r3, #0]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	4b1a      	ldr	r3, [pc, #104]	; (800eb5c <tcp_input+0x80c>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eaf6:	4b16      	ldr	r3, [pc, #88]	; (800eb50 <tcp_input+0x800>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eafa:	885b      	ldrh	r3, [r3, #2]
 800eafc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eafe:	4a14      	ldr	r2, [pc, #80]	; (800eb50 <tcp_input+0x800>)
 800eb00:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb02:	8812      	ldrh	r2, [r2, #0]
 800eb04:	b292      	uxth	r2, r2
 800eb06:	9202      	str	r2, [sp, #8]
 800eb08:	9301      	str	r3, [sp, #4]
 800eb0a:	4b15      	ldr	r3, [pc, #84]	; (800eb60 <tcp_input+0x810>)
 800eb0c:	9300      	str	r3, [sp, #0]
 800eb0e:	4b15      	ldr	r3, [pc, #84]	; (800eb64 <tcp_input+0x814>)
 800eb10:	4602      	mov	r2, r0
 800eb12:	2000      	movs	r0, #0
 800eb14:	f003 f81c 	bl	8011b50 <tcp_rst>
    pbuf_free(p);
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f7fd fc2d 	bl	800c378 <pbuf_free>
  return;
 800eb1e:	e00c      	b.n	800eb3a <tcp_input+0x7ea>
    goto dropped;
 800eb20:	bf00      	nop
 800eb22:	e006      	b.n	800eb32 <tcp_input+0x7e2>
    goto dropped;
 800eb24:	bf00      	nop
 800eb26:	e004      	b.n	800eb32 <tcp_input+0x7e2>
    goto dropped;
 800eb28:	bf00      	nop
 800eb2a:	e002      	b.n	800eb32 <tcp_input+0x7e2>
      goto dropped;
 800eb2c:	bf00      	nop
 800eb2e:	e000      	b.n	800eb32 <tcp_input+0x7e2>
      goto dropped;
 800eb30:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f7fd fc20 	bl	800c378 <pbuf_free>
 800eb38:	e000      	b.n	800eb3c <tcp_input+0x7ec>
  return;
 800eb3a:	bf00      	nop
}
 800eb3c:	3724      	adds	r7, #36	; 0x24
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd90      	pop	{r4, r7, pc}
 800eb42:	bf00      	nop
 800eb44:	240074dc 	.word	0x240074dc
 800eb48:	240074d8 	.word	0x240074d8
 800eb4c:	240074a8 	.word	0x240074a8
 800eb50:	240074b8 	.word	0x240074b8
 800eb54:	240074cc 	.word	0x240074cc
 800eb58:	240074d2 	.word	0x240074d2
 800eb5c:	240074c8 	.word	0x240074c8
 800eb60:	2400438c 	.word	0x2400438c
 800eb64:	24004390 	.word	0x24004390

0800eb68 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d106      	bne.n	800eb84 <tcp_input_delayed_close+0x1c>
 800eb76:	4b17      	ldr	r3, [pc, #92]	; (800ebd4 <tcp_input_delayed_close+0x6c>)
 800eb78:	f240 225a 	movw	r2, #602	; 0x25a
 800eb7c:	4916      	ldr	r1, [pc, #88]	; (800ebd8 <tcp_input_delayed_close+0x70>)
 800eb7e:	4817      	ldr	r0, [pc, #92]	; (800ebdc <tcp_input_delayed_close+0x74>)
 800eb80:	f004 fa32 	bl	8012fe8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800eb84:	4b16      	ldr	r3, [pc, #88]	; (800ebe0 <tcp_input_delayed_close+0x78>)
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	f003 0310 	and.w	r3, r3, #16
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d01c      	beq.n	800ebca <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	8b5b      	ldrh	r3, [r3, #26]
 800eb94:	f003 0310 	and.w	r3, r3, #16
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d10d      	bne.n	800ebb8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d008      	beq.n	800ebb8 <tcp_input_delayed_close+0x50>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	6912      	ldr	r2, [r2, #16]
 800ebb0:	f06f 010e 	mvn.w	r1, #14
 800ebb4:	4610      	mov	r0, r2
 800ebb6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ebb8:	6879      	ldr	r1, [r7, #4]
 800ebba:	480a      	ldr	r0, [pc, #40]	; (800ebe4 <tcp_input_delayed_close+0x7c>)
 800ebbc:	f7ff fa50 	bl	800e060 <tcp_pcb_remove>
    tcp_free(pcb);
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f7fe f83d 	bl	800cc40 <tcp_free>
    return 1;
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e000      	b.n	800ebcc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ebca:	2300      	movs	r3, #0
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3708      	adds	r7, #8
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	08016118 	.word	0x08016118
 800ebd8:	0801633c 	.word	0x0801633c
 800ebdc:	080161b8 	.word	0x080161b8
 800ebe0:	240074d5 	.word	0x240074d5
 800ebe4:	2400749c 	.word	0x2400749c

0800ebe8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ebe8:	b590      	push	{r4, r7, lr}
 800ebea:	b08b      	sub	sp, #44	; 0x2c
 800ebec:	af04      	add	r7, sp, #16
 800ebee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ebf0:	4b6f      	ldr	r3, [pc, #444]	; (800edb0 <tcp_listen_input+0x1c8>)
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	f003 0304 	and.w	r3, r3, #4
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	f040 80d2 	bne.w	800eda2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d106      	bne.n	800ec12 <tcp_listen_input+0x2a>
 800ec04:	4b6b      	ldr	r3, [pc, #428]	; (800edb4 <tcp_listen_input+0x1cc>)
 800ec06:	f240 2281 	movw	r2, #641	; 0x281
 800ec0a:	496b      	ldr	r1, [pc, #428]	; (800edb8 <tcp_listen_input+0x1d0>)
 800ec0c:	486b      	ldr	r0, [pc, #428]	; (800edbc <tcp_listen_input+0x1d4>)
 800ec0e:	f004 f9eb 	bl	8012fe8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ec12:	4b67      	ldr	r3, [pc, #412]	; (800edb0 <tcp_listen_input+0x1c8>)
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	f003 0310 	and.w	r3, r3, #16
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d019      	beq.n	800ec52 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec1e:	4b68      	ldr	r3, [pc, #416]	; (800edc0 <tcp_listen_input+0x1d8>)
 800ec20:	6819      	ldr	r1, [r3, #0]
 800ec22:	4b68      	ldr	r3, [pc, #416]	; (800edc4 <tcp_listen_input+0x1dc>)
 800ec24:	881b      	ldrh	r3, [r3, #0]
 800ec26:	461a      	mov	r2, r3
 800ec28:	4b67      	ldr	r3, [pc, #412]	; (800edc8 <tcp_listen_input+0x1e0>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec2e:	4b67      	ldr	r3, [pc, #412]	; (800edcc <tcp_listen_input+0x1e4>)
 800ec30:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec32:	885b      	ldrh	r3, [r3, #2]
 800ec34:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec36:	4a65      	ldr	r2, [pc, #404]	; (800edcc <tcp_listen_input+0x1e4>)
 800ec38:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec3a:	8812      	ldrh	r2, [r2, #0]
 800ec3c:	b292      	uxth	r2, r2
 800ec3e:	9202      	str	r2, [sp, #8]
 800ec40:	9301      	str	r3, [sp, #4]
 800ec42:	4b63      	ldr	r3, [pc, #396]	; (800edd0 <tcp_listen_input+0x1e8>)
 800ec44:	9300      	str	r3, [sp, #0]
 800ec46:	4b63      	ldr	r3, [pc, #396]	; (800edd4 <tcp_listen_input+0x1ec>)
 800ec48:	4602      	mov	r2, r0
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f002 ff80 	bl	8011b50 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ec50:	e0a9      	b.n	800eda6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ec52:	4b57      	ldr	r3, [pc, #348]	; (800edb0 <tcp_listen_input+0x1c8>)
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	f003 0302 	and.w	r3, r3, #2
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	f000 80a3 	beq.w	800eda6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	7d5b      	ldrb	r3, [r3, #21]
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7ff f927 	bl	800deb8 <tcp_alloc>
 800ec6a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d111      	bne.n	800ec96 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	699b      	ldr	r3, [r3, #24]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00a      	beq.n	800ec90 <tcp_listen_input+0xa8>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	699b      	ldr	r3, [r3, #24]
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	6910      	ldr	r0, [r2, #16]
 800ec82:	f04f 32ff 	mov.w	r2, #4294967295
 800ec86:	2100      	movs	r1, #0
 800ec88:	4798      	blx	r3
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	73bb      	strb	r3, [r7, #14]
      return;
 800ec8e:	e08b      	b.n	800eda8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ec90:	23f0      	movs	r3, #240	; 0xf0
 800ec92:	73bb      	strb	r3, [r7, #14]
      return;
 800ec94:	e088      	b.n	800eda8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ec96:	4b50      	ldr	r3, [pc, #320]	; (800edd8 <tcp_listen_input+0x1f0>)
 800ec98:	695a      	ldr	r2, [r3, #20]
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ec9e:	4b4e      	ldr	r3, [pc, #312]	; (800edd8 <tcp_listen_input+0x1f0>)
 800eca0:	691a      	ldr	r2, [r3, #16]
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	8ada      	ldrh	r2, [r3, #22]
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ecae:	4b47      	ldr	r3, [pc, #284]	; (800edcc <tcp_listen_input+0x1e4>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	881b      	ldrh	r3, [r3, #0]
 800ecb4:	b29a      	uxth	r2, r3
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	2203      	movs	r2, #3
 800ecbe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ecc0:	4b41      	ldr	r3, [pc, #260]	; (800edc8 <tcp_listen_input+0x1e0>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	1c5a      	adds	r2, r3, #1
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ecd2:	6978      	ldr	r0, [r7, #20]
 800ecd4:	f7ff fa58 	bl	800e188 <tcp_next_iss>
 800ecd8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	693a      	ldr	r2, [r7, #16]
 800ecde:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	693a      	ldr	r2, [r7, #16]
 800ece4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	693a      	ldr	r2, [r7, #16]
 800ecea:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	693a      	ldr	r2, [r7, #16]
 800ecf0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ecf2:	4b35      	ldr	r3, [pc, #212]	; (800edc8 <tcp_listen_input+0x1e0>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	1e5a      	subs	r2, r3, #1
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	691a      	ldr	r2, [r3, #16]
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	7a5b      	ldrb	r3, [r3, #9]
 800ed0e:	f003 030c 	and.w	r3, r3, #12
 800ed12:	b2da      	uxtb	r2, r3
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	7a1a      	ldrb	r2, [r3, #8]
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ed20:	4b2e      	ldr	r3, [pc, #184]	; (800eddc <tcp_listen_input+0x1f4>)
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	60da      	str	r2, [r3, #12]
 800ed28:	4a2c      	ldr	r2, [pc, #176]	; (800eddc <tcp_listen_input+0x1f4>)
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	6013      	str	r3, [r2, #0]
 800ed2e:	f003 fa73 	bl	8012218 <tcp_timer_needed>
 800ed32:	4b2b      	ldr	r3, [pc, #172]	; (800ede0 <tcp_listen_input+0x1f8>)
 800ed34:	2201      	movs	r2, #1
 800ed36:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ed38:	6978      	ldr	r0, [r7, #20]
 800ed3a:	f001 fd8f 	bl	801085c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ed3e:	4b23      	ldr	r3, [pc, #140]	; (800edcc <tcp_listen_input+0x1e4>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	89db      	ldrh	r3, [r3, #14]
 800ed44:	b29a      	uxth	r2, r3
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	3304      	adds	r3, #4
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7fa fe3b 	bl	80099dc <ip4_route>
 800ed66:	4601      	mov	r1, r0
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	3304      	adds	r3, #4
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	4620      	mov	r0, r4
 800ed70:	f7ff fa30 	bl	800e1d4 <tcp_eff_send_mss_netif>
 800ed74:	4603      	mov	r3, r0
 800ed76:	461a      	mov	r2, r3
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ed7c:	2112      	movs	r1, #18
 800ed7e:	6978      	ldr	r0, [r7, #20]
 800ed80:	f002 f844 	bl	8010e0c <tcp_enqueue_flags>
 800ed84:	4603      	mov	r3, r0
 800ed86:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ed88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d004      	beq.n	800ed9a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ed90:	2100      	movs	r1, #0
 800ed92:	6978      	ldr	r0, [r7, #20]
 800ed94:	f7fe f97e 	bl	800d094 <tcp_abandon>
      return;
 800ed98:	e006      	b.n	800eda8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ed9a:	6978      	ldr	r0, [r7, #20]
 800ed9c:	f002 f924 	bl	8010fe8 <tcp_output>
  return;
 800eda0:	e001      	b.n	800eda6 <tcp_listen_input+0x1be>
    return;
 800eda2:	bf00      	nop
 800eda4:	e000      	b.n	800eda8 <tcp_listen_input+0x1c0>
  return;
 800eda6:	bf00      	nop
}
 800eda8:	371c      	adds	r7, #28
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd90      	pop	{r4, r7, pc}
 800edae:	bf00      	nop
 800edb0:	240074d4 	.word	0x240074d4
 800edb4:	08016118 	.word	0x08016118
 800edb8:	08016364 	.word	0x08016364
 800edbc:	080161b8 	.word	0x080161b8
 800edc0:	240074cc 	.word	0x240074cc
 800edc4:	240074d2 	.word	0x240074d2
 800edc8:	240074c8 	.word	0x240074c8
 800edcc:	240074b8 	.word	0x240074b8
 800edd0:	2400438c 	.word	0x2400438c
 800edd4:	24004390 	.word	0x24004390
 800edd8:	2400437c 	.word	0x2400437c
 800eddc:	2400749c 	.word	0x2400749c
 800ede0:	240074a4 	.word	0x240074a4

0800ede4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b086      	sub	sp, #24
 800ede8:	af04      	add	r7, sp, #16
 800edea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800edec:	4b2f      	ldr	r3, [pc, #188]	; (800eeac <tcp_timewait_input+0xc8>)
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	f003 0304 	and.w	r3, r3, #4
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d153      	bne.n	800eea0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d106      	bne.n	800ee0c <tcp_timewait_input+0x28>
 800edfe:	4b2c      	ldr	r3, [pc, #176]	; (800eeb0 <tcp_timewait_input+0xcc>)
 800ee00:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ee04:	492b      	ldr	r1, [pc, #172]	; (800eeb4 <tcp_timewait_input+0xd0>)
 800ee06:	482c      	ldr	r0, [pc, #176]	; (800eeb8 <tcp_timewait_input+0xd4>)
 800ee08:	f004 f8ee 	bl	8012fe8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ee0c:	4b27      	ldr	r3, [pc, #156]	; (800eeac <tcp_timewait_input+0xc8>)
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	f003 0302 	and.w	r3, r3, #2
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d02a      	beq.n	800ee6e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ee18:	4b28      	ldr	r3, [pc, #160]	; (800eebc <tcp_timewait_input+0xd8>)
 800ee1a:	681a      	ldr	r2, [r3, #0]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee20:	1ad3      	subs	r3, r2, r3
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	db2d      	blt.n	800ee82 <tcp_timewait_input+0x9e>
 800ee26:	4b25      	ldr	r3, [pc, #148]	; (800eebc <tcp_timewait_input+0xd8>)
 800ee28:	681a      	ldr	r2, [r3, #0]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee2e:	6879      	ldr	r1, [r7, #4]
 800ee30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee32:	440b      	add	r3, r1
 800ee34:	1ad3      	subs	r3, r2, r3
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	dc23      	bgt.n	800ee82 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee3a:	4b21      	ldr	r3, [pc, #132]	; (800eec0 <tcp_timewait_input+0xdc>)
 800ee3c:	6819      	ldr	r1, [r3, #0]
 800ee3e:	4b21      	ldr	r3, [pc, #132]	; (800eec4 <tcp_timewait_input+0xe0>)
 800ee40:	881b      	ldrh	r3, [r3, #0]
 800ee42:	461a      	mov	r2, r3
 800ee44:	4b1d      	ldr	r3, [pc, #116]	; (800eebc <tcp_timewait_input+0xd8>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee4a:	4b1f      	ldr	r3, [pc, #124]	; (800eec8 <tcp_timewait_input+0xe4>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee4e:	885b      	ldrh	r3, [r3, #2]
 800ee50:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee52:	4a1d      	ldr	r2, [pc, #116]	; (800eec8 <tcp_timewait_input+0xe4>)
 800ee54:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee56:	8812      	ldrh	r2, [r2, #0]
 800ee58:	b292      	uxth	r2, r2
 800ee5a:	9202      	str	r2, [sp, #8]
 800ee5c:	9301      	str	r3, [sp, #4]
 800ee5e:	4b1b      	ldr	r3, [pc, #108]	; (800eecc <tcp_timewait_input+0xe8>)
 800ee60:	9300      	str	r3, [sp, #0]
 800ee62:	4b1b      	ldr	r3, [pc, #108]	; (800eed0 <tcp_timewait_input+0xec>)
 800ee64:	4602      	mov	r2, r0
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f002 fe72 	bl	8011b50 <tcp_rst>
      return;
 800ee6c:	e01b      	b.n	800eea6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ee6e:	4b0f      	ldr	r3, [pc, #60]	; (800eeac <tcp_timewait_input+0xc8>)
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	f003 0301 	and.w	r3, r3, #1
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d003      	beq.n	800ee82 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ee7a:	4b16      	ldr	r3, [pc, #88]	; (800eed4 <tcp_timewait_input+0xf0>)
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ee82:	4b10      	ldr	r3, [pc, #64]	; (800eec4 <tcp_timewait_input+0xe0>)
 800ee84:	881b      	ldrh	r3, [r3, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d00c      	beq.n	800eea4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	8b5b      	ldrh	r3, [r3, #26]
 800ee8e:	f043 0302 	orr.w	r3, r3, #2
 800ee92:	b29a      	uxth	r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f002 f8a5 	bl	8010fe8 <tcp_output>
  }
  return;
 800ee9e:	e001      	b.n	800eea4 <tcp_timewait_input+0xc0>
    return;
 800eea0:	bf00      	nop
 800eea2:	e000      	b.n	800eea6 <tcp_timewait_input+0xc2>
  return;
 800eea4:	bf00      	nop
}
 800eea6:	3708      	adds	r7, #8
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	240074d4 	.word	0x240074d4
 800eeb0:	08016118 	.word	0x08016118
 800eeb4:	08016384 	.word	0x08016384
 800eeb8:	080161b8 	.word	0x080161b8
 800eebc:	240074c8 	.word	0x240074c8
 800eec0:	240074cc 	.word	0x240074cc
 800eec4:	240074d2 	.word	0x240074d2
 800eec8:	240074b8 	.word	0x240074b8
 800eecc:	2400438c 	.word	0x2400438c
 800eed0:	24004390 	.word	0x24004390
 800eed4:	24007490 	.word	0x24007490

0800eed8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800eed8:	b590      	push	{r4, r7, lr}
 800eeda:	b08d      	sub	sp, #52	; 0x34
 800eedc:	af04      	add	r7, sp, #16
 800eede:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800eee0:	2300      	movs	r3, #0
 800eee2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800eee4:	2300      	movs	r3, #0
 800eee6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d106      	bne.n	800eefc <tcp_process+0x24>
 800eeee:	4b9d      	ldr	r3, [pc, #628]	; (800f164 <tcp_process+0x28c>)
 800eef0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800eef4:	499c      	ldr	r1, [pc, #624]	; (800f168 <tcp_process+0x290>)
 800eef6:	489d      	ldr	r0, [pc, #628]	; (800f16c <tcp_process+0x294>)
 800eef8:	f004 f876 	bl	8012fe8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800eefc:	4b9c      	ldr	r3, [pc, #624]	; (800f170 <tcp_process+0x298>)
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	f003 0304 	and.w	r3, r3, #4
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d04e      	beq.n	800efa6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	7d1b      	ldrb	r3, [r3, #20]
 800ef0c:	2b02      	cmp	r3, #2
 800ef0e:	d108      	bne.n	800ef22 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef14:	4b97      	ldr	r3, [pc, #604]	; (800f174 <tcp_process+0x29c>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d123      	bne.n	800ef64 <tcp_process+0x8c>
        acceptable = 1;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	76fb      	strb	r3, [r7, #27]
 800ef20:	e020      	b.n	800ef64 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef26:	4b94      	ldr	r3, [pc, #592]	; (800f178 <tcp_process+0x2a0>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d102      	bne.n	800ef34 <tcp_process+0x5c>
        acceptable = 1;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	76fb      	strb	r3, [r7, #27]
 800ef32:	e017      	b.n	800ef64 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ef34:	4b90      	ldr	r3, [pc, #576]	; (800f178 <tcp_process+0x2a0>)
 800ef36:	681a      	ldr	r2, [r3, #0]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef3c:	1ad3      	subs	r3, r2, r3
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	db10      	blt.n	800ef64 <tcp_process+0x8c>
 800ef42:	4b8d      	ldr	r3, [pc, #564]	; (800f178 <tcp_process+0x2a0>)
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef4a:	6879      	ldr	r1, [r7, #4]
 800ef4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ef4e:	440b      	add	r3, r1
 800ef50:	1ad3      	subs	r3, r2, r3
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	dc06      	bgt.n	800ef64 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	8b5b      	ldrh	r3, [r3, #26]
 800ef5a:	f043 0302 	orr.w	r3, r3, #2
 800ef5e:	b29a      	uxth	r2, r3
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ef64:	7efb      	ldrb	r3, [r7, #27]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d01b      	beq.n	800efa2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	7d1b      	ldrb	r3, [r3, #20]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d106      	bne.n	800ef80 <tcp_process+0xa8>
 800ef72:	4b7c      	ldr	r3, [pc, #496]	; (800f164 <tcp_process+0x28c>)
 800ef74:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ef78:	4980      	ldr	r1, [pc, #512]	; (800f17c <tcp_process+0x2a4>)
 800ef7a:	487c      	ldr	r0, [pc, #496]	; (800f16c <tcp_process+0x294>)
 800ef7c:	f004 f834 	bl	8012fe8 <iprintf>
      recv_flags |= TF_RESET;
 800ef80:	4b7f      	ldr	r3, [pc, #508]	; (800f180 <tcp_process+0x2a8>)
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	f043 0308 	orr.w	r3, r3, #8
 800ef88:	b2da      	uxtb	r2, r3
 800ef8a:	4b7d      	ldr	r3, [pc, #500]	; (800f180 <tcp_process+0x2a8>)
 800ef8c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	8b5b      	ldrh	r3, [r3, #26]
 800ef92:	f023 0301 	bic.w	r3, r3, #1
 800ef96:	b29a      	uxth	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ef9c:	f06f 030d 	mvn.w	r3, #13
 800efa0:	e37a      	b.n	800f698 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800efa2:	2300      	movs	r3, #0
 800efa4:	e378      	b.n	800f698 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800efa6:	4b72      	ldr	r3, [pc, #456]	; (800f170 <tcp_process+0x298>)
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	f003 0302 	and.w	r3, r3, #2
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d010      	beq.n	800efd4 <tcp_process+0xfc>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	7d1b      	ldrb	r3, [r3, #20]
 800efb6:	2b02      	cmp	r3, #2
 800efb8:	d00c      	beq.n	800efd4 <tcp_process+0xfc>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	7d1b      	ldrb	r3, [r3, #20]
 800efbe:	2b03      	cmp	r3, #3
 800efc0:	d008      	beq.n	800efd4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	8b5b      	ldrh	r3, [r3, #26]
 800efc6:	f043 0302 	orr.w	r3, r3, #2
 800efca:	b29a      	uxth	r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800efd0:	2300      	movs	r3, #0
 800efd2:	e361      	b.n	800f698 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	8b5b      	ldrh	r3, [r3, #26]
 800efd8:	f003 0310 	and.w	r3, r3, #16
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d103      	bne.n	800efe8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800efe0:	4b68      	ldr	r3, [pc, #416]	; (800f184 <tcp_process+0x2ac>)
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2200      	movs	r2, #0
 800efec:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2200      	movs	r2, #0
 800eff4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f001 fc2f 	bl	801085c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	7d1b      	ldrb	r3, [r3, #20]
 800f002:	3b02      	subs	r3, #2
 800f004:	2b07      	cmp	r3, #7
 800f006:	f200 8337 	bhi.w	800f678 <tcp_process+0x7a0>
 800f00a:	a201      	add	r2, pc, #4	; (adr r2, 800f010 <tcp_process+0x138>)
 800f00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f010:	0800f031 	.word	0x0800f031
 800f014:	0800f261 	.word	0x0800f261
 800f018:	0800f3d9 	.word	0x0800f3d9
 800f01c:	0800f403 	.word	0x0800f403
 800f020:	0800f527 	.word	0x0800f527
 800f024:	0800f3d9 	.word	0x0800f3d9
 800f028:	0800f5b3 	.word	0x0800f5b3
 800f02c:	0800f643 	.word	0x0800f643
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f030:	4b4f      	ldr	r3, [pc, #316]	; (800f170 <tcp_process+0x298>)
 800f032:	781b      	ldrb	r3, [r3, #0]
 800f034:	f003 0310 	and.w	r3, r3, #16
 800f038:	2b00      	cmp	r3, #0
 800f03a:	f000 80e4 	beq.w	800f206 <tcp_process+0x32e>
 800f03e:	4b4c      	ldr	r3, [pc, #304]	; (800f170 <tcp_process+0x298>)
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	f003 0302 	and.w	r3, r3, #2
 800f046:	2b00      	cmp	r3, #0
 800f048:	f000 80dd 	beq.w	800f206 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f050:	1c5a      	adds	r2, r3, #1
 800f052:	4b48      	ldr	r3, [pc, #288]	; (800f174 <tcp_process+0x29c>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	429a      	cmp	r2, r3
 800f058:	f040 80d5 	bne.w	800f206 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f05c:	4b46      	ldr	r3, [pc, #280]	; (800f178 <tcp_process+0x2a0>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	1c5a      	adds	r2, r3, #1
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f06e:	4b41      	ldr	r3, [pc, #260]	; (800f174 <tcp_process+0x29c>)
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f076:	4b44      	ldr	r3, [pc, #272]	; (800f188 <tcp_process+0x2b0>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	89db      	ldrh	r3, [r3, #14]
 800f07c:	b29a      	uxth	r2, r3
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f090:	4b39      	ldr	r3, [pc, #228]	; (800f178 <tcp_process+0x2a0>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	1e5a      	subs	r2, r3, #1
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2204      	movs	r2, #4
 800f09e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	3304      	adds	r3, #4
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7fa fc97 	bl	80099dc <ip4_route>
 800f0ae:	4601      	mov	r1, r0
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	3304      	adds	r3, #4
 800f0b4:	461a      	mov	r2, r3
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	f7ff f88c 	bl	800e1d4 <tcp_eff_send_mss_netif>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	461a      	mov	r2, r3
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0c8:	009a      	lsls	r2, r3, #2
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0ce:	005b      	lsls	r3, r3, #1
 800f0d0:	f241 111c 	movw	r1, #4380	; 0x111c
 800f0d4:	428b      	cmp	r3, r1
 800f0d6:	bf38      	it	cc
 800f0d8:	460b      	movcc	r3, r1
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d204      	bcs.n	800f0e8 <tcp_process+0x210>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0e2:	009b      	lsls	r3, r3, #2
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	e00d      	b.n	800f104 <tcp_process+0x22c>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0ec:	005b      	lsls	r3, r3, #1
 800f0ee:	f241 121c 	movw	r2, #4380	; 0x111c
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d904      	bls.n	800f100 <tcp_process+0x228>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0fa:	005b      	lsls	r3, r3, #1
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	e001      	b.n	800f104 <tcp_process+0x22c>
 800f100:	f241 131c 	movw	r3, #4380	; 0x111c
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f110:	2b00      	cmp	r3, #0
 800f112:	d106      	bne.n	800f122 <tcp_process+0x24a>
 800f114:	4b13      	ldr	r3, [pc, #76]	; (800f164 <tcp_process+0x28c>)
 800f116:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f11a:	491c      	ldr	r1, [pc, #112]	; (800f18c <tcp_process+0x2b4>)
 800f11c:	4813      	ldr	r0, [pc, #76]	; (800f16c <tcp_process+0x294>)
 800f11e:	f003 ff63 	bl	8012fe8 <iprintf>
        --pcb->snd_queuelen;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f128:	3b01      	subs	r3, #1
 800f12a:	b29a      	uxth	r2, r3
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f136:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d12a      	bne.n	800f194 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f142:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d106      	bne.n	800f158 <tcp_process+0x280>
 800f14a:	4b06      	ldr	r3, [pc, #24]	; (800f164 <tcp_process+0x28c>)
 800f14c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f150:	490f      	ldr	r1, [pc, #60]	; (800f190 <tcp_process+0x2b8>)
 800f152:	4806      	ldr	r0, [pc, #24]	; (800f16c <tcp_process+0x294>)
 800f154:	f003 ff48 	bl	8012fe8 <iprintf>
          pcb->unsent = rseg->next;
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	66da      	str	r2, [r3, #108]	; 0x6c
 800f160:	e01c      	b.n	800f19c <tcp_process+0x2c4>
 800f162:	bf00      	nop
 800f164:	08016118 	.word	0x08016118
 800f168:	080163a4 	.word	0x080163a4
 800f16c:	080161b8 	.word	0x080161b8
 800f170:	240074d4 	.word	0x240074d4
 800f174:	240074cc 	.word	0x240074cc
 800f178:	240074c8 	.word	0x240074c8
 800f17c:	080163c0 	.word	0x080163c0
 800f180:	240074d5 	.word	0x240074d5
 800f184:	24007490 	.word	0x24007490
 800f188:	240074b8 	.word	0x240074b8
 800f18c:	080163e0 	.word	0x080163e0
 800f190:	080163f8 	.word	0x080163f8
        } else {
          pcb->unacked = rseg->next;
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f19c:	69f8      	ldr	r0, [r7, #28]
 800f19e:	f7fe fd22 	bl	800dbe6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d104      	bne.n	800f1b4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1b0:	861a      	strh	r2, [r3, #48]	; 0x30
 800f1b2:	e006      	b.n	800f1c2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d00a      	beq.n	800f1e2 <tcp_process+0x30a>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	6910      	ldr	r0, [r2, #16]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	6879      	ldr	r1, [r7, #4]
 800f1da:	4798      	blx	r3
 800f1dc:	4603      	mov	r3, r0
 800f1de:	76bb      	strb	r3, [r7, #26]
 800f1e0:	e001      	b.n	800f1e6 <tcp_process+0x30e>
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f1e6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f1ea:	f113 0f0d 	cmn.w	r3, #13
 800f1ee:	d102      	bne.n	800f1f6 <tcp_process+0x31e>
          return ERR_ABRT;
 800f1f0:	f06f 030c 	mvn.w	r3, #12
 800f1f4:	e250      	b.n	800f698 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	8b5b      	ldrh	r3, [r3, #26]
 800f1fa:	f043 0302 	orr.w	r3, r3, #2
 800f1fe:	b29a      	uxth	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f204:	e23a      	b.n	800f67c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f206:	4b98      	ldr	r3, [pc, #608]	; (800f468 <tcp_process+0x590>)
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	f003 0310 	and.w	r3, r3, #16
 800f20e:	2b00      	cmp	r3, #0
 800f210:	f000 8234 	beq.w	800f67c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f214:	4b95      	ldr	r3, [pc, #596]	; (800f46c <tcp_process+0x594>)
 800f216:	6819      	ldr	r1, [r3, #0]
 800f218:	4b95      	ldr	r3, [pc, #596]	; (800f470 <tcp_process+0x598>)
 800f21a:	881b      	ldrh	r3, [r3, #0]
 800f21c:	461a      	mov	r2, r3
 800f21e:	4b95      	ldr	r3, [pc, #596]	; (800f474 <tcp_process+0x59c>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f224:	4b94      	ldr	r3, [pc, #592]	; (800f478 <tcp_process+0x5a0>)
 800f226:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f228:	885b      	ldrh	r3, [r3, #2]
 800f22a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f22c:	4a92      	ldr	r2, [pc, #584]	; (800f478 <tcp_process+0x5a0>)
 800f22e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f230:	8812      	ldrh	r2, [r2, #0]
 800f232:	b292      	uxth	r2, r2
 800f234:	9202      	str	r2, [sp, #8]
 800f236:	9301      	str	r3, [sp, #4]
 800f238:	4b90      	ldr	r3, [pc, #576]	; (800f47c <tcp_process+0x5a4>)
 800f23a:	9300      	str	r3, [sp, #0]
 800f23c:	4b90      	ldr	r3, [pc, #576]	; (800f480 <tcp_process+0x5a8>)
 800f23e:	4602      	mov	r2, r0
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f002 fc85 	bl	8011b50 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f24c:	2b05      	cmp	r3, #5
 800f24e:	f200 8215 	bhi.w	800f67c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2200      	movs	r2, #0
 800f256:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f002 fa4f 	bl	80116fc <tcp_rexmit_rto>
      break;
 800f25e:	e20d      	b.n	800f67c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f260:	4b81      	ldr	r3, [pc, #516]	; (800f468 <tcp_process+0x590>)
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	f003 0310 	and.w	r3, r3, #16
 800f268:	2b00      	cmp	r3, #0
 800f26a:	f000 80a1 	beq.w	800f3b0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f26e:	4b7f      	ldr	r3, [pc, #508]	; (800f46c <tcp_process+0x594>)
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f276:	1ad3      	subs	r3, r2, r3
 800f278:	3b01      	subs	r3, #1
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	db7e      	blt.n	800f37c <tcp_process+0x4a4>
 800f27e:	4b7b      	ldr	r3, [pc, #492]	; (800f46c <tcp_process+0x594>)
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f286:	1ad3      	subs	r3, r2, r3
 800f288:	2b00      	cmp	r3, #0
 800f28a:	dc77      	bgt.n	800f37c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2204      	movs	r2, #4
 800f290:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f296:	2b00      	cmp	r3, #0
 800f298:	d102      	bne.n	800f2a0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f29a:	23fa      	movs	r3, #250	; 0xfa
 800f29c:	76bb      	strb	r3, [r7, #26]
 800f29e:	e01d      	b.n	800f2dc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2a4:	699b      	ldr	r3, [r3, #24]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d106      	bne.n	800f2b8 <tcp_process+0x3e0>
 800f2aa:	4b76      	ldr	r3, [pc, #472]	; (800f484 <tcp_process+0x5ac>)
 800f2ac:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f2b0:	4975      	ldr	r1, [pc, #468]	; (800f488 <tcp_process+0x5b0>)
 800f2b2:	4876      	ldr	r0, [pc, #472]	; (800f48c <tcp_process+0x5b4>)
 800f2b4:	f003 fe98 	bl	8012fe8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2bc:	699b      	ldr	r3, [r3, #24]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d00a      	beq.n	800f2d8 <tcp_process+0x400>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f2c6:	699b      	ldr	r3, [r3, #24]
 800f2c8:	687a      	ldr	r2, [r7, #4]
 800f2ca:	6910      	ldr	r0, [r2, #16]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	6879      	ldr	r1, [r7, #4]
 800f2d0:	4798      	blx	r3
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	76bb      	strb	r3, [r7, #26]
 800f2d6:	e001      	b.n	800f2dc <tcp_process+0x404>
 800f2d8:	23f0      	movs	r3, #240	; 0xf0
 800f2da:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f2dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d00a      	beq.n	800f2fa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f2e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f2e8:	f113 0f0d 	cmn.w	r3, #13
 800f2ec:	d002      	beq.n	800f2f4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f7fd ff8e 	bl	800d210 <tcp_abort>
            }
            return ERR_ABRT;
 800f2f4:	f06f 030c 	mvn.w	r3, #12
 800f2f8:	e1ce      	b.n	800f698 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f000 fae0 	bl	800f8c0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f300:	4b63      	ldr	r3, [pc, #396]	; (800f490 <tcp_process+0x5b8>)
 800f302:	881b      	ldrh	r3, [r3, #0]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d005      	beq.n	800f314 <tcp_process+0x43c>
            recv_acked--;
 800f308:	4b61      	ldr	r3, [pc, #388]	; (800f490 <tcp_process+0x5b8>)
 800f30a:	881b      	ldrh	r3, [r3, #0]
 800f30c:	3b01      	subs	r3, #1
 800f30e:	b29a      	uxth	r2, r3
 800f310:	4b5f      	ldr	r3, [pc, #380]	; (800f490 <tcp_process+0x5b8>)
 800f312:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f318:	009a      	lsls	r2, r3, #2
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f31e:	005b      	lsls	r3, r3, #1
 800f320:	f241 111c 	movw	r1, #4380	; 0x111c
 800f324:	428b      	cmp	r3, r1
 800f326:	bf38      	it	cc
 800f328:	460b      	movcc	r3, r1
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d204      	bcs.n	800f338 <tcp_process+0x460>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	b29b      	uxth	r3, r3
 800f336:	e00d      	b.n	800f354 <tcp_process+0x47c>
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f33c:	005b      	lsls	r3, r3, #1
 800f33e:	f241 121c 	movw	r2, #4380	; 0x111c
 800f342:	4293      	cmp	r3, r2
 800f344:	d904      	bls.n	800f350 <tcp_process+0x478>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f34a:	005b      	lsls	r3, r3, #1
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	e001      	b.n	800f354 <tcp_process+0x47c>
 800f350:	f241 131c 	movw	r3, #4380	; 0x111c
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f35a:	4b4e      	ldr	r3, [pc, #312]	; (800f494 <tcp_process+0x5bc>)
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	f003 0320 	and.w	r3, r3, #32
 800f362:	2b00      	cmp	r3, #0
 800f364:	d037      	beq.n	800f3d6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	8b5b      	ldrh	r3, [r3, #26]
 800f36a:	f043 0302 	orr.w	r3, r3, #2
 800f36e:	b29a      	uxth	r2, r3
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2207      	movs	r2, #7
 800f378:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f37a:	e02c      	b.n	800f3d6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f37c:	4b3b      	ldr	r3, [pc, #236]	; (800f46c <tcp_process+0x594>)
 800f37e:	6819      	ldr	r1, [r3, #0]
 800f380:	4b3b      	ldr	r3, [pc, #236]	; (800f470 <tcp_process+0x598>)
 800f382:	881b      	ldrh	r3, [r3, #0]
 800f384:	461a      	mov	r2, r3
 800f386:	4b3b      	ldr	r3, [pc, #236]	; (800f474 <tcp_process+0x59c>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f38c:	4b3a      	ldr	r3, [pc, #232]	; (800f478 <tcp_process+0x5a0>)
 800f38e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f390:	885b      	ldrh	r3, [r3, #2]
 800f392:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f394:	4a38      	ldr	r2, [pc, #224]	; (800f478 <tcp_process+0x5a0>)
 800f396:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f398:	8812      	ldrh	r2, [r2, #0]
 800f39a:	b292      	uxth	r2, r2
 800f39c:	9202      	str	r2, [sp, #8]
 800f39e:	9301      	str	r3, [sp, #4]
 800f3a0:	4b36      	ldr	r3, [pc, #216]	; (800f47c <tcp_process+0x5a4>)
 800f3a2:	9300      	str	r3, [sp, #0]
 800f3a4:	4b36      	ldr	r3, [pc, #216]	; (800f480 <tcp_process+0x5a8>)
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f002 fbd1 	bl	8011b50 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f3ae:	e167      	b.n	800f680 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f3b0:	4b2d      	ldr	r3, [pc, #180]	; (800f468 <tcp_process+0x590>)
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	f003 0302 	and.w	r3, r3, #2
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	f000 8161 	beq.w	800f680 <tcp_process+0x7a8>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c2:	1e5a      	subs	r2, r3, #1
 800f3c4:	4b2b      	ldr	r3, [pc, #172]	; (800f474 <tcp_process+0x59c>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	f040 8159 	bne.w	800f680 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f002 f9b6 	bl	8011740 <tcp_rexmit>
      break;
 800f3d4:	e154      	b.n	800f680 <tcp_process+0x7a8>
 800f3d6:	e153      	b.n	800f680 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f000 fa71 	bl	800f8c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f3de:	4b2d      	ldr	r3, [pc, #180]	; (800f494 <tcp_process+0x5bc>)
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	f003 0320 	and.w	r3, r3, #32
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	f000 814c 	beq.w	800f684 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	8b5b      	ldrh	r3, [r3, #26]
 800f3f0:	f043 0302 	orr.w	r3, r3, #2
 800f3f4:	b29a      	uxth	r2, r3
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2207      	movs	r2, #7
 800f3fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f400:	e140      	b.n	800f684 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f000 fa5c 	bl	800f8c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f408:	4b22      	ldr	r3, [pc, #136]	; (800f494 <tcp_process+0x5bc>)
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	f003 0320 	and.w	r3, r3, #32
 800f410:	2b00      	cmp	r3, #0
 800f412:	d071      	beq.n	800f4f8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f414:	4b14      	ldr	r3, [pc, #80]	; (800f468 <tcp_process+0x590>)
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	f003 0310 	and.w	r3, r3, #16
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d060      	beq.n	800f4e2 <tcp_process+0x60a>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f424:	4b11      	ldr	r3, [pc, #68]	; (800f46c <tcp_process+0x594>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	429a      	cmp	r2, r3
 800f42a:	d15a      	bne.n	800f4e2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f430:	2b00      	cmp	r3, #0
 800f432:	d156      	bne.n	800f4e2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	8b5b      	ldrh	r3, [r3, #26]
 800f438:	f043 0302 	orr.w	r3, r3, #2
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f7fe fdbc 	bl	800dfc0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f448:	4b13      	ldr	r3, [pc, #76]	; (800f498 <tcp_process+0x5c0>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	687a      	ldr	r2, [r7, #4]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d105      	bne.n	800f45e <tcp_process+0x586>
 800f452:	4b11      	ldr	r3, [pc, #68]	; (800f498 <tcp_process+0x5c0>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	4a0f      	ldr	r2, [pc, #60]	; (800f498 <tcp_process+0x5c0>)
 800f45a:	6013      	str	r3, [r2, #0]
 800f45c:	e02e      	b.n	800f4bc <tcp_process+0x5e4>
 800f45e:	4b0e      	ldr	r3, [pc, #56]	; (800f498 <tcp_process+0x5c0>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	617b      	str	r3, [r7, #20]
 800f464:	e027      	b.n	800f4b6 <tcp_process+0x5de>
 800f466:	bf00      	nop
 800f468:	240074d4 	.word	0x240074d4
 800f46c:	240074cc 	.word	0x240074cc
 800f470:	240074d2 	.word	0x240074d2
 800f474:	240074c8 	.word	0x240074c8
 800f478:	240074b8 	.word	0x240074b8
 800f47c:	2400438c 	.word	0x2400438c
 800f480:	24004390 	.word	0x24004390
 800f484:	08016118 	.word	0x08016118
 800f488:	0801640c 	.word	0x0801640c
 800f48c:	080161b8 	.word	0x080161b8
 800f490:	240074d0 	.word	0x240074d0
 800f494:	240074d5 	.word	0x240074d5
 800f498:	2400749c 	.word	0x2400749c
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	687a      	ldr	r2, [r7, #4]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d104      	bne.n	800f4b0 <tcp_process+0x5d8>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	68da      	ldr	r2, [r3, #12]
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	60da      	str	r2, [r3, #12]
 800f4ae:	e005      	b.n	800f4bc <tcp_process+0x5e4>
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	617b      	str	r3, [r7, #20]
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1ef      	bne.n	800f49c <tcp_process+0x5c4>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	60da      	str	r2, [r3, #12]
 800f4c2:	4b77      	ldr	r3, [pc, #476]	; (800f6a0 <tcp_process+0x7c8>)
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	220a      	movs	r2, #10
 800f4cc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f4ce:	4b75      	ldr	r3, [pc, #468]	; (800f6a4 <tcp_process+0x7cc>)
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	60da      	str	r2, [r3, #12]
 800f4d6:	4a73      	ldr	r2, [pc, #460]	; (800f6a4 <tcp_process+0x7cc>)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6013      	str	r3, [r2, #0]
 800f4dc:	f002 fe9c 	bl	8012218 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f4e0:	e0d2      	b.n	800f688 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	8b5b      	ldrh	r3, [r3, #26]
 800f4e6:	f043 0302 	orr.w	r3, r3, #2
 800f4ea:	b29a      	uxth	r2, r3
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2208      	movs	r2, #8
 800f4f4:	751a      	strb	r2, [r3, #20]
      break;
 800f4f6:	e0c7      	b.n	800f688 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f4f8:	4b6b      	ldr	r3, [pc, #428]	; (800f6a8 <tcp_process+0x7d0>)
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	f003 0310 	and.w	r3, r3, #16
 800f500:	2b00      	cmp	r3, #0
 800f502:	f000 80c1 	beq.w	800f688 <tcp_process+0x7b0>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f50a:	4b68      	ldr	r3, [pc, #416]	; (800f6ac <tcp_process+0x7d4>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	429a      	cmp	r2, r3
 800f510:	f040 80ba 	bne.w	800f688 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f518:	2b00      	cmp	r3, #0
 800f51a:	f040 80b5 	bne.w	800f688 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2206      	movs	r2, #6
 800f522:	751a      	strb	r2, [r3, #20]
      break;
 800f524:	e0b0      	b.n	800f688 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 f9ca 	bl	800f8c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f52c:	4b60      	ldr	r3, [pc, #384]	; (800f6b0 <tcp_process+0x7d8>)
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	f003 0320 	and.w	r3, r3, #32
 800f534:	2b00      	cmp	r3, #0
 800f536:	f000 80a9 	beq.w	800f68c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	8b5b      	ldrh	r3, [r3, #26]
 800f53e:	f043 0302 	orr.w	r3, r3, #2
 800f542:	b29a      	uxth	r2, r3
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f7fe fd39 	bl	800dfc0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f54e:	4b59      	ldr	r3, [pc, #356]	; (800f6b4 <tcp_process+0x7dc>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	429a      	cmp	r2, r3
 800f556:	d105      	bne.n	800f564 <tcp_process+0x68c>
 800f558:	4b56      	ldr	r3, [pc, #344]	; (800f6b4 <tcp_process+0x7dc>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	4a55      	ldr	r2, [pc, #340]	; (800f6b4 <tcp_process+0x7dc>)
 800f560:	6013      	str	r3, [r2, #0]
 800f562:	e013      	b.n	800f58c <tcp_process+0x6b4>
 800f564:	4b53      	ldr	r3, [pc, #332]	; (800f6b4 <tcp_process+0x7dc>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	613b      	str	r3, [r7, #16]
 800f56a:	e00c      	b.n	800f586 <tcp_process+0x6ae>
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	429a      	cmp	r2, r3
 800f574:	d104      	bne.n	800f580 <tcp_process+0x6a8>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	68da      	ldr	r2, [r3, #12]
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	60da      	str	r2, [r3, #12]
 800f57e:	e005      	b.n	800f58c <tcp_process+0x6b4>
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	68db      	ldr	r3, [r3, #12]
 800f584:	613b      	str	r3, [r7, #16]
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d1ef      	bne.n	800f56c <tcp_process+0x694>
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2200      	movs	r2, #0
 800f590:	60da      	str	r2, [r3, #12]
 800f592:	4b43      	ldr	r3, [pc, #268]	; (800f6a0 <tcp_process+0x7c8>)
 800f594:	2201      	movs	r2, #1
 800f596:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	220a      	movs	r2, #10
 800f59c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f59e:	4b41      	ldr	r3, [pc, #260]	; (800f6a4 <tcp_process+0x7cc>)
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	60da      	str	r2, [r3, #12]
 800f5a6:	4a3f      	ldr	r2, [pc, #252]	; (800f6a4 <tcp_process+0x7cc>)
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6013      	str	r3, [r2, #0]
 800f5ac:	f002 fe34 	bl	8012218 <tcp_timer_needed>
      }
      break;
 800f5b0:	e06c      	b.n	800f68c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 f984 	bl	800f8c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f5b8:	4b3b      	ldr	r3, [pc, #236]	; (800f6a8 <tcp_process+0x7d0>)
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	f003 0310 	and.w	r3, r3, #16
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d065      	beq.n	800f690 <tcp_process+0x7b8>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f5c8:	4b38      	ldr	r3, [pc, #224]	; (800f6ac <tcp_process+0x7d4>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d15f      	bne.n	800f690 <tcp_process+0x7b8>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d15b      	bne.n	800f690 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7fe fcf1 	bl	800dfc0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f5de:	4b35      	ldr	r3, [pc, #212]	; (800f6b4 <tcp_process+0x7dc>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d105      	bne.n	800f5f4 <tcp_process+0x71c>
 800f5e8:	4b32      	ldr	r3, [pc, #200]	; (800f6b4 <tcp_process+0x7dc>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	4a31      	ldr	r2, [pc, #196]	; (800f6b4 <tcp_process+0x7dc>)
 800f5f0:	6013      	str	r3, [r2, #0]
 800f5f2:	e013      	b.n	800f61c <tcp_process+0x744>
 800f5f4:	4b2f      	ldr	r3, [pc, #188]	; (800f6b4 <tcp_process+0x7dc>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	60fb      	str	r3, [r7, #12]
 800f5fa:	e00c      	b.n	800f616 <tcp_process+0x73e>
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	429a      	cmp	r2, r3
 800f604:	d104      	bne.n	800f610 <tcp_process+0x738>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	68da      	ldr	r2, [r3, #12]
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	60da      	str	r2, [r3, #12]
 800f60e:	e005      	b.n	800f61c <tcp_process+0x744>
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	60fb      	str	r3, [r7, #12]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d1ef      	bne.n	800f5fc <tcp_process+0x724>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2200      	movs	r2, #0
 800f620:	60da      	str	r2, [r3, #12]
 800f622:	4b1f      	ldr	r3, [pc, #124]	; (800f6a0 <tcp_process+0x7c8>)
 800f624:	2201      	movs	r2, #1
 800f626:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	220a      	movs	r2, #10
 800f62c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f62e:	4b1d      	ldr	r3, [pc, #116]	; (800f6a4 <tcp_process+0x7cc>)
 800f630:	681a      	ldr	r2, [r3, #0]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	60da      	str	r2, [r3, #12]
 800f636:	4a1b      	ldr	r2, [pc, #108]	; (800f6a4 <tcp_process+0x7cc>)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6013      	str	r3, [r2, #0]
 800f63c:	f002 fdec 	bl	8012218 <tcp_timer_needed>
      }
      break;
 800f640:	e026      	b.n	800f690 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f000 f93c 	bl	800f8c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f648:	4b17      	ldr	r3, [pc, #92]	; (800f6a8 <tcp_process+0x7d0>)
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	f003 0310 	and.w	r3, r3, #16
 800f650:	2b00      	cmp	r3, #0
 800f652:	d01f      	beq.n	800f694 <tcp_process+0x7bc>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f658:	4b14      	ldr	r3, [pc, #80]	; (800f6ac <tcp_process+0x7d4>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d119      	bne.n	800f694 <tcp_process+0x7bc>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f664:	2b00      	cmp	r3, #0
 800f666:	d115      	bne.n	800f694 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f668:	4b11      	ldr	r3, [pc, #68]	; (800f6b0 <tcp_process+0x7d8>)
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	f043 0310 	orr.w	r3, r3, #16
 800f670:	b2da      	uxtb	r2, r3
 800f672:	4b0f      	ldr	r3, [pc, #60]	; (800f6b0 <tcp_process+0x7d8>)
 800f674:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f676:	e00d      	b.n	800f694 <tcp_process+0x7bc>
    default:
      break;
 800f678:	bf00      	nop
 800f67a:	e00c      	b.n	800f696 <tcp_process+0x7be>
      break;
 800f67c:	bf00      	nop
 800f67e:	e00a      	b.n	800f696 <tcp_process+0x7be>
      break;
 800f680:	bf00      	nop
 800f682:	e008      	b.n	800f696 <tcp_process+0x7be>
      break;
 800f684:	bf00      	nop
 800f686:	e006      	b.n	800f696 <tcp_process+0x7be>
      break;
 800f688:	bf00      	nop
 800f68a:	e004      	b.n	800f696 <tcp_process+0x7be>
      break;
 800f68c:	bf00      	nop
 800f68e:	e002      	b.n	800f696 <tcp_process+0x7be>
      break;
 800f690:	bf00      	nop
 800f692:	e000      	b.n	800f696 <tcp_process+0x7be>
      break;
 800f694:	bf00      	nop
  }
  return ERR_OK;
 800f696:	2300      	movs	r3, #0
}
 800f698:	4618      	mov	r0, r3
 800f69a:	3724      	adds	r7, #36	; 0x24
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd90      	pop	{r4, r7, pc}
 800f6a0:	240074a4 	.word	0x240074a4
 800f6a4:	240074a0 	.word	0x240074a0
 800f6a8:	240074d4 	.word	0x240074d4
 800f6ac:	240074cc 	.word	0x240074cc
 800f6b0:	240074d5 	.word	0x240074d5
 800f6b4:	2400749c 	.word	0x2400749c

0800f6b8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f6b8:	b590      	push	{r4, r7, lr}
 800f6ba:	b085      	sub	sp, #20
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d106      	bne.n	800f6d6 <tcp_oos_insert_segment+0x1e>
 800f6c8:	4b3b      	ldr	r3, [pc, #236]	; (800f7b8 <tcp_oos_insert_segment+0x100>)
 800f6ca:	f240 421f 	movw	r2, #1055	; 0x41f
 800f6ce:	493b      	ldr	r1, [pc, #236]	; (800f7bc <tcp_oos_insert_segment+0x104>)
 800f6d0:	483b      	ldr	r0, [pc, #236]	; (800f7c0 <tcp_oos_insert_segment+0x108>)
 800f6d2:	f003 fc89 	bl	8012fe8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	68db      	ldr	r3, [r3, #12]
 800f6da:	899b      	ldrh	r3, [r3, #12]
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7f8 fea4 	bl	800842c <lwip_htons>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	f003 0301 	and.w	r3, r3, #1
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d028      	beq.n	800f742 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f6f0:	6838      	ldr	r0, [r7, #0]
 800f6f2:	f7fe fa63 	bl	800dbbc <tcp_segs_free>
    next = NULL;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	603b      	str	r3, [r7, #0]
 800f6fa:	e056      	b.n	800f7aa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	899b      	ldrh	r3, [r3, #12]
 800f702:	b29b      	uxth	r3, r3
 800f704:	4618      	mov	r0, r3
 800f706:	f7f8 fe91 	bl	800842c <lwip_htons>
 800f70a:	4603      	mov	r3, r0
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	f003 0301 	and.w	r3, r3, #1
 800f712:	2b00      	cmp	r3, #0
 800f714:	d00d      	beq.n	800f732 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	899b      	ldrh	r3, [r3, #12]
 800f71c:	b29c      	uxth	r4, r3
 800f71e:	2001      	movs	r0, #1
 800f720:	f7f8 fe84 	bl	800842c <lwip_htons>
 800f724:	4603      	mov	r3, r0
 800f726:	461a      	mov	r2, r3
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	4322      	orrs	r2, r4
 800f72e:	b292      	uxth	r2, r2
 800f730:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f73c:	68f8      	ldr	r0, [r7, #12]
 800f73e:	f7fe fa52 	bl	800dbe6 <tcp_seg_free>
    while (next &&
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d00e      	beq.n	800f766 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	891b      	ldrh	r3, [r3, #8]
 800f74c:	461a      	mov	r2, r3
 800f74e:	4b1d      	ldr	r3, [pc, #116]	; (800f7c4 <tcp_oos_insert_segment+0x10c>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	441a      	add	r2, r3
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	6839      	ldr	r1, [r7, #0]
 800f75c:	8909      	ldrh	r1, [r1, #8]
 800f75e:	440b      	add	r3, r1
 800f760:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f762:	2b00      	cmp	r3, #0
 800f764:	daca      	bge.n	800f6fc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d01e      	beq.n	800f7aa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	891b      	ldrh	r3, [r3, #8]
 800f770:	461a      	mov	r2, r3
 800f772:	4b14      	ldr	r3, [pc, #80]	; (800f7c4 <tcp_oos_insert_segment+0x10c>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	441a      	add	r2, r3
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f780:	2b00      	cmp	r3, #0
 800f782:	dd12      	ble.n	800f7aa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	b29a      	uxth	r2, r3
 800f78c:	4b0d      	ldr	r3, [pc, #52]	; (800f7c4 <tcp_oos_insert_segment+0x10c>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	b29b      	uxth	r3, r3
 800f792:	1ad3      	subs	r3, r2, r3
 800f794:	b29a      	uxth	r2, r3
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	685a      	ldr	r2, [r3, #4]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	891b      	ldrh	r3, [r3, #8]
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	4610      	mov	r0, r2
 800f7a6:	f7fc fc61 	bl	800c06c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	683a      	ldr	r2, [r7, #0]
 800f7ae:	601a      	str	r2, [r3, #0]
}
 800f7b0:	bf00      	nop
 800f7b2:	3714      	adds	r7, #20
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd90      	pop	{r4, r7, pc}
 800f7b8:	08016118 	.word	0x08016118
 800f7bc:	0801642c 	.word	0x0801642c
 800f7c0:	080161b8 	.word	0x080161b8
 800f7c4:	240074c8 	.word	0x240074c8

0800f7c8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f7c8:	b5b0      	push	{r4, r5, r7, lr}
 800f7ca:	b086      	sub	sp, #24
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	60b9      	str	r1, [r7, #8]
 800f7d2:	607a      	str	r2, [r7, #4]
 800f7d4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f7d6:	e03e      	b.n	800f856 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	685b      	ldr	r3, [r3, #4]
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fc fe54 	bl	800c494 <pbuf_clen>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f7f6:	8a7a      	ldrh	r2, [r7, #18]
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d906      	bls.n	800f80a <tcp_free_acked_segments+0x42>
 800f7fc:	4b2a      	ldr	r3, [pc, #168]	; (800f8a8 <tcp_free_acked_segments+0xe0>)
 800f7fe:	f240 4257 	movw	r2, #1111	; 0x457
 800f802:	492a      	ldr	r1, [pc, #168]	; (800f8ac <tcp_free_acked_segments+0xe4>)
 800f804:	482a      	ldr	r0, [pc, #168]	; (800f8b0 <tcp_free_acked_segments+0xe8>)
 800f806:	f003 fbef 	bl	8012fe8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f810:	8a7b      	ldrh	r3, [r7, #18]
 800f812:	1ad3      	subs	r3, r2, r3
 800f814:	b29a      	uxth	r2, r3
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	891a      	ldrh	r2, [r3, #8]
 800f820:	4b24      	ldr	r3, [pc, #144]	; (800f8b4 <tcp_free_acked_segments+0xec>)
 800f822:	881b      	ldrh	r3, [r3, #0]
 800f824:	4413      	add	r3, r2
 800f826:	b29a      	uxth	r2, r3
 800f828:	4b22      	ldr	r3, [pc, #136]	; (800f8b4 <tcp_free_acked_segments+0xec>)
 800f82a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f82c:	6978      	ldr	r0, [r7, #20]
 800f82e:	f7fe f9da 	bl	800dbe6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d00c      	beq.n	800f856 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d109      	bne.n	800f856 <tcp_free_acked_segments+0x8e>
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d106      	bne.n	800f856 <tcp_free_acked_segments+0x8e>
 800f848:	4b17      	ldr	r3, [pc, #92]	; (800f8a8 <tcp_free_acked_segments+0xe0>)
 800f84a:	f240 4261 	movw	r2, #1121	; 0x461
 800f84e:	491a      	ldr	r1, [pc, #104]	; (800f8b8 <tcp_free_acked_segments+0xf0>)
 800f850:	4817      	ldr	r0, [pc, #92]	; (800f8b0 <tcp_free_acked_segments+0xe8>)
 800f852:	f003 fbc9 	bl	8012fe8 <iprintf>
  while (seg_list != NULL &&
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d020      	beq.n	800f89e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	4618      	mov	r0, r3
 800f864:	f7f8 fdf7 	bl	8008456 <lwip_htonl>
 800f868:	4604      	mov	r4, r0
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	891b      	ldrh	r3, [r3, #8]
 800f86e:	461d      	mov	r5, r3
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	68db      	ldr	r3, [r3, #12]
 800f874:	899b      	ldrh	r3, [r3, #12]
 800f876:	b29b      	uxth	r3, r3
 800f878:	4618      	mov	r0, r3
 800f87a:	f7f8 fdd7 	bl	800842c <lwip_htons>
 800f87e:	4603      	mov	r3, r0
 800f880:	b2db      	uxtb	r3, r3
 800f882:	f003 0303 	and.w	r3, r3, #3
 800f886:	2b00      	cmp	r3, #0
 800f888:	d001      	beq.n	800f88e <tcp_free_acked_segments+0xc6>
 800f88a:	2301      	movs	r3, #1
 800f88c:	e000      	b.n	800f890 <tcp_free_acked_segments+0xc8>
 800f88e:	2300      	movs	r3, #0
 800f890:	442b      	add	r3, r5
 800f892:	18e2      	adds	r2, r4, r3
 800f894:	4b09      	ldr	r3, [pc, #36]	; (800f8bc <tcp_free_acked_segments+0xf4>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	dd9c      	ble.n	800f7d8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f89e:	68bb      	ldr	r3, [r7, #8]
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3718      	adds	r7, #24
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bdb0      	pop	{r4, r5, r7, pc}
 800f8a8:	08016118 	.word	0x08016118
 800f8ac:	08016454 	.word	0x08016454
 800f8b0:	080161b8 	.word	0x080161b8
 800f8b4:	240074d0 	.word	0x240074d0
 800f8b8:	0801647c 	.word	0x0801647c
 800f8bc:	240074cc 	.word	0x240074cc

0800f8c0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f8c0:	b5b0      	push	{r4, r5, r7, lr}
 800f8c2:	b094      	sub	sp, #80	; 0x50
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d106      	bne.n	800f8e0 <tcp_receive+0x20>
 800f8d2:	4b91      	ldr	r3, [pc, #580]	; (800fb18 <tcp_receive+0x258>)
 800f8d4:	f240 427b 	movw	r2, #1147	; 0x47b
 800f8d8:	4990      	ldr	r1, [pc, #576]	; (800fb1c <tcp_receive+0x25c>)
 800f8da:	4891      	ldr	r0, [pc, #580]	; (800fb20 <tcp_receive+0x260>)
 800f8dc:	f003 fb84 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	7d1b      	ldrb	r3, [r3, #20]
 800f8e4:	2b03      	cmp	r3, #3
 800f8e6:	d806      	bhi.n	800f8f6 <tcp_receive+0x36>
 800f8e8:	4b8b      	ldr	r3, [pc, #556]	; (800fb18 <tcp_receive+0x258>)
 800f8ea:	f240 427c 	movw	r2, #1148	; 0x47c
 800f8ee:	498d      	ldr	r1, [pc, #564]	; (800fb24 <tcp_receive+0x264>)
 800f8f0:	488b      	ldr	r0, [pc, #556]	; (800fb20 <tcp_receive+0x260>)
 800f8f2:	f003 fb79 	bl	8012fe8 <iprintf>

  if (flags & TCP_ACK) {
 800f8f6:	4b8c      	ldr	r3, [pc, #560]	; (800fb28 <tcp_receive+0x268>)
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	f003 0310 	and.w	r3, r3, #16
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	f000 8264 	beq.w	800fdcc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f90a:	461a      	mov	r2, r3
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f910:	4413      	add	r3, r2
 800f912:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f918:	4b84      	ldr	r3, [pc, #528]	; (800fb2c <tcp_receive+0x26c>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	1ad3      	subs	r3, r2, r3
 800f91e:	2b00      	cmp	r3, #0
 800f920:	db1b      	blt.n	800f95a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f926:	4b81      	ldr	r3, [pc, #516]	; (800fb2c <tcp_receive+0x26c>)
 800f928:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d106      	bne.n	800f93c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f932:	4b7f      	ldr	r3, [pc, #508]	; (800fb30 <tcp_receive+0x270>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	1ad3      	subs	r3, r2, r3
 800f938:	2b00      	cmp	r3, #0
 800f93a:	db0e      	blt.n	800f95a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f940:	4b7b      	ldr	r3, [pc, #492]	; (800fb30 <tcp_receive+0x270>)
 800f942:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f944:	429a      	cmp	r2, r3
 800f946:	d125      	bne.n	800f994 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f948:	4b7a      	ldr	r3, [pc, #488]	; (800fb34 <tcp_receive+0x274>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	89db      	ldrh	r3, [r3, #14]
 800f94e:	b29a      	uxth	r2, r3
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f956:	429a      	cmp	r2, r3
 800f958:	d91c      	bls.n	800f994 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f95a:	4b76      	ldr	r3, [pc, #472]	; (800fb34 <tcp_receive+0x274>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	89db      	ldrh	r3, [r3, #14]
 800f960:	b29a      	uxth	r2, r3
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f974:	429a      	cmp	r2, r3
 800f976:	d205      	bcs.n	800f984 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f984:	4b69      	ldr	r3, [pc, #420]	; (800fb2c <tcp_receive+0x26c>)
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f98c:	4b68      	ldr	r3, [pc, #416]	; (800fb30 <tcp_receive+0x270>)
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f994:	4b66      	ldr	r3, [pc, #408]	; (800fb30 <tcp_receive+0x270>)
 800f996:	681a      	ldr	r2, [r3, #0]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f99c:	1ad3      	subs	r3, r2, r3
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	dc58      	bgt.n	800fa54 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f9a2:	4b65      	ldr	r3, [pc, #404]	; (800fb38 <tcp_receive+0x278>)
 800f9a4:	881b      	ldrh	r3, [r3, #0]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d14b      	bne.n	800fa42 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f9b4:	4413      	add	r3, r2
 800f9b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	d142      	bne.n	800fa42 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	db3d      	blt.n	800fa42 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f9ca:	4b59      	ldr	r3, [pc, #356]	; (800fb30 <tcp_receive+0x270>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d137      	bne.n	800fa42 <tcp_receive+0x182>
              found_dupack = 1;
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f9dc:	2bff      	cmp	r3, #255	; 0xff
 800f9de:	d007      	beq.n	800f9f0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	b2da      	uxtb	r2, r3
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f9f6:	2b03      	cmp	r3, #3
 800f9f8:	d91b      	bls.n	800fa32 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa04:	4413      	add	r3, r2
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d30a      	bcc.n	800fa28 <tcp_receive+0x168>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa1c:	4413      	add	r3, r2
 800fa1e:	b29a      	uxth	r2, r3
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fa26:	e004      	b.n	800fa32 <tcp_receive+0x172>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa38:	2b02      	cmp	r3, #2
 800fa3a:	d902      	bls.n	800fa42 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f001 feeb 	bl	8011818 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fa42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f040 8161 	bne.w	800fd0c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fa52:	e15b      	b.n	800fd0c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa54:	4b36      	ldr	r3, [pc, #216]	; (800fb30 <tcp_receive+0x270>)
 800fa56:	681a      	ldr	r2, [r3, #0]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa5c:	1ad3      	subs	r3, r2, r3
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	f2c0 814e 	blt.w	800fd02 <tcp_receive+0x442>
 800fa66:	4b32      	ldr	r3, [pc, #200]	; (800fb30 <tcp_receive+0x270>)
 800fa68:	681a      	ldr	r2, [r3, #0]
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa6e:	1ad3      	subs	r3, r2, r3
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	f300 8146 	bgt.w	800fd02 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	8b5b      	ldrh	r3, [r3, #26]
 800fa7a:	f003 0304 	and.w	r3, r3, #4
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d010      	beq.n	800faa4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	8b5b      	ldrh	r3, [r3, #26]
 800fa86:	f023 0304 	bic.w	r3, r3, #4
 800fa8a:	b29a      	uxth	r2, r3
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2200      	movs	r2, #0
 800faa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2200      	movs	r2, #0
 800faa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fab2:	10db      	asrs	r3, r3, #3
 800fab4:	b21b      	sxth	r3, r3
 800fab6:	b29a      	uxth	r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	4413      	add	r3, r2
 800fac2:	b29b      	uxth	r3, r3
 800fac4:	b21a      	sxth	r2, r3
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800facc:	4b18      	ldr	r3, [pc, #96]	; (800fb30 <tcp_receive+0x270>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	b29a      	uxth	r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	1ad3      	subs	r3, r2, r3
 800fada:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2200      	movs	r2, #0
 800fae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fae4:	4b12      	ldr	r3, [pc, #72]	; (800fb30 <tcp_receive+0x270>)
 800fae6:	681a      	ldr	r2, [r3, #0]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	7d1b      	ldrb	r3, [r3, #20]
 800faf0:	2b03      	cmp	r3, #3
 800faf2:	f240 8097 	bls.w	800fc24 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d245      	bcs.n	800fb92 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	8b5b      	ldrh	r3, [r3, #26]
 800fb0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d014      	beq.n	800fb3c <tcp_receive+0x27c>
 800fb12:	2301      	movs	r3, #1
 800fb14:	e013      	b.n	800fb3e <tcp_receive+0x27e>
 800fb16:	bf00      	nop
 800fb18:	08016118 	.word	0x08016118
 800fb1c:	0801649c 	.word	0x0801649c
 800fb20:	080161b8 	.word	0x080161b8
 800fb24:	080164b8 	.word	0x080164b8
 800fb28:	240074d4 	.word	0x240074d4
 800fb2c:	240074c8 	.word	0x240074c8
 800fb30:	240074cc 	.word	0x240074cc
 800fb34:	240074b8 	.word	0x240074b8
 800fb38:	240074d2 	.word	0x240074d2
 800fb3c:	2302      	movs	r3, #2
 800fb3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fb42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fb46:	b29a      	uxth	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb4c:	fb12 f303 	smulbb	r3, r2, r3
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fb54:	4293      	cmp	r3, r2
 800fb56:	bf28      	it	cs
 800fb58:	4613      	movcs	r3, r2
 800fb5a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fb64:	4413      	add	r3, r2
 800fb66:	b29a      	uxth	r2, r3
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d309      	bcc.n	800fb86 <tcp_receive+0x2c6>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fb7a:	4413      	add	r3, r2
 800fb7c:	b29a      	uxth	r2, r3
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fb84:	e04e      	b.n	800fc24 <tcp_receive+0x364>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb8c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fb90:	e048      	b.n	800fc24 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fb98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fb9a:	4413      	add	r3, r2
 800fb9c:	b29a      	uxth	r2, r3
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d309      	bcc.n	800fbbc <tcp_receive+0x2fc>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fbae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fbb0:	4413      	add	r3, r2
 800fbb2:	b29a      	uxth	r2, r3
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fbba:	e004      	b.n	800fbc6 <tcp_receive+0x306>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d326      	bcc.n	800fc24 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbe2:	1ad3      	subs	r3, r2, r3
 800fbe4:	b29a      	uxth	r2, r3
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbf6:	4413      	add	r3, r2
 800fbf8:	b29a      	uxth	r2, r3
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d30a      	bcc.n	800fc1a <tcp_receive+0x35a>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc0e:	4413      	add	r3, r2
 800fc10:	b29a      	uxth	r2, r3
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fc18:	e004      	b.n	800fc24 <tcp_receive+0x364>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc2c:	4a98      	ldr	r2, [pc, #608]	; (800fe90 <tcp_receive+0x5d0>)
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	f7ff fdca 	bl	800f7c8 <tcp_free_acked_segments>
 800fc34:	4602      	mov	r2, r0
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc42:	4a94      	ldr	r2, [pc, #592]	; (800fe94 <tcp_receive+0x5d4>)
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f7ff fdbf 	bl	800f7c8 <tcp_free_acked_segments>
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d104      	bne.n	800fc62 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc5e:	861a      	strh	r2, [r3, #48]	; 0x30
 800fc60:	e002      	b.n	800fc68 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2200      	movs	r2, #0
 800fc66:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d103      	bne.n	800fc7e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fc84:	4b84      	ldr	r3, [pc, #528]	; (800fe98 <tcp_receive+0x5d8>)
 800fc86:	881b      	ldrh	r3, [r3, #0]
 800fc88:	4413      	add	r3, r2
 800fc8a:	b29a      	uxth	r2, r3
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	8b5b      	ldrh	r3, [r3, #26]
 800fc96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d035      	beq.n	800fd0a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d118      	bne.n	800fcd8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d00c      	beq.n	800fcc8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcb6:	68db      	ldr	r3, [r3, #12]
 800fcb8:	685b      	ldr	r3, [r3, #4]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7f8 fbcb 	bl	8008456 <lwip_htonl>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	dc20      	bgt.n	800fd0a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	8b5b      	ldrh	r3, [r3, #26]
 800fccc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fcd0:	b29a      	uxth	r2, r3
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fcd6:	e018      	b.n	800fd0a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7f8 fbb6 	bl	8008456 <lwip_htonl>
 800fcea:	4603      	mov	r3, r0
 800fcec:	1ae3      	subs	r3, r4, r3
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	dc0b      	bgt.n	800fd0a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	8b5b      	ldrh	r3, [r3, #26]
 800fcf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fcfa:	b29a      	uxth	r2, r3
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd00:	e003      	b.n	800fd0a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f001 ff76 	bl	8011bf4 <tcp_send_empty_ack>
 800fd08:	e000      	b.n	800fd0c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd0a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d05b      	beq.n	800fdcc <tcp_receive+0x50c>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd18:	4b60      	ldr	r3, [pc, #384]	; (800fe9c <tcp_receive+0x5dc>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	1ad3      	subs	r3, r2, r3
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	da54      	bge.n	800fdcc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fd22:	4b5f      	ldr	r3, [pc, #380]	; (800fea0 <tcp_receive+0x5e0>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	b29a      	uxth	r2, r3
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd2c:	b29b      	uxth	r3, r3
 800fd2e:	1ad3      	subs	r3, r2, r3
 800fd30:	b29b      	uxth	r3, r3
 800fd32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fd36:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fd40:	10db      	asrs	r3, r3, #3
 800fd42:	b21b      	sxth	r3, r3
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	1ad3      	subs	r3, r2, r3
 800fd48:	b29b      	uxth	r3, r3
 800fd4a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fd54:	b29a      	uxth	r2, r3
 800fd56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fd5a:	4413      	add	r3, r2
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	b21a      	sxth	r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fd64:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	da05      	bge.n	800fd78 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800fd6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fd70:	425b      	negs	r3, r3
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fd78:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fd82:	109b      	asrs	r3, r3, #2
 800fd84:	b21b      	sxth	r3, r3
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	1ad3      	subs	r3, r2, r3
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fd96:	b29a      	uxth	r2, r3
 800fd98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fd9c:	4413      	add	r3, r2
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	b21a      	sxth	r2, r3
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fdac:	10db      	asrs	r3, r3, #3
 800fdae:	b21b      	sxth	r3, r3
 800fdb0:	b29a      	uxth	r2, r3
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	4413      	add	r3, r2
 800fdbc:	b29b      	uxth	r3, r3
 800fdbe:	b21a      	sxth	r2, r3
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fdcc:	4b35      	ldr	r3, [pc, #212]	; (800fea4 <tcp_receive+0x5e4>)
 800fdce:	881b      	ldrh	r3, [r3, #0]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	f000 84e2 	beq.w	801079a <tcp_receive+0xeda>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	7d1b      	ldrb	r3, [r3, #20]
 800fdda:	2b06      	cmp	r3, #6
 800fddc:	f200 84dd 	bhi.w	801079a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fde4:	4b30      	ldr	r3, [pc, #192]	; (800fea8 <tcp_receive+0x5e8>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	1ad3      	subs	r3, r2, r3
 800fdea:	3b01      	subs	r3, #1
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	f2c0 808f 	blt.w	800ff10 <tcp_receive+0x650>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdf6:	4b2b      	ldr	r3, [pc, #172]	; (800fea4 <tcp_receive+0x5e4>)
 800fdf8:	881b      	ldrh	r3, [r3, #0]
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	4b2a      	ldr	r3, [pc, #168]	; (800fea8 <tcp_receive+0x5e8>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	440b      	add	r3, r1
 800fe02:	1ad3      	subs	r3, r2, r3
 800fe04:	3301      	adds	r3, #1
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	f300 8082 	bgt.w	800ff10 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fe0c:	4b27      	ldr	r3, [pc, #156]	; (800feac <tcp_receive+0x5ec>)
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe16:	4b24      	ldr	r3, [pc, #144]	; (800fea8 <tcp_receive+0x5e8>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	1ad3      	subs	r3, r2, r3
 800fe1c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fe1e:	4b23      	ldr	r3, [pc, #140]	; (800feac <tcp_receive+0x5ec>)
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d106      	bne.n	800fe34 <tcp_receive+0x574>
 800fe26:	4b22      	ldr	r3, [pc, #136]	; (800feb0 <tcp_receive+0x5f0>)
 800fe28:	f240 5294 	movw	r2, #1428	; 0x594
 800fe2c:	4921      	ldr	r1, [pc, #132]	; (800feb4 <tcp_receive+0x5f4>)
 800fe2e:	4822      	ldr	r0, [pc, #136]	; (800feb8 <tcp_receive+0x5f8>)
 800fe30:	f003 f8da 	bl	8012fe8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fe34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe36:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d906      	bls.n	800fe4c <tcp_receive+0x58c>
 800fe3e:	4b1c      	ldr	r3, [pc, #112]	; (800feb0 <tcp_receive+0x5f0>)
 800fe40:	f240 5295 	movw	r2, #1429	; 0x595
 800fe44:	491d      	ldr	r1, [pc, #116]	; (800febc <tcp_receive+0x5fc>)
 800fe46:	481c      	ldr	r0, [pc, #112]	; (800feb8 <tcp_receive+0x5f8>)
 800fe48:	f003 f8ce 	bl	8012fe8 <iprintf>
      off = (u16_t)off32;
 800fe4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fe52:	4b16      	ldr	r3, [pc, #88]	; (800feac <tcp_receive+0x5ec>)
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	891b      	ldrh	r3, [r3, #8]
 800fe58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d906      	bls.n	800fe6e <tcp_receive+0x5ae>
 800fe60:	4b13      	ldr	r3, [pc, #76]	; (800feb0 <tcp_receive+0x5f0>)
 800fe62:	f240 5297 	movw	r2, #1431	; 0x597
 800fe66:	4916      	ldr	r1, [pc, #88]	; (800fec0 <tcp_receive+0x600>)
 800fe68:	4813      	ldr	r0, [pc, #76]	; (800feb8 <tcp_receive+0x5f8>)
 800fe6a:	f003 f8bd 	bl	8012fe8 <iprintf>
      inseg.len -= off;
 800fe6e:	4b0f      	ldr	r3, [pc, #60]	; (800feac <tcp_receive+0x5ec>)
 800fe70:	891a      	ldrh	r2, [r3, #8]
 800fe72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe76:	1ad3      	subs	r3, r2, r3
 800fe78:	b29a      	uxth	r2, r3
 800fe7a:	4b0c      	ldr	r3, [pc, #48]	; (800feac <tcp_receive+0x5ec>)
 800fe7c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fe7e:	4b0b      	ldr	r3, [pc, #44]	; (800feac <tcp_receive+0x5ec>)
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	891a      	ldrh	r2, [r3, #8]
 800fe84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe88:	1ad3      	subs	r3, r2, r3
 800fe8a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800fe8c:	e02a      	b.n	800fee4 <tcp_receive+0x624>
 800fe8e:	bf00      	nop
 800fe90:	080164d4 	.word	0x080164d4
 800fe94:	080164dc 	.word	0x080164dc
 800fe98:	240074d0 	.word	0x240074d0
 800fe9c:	240074cc 	.word	0x240074cc
 800fea0:	24007490 	.word	0x24007490
 800fea4:	240074d2 	.word	0x240074d2
 800fea8:	240074c8 	.word	0x240074c8
 800feac:	240074a8 	.word	0x240074a8
 800feb0:	08016118 	.word	0x08016118
 800feb4:	080164e4 	.word	0x080164e4
 800feb8:	080161b8 	.word	0x080161b8
 800febc:	080164f4 	.word	0x080164f4
 800fec0:	08016504 	.word	0x08016504
        off -= p->len;
 800fec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fec6:	895b      	ldrh	r3, [r3, #10]
 800fec8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fecc:	1ad3      	subs	r3, r2, r3
 800fece:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fed4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fed6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800feda:	2200      	movs	r2, #0
 800fedc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800fee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fee6:	895b      	ldrh	r3, [r3, #10]
 800fee8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800feec:	429a      	cmp	r2, r3
 800feee:	d8e9      	bhi.n	800fec4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fef0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fef4:	4619      	mov	r1, r3
 800fef6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fef8:	f7fc f9b8 	bl	800c26c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff00:	4a91      	ldr	r2, [pc, #580]	; (8010148 <tcp_receive+0x888>)
 800ff02:	6013      	str	r3, [r2, #0]
 800ff04:	4b91      	ldr	r3, [pc, #580]	; (801014c <tcp_receive+0x88c>)
 800ff06:	68db      	ldr	r3, [r3, #12]
 800ff08:	4a8f      	ldr	r2, [pc, #572]	; (8010148 <tcp_receive+0x888>)
 800ff0a:	6812      	ldr	r2, [r2, #0]
 800ff0c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ff0e:	e00d      	b.n	800ff2c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ff10:	4b8d      	ldr	r3, [pc, #564]	; (8010148 <tcp_receive+0x888>)
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff18:	1ad3      	subs	r3, r2, r3
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	da06      	bge.n	800ff2c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	8b5b      	ldrh	r3, [r3, #26]
 800ff22:	f043 0302 	orr.w	r3, r3, #2
 800ff26:	b29a      	uxth	r2, r3
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ff2c:	4b86      	ldr	r3, [pc, #536]	; (8010148 <tcp_receive+0x888>)
 800ff2e:	681a      	ldr	r2, [r3, #0]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff34:	1ad3      	subs	r3, r2, r3
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	f2c0 842a 	blt.w	8010790 <tcp_receive+0xed0>
 800ff3c:	4b82      	ldr	r3, [pc, #520]	; (8010148 <tcp_receive+0x888>)
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff44:	6879      	ldr	r1, [r7, #4]
 800ff46:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff48:	440b      	add	r3, r1
 800ff4a:	1ad3      	subs	r3, r2, r3
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	f300 841e 	bgt.w	8010790 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff58:	4b7b      	ldr	r3, [pc, #492]	; (8010148 <tcp_receive+0x888>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	f040 829a 	bne.w	8010496 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ff62:	4b7a      	ldr	r3, [pc, #488]	; (801014c <tcp_receive+0x88c>)
 800ff64:	891c      	ldrh	r4, [r3, #8]
 800ff66:	4b79      	ldr	r3, [pc, #484]	; (801014c <tcp_receive+0x88c>)
 800ff68:	68db      	ldr	r3, [r3, #12]
 800ff6a:	899b      	ldrh	r3, [r3, #12]
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7f8 fa5c 	bl	800842c <lwip_htons>
 800ff74:	4603      	mov	r3, r0
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	f003 0303 	and.w	r3, r3, #3
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d001      	beq.n	800ff84 <tcp_receive+0x6c4>
 800ff80:	2301      	movs	r3, #1
 800ff82:	e000      	b.n	800ff86 <tcp_receive+0x6c6>
 800ff84:	2300      	movs	r3, #0
 800ff86:	4423      	add	r3, r4
 800ff88:	b29a      	uxth	r2, r3
 800ff8a:	4b71      	ldr	r3, [pc, #452]	; (8010150 <tcp_receive+0x890>)
 800ff8c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ff92:	4b6f      	ldr	r3, [pc, #444]	; (8010150 <tcp_receive+0x890>)
 800ff94:	881b      	ldrh	r3, [r3, #0]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d275      	bcs.n	8010086 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ff9a:	4b6c      	ldr	r3, [pc, #432]	; (801014c <tcp_receive+0x88c>)
 800ff9c:	68db      	ldr	r3, [r3, #12]
 800ff9e:	899b      	ldrh	r3, [r3, #12]
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7f8 fa42 	bl	800842c <lwip_htons>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	b2db      	uxtb	r3, r3
 800ffac:	f003 0301 	and.w	r3, r3, #1
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d01f      	beq.n	800fff4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ffb4:	4b65      	ldr	r3, [pc, #404]	; (801014c <tcp_receive+0x88c>)
 800ffb6:	68db      	ldr	r3, [r3, #12]
 800ffb8:	899b      	ldrh	r3, [r3, #12]
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	b21b      	sxth	r3, r3
 800ffbe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ffc2:	b21c      	sxth	r4, r3
 800ffc4:	4b61      	ldr	r3, [pc, #388]	; (801014c <tcp_receive+0x88c>)
 800ffc6:	68db      	ldr	r3, [r3, #12]
 800ffc8:	899b      	ldrh	r3, [r3, #12]
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7f8 fa2d 	bl	800842c <lwip_htons>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7f8 fa24 	bl	800842c <lwip_htons>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	b21b      	sxth	r3, r3
 800ffe8:	4323      	orrs	r3, r4
 800ffea:	b21a      	sxth	r2, r3
 800ffec:	4b57      	ldr	r3, [pc, #348]	; (801014c <tcp_receive+0x88c>)
 800ffee:	68db      	ldr	r3, [r3, #12]
 800fff0:	b292      	uxth	r2, r2
 800fff2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fff8:	4b54      	ldr	r3, [pc, #336]	; (801014c <tcp_receive+0x88c>)
 800fffa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fffc:	4b53      	ldr	r3, [pc, #332]	; (801014c <tcp_receive+0x88c>)
 800fffe:	68db      	ldr	r3, [r3, #12]
 8010000:	899b      	ldrh	r3, [r3, #12]
 8010002:	b29b      	uxth	r3, r3
 8010004:	4618      	mov	r0, r3
 8010006:	f7f8 fa11 	bl	800842c <lwip_htons>
 801000a:	4603      	mov	r3, r0
 801000c:	b2db      	uxtb	r3, r3
 801000e:	f003 0302 	and.w	r3, r3, #2
 8010012:	2b00      	cmp	r3, #0
 8010014:	d005      	beq.n	8010022 <tcp_receive+0x762>
            inseg.len -= 1;
 8010016:	4b4d      	ldr	r3, [pc, #308]	; (801014c <tcp_receive+0x88c>)
 8010018:	891b      	ldrh	r3, [r3, #8]
 801001a:	3b01      	subs	r3, #1
 801001c:	b29a      	uxth	r2, r3
 801001e:	4b4b      	ldr	r3, [pc, #300]	; (801014c <tcp_receive+0x88c>)
 8010020:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010022:	4b4a      	ldr	r3, [pc, #296]	; (801014c <tcp_receive+0x88c>)
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	4a49      	ldr	r2, [pc, #292]	; (801014c <tcp_receive+0x88c>)
 8010028:	8912      	ldrh	r2, [r2, #8]
 801002a:	4611      	mov	r1, r2
 801002c:	4618      	mov	r0, r3
 801002e:	f7fc f81d 	bl	800c06c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010032:	4b46      	ldr	r3, [pc, #280]	; (801014c <tcp_receive+0x88c>)
 8010034:	891c      	ldrh	r4, [r3, #8]
 8010036:	4b45      	ldr	r3, [pc, #276]	; (801014c <tcp_receive+0x88c>)
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	899b      	ldrh	r3, [r3, #12]
 801003c:	b29b      	uxth	r3, r3
 801003e:	4618      	mov	r0, r3
 8010040:	f7f8 f9f4 	bl	800842c <lwip_htons>
 8010044:	4603      	mov	r3, r0
 8010046:	b2db      	uxtb	r3, r3
 8010048:	f003 0303 	and.w	r3, r3, #3
 801004c:	2b00      	cmp	r3, #0
 801004e:	d001      	beq.n	8010054 <tcp_receive+0x794>
 8010050:	2301      	movs	r3, #1
 8010052:	e000      	b.n	8010056 <tcp_receive+0x796>
 8010054:	2300      	movs	r3, #0
 8010056:	4423      	add	r3, r4
 8010058:	b29a      	uxth	r2, r3
 801005a:	4b3d      	ldr	r3, [pc, #244]	; (8010150 <tcp_receive+0x890>)
 801005c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801005e:	4b3c      	ldr	r3, [pc, #240]	; (8010150 <tcp_receive+0x890>)
 8010060:	881b      	ldrh	r3, [r3, #0]
 8010062:	461a      	mov	r2, r3
 8010064:	4b38      	ldr	r3, [pc, #224]	; (8010148 <tcp_receive+0x888>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	441a      	add	r2, r3
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801006e:	6879      	ldr	r1, [r7, #4]
 8010070:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010072:	440b      	add	r3, r1
 8010074:	429a      	cmp	r2, r3
 8010076:	d006      	beq.n	8010086 <tcp_receive+0x7c6>
 8010078:	4b36      	ldr	r3, [pc, #216]	; (8010154 <tcp_receive+0x894>)
 801007a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801007e:	4936      	ldr	r1, [pc, #216]	; (8010158 <tcp_receive+0x898>)
 8010080:	4836      	ldr	r0, [pc, #216]	; (801015c <tcp_receive+0x89c>)
 8010082:	f002 ffb1 	bl	8012fe8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801008a:	2b00      	cmp	r3, #0
 801008c:	f000 80e7 	beq.w	801025e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010090:	4b2e      	ldr	r3, [pc, #184]	; (801014c <tcp_receive+0x88c>)
 8010092:	68db      	ldr	r3, [r3, #12]
 8010094:	899b      	ldrh	r3, [r3, #12]
 8010096:	b29b      	uxth	r3, r3
 8010098:	4618      	mov	r0, r3
 801009a:	f7f8 f9c7 	bl	800842c <lwip_htons>
 801009e:	4603      	mov	r3, r0
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	f003 0301 	and.w	r3, r3, #1
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d010      	beq.n	80100cc <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80100aa:	e00a      	b.n	80100c2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100b0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100b6:	681a      	ldr	r2, [r3, #0]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80100bc:	68f8      	ldr	r0, [r7, #12]
 80100be:	f7fd fd92 	bl	800dbe6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d1f0      	bne.n	80100ac <tcp_receive+0x7ec>
 80100ca:	e0c8      	b.n	801025e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100d0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80100d2:	e052      	b.n	801017a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80100d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	899b      	ldrh	r3, [r3, #12]
 80100da:	b29b      	uxth	r3, r3
 80100dc:	4618      	mov	r0, r3
 80100de:	f7f8 f9a5 	bl	800842c <lwip_htons>
 80100e2:	4603      	mov	r3, r0
 80100e4:	b2db      	uxtb	r3, r3
 80100e6:	f003 0301 	and.w	r3, r3, #1
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d03d      	beq.n	801016a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80100ee:	4b17      	ldr	r3, [pc, #92]	; (801014c <tcp_receive+0x88c>)
 80100f0:	68db      	ldr	r3, [r3, #12]
 80100f2:	899b      	ldrh	r3, [r3, #12]
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7f8 f998 	bl	800842c <lwip_htons>
 80100fc:	4603      	mov	r3, r0
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010104:	2b00      	cmp	r3, #0
 8010106:	d130      	bne.n	801016a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010108:	4b10      	ldr	r3, [pc, #64]	; (801014c <tcp_receive+0x88c>)
 801010a:	68db      	ldr	r3, [r3, #12]
 801010c:	899b      	ldrh	r3, [r3, #12]
 801010e:	b29c      	uxth	r4, r3
 8010110:	2001      	movs	r0, #1
 8010112:	f7f8 f98b 	bl	800842c <lwip_htons>
 8010116:	4603      	mov	r3, r0
 8010118:	461a      	mov	r2, r3
 801011a:	4b0c      	ldr	r3, [pc, #48]	; (801014c <tcp_receive+0x88c>)
 801011c:	68db      	ldr	r3, [r3, #12]
 801011e:	4322      	orrs	r2, r4
 8010120:	b292      	uxth	r2, r2
 8010122:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010124:	4b09      	ldr	r3, [pc, #36]	; (801014c <tcp_receive+0x88c>)
 8010126:	891c      	ldrh	r4, [r3, #8]
 8010128:	4b08      	ldr	r3, [pc, #32]	; (801014c <tcp_receive+0x88c>)
 801012a:	68db      	ldr	r3, [r3, #12]
 801012c:	899b      	ldrh	r3, [r3, #12]
 801012e:	b29b      	uxth	r3, r3
 8010130:	4618      	mov	r0, r3
 8010132:	f7f8 f97b 	bl	800842c <lwip_htons>
 8010136:	4603      	mov	r3, r0
 8010138:	b2db      	uxtb	r3, r3
 801013a:	f003 0303 	and.w	r3, r3, #3
 801013e:	2b00      	cmp	r3, #0
 8010140:	d00e      	beq.n	8010160 <tcp_receive+0x8a0>
 8010142:	2301      	movs	r3, #1
 8010144:	e00d      	b.n	8010162 <tcp_receive+0x8a2>
 8010146:	bf00      	nop
 8010148:	240074c8 	.word	0x240074c8
 801014c:	240074a8 	.word	0x240074a8
 8010150:	240074d2 	.word	0x240074d2
 8010154:	08016118 	.word	0x08016118
 8010158:	08016514 	.word	0x08016514
 801015c:	080161b8 	.word	0x080161b8
 8010160:	2300      	movs	r3, #0
 8010162:	4423      	add	r3, r4
 8010164:	b29a      	uxth	r2, r3
 8010166:	4b98      	ldr	r3, [pc, #608]	; (80103c8 <tcp_receive+0xb08>)
 8010168:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801016a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801016c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801016e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010174:	6938      	ldr	r0, [r7, #16]
 8010176:	f7fd fd36 	bl	800dbe6 <tcp_seg_free>
            while (next &&
 801017a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801017c:	2b00      	cmp	r3, #0
 801017e:	d00e      	beq.n	801019e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010180:	4b91      	ldr	r3, [pc, #580]	; (80103c8 <tcp_receive+0xb08>)
 8010182:	881b      	ldrh	r3, [r3, #0]
 8010184:	461a      	mov	r2, r3
 8010186:	4b91      	ldr	r3, [pc, #580]	; (80103cc <tcp_receive+0xb0c>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	441a      	add	r2, r3
 801018c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	685b      	ldr	r3, [r3, #4]
 8010192:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010194:	8909      	ldrh	r1, [r1, #8]
 8010196:	440b      	add	r3, r1
 8010198:	1ad3      	subs	r3, r2, r3
            while (next &&
 801019a:	2b00      	cmp	r3, #0
 801019c:	da9a      	bge.n	80100d4 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801019e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d059      	beq.n	8010258 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80101a4:	4b88      	ldr	r3, [pc, #544]	; (80103c8 <tcp_receive+0xb08>)
 80101a6:	881b      	ldrh	r3, [r3, #0]
 80101a8:	461a      	mov	r2, r3
 80101aa:	4b88      	ldr	r3, [pc, #544]	; (80103cc <tcp_receive+0xb0c>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	441a      	add	r2, r3
 80101b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101b2:	68db      	ldr	r3, [r3, #12]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	dd4d      	ble.n	8010258 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80101bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101be:	68db      	ldr	r3, [r3, #12]
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	b29a      	uxth	r2, r3
 80101c4:	4b81      	ldr	r3, [pc, #516]	; (80103cc <tcp_receive+0xb0c>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	1ad3      	subs	r3, r2, r3
 80101cc:	b29a      	uxth	r2, r3
 80101ce:	4b80      	ldr	r3, [pc, #512]	; (80103d0 <tcp_receive+0xb10>)
 80101d0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80101d2:	4b7f      	ldr	r3, [pc, #508]	; (80103d0 <tcp_receive+0xb10>)
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	899b      	ldrh	r3, [r3, #12]
 80101d8:	b29b      	uxth	r3, r3
 80101da:	4618      	mov	r0, r3
 80101dc:	f7f8 f926 	bl	800842c <lwip_htons>
 80101e0:	4603      	mov	r3, r0
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	f003 0302 	and.w	r3, r3, #2
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d005      	beq.n	80101f8 <tcp_receive+0x938>
                inseg.len -= 1;
 80101ec:	4b78      	ldr	r3, [pc, #480]	; (80103d0 <tcp_receive+0xb10>)
 80101ee:	891b      	ldrh	r3, [r3, #8]
 80101f0:	3b01      	subs	r3, #1
 80101f2:	b29a      	uxth	r2, r3
 80101f4:	4b76      	ldr	r3, [pc, #472]	; (80103d0 <tcp_receive+0xb10>)
 80101f6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80101f8:	4b75      	ldr	r3, [pc, #468]	; (80103d0 <tcp_receive+0xb10>)
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	4a74      	ldr	r2, [pc, #464]	; (80103d0 <tcp_receive+0xb10>)
 80101fe:	8912      	ldrh	r2, [r2, #8]
 8010200:	4611      	mov	r1, r2
 8010202:	4618      	mov	r0, r3
 8010204:	f7fb ff32 	bl	800c06c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010208:	4b71      	ldr	r3, [pc, #452]	; (80103d0 <tcp_receive+0xb10>)
 801020a:	891c      	ldrh	r4, [r3, #8]
 801020c:	4b70      	ldr	r3, [pc, #448]	; (80103d0 <tcp_receive+0xb10>)
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	899b      	ldrh	r3, [r3, #12]
 8010212:	b29b      	uxth	r3, r3
 8010214:	4618      	mov	r0, r3
 8010216:	f7f8 f909 	bl	800842c <lwip_htons>
 801021a:	4603      	mov	r3, r0
 801021c:	b2db      	uxtb	r3, r3
 801021e:	f003 0303 	and.w	r3, r3, #3
 8010222:	2b00      	cmp	r3, #0
 8010224:	d001      	beq.n	801022a <tcp_receive+0x96a>
 8010226:	2301      	movs	r3, #1
 8010228:	e000      	b.n	801022c <tcp_receive+0x96c>
 801022a:	2300      	movs	r3, #0
 801022c:	4423      	add	r3, r4
 801022e:	b29a      	uxth	r2, r3
 8010230:	4b65      	ldr	r3, [pc, #404]	; (80103c8 <tcp_receive+0xb08>)
 8010232:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010234:	4b64      	ldr	r3, [pc, #400]	; (80103c8 <tcp_receive+0xb08>)
 8010236:	881b      	ldrh	r3, [r3, #0]
 8010238:	461a      	mov	r2, r3
 801023a:	4b64      	ldr	r3, [pc, #400]	; (80103cc <tcp_receive+0xb0c>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	441a      	add	r2, r3
 8010240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010242:	68db      	ldr	r3, [r3, #12]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	429a      	cmp	r2, r3
 8010248:	d006      	beq.n	8010258 <tcp_receive+0x998>
 801024a:	4b62      	ldr	r3, [pc, #392]	; (80103d4 <tcp_receive+0xb14>)
 801024c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010250:	4961      	ldr	r1, [pc, #388]	; (80103d8 <tcp_receive+0xb18>)
 8010252:	4862      	ldr	r0, [pc, #392]	; (80103dc <tcp_receive+0xb1c>)
 8010254:	f002 fec8 	bl	8012fe8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801025c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801025e:	4b5a      	ldr	r3, [pc, #360]	; (80103c8 <tcp_receive+0xb08>)
 8010260:	881b      	ldrh	r3, [r3, #0]
 8010262:	461a      	mov	r2, r3
 8010264:	4b59      	ldr	r3, [pc, #356]	; (80103cc <tcp_receive+0xb0c>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	441a      	add	r2, r3
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010272:	4b55      	ldr	r3, [pc, #340]	; (80103c8 <tcp_receive+0xb08>)
 8010274:	881b      	ldrh	r3, [r3, #0]
 8010276:	429a      	cmp	r2, r3
 8010278:	d206      	bcs.n	8010288 <tcp_receive+0x9c8>
 801027a:	4b56      	ldr	r3, [pc, #344]	; (80103d4 <tcp_receive+0xb14>)
 801027c:	f240 6207 	movw	r2, #1543	; 0x607
 8010280:	4957      	ldr	r1, [pc, #348]	; (80103e0 <tcp_receive+0xb20>)
 8010282:	4856      	ldr	r0, [pc, #344]	; (80103dc <tcp_receive+0xb1c>)
 8010284:	f002 feb0 	bl	8012fe8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801028c:	4b4e      	ldr	r3, [pc, #312]	; (80103c8 <tcp_receive+0xb08>)
 801028e:	881b      	ldrh	r3, [r3, #0]
 8010290:	1ad3      	subs	r3, r2, r3
 8010292:	b29a      	uxth	r2, r3
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f7fc ffc5 	bl	800d228 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801029e:	4b4c      	ldr	r3, [pc, #304]	; (80103d0 <tcp_receive+0xb10>)
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	891b      	ldrh	r3, [r3, #8]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d006      	beq.n	80102b6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80102a8:	4b49      	ldr	r3, [pc, #292]	; (80103d0 <tcp_receive+0xb10>)
 80102aa:	685b      	ldr	r3, [r3, #4]
 80102ac:	4a4d      	ldr	r2, [pc, #308]	; (80103e4 <tcp_receive+0xb24>)
 80102ae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80102b0:	4b47      	ldr	r3, [pc, #284]	; (80103d0 <tcp_receive+0xb10>)
 80102b2:	2200      	movs	r2, #0
 80102b4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80102b6:	4b46      	ldr	r3, [pc, #280]	; (80103d0 <tcp_receive+0xb10>)
 80102b8:	68db      	ldr	r3, [r3, #12]
 80102ba:	899b      	ldrh	r3, [r3, #12]
 80102bc:	b29b      	uxth	r3, r3
 80102be:	4618      	mov	r0, r3
 80102c0:	f7f8 f8b4 	bl	800842c <lwip_htons>
 80102c4:	4603      	mov	r3, r0
 80102c6:	b2db      	uxtb	r3, r3
 80102c8:	f003 0301 	and.w	r3, r3, #1
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	f000 80b8 	beq.w	8010442 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80102d2:	4b45      	ldr	r3, [pc, #276]	; (80103e8 <tcp_receive+0xb28>)
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	f043 0320 	orr.w	r3, r3, #32
 80102da:	b2da      	uxtb	r2, r3
 80102dc:	4b42      	ldr	r3, [pc, #264]	; (80103e8 <tcp_receive+0xb28>)
 80102de:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80102e0:	e0af      	b.n	8010442 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102e6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80102ec:	68db      	ldr	r3, [r3, #12]
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	4a36      	ldr	r2, [pc, #216]	; (80103cc <tcp_receive+0xb0c>)
 80102f2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	891b      	ldrh	r3, [r3, #8]
 80102f8:	461c      	mov	r4, r3
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	68db      	ldr	r3, [r3, #12]
 80102fe:	899b      	ldrh	r3, [r3, #12]
 8010300:	b29b      	uxth	r3, r3
 8010302:	4618      	mov	r0, r3
 8010304:	f7f8 f892 	bl	800842c <lwip_htons>
 8010308:	4603      	mov	r3, r0
 801030a:	b2db      	uxtb	r3, r3
 801030c:	f003 0303 	and.w	r3, r3, #3
 8010310:	2b00      	cmp	r3, #0
 8010312:	d001      	beq.n	8010318 <tcp_receive+0xa58>
 8010314:	2301      	movs	r3, #1
 8010316:	e000      	b.n	801031a <tcp_receive+0xa5a>
 8010318:	2300      	movs	r3, #0
 801031a:	191a      	adds	r2, r3, r4
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010320:	441a      	add	r2, r3
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801032a:	461c      	mov	r4, r3
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	891b      	ldrh	r3, [r3, #8]
 8010330:	461d      	mov	r5, r3
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	899b      	ldrh	r3, [r3, #12]
 8010338:	b29b      	uxth	r3, r3
 801033a:	4618      	mov	r0, r3
 801033c:	f7f8 f876 	bl	800842c <lwip_htons>
 8010340:	4603      	mov	r3, r0
 8010342:	b2db      	uxtb	r3, r3
 8010344:	f003 0303 	and.w	r3, r3, #3
 8010348:	2b00      	cmp	r3, #0
 801034a:	d001      	beq.n	8010350 <tcp_receive+0xa90>
 801034c:	2301      	movs	r3, #1
 801034e:	e000      	b.n	8010352 <tcp_receive+0xa92>
 8010350:	2300      	movs	r3, #0
 8010352:	442b      	add	r3, r5
 8010354:	429c      	cmp	r4, r3
 8010356:	d206      	bcs.n	8010366 <tcp_receive+0xaa6>
 8010358:	4b1e      	ldr	r3, [pc, #120]	; (80103d4 <tcp_receive+0xb14>)
 801035a:	f240 622b 	movw	r2, #1579	; 0x62b
 801035e:	4923      	ldr	r1, [pc, #140]	; (80103ec <tcp_receive+0xb2c>)
 8010360:	481e      	ldr	r0, [pc, #120]	; (80103dc <tcp_receive+0xb1c>)
 8010362:	f002 fe41 	bl	8012fe8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	891b      	ldrh	r3, [r3, #8]
 801036a:	461c      	mov	r4, r3
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	899b      	ldrh	r3, [r3, #12]
 8010372:	b29b      	uxth	r3, r3
 8010374:	4618      	mov	r0, r3
 8010376:	f7f8 f859 	bl	800842c <lwip_htons>
 801037a:	4603      	mov	r3, r0
 801037c:	b2db      	uxtb	r3, r3
 801037e:	f003 0303 	and.w	r3, r3, #3
 8010382:	2b00      	cmp	r3, #0
 8010384:	d001      	beq.n	801038a <tcp_receive+0xaca>
 8010386:	2301      	movs	r3, #1
 8010388:	e000      	b.n	801038c <tcp_receive+0xacc>
 801038a:	2300      	movs	r3, #0
 801038c:	1919      	adds	r1, r3, r4
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010392:	b28b      	uxth	r3, r1
 8010394:	1ad3      	subs	r3, r2, r3
 8010396:	b29a      	uxth	r2, r3
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f7fc ff43 	bl	800d228 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	891b      	ldrh	r3, [r3, #8]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d028      	beq.n	80103fe <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80103ac:	4b0d      	ldr	r3, [pc, #52]	; (80103e4 <tcp_receive+0xb24>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d01d      	beq.n	80103f0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80103b4:	4b0b      	ldr	r3, [pc, #44]	; (80103e4 <tcp_receive+0xb24>)
 80103b6:	681a      	ldr	r2, [r3, #0]
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	4619      	mov	r1, r3
 80103be:	4610      	mov	r0, r2
 80103c0:	f7fc f8a8 	bl	800c514 <pbuf_cat>
 80103c4:	e018      	b.n	80103f8 <tcp_receive+0xb38>
 80103c6:	bf00      	nop
 80103c8:	240074d2 	.word	0x240074d2
 80103cc:	240074c8 	.word	0x240074c8
 80103d0:	240074a8 	.word	0x240074a8
 80103d4:	08016118 	.word	0x08016118
 80103d8:	0801654c 	.word	0x0801654c
 80103dc:	080161b8 	.word	0x080161b8
 80103e0:	08016588 	.word	0x08016588
 80103e4:	240074d8 	.word	0x240074d8
 80103e8:	240074d5 	.word	0x240074d5
 80103ec:	080165a8 	.word	0x080165a8
            } else {
              recv_data = cseg->p;
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	685b      	ldr	r3, [r3, #4]
 80103f4:	4a70      	ldr	r2, [pc, #448]	; (80105b8 <tcp_receive+0xcf8>)
 80103f6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	2200      	movs	r2, #0
 80103fc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	68db      	ldr	r3, [r3, #12]
 8010402:	899b      	ldrh	r3, [r3, #12]
 8010404:	b29b      	uxth	r3, r3
 8010406:	4618      	mov	r0, r3
 8010408:	f7f8 f810 	bl	800842c <lwip_htons>
 801040c:	4603      	mov	r3, r0
 801040e:	b2db      	uxtb	r3, r3
 8010410:	f003 0301 	and.w	r3, r3, #1
 8010414:	2b00      	cmp	r3, #0
 8010416:	d00d      	beq.n	8010434 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010418:	4b68      	ldr	r3, [pc, #416]	; (80105bc <tcp_receive+0xcfc>)
 801041a:	781b      	ldrb	r3, [r3, #0]
 801041c:	f043 0320 	orr.w	r3, r3, #32
 8010420:	b2da      	uxtb	r2, r3
 8010422:	4b66      	ldr	r3, [pc, #408]	; (80105bc <tcp_receive+0xcfc>)
 8010424:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	7d1b      	ldrb	r3, [r3, #20]
 801042a:	2b04      	cmp	r3, #4
 801042c:	d102      	bne.n	8010434 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2207      	movs	r2, #7
 8010432:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	681a      	ldr	r2, [r3, #0]
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801043c:	68b8      	ldr	r0, [r7, #8]
 801043e:	f7fd fbd2 	bl	800dbe6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010446:	2b00      	cmp	r3, #0
 8010448:	d008      	beq.n	801045c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	685a      	ldr	r2, [r3, #4]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010456:	429a      	cmp	r2, r3
 8010458:	f43f af43 	beq.w	80102e2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	8b5b      	ldrh	r3, [r3, #26]
 8010460:	f003 0301 	and.w	r3, r3, #1
 8010464:	2b00      	cmp	r3, #0
 8010466:	d00e      	beq.n	8010486 <tcp_receive+0xbc6>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	8b5b      	ldrh	r3, [r3, #26]
 801046c:	f023 0301 	bic.w	r3, r3, #1
 8010470:	b29a      	uxth	r2, r3
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	835a      	strh	r2, [r3, #26]
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	8b5b      	ldrh	r3, [r3, #26]
 801047a:	f043 0302 	orr.w	r3, r3, #2
 801047e:	b29a      	uxth	r2, r3
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010484:	e188      	b.n	8010798 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	8b5b      	ldrh	r3, [r3, #26]
 801048a:	f043 0301 	orr.w	r3, r3, #1
 801048e:	b29a      	uxth	r2, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010494:	e180      	b.n	8010798 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801049a:	2b00      	cmp	r3, #0
 801049c:	d106      	bne.n	80104ac <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801049e:	4848      	ldr	r0, [pc, #288]	; (80105c0 <tcp_receive+0xd00>)
 80104a0:	f7fd fbba 	bl	800dc18 <tcp_seg_copy>
 80104a4:	4602      	mov	r2, r0
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	675a      	str	r2, [r3, #116]	; 0x74
 80104aa:	e16d      	b.n	8010788 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80104ac:	2300      	movs	r3, #0
 80104ae:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80104b6:	e157      	b.n	8010768 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80104b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	685a      	ldr	r2, [r3, #4]
 80104be:	4b41      	ldr	r3, [pc, #260]	; (80105c4 <tcp_receive+0xd04>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d11d      	bne.n	8010502 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80104c6:	4b3e      	ldr	r3, [pc, #248]	; (80105c0 <tcp_receive+0xd00>)
 80104c8:	891a      	ldrh	r2, [r3, #8]
 80104ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104cc:	891b      	ldrh	r3, [r3, #8]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	f240 814f 	bls.w	8010772 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80104d4:	483a      	ldr	r0, [pc, #232]	; (80105c0 <tcp_receive+0xd00>)
 80104d6:	f7fd fb9f 	bl	800dc18 <tcp_seg_copy>
 80104da:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80104dc:	697b      	ldr	r3, [r7, #20]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	f000 8149 	beq.w	8010776 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80104e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d003      	beq.n	80104f2 <tcp_receive+0xc32>
                    prev->next = cseg;
 80104ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ec:	697a      	ldr	r2, [r7, #20]
 80104ee:	601a      	str	r2, [r3, #0]
 80104f0:	e002      	b.n	80104f8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	697a      	ldr	r2, [r7, #20]
 80104f6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80104f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80104fa:	6978      	ldr	r0, [r7, #20]
 80104fc:	f7ff f8dc 	bl	800f6b8 <tcp_oos_insert_segment>
                }
                break;
 8010500:	e139      	b.n	8010776 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010504:	2b00      	cmp	r3, #0
 8010506:	d117      	bne.n	8010538 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010508:	4b2e      	ldr	r3, [pc, #184]	; (80105c4 <tcp_receive+0xd04>)
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801050e:	68db      	ldr	r3, [r3, #12]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	1ad3      	subs	r3, r2, r3
 8010514:	2b00      	cmp	r3, #0
 8010516:	da57      	bge.n	80105c8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010518:	4829      	ldr	r0, [pc, #164]	; (80105c0 <tcp_receive+0xd00>)
 801051a:	f7fd fb7d 	bl	800dc18 <tcp_seg_copy>
 801051e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010520:	69bb      	ldr	r3, [r7, #24]
 8010522:	2b00      	cmp	r3, #0
 8010524:	f000 8129 	beq.w	801077a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	69ba      	ldr	r2, [r7, #24]
 801052c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801052e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010530:	69b8      	ldr	r0, [r7, #24]
 8010532:	f7ff f8c1 	bl	800f6b8 <tcp_oos_insert_segment>
                  }
                  break;
 8010536:	e120      	b.n	801077a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010538:	4b22      	ldr	r3, [pc, #136]	; (80105c4 <tcp_receive+0xd04>)
 801053a:	681a      	ldr	r2, [r3, #0]
 801053c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801053e:	68db      	ldr	r3, [r3, #12]
 8010540:	685b      	ldr	r3, [r3, #4]
 8010542:	1ad3      	subs	r3, r2, r3
 8010544:	3b01      	subs	r3, #1
 8010546:	2b00      	cmp	r3, #0
 8010548:	db3e      	blt.n	80105c8 <tcp_receive+0xd08>
 801054a:	4b1e      	ldr	r3, [pc, #120]	; (80105c4 <tcp_receive+0xd04>)
 801054c:	681a      	ldr	r2, [r3, #0]
 801054e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	685b      	ldr	r3, [r3, #4]
 8010554:	1ad3      	subs	r3, r2, r3
 8010556:	3301      	adds	r3, #1
 8010558:	2b00      	cmp	r3, #0
 801055a:	dc35      	bgt.n	80105c8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801055c:	4818      	ldr	r0, [pc, #96]	; (80105c0 <tcp_receive+0xd00>)
 801055e:	f7fd fb5b 	bl	800dc18 <tcp_seg_copy>
 8010562:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010564:	69fb      	ldr	r3, [r7, #28]
 8010566:	2b00      	cmp	r3, #0
 8010568:	f000 8109 	beq.w	801077e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801056c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801056e:	68db      	ldr	r3, [r3, #12]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010574:	8912      	ldrh	r2, [r2, #8]
 8010576:	441a      	add	r2, r3
 8010578:	4b12      	ldr	r3, [pc, #72]	; (80105c4 <tcp_receive+0xd04>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	1ad3      	subs	r3, r2, r3
 801057e:	2b00      	cmp	r3, #0
 8010580:	dd12      	ble.n	80105a8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010582:	4b10      	ldr	r3, [pc, #64]	; (80105c4 <tcp_receive+0xd04>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	b29a      	uxth	r2, r3
 8010588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801058a:	68db      	ldr	r3, [r3, #12]
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	b29b      	uxth	r3, r3
 8010590:	1ad3      	subs	r3, r2, r3
 8010592:	b29a      	uxth	r2, r3
 8010594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010596:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801059a:	685a      	ldr	r2, [r3, #4]
 801059c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801059e:	891b      	ldrh	r3, [r3, #8]
 80105a0:	4619      	mov	r1, r3
 80105a2:	4610      	mov	r0, r2
 80105a4:	f7fb fd62 	bl	800c06c <pbuf_realloc>
                    }
                    prev->next = cseg;
 80105a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105aa:	69fa      	ldr	r2, [r7, #28]
 80105ac:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80105ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105b0:	69f8      	ldr	r0, [r7, #28]
 80105b2:	f7ff f881 	bl	800f6b8 <tcp_oos_insert_segment>
                  }
                  break;
 80105b6:	e0e2      	b.n	801077e <tcp_receive+0xebe>
 80105b8:	240074d8 	.word	0x240074d8
 80105bc:	240074d5 	.word	0x240074d5
 80105c0:	240074a8 	.word	0x240074a8
 80105c4:	240074c8 	.word	0x240074c8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80105c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ca:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80105cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	f040 80c6 	bne.w	8010762 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80105d6:	4b80      	ldr	r3, [pc, #512]	; (80107d8 <tcp_receive+0xf18>)
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105dc:	68db      	ldr	r3, [r3, #12]
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	f340 80bd 	ble.w	8010762 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80105e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	899b      	ldrh	r3, [r3, #12]
 80105ee:	b29b      	uxth	r3, r3
 80105f0:	4618      	mov	r0, r3
 80105f2:	f7f7 ff1b 	bl	800842c <lwip_htons>
 80105f6:	4603      	mov	r3, r0
 80105f8:	b2db      	uxtb	r3, r3
 80105fa:	f003 0301 	and.w	r3, r3, #1
 80105fe:	2b00      	cmp	r3, #0
 8010600:	f040 80bf 	bne.w	8010782 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010604:	4875      	ldr	r0, [pc, #468]	; (80107dc <tcp_receive+0xf1c>)
 8010606:	f7fd fb07 	bl	800dc18 <tcp_seg_copy>
 801060a:	4602      	mov	r2, r0
 801060c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801060e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	f000 80b6 	beq.w	8010786 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801061a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061c:	68db      	ldr	r3, [r3, #12]
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010622:	8912      	ldrh	r2, [r2, #8]
 8010624:	441a      	add	r2, r3
 8010626:	4b6c      	ldr	r3, [pc, #432]	; (80107d8 <tcp_receive+0xf18>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	1ad3      	subs	r3, r2, r3
 801062c:	2b00      	cmp	r3, #0
 801062e:	dd12      	ble.n	8010656 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010630:	4b69      	ldr	r3, [pc, #420]	; (80107d8 <tcp_receive+0xf18>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	b29a      	uxth	r2, r3
 8010636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010638:	68db      	ldr	r3, [r3, #12]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	b29b      	uxth	r3, r3
 801063e:	1ad3      	subs	r3, r2, r3
 8010640:	b29a      	uxth	r2, r3
 8010642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010644:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010648:	685a      	ldr	r2, [r3, #4]
 801064a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801064c:	891b      	ldrh	r3, [r3, #8]
 801064e:	4619      	mov	r1, r3
 8010650:	4610      	mov	r0, r2
 8010652:	f7fb fd0b 	bl	800c06c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010656:	4b62      	ldr	r3, [pc, #392]	; (80107e0 <tcp_receive+0xf20>)
 8010658:	881b      	ldrh	r3, [r3, #0]
 801065a:	461a      	mov	r2, r3
 801065c:	4b5e      	ldr	r3, [pc, #376]	; (80107d8 <tcp_receive+0xf18>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	441a      	add	r2, r3
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010666:	6879      	ldr	r1, [r7, #4]
 8010668:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801066a:	440b      	add	r3, r1
 801066c:	1ad3      	subs	r3, r2, r3
 801066e:	2b00      	cmp	r3, #0
 8010670:	f340 8089 	ble.w	8010786 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	68db      	ldr	r3, [r3, #12]
 801067a:	899b      	ldrh	r3, [r3, #12]
 801067c:	b29b      	uxth	r3, r3
 801067e:	4618      	mov	r0, r3
 8010680:	f7f7 fed4 	bl	800842c <lwip_htons>
 8010684:	4603      	mov	r3, r0
 8010686:	b2db      	uxtb	r3, r3
 8010688:	f003 0301 	and.w	r3, r3, #1
 801068c:	2b00      	cmp	r3, #0
 801068e:	d022      	beq.n	80106d6 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	68db      	ldr	r3, [r3, #12]
 8010696:	899b      	ldrh	r3, [r3, #12]
 8010698:	b29b      	uxth	r3, r3
 801069a:	b21b      	sxth	r3, r3
 801069c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80106a0:	b21c      	sxth	r4, r3
 80106a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	899b      	ldrh	r3, [r3, #12]
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7f7 febd 	bl	800842c <lwip_htons>
 80106b2:	4603      	mov	r3, r0
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	b29b      	uxth	r3, r3
 80106b8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80106bc:	b29b      	uxth	r3, r3
 80106be:	4618      	mov	r0, r3
 80106c0:	f7f7 feb4 	bl	800842c <lwip_htons>
 80106c4:	4603      	mov	r3, r0
 80106c6:	b21b      	sxth	r3, r3
 80106c8:	4323      	orrs	r3, r4
 80106ca:	b21a      	sxth	r2, r3
 80106cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	68db      	ldr	r3, [r3, #12]
 80106d2:	b292      	uxth	r2, r2
 80106d4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106da:	b29a      	uxth	r2, r3
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106e0:	4413      	add	r3, r2
 80106e2:	b299      	uxth	r1, r3
 80106e4:	4b3c      	ldr	r3, [pc, #240]	; (80107d8 <tcp_receive+0xf18>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	1a8a      	subs	r2, r1, r2
 80106f0:	b292      	uxth	r2, r2
 80106f2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80106f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	685a      	ldr	r2, [r3, #4]
 80106fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	891b      	ldrh	r3, [r3, #8]
 8010700:	4619      	mov	r1, r3
 8010702:	4610      	mov	r0, r2
 8010704:	f7fb fcb2 	bl	800c06c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	891c      	ldrh	r4, [r3, #8]
 801070e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	899b      	ldrh	r3, [r3, #12]
 8010716:	b29b      	uxth	r3, r3
 8010718:	4618      	mov	r0, r3
 801071a:	f7f7 fe87 	bl	800842c <lwip_htons>
 801071e:	4603      	mov	r3, r0
 8010720:	b2db      	uxtb	r3, r3
 8010722:	f003 0303 	and.w	r3, r3, #3
 8010726:	2b00      	cmp	r3, #0
 8010728:	d001      	beq.n	801072e <tcp_receive+0xe6e>
 801072a:	2301      	movs	r3, #1
 801072c:	e000      	b.n	8010730 <tcp_receive+0xe70>
 801072e:	2300      	movs	r3, #0
 8010730:	4423      	add	r3, r4
 8010732:	b29a      	uxth	r2, r3
 8010734:	4b2a      	ldr	r3, [pc, #168]	; (80107e0 <tcp_receive+0xf20>)
 8010736:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010738:	4b29      	ldr	r3, [pc, #164]	; (80107e0 <tcp_receive+0xf20>)
 801073a:	881b      	ldrh	r3, [r3, #0]
 801073c:	461a      	mov	r2, r3
 801073e:	4b26      	ldr	r3, [pc, #152]	; (80107d8 <tcp_receive+0xf18>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	441a      	add	r2, r3
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010748:	6879      	ldr	r1, [r7, #4]
 801074a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801074c:	440b      	add	r3, r1
 801074e:	429a      	cmp	r2, r3
 8010750:	d019      	beq.n	8010786 <tcp_receive+0xec6>
 8010752:	4b24      	ldr	r3, [pc, #144]	; (80107e4 <tcp_receive+0xf24>)
 8010754:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010758:	4923      	ldr	r1, [pc, #140]	; (80107e8 <tcp_receive+0xf28>)
 801075a:	4824      	ldr	r0, [pc, #144]	; (80107ec <tcp_receive+0xf2c>)
 801075c:	f002 fc44 	bl	8012fe8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010760:	e011      	b.n	8010786 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	63bb      	str	r3, [r7, #56]	; 0x38
 8010768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801076a:	2b00      	cmp	r3, #0
 801076c:	f47f aea4 	bne.w	80104b8 <tcp_receive+0xbf8>
 8010770:	e00a      	b.n	8010788 <tcp_receive+0xec8>
                break;
 8010772:	bf00      	nop
 8010774:	e008      	b.n	8010788 <tcp_receive+0xec8>
                break;
 8010776:	bf00      	nop
 8010778:	e006      	b.n	8010788 <tcp_receive+0xec8>
                  break;
 801077a:	bf00      	nop
 801077c:	e004      	b.n	8010788 <tcp_receive+0xec8>
                  break;
 801077e:	bf00      	nop
 8010780:	e002      	b.n	8010788 <tcp_receive+0xec8>
                  break;
 8010782:	bf00      	nop
 8010784:	e000      	b.n	8010788 <tcp_receive+0xec8>
                break;
 8010786:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f001 fa33 	bl	8011bf4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801078e:	e003      	b.n	8010798 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f001 fa2f 	bl	8011bf4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010796:	e01a      	b.n	80107ce <tcp_receive+0xf0e>
 8010798:	e019      	b.n	80107ce <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801079a:	4b0f      	ldr	r3, [pc, #60]	; (80107d8 <tcp_receive+0xf18>)
 801079c:	681a      	ldr	r2, [r3, #0]
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a2:	1ad3      	subs	r3, r2, r3
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	db0a      	blt.n	80107be <tcp_receive+0xefe>
 80107a8:	4b0b      	ldr	r3, [pc, #44]	; (80107d8 <tcp_receive+0xf18>)
 80107aa:	681a      	ldr	r2, [r3, #0]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b0:	6879      	ldr	r1, [r7, #4]
 80107b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80107b4:	440b      	add	r3, r1
 80107b6:	1ad3      	subs	r3, r2, r3
 80107b8:	3301      	adds	r3, #1
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	dd07      	ble.n	80107ce <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	8b5b      	ldrh	r3, [r3, #26]
 80107c2:	f043 0302 	orr.w	r3, r3, #2
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80107cc:	e7ff      	b.n	80107ce <tcp_receive+0xf0e>
 80107ce:	bf00      	nop
 80107d0:	3750      	adds	r7, #80	; 0x50
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bdb0      	pop	{r4, r5, r7, pc}
 80107d6:	bf00      	nop
 80107d8:	240074c8 	.word	0x240074c8
 80107dc:	240074a8 	.word	0x240074a8
 80107e0:	240074d2 	.word	0x240074d2
 80107e4:	08016118 	.word	0x08016118
 80107e8:	08016514 	.word	0x08016514
 80107ec:	080161b8 	.word	0x080161b8

080107f0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80107f0:	b480      	push	{r7}
 80107f2:	b083      	sub	sp, #12
 80107f4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80107f6:	4b15      	ldr	r3, [pc, #84]	; (801084c <tcp_get_next_optbyte+0x5c>)
 80107f8:	881b      	ldrh	r3, [r3, #0]
 80107fa:	1c5a      	adds	r2, r3, #1
 80107fc:	b291      	uxth	r1, r2
 80107fe:	4a13      	ldr	r2, [pc, #76]	; (801084c <tcp_get_next_optbyte+0x5c>)
 8010800:	8011      	strh	r1, [r2, #0]
 8010802:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010804:	4b12      	ldr	r3, [pc, #72]	; (8010850 <tcp_get_next_optbyte+0x60>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d004      	beq.n	8010816 <tcp_get_next_optbyte+0x26>
 801080c:	4b11      	ldr	r3, [pc, #68]	; (8010854 <tcp_get_next_optbyte+0x64>)
 801080e:	881b      	ldrh	r3, [r3, #0]
 8010810:	88fa      	ldrh	r2, [r7, #6]
 8010812:	429a      	cmp	r2, r3
 8010814:	d208      	bcs.n	8010828 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010816:	4b10      	ldr	r3, [pc, #64]	; (8010858 <tcp_get_next_optbyte+0x68>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	3314      	adds	r3, #20
 801081c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801081e:	88fb      	ldrh	r3, [r7, #6]
 8010820:	683a      	ldr	r2, [r7, #0]
 8010822:	4413      	add	r3, r2
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	e00b      	b.n	8010840 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010828:	88fb      	ldrh	r3, [r7, #6]
 801082a:	b2da      	uxtb	r2, r3
 801082c:	4b09      	ldr	r3, [pc, #36]	; (8010854 <tcp_get_next_optbyte+0x64>)
 801082e:	881b      	ldrh	r3, [r3, #0]
 8010830:	b2db      	uxtb	r3, r3
 8010832:	1ad3      	subs	r3, r2, r3
 8010834:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010836:	4b06      	ldr	r3, [pc, #24]	; (8010850 <tcp_get_next_optbyte+0x60>)
 8010838:	681a      	ldr	r2, [r3, #0]
 801083a:	797b      	ldrb	r3, [r7, #5]
 801083c:	4413      	add	r3, r2
 801083e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010840:	4618      	mov	r0, r3
 8010842:	370c      	adds	r7, #12
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr
 801084c:	240074c4 	.word	0x240074c4
 8010850:	240074c0 	.word	0x240074c0
 8010854:	240074be 	.word	0x240074be
 8010858:	240074b8 	.word	0x240074b8

0801085c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b084      	sub	sp, #16
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d106      	bne.n	8010878 <tcp_parseopt+0x1c>
 801086a:	4b32      	ldr	r3, [pc, #200]	; (8010934 <tcp_parseopt+0xd8>)
 801086c:	f240 727d 	movw	r2, #1917	; 0x77d
 8010870:	4931      	ldr	r1, [pc, #196]	; (8010938 <tcp_parseopt+0xdc>)
 8010872:	4832      	ldr	r0, [pc, #200]	; (801093c <tcp_parseopt+0xe0>)
 8010874:	f002 fbb8 	bl	8012fe8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010878:	4b31      	ldr	r3, [pc, #196]	; (8010940 <tcp_parseopt+0xe4>)
 801087a:	881b      	ldrh	r3, [r3, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d055      	beq.n	801092c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010880:	4b30      	ldr	r3, [pc, #192]	; (8010944 <tcp_parseopt+0xe8>)
 8010882:	2200      	movs	r2, #0
 8010884:	801a      	strh	r2, [r3, #0]
 8010886:	e045      	b.n	8010914 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010888:	f7ff ffb2 	bl	80107f0 <tcp_get_next_optbyte>
 801088c:	4603      	mov	r3, r0
 801088e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010890:	7bfb      	ldrb	r3, [r7, #15]
 8010892:	2b02      	cmp	r3, #2
 8010894:	d006      	beq.n	80108a4 <tcp_parseopt+0x48>
 8010896:	2b02      	cmp	r3, #2
 8010898:	dc2b      	bgt.n	80108f2 <tcp_parseopt+0x96>
 801089a:	2b00      	cmp	r3, #0
 801089c:	d041      	beq.n	8010922 <tcp_parseopt+0xc6>
 801089e:	2b01      	cmp	r3, #1
 80108a0:	d127      	bne.n	80108f2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80108a2:	e037      	b.n	8010914 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80108a4:	f7ff ffa4 	bl	80107f0 <tcp_get_next_optbyte>
 80108a8:	4603      	mov	r3, r0
 80108aa:	2b04      	cmp	r3, #4
 80108ac:	d13b      	bne.n	8010926 <tcp_parseopt+0xca>
 80108ae:	4b25      	ldr	r3, [pc, #148]	; (8010944 <tcp_parseopt+0xe8>)
 80108b0:	881b      	ldrh	r3, [r3, #0]
 80108b2:	3301      	adds	r3, #1
 80108b4:	4a22      	ldr	r2, [pc, #136]	; (8010940 <tcp_parseopt+0xe4>)
 80108b6:	8812      	ldrh	r2, [r2, #0]
 80108b8:	4293      	cmp	r3, r2
 80108ba:	da34      	bge.n	8010926 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80108bc:	f7ff ff98 	bl	80107f0 <tcp_get_next_optbyte>
 80108c0:	4603      	mov	r3, r0
 80108c2:	b29b      	uxth	r3, r3
 80108c4:	021b      	lsls	r3, r3, #8
 80108c6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80108c8:	f7ff ff92 	bl	80107f0 <tcp_get_next_optbyte>
 80108cc:	4603      	mov	r3, r0
 80108ce:	b29a      	uxth	r2, r3
 80108d0:	89bb      	ldrh	r3, [r7, #12]
 80108d2:	4313      	orrs	r3, r2
 80108d4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80108d6:	89bb      	ldrh	r3, [r7, #12]
 80108d8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80108dc:	d804      	bhi.n	80108e8 <tcp_parseopt+0x8c>
 80108de:	89bb      	ldrh	r3, [r7, #12]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d001      	beq.n	80108e8 <tcp_parseopt+0x8c>
 80108e4:	89ba      	ldrh	r2, [r7, #12]
 80108e6:	e001      	b.n	80108ec <tcp_parseopt+0x90>
 80108e8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80108f0:	e010      	b.n	8010914 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80108f2:	f7ff ff7d 	bl	80107f0 <tcp_get_next_optbyte>
 80108f6:	4603      	mov	r3, r0
 80108f8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80108fa:	7afb      	ldrb	r3, [r7, #11]
 80108fc:	2b01      	cmp	r3, #1
 80108fe:	d914      	bls.n	801092a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010900:	7afb      	ldrb	r3, [r7, #11]
 8010902:	b29a      	uxth	r2, r3
 8010904:	4b0f      	ldr	r3, [pc, #60]	; (8010944 <tcp_parseopt+0xe8>)
 8010906:	881b      	ldrh	r3, [r3, #0]
 8010908:	4413      	add	r3, r2
 801090a:	b29b      	uxth	r3, r3
 801090c:	3b02      	subs	r3, #2
 801090e:	b29a      	uxth	r2, r3
 8010910:	4b0c      	ldr	r3, [pc, #48]	; (8010944 <tcp_parseopt+0xe8>)
 8010912:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010914:	4b0b      	ldr	r3, [pc, #44]	; (8010944 <tcp_parseopt+0xe8>)
 8010916:	881a      	ldrh	r2, [r3, #0]
 8010918:	4b09      	ldr	r3, [pc, #36]	; (8010940 <tcp_parseopt+0xe4>)
 801091a:	881b      	ldrh	r3, [r3, #0]
 801091c:	429a      	cmp	r2, r3
 801091e:	d3b3      	bcc.n	8010888 <tcp_parseopt+0x2c>
 8010920:	e004      	b.n	801092c <tcp_parseopt+0xd0>
          return;
 8010922:	bf00      	nop
 8010924:	e002      	b.n	801092c <tcp_parseopt+0xd0>
            return;
 8010926:	bf00      	nop
 8010928:	e000      	b.n	801092c <tcp_parseopt+0xd0>
            return;
 801092a:	bf00      	nop
      }
    }
  }
}
 801092c:	3710      	adds	r7, #16
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	08016118 	.word	0x08016118
 8010938:	080165d0 	.word	0x080165d0
 801093c:	080161b8 	.word	0x080161b8
 8010940:	240074bc 	.word	0x240074bc
 8010944:	240074c4 	.word	0x240074c4

08010948 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010948:	b480      	push	{r7}
 801094a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801094c:	4b05      	ldr	r3, [pc, #20]	; (8010964 <tcp_trigger_input_pcb_close+0x1c>)
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	f043 0310 	orr.w	r3, r3, #16
 8010954:	b2da      	uxtb	r2, r3
 8010956:	4b03      	ldr	r3, [pc, #12]	; (8010964 <tcp_trigger_input_pcb_close+0x1c>)
 8010958:	701a      	strb	r2, [r3, #0]
}
 801095a:	bf00      	nop
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr
 8010964:	240074d5 	.word	0x240074d5

08010968 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b084      	sub	sp, #16
 801096c:	af00      	add	r7, sp, #0
 801096e:	60f8      	str	r0, [r7, #12]
 8010970:	60b9      	str	r1, [r7, #8]
 8010972:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d00a      	beq.n	8010990 <tcp_route+0x28>
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	7a1b      	ldrb	r3, [r3, #8]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d006      	beq.n	8010990 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	7a1b      	ldrb	r3, [r3, #8]
 8010986:	4618      	mov	r0, r3
 8010988:	f7fb f968 	bl	800bc5c <netif_get_by_index>
 801098c:	4603      	mov	r3, r0
 801098e:	e003      	b.n	8010998 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f7f9 f823 	bl	80099dc <ip4_route>
 8010996:	4603      	mov	r3, r0
  }
}
 8010998:	4618      	mov	r0, r3
 801099a:	3710      	adds	r7, #16
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}

080109a0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80109a0:	b590      	push	{r4, r7, lr}
 80109a2:	b087      	sub	sp, #28
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	60b9      	str	r1, [r7, #8]
 80109aa:	603b      	str	r3, [r7, #0]
 80109ac:	4613      	mov	r3, r2
 80109ae:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d105      	bne.n	80109c2 <tcp_create_segment+0x22>
 80109b6:	4b44      	ldr	r3, [pc, #272]	; (8010ac8 <tcp_create_segment+0x128>)
 80109b8:	22a3      	movs	r2, #163	; 0xa3
 80109ba:	4944      	ldr	r1, [pc, #272]	; (8010acc <tcp_create_segment+0x12c>)
 80109bc:	4844      	ldr	r0, [pc, #272]	; (8010ad0 <tcp_create_segment+0x130>)
 80109be:	f002 fb13 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d105      	bne.n	80109d4 <tcp_create_segment+0x34>
 80109c8:	4b3f      	ldr	r3, [pc, #252]	; (8010ac8 <tcp_create_segment+0x128>)
 80109ca:	22a4      	movs	r2, #164	; 0xa4
 80109cc:	4941      	ldr	r1, [pc, #260]	; (8010ad4 <tcp_create_segment+0x134>)
 80109ce:	4840      	ldr	r0, [pc, #256]	; (8010ad0 <tcp_create_segment+0x130>)
 80109d0:	f002 fb0a 	bl	8012fe8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80109d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80109d8:	009b      	lsls	r3, r3, #2
 80109da:	b2db      	uxtb	r3, r3
 80109dc:	f003 0304 	and.w	r3, r3, #4
 80109e0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80109e2:	2003      	movs	r0, #3
 80109e4:	f7fa fdae 	bl	800b544 <memp_malloc>
 80109e8:	6138      	str	r0, [r7, #16]
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d104      	bne.n	80109fa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80109f0:	68b8      	ldr	r0, [r7, #8]
 80109f2:	f7fb fcc1 	bl	800c378 <pbuf_free>
    return NULL;
 80109f6:	2300      	movs	r3, #0
 80109f8:	e061      	b.n	8010abe <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80109fa:	693b      	ldr	r3, [r7, #16]
 80109fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010a00:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	2200      	movs	r2, #0
 8010a06:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	68ba      	ldr	r2, [r7, #8]
 8010a0c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	891a      	ldrh	r2, [r3, #8]
 8010a12:	7dfb      	ldrb	r3, [r7, #23]
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d205      	bcs.n	8010a26 <tcp_create_segment+0x86>
 8010a1a:	4b2b      	ldr	r3, [pc, #172]	; (8010ac8 <tcp_create_segment+0x128>)
 8010a1c:	22b0      	movs	r2, #176	; 0xb0
 8010a1e:	492e      	ldr	r1, [pc, #184]	; (8010ad8 <tcp_create_segment+0x138>)
 8010a20:	482b      	ldr	r0, [pc, #172]	; (8010ad0 <tcp_create_segment+0x130>)
 8010a22:	f002 fae1 	bl	8012fe8 <iprintf>
  seg->len = p->tot_len - optlen;
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	891a      	ldrh	r2, [r3, #8]
 8010a2a:	7dfb      	ldrb	r3, [r7, #23]
 8010a2c:	b29b      	uxth	r3, r3
 8010a2e:	1ad3      	subs	r3, r2, r3
 8010a30:	b29a      	uxth	r2, r3
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010a36:	2114      	movs	r1, #20
 8010a38:	68b8      	ldr	r0, [r7, #8]
 8010a3a:	f7fb fc07 	bl	800c24c <pbuf_add_header>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d004      	beq.n	8010a4e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010a44:	6938      	ldr	r0, [r7, #16]
 8010a46:	f7fd f8ce 	bl	800dbe6 <tcp_seg_free>
    return NULL;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	e037      	b.n	8010abe <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	685b      	ldr	r3, [r3, #4]
 8010a52:	685a      	ldr	r2, [r3, #4]
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	8ada      	ldrh	r2, [r3, #22]
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	68dc      	ldr	r4, [r3, #12]
 8010a60:	4610      	mov	r0, r2
 8010a62:	f7f7 fce3 	bl	800842c <lwip_htons>
 8010a66:	4603      	mov	r3, r0
 8010a68:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	8b1a      	ldrh	r2, [r3, #24]
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	68dc      	ldr	r4, [r3, #12]
 8010a72:	4610      	mov	r0, r2
 8010a74:	f7f7 fcda 	bl	800842c <lwip_htons>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010a7c:	693b      	ldr	r3, [r7, #16]
 8010a7e:	68dc      	ldr	r4, [r3, #12]
 8010a80:	6838      	ldr	r0, [r7, #0]
 8010a82:	f7f7 fce8 	bl	8008456 <lwip_htonl>
 8010a86:	4603      	mov	r3, r0
 8010a88:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010a8a:	7dfb      	ldrb	r3, [r7, #23]
 8010a8c:	089b      	lsrs	r3, r3, #2
 8010a8e:	b2db      	uxtb	r3, r3
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	3305      	adds	r3, #5
 8010a94:	b29b      	uxth	r3, r3
 8010a96:	031b      	lsls	r3, r3, #12
 8010a98:	b29a      	uxth	r2, r3
 8010a9a:	79fb      	ldrb	r3, [r7, #7]
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	4313      	orrs	r3, r2
 8010aa0:	b29a      	uxth	r2, r3
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	68dc      	ldr	r4, [r3, #12]
 8010aa6:	4610      	mov	r0, r2
 8010aa8:	f7f7 fcc0 	bl	800842c <lwip_htons>
 8010aac:	4603      	mov	r3, r0
 8010aae:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	68db      	ldr	r3, [r3, #12]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	749a      	strb	r2, [r3, #18]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	74da      	strb	r2, [r3, #19]
  return seg;
 8010abc:	693b      	ldr	r3, [r7, #16]
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	371c      	adds	r7, #28
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd90      	pop	{r4, r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	080165ec 	.word	0x080165ec
 8010acc:	08016674 	.word	0x08016674
 8010ad0:	08016694 	.word	0x08016694
 8010ad4:	080166bc 	.word	0x080166bc
 8010ad8:	080166e0 	.word	0x080166e0

08010adc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010adc:	b590      	push	{r4, r7, lr}
 8010ade:	b08b      	sub	sp, #44	; 0x2c
 8010ae0:	af02      	add	r7, sp, #8
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	460b      	mov	r3, r1
 8010ae6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	61fb      	str	r3, [r7, #28]
 8010aec:	2300      	movs	r3, #0
 8010aee:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010af0:	2300      	movs	r3, #0
 8010af2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d106      	bne.n	8010b08 <tcp_split_unsent_seg+0x2c>
 8010afa:	4b95      	ldr	r3, [pc, #596]	; (8010d50 <tcp_split_unsent_seg+0x274>)
 8010afc:	f240 324b 	movw	r2, #843	; 0x34b
 8010b00:	4994      	ldr	r1, [pc, #592]	; (8010d54 <tcp_split_unsent_seg+0x278>)
 8010b02:	4895      	ldr	r0, [pc, #596]	; (8010d58 <tcp_split_unsent_seg+0x27c>)
 8010b04:	f002 fa70 	bl	8012fe8 <iprintf>

  useg = pcb->unsent;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b0c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d102      	bne.n	8010b1a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010b14:	f04f 33ff 	mov.w	r3, #4294967295
 8010b18:	e116      	b.n	8010d48 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010b1a:	887b      	ldrh	r3, [r7, #2]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d109      	bne.n	8010b34 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010b20:	4b8b      	ldr	r3, [pc, #556]	; (8010d50 <tcp_split_unsent_seg+0x274>)
 8010b22:	f240 3253 	movw	r2, #851	; 0x353
 8010b26:	498d      	ldr	r1, [pc, #564]	; (8010d5c <tcp_split_unsent_seg+0x280>)
 8010b28:	488b      	ldr	r0, [pc, #556]	; (8010d58 <tcp_split_unsent_seg+0x27c>)
 8010b2a:	f002 fa5d 	bl	8012fe8 <iprintf>
    return ERR_VAL;
 8010b2e:	f06f 0305 	mvn.w	r3, #5
 8010b32:	e109      	b.n	8010d48 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	891b      	ldrh	r3, [r3, #8]
 8010b38:	887a      	ldrh	r2, [r7, #2]
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d301      	bcc.n	8010b42 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	e102      	b.n	8010d48 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b46:	887a      	ldrh	r2, [r7, #2]
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d906      	bls.n	8010b5a <tcp_split_unsent_seg+0x7e>
 8010b4c:	4b80      	ldr	r3, [pc, #512]	; (8010d50 <tcp_split_unsent_seg+0x274>)
 8010b4e:	f240 325b 	movw	r2, #859	; 0x35b
 8010b52:	4983      	ldr	r1, [pc, #524]	; (8010d60 <tcp_split_unsent_seg+0x284>)
 8010b54:	4880      	ldr	r0, [pc, #512]	; (8010d58 <tcp_split_unsent_seg+0x27c>)
 8010b56:	f002 fa47 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	891b      	ldrh	r3, [r3, #8]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d106      	bne.n	8010b70 <tcp_split_unsent_seg+0x94>
 8010b62:	4b7b      	ldr	r3, [pc, #492]	; (8010d50 <tcp_split_unsent_seg+0x274>)
 8010b64:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010b68:	497e      	ldr	r1, [pc, #504]	; (8010d64 <tcp_split_unsent_seg+0x288>)
 8010b6a:	487b      	ldr	r0, [pc, #492]	; (8010d58 <tcp_split_unsent_seg+0x27c>)
 8010b6c:	f002 fa3c 	bl	8012fe8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	7a9b      	ldrb	r3, [r3, #10]
 8010b74:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010b76:	7bfb      	ldrb	r3, [r7, #15]
 8010b78:	009b      	lsls	r3, r3, #2
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	f003 0304 	and.w	r3, r3, #4
 8010b80:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	891a      	ldrh	r2, [r3, #8]
 8010b86:	887b      	ldrh	r3, [r7, #2]
 8010b88:	1ad3      	subs	r3, r2, r3
 8010b8a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010b8c:	7bbb      	ldrb	r3, [r7, #14]
 8010b8e:	b29a      	uxth	r2, r3
 8010b90:	89bb      	ldrh	r3, [r7, #12]
 8010b92:	4413      	add	r3, r2
 8010b94:	b29b      	uxth	r3, r3
 8010b96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	2036      	movs	r0, #54	; 0x36
 8010b9e:	f7fb f907 	bl	800bdb0 <pbuf_alloc>
 8010ba2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	f000 80b7 	beq.w	8010d1a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	685b      	ldr	r3, [r3, #4]
 8010bb0:	891a      	ldrh	r2, [r3, #8]
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	891b      	ldrh	r3, [r3, #8]
 8010bb6:	1ad3      	subs	r3, r2, r3
 8010bb8:	b29a      	uxth	r2, r3
 8010bba:	887b      	ldrh	r3, [r7, #2]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	6858      	ldr	r0, [r3, #4]
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	685a      	ldr	r2, [r3, #4]
 8010bc8:	7bbb      	ldrb	r3, [r7, #14]
 8010bca:	18d1      	adds	r1, r2, r3
 8010bcc:	897b      	ldrh	r3, [r7, #10]
 8010bce:	89ba      	ldrh	r2, [r7, #12]
 8010bd0:	f7fb fdd8 	bl	800c784 <pbuf_copy_partial>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	461a      	mov	r2, r3
 8010bd8:	89bb      	ldrh	r3, [r7, #12]
 8010bda:	4293      	cmp	r3, r2
 8010bdc:	f040 809f 	bne.w	8010d1e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	68db      	ldr	r3, [r3, #12]
 8010be4:	899b      	ldrh	r3, [r3, #12]
 8010be6:	b29b      	uxth	r3, r3
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7f7 fc1f 	bl	800842c <lwip_htons>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	b2db      	uxtb	r3, r3
 8010bf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010bf6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010bfc:	7efb      	ldrb	r3, [r7, #27]
 8010bfe:	f003 0308 	and.w	r3, r3, #8
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d007      	beq.n	8010c16 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010c06:	7efb      	ldrb	r3, [r7, #27]
 8010c08:	f023 0308 	bic.w	r3, r3, #8
 8010c0c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010c0e:	7ebb      	ldrb	r3, [r7, #26]
 8010c10:	f043 0308 	orr.w	r3, r3, #8
 8010c14:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010c16:	7efb      	ldrb	r3, [r7, #27]
 8010c18:	f003 0301 	and.w	r3, r3, #1
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d007      	beq.n	8010c30 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010c20:	7efb      	ldrb	r3, [r7, #27]
 8010c22:	f023 0301 	bic.w	r3, r3, #1
 8010c26:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010c28:	7ebb      	ldrb	r3, [r7, #26]
 8010c2a:	f043 0301 	orr.w	r3, r3, #1
 8010c2e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	68db      	ldr	r3, [r3, #12]
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7f7 fc0d 	bl	8008456 <lwip_htonl>
 8010c3c:	4602      	mov	r2, r0
 8010c3e:	887b      	ldrh	r3, [r7, #2]
 8010c40:	18d1      	adds	r1, r2, r3
 8010c42:	7eba      	ldrb	r2, [r7, #26]
 8010c44:	7bfb      	ldrb	r3, [r7, #15]
 8010c46:	9300      	str	r3, [sp, #0]
 8010c48:	460b      	mov	r3, r1
 8010c4a:	6939      	ldr	r1, [r7, #16]
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f7ff fea7 	bl	80109a0 <tcp_create_segment>
 8010c52:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010c54:	69fb      	ldr	r3, [r7, #28]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d063      	beq.n	8010d22 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	685b      	ldr	r3, [r3, #4]
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7fb fc18 	bl	800c494 <pbuf_clen>
 8010c64:	4603      	mov	r3, r0
 8010c66:	461a      	mov	r2, r3
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c6e:	1a9b      	subs	r3, r3, r2
 8010c70:	b29a      	uxth	r2, r3
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	6858      	ldr	r0, [r3, #4]
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	891a      	ldrh	r2, [r3, #8]
 8010c82:	89bb      	ldrh	r3, [r7, #12]
 8010c84:	1ad3      	subs	r3, r2, r3
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	4619      	mov	r1, r3
 8010c8a:	f7fb f9ef 	bl	800c06c <pbuf_realloc>
  useg->len -= remainder;
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	891a      	ldrh	r2, [r3, #8]
 8010c92:	89bb      	ldrh	r3, [r7, #12]
 8010c94:	1ad3      	subs	r3, r2, r3
 8010c96:	b29a      	uxth	r2, r3
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	68db      	ldr	r3, [r3, #12]
 8010ca0:	899b      	ldrh	r3, [r3, #12]
 8010ca2:	b29c      	uxth	r4, r3
 8010ca4:	7efb      	ldrb	r3, [r7, #27]
 8010ca6:	b29b      	uxth	r3, r3
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7f7 fbbf 	bl	800842c <lwip_htons>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	68db      	ldr	r3, [r3, #12]
 8010cb6:	4322      	orrs	r2, r4
 8010cb8:	b292      	uxth	r2, r2
 8010cba:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7fb fbe7 	bl	800c494 <pbuf_clen>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	461a      	mov	r2, r3
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cd0:	4413      	add	r3, r2
 8010cd2:	b29a      	uxth	r2, r3
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010cda:	69fb      	ldr	r3, [r7, #28]
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7fb fbd8 	bl	800c494 <pbuf_clen>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	461a      	mov	r2, r3
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cee:	4413      	add	r3, r2
 8010cf0:	b29a      	uxth	r2, r3
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	681a      	ldr	r2, [r3, #0]
 8010cfc:	69fb      	ldr	r3, [r7, #28]
 8010cfe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	69fa      	ldr	r2, [r7, #28]
 8010d04:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010d06:	69fb      	ldr	r3, [r7, #28]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d103      	bne.n	8010d16 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2200      	movs	r2, #0
 8010d12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010d16:	2300      	movs	r3, #0
 8010d18:	e016      	b.n	8010d48 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010d1a:	bf00      	nop
 8010d1c:	e002      	b.n	8010d24 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010d1e:	bf00      	nop
 8010d20:	e000      	b.n	8010d24 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010d22:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010d24:	69fb      	ldr	r3, [r7, #28]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d006      	beq.n	8010d38 <tcp_split_unsent_seg+0x25c>
 8010d2a:	4b09      	ldr	r3, [pc, #36]	; (8010d50 <tcp_split_unsent_seg+0x274>)
 8010d2c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010d30:	490d      	ldr	r1, [pc, #52]	; (8010d68 <tcp_split_unsent_seg+0x28c>)
 8010d32:	4809      	ldr	r0, [pc, #36]	; (8010d58 <tcp_split_unsent_seg+0x27c>)
 8010d34:	f002 f958 	bl	8012fe8 <iprintf>
  if (p != NULL) {
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d002      	beq.n	8010d44 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010d3e:	6938      	ldr	r0, [r7, #16]
 8010d40:	f7fb fb1a 	bl	800c378 <pbuf_free>
  }

  return ERR_MEM;
 8010d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3724      	adds	r7, #36	; 0x24
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd90      	pop	{r4, r7, pc}
 8010d50:	080165ec 	.word	0x080165ec
 8010d54:	080169d4 	.word	0x080169d4
 8010d58:	08016694 	.word	0x08016694
 8010d5c:	080169f8 	.word	0x080169f8
 8010d60:	08016a1c 	.word	0x08016a1c
 8010d64:	08016a2c 	.word	0x08016a2c
 8010d68:	08016a3c 	.word	0x08016a3c

08010d6c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010d6c:	b590      	push	{r4, r7, lr}
 8010d6e:	b085      	sub	sp, #20
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d106      	bne.n	8010d88 <tcp_send_fin+0x1c>
 8010d7a:	4b21      	ldr	r3, [pc, #132]	; (8010e00 <tcp_send_fin+0x94>)
 8010d7c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010d80:	4920      	ldr	r1, [pc, #128]	; (8010e04 <tcp_send_fin+0x98>)
 8010d82:	4821      	ldr	r0, [pc, #132]	; (8010e08 <tcp_send_fin+0x9c>)
 8010d84:	f002 f930 	bl	8012fe8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d02e      	beq.n	8010dee <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d94:	60fb      	str	r3, [r7, #12]
 8010d96:	e002      	b.n	8010d9e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d1f8      	bne.n	8010d98 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	68db      	ldr	r3, [r3, #12]
 8010daa:	899b      	ldrh	r3, [r3, #12]
 8010dac:	b29b      	uxth	r3, r3
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7f7 fb3c 	bl	800842c <lwip_htons>
 8010db4:	4603      	mov	r3, r0
 8010db6:	b2db      	uxtb	r3, r3
 8010db8:	f003 0307 	and.w	r3, r3, #7
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d116      	bne.n	8010dee <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	899b      	ldrh	r3, [r3, #12]
 8010dc6:	b29c      	uxth	r4, r3
 8010dc8:	2001      	movs	r0, #1
 8010dca:	f7f7 fb2f 	bl	800842c <lwip_htons>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	461a      	mov	r2, r3
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	68db      	ldr	r3, [r3, #12]
 8010dd6:	4322      	orrs	r2, r4
 8010dd8:	b292      	uxth	r2, r2
 8010dda:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	8b5b      	ldrh	r3, [r3, #26]
 8010de0:	f043 0320 	orr.w	r3, r3, #32
 8010de4:	b29a      	uxth	r2, r3
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010dea:	2300      	movs	r3, #0
 8010dec:	e004      	b.n	8010df8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010dee:	2101      	movs	r1, #1
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 f80b 	bl	8010e0c <tcp_enqueue_flags>
 8010df6:	4603      	mov	r3, r0
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3714      	adds	r7, #20
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd90      	pop	{r4, r7, pc}
 8010e00:	080165ec 	.word	0x080165ec
 8010e04:	08016a48 	.word	0x08016a48
 8010e08:	08016694 	.word	0x08016694

08010e0c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b08a      	sub	sp, #40	; 0x28
 8010e10:	af02      	add	r7, sp, #8
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	460b      	mov	r3, r1
 8010e16:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010e20:	78fb      	ldrb	r3, [r7, #3]
 8010e22:	f003 0303 	and.w	r3, r3, #3
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d106      	bne.n	8010e38 <tcp_enqueue_flags+0x2c>
 8010e2a:	4b67      	ldr	r3, [pc, #412]	; (8010fc8 <tcp_enqueue_flags+0x1bc>)
 8010e2c:	f240 4211 	movw	r2, #1041	; 0x411
 8010e30:	4966      	ldr	r1, [pc, #408]	; (8010fcc <tcp_enqueue_flags+0x1c0>)
 8010e32:	4867      	ldr	r0, [pc, #412]	; (8010fd0 <tcp_enqueue_flags+0x1c4>)
 8010e34:	f002 f8d8 	bl	8012fe8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d106      	bne.n	8010e4c <tcp_enqueue_flags+0x40>
 8010e3e:	4b62      	ldr	r3, [pc, #392]	; (8010fc8 <tcp_enqueue_flags+0x1bc>)
 8010e40:	f240 4213 	movw	r2, #1043	; 0x413
 8010e44:	4963      	ldr	r1, [pc, #396]	; (8010fd4 <tcp_enqueue_flags+0x1c8>)
 8010e46:	4862      	ldr	r0, [pc, #392]	; (8010fd0 <tcp_enqueue_flags+0x1c4>)
 8010e48:	f002 f8ce 	bl	8012fe8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010e4c:	78fb      	ldrb	r3, [r7, #3]
 8010e4e:	f003 0302 	and.w	r3, r3, #2
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d001      	beq.n	8010e5a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010e56:	2301      	movs	r3, #1
 8010e58:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010e5a:	7ffb      	ldrb	r3, [r7, #31]
 8010e5c:	009b      	lsls	r3, r3, #2
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	f003 0304 	and.w	r3, r3, #4
 8010e64:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010e66:	7dfb      	ldrb	r3, [r7, #23]
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e6e:	4619      	mov	r1, r3
 8010e70:	2036      	movs	r0, #54	; 0x36
 8010e72:	f7fa ff9d 	bl	800bdb0 <pbuf_alloc>
 8010e76:	6138      	str	r0, [r7, #16]
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d109      	bne.n	8010e92 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	8b5b      	ldrh	r3, [r3, #26]
 8010e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e86:	b29a      	uxth	r2, r3
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8010e90:	e095      	b.n	8010fbe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	895a      	ldrh	r2, [r3, #10]
 8010e96:	7dfb      	ldrb	r3, [r7, #23]
 8010e98:	b29b      	uxth	r3, r3
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d206      	bcs.n	8010eac <tcp_enqueue_flags+0xa0>
 8010e9e:	4b4a      	ldr	r3, [pc, #296]	; (8010fc8 <tcp_enqueue_flags+0x1bc>)
 8010ea0:	f240 4239 	movw	r2, #1081	; 0x439
 8010ea4:	494c      	ldr	r1, [pc, #304]	; (8010fd8 <tcp_enqueue_flags+0x1cc>)
 8010ea6:	484a      	ldr	r0, [pc, #296]	; (8010fd0 <tcp_enqueue_flags+0x1c4>)
 8010ea8:	f002 f89e 	bl	8012fe8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010eb0:	78fa      	ldrb	r2, [r7, #3]
 8010eb2:	7ffb      	ldrb	r3, [r7, #31]
 8010eb4:	9300      	str	r3, [sp, #0]
 8010eb6:	460b      	mov	r3, r1
 8010eb8:	6939      	ldr	r1, [r7, #16]
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f7ff fd70 	bl	80109a0 <tcp_create_segment>
 8010ec0:	60f8      	str	r0, [r7, #12]
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d109      	bne.n	8010edc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	8b5b      	ldrh	r3, [r3, #26]
 8010ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ed0:	b29a      	uxth	r2, r3
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8010eda:	e070      	b.n	8010fbe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	68db      	ldr	r3, [r3, #12]
 8010ee0:	f003 0303 	and.w	r3, r3, #3
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d006      	beq.n	8010ef6 <tcp_enqueue_flags+0xea>
 8010ee8:	4b37      	ldr	r3, [pc, #220]	; (8010fc8 <tcp_enqueue_flags+0x1bc>)
 8010eea:	f240 4242 	movw	r2, #1090	; 0x442
 8010eee:	493b      	ldr	r1, [pc, #236]	; (8010fdc <tcp_enqueue_flags+0x1d0>)
 8010ef0:	4837      	ldr	r0, [pc, #220]	; (8010fd0 <tcp_enqueue_flags+0x1c4>)
 8010ef2:	f002 f879 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	891b      	ldrh	r3, [r3, #8]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d006      	beq.n	8010f0c <tcp_enqueue_flags+0x100>
 8010efe:	4b32      	ldr	r3, [pc, #200]	; (8010fc8 <tcp_enqueue_flags+0x1bc>)
 8010f00:	f240 4243 	movw	r2, #1091	; 0x443
 8010f04:	4936      	ldr	r1, [pc, #216]	; (8010fe0 <tcp_enqueue_flags+0x1d4>)
 8010f06:	4832      	ldr	r0, [pc, #200]	; (8010fd0 <tcp_enqueue_flags+0x1c4>)
 8010f08:	f002 f86e 	bl	8012fe8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d103      	bne.n	8010f1c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	68fa      	ldr	r2, [r7, #12]
 8010f18:	66da      	str	r2, [r3, #108]	; 0x6c
 8010f1a:	e00d      	b.n	8010f38 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f20:	61bb      	str	r3, [r7, #24]
 8010f22:	e002      	b.n	8010f2a <tcp_enqueue_flags+0x11e>
 8010f24:	69bb      	ldr	r3, [r7, #24]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	61bb      	str	r3, [r7, #24]
 8010f2a:	69bb      	ldr	r3, [r7, #24]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d1f8      	bne.n	8010f24 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010f32:	69bb      	ldr	r3, [r7, #24]
 8010f34:	68fa      	ldr	r2, [r7, #12]
 8010f36:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010f40:	78fb      	ldrb	r3, [r7, #3]
 8010f42:	f003 0302 	and.w	r3, r3, #2
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d104      	bne.n	8010f54 <tcp_enqueue_flags+0x148>
 8010f4a:	78fb      	ldrb	r3, [r7, #3]
 8010f4c:	f003 0301 	and.w	r3, r3, #1
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d004      	beq.n	8010f5e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f58:	1c5a      	adds	r2, r3, #1
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010f5e:	78fb      	ldrb	r3, [r7, #3]
 8010f60:	f003 0301 	and.w	r3, r3, #1
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d006      	beq.n	8010f76 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	8b5b      	ldrh	r3, [r3, #26]
 8010f6c:	f043 0320 	orr.w	r3, r3, #32
 8010f70:	b29a      	uxth	r2, r3
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	685b      	ldr	r3, [r3, #4]
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7fb fa8a 	bl	800c494 <pbuf_clen>
 8010f80:	4603      	mov	r3, r0
 8010f82:	461a      	mov	r2, r3
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f8a:	4413      	add	r3, r2
 8010f8c:	b29a      	uxth	r2, r3
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d00e      	beq.n	8010fbc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d10a      	bne.n	8010fbc <tcp_enqueue_flags+0x1b0>
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d106      	bne.n	8010fbc <tcp_enqueue_flags+0x1b0>
 8010fae:	4b06      	ldr	r3, [pc, #24]	; (8010fc8 <tcp_enqueue_flags+0x1bc>)
 8010fb0:	f240 4265 	movw	r2, #1125	; 0x465
 8010fb4:	490b      	ldr	r1, [pc, #44]	; (8010fe4 <tcp_enqueue_flags+0x1d8>)
 8010fb6:	4806      	ldr	r0, [pc, #24]	; (8010fd0 <tcp_enqueue_flags+0x1c4>)
 8010fb8:	f002 f816 	bl	8012fe8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010fbc:	2300      	movs	r3, #0
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3720      	adds	r7, #32
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
 8010fc6:	bf00      	nop
 8010fc8:	080165ec 	.word	0x080165ec
 8010fcc:	08016a64 	.word	0x08016a64
 8010fd0:	08016694 	.word	0x08016694
 8010fd4:	08016abc 	.word	0x08016abc
 8010fd8:	08016adc 	.word	0x08016adc
 8010fdc:	08016b18 	.word	0x08016b18
 8010fe0:	08016b30 	.word	0x08016b30
 8010fe4:	08016b5c 	.word	0x08016b5c

08010fe8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010fe8:	b5b0      	push	{r4, r5, r7, lr}
 8010fea:	b08a      	sub	sp, #40	; 0x28
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d106      	bne.n	8011004 <tcp_output+0x1c>
 8010ff6:	4b8a      	ldr	r3, [pc, #552]	; (8011220 <tcp_output+0x238>)
 8010ff8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010ffc:	4989      	ldr	r1, [pc, #548]	; (8011224 <tcp_output+0x23c>)
 8010ffe:	488a      	ldr	r0, [pc, #552]	; (8011228 <tcp_output+0x240>)
 8011000:	f001 fff2 	bl	8012fe8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	7d1b      	ldrb	r3, [r3, #20]
 8011008:	2b01      	cmp	r3, #1
 801100a:	d106      	bne.n	801101a <tcp_output+0x32>
 801100c:	4b84      	ldr	r3, [pc, #528]	; (8011220 <tcp_output+0x238>)
 801100e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011012:	4986      	ldr	r1, [pc, #536]	; (801122c <tcp_output+0x244>)
 8011014:	4884      	ldr	r0, [pc, #528]	; (8011228 <tcp_output+0x240>)
 8011016:	f001 ffe7 	bl	8012fe8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801101a:	4b85      	ldr	r3, [pc, #532]	; (8011230 <tcp_output+0x248>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	687a      	ldr	r2, [r7, #4]
 8011020:	429a      	cmp	r2, r3
 8011022:	d101      	bne.n	8011028 <tcp_output+0x40>
    return ERR_OK;
 8011024:	2300      	movs	r3, #0
 8011026:	e1ce      	b.n	80113c6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011034:	4293      	cmp	r3, r2
 8011036:	bf28      	it	cs
 8011038:	4613      	movcs	r3, r2
 801103a:	b29b      	uxth	r3, r3
 801103c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011042:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011046:	2b00      	cmp	r3, #0
 8011048:	d10b      	bne.n	8011062 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	8b5b      	ldrh	r3, [r3, #26]
 801104e:	f003 0302 	and.w	r3, r3, #2
 8011052:	2b00      	cmp	r3, #0
 8011054:	f000 81aa 	beq.w	80113ac <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 fdcb 	bl	8011bf4 <tcp_send_empty_ack>
 801105e:	4603      	mov	r3, r0
 8011060:	e1b1      	b.n	80113c6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011062:	6879      	ldr	r1, [r7, #4]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	3304      	adds	r3, #4
 8011068:	461a      	mov	r2, r3
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f7ff fc7c 	bl	8010968 <tcp_route>
 8011070:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d102      	bne.n	801107e <tcp_output+0x96>
    return ERR_RTE;
 8011078:	f06f 0303 	mvn.w	r3, #3
 801107c:	e1a3      	b.n	80113c6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d003      	beq.n	801108c <tcp_output+0xa4>
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d111      	bne.n	80110b0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801108c:	697b      	ldr	r3, [r7, #20]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d002      	beq.n	8011098 <tcp_output+0xb0>
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	3304      	adds	r3, #4
 8011096:	e000      	b.n	801109a <tcp_output+0xb2>
 8011098:	2300      	movs	r3, #0
 801109a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d102      	bne.n	80110a8 <tcp_output+0xc0>
      return ERR_RTE;
 80110a2:	f06f 0303 	mvn.w	r3, #3
 80110a6:	e18e      	b.n	80113c6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	681a      	ldr	r2, [r3, #0]
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80110b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7f7 f9cd 	bl	8008456 <lwip_htonl>
 80110bc:	4602      	mov	r2, r0
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110c2:	1ad3      	subs	r3, r2, r3
 80110c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110c6:	8912      	ldrh	r2, [r2, #8]
 80110c8:	4413      	add	r3, r2
 80110ca:	69ba      	ldr	r2, [r7, #24]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d227      	bcs.n	8011120 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80110d6:	461a      	mov	r2, r3
 80110d8:	69bb      	ldr	r3, [r7, #24]
 80110da:	4293      	cmp	r3, r2
 80110dc:	d114      	bne.n	8011108 <tcp_output+0x120>
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d110      	bne.n	8011108 <tcp_output+0x120>
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d10b      	bne.n	8011108 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2200      	movs	r2, #0
 80110f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2201      	movs	r2, #1
 80110fc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2200      	movs	r2, #0
 8011104:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	8b5b      	ldrh	r3, [r3, #26]
 801110c:	f003 0302 	and.w	r3, r3, #2
 8011110:	2b00      	cmp	r3, #0
 8011112:	f000 814d 	beq.w	80113b0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f000 fd6c 	bl	8011bf4 <tcp_send_empty_ack>
 801111c:	4603      	mov	r3, r0
 801111e:	e152      	b.n	80113c6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2200      	movs	r2, #0
 8011124:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801112c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801112e:	6a3b      	ldr	r3, [r7, #32]
 8011130:	2b00      	cmp	r3, #0
 8011132:	f000 811c 	beq.w	801136e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011136:	e002      	b.n	801113e <tcp_output+0x156>
 8011138:	6a3b      	ldr	r3, [r7, #32]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	623b      	str	r3, [r7, #32]
 801113e:	6a3b      	ldr	r3, [r7, #32]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d1f8      	bne.n	8011138 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011146:	e112      	b.n	801136e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114a:	68db      	ldr	r3, [r3, #12]
 801114c:	899b      	ldrh	r3, [r3, #12]
 801114e:	b29b      	uxth	r3, r3
 8011150:	4618      	mov	r0, r3
 8011152:	f7f7 f96b 	bl	800842c <lwip_htons>
 8011156:	4603      	mov	r3, r0
 8011158:	b2db      	uxtb	r3, r3
 801115a:	f003 0304 	and.w	r3, r3, #4
 801115e:	2b00      	cmp	r3, #0
 8011160:	d006      	beq.n	8011170 <tcp_output+0x188>
 8011162:	4b2f      	ldr	r3, [pc, #188]	; (8011220 <tcp_output+0x238>)
 8011164:	f240 5236 	movw	r2, #1334	; 0x536
 8011168:	4932      	ldr	r1, [pc, #200]	; (8011234 <tcp_output+0x24c>)
 801116a:	482f      	ldr	r0, [pc, #188]	; (8011228 <tcp_output+0x240>)
 801116c:	f001 ff3c 	bl	8012fe8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011174:	2b00      	cmp	r3, #0
 8011176:	d01f      	beq.n	80111b8 <tcp_output+0x1d0>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	8b5b      	ldrh	r3, [r3, #26]
 801117c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011180:	2b00      	cmp	r3, #0
 8011182:	d119      	bne.n	80111b8 <tcp_output+0x1d0>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011188:	2b00      	cmp	r3, #0
 801118a:	d00b      	beq.n	80111a4 <tcp_output+0x1bc>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d110      	bne.n	80111b8 <tcp_output+0x1d0>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801119a:	891a      	ldrh	r2, [r3, #8]
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d209      	bcs.n	80111b8 <tcp_output+0x1d0>
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d004      	beq.n	80111b8 <tcp_output+0x1d0>
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111b4:	2b08      	cmp	r3, #8
 80111b6:	d901      	bls.n	80111bc <tcp_output+0x1d4>
 80111b8:	2301      	movs	r3, #1
 80111ba:	e000      	b.n	80111be <tcp_output+0x1d6>
 80111bc:	2300      	movs	r3, #0
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d106      	bne.n	80111d0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	8b5b      	ldrh	r3, [r3, #26]
 80111c6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	f000 80e4 	beq.w	8011398 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	7d1b      	ldrb	r3, [r3, #20]
 80111d4:	2b02      	cmp	r3, #2
 80111d6:	d00d      	beq.n	80111f4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80111d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	899b      	ldrh	r3, [r3, #12]
 80111de:	b29c      	uxth	r4, r3
 80111e0:	2010      	movs	r0, #16
 80111e2:	f7f7 f923 	bl	800842c <lwip_htons>
 80111e6:	4603      	mov	r3, r0
 80111e8:	461a      	mov	r2, r3
 80111ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ec:	68db      	ldr	r3, [r3, #12]
 80111ee:	4322      	orrs	r2, r4
 80111f0:	b292      	uxth	r2, r2
 80111f2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80111f4:	697a      	ldr	r2, [r7, #20]
 80111f6:	6879      	ldr	r1, [r7, #4]
 80111f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111fa:	f000 f909 	bl	8011410 <tcp_output_segment>
 80111fe:	4603      	mov	r3, r0
 8011200:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d016      	beq.n	8011238 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	8b5b      	ldrh	r3, [r3, #26]
 801120e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011212:	b29a      	uxth	r2, r3
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	835a      	strh	r2, [r3, #26]
      return err;
 8011218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801121c:	e0d3      	b.n	80113c6 <tcp_output+0x3de>
 801121e:	bf00      	nop
 8011220:	080165ec 	.word	0x080165ec
 8011224:	08016b84 	.word	0x08016b84
 8011228:	08016694 	.word	0x08016694
 801122c:	08016b9c 	.word	0x08016b9c
 8011230:	240074dc 	.word	0x240074dc
 8011234:	08016bc4 	.word	0x08016bc4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	7d1b      	ldrb	r3, [r3, #20]
 8011244:	2b02      	cmp	r3, #2
 8011246:	d006      	beq.n	8011256 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	8b5b      	ldrh	r3, [r3, #26]
 801124c:	f023 0303 	bic.w	r3, r3, #3
 8011250:	b29a      	uxth	r2, r3
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011258:	68db      	ldr	r3, [r3, #12]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	4618      	mov	r0, r3
 801125e:	f7f7 f8fa 	bl	8008456 <lwip_htonl>
 8011262:	4604      	mov	r4, r0
 8011264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011266:	891b      	ldrh	r3, [r3, #8]
 8011268:	461d      	mov	r5, r3
 801126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	899b      	ldrh	r3, [r3, #12]
 8011270:	b29b      	uxth	r3, r3
 8011272:	4618      	mov	r0, r3
 8011274:	f7f7 f8da 	bl	800842c <lwip_htons>
 8011278:	4603      	mov	r3, r0
 801127a:	b2db      	uxtb	r3, r3
 801127c:	f003 0303 	and.w	r3, r3, #3
 8011280:	2b00      	cmp	r3, #0
 8011282:	d001      	beq.n	8011288 <tcp_output+0x2a0>
 8011284:	2301      	movs	r3, #1
 8011286:	e000      	b.n	801128a <tcp_output+0x2a2>
 8011288:	2300      	movs	r3, #0
 801128a:	442b      	add	r3, r5
 801128c:	4423      	add	r3, r4
 801128e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	1ad3      	subs	r3, r2, r3
 8011298:	2b00      	cmp	r3, #0
 801129a:	da02      	bge.n	80112a2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	68ba      	ldr	r2, [r7, #8]
 80112a0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80112a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a4:	891b      	ldrh	r3, [r3, #8]
 80112a6:	461c      	mov	r4, r3
 80112a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112aa:	68db      	ldr	r3, [r3, #12]
 80112ac:	899b      	ldrh	r3, [r3, #12]
 80112ae:	b29b      	uxth	r3, r3
 80112b0:	4618      	mov	r0, r3
 80112b2:	f7f7 f8bb 	bl	800842c <lwip_htons>
 80112b6:	4603      	mov	r3, r0
 80112b8:	b2db      	uxtb	r3, r3
 80112ba:	f003 0303 	and.w	r3, r3, #3
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d001      	beq.n	80112c6 <tcp_output+0x2de>
 80112c2:	2301      	movs	r3, #1
 80112c4:	e000      	b.n	80112c8 <tcp_output+0x2e0>
 80112c6:	2300      	movs	r3, #0
 80112c8:	4423      	add	r3, r4
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d049      	beq.n	8011362 <tcp_output+0x37a>
      seg->next = NULL;
 80112ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d0:	2200      	movs	r2, #0
 80112d2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d105      	bne.n	80112e8 <tcp_output+0x300>
        pcb->unacked = seg;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112e0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80112e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e4:	623b      	str	r3, [r7, #32]
 80112e6:	e03f      	b.n	8011368 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80112e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	685b      	ldr	r3, [r3, #4]
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7f7 f8b1 	bl	8008456 <lwip_htonl>
 80112f4:	4604      	mov	r4, r0
 80112f6:	6a3b      	ldr	r3, [r7, #32]
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7f7 f8aa 	bl	8008456 <lwip_htonl>
 8011302:	4603      	mov	r3, r0
 8011304:	1ae3      	subs	r3, r4, r3
 8011306:	2b00      	cmp	r3, #0
 8011308:	da24      	bge.n	8011354 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	3370      	adds	r3, #112	; 0x70
 801130e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011310:	e002      	b.n	8011318 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011312:	69fb      	ldr	r3, [r7, #28]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011318:	69fb      	ldr	r3, [r7, #28]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d011      	beq.n	8011344 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011320:	69fb      	ldr	r3, [r7, #28]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	68db      	ldr	r3, [r3, #12]
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	4618      	mov	r0, r3
 801132a:	f7f7 f894 	bl	8008456 <lwip_htonl>
 801132e:	4604      	mov	r4, r0
 8011330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011332:	68db      	ldr	r3, [r3, #12]
 8011334:	685b      	ldr	r3, [r3, #4]
 8011336:	4618      	mov	r0, r3
 8011338:	f7f7 f88d 	bl	8008456 <lwip_htonl>
 801133c:	4603      	mov	r3, r0
 801133e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011340:	2b00      	cmp	r3, #0
 8011342:	dbe6      	blt.n	8011312 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011344:	69fb      	ldr	r3, [r7, #28]
 8011346:	681a      	ldr	r2, [r3, #0]
 8011348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801134c:	69fb      	ldr	r3, [r7, #28]
 801134e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011350:	601a      	str	r2, [r3, #0]
 8011352:	e009      	b.n	8011368 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011354:	6a3b      	ldr	r3, [r7, #32]
 8011356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011358:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801135a:	6a3b      	ldr	r3, [r7, #32]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	623b      	str	r3, [r7, #32]
 8011360:	e002      	b.n	8011368 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011364:	f7fc fc3f 	bl	800dbe6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801136c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011370:	2b00      	cmp	r3, #0
 8011372:	d012      	beq.n	801139a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	4618      	mov	r0, r3
 801137c:	f7f7 f86b 	bl	8008456 <lwip_htonl>
 8011380:	4602      	mov	r2, r0
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011386:	1ad3      	subs	r3, r2, r3
 8011388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801138a:	8912      	ldrh	r2, [r2, #8]
 801138c:	4413      	add	r3, r2
  while (seg != NULL &&
 801138e:	69ba      	ldr	r2, [r7, #24]
 8011390:	429a      	cmp	r2, r3
 8011392:	f4bf aed9 	bcs.w	8011148 <tcp_output+0x160>
 8011396:	e000      	b.n	801139a <tcp_output+0x3b2>
      break;
 8011398:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d108      	bne.n	80113b4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2200      	movs	r2, #0
 80113a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80113aa:	e004      	b.n	80113b6 <tcp_output+0x3ce>
    goto output_done;
 80113ac:	bf00      	nop
 80113ae:	e002      	b.n	80113b6 <tcp_output+0x3ce>
    goto output_done;
 80113b0:	bf00      	nop
 80113b2:	e000      	b.n	80113b6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80113b4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	8b5b      	ldrh	r3, [r3, #26]
 80113ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113be:	b29a      	uxth	r2, r3
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80113c4:	2300      	movs	r3, #0
}
 80113c6:	4618      	mov	r0, r3
 80113c8:	3728      	adds	r7, #40	; 0x28
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bdb0      	pop	{r4, r5, r7, pc}
 80113ce:	bf00      	nop

080113d0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d106      	bne.n	80113ec <tcp_output_segment_busy+0x1c>
 80113de:	4b09      	ldr	r3, [pc, #36]	; (8011404 <tcp_output_segment_busy+0x34>)
 80113e0:	f240 529a 	movw	r2, #1434	; 0x59a
 80113e4:	4908      	ldr	r1, [pc, #32]	; (8011408 <tcp_output_segment_busy+0x38>)
 80113e6:	4809      	ldr	r0, [pc, #36]	; (801140c <tcp_output_segment_busy+0x3c>)
 80113e8:	f001 fdfe 	bl	8012fe8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	7b9b      	ldrb	r3, [r3, #14]
 80113f2:	2b01      	cmp	r3, #1
 80113f4:	d001      	beq.n	80113fa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80113f6:	2301      	movs	r3, #1
 80113f8:	e000      	b.n	80113fc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80113fa:	2300      	movs	r3, #0
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3708      	adds	r7, #8
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}
 8011404:	080165ec 	.word	0x080165ec
 8011408:	08016bdc 	.word	0x08016bdc
 801140c:	08016694 	.word	0x08016694

08011410 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011410:	b5b0      	push	{r4, r5, r7, lr}
 8011412:	b08c      	sub	sp, #48	; 0x30
 8011414:	af04      	add	r7, sp, #16
 8011416:	60f8      	str	r0, [r7, #12]
 8011418:	60b9      	str	r1, [r7, #8]
 801141a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d106      	bne.n	8011430 <tcp_output_segment+0x20>
 8011422:	4b63      	ldr	r3, [pc, #396]	; (80115b0 <tcp_output_segment+0x1a0>)
 8011424:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011428:	4962      	ldr	r1, [pc, #392]	; (80115b4 <tcp_output_segment+0x1a4>)
 801142a:	4863      	ldr	r0, [pc, #396]	; (80115b8 <tcp_output_segment+0x1a8>)
 801142c:	f001 fddc 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d106      	bne.n	8011444 <tcp_output_segment+0x34>
 8011436:	4b5e      	ldr	r3, [pc, #376]	; (80115b0 <tcp_output_segment+0x1a0>)
 8011438:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801143c:	495f      	ldr	r1, [pc, #380]	; (80115bc <tcp_output_segment+0x1ac>)
 801143e:	485e      	ldr	r0, [pc, #376]	; (80115b8 <tcp_output_segment+0x1a8>)
 8011440:	f001 fdd2 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d106      	bne.n	8011458 <tcp_output_segment+0x48>
 801144a:	4b59      	ldr	r3, [pc, #356]	; (80115b0 <tcp_output_segment+0x1a0>)
 801144c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011450:	495b      	ldr	r1, [pc, #364]	; (80115c0 <tcp_output_segment+0x1b0>)
 8011452:	4859      	ldr	r0, [pc, #356]	; (80115b8 <tcp_output_segment+0x1a8>)
 8011454:	f001 fdc8 	bl	8012fe8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011458:	68f8      	ldr	r0, [r7, #12]
 801145a:	f7ff ffb9 	bl	80113d0 <tcp_output_segment_busy>
 801145e:	4603      	mov	r3, r0
 8011460:	2b00      	cmp	r3, #0
 8011462:	d001      	beq.n	8011468 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011464:	2300      	movs	r3, #0
 8011466:	e09f      	b.n	80115a8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	68dc      	ldr	r4, [r3, #12]
 8011470:	4610      	mov	r0, r2
 8011472:	f7f6 fff0 	bl	8008456 <lwip_htonl>
 8011476:	4603      	mov	r3, r0
 8011478:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	68dc      	ldr	r4, [r3, #12]
 8011482:	4610      	mov	r0, r2
 8011484:	f7f6 ffd2 	bl	800842c <lwip_htons>
 8011488:	4603      	mov	r3, r0
 801148a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011490:	68ba      	ldr	r2, [r7, #8]
 8011492:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011494:	441a      	add	r2, r3
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	3314      	adds	r3, #20
 80114a0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	7a9b      	ldrb	r3, [r3, #10]
 80114a6:	f003 0301 	and.w	r3, r3, #1
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d015      	beq.n	80114da <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	3304      	adds	r3, #4
 80114b2:	461a      	mov	r2, r3
 80114b4:	6879      	ldr	r1, [r7, #4]
 80114b6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80114ba:	f7fc fe8b 	bl	800e1d4 <tcp_eff_send_mss_netif>
 80114be:	4603      	mov	r3, r0
 80114c0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80114c2:	8b7b      	ldrh	r3, [r7, #26]
 80114c4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7f6 ffc4 	bl	8008456 <lwip_htonl>
 80114ce:	4602      	mov	r2, r0
 80114d0:	69fb      	ldr	r3, [r7, #28]
 80114d2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80114d4:	69fb      	ldr	r3, [r7, #28]
 80114d6:	3304      	adds	r3, #4
 80114d8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	da02      	bge.n	80114ea <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	2200      	movs	r2, #0
 80114e8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d10c      	bne.n	801150c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80114f2:	4b34      	ldr	r3, [pc, #208]	; (80115c4 <tcp_output_segment+0x1b4>)
 80114f4:	681a      	ldr	r2, [r3, #0]
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	685b      	ldr	r3, [r3, #4]
 8011500:	4618      	mov	r0, r3
 8011502:	f7f6 ffa8 	bl	8008456 <lwip_htonl>
 8011506:	4602      	mov	r2, r0
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	68da      	ldr	r2, [r3, #12]
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	685b      	ldr	r3, [r3, #4]
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	1ad3      	subs	r3, r2, r3
 8011518:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	685b      	ldr	r3, [r3, #4]
 801151e:	8959      	ldrh	r1, [r3, #10]
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	685b      	ldr	r3, [r3, #4]
 8011524:	8b3a      	ldrh	r2, [r7, #24]
 8011526:	1a8a      	subs	r2, r1, r2
 8011528:	b292      	uxth	r2, r2
 801152a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	8919      	ldrh	r1, [r3, #8]
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	8b3a      	ldrh	r2, [r7, #24]
 8011538:	1a8a      	subs	r2, r1, r2
 801153a:	b292      	uxth	r2, r2
 801153c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	685b      	ldr	r3, [r3, #4]
 8011542:	68fa      	ldr	r2, [r7, #12]
 8011544:	68d2      	ldr	r2, [r2, #12]
 8011546:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	2200      	movs	r2, #0
 801154e:	741a      	strb	r2, [r3, #16]
 8011550:	2200      	movs	r2, #0
 8011552:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	f103 0214 	add.w	r2, r3, #20
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	7a9b      	ldrb	r3, [r3, #10]
 8011560:	009b      	lsls	r3, r3, #2
 8011562:	f003 0304 	and.w	r3, r3, #4
 8011566:	4413      	add	r3, r2
 8011568:	69fa      	ldr	r2, [r7, #28]
 801156a:	429a      	cmp	r2, r3
 801156c:	d006      	beq.n	801157c <tcp_output_segment+0x16c>
 801156e:	4b10      	ldr	r3, [pc, #64]	; (80115b0 <tcp_output_segment+0x1a0>)
 8011570:	f240 621c 	movw	r2, #1564	; 0x61c
 8011574:	4914      	ldr	r1, [pc, #80]	; (80115c8 <tcp_output_segment+0x1b8>)
 8011576:	4810      	ldr	r0, [pc, #64]	; (80115b8 <tcp_output_segment+0x1a8>)
 8011578:	f001 fd36 	bl	8012fe8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	6858      	ldr	r0, [r3, #4]
 8011580:	68b9      	ldr	r1, [r7, #8]
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	1d1c      	adds	r4, r3, #4
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	7add      	ldrb	r5, [r3, #11]
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	7a9b      	ldrb	r3, [r3, #10]
 801158e:	687a      	ldr	r2, [r7, #4]
 8011590:	9202      	str	r2, [sp, #8]
 8011592:	2206      	movs	r2, #6
 8011594:	9201      	str	r2, [sp, #4]
 8011596:	9300      	str	r3, [sp, #0]
 8011598:	462b      	mov	r3, r5
 801159a:	4622      	mov	r2, r4
 801159c:	f7f8 fbdc 	bl	8009d58 <ip4_output_if>
 80115a0:	4603      	mov	r3, r0
 80115a2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80115a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80115a8:	4618      	mov	r0, r3
 80115aa:	3720      	adds	r7, #32
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bdb0      	pop	{r4, r5, r7, pc}
 80115b0:	080165ec 	.word	0x080165ec
 80115b4:	08016c04 	.word	0x08016c04
 80115b8:	08016694 	.word	0x08016694
 80115bc:	08016c24 	.word	0x08016c24
 80115c0:	08016c44 	.word	0x08016c44
 80115c4:	24007490 	.word	0x24007490
 80115c8:	08016c68 	.word	0x08016c68

080115cc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80115cc:	b5b0      	push	{r4, r5, r7, lr}
 80115ce:	b084      	sub	sp, #16
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d106      	bne.n	80115e8 <tcp_rexmit_rto_prepare+0x1c>
 80115da:	4b31      	ldr	r3, [pc, #196]	; (80116a0 <tcp_rexmit_rto_prepare+0xd4>)
 80115dc:	f240 6263 	movw	r2, #1635	; 0x663
 80115e0:	4930      	ldr	r1, [pc, #192]	; (80116a4 <tcp_rexmit_rto_prepare+0xd8>)
 80115e2:	4831      	ldr	r0, [pc, #196]	; (80116a8 <tcp_rexmit_rto_prepare+0xdc>)
 80115e4:	f001 fd00 	bl	8012fe8 <iprintf>

  if (pcb->unacked == NULL) {
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d102      	bne.n	80115f6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80115f0:	f06f 0305 	mvn.w	r3, #5
 80115f4:	e050      	b.n	8011698 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115fa:	60fb      	str	r3, [r7, #12]
 80115fc:	e00b      	b.n	8011616 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80115fe:	68f8      	ldr	r0, [r7, #12]
 8011600:	f7ff fee6 	bl	80113d0 <tcp_output_segment_busy>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d002      	beq.n	8011610 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801160a:	f06f 0305 	mvn.w	r3, #5
 801160e:	e043      	b.n	8011698 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	60fb      	str	r3, [r7, #12]
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d1ef      	bne.n	80115fe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801161e:	68f8      	ldr	r0, [r7, #12]
 8011620:	f7ff fed6 	bl	80113d0 <tcp_output_segment_busy>
 8011624:	4603      	mov	r3, r0
 8011626:	2b00      	cmp	r3, #0
 8011628:	d002      	beq.n	8011630 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801162a:	f06f 0305 	mvn.w	r3, #5
 801162e:	e033      	b.n	8011698 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2200      	movs	r2, #0
 8011644:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	8b5b      	ldrh	r3, [r3, #26]
 801164a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801164e:	b29a      	uxth	r2, r3
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	68db      	ldr	r3, [r3, #12]
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	4618      	mov	r0, r3
 801165c:	f7f6 fefb 	bl	8008456 <lwip_htonl>
 8011660:	4604      	mov	r4, r0
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	891b      	ldrh	r3, [r3, #8]
 8011666:	461d      	mov	r5, r3
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	899b      	ldrh	r3, [r3, #12]
 801166e:	b29b      	uxth	r3, r3
 8011670:	4618      	mov	r0, r3
 8011672:	f7f6 fedb 	bl	800842c <lwip_htons>
 8011676:	4603      	mov	r3, r0
 8011678:	b2db      	uxtb	r3, r3
 801167a:	f003 0303 	and.w	r3, r3, #3
 801167e:	2b00      	cmp	r3, #0
 8011680:	d001      	beq.n	8011686 <tcp_rexmit_rto_prepare+0xba>
 8011682:	2301      	movs	r3, #1
 8011684:	e000      	b.n	8011688 <tcp_rexmit_rto_prepare+0xbc>
 8011686:	2300      	movs	r3, #0
 8011688:	442b      	add	r3, r5
 801168a:	18e2      	adds	r2, r4, r3
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2200      	movs	r2, #0
 8011694:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011696:	2300      	movs	r3, #0
}
 8011698:	4618      	mov	r0, r3
 801169a:	3710      	adds	r7, #16
 801169c:	46bd      	mov	sp, r7
 801169e:	bdb0      	pop	{r4, r5, r7, pc}
 80116a0:	080165ec 	.word	0x080165ec
 80116a4:	08016c7c 	.word	0x08016c7c
 80116a8:	08016694 	.word	0x08016694

080116ac <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d106      	bne.n	80116c8 <tcp_rexmit_rto_commit+0x1c>
 80116ba:	4b0d      	ldr	r3, [pc, #52]	; (80116f0 <tcp_rexmit_rto_commit+0x44>)
 80116bc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80116c0:	490c      	ldr	r1, [pc, #48]	; (80116f4 <tcp_rexmit_rto_commit+0x48>)
 80116c2:	480d      	ldr	r0, [pc, #52]	; (80116f8 <tcp_rexmit_rto_commit+0x4c>)
 80116c4:	f001 fc90 	bl	8012fe8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80116ce:	2bff      	cmp	r3, #255	; 0xff
 80116d0:	d007      	beq.n	80116e2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80116d8:	3301      	adds	r3, #1
 80116da:	b2da      	uxtb	r2, r3
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f7ff fc80 	bl	8010fe8 <tcp_output>
}
 80116e8:	bf00      	nop
 80116ea:	3708      	adds	r7, #8
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	080165ec 	.word	0x080165ec
 80116f4:	08016ca0 	.word	0x08016ca0
 80116f8:	08016694 	.word	0x08016694

080116fc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b082      	sub	sp, #8
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d106      	bne.n	8011718 <tcp_rexmit_rto+0x1c>
 801170a:	4b0a      	ldr	r3, [pc, #40]	; (8011734 <tcp_rexmit_rto+0x38>)
 801170c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011710:	4909      	ldr	r1, [pc, #36]	; (8011738 <tcp_rexmit_rto+0x3c>)
 8011712:	480a      	ldr	r0, [pc, #40]	; (801173c <tcp_rexmit_rto+0x40>)
 8011714:	f001 fc68 	bl	8012fe8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f7ff ff57 	bl	80115cc <tcp_rexmit_rto_prepare>
 801171e:	4603      	mov	r3, r0
 8011720:	2b00      	cmp	r3, #0
 8011722:	d102      	bne.n	801172a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f7ff ffc1 	bl	80116ac <tcp_rexmit_rto_commit>
  }
}
 801172a:	bf00      	nop
 801172c:	3708      	adds	r7, #8
 801172e:	46bd      	mov	sp, r7
 8011730:	bd80      	pop	{r7, pc}
 8011732:	bf00      	nop
 8011734:	080165ec 	.word	0x080165ec
 8011738:	08016cc4 	.word	0x08016cc4
 801173c:	08016694 	.word	0x08016694

08011740 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011740:	b590      	push	{r4, r7, lr}
 8011742:	b085      	sub	sp, #20
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d106      	bne.n	801175c <tcp_rexmit+0x1c>
 801174e:	4b2f      	ldr	r3, [pc, #188]	; (801180c <tcp_rexmit+0xcc>)
 8011750:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011754:	492e      	ldr	r1, [pc, #184]	; (8011810 <tcp_rexmit+0xd0>)
 8011756:	482f      	ldr	r0, [pc, #188]	; (8011814 <tcp_rexmit+0xd4>)
 8011758:	f001 fc46 	bl	8012fe8 <iprintf>

  if (pcb->unacked == NULL) {
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011760:	2b00      	cmp	r3, #0
 8011762:	d102      	bne.n	801176a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011764:	f06f 0305 	mvn.w	r3, #5
 8011768:	e04c      	b.n	8011804 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801176e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011770:	68b8      	ldr	r0, [r7, #8]
 8011772:	f7ff fe2d 	bl	80113d0 <tcp_output_segment_busy>
 8011776:	4603      	mov	r3, r0
 8011778:	2b00      	cmp	r3, #0
 801177a:	d002      	beq.n	8011782 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801177c:	f06f 0305 	mvn.w	r3, #5
 8011780:	e040      	b.n	8011804 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	681a      	ldr	r2, [r3, #0]
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	336c      	adds	r3, #108	; 0x6c
 801178e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011790:	e002      	b.n	8011798 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d011      	beq.n	80117c4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	4618      	mov	r0, r3
 80117aa:	f7f6 fe54 	bl	8008456 <lwip_htonl>
 80117ae:	4604      	mov	r4, r0
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	68db      	ldr	r3, [r3, #12]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7f6 fe4d 	bl	8008456 <lwip_htonl>
 80117bc:	4603      	mov	r3, r0
 80117be:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	dbe6      	blt.n	8011792 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	681a      	ldr	r2, [r3, #0]
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	68ba      	ldr	r2, [r7, #8]
 80117d0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80117d2:	68bb      	ldr	r3, [r7, #8]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d103      	bne.n	80117e2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2200      	movs	r2, #0
 80117de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117e8:	2bff      	cmp	r3, #255	; 0xff
 80117ea:	d007      	beq.n	80117fc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117f2:	3301      	adds	r3, #1
 80117f4:	b2da      	uxtb	r2, r3
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2200      	movs	r2, #0
 8011800:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011802:	2300      	movs	r3, #0
}
 8011804:	4618      	mov	r0, r3
 8011806:	3714      	adds	r7, #20
 8011808:	46bd      	mov	sp, r7
 801180a:	bd90      	pop	{r4, r7, pc}
 801180c:	080165ec 	.word	0x080165ec
 8011810:	08016ce0 	.word	0x08016ce0
 8011814:	08016694 	.word	0x08016694

08011818 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b082      	sub	sp, #8
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d106      	bne.n	8011834 <tcp_rexmit_fast+0x1c>
 8011826:	4b2a      	ldr	r3, [pc, #168]	; (80118d0 <tcp_rexmit_fast+0xb8>)
 8011828:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801182c:	4929      	ldr	r1, [pc, #164]	; (80118d4 <tcp_rexmit_fast+0xbc>)
 801182e:	482a      	ldr	r0, [pc, #168]	; (80118d8 <tcp_rexmit_fast+0xc0>)
 8011830:	f001 fbda 	bl	8012fe8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011838:	2b00      	cmp	r3, #0
 801183a:	d045      	beq.n	80118c8 <tcp_rexmit_fast+0xb0>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	8b5b      	ldrh	r3, [r3, #26]
 8011840:	f003 0304 	and.w	r3, r3, #4
 8011844:	2b00      	cmp	r3, #0
 8011846:	d13f      	bne.n	80118c8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f7ff ff79 	bl	8011740 <tcp_rexmit>
 801184e:	4603      	mov	r3, r0
 8011850:	2b00      	cmp	r3, #0
 8011852:	d139      	bne.n	80118c8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011860:	4293      	cmp	r3, r2
 8011862:	bf28      	it	cs
 8011864:	4613      	movcs	r3, r2
 8011866:	b29b      	uxth	r3, r3
 8011868:	2b00      	cmp	r3, #0
 801186a:	da00      	bge.n	801186e <tcp_rexmit_fast+0x56>
 801186c:	3301      	adds	r3, #1
 801186e:	105b      	asrs	r3, r3, #1
 8011870:	b29a      	uxth	r2, r3
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801187e:	461a      	mov	r2, r3
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011884:	005b      	lsls	r3, r3, #1
 8011886:	429a      	cmp	r2, r3
 8011888:	d206      	bcs.n	8011898 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801188e:	005b      	lsls	r3, r3, #1
 8011890:	b29a      	uxth	r2, r3
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118a2:	4619      	mov	r1, r3
 80118a4:	0049      	lsls	r1, r1, #1
 80118a6:	440b      	add	r3, r1
 80118a8:	b29b      	uxth	r3, r3
 80118aa:	4413      	add	r3, r2
 80118ac:	b29a      	uxth	r2, r3
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	8b5b      	ldrh	r3, [r3, #26]
 80118b8:	f043 0304 	orr.w	r3, r3, #4
 80118bc:	b29a      	uxth	r2, r3
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2200      	movs	r2, #0
 80118c6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80118c8:	bf00      	nop
 80118ca:	3708      	adds	r7, #8
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}
 80118d0:	080165ec 	.word	0x080165ec
 80118d4:	08016cf8 	.word	0x08016cf8
 80118d8:	08016694 	.word	0x08016694

080118dc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b086      	sub	sp, #24
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	60f8      	str	r0, [r7, #12]
 80118e4:	607b      	str	r3, [r7, #4]
 80118e6:	460b      	mov	r3, r1
 80118e8:	817b      	strh	r3, [r7, #10]
 80118ea:	4613      	mov	r3, r2
 80118ec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80118ee:	897a      	ldrh	r2, [r7, #10]
 80118f0:	893b      	ldrh	r3, [r7, #8]
 80118f2:	4413      	add	r3, r2
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	3314      	adds	r3, #20
 80118f8:	b29b      	uxth	r3, r3
 80118fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80118fe:	4619      	mov	r1, r3
 8011900:	2022      	movs	r0, #34	; 0x22
 8011902:	f7fa fa55 	bl	800bdb0 <pbuf_alloc>
 8011906:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d04d      	beq.n	80119aa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801190e:	897b      	ldrh	r3, [r7, #10]
 8011910:	3313      	adds	r3, #19
 8011912:	697a      	ldr	r2, [r7, #20]
 8011914:	8952      	ldrh	r2, [r2, #10]
 8011916:	4293      	cmp	r3, r2
 8011918:	db06      	blt.n	8011928 <tcp_output_alloc_header_common+0x4c>
 801191a:	4b26      	ldr	r3, [pc, #152]	; (80119b4 <tcp_output_alloc_header_common+0xd8>)
 801191c:	f240 7223 	movw	r2, #1827	; 0x723
 8011920:	4925      	ldr	r1, [pc, #148]	; (80119b8 <tcp_output_alloc_header_common+0xdc>)
 8011922:	4826      	ldr	r0, [pc, #152]	; (80119bc <tcp_output_alloc_header_common+0xe0>)
 8011924:	f001 fb60 	bl	8012fe8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	685b      	ldr	r3, [r3, #4]
 801192c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801192e:	8c3b      	ldrh	r3, [r7, #32]
 8011930:	4618      	mov	r0, r3
 8011932:	f7f6 fd7b 	bl	800842c <lwip_htons>
 8011936:	4603      	mov	r3, r0
 8011938:	461a      	mov	r2, r3
 801193a:	693b      	ldr	r3, [r7, #16]
 801193c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801193e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011940:	4618      	mov	r0, r3
 8011942:	f7f6 fd73 	bl	800842c <lwip_htons>
 8011946:	4603      	mov	r3, r0
 8011948:	461a      	mov	r2, r3
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	687a      	ldr	r2, [r7, #4]
 8011952:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011954:	68f8      	ldr	r0, [r7, #12]
 8011956:	f7f6 fd7e 	bl	8008456 <lwip_htonl>
 801195a:	4602      	mov	r2, r0
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011960:	897b      	ldrh	r3, [r7, #10]
 8011962:	089b      	lsrs	r3, r3, #2
 8011964:	b29b      	uxth	r3, r3
 8011966:	3305      	adds	r3, #5
 8011968:	b29b      	uxth	r3, r3
 801196a:	031b      	lsls	r3, r3, #12
 801196c:	b29a      	uxth	r2, r3
 801196e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011972:	b29b      	uxth	r3, r3
 8011974:	4313      	orrs	r3, r2
 8011976:	b29b      	uxth	r3, r3
 8011978:	4618      	mov	r0, r3
 801197a:	f7f6 fd57 	bl	800842c <lwip_htons>
 801197e:	4603      	mov	r3, r0
 8011980:	461a      	mov	r2, r3
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011986:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011988:	4618      	mov	r0, r3
 801198a:	f7f6 fd4f 	bl	800842c <lwip_htons>
 801198e:	4603      	mov	r3, r0
 8011990:	461a      	mov	r2, r3
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	2200      	movs	r2, #0
 801199a:	741a      	strb	r2, [r3, #16]
 801199c:	2200      	movs	r2, #0
 801199e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80119a0:	693b      	ldr	r3, [r7, #16]
 80119a2:	2200      	movs	r2, #0
 80119a4:	749a      	strb	r2, [r3, #18]
 80119a6:	2200      	movs	r2, #0
 80119a8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80119aa:	697b      	ldr	r3, [r7, #20]
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3718      	adds	r7, #24
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}
 80119b4:	080165ec 	.word	0x080165ec
 80119b8:	08016d18 	.word	0x08016d18
 80119bc:	08016694 	.word	0x08016694

080119c0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80119c0:	b5b0      	push	{r4, r5, r7, lr}
 80119c2:	b08a      	sub	sp, #40	; 0x28
 80119c4:	af04      	add	r7, sp, #16
 80119c6:	60f8      	str	r0, [r7, #12]
 80119c8:	607b      	str	r3, [r7, #4]
 80119ca:	460b      	mov	r3, r1
 80119cc:	817b      	strh	r3, [r7, #10]
 80119ce:	4613      	mov	r3, r2
 80119d0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d106      	bne.n	80119e6 <tcp_output_alloc_header+0x26>
 80119d8:	4b15      	ldr	r3, [pc, #84]	; (8011a30 <tcp_output_alloc_header+0x70>)
 80119da:	f240 7242 	movw	r2, #1858	; 0x742
 80119de:	4915      	ldr	r1, [pc, #84]	; (8011a34 <tcp_output_alloc_header+0x74>)
 80119e0:	4815      	ldr	r0, [pc, #84]	; (8011a38 <tcp_output_alloc_header+0x78>)
 80119e2:	f001 fb01 	bl	8012fe8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	8adb      	ldrh	r3, [r3, #22]
 80119ee:	68fa      	ldr	r2, [r7, #12]
 80119f0:	8b12      	ldrh	r2, [r2, #24]
 80119f2:	68f9      	ldr	r1, [r7, #12]
 80119f4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80119f6:	893d      	ldrh	r5, [r7, #8]
 80119f8:	897c      	ldrh	r4, [r7, #10]
 80119fa:	9103      	str	r1, [sp, #12]
 80119fc:	2110      	movs	r1, #16
 80119fe:	9102      	str	r1, [sp, #8]
 8011a00:	9201      	str	r2, [sp, #4]
 8011a02:	9300      	str	r3, [sp, #0]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	462a      	mov	r2, r5
 8011a08:	4621      	mov	r1, r4
 8011a0a:	f7ff ff67 	bl	80118dc <tcp_output_alloc_header_common>
 8011a0e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d006      	beq.n	8011a24 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a1a:	68fa      	ldr	r2, [r7, #12]
 8011a1c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011a1e:	441a      	add	r2, r3
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011a24:	697b      	ldr	r3, [r7, #20]
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3718      	adds	r7, #24
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	080165ec 	.word	0x080165ec
 8011a34:	08016d48 	.word	0x08016d48
 8011a38:	08016694 	.word	0x08016694

08011a3c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b088      	sub	sp, #32
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	60b9      	str	r1, [r7, #8]
 8011a46:	4611      	mov	r1, r2
 8011a48:	461a      	mov	r2, r3
 8011a4a:	460b      	mov	r3, r1
 8011a4c:	71fb      	strb	r3, [r7, #7]
 8011a4e:	4613      	mov	r3, r2
 8011a50:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011a52:	2300      	movs	r3, #0
 8011a54:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d106      	bne.n	8011a6a <tcp_output_fill_options+0x2e>
 8011a5c:	4b13      	ldr	r3, [pc, #76]	; (8011aac <tcp_output_fill_options+0x70>)
 8011a5e:	f240 7256 	movw	r2, #1878	; 0x756
 8011a62:	4913      	ldr	r1, [pc, #76]	; (8011ab0 <tcp_output_fill_options+0x74>)
 8011a64:	4813      	ldr	r0, [pc, #76]	; (8011ab4 <tcp_output_fill_options+0x78>)
 8011a66:	f001 fabf 	bl	8012fe8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	685b      	ldr	r3, [r3, #4]
 8011a6e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011a70:	69bb      	ldr	r3, [r7, #24]
 8011a72:	3314      	adds	r3, #20
 8011a74:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011a76:	69bb      	ldr	r3, [r7, #24]
 8011a78:	f103 0214 	add.w	r2, r3, #20
 8011a7c:	8bfb      	ldrh	r3, [r7, #30]
 8011a7e:	009b      	lsls	r3, r3, #2
 8011a80:	4619      	mov	r1, r3
 8011a82:	79fb      	ldrb	r3, [r7, #7]
 8011a84:	009b      	lsls	r3, r3, #2
 8011a86:	f003 0304 	and.w	r3, r3, #4
 8011a8a:	440b      	add	r3, r1
 8011a8c:	4413      	add	r3, r2
 8011a8e:	697a      	ldr	r2, [r7, #20]
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d006      	beq.n	8011aa2 <tcp_output_fill_options+0x66>
 8011a94:	4b05      	ldr	r3, [pc, #20]	; (8011aac <tcp_output_fill_options+0x70>)
 8011a96:	f240 7275 	movw	r2, #1909	; 0x775
 8011a9a:	4907      	ldr	r1, [pc, #28]	; (8011ab8 <tcp_output_fill_options+0x7c>)
 8011a9c:	4805      	ldr	r0, [pc, #20]	; (8011ab4 <tcp_output_fill_options+0x78>)
 8011a9e:	f001 faa3 	bl	8012fe8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011aa2:	bf00      	nop
 8011aa4:	3720      	adds	r7, #32
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	080165ec 	.word	0x080165ec
 8011ab0:	08016d70 	.word	0x08016d70
 8011ab4:	08016694 	.word	0x08016694
 8011ab8:	08016c68 	.word	0x08016c68

08011abc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b08a      	sub	sp, #40	; 0x28
 8011ac0:	af04      	add	r7, sp, #16
 8011ac2:	60f8      	str	r0, [r7, #12]
 8011ac4:	60b9      	str	r1, [r7, #8]
 8011ac6:	607a      	str	r2, [r7, #4]
 8011ac8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d106      	bne.n	8011ade <tcp_output_control_segment+0x22>
 8011ad0:	4b1c      	ldr	r3, [pc, #112]	; (8011b44 <tcp_output_control_segment+0x88>)
 8011ad2:	f240 7287 	movw	r2, #1927	; 0x787
 8011ad6:	491c      	ldr	r1, [pc, #112]	; (8011b48 <tcp_output_control_segment+0x8c>)
 8011ad8:	481c      	ldr	r0, [pc, #112]	; (8011b4c <tcp_output_control_segment+0x90>)
 8011ada:	f001 fa85 	bl	8012fe8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011ade:	683a      	ldr	r2, [r7, #0]
 8011ae0:	6879      	ldr	r1, [r7, #4]
 8011ae2:	68f8      	ldr	r0, [r7, #12]
 8011ae4:	f7fe ff40 	bl	8010968 <tcp_route>
 8011ae8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d102      	bne.n	8011af6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011af0:	23fc      	movs	r3, #252	; 0xfc
 8011af2:	75fb      	strb	r3, [r7, #23]
 8011af4:	e01c      	b.n	8011b30 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d006      	beq.n	8011b0a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	7adb      	ldrb	r3, [r3, #11]
 8011b00:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	7a9b      	ldrb	r3, [r3, #10]
 8011b06:	757b      	strb	r3, [r7, #21]
 8011b08:	e003      	b.n	8011b12 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011b0a:	23ff      	movs	r3, #255	; 0xff
 8011b0c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011b12:	7dba      	ldrb	r2, [r7, #22]
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	9302      	str	r3, [sp, #8]
 8011b18:	2306      	movs	r3, #6
 8011b1a:	9301      	str	r3, [sp, #4]
 8011b1c:	7d7b      	ldrb	r3, [r7, #21]
 8011b1e:	9300      	str	r3, [sp, #0]
 8011b20:	4613      	mov	r3, r2
 8011b22:	683a      	ldr	r2, [r7, #0]
 8011b24:	6879      	ldr	r1, [r7, #4]
 8011b26:	68b8      	ldr	r0, [r7, #8]
 8011b28:	f7f8 f916 	bl	8009d58 <ip4_output_if>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011b30:	68b8      	ldr	r0, [r7, #8]
 8011b32:	f7fa fc21 	bl	800c378 <pbuf_free>
  return err;
 8011b36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3718      	adds	r7, #24
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
 8011b42:	bf00      	nop
 8011b44:	080165ec 	.word	0x080165ec
 8011b48:	08016d98 	.word	0x08016d98
 8011b4c:	08016694 	.word	0x08016694

08011b50 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011b50:	b590      	push	{r4, r7, lr}
 8011b52:	b08b      	sub	sp, #44	; 0x2c
 8011b54:	af04      	add	r7, sp, #16
 8011b56:	60f8      	str	r0, [r7, #12]
 8011b58:	60b9      	str	r1, [r7, #8]
 8011b5a:	607a      	str	r2, [r7, #4]
 8011b5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d106      	bne.n	8011b72 <tcp_rst+0x22>
 8011b64:	4b1f      	ldr	r3, [pc, #124]	; (8011be4 <tcp_rst+0x94>)
 8011b66:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011b6a:	491f      	ldr	r1, [pc, #124]	; (8011be8 <tcp_rst+0x98>)
 8011b6c:	481f      	ldr	r0, [pc, #124]	; (8011bec <tcp_rst+0x9c>)
 8011b6e:	f001 fa3b 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d106      	bne.n	8011b86 <tcp_rst+0x36>
 8011b78:	4b1a      	ldr	r3, [pc, #104]	; (8011be4 <tcp_rst+0x94>)
 8011b7a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011b7e:	491c      	ldr	r1, [pc, #112]	; (8011bf0 <tcp_rst+0xa0>)
 8011b80:	481a      	ldr	r0, [pc, #104]	; (8011bec <tcp_rst+0x9c>)
 8011b82:	f001 fa31 	bl	8012fe8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011b86:	2300      	movs	r3, #0
 8011b88:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011b8a:	f246 0308 	movw	r3, #24584	; 0x6008
 8011b8e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011b90:	7dfb      	ldrb	r3, [r7, #23]
 8011b92:	b29c      	uxth	r4, r3
 8011b94:	68b8      	ldr	r0, [r7, #8]
 8011b96:	f7f6 fc5e 	bl	8008456 <lwip_htonl>
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	8abb      	ldrh	r3, [r7, #20]
 8011b9e:	9303      	str	r3, [sp, #12]
 8011ba0:	2314      	movs	r3, #20
 8011ba2:	9302      	str	r3, [sp, #8]
 8011ba4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011ba6:	9301      	str	r3, [sp, #4]
 8011ba8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011baa:	9300      	str	r3, [sp, #0]
 8011bac:	4613      	mov	r3, r2
 8011bae:	2200      	movs	r2, #0
 8011bb0:	4621      	mov	r1, r4
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f7ff fe92 	bl	80118dc <tcp_output_alloc_header_common>
 8011bb8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d00c      	beq.n	8011bda <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011bc0:	7dfb      	ldrb	r3, [r7, #23]
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	6939      	ldr	r1, [r7, #16]
 8011bc6:	68f8      	ldr	r0, [r7, #12]
 8011bc8:	f7ff ff38 	bl	8011a3c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bce:	683a      	ldr	r2, [r7, #0]
 8011bd0:	6939      	ldr	r1, [r7, #16]
 8011bd2:	68f8      	ldr	r0, [r7, #12]
 8011bd4:	f7ff ff72 	bl	8011abc <tcp_output_control_segment>
 8011bd8:	e000      	b.n	8011bdc <tcp_rst+0x8c>
    return;
 8011bda:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011bdc:	371c      	adds	r7, #28
 8011bde:	46bd      	mov	sp, r7
 8011be0:	bd90      	pop	{r4, r7, pc}
 8011be2:	bf00      	nop
 8011be4:	080165ec 	.word	0x080165ec
 8011be8:	08016dc4 	.word	0x08016dc4
 8011bec:	08016694 	.word	0x08016694
 8011bf0:	08016de0 	.word	0x08016de0

08011bf4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011bf4:	b590      	push	{r4, r7, lr}
 8011bf6:	b087      	sub	sp, #28
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011c00:	2300      	movs	r3, #0
 8011c02:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d106      	bne.n	8011c18 <tcp_send_empty_ack+0x24>
 8011c0a:	4b28      	ldr	r3, [pc, #160]	; (8011cac <tcp_send_empty_ack+0xb8>)
 8011c0c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011c10:	4927      	ldr	r1, [pc, #156]	; (8011cb0 <tcp_send_empty_ack+0xbc>)
 8011c12:	4828      	ldr	r0, [pc, #160]	; (8011cb4 <tcp_send_empty_ack+0xc0>)
 8011c14:	f001 f9e8 	bl	8012fe8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011c18:	7dfb      	ldrb	r3, [r7, #23]
 8011c1a:	009b      	lsls	r3, r3, #2
 8011c1c:	b2db      	uxtb	r3, r3
 8011c1e:	f003 0304 	and.w	r3, r3, #4
 8011c22:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011c24:	7d7b      	ldrb	r3, [r7, #21]
 8011c26:	b29c      	uxth	r4, r3
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7f6 fc12 	bl	8008456 <lwip_htonl>
 8011c32:	4603      	mov	r3, r0
 8011c34:	2200      	movs	r2, #0
 8011c36:	4621      	mov	r1, r4
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f7ff fec1 	bl	80119c0 <tcp_output_alloc_header>
 8011c3e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d109      	bne.n	8011c5a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	8b5b      	ldrh	r3, [r3, #26]
 8011c4a:	f043 0303 	orr.w	r3, r3, #3
 8011c4e:	b29a      	uxth	r2, r3
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011c54:	f06f 0301 	mvn.w	r3, #1
 8011c58:	e023      	b.n	8011ca2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011c5a:	7dbb      	ldrb	r3, [r7, #22]
 8011c5c:	7dfa      	ldrb	r2, [r7, #23]
 8011c5e:	6939      	ldr	r1, [r7, #16]
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f7ff feeb 	bl	8011a3c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011c66:	687a      	ldr	r2, [r7, #4]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	3304      	adds	r3, #4
 8011c6c:	6939      	ldr	r1, [r7, #16]
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f7ff ff24 	bl	8011abc <tcp_output_control_segment>
 8011c74:	4603      	mov	r3, r0
 8011c76:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d007      	beq.n	8011c90 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	8b5b      	ldrh	r3, [r3, #26]
 8011c84:	f043 0303 	orr.w	r3, r3, #3
 8011c88:	b29a      	uxth	r2, r3
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	835a      	strh	r2, [r3, #26]
 8011c8e:	e006      	b.n	8011c9e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	8b5b      	ldrh	r3, [r3, #26]
 8011c94:	f023 0303 	bic.w	r3, r3, #3
 8011c98:	b29a      	uxth	r2, r3
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	371c      	adds	r7, #28
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd90      	pop	{r4, r7, pc}
 8011caa:	bf00      	nop
 8011cac:	080165ec 	.word	0x080165ec
 8011cb0:	08016dfc 	.word	0x08016dfc
 8011cb4:	08016694 	.word	0x08016694

08011cb8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011cb8:	b590      	push	{r4, r7, lr}
 8011cba:	b087      	sub	sp, #28
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d106      	bne.n	8011cd8 <tcp_keepalive+0x20>
 8011cca:	4b18      	ldr	r3, [pc, #96]	; (8011d2c <tcp_keepalive+0x74>)
 8011ccc:	f640 0224 	movw	r2, #2084	; 0x824
 8011cd0:	4917      	ldr	r1, [pc, #92]	; (8011d30 <tcp_keepalive+0x78>)
 8011cd2:	4818      	ldr	r0, [pc, #96]	; (8011d34 <tcp_keepalive+0x7c>)
 8011cd4:	f001 f988 	bl	8012fe8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011cd8:	7dfb      	ldrb	r3, [r7, #23]
 8011cda:	b29c      	uxth	r4, r3
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ce0:	3b01      	subs	r3, #1
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7f6 fbb7 	bl	8008456 <lwip_htonl>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	2200      	movs	r2, #0
 8011cec:	4621      	mov	r1, r4
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f7ff fe66 	bl	80119c0 <tcp_output_alloc_header>
 8011cf4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d102      	bne.n	8011d02 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8011d00:	e010      	b.n	8011d24 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011d02:	7dfb      	ldrb	r3, [r7, #23]
 8011d04:	2200      	movs	r2, #0
 8011d06:	6939      	ldr	r1, [r7, #16]
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f7ff fe97 	bl	8011a3c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011d0e:	687a      	ldr	r2, [r7, #4]
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	3304      	adds	r3, #4
 8011d14:	6939      	ldr	r1, [r7, #16]
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f7ff fed0 	bl	8011abc <tcp_output_control_segment>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011d24:	4618      	mov	r0, r3
 8011d26:	371c      	adds	r7, #28
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd90      	pop	{r4, r7, pc}
 8011d2c:	080165ec 	.word	0x080165ec
 8011d30:	08016e1c 	.word	0x08016e1c
 8011d34:	08016694 	.word	0x08016694

08011d38 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011d38:	b590      	push	{r4, r7, lr}
 8011d3a:	b08b      	sub	sp, #44	; 0x2c
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011d40:	2300      	movs	r3, #0
 8011d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d106      	bne.n	8011d5a <tcp_zero_window_probe+0x22>
 8011d4c:	4b4c      	ldr	r3, [pc, #304]	; (8011e80 <tcp_zero_window_probe+0x148>)
 8011d4e:	f640 024f 	movw	r2, #2127	; 0x84f
 8011d52:	494c      	ldr	r1, [pc, #304]	; (8011e84 <tcp_zero_window_probe+0x14c>)
 8011d54:	484c      	ldr	r0, [pc, #304]	; (8011e88 <tcp_zero_window_probe+0x150>)
 8011d56:	f001 f947 	bl	8012fe8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d5e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011d60:	6a3b      	ldr	r3, [r7, #32]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d101      	bne.n	8011d6a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011d66:	2300      	movs	r3, #0
 8011d68:	e086      	b.n	8011e78 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011d70:	2bff      	cmp	r3, #255	; 0xff
 8011d72:	d007      	beq.n	8011d84 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	b2da      	uxtb	r2, r3
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011d84:	6a3b      	ldr	r3, [r7, #32]
 8011d86:	68db      	ldr	r3, [r3, #12]
 8011d88:	899b      	ldrh	r3, [r3, #12]
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7f6 fb4d 	bl	800842c <lwip_htons>
 8011d92:	4603      	mov	r3, r0
 8011d94:	b2db      	uxtb	r3, r3
 8011d96:	f003 0301 	and.w	r3, r3, #1
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d005      	beq.n	8011daa <tcp_zero_window_probe+0x72>
 8011d9e:	6a3b      	ldr	r3, [r7, #32]
 8011da0:	891b      	ldrh	r3, [r3, #8]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d101      	bne.n	8011daa <tcp_zero_window_probe+0x72>
 8011da6:	2301      	movs	r3, #1
 8011da8:	e000      	b.n	8011dac <tcp_zero_window_probe+0x74>
 8011daa:	2300      	movs	r3, #0
 8011dac:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011dae:	7ffb      	ldrb	r3, [r7, #31]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	bf0c      	ite	eq
 8011db4:	2301      	moveq	r3, #1
 8011db6:	2300      	movne	r3, #0
 8011db8:	b2db      	uxtb	r3, r3
 8011dba:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dc0:	b299      	uxth	r1, r3
 8011dc2:	6a3b      	ldr	r3, [r7, #32]
 8011dc4:	68db      	ldr	r3, [r3, #12]
 8011dc6:	685b      	ldr	r3, [r3, #4]
 8011dc8:	8bba      	ldrh	r2, [r7, #28]
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f7ff fdf8 	bl	80119c0 <tcp_output_alloc_header>
 8011dd0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011dd2:	69bb      	ldr	r3, [r7, #24]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d102      	bne.n	8011dde <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8011ddc:	e04c      	b.n	8011e78 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011dde:	69bb      	ldr	r3, [r7, #24]
 8011de0:	685b      	ldr	r3, [r3, #4]
 8011de2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011de4:	7ffb      	ldrb	r3, [r7, #31]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d011      	beq.n	8011e0e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	899b      	ldrh	r3, [r3, #12]
 8011dee:	b29b      	uxth	r3, r3
 8011df0:	b21b      	sxth	r3, r3
 8011df2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011df6:	b21c      	sxth	r4, r3
 8011df8:	2011      	movs	r0, #17
 8011dfa:	f7f6 fb17 	bl	800842c <lwip_htons>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	b21b      	sxth	r3, r3
 8011e02:	4323      	orrs	r3, r4
 8011e04:	b21b      	sxth	r3, r3
 8011e06:	b29a      	uxth	r2, r3
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	819a      	strh	r2, [r3, #12]
 8011e0c:	e010      	b.n	8011e30 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011e0e:	69bb      	ldr	r3, [r7, #24]
 8011e10:	685b      	ldr	r3, [r3, #4]
 8011e12:	3314      	adds	r3, #20
 8011e14:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011e16:	6a3b      	ldr	r3, [r7, #32]
 8011e18:	6858      	ldr	r0, [r3, #4]
 8011e1a:	6a3b      	ldr	r3, [r7, #32]
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	891a      	ldrh	r2, [r3, #8]
 8011e20:	6a3b      	ldr	r3, [r7, #32]
 8011e22:	891b      	ldrh	r3, [r3, #8]
 8011e24:	1ad3      	subs	r3, r2, r3
 8011e26:	b29b      	uxth	r3, r3
 8011e28:	2201      	movs	r2, #1
 8011e2a:	6939      	ldr	r1, [r7, #16]
 8011e2c:	f7fa fcaa 	bl	800c784 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011e30:	6a3b      	ldr	r3, [r7, #32]
 8011e32:	68db      	ldr	r3, [r3, #12]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7f6 fb0d 	bl	8008456 <lwip_htonl>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	3301      	adds	r3, #1
 8011e40:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	1ad3      	subs	r3, r2, r3
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	da02      	bge.n	8011e54 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	68fa      	ldr	r2, [r7, #12]
 8011e52:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e58:	2200      	movs	r2, #0
 8011e5a:	69b9      	ldr	r1, [r7, #24]
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f7ff fded 	bl	8011a3c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011e62:	687a      	ldr	r2, [r7, #4]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	3304      	adds	r3, #4
 8011e68:	69b9      	ldr	r1, [r7, #24]
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f7ff fe26 	bl	8011abc <tcp_output_control_segment>
 8011e70:	4603      	mov	r3, r0
 8011e72:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011e74:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	372c      	adds	r7, #44	; 0x2c
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd90      	pop	{r4, r7, pc}
 8011e80:	080165ec 	.word	0x080165ec
 8011e84:	08016e38 	.word	0x08016e38
 8011e88:	08016694 	.word	0x08016694

08011e8c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8011e96:	f000 fb01 	bl	801249c <sys_timeouts_sleeptime>
 8011e9a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ea2:	d10b      	bne.n	8011ebc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011ea4:	4813      	ldr	r0, [pc, #76]	; (8011ef4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011ea6:	f7fa fe68 	bl	800cb7a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011eaa:	2200      	movs	r2, #0
 8011eac:	6839      	ldr	r1, [r7, #0]
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f7fa fdda 	bl	800ca68 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011eb4:	480f      	ldr	r0, [pc, #60]	; (8011ef4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011eb6:	f7fa fe51 	bl	800cb5c <sys_mutex_lock>
    return;
 8011eba:	e018      	b.n	8011eee <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d102      	bne.n	8011ec8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011ec2:	f000 fab1 	bl	8012428 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011ec6:	e7e6      	b.n	8011e96 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011ec8:	480a      	ldr	r0, [pc, #40]	; (8011ef4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011eca:	f7fa fe56 	bl	800cb7a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8011ece:	68fa      	ldr	r2, [r7, #12]
 8011ed0:	6839      	ldr	r1, [r7, #0]
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f7fa fdc8 	bl	800ca68 <sys_arch_mbox_fetch>
 8011ed8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8011eda:	4806      	ldr	r0, [pc, #24]	; (8011ef4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011edc:	f7fa fe3e 	bl	800cb5c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ee6:	d102      	bne.n	8011eee <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011ee8:	f000 fa9e 	bl	8012428 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011eec:	e7d3      	b.n	8011e96 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8011eee:	3710      	adds	r7, #16
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}
 8011ef4:	240074ec 	.word	0x240074ec

08011ef8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b084      	sub	sp, #16
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011f00:	4810      	ldr	r0, [pc, #64]	; (8011f44 <tcpip_thread+0x4c>)
 8011f02:	f7fa fe2b 	bl	800cb5c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8011f06:	4b10      	ldr	r3, [pc, #64]	; (8011f48 <tcpip_thread+0x50>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d005      	beq.n	8011f1a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8011f0e:	4b0e      	ldr	r3, [pc, #56]	; (8011f48 <tcpip_thread+0x50>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	4a0e      	ldr	r2, [pc, #56]	; (8011f4c <tcpip_thread+0x54>)
 8011f14:	6812      	ldr	r2, [r2, #0]
 8011f16:	4610      	mov	r0, r2
 8011f18:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011f1a:	f107 030c 	add.w	r3, r7, #12
 8011f1e:	4619      	mov	r1, r3
 8011f20:	480b      	ldr	r0, [pc, #44]	; (8011f50 <tcpip_thread+0x58>)
 8011f22:	f7ff ffb3 	bl	8011e8c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d106      	bne.n	8011f3a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011f2c:	4b09      	ldr	r3, [pc, #36]	; (8011f54 <tcpip_thread+0x5c>)
 8011f2e:	2291      	movs	r2, #145	; 0x91
 8011f30:	4909      	ldr	r1, [pc, #36]	; (8011f58 <tcpip_thread+0x60>)
 8011f32:	480a      	ldr	r0, [pc, #40]	; (8011f5c <tcpip_thread+0x64>)
 8011f34:	f001 f858 	bl	8012fe8 <iprintf>
      continue;
 8011f38:	e003      	b.n	8011f42 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f000 f80f 	bl	8011f60 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011f42:	e7ea      	b.n	8011f1a <tcpip_thread+0x22>
 8011f44:	240074ec 	.word	0x240074ec
 8011f48:	240074e0 	.word	0x240074e0
 8011f4c:	240074e4 	.word	0x240074e4
 8011f50:	240074e8 	.word	0x240074e8
 8011f54:	08016e5c 	.word	0x08016e5c
 8011f58:	08016ee0 	.word	0x08016ee0
 8011f5c:	08016f00 	.word	0x08016f00

08011f60 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	781b      	ldrb	r3, [r3, #0]
 8011f6c:	2b02      	cmp	r3, #2
 8011f6e:	d026      	beq.n	8011fbe <tcpip_thread_handle_msg+0x5e>
 8011f70:	2b02      	cmp	r3, #2
 8011f72:	dc2b      	bgt.n	8011fcc <tcpip_thread_handle_msg+0x6c>
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d002      	beq.n	8011f7e <tcpip_thread_handle_msg+0x1e>
 8011f78:	2b01      	cmp	r3, #1
 8011f7a:	d015      	beq.n	8011fa8 <tcpip_thread_handle_msg+0x48>
 8011f7c:	e026      	b.n	8011fcc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	68db      	ldr	r3, [r3, #12]
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	6850      	ldr	r0, [r2, #4]
 8011f86:	687a      	ldr	r2, [r7, #4]
 8011f88:	6892      	ldr	r2, [r2, #8]
 8011f8a:	4611      	mov	r1, r2
 8011f8c:	4798      	blx	r3
 8011f8e:	4603      	mov	r3, r0
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d004      	beq.n	8011f9e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	685b      	ldr	r3, [r3, #4]
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f7fa f9ed 	bl	800c378 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011f9e:	6879      	ldr	r1, [r7, #4]
 8011fa0:	2009      	movs	r0, #9
 8011fa2:	f7f9 fb45 	bl	800b630 <memp_free>
      break;
 8011fa6:	e018      	b.n	8011fda <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	687a      	ldr	r2, [r7, #4]
 8011fae:	6892      	ldr	r2, [r2, #8]
 8011fb0:	4610      	mov	r0, r2
 8011fb2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011fb4:	6879      	ldr	r1, [r7, #4]
 8011fb6:	2008      	movs	r0, #8
 8011fb8:	f7f9 fb3a 	bl	800b630 <memp_free>
      break;
 8011fbc:	e00d      	b.n	8011fda <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	685b      	ldr	r3, [r3, #4]
 8011fc2:	687a      	ldr	r2, [r7, #4]
 8011fc4:	6892      	ldr	r2, [r2, #8]
 8011fc6:	4610      	mov	r0, r2
 8011fc8:	4798      	blx	r3
      break;
 8011fca:	e006      	b.n	8011fda <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011fcc:	4b05      	ldr	r3, [pc, #20]	; (8011fe4 <tcpip_thread_handle_msg+0x84>)
 8011fce:	22cf      	movs	r2, #207	; 0xcf
 8011fd0:	4905      	ldr	r1, [pc, #20]	; (8011fe8 <tcpip_thread_handle_msg+0x88>)
 8011fd2:	4806      	ldr	r0, [pc, #24]	; (8011fec <tcpip_thread_handle_msg+0x8c>)
 8011fd4:	f001 f808 	bl	8012fe8 <iprintf>
      break;
 8011fd8:	bf00      	nop
  }
}
 8011fda:	bf00      	nop
 8011fdc:	3708      	adds	r7, #8
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}
 8011fe2:	bf00      	nop
 8011fe4:	08016e5c 	.word	0x08016e5c
 8011fe8:	08016ee0 	.word	0x08016ee0
 8011fec:	08016f00 	.word	0x08016f00

08011ff0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b086      	sub	sp, #24
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	60f8      	str	r0, [r7, #12]
 8011ff8:	60b9      	str	r1, [r7, #8]
 8011ffa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011ffc:	481a      	ldr	r0, [pc, #104]	; (8012068 <tcpip_inpkt+0x78>)
 8011ffe:	f7fa fd72 	bl	800cae6 <sys_mbox_valid>
 8012002:	4603      	mov	r3, r0
 8012004:	2b00      	cmp	r3, #0
 8012006:	d105      	bne.n	8012014 <tcpip_inpkt+0x24>
 8012008:	4b18      	ldr	r3, [pc, #96]	; (801206c <tcpip_inpkt+0x7c>)
 801200a:	22fc      	movs	r2, #252	; 0xfc
 801200c:	4918      	ldr	r1, [pc, #96]	; (8012070 <tcpip_inpkt+0x80>)
 801200e:	4819      	ldr	r0, [pc, #100]	; (8012074 <tcpip_inpkt+0x84>)
 8012010:	f000 ffea 	bl	8012fe8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012014:	2009      	movs	r0, #9
 8012016:	f7f9 fa95 	bl	800b544 <memp_malloc>
 801201a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d102      	bne.n	8012028 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012022:	f04f 33ff 	mov.w	r3, #4294967295
 8012026:	e01a      	b.n	801205e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	2200      	movs	r2, #0
 801202c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	68fa      	ldr	r2, [r7, #12]
 8012032:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012034:	697b      	ldr	r3, [r7, #20]
 8012036:	68ba      	ldr	r2, [r7, #8]
 8012038:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	687a      	ldr	r2, [r7, #4]
 801203e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012040:	6979      	ldr	r1, [r7, #20]
 8012042:	4809      	ldr	r0, [pc, #36]	; (8012068 <tcpip_inpkt+0x78>)
 8012044:	f7fa fcf6 	bl	800ca34 <sys_mbox_trypost>
 8012048:	4603      	mov	r3, r0
 801204a:	2b00      	cmp	r3, #0
 801204c:	d006      	beq.n	801205c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801204e:	6979      	ldr	r1, [r7, #20]
 8012050:	2009      	movs	r0, #9
 8012052:	f7f9 faed 	bl	800b630 <memp_free>
    return ERR_MEM;
 8012056:	f04f 33ff 	mov.w	r3, #4294967295
 801205a:	e000      	b.n	801205e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801205c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801205e:	4618      	mov	r0, r3
 8012060:	3718      	adds	r7, #24
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}
 8012066:	bf00      	nop
 8012068:	240074e8 	.word	0x240074e8
 801206c:	08016e5c 	.word	0x08016e5c
 8012070:	08016f28 	.word	0x08016f28
 8012074:	08016f00 	.word	0x08016f00

08012078 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012088:	f003 0318 	and.w	r3, r3, #24
 801208c:	2b00      	cmp	r3, #0
 801208e:	d006      	beq.n	801209e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012090:	4a08      	ldr	r2, [pc, #32]	; (80120b4 <tcpip_input+0x3c>)
 8012092:	6839      	ldr	r1, [r7, #0]
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7ff ffab 	bl	8011ff0 <tcpip_inpkt>
 801209a:	4603      	mov	r3, r0
 801209c:	e005      	b.n	80120aa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801209e:	4a06      	ldr	r2, [pc, #24]	; (80120b8 <tcpip_input+0x40>)
 80120a0:	6839      	ldr	r1, [r7, #0]
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f7ff ffa4 	bl	8011ff0 <tcpip_inpkt>
 80120a8:	4603      	mov	r3, r0
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3708      	adds	r7, #8
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}
 80120b2:	bf00      	nop
 80120b4:	08009321 	.word	0x08009321
 80120b8:	08009b11 	.word	0x08009b11

080120bc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b084      	sub	sp, #16
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80120c6:	4819      	ldr	r0, [pc, #100]	; (801212c <tcpip_try_callback+0x70>)
 80120c8:	f7fa fd0d 	bl	800cae6 <sys_mbox_valid>
 80120cc:	4603      	mov	r3, r0
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d106      	bne.n	80120e0 <tcpip_try_callback+0x24>
 80120d2:	4b17      	ldr	r3, [pc, #92]	; (8012130 <tcpip_try_callback+0x74>)
 80120d4:	f240 125d 	movw	r2, #349	; 0x15d
 80120d8:	4916      	ldr	r1, [pc, #88]	; (8012134 <tcpip_try_callback+0x78>)
 80120da:	4817      	ldr	r0, [pc, #92]	; (8012138 <tcpip_try_callback+0x7c>)
 80120dc:	f000 ff84 	bl	8012fe8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80120e0:	2008      	movs	r0, #8
 80120e2:	f7f9 fa2f 	bl	800b544 <memp_malloc>
 80120e6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d102      	bne.n	80120f4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80120ee:	f04f 33ff 	mov.w	r3, #4294967295
 80120f2:	e017      	b.n	8012124 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	2201      	movs	r2, #1
 80120f8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	687a      	ldr	r2, [r7, #4]
 80120fe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	683a      	ldr	r2, [r7, #0]
 8012104:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012106:	68f9      	ldr	r1, [r7, #12]
 8012108:	4808      	ldr	r0, [pc, #32]	; (801212c <tcpip_try_callback+0x70>)
 801210a:	f7fa fc93 	bl	800ca34 <sys_mbox_trypost>
 801210e:	4603      	mov	r3, r0
 8012110:	2b00      	cmp	r3, #0
 8012112:	d006      	beq.n	8012122 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012114:	68f9      	ldr	r1, [r7, #12]
 8012116:	2008      	movs	r0, #8
 8012118:	f7f9 fa8a 	bl	800b630 <memp_free>
    return ERR_MEM;
 801211c:	f04f 33ff 	mov.w	r3, #4294967295
 8012120:	e000      	b.n	8012124 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012122:	2300      	movs	r3, #0
}
 8012124:	4618      	mov	r0, r3
 8012126:	3710      	adds	r7, #16
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}
 801212c:	240074e8 	.word	0x240074e8
 8012130:	08016e5c 	.word	0x08016e5c
 8012134:	08016f28 	.word	0x08016f28
 8012138:	08016f00 	.word	0x08016f00

0801213c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801213c:	b580      	push	{r7, lr}
 801213e:	b084      	sub	sp, #16
 8012140:	af02      	add	r7, sp, #8
 8012142:	6078      	str	r0, [r7, #4]
 8012144:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012146:	f7f7 fc31 	bl	80099ac <lwip_init>

  tcpip_init_done = initfunc;
 801214a:	4a17      	ldr	r2, [pc, #92]	; (80121a8 <tcpip_init+0x6c>)
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012150:	4a16      	ldr	r2, [pc, #88]	; (80121ac <tcpip_init+0x70>)
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012156:	2106      	movs	r1, #6
 8012158:	4815      	ldr	r0, [pc, #84]	; (80121b0 <tcpip_init+0x74>)
 801215a:	f7fa fc49 	bl	800c9f0 <sys_mbox_new>
 801215e:	4603      	mov	r3, r0
 8012160:	2b00      	cmp	r3, #0
 8012162:	d006      	beq.n	8012172 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012164:	4b13      	ldr	r3, [pc, #76]	; (80121b4 <tcpip_init+0x78>)
 8012166:	f240 2261 	movw	r2, #609	; 0x261
 801216a:	4913      	ldr	r1, [pc, #76]	; (80121b8 <tcpip_init+0x7c>)
 801216c:	4813      	ldr	r0, [pc, #76]	; (80121bc <tcpip_init+0x80>)
 801216e:	f000 ff3b 	bl	8012fe8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012172:	4813      	ldr	r0, [pc, #76]	; (80121c0 <tcpip_init+0x84>)
 8012174:	f7fa fcd6 	bl	800cb24 <sys_mutex_new>
 8012178:	4603      	mov	r3, r0
 801217a:	2b00      	cmp	r3, #0
 801217c:	d006      	beq.n	801218c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801217e:	4b0d      	ldr	r3, [pc, #52]	; (80121b4 <tcpip_init+0x78>)
 8012180:	f240 2265 	movw	r2, #613	; 0x265
 8012184:	490f      	ldr	r1, [pc, #60]	; (80121c4 <tcpip_init+0x88>)
 8012186:	480d      	ldr	r0, [pc, #52]	; (80121bc <tcpip_init+0x80>)
 8012188:	f000 ff2e 	bl	8012fe8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801218c:	2300      	movs	r3, #0
 801218e:	9300      	str	r3, [sp, #0]
 8012190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012194:	2200      	movs	r2, #0
 8012196:	490c      	ldr	r1, [pc, #48]	; (80121c8 <tcpip_init+0x8c>)
 8012198:	480c      	ldr	r0, [pc, #48]	; (80121cc <tcpip_init+0x90>)
 801219a:	f7fa fcfb 	bl	800cb94 <sys_thread_new>
}
 801219e:	bf00      	nop
 80121a0:	3708      	adds	r7, #8
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	bf00      	nop
 80121a8:	240074e0 	.word	0x240074e0
 80121ac:	240074e4 	.word	0x240074e4
 80121b0:	240074e8 	.word	0x240074e8
 80121b4:	08016e5c 	.word	0x08016e5c
 80121b8:	08016f38 	.word	0x08016f38
 80121bc:	08016f00 	.word	0x08016f00
 80121c0:	240074ec 	.word	0x240074ec
 80121c4:	08016f5c 	.word	0x08016f5c
 80121c8:	08011ef9 	.word	0x08011ef9
 80121cc:	08016f80 	.word	0x08016f80

080121d0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80121d8:	f7fa fd6a 	bl	800ccb0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80121dc:	4b0a      	ldr	r3, [pc, #40]	; (8012208 <tcpip_tcp_timer+0x38>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d103      	bne.n	80121ec <tcpip_tcp_timer+0x1c>
 80121e4:	4b09      	ldr	r3, [pc, #36]	; (801220c <tcpip_tcp_timer+0x3c>)
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d005      	beq.n	80121f8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80121ec:	2200      	movs	r2, #0
 80121ee:	4908      	ldr	r1, [pc, #32]	; (8012210 <tcpip_tcp_timer+0x40>)
 80121f0:	20fa      	movs	r0, #250	; 0xfa
 80121f2:	f000 f8f3 	bl	80123dc <sys_timeout>
 80121f6:	e003      	b.n	8012200 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80121f8:	4b06      	ldr	r3, [pc, #24]	; (8012214 <tcpip_tcp_timer+0x44>)
 80121fa:	2200      	movs	r2, #0
 80121fc:	601a      	str	r2, [r3, #0]
  }
}
 80121fe:	bf00      	nop
 8012200:	bf00      	nop
 8012202:	3708      	adds	r7, #8
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}
 8012208:	2400749c 	.word	0x2400749c
 801220c:	240074a0 	.word	0x240074a0
 8012210:	080121d1 	.word	0x080121d1
 8012214:	240074f8 	.word	0x240074f8

08012218 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801221c:	4b0a      	ldr	r3, [pc, #40]	; (8012248 <tcp_timer_needed+0x30>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d10f      	bne.n	8012244 <tcp_timer_needed+0x2c>
 8012224:	4b09      	ldr	r3, [pc, #36]	; (801224c <tcp_timer_needed+0x34>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d103      	bne.n	8012234 <tcp_timer_needed+0x1c>
 801222c:	4b08      	ldr	r3, [pc, #32]	; (8012250 <tcp_timer_needed+0x38>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d007      	beq.n	8012244 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012234:	4b04      	ldr	r3, [pc, #16]	; (8012248 <tcp_timer_needed+0x30>)
 8012236:	2201      	movs	r2, #1
 8012238:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801223a:	2200      	movs	r2, #0
 801223c:	4905      	ldr	r1, [pc, #20]	; (8012254 <tcp_timer_needed+0x3c>)
 801223e:	20fa      	movs	r0, #250	; 0xfa
 8012240:	f000 f8cc 	bl	80123dc <sys_timeout>
  }
}
 8012244:	bf00      	nop
 8012246:	bd80      	pop	{r7, pc}
 8012248:	240074f8 	.word	0x240074f8
 801224c:	2400749c 	.word	0x2400749c
 8012250:	240074a0 	.word	0x240074a0
 8012254:	080121d1 	.word	0x080121d1

08012258 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b086      	sub	sp, #24
 801225c:	af00      	add	r7, sp, #0
 801225e:	60f8      	str	r0, [r7, #12]
 8012260:	60b9      	str	r1, [r7, #8]
 8012262:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012264:	200a      	movs	r0, #10
 8012266:	f7f9 f96d 	bl	800b544 <memp_malloc>
 801226a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801226c:	693b      	ldr	r3, [r7, #16]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d109      	bne.n	8012286 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d151      	bne.n	801231c <sys_timeout_abs+0xc4>
 8012278:	4b2a      	ldr	r3, [pc, #168]	; (8012324 <sys_timeout_abs+0xcc>)
 801227a:	22be      	movs	r2, #190	; 0xbe
 801227c:	492a      	ldr	r1, [pc, #168]	; (8012328 <sys_timeout_abs+0xd0>)
 801227e:	482b      	ldr	r0, [pc, #172]	; (801232c <sys_timeout_abs+0xd4>)
 8012280:	f000 feb2 	bl	8012fe8 <iprintf>
    return;
 8012284:	e04a      	b.n	801231c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012286:	693b      	ldr	r3, [r7, #16]
 8012288:	2200      	movs	r2, #0
 801228a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	68ba      	ldr	r2, [r7, #8]
 8012290:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012292:	693b      	ldr	r3, [r7, #16]
 8012294:	687a      	ldr	r2, [r7, #4]
 8012296:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012298:	693b      	ldr	r3, [r7, #16]
 801229a:	68fa      	ldr	r2, [r7, #12]
 801229c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801229e:	4b24      	ldr	r3, [pc, #144]	; (8012330 <sys_timeout_abs+0xd8>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d103      	bne.n	80122ae <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80122a6:	4a22      	ldr	r2, [pc, #136]	; (8012330 <sys_timeout_abs+0xd8>)
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	6013      	str	r3, [r2, #0]
    return;
 80122ac:	e037      	b.n	801231e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80122ae:	693b      	ldr	r3, [r7, #16]
 80122b0:	685a      	ldr	r2, [r3, #4]
 80122b2:	4b1f      	ldr	r3, [pc, #124]	; (8012330 <sys_timeout_abs+0xd8>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	1ad3      	subs	r3, r2, r3
 80122ba:	0fdb      	lsrs	r3, r3, #31
 80122bc:	f003 0301 	and.w	r3, r3, #1
 80122c0:	b2db      	uxtb	r3, r3
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d007      	beq.n	80122d6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80122c6:	4b1a      	ldr	r3, [pc, #104]	; (8012330 <sys_timeout_abs+0xd8>)
 80122c8:	681a      	ldr	r2, [r3, #0]
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80122ce:	4a18      	ldr	r2, [pc, #96]	; (8012330 <sys_timeout_abs+0xd8>)
 80122d0:	693b      	ldr	r3, [r7, #16]
 80122d2:	6013      	str	r3, [r2, #0]
 80122d4:	e023      	b.n	801231e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80122d6:	4b16      	ldr	r3, [pc, #88]	; (8012330 <sys_timeout_abs+0xd8>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	617b      	str	r3, [r7, #20]
 80122dc:	e01a      	b.n	8012314 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d00b      	beq.n	80122fe <sys_timeout_abs+0xa6>
 80122e6:	693b      	ldr	r3, [r7, #16]
 80122e8:	685a      	ldr	r2, [r3, #4]
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	685b      	ldr	r3, [r3, #4]
 80122f0:	1ad3      	subs	r3, r2, r3
 80122f2:	0fdb      	lsrs	r3, r3, #31
 80122f4:	f003 0301 	and.w	r3, r3, #1
 80122f8:	b2db      	uxtb	r3, r3
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d007      	beq.n	801230e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	681a      	ldr	r2, [r3, #0]
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012306:	697b      	ldr	r3, [r7, #20]
 8012308:	693a      	ldr	r2, [r7, #16]
 801230a:	601a      	str	r2, [r3, #0]
        break;
 801230c:	e007      	b.n	801231e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801230e:	697b      	ldr	r3, [r7, #20]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	617b      	str	r3, [r7, #20]
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d1e1      	bne.n	80122de <sys_timeout_abs+0x86>
 801231a:	e000      	b.n	801231e <sys_timeout_abs+0xc6>
    return;
 801231c:	bf00      	nop
      }
    }
  }
}
 801231e:	3718      	adds	r7, #24
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}
 8012324:	08016f90 	.word	0x08016f90
 8012328:	08017018 	.word	0x08017018
 801232c:	08017058 	.word	0x08017058
 8012330:	240074f0 	.word	0x240074f0

08012334 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b086      	sub	sp, #24
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	685b      	ldr	r3, [r3, #4]
 8012344:	4798      	blx	r3

  now = sys_now();
 8012346:	f7f2 ff41 	bl	80051cc <sys_now>
 801234a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	681a      	ldr	r2, [r3, #0]
 8012350:	4b0f      	ldr	r3, [pc, #60]	; (8012390 <lwip_cyclic_timer+0x5c>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	4413      	add	r3, r2
 8012356:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012358:	68fa      	ldr	r2, [r7, #12]
 801235a:	693b      	ldr	r3, [r7, #16]
 801235c:	1ad3      	subs	r3, r2, r3
 801235e:	0fdb      	lsrs	r3, r3, #31
 8012360:	f003 0301 	and.w	r3, r3, #1
 8012364:	b2db      	uxtb	r3, r3
 8012366:	2b00      	cmp	r3, #0
 8012368:	d009      	beq.n	801237e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	681a      	ldr	r2, [r3, #0]
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	4413      	add	r3, r2
 8012372:	687a      	ldr	r2, [r7, #4]
 8012374:	4907      	ldr	r1, [pc, #28]	; (8012394 <lwip_cyclic_timer+0x60>)
 8012376:	4618      	mov	r0, r3
 8012378:	f7ff ff6e 	bl	8012258 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801237c:	e004      	b.n	8012388 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801237e:	687a      	ldr	r2, [r7, #4]
 8012380:	4904      	ldr	r1, [pc, #16]	; (8012394 <lwip_cyclic_timer+0x60>)
 8012382:	68f8      	ldr	r0, [r7, #12]
 8012384:	f7ff ff68 	bl	8012258 <sys_timeout_abs>
}
 8012388:	bf00      	nop
 801238a:	3718      	adds	r7, #24
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}
 8012390:	240074f4 	.word	0x240074f4
 8012394:	08012335 	.word	0x08012335

08012398 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b082      	sub	sp, #8
 801239c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801239e:	2301      	movs	r3, #1
 80123a0:	607b      	str	r3, [r7, #4]
 80123a2:	e00e      	b.n	80123c2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80123a4:	4a0b      	ldr	r2, [pc, #44]	; (80123d4 <sys_timeouts_init+0x3c>)
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	00db      	lsls	r3, r3, #3
 80123b0:	4a08      	ldr	r2, [pc, #32]	; (80123d4 <sys_timeouts_init+0x3c>)
 80123b2:	4413      	add	r3, r2
 80123b4:	461a      	mov	r2, r3
 80123b6:	4908      	ldr	r1, [pc, #32]	; (80123d8 <sys_timeouts_init+0x40>)
 80123b8:	f000 f810 	bl	80123dc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	3301      	adds	r3, #1
 80123c0:	607b      	str	r3, [r7, #4]
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2b02      	cmp	r3, #2
 80123c6:	d9ed      	bls.n	80123a4 <sys_timeouts_init+0xc>
  }
}
 80123c8:	bf00      	nop
 80123ca:	bf00      	nop
 80123cc:	3708      	adds	r7, #8
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop
 80123d4:	080175b4 	.word	0x080175b4
 80123d8:	08012335 	.word	0x08012335

080123dc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b086      	sub	sp, #24
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80123ee:	d306      	bcc.n	80123fe <sys_timeout+0x22>
 80123f0:	4b0a      	ldr	r3, [pc, #40]	; (801241c <sys_timeout+0x40>)
 80123f2:	f240 1229 	movw	r2, #297	; 0x129
 80123f6:	490a      	ldr	r1, [pc, #40]	; (8012420 <sys_timeout+0x44>)
 80123f8:	480a      	ldr	r0, [pc, #40]	; (8012424 <sys_timeout+0x48>)
 80123fa:	f000 fdf5 	bl	8012fe8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80123fe:	f7f2 fee5 	bl	80051cc <sys_now>
 8012402:	4602      	mov	r2, r0
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	4413      	add	r3, r2
 8012408:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801240a:	687a      	ldr	r2, [r7, #4]
 801240c:	68b9      	ldr	r1, [r7, #8]
 801240e:	6978      	ldr	r0, [r7, #20]
 8012410:	f7ff ff22 	bl	8012258 <sys_timeout_abs>
#endif
}
 8012414:	bf00      	nop
 8012416:	3718      	adds	r7, #24
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}
 801241c:	08016f90 	.word	0x08016f90
 8012420:	08017080 	.word	0x08017080
 8012424:	08017058 	.word	0x08017058

08012428 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b084      	sub	sp, #16
 801242c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801242e:	f7f2 fecd 	bl	80051cc <sys_now>
 8012432:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012434:	4b17      	ldr	r3, [pc, #92]	; (8012494 <sys_check_timeouts+0x6c>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d022      	beq.n	8012486 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	685b      	ldr	r3, [r3, #4]
 8012444:	68fa      	ldr	r2, [r7, #12]
 8012446:	1ad3      	subs	r3, r2, r3
 8012448:	0fdb      	lsrs	r3, r3, #31
 801244a:	f003 0301 	and.w	r3, r3, #1
 801244e:	b2db      	uxtb	r3, r3
 8012450:	2b00      	cmp	r3, #0
 8012452:	d11a      	bne.n	801248a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	4a0e      	ldr	r2, [pc, #56]	; (8012494 <sys_check_timeouts+0x6c>)
 801245a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	689b      	ldr	r3, [r3, #8]
 8012460:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	68db      	ldr	r3, [r3, #12]
 8012466:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	4a0a      	ldr	r2, [pc, #40]	; (8012498 <sys_check_timeouts+0x70>)
 801246e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012470:	68b9      	ldr	r1, [r7, #8]
 8012472:	200a      	movs	r0, #10
 8012474:	f7f9 f8dc 	bl	800b630 <memp_free>
    if (handler != NULL) {
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d0da      	beq.n	8012434 <sys_check_timeouts+0xc>
      handler(arg);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6838      	ldr	r0, [r7, #0]
 8012482:	4798      	blx	r3
  do {
 8012484:	e7d6      	b.n	8012434 <sys_check_timeouts+0xc>
      return;
 8012486:	bf00      	nop
 8012488:	e000      	b.n	801248c <sys_check_timeouts+0x64>
      return;
 801248a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801248c:	3710      	adds	r7, #16
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}
 8012492:	bf00      	nop
 8012494:	240074f0 	.word	0x240074f0
 8012498:	240074f4 	.word	0x240074f4

0801249c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b082      	sub	sp, #8
 80124a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80124a2:	4b16      	ldr	r3, [pc, #88]	; (80124fc <sys_timeouts_sleeptime+0x60>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d102      	bne.n	80124b0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80124aa:	f04f 33ff 	mov.w	r3, #4294967295
 80124ae:	e020      	b.n	80124f2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80124b0:	f7f2 fe8c 	bl	80051cc <sys_now>
 80124b4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80124b6:	4b11      	ldr	r3, [pc, #68]	; (80124fc <sys_timeouts_sleeptime+0x60>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	685a      	ldr	r2, [r3, #4]
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	1ad3      	subs	r3, r2, r3
 80124c0:	0fdb      	lsrs	r3, r3, #31
 80124c2:	f003 0301 	and.w	r3, r3, #1
 80124c6:	b2db      	uxtb	r3, r3
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d001      	beq.n	80124d0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80124cc:	2300      	movs	r3, #0
 80124ce:	e010      	b.n	80124f2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80124d0:	4b0a      	ldr	r3, [pc, #40]	; (80124fc <sys_timeouts_sleeptime+0x60>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	685a      	ldr	r2, [r3, #4]
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	1ad3      	subs	r3, r2, r3
 80124da:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	da06      	bge.n	80124f0 <sys_timeouts_sleeptime+0x54>
 80124e2:	4b07      	ldr	r3, [pc, #28]	; (8012500 <sys_timeouts_sleeptime+0x64>)
 80124e4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80124e8:	4906      	ldr	r1, [pc, #24]	; (8012504 <sys_timeouts_sleeptime+0x68>)
 80124ea:	4807      	ldr	r0, [pc, #28]	; (8012508 <sys_timeouts_sleeptime+0x6c>)
 80124ec:	f000 fd7c 	bl	8012fe8 <iprintf>
    return ret;
 80124f0:	683b      	ldr	r3, [r7, #0]
  }
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3708      	adds	r7, #8
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}
 80124fa:	bf00      	nop
 80124fc:	240074f0 	.word	0x240074f0
 8012500:	08016f90 	.word	0x08016f90
 8012504:	080170b8 	.word	0x080170b8
 8012508:	08017058 	.word	0x08017058

0801250c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012510:	f000 fd82 	bl	8013018 <rand>
 8012514:	4603      	mov	r3, r0
 8012516:	b29b      	uxth	r3, r3
 8012518:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801251c:	b29b      	uxth	r3, r3
 801251e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012522:	b29a      	uxth	r2, r3
 8012524:	4b01      	ldr	r3, [pc, #4]	; (801252c <udp_init+0x20>)
 8012526:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012528:	bf00      	nop
 801252a:	bd80      	pop	{r7, pc}
 801252c:	24000030 	.word	0x24000030

08012530 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012530:	b480      	push	{r7}
 8012532:	b083      	sub	sp, #12
 8012534:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012536:	2300      	movs	r3, #0
 8012538:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801253a:	4b17      	ldr	r3, [pc, #92]	; (8012598 <udp_new_port+0x68>)
 801253c:	881b      	ldrh	r3, [r3, #0]
 801253e:	1c5a      	adds	r2, r3, #1
 8012540:	b291      	uxth	r1, r2
 8012542:	4a15      	ldr	r2, [pc, #84]	; (8012598 <udp_new_port+0x68>)
 8012544:	8011      	strh	r1, [r2, #0]
 8012546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801254a:	4293      	cmp	r3, r2
 801254c:	d103      	bne.n	8012556 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801254e:	4b12      	ldr	r3, [pc, #72]	; (8012598 <udp_new_port+0x68>)
 8012550:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012554:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012556:	4b11      	ldr	r3, [pc, #68]	; (801259c <udp_new_port+0x6c>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	603b      	str	r3, [r7, #0]
 801255c:	e011      	b.n	8012582 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	8a5a      	ldrh	r2, [r3, #18]
 8012562:	4b0d      	ldr	r3, [pc, #52]	; (8012598 <udp_new_port+0x68>)
 8012564:	881b      	ldrh	r3, [r3, #0]
 8012566:	429a      	cmp	r2, r3
 8012568:	d108      	bne.n	801257c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801256a:	88fb      	ldrh	r3, [r7, #6]
 801256c:	3301      	adds	r3, #1
 801256e:	80fb      	strh	r3, [r7, #6]
 8012570:	88fb      	ldrh	r3, [r7, #6]
 8012572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012576:	d3e0      	bcc.n	801253a <udp_new_port+0xa>
        return 0;
 8012578:	2300      	movs	r3, #0
 801257a:	e007      	b.n	801258c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	68db      	ldr	r3, [r3, #12]
 8012580:	603b      	str	r3, [r7, #0]
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d1ea      	bne.n	801255e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012588:	4b03      	ldr	r3, [pc, #12]	; (8012598 <udp_new_port+0x68>)
 801258a:	881b      	ldrh	r3, [r3, #0]
}
 801258c:	4618      	mov	r0, r3
 801258e:	370c      	adds	r7, #12
 8012590:	46bd      	mov	sp, r7
 8012592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012596:	4770      	bx	lr
 8012598:	24000030 	.word	0x24000030
 801259c:	240074fc 	.word	0x240074fc

080125a0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b084      	sub	sp, #16
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	60f8      	str	r0, [r7, #12]
 80125a8:	60b9      	str	r1, [r7, #8]
 80125aa:	4613      	mov	r3, r2
 80125ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d105      	bne.n	80125c0 <udp_input_local_match+0x20>
 80125b4:	4b27      	ldr	r3, [pc, #156]	; (8012654 <udp_input_local_match+0xb4>)
 80125b6:	2287      	movs	r2, #135	; 0x87
 80125b8:	4927      	ldr	r1, [pc, #156]	; (8012658 <udp_input_local_match+0xb8>)
 80125ba:	4828      	ldr	r0, [pc, #160]	; (801265c <udp_input_local_match+0xbc>)
 80125bc:	f000 fd14 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d105      	bne.n	80125d2 <udp_input_local_match+0x32>
 80125c6:	4b23      	ldr	r3, [pc, #140]	; (8012654 <udp_input_local_match+0xb4>)
 80125c8:	2288      	movs	r2, #136	; 0x88
 80125ca:	4925      	ldr	r1, [pc, #148]	; (8012660 <udp_input_local_match+0xc0>)
 80125cc:	4823      	ldr	r0, [pc, #140]	; (801265c <udp_input_local_match+0xbc>)
 80125ce:	f000 fd0b 	bl	8012fe8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	7a1b      	ldrb	r3, [r3, #8]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d00b      	beq.n	80125f2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	7a1a      	ldrb	r2, [r3, #8]
 80125de:	4b21      	ldr	r3, [pc, #132]	; (8012664 <udp_input_local_match+0xc4>)
 80125e0:	685b      	ldr	r3, [r3, #4]
 80125e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80125e6:	3301      	adds	r3, #1
 80125e8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d001      	beq.n	80125f2 <udp_input_local_match+0x52>
    return 0;
 80125ee:	2300      	movs	r3, #0
 80125f0:	e02b      	b.n	801264a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80125f2:	79fb      	ldrb	r3, [r7, #7]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d018      	beq.n	801262a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d013      	beq.n	8012626 <udp_input_local_match+0x86>
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d00f      	beq.n	8012626 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012606:	4b17      	ldr	r3, [pc, #92]	; (8012664 <udp_input_local_match+0xc4>)
 8012608:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801260a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801260e:	d00a      	beq.n	8012626 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	4b13      	ldr	r3, [pc, #76]	; (8012664 <udp_input_local_match+0xc4>)
 8012616:	695b      	ldr	r3, [r3, #20]
 8012618:	405a      	eors	r2, r3
 801261a:	68bb      	ldr	r3, [r7, #8]
 801261c:	3308      	adds	r3, #8
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012622:	2b00      	cmp	r3, #0
 8012624:	d110      	bne.n	8012648 <udp_input_local_match+0xa8>
          return 1;
 8012626:	2301      	movs	r3, #1
 8012628:	e00f      	b.n	801264a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d009      	beq.n	8012644 <udp_input_local_match+0xa4>
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d005      	beq.n	8012644 <udp_input_local_match+0xa4>
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	681a      	ldr	r2, [r3, #0]
 801263c:	4b09      	ldr	r3, [pc, #36]	; (8012664 <udp_input_local_match+0xc4>)
 801263e:	695b      	ldr	r3, [r3, #20]
 8012640:	429a      	cmp	r2, r3
 8012642:	d101      	bne.n	8012648 <udp_input_local_match+0xa8>
        return 1;
 8012644:	2301      	movs	r3, #1
 8012646:	e000      	b.n	801264a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012648:	2300      	movs	r3, #0
}
 801264a:	4618      	mov	r0, r3
 801264c:	3710      	adds	r7, #16
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}
 8012652:	bf00      	nop
 8012654:	080170cc 	.word	0x080170cc
 8012658:	08017150 	.word	0x08017150
 801265c:	08017174 	.word	0x08017174
 8012660:	0801719c 	.word	0x0801719c
 8012664:	2400437c 	.word	0x2400437c

08012668 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012668:	b590      	push	{r4, r7, lr}
 801266a:	b08d      	sub	sp, #52	; 0x34
 801266c:	af02      	add	r7, sp, #8
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012672:	2300      	movs	r3, #0
 8012674:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d105      	bne.n	8012688 <udp_input+0x20>
 801267c:	4b7c      	ldr	r3, [pc, #496]	; (8012870 <udp_input+0x208>)
 801267e:	22cf      	movs	r2, #207	; 0xcf
 8012680:	497c      	ldr	r1, [pc, #496]	; (8012874 <udp_input+0x20c>)
 8012682:	487d      	ldr	r0, [pc, #500]	; (8012878 <udp_input+0x210>)
 8012684:	f000 fcb0 	bl	8012fe8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d105      	bne.n	801269a <udp_input+0x32>
 801268e:	4b78      	ldr	r3, [pc, #480]	; (8012870 <udp_input+0x208>)
 8012690:	22d0      	movs	r2, #208	; 0xd0
 8012692:	497a      	ldr	r1, [pc, #488]	; (801287c <udp_input+0x214>)
 8012694:	4878      	ldr	r0, [pc, #480]	; (8012878 <udp_input+0x210>)
 8012696:	f000 fca7 	bl	8012fe8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	895b      	ldrh	r3, [r3, #10]
 801269e:	2b07      	cmp	r3, #7
 80126a0:	d803      	bhi.n	80126aa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	f7f9 fe68 	bl	800c378 <pbuf_free>
    goto end;
 80126a8:	e0de      	b.n	8012868 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	685b      	ldr	r3, [r3, #4]
 80126ae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80126b0:	4b73      	ldr	r3, [pc, #460]	; (8012880 <udp_input+0x218>)
 80126b2:	695b      	ldr	r3, [r3, #20]
 80126b4:	4a72      	ldr	r2, [pc, #456]	; (8012880 <udp_input+0x218>)
 80126b6:	6812      	ldr	r2, [r2, #0]
 80126b8:	4611      	mov	r1, r2
 80126ba:	4618      	mov	r0, r3
 80126bc:	f7f7 fc24 	bl	8009f08 <ip4_addr_isbroadcast_u32>
 80126c0:	4603      	mov	r3, r0
 80126c2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	881b      	ldrh	r3, [r3, #0]
 80126c8:	b29b      	uxth	r3, r3
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7f5 feae 	bl	800842c <lwip_htons>
 80126d0:	4603      	mov	r3, r0
 80126d2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	885b      	ldrh	r3, [r3, #2]
 80126d8:	b29b      	uxth	r3, r3
 80126da:	4618      	mov	r0, r3
 80126dc:	f7f5 fea6 	bl	800842c <lwip_htons>
 80126e0:	4603      	mov	r3, r0
 80126e2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80126e4:	2300      	movs	r3, #0
 80126e6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80126e8:	2300      	movs	r3, #0
 80126ea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80126ec:	2300      	movs	r3, #0
 80126ee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80126f0:	4b64      	ldr	r3, [pc, #400]	; (8012884 <udp_input+0x21c>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	627b      	str	r3, [r7, #36]	; 0x24
 80126f6:	e054      	b.n	80127a2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80126f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126fa:	8a5b      	ldrh	r3, [r3, #18]
 80126fc:	89fa      	ldrh	r2, [r7, #14]
 80126fe:	429a      	cmp	r2, r3
 8012700:	d14a      	bne.n	8012798 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012702:	7cfb      	ldrb	r3, [r7, #19]
 8012704:	461a      	mov	r2, r3
 8012706:	6839      	ldr	r1, [r7, #0]
 8012708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801270a:	f7ff ff49 	bl	80125a0 <udp_input_local_match>
 801270e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012710:	2b00      	cmp	r3, #0
 8012712:	d041      	beq.n	8012798 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012716:	7c1b      	ldrb	r3, [r3, #16]
 8012718:	f003 0304 	and.w	r3, r3, #4
 801271c:	2b00      	cmp	r3, #0
 801271e:	d11d      	bne.n	801275c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012720:	69fb      	ldr	r3, [r7, #28]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d102      	bne.n	801272c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012728:	61fb      	str	r3, [r7, #28]
 801272a:	e017      	b.n	801275c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801272c:	7cfb      	ldrb	r3, [r7, #19]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d014      	beq.n	801275c <udp_input+0xf4>
 8012732:	4b53      	ldr	r3, [pc, #332]	; (8012880 <udp_input+0x218>)
 8012734:	695b      	ldr	r3, [r3, #20]
 8012736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801273a:	d10f      	bne.n	801275c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801273c:	69fb      	ldr	r3, [r7, #28]
 801273e:	681a      	ldr	r2, [r3, #0]
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	3304      	adds	r3, #4
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	429a      	cmp	r2, r3
 8012748:	d008      	beq.n	801275c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801274c:	681a      	ldr	r2, [r3, #0]
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	3304      	adds	r3, #4
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	429a      	cmp	r2, r3
 8012756:	d101      	bne.n	801275c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275e:	8a9b      	ldrh	r3, [r3, #20]
 8012760:	8a3a      	ldrh	r2, [r7, #16]
 8012762:	429a      	cmp	r2, r3
 8012764:	d118      	bne.n	8012798 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012768:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801276a:	2b00      	cmp	r3, #0
 801276c:	d005      	beq.n	801277a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012770:	685a      	ldr	r2, [r3, #4]
 8012772:	4b43      	ldr	r3, [pc, #268]	; (8012880 <udp_input+0x218>)
 8012774:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012776:	429a      	cmp	r2, r3
 8012778:	d10e      	bne.n	8012798 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801277a:	6a3b      	ldr	r3, [r7, #32]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d014      	beq.n	80127aa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012782:	68da      	ldr	r2, [r3, #12]
 8012784:	6a3b      	ldr	r3, [r7, #32]
 8012786:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012788:	4b3e      	ldr	r3, [pc, #248]	; (8012884 <udp_input+0x21c>)
 801278a:	681a      	ldr	r2, [r3, #0]
 801278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012790:	4a3c      	ldr	r2, [pc, #240]	; (8012884 <udp_input+0x21c>)
 8012792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012794:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012796:	e008      	b.n	80127aa <udp_input+0x142>
      }
    }

    prev = pcb;
 8012798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279e:	68db      	ldr	r3, [r3, #12]
 80127a0:	627b      	str	r3, [r7, #36]	; 0x24
 80127a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d1a7      	bne.n	80126f8 <udp_input+0x90>
 80127a8:	e000      	b.n	80127ac <udp_input+0x144>
        break;
 80127aa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80127ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d101      	bne.n	80127b6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80127b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d002      	beq.n	80127c2 <udp_input+0x15a>
    for_us = 1;
 80127bc:	2301      	movs	r3, #1
 80127be:	76fb      	strb	r3, [r7, #27]
 80127c0:	e00a      	b.n	80127d8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	3304      	adds	r3, #4
 80127c6:	681a      	ldr	r2, [r3, #0]
 80127c8:	4b2d      	ldr	r3, [pc, #180]	; (8012880 <udp_input+0x218>)
 80127ca:	695b      	ldr	r3, [r3, #20]
 80127cc:	429a      	cmp	r2, r3
 80127ce:	bf0c      	ite	eq
 80127d0:	2301      	moveq	r3, #1
 80127d2:	2300      	movne	r3, #0
 80127d4:	b2db      	uxtb	r3, r3
 80127d6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80127d8:	7efb      	ldrb	r3, [r7, #27]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d041      	beq.n	8012862 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80127de:	2108      	movs	r1, #8
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f7f9 fd43 	bl	800c26c <pbuf_remove_header>
 80127e6:	4603      	mov	r3, r0
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d00a      	beq.n	8012802 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80127ec:	4b20      	ldr	r3, [pc, #128]	; (8012870 <udp_input+0x208>)
 80127ee:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80127f2:	4925      	ldr	r1, [pc, #148]	; (8012888 <udp_input+0x220>)
 80127f4:	4820      	ldr	r0, [pc, #128]	; (8012878 <udp_input+0x210>)
 80127f6:	f000 fbf7 	bl	8012fe8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f7f9 fdbc 	bl	800c378 <pbuf_free>
      goto end;
 8012800:	e032      	b.n	8012868 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012804:	2b00      	cmp	r3, #0
 8012806:	d012      	beq.n	801282e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280a:	699b      	ldr	r3, [r3, #24]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d00a      	beq.n	8012826 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012812:	699c      	ldr	r4, [r3, #24]
 8012814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012816:	69d8      	ldr	r0, [r3, #28]
 8012818:	8a3b      	ldrh	r3, [r7, #16]
 801281a:	9300      	str	r3, [sp, #0]
 801281c:	4b1b      	ldr	r3, [pc, #108]	; (801288c <udp_input+0x224>)
 801281e:	687a      	ldr	r2, [r7, #4]
 8012820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012822:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012824:	e021      	b.n	801286a <udp_input+0x202>
        pbuf_free(p);
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f7f9 fda6 	bl	800c378 <pbuf_free>
        goto end;
 801282c:	e01c      	b.n	8012868 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801282e:	7cfb      	ldrb	r3, [r7, #19]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d112      	bne.n	801285a <udp_input+0x1f2>
 8012834:	4b12      	ldr	r3, [pc, #72]	; (8012880 <udp_input+0x218>)
 8012836:	695b      	ldr	r3, [r3, #20]
 8012838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801283c:	2be0      	cmp	r3, #224	; 0xe0
 801283e:	d00c      	beq.n	801285a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012840:	4b0f      	ldr	r3, [pc, #60]	; (8012880 <udp_input+0x218>)
 8012842:	899b      	ldrh	r3, [r3, #12]
 8012844:	3308      	adds	r3, #8
 8012846:	b29b      	uxth	r3, r3
 8012848:	b21b      	sxth	r3, r3
 801284a:	4619      	mov	r1, r3
 801284c:	6878      	ldr	r0, [r7, #4]
 801284e:	f7f9 fd80 	bl	800c352 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012852:	2103      	movs	r1, #3
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f7f6 ff59 	bl	800970c <icmp_dest_unreach>
      pbuf_free(p);
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	f7f9 fd8c 	bl	800c378 <pbuf_free>
  return;
 8012860:	e003      	b.n	801286a <udp_input+0x202>
    pbuf_free(p);
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7f9 fd88 	bl	800c378 <pbuf_free>
  return;
 8012868:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801286a:	372c      	adds	r7, #44	; 0x2c
 801286c:	46bd      	mov	sp, r7
 801286e:	bd90      	pop	{r4, r7, pc}
 8012870:	080170cc 	.word	0x080170cc
 8012874:	080171c4 	.word	0x080171c4
 8012878:	08017174 	.word	0x08017174
 801287c:	080171dc 	.word	0x080171dc
 8012880:	2400437c 	.word	0x2400437c
 8012884:	240074fc 	.word	0x240074fc
 8012888:	080171f8 	.word	0x080171f8
 801288c:	2400438c 	.word	0x2400438c

08012890 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b082      	sub	sp, #8
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d109      	bne.n	80128b4 <udp_send+0x24>
 80128a0:	4b11      	ldr	r3, [pc, #68]	; (80128e8 <udp_send+0x58>)
 80128a2:	f240 12d5 	movw	r2, #469	; 0x1d5
 80128a6:	4911      	ldr	r1, [pc, #68]	; (80128ec <udp_send+0x5c>)
 80128a8:	4811      	ldr	r0, [pc, #68]	; (80128f0 <udp_send+0x60>)
 80128aa:	f000 fb9d 	bl	8012fe8 <iprintf>
 80128ae:	f06f 030f 	mvn.w	r3, #15
 80128b2:	e015      	b.n	80128e0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d109      	bne.n	80128ce <udp_send+0x3e>
 80128ba:	4b0b      	ldr	r3, [pc, #44]	; (80128e8 <udp_send+0x58>)
 80128bc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80128c0:	490c      	ldr	r1, [pc, #48]	; (80128f4 <udp_send+0x64>)
 80128c2:	480b      	ldr	r0, [pc, #44]	; (80128f0 <udp_send+0x60>)
 80128c4:	f000 fb90 	bl	8012fe8 <iprintf>
 80128c8:	f06f 030f 	mvn.w	r3, #15
 80128cc:	e008      	b.n	80128e0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	1d1a      	adds	r2, r3, #4
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	8a9b      	ldrh	r3, [r3, #20]
 80128d6:	6839      	ldr	r1, [r7, #0]
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f000 f80d 	bl	80128f8 <udp_sendto>
 80128de:	4603      	mov	r3, r0
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3708      	adds	r7, #8
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}
 80128e8:	080170cc 	.word	0x080170cc
 80128ec:	08017214 	.word	0x08017214
 80128f0:	08017174 	.word	0x08017174
 80128f4:	0801722c 	.word	0x0801722c

080128f8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b088      	sub	sp, #32
 80128fc:	af02      	add	r7, sp, #8
 80128fe:	60f8      	str	r0, [r7, #12]
 8012900:	60b9      	str	r1, [r7, #8]
 8012902:	607a      	str	r2, [r7, #4]
 8012904:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d109      	bne.n	8012920 <udp_sendto+0x28>
 801290c:	4b23      	ldr	r3, [pc, #140]	; (801299c <udp_sendto+0xa4>)
 801290e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012912:	4923      	ldr	r1, [pc, #140]	; (80129a0 <udp_sendto+0xa8>)
 8012914:	4823      	ldr	r0, [pc, #140]	; (80129a4 <udp_sendto+0xac>)
 8012916:	f000 fb67 	bl	8012fe8 <iprintf>
 801291a:	f06f 030f 	mvn.w	r3, #15
 801291e:	e038      	b.n	8012992 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d109      	bne.n	801293a <udp_sendto+0x42>
 8012926:	4b1d      	ldr	r3, [pc, #116]	; (801299c <udp_sendto+0xa4>)
 8012928:	f240 2219 	movw	r2, #537	; 0x219
 801292c:	491e      	ldr	r1, [pc, #120]	; (80129a8 <udp_sendto+0xb0>)
 801292e:	481d      	ldr	r0, [pc, #116]	; (80129a4 <udp_sendto+0xac>)
 8012930:	f000 fb5a 	bl	8012fe8 <iprintf>
 8012934:	f06f 030f 	mvn.w	r3, #15
 8012938:	e02b      	b.n	8012992 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d109      	bne.n	8012954 <udp_sendto+0x5c>
 8012940:	4b16      	ldr	r3, [pc, #88]	; (801299c <udp_sendto+0xa4>)
 8012942:	f240 221a 	movw	r2, #538	; 0x21a
 8012946:	4919      	ldr	r1, [pc, #100]	; (80129ac <udp_sendto+0xb4>)
 8012948:	4816      	ldr	r0, [pc, #88]	; (80129a4 <udp_sendto+0xac>)
 801294a:	f000 fb4d 	bl	8012fe8 <iprintf>
 801294e:	f06f 030f 	mvn.w	r3, #15
 8012952:	e01e      	b.n	8012992 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	7a1b      	ldrb	r3, [r3, #8]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d006      	beq.n	801296a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	7a1b      	ldrb	r3, [r3, #8]
 8012960:	4618      	mov	r0, r3
 8012962:	f7f9 f97b 	bl	800bc5c <netif_get_by_index>
 8012966:	6178      	str	r0, [r7, #20]
 8012968:	e003      	b.n	8012972 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f7f7 f836 	bl	80099dc <ip4_route>
 8012970:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d102      	bne.n	801297e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8012978:	f06f 0303 	mvn.w	r3, #3
 801297c:	e009      	b.n	8012992 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801297e:	887a      	ldrh	r2, [r7, #2]
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	9300      	str	r3, [sp, #0]
 8012984:	4613      	mov	r3, r2
 8012986:	687a      	ldr	r2, [r7, #4]
 8012988:	68b9      	ldr	r1, [r7, #8]
 801298a:	68f8      	ldr	r0, [r7, #12]
 801298c:	f000 f810 	bl	80129b0 <udp_sendto_if>
 8012990:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012992:	4618      	mov	r0, r3
 8012994:	3718      	adds	r7, #24
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}
 801299a:	bf00      	nop
 801299c:	080170cc 	.word	0x080170cc
 80129a0:	08017244 	.word	0x08017244
 80129a4:	08017174 	.word	0x08017174
 80129a8:	0801725c 	.word	0x0801725c
 80129ac:	08017278 	.word	0x08017278

080129b0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b088      	sub	sp, #32
 80129b4:	af02      	add	r7, sp, #8
 80129b6:	60f8      	str	r0, [r7, #12]
 80129b8:	60b9      	str	r1, [r7, #8]
 80129ba:	607a      	str	r2, [r7, #4]
 80129bc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d109      	bne.n	80129d8 <udp_sendto_if+0x28>
 80129c4:	4b2e      	ldr	r3, [pc, #184]	; (8012a80 <udp_sendto_if+0xd0>)
 80129c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80129ca:	492e      	ldr	r1, [pc, #184]	; (8012a84 <udp_sendto_if+0xd4>)
 80129cc:	482e      	ldr	r0, [pc, #184]	; (8012a88 <udp_sendto_if+0xd8>)
 80129ce:	f000 fb0b 	bl	8012fe8 <iprintf>
 80129d2:	f06f 030f 	mvn.w	r3, #15
 80129d6:	e04f      	b.n	8012a78 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d109      	bne.n	80129f2 <udp_sendto_if+0x42>
 80129de:	4b28      	ldr	r3, [pc, #160]	; (8012a80 <udp_sendto_if+0xd0>)
 80129e0:	f240 2281 	movw	r2, #641	; 0x281
 80129e4:	4929      	ldr	r1, [pc, #164]	; (8012a8c <udp_sendto_if+0xdc>)
 80129e6:	4828      	ldr	r0, [pc, #160]	; (8012a88 <udp_sendto_if+0xd8>)
 80129e8:	f000 fafe 	bl	8012fe8 <iprintf>
 80129ec:	f06f 030f 	mvn.w	r3, #15
 80129f0:	e042      	b.n	8012a78 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d109      	bne.n	8012a0c <udp_sendto_if+0x5c>
 80129f8:	4b21      	ldr	r3, [pc, #132]	; (8012a80 <udp_sendto_if+0xd0>)
 80129fa:	f240 2282 	movw	r2, #642	; 0x282
 80129fe:	4924      	ldr	r1, [pc, #144]	; (8012a90 <udp_sendto_if+0xe0>)
 8012a00:	4821      	ldr	r0, [pc, #132]	; (8012a88 <udp_sendto_if+0xd8>)
 8012a02:	f000 faf1 	bl	8012fe8 <iprintf>
 8012a06:	f06f 030f 	mvn.w	r3, #15
 8012a0a:	e035      	b.n	8012a78 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012a0c:	6a3b      	ldr	r3, [r7, #32]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d109      	bne.n	8012a26 <udp_sendto_if+0x76>
 8012a12:	4b1b      	ldr	r3, [pc, #108]	; (8012a80 <udp_sendto_if+0xd0>)
 8012a14:	f240 2283 	movw	r2, #643	; 0x283
 8012a18:	491e      	ldr	r1, [pc, #120]	; (8012a94 <udp_sendto_if+0xe4>)
 8012a1a:	481b      	ldr	r0, [pc, #108]	; (8012a88 <udp_sendto_if+0xd8>)
 8012a1c:	f000 fae4 	bl	8012fe8 <iprintf>
 8012a20:	f06f 030f 	mvn.w	r3, #15
 8012a24:	e028      	b.n	8012a78 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d009      	beq.n	8012a40 <udp_sendto_if+0x90>
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d005      	beq.n	8012a40 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012a3c:	2be0      	cmp	r3, #224	; 0xe0
 8012a3e:	d103      	bne.n	8012a48 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012a40:	6a3b      	ldr	r3, [r7, #32]
 8012a42:	3304      	adds	r3, #4
 8012a44:	617b      	str	r3, [r7, #20]
 8012a46:	e00b      	b.n	8012a60 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	681a      	ldr	r2, [r3, #0]
 8012a4c:	6a3b      	ldr	r3, [r7, #32]
 8012a4e:	3304      	adds	r3, #4
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d002      	beq.n	8012a5c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012a56:	f06f 0303 	mvn.w	r3, #3
 8012a5a:	e00d      	b.n	8012a78 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012a60:	887a      	ldrh	r2, [r7, #2]
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	9301      	str	r3, [sp, #4]
 8012a66:	6a3b      	ldr	r3, [r7, #32]
 8012a68:	9300      	str	r3, [sp, #0]
 8012a6a:	4613      	mov	r3, r2
 8012a6c:	687a      	ldr	r2, [r7, #4]
 8012a6e:	68b9      	ldr	r1, [r7, #8]
 8012a70:	68f8      	ldr	r0, [r7, #12]
 8012a72:	f000 f811 	bl	8012a98 <udp_sendto_if_src>
 8012a76:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3718      	adds	r7, #24
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}
 8012a80:	080170cc 	.word	0x080170cc
 8012a84:	08017294 	.word	0x08017294
 8012a88:	08017174 	.word	0x08017174
 8012a8c:	080172b0 	.word	0x080172b0
 8012a90:	080172cc 	.word	0x080172cc
 8012a94:	080172ec 	.word	0x080172ec

08012a98 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b08c      	sub	sp, #48	; 0x30
 8012a9c:	af04      	add	r7, sp, #16
 8012a9e:	60f8      	str	r0, [r7, #12]
 8012aa0:	60b9      	str	r1, [r7, #8]
 8012aa2:	607a      	str	r2, [r7, #4]
 8012aa4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d109      	bne.n	8012ac0 <udp_sendto_if_src+0x28>
 8012aac:	4b65      	ldr	r3, [pc, #404]	; (8012c44 <udp_sendto_if_src+0x1ac>)
 8012aae:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012ab2:	4965      	ldr	r1, [pc, #404]	; (8012c48 <udp_sendto_if_src+0x1b0>)
 8012ab4:	4865      	ldr	r0, [pc, #404]	; (8012c4c <udp_sendto_if_src+0x1b4>)
 8012ab6:	f000 fa97 	bl	8012fe8 <iprintf>
 8012aba:	f06f 030f 	mvn.w	r3, #15
 8012abe:	e0bc      	b.n	8012c3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d109      	bne.n	8012ada <udp_sendto_if_src+0x42>
 8012ac6:	4b5f      	ldr	r3, [pc, #380]	; (8012c44 <udp_sendto_if_src+0x1ac>)
 8012ac8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012acc:	4960      	ldr	r1, [pc, #384]	; (8012c50 <udp_sendto_if_src+0x1b8>)
 8012ace:	485f      	ldr	r0, [pc, #380]	; (8012c4c <udp_sendto_if_src+0x1b4>)
 8012ad0:	f000 fa8a 	bl	8012fe8 <iprintf>
 8012ad4:	f06f 030f 	mvn.w	r3, #15
 8012ad8:	e0af      	b.n	8012c3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d109      	bne.n	8012af4 <udp_sendto_if_src+0x5c>
 8012ae0:	4b58      	ldr	r3, [pc, #352]	; (8012c44 <udp_sendto_if_src+0x1ac>)
 8012ae2:	f240 22d3 	movw	r2, #723	; 0x2d3
 8012ae6:	495b      	ldr	r1, [pc, #364]	; (8012c54 <udp_sendto_if_src+0x1bc>)
 8012ae8:	4858      	ldr	r0, [pc, #352]	; (8012c4c <udp_sendto_if_src+0x1b4>)
 8012aea:	f000 fa7d 	bl	8012fe8 <iprintf>
 8012aee:	f06f 030f 	mvn.w	r3, #15
 8012af2:	e0a2      	b.n	8012c3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d109      	bne.n	8012b0e <udp_sendto_if_src+0x76>
 8012afa:	4b52      	ldr	r3, [pc, #328]	; (8012c44 <udp_sendto_if_src+0x1ac>)
 8012afc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8012b00:	4955      	ldr	r1, [pc, #340]	; (8012c58 <udp_sendto_if_src+0x1c0>)
 8012b02:	4852      	ldr	r0, [pc, #328]	; (8012c4c <udp_sendto_if_src+0x1b4>)
 8012b04:	f000 fa70 	bl	8012fe8 <iprintf>
 8012b08:	f06f 030f 	mvn.w	r3, #15
 8012b0c:	e095      	b.n	8012c3a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8012b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d109      	bne.n	8012b28 <udp_sendto_if_src+0x90>
 8012b14:	4b4b      	ldr	r3, [pc, #300]	; (8012c44 <udp_sendto_if_src+0x1ac>)
 8012b16:	f240 22d5 	movw	r2, #725	; 0x2d5
 8012b1a:	4950      	ldr	r1, [pc, #320]	; (8012c5c <udp_sendto_if_src+0x1c4>)
 8012b1c:	484b      	ldr	r0, [pc, #300]	; (8012c4c <udp_sendto_if_src+0x1b4>)
 8012b1e:	f000 fa63 	bl	8012fe8 <iprintf>
 8012b22:	f06f 030f 	mvn.w	r3, #15
 8012b26:	e088      	b.n	8012c3a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	8a5b      	ldrh	r3, [r3, #18]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d10f      	bne.n	8012b50 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012b30:	68f9      	ldr	r1, [r7, #12]
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	8a5b      	ldrh	r3, [r3, #18]
 8012b36:	461a      	mov	r2, r3
 8012b38:	68f8      	ldr	r0, [r7, #12]
 8012b3a:	f000 f893 	bl	8012c64 <udp_bind>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012b42:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d002      	beq.n	8012b50 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012b4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012b4e:	e074      	b.n	8012c3a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	891b      	ldrh	r3, [r3, #8]
 8012b54:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8012b58:	4293      	cmp	r3, r2
 8012b5a:	d902      	bls.n	8012b62 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8012b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8012b60:	e06b      	b.n	8012c3a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8012b62:	2108      	movs	r1, #8
 8012b64:	68b8      	ldr	r0, [r7, #8]
 8012b66:	f7f9 fb71 	bl	800c24c <pbuf_add_header>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d015      	beq.n	8012b9c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012b70:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012b74:	2108      	movs	r1, #8
 8012b76:	2022      	movs	r0, #34	; 0x22
 8012b78:	f7f9 f91a 	bl	800bdb0 <pbuf_alloc>
 8012b7c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012b7e:	69fb      	ldr	r3, [r7, #28]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d102      	bne.n	8012b8a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012b84:	f04f 33ff 	mov.w	r3, #4294967295
 8012b88:	e057      	b.n	8012c3a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	891b      	ldrh	r3, [r3, #8]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d006      	beq.n	8012ba0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012b92:	68b9      	ldr	r1, [r7, #8]
 8012b94:	69f8      	ldr	r0, [r7, #28]
 8012b96:	f7f9 fd13 	bl	800c5c0 <pbuf_chain>
 8012b9a:	e001      	b.n	8012ba0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012ba0:	69fb      	ldr	r3, [r7, #28]
 8012ba2:	895b      	ldrh	r3, [r3, #10]
 8012ba4:	2b07      	cmp	r3, #7
 8012ba6:	d806      	bhi.n	8012bb6 <udp_sendto_if_src+0x11e>
 8012ba8:	4b26      	ldr	r3, [pc, #152]	; (8012c44 <udp_sendto_if_src+0x1ac>)
 8012baa:	f240 320d 	movw	r2, #781	; 0x30d
 8012bae:	492c      	ldr	r1, [pc, #176]	; (8012c60 <udp_sendto_if_src+0x1c8>)
 8012bb0:	4826      	ldr	r0, [pc, #152]	; (8012c4c <udp_sendto_if_src+0x1b4>)
 8012bb2:	f000 fa19 	bl	8012fe8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012bb6:	69fb      	ldr	r3, [r7, #28]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	8a5b      	ldrh	r3, [r3, #18]
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7f5 fc33 	bl	800842c <lwip_htons>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	461a      	mov	r2, r3
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012bce:	887b      	ldrh	r3, [r7, #2]
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7f5 fc2b 	bl	800842c <lwip_htons>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	461a      	mov	r2, r3
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012bde:	697b      	ldr	r3, [r7, #20]
 8012be0:	2200      	movs	r2, #0
 8012be2:	719a      	strb	r2, [r3, #6]
 8012be4:	2200      	movs	r2, #0
 8012be6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012be8:	69fb      	ldr	r3, [r7, #28]
 8012bea:	891b      	ldrh	r3, [r3, #8]
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7f5 fc1d 	bl	800842c <lwip_htons>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	461a      	mov	r2, r3
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8012bfa:	2311      	movs	r3, #17
 8012bfc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	7adb      	ldrb	r3, [r3, #11]
 8012c02:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	7a9b      	ldrb	r3, [r3, #10]
 8012c08:	7cb9      	ldrb	r1, [r7, #18]
 8012c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c0c:	9202      	str	r2, [sp, #8]
 8012c0e:	7cfa      	ldrb	r2, [r7, #19]
 8012c10:	9201      	str	r2, [sp, #4]
 8012c12:	9300      	str	r3, [sp, #0]
 8012c14:	460b      	mov	r3, r1
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012c1a:	69f8      	ldr	r0, [r7, #28]
 8012c1c:	f7f7 f8c6 	bl	8009dac <ip4_output_if_src>
 8012c20:	4603      	mov	r3, r0
 8012c22:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012c24:	69fa      	ldr	r2, [r7, #28]
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d004      	beq.n	8012c36 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8012c2c:	69f8      	ldr	r0, [r7, #28]
 8012c2e:	f7f9 fba3 	bl	800c378 <pbuf_free>
    q = NULL;
 8012c32:	2300      	movs	r3, #0
 8012c34:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012c36:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3720      	adds	r7, #32
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}
 8012c42:	bf00      	nop
 8012c44:	080170cc 	.word	0x080170cc
 8012c48:	0801730c 	.word	0x0801730c
 8012c4c:	08017174 	.word	0x08017174
 8012c50:	0801732c 	.word	0x0801732c
 8012c54:	0801734c 	.word	0x0801734c
 8012c58:	08017370 	.word	0x08017370
 8012c5c:	08017394 	.word	0x08017394
 8012c60:	080173b8 	.word	0x080173b8

08012c64 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b086      	sub	sp, #24
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	60f8      	str	r0, [r7, #12]
 8012c6c:	60b9      	str	r1, [r7, #8]
 8012c6e:	4613      	mov	r3, r2
 8012c70:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d101      	bne.n	8012c7c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012c78:	4b39      	ldr	r3, [pc, #228]	; (8012d60 <udp_bind+0xfc>)
 8012c7a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d109      	bne.n	8012c96 <udp_bind+0x32>
 8012c82:	4b38      	ldr	r3, [pc, #224]	; (8012d64 <udp_bind+0x100>)
 8012c84:	f240 32b7 	movw	r2, #951	; 0x3b7
 8012c88:	4937      	ldr	r1, [pc, #220]	; (8012d68 <udp_bind+0x104>)
 8012c8a:	4838      	ldr	r0, [pc, #224]	; (8012d6c <udp_bind+0x108>)
 8012c8c:	f000 f9ac 	bl	8012fe8 <iprintf>
 8012c90:	f06f 030f 	mvn.w	r3, #15
 8012c94:	e060      	b.n	8012d58 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012c96:	2300      	movs	r3, #0
 8012c98:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012c9a:	4b35      	ldr	r3, [pc, #212]	; (8012d70 <udp_bind+0x10c>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	617b      	str	r3, [r7, #20]
 8012ca0:	e009      	b.n	8012cb6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012ca2:	68fa      	ldr	r2, [r7, #12]
 8012ca4:	697b      	ldr	r3, [r7, #20]
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d102      	bne.n	8012cb0 <udp_bind+0x4c>
      rebind = 1;
 8012caa:	2301      	movs	r3, #1
 8012cac:	74fb      	strb	r3, [r7, #19]
      break;
 8012cae:	e005      	b.n	8012cbc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	617b      	str	r3, [r7, #20]
 8012cb6:	697b      	ldr	r3, [r7, #20]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d1f2      	bne.n	8012ca2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012cbc:	88fb      	ldrh	r3, [r7, #6]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d109      	bne.n	8012cd6 <udp_bind+0x72>
    port = udp_new_port();
 8012cc2:	f7ff fc35 	bl	8012530 <udp_new_port>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012cca:	88fb      	ldrh	r3, [r7, #6]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d12c      	bne.n	8012d2a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012cd0:	f06f 0307 	mvn.w	r3, #7
 8012cd4:	e040      	b.n	8012d58 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012cd6:	4b26      	ldr	r3, [pc, #152]	; (8012d70 <udp_bind+0x10c>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	617b      	str	r3, [r7, #20]
 8012cdc:	e022      	b.n	8012d24 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012cde:	68fa      	ldr	r2, [r7, #12]
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	d01b      	beq.n	8012d1e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	8a5b      	ldrh	r3, [r3, #18]
 8012cea:	88fa      	ldrh	r2, [r7, #6]
 8012cec:	429a      	cmp	r2, r3
 8012cee:	d116      	bne.n	8012d1e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	681a      	ldr	r2, [r3, #0]
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d00d      	beq.n	8012d18 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d00a      	beq.n	8012d18 <udp_bind+0xb4>
 8012d02:	68bb      	ldr	r3, [r7, #8]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d006      	beq.n	8012d18 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012d0a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d003      	beq.n	8012d18 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012d10:	697b      	ldr	r3, [r7, #20]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d102      	bne.n	8012d1e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012d18:	f06f 0307 	mvn.w	r3, #7
 8012d1c:	e01c      	b.n	8012d58 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	68db      	ldr	r3, [r3, #12]
 8012d22:	617b      	str	r3, [r7, #20]
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d1d9      	bne.n	8012cde <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d002      	beq.n	8012d36 <udp_bind+0xd2>
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	e000      	b.n	8012d38 <udp_bind+0xd4>
 8012d36:	2300      	movs	r3, #0
 8012d38:	68fa      	ldr	r2, [r7, #12]
 8012d3a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	88fa      	ldrh	r2, [r7, #6]
 8012d40:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012d42:	7cfb      	ldrb	r3, [r7, #19]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d106      	bne.n	8012d56 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012d48:	4b09      	ldr	r3, [pc, #36]	; (8012d70 <udp_bind+0x10c>)
 8012d4a:	681a      	ldr	r2, [r3, #0]
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012d50:	4a07      	ldr	r2, [pc, #28]	; (8012d70 <udp_bind+0x10c>)
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012d56:	2300      	movs	r3, #0
}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3718      	adds	r7, #24
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	080174b0 	.word	0x080174b0
 8012d64:	080170cc 	.word	0x080170cc
 8012d68:	080173e8 	.word	0x080173e8
 8012d6c:	08017174 	.word	0x08017174
 8012d70:	240074fc 	.word	0x240074fc

08012d74 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b086      	sub	sp, #24
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	60f8      	str	r0, [r7, #12]
 8012d7c:	60b9      	str	r1, [r7, #8]
 8012d7e:	4613      	mov	r3, r2
 8012d80:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d109      	bne.n	8012d9c <udp_connect+0x28>
 8012d88:	4b2c      	ldr	r3, [pc, #176]	; (8012e3c <udp_connect+0xc8>)
 8012d8a:	f240 4235 	movw	r2, #1077	; 0x435
 8012d8e:	492c      	ldr	r1, [pc, #176]	; (8012e40 <udp_connect+0xcc>)
 8012d90:	482c      	ldr	r0, [pc, #176]	; (8012e44 <udp_connect+0xd0>)
 8012d92:	f000 f929 	bl	8012fe8 <iprintf>
 8012d96:	f06f 030f 	mvn.w	r3, #15
 8012d9a:	e04b      	b.n	8012e34 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d109      	bne.n	8012db6 <udp_connect+0x42>
 8012da2:	4b26      	ldr	r3, [pc, #152]	; (8012e3c <udp_connect+0xc8>)
 8012da4:	f240 4236 	movw	r2, #1078	; 0x436
 8012da8:	4927      	ldr	r1, [pc, #156]	; (8012e48 <udp_connect+0xd4>)
 8012daa:	4826      	ldr	r0, [pc, #152]	; (8012e44 <udp_connect+0xd0>)
 8012dac:	f000 f91c 	bl	8012fe8 <iprintf>
 8012db0:	f06f 030f 	mvn.w	r3, #15
 8012db4:	e03e      	b.n	8012e34 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	8a5b      	ldrh	r3, [r3, #18]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d10f      	bne.n	8012dde <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012dbe:	68f9      	ldr	r1, [r7, #12]
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	8a5b      	ldrh	r3, [r3, #18]
 8012dc4:	461a      	mov	r2, r3
 8012dc6:	68f8      	ldr	r0, [r7, #12]
 8012dc8:	f7ff ff4c 	bl	8012c64 <udp_bind>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012dd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d002      	beq.n	8012dde <udp_connect+0x6a>
      return err;
 8012dd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ddc:	e02a      	b.n	8012e34 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d002      	beq.n	8012dea <udp_connect+0x76>
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	e000      	b.n	8012dec <udp_connect+0x78>
 8012dea:	2300      	movs	r3, #0
 8012dec:	68fa      	ldr	r2, [r7, #12]
 8012dee:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	88fa      	ldrh	r2, [r7, #6]
 8012df4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	7c1b      	ldrb	r3, [r3, #16]
 8012dfa:	f043 0304 	orr.w	r3, r3, #4
 8012dfe:	b2da      	uxtb	r2, r3
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012e04:	4b11      	ldr	r3, [pc, #68]	; (8012e4c <udp_connect+0xd8>)
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	617b      	str	r3, [r7, #20]
 8012e0a:	e008      	b.n	8012e1e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8012e0c:	68fa      	ldr	r2, [r7, #12]
 8012e0e:	697b      	ldr	r3, [r7, #20]
 8012e10:	429a      	cmp	r2, r3
 8012e12:	d101      	bne.n	8012e18 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012e14:	2300      	movs	r3, #0
 8012e16:	e00d      	b.n	8012e34 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012e18:	697b      	ldr	r3, [r7, #20]
 8012e1a:	68db      	ldr	r3, [r3, #12]
 8012e1c:	617b      	str	r3, [r7, #20]
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d1f3      	bne.n	8012e0c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012e24:	4b09      	ldr	r3, [pc, #36]	; (8012e4c <udp_connect+0xd8>)
 8012e26:	681a      	ldr	r2, [r3, #0]
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012e2c:	4a07      	ldr	r2, [pc, #28]	; (8012e4c <udp_connect+0xd8>)
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012e32:	2300      	movs	r3, #0
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3718      	adds	r7, #24
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	080170cc 	.word	0x080170cc
 8012e40:	08017400 	.word	0x08017400
 8012e44:	08017174 	.word	0x08017174
 8012e48:	0801741c 	.word	0x0801741c
 8012e4c:	240074fc 	.word	0x240074fc

08012e50 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b084      	sub	sp, #16
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	60f8      	str	r0, [r7, #12]
 8012e58:	60b9      	str	r1, [r7, #8]
 8012e5a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d107      	bne.n	8012e72 <udp_recv+0x22>
 8012e62:	4b08      	ldr	r3, [pc, #32]	; (8012e84 <udp_recv+0x34>)
 8012e64:	f240 428a 	movw	r2, #1162	; 0x48a
 8012e68:	4907      	ldr	r1, [pc, #28]	; (8012e88 <udp_recv+0x38>)
 8012e6a:	4808      	ldr	r0, [pc, #32]	; (8012e8c <udp_recv+0x3c>)
 8012e6c:	f000 f8bc 	bl	8012fe8 <iprintf>
 8012e70:	e005      	b.n	8012e7e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	68ba      	ldr	r2, [r7, #8]
 8012e76:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	687a      	ldr	r2, [r7, #4]
 8012e7c:	61da      	str	r2, [r3, #28]
}
 8012e7e:	3710      	adds	r7, #16
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}
 8012e84:	080170cc 	.word	0x080170cc
 8012e88:	08017454 	.word	0x08017454
 8012e8c:	08017174 	.word	0x08017174

08012e90 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b082      	sub	sp, #8
 8012e94:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012e96:	2000      	movs	r0, #0
 8012e98:	f7f8 fb54 	bl	800b544 <memp_malloc>
 8012e9c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d007      	beq.n	8012eb4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012ea4:	2220      	movs	r2, #32
 8012ea6:	2100      	movs	r1, #0
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f000 f895 	bl	8012fd8 <memset>
    pcb->ttl = UDP_TTL;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	22ff      	movs	r2, #255	; 0xff
 8012eb2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012eb4:	687b      	ldr	r3, [r7, #4]
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3708      	adds	r7, #8
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}
	...

08012ec0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012ec0:	b480      	push	{r7}
 8012ec2:	b085      	sub	sp, #20
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d01e      	beq.n	8012f0e <udp_netif_ip_addr_changed+0x4e>
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d01a      	beq.n	8012f0e <udp_netif_ip_addr_changed+0x4e>
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d017      	beq.n	8012f0e <udp_netif_ip_addr_changed+0x4e>
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d013      	beq.n	8012f0e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012ee6:	4b0d      	ldr	r3, [pc, #52]	; (8012f1c <udp_netif_ip_addr_changed+0x5c>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	60fb      	str	r3, [r7, #12]
 8012eec:	e00c      	b.n	8012f08 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	681a      	ldr	r2, [r3, #0]
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d103      	bne.n	8012f02 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	681a      	ldr	r2, [r3, #0]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	68db      	ldr	r3, [r3, #12]
 8012f06:	60fb      	str	r3, [r7, #12]
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d1ef      	bne.n	8012eee <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012f0e:	bf00      	nop
 8012f10:	3714      	adds	r7, #20
 8012f12:	46bd      	mov	sp, r7
 8012f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f18:	4770      	bx	lr
 8012f1a:	bf00      	nop
 8012f1c:	240074fc 	.word	0x240074fc

08012f20 <__libc_init_array>:
 8012f20:	b570      	push	{r4, r5, r6, lr}
 8012f22:	4d0d      	ldr	r5, [pc, #52]	; (8012f58 <__libc_init_array+0x38>)
 8012f24:	4c0d      	ldr	r4, [pc, #52]	; (8012f5c <__libc_init_array+0x3c>)
 8012f26:	1b64      	subs	r4, r4, r5
 8012f28:	10a4      	asrs	r4, r4, #2
 8012f2a:	2600      	movs	r6, #0
 8012f2c:	42a6      	cmp	r6, r4
 8012f2e:	d109      	bne.n	8012f44 <__libc_init_array+0x24>
 8012f30:	4d0b      	ldr	r5, [pc, #44]	; (8012f60 <__libc_init_array+0x40>)
 8012f32:	4c0c      	ldr	r4, [pc, #48]	; (8012f64 <__libc_init_array+0x44>)
 8012f34:	f001 fa70 	bl	8014418 <_init>
 8012f38:	1b64      	subs	r4, r4, r5
 8012f3a:	10a4      	asrs	r4, r4, #2
 8012f3c:	2600      	movs	r6, #0
 8012f3e:	42a6      	cmp	r6, r4
 8012f40:	d105      	bne.n	8012f4e <__libc_init_array+0x2e>
 8012f42:	bd70      	pop	{r4, r5, r6, pc}
 8012f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f48:	4798      	blx	r3
 8012f4a:	3601      	adds	r6, #1
 8012f4c:	e7ee      	b.n	8012f2c <__libc_init_array+0xc>
 8012f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f52:	4798      	blx	r3
 8012f54:	3601      	adds	r6, #1
 8012f56:	e7f2      	b.n	8012f3e <__libc_init_array+0x1e>
 8012f58:	08017714 	.word	0x08017714
 8012f5c:	08017714 	.word	0x08017714
 8012f60:	08017714 	.word	0x08017714
 8012f64:	08017718 	.word	0x08017718

08012f68 <memcmp>:
 8012f68:	b510      	push	{r4, lr}
 8012f6a:	3901      	subs	r1, #1
 8012f6c:	4402      	add	r2, r0
 8012f6e:	4290      	cmp	r0, r2
 8012f70:	d101      	bne.n	8012f76 <memcmp+0xe>
 8012f72:	2000      	movs	r0, #0
 8012f74:	e005      	b.n	8012f82 <memcmp+0x1a>
 8012f76:	7803      	ldrb	r3, [r0, #0]
 8012f78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012f7c:	42a3      	cmp	r3, r4
 8012f7e:	d001      	beq.n	8012f84 <memcmp+0x1c>
 8012f80:	1b18      	subs	r0, r3, r4
 8012f82:	bd10      	pop	{r4, pc}
 8012f84:	3001      	adds	r0, #1
 8012f86:	e7f2      	b.n	8012f6e <memcmp+0x6>

08012f88 <memcpy>:
 8012f88:	440a      	add	r2, r1
 8012f8a:	4291      	cmp	r1, r2
 8012f8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012f90:	d100      	bne.n	8012f94 <memcpy+0xc>
 8012f92:	4770      	bx	lr
 8012f94:	b510      	push	{r4, lr}
 8012f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f9e:	4291      	cmp	r1, r2
 8012fa0:	d1f9      	bne.n	8012f96 <memcpy+0xe>
 8012fa2:	bd10      	pop	{r4, pc}

08012fa4 <memmove>:
 8012fa4:	4288      	cmp	r0, r1
 8012fa6:	b510      	push	{r4, lr}
 8012fa8:	eb01 0402 	add.w	r4, r1, r2
 8012fac:	d902      	bls.n	8012fb4 <memmove+0x10>
 8012fae:	4284      	cmp	r4, r0
 8012fb0:	4623      	mov	r3, r4
 8012fb2:	d807      	bhi.n	8012fc4 <memmove+0x20>
 8012fb4:	1e43      	subs	r3, r0, #1
 8012fb6:	42a1      	cmp	r1, r4
 8012fb8:	d008      	beq.n	8012fcc <memmove+0x28>
 8012fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012fbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012fc2:	e7f8      	b.n	8012fb6 <memmove+0x12>
 8012fc4:	4402      	add	r2, r0
 8012fc6:	4601      	mov	r1, r0
 8012fc8:	428a      	cmp	r2, r1
 8012fca:	d100      	bne.n	8012fce <memmove+0x2a>
 8012fcc:	bd10      	pop	{r4, pc}
 8012fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012fd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012fd6:	e7f7      	b.n	8012fc8 <memmove+0x24>

08012fd8 <memset>:
 8012fd8:	4402      	add	r2, r0
 8012fda:	4603      	mov	r3, r0
 8012fdc:	4293      	cmp	r3, r2
 8012fde:	d100      	bne.n	8012fe2 <memset+0xa>
 8012fe0:	4770      	bx	lr
 8012fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8012fe6:	e7f9      	b.n	8012fdc <memset+0x4>

08012fe8 <iprintf>:
 8012fe8:	b40f      	push	{r0, r1, r2, r3}
 8012fea:	4b0a      	ldr	r3, [pc, #40]	; (8013014 <iprintf+0x2c>)
 8012fec:	b513      	push	{r0, r1, r4, lr}
 8012fee:	681c      	ldr	r4, [r3, #0]
 8012ff0:	b124      	cbz	r4, 8012ffc <iprintf+0x14>
 8012ff2:	69a3      	ldr	r3, [r4, #24]
 8012ff4:	b913      	cbnz	r3, 8012ffc <iprintf+0x14>
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	f000 f8f6 	bl	80131e8 <__sinit>
 8012ffc:	ab05      	add	r3, sp, #20
 8012ffe:	9a04      	ldr	r2, [sp, #16]
 8013000:	68a1      	ldr	r1, [r4, #8]
 8013002:	9301      	str	r3, [sp, #4]
 8013004:	4620      	mov	r0, r4
 8013006:	f000 fc0f 	bl	8013828 <_vfiprintf_r>
 801300a:	b002      	add	sp, #8
 801300c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013010:	b004      	add	sp, #16
 8013012:	4770      	bx	lr
 8013014:	24000034 	.word	0x24000034

08013018 <rand>:
 8013018:	4b16      	ldr	r3, [pc, #88]	; (8013074 <rand+0x5c>)
 801301a:	b510      	push	{r4, lr}
 801301c:	681c      	ldr	r4, [r3, #0]
 801301e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013020:	b9b3      	cbnz	r3, 8013050 <rand+0x38>
 8013022:	2018      	movs	r0, #24
 8013024:	f000 f992 	bl	801334c <malloc>
 8013028:	63a0      	str	r0, [r4, #56]	; 0x38
 801302a:	b928      	cbnz	r0, 8013038 <rand+0x20>
 801302c:	4602      	mov	r2, r0
 801302e:	4b12      	ldr	r3, [pc, #72]	; (8013078 <rand+0x60>)
 8013030:	4812      	ldr	r0, [pc, #72]	; (801307c <rand+0x64>)
 8013032:	214e      	movs	r1, #78	; 0x4e
 8013034:	f000 f862 	bl	80130fc <__assert_func>
 8013038:	4a11      	ldr	r2, [pc, #68]	; (8013080 <rand+0x68>)
 801303a:	4b12      	ldr	r3, [pc, #72]	; (8013084 <rand+0x6c>)
 801303c:	e9c0 2300 	strd	r2, r3, [r0]
 8013040:	4b11      	ldr	r3, [pc, #68]	; (8013088 <rand+0x70>)
 8013042:	6083      	str	r3, [r0, #8]
 8013044:	230b      	movs	r3, #11
 8013046:	8183      	strh	r3, [r0, #12]
 8013048:	2201      	movs	r2, #1
 801304a:	2300      	movs	r3, #0
 801304c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013050:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013052:	4a0e      	ldr	r2, [pc, #56]	; (801308c <rand+0x74>)
 8013054:	6920      	ldr	r0, [r4, #16]
 8013056:	6963      	ldr	r3, [r4, #20]
 8013058:	490d      	ldr	r1, [pc, #52]	; (8013090 <rand+0x78>)
 801305a:	4342      	muls	r2, r0
 801305c:	fb01 2203 	mla	r2, r1, r3, r2
 8013060:	fba0 0101 	umull	r0, r1, r0, r1
 8013064:	1c43      	adds	r3, r0, #1
 8013066:	eb42 0001 	adc.w	r0, r2, r1
 801306a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801306e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013072:	bd10      	pop	{r4, pc}
 8013074:	24000034 	.word	0x24000034
 8013078:	080175d0 	.word	0x080175d0
 801307c:	080175e7 	.word	0x080175e7
 8013080:	abcd330e 	.word	0xabcd330e
 8013084:	e66d1234 	.word	0xe66d1234
 8013088:	0005deec 	.word	0x0005deec
 801308c:	5851f42d 	.word	0x5851f42d
 8013090:	4c957f2d 	.word	0x4c957f2d

08013094 <siprintf>:
 8013094:	b40e      	push	{r1, r2, r3}
 8013096:	b500      	push	{lr}
 8013098:	b09c      	sub	sp, #112	; 0x70
 801309a:	ab1d      	add	r3, sp, #116	; 0x74
 801309c:	9002      	str	r0, [sp, #8]
 801309e:	9006      	str	r0, [sp, #24]
 80130a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80130a4:	4809      	ldr	r0, [pc, #36]	; (80130cc <siprintf+0x38>)
 80130a6:	9107      	str	r1, [sp, #28]
 80130a8:	9104      	str	r1, [sp, #16]
 80130aa:	4909      	ldr	r1, [pc, #36]	; (80130d0 <siprintf+0x3c>)
 80130ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80130b0:	9105      	str	r1, [sp, #20]
 80130b2:	6800      	ldr	r0, [r0, #0]
 80130b4:	9301      	str	r3, [sp, #4]
 80130b6:	a902      	add	r1, sp, #8
 80130b8:	f000 fa8c 	bl	80135d4 <_svfiprintf_r>
 80130bc:	9b02      	ldr	r3, [sp, #8]
 80130be:	2200      	movs	r2, #0
 80130c0:	701a      	strb	r2, [r3, #0]
 80130c2:	b01c      	add	sp, #112	; 0x70
 80130c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80130c8:	b003      	add	sp, #12
 80130ca:	4770      	bx	lr
 80130cc:	24000034 	.word	0x24000034
 80130d0:	ffff0208 	.word	0xffff0208

080130d4 <strncpy>:
 80130d4:	b510      	push	{r4, lr}
 80130d6:	3901      	subs	r1, #1
 80130d8:	4603      	mov	r3, r0
 80130da:	b132      	cbz	r2, 80130ea <strncpy+0x16>
 80130dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80130e0:	f803 4b01 	strb.w	r4, [r3], #1
 80130e4:	3a01      	subs	r2, #1
 80130e6:	2c00      	cmp	r4, #0
 80130e8:	d1f7      	bne.n	80130da <strncpy+0x6>
 80130ea:	441a      	add	r2, r3
 80130ec:	2100      	movs	r1, #0
 80130ee:	4293      	cmp	r3, r2
 80130f0:	d100      	bne.n	80130f4 <strncpy+0x20>
 80130f2:	bd10      	pop	{r4, pc}
 80130f4:	f803 1b01 	strb.w	r1, [r3], #1
 80130f8:	e7f9      	b.n	80130ee <strncpy+0x1a>
	...

080130fc <__assert_func>:
 80130fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80130fe:	4614      	mov	r4, r2
 8013100:	461a      	mov	r2, r3
 8013102:	4b09      	ldr	r3, [pc, #36]	; (8013128 <__assert_func+0x2c>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	4605      	mov	r5, r0
 8013108:	68d8      	ldr	r0, [r3, #12]
 801310a:	b14c      	cbz	r4, 8013120 <__assert_func+0x24>
 801310c:	4b07      	ldr	r3, [pc, #28]	; (801312c <__assert_func+0x30>)
 801310e:	9100      	str	r1, [sp, #0]
 8013110:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013114:	4906      	ldr	r1, [pc, #24]	; (8013130 <__assert_func+0x34>)
 8013116:	462b      	mov	r3, r5
 8013118:	f000 f8e4 	bl	80132e4 <fiprintf>
 801311c:	f000 ff6e 	bl	8013ffc <abort>
 8013120:	4b04      	ldr	r3, [pc, #16]	; (8013134 <__assert_func+0x38>)
 8013122:	461c      	mov	r4, r3
 8013124:	e7f3      	b.n	801310e <__assert_func+0x12>
 8013126:	bf00      	nop
 8013128:	24000034 	.word	0x24000034
 801312c:	08017642 	.word	0x08017642
 8013130:	0801764f 	.word	0x0801764f
 8013134:	0801767d 	.word	0x0801767d

08013138 <std>:
 8013138:	2300      	movs	r3, #0
 801313a:	b510      	push	{r4, lr}
 801313c:	4604      	mov	r4, r0
 801313e:	e9c0 3300 	strd	r3, r3, [r0]
 8013142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013146:	6083      	str	r3, [r0, #8]
 8013148:	8181      	strh	r1, [r0, #12]
 801314a:	6643      	str	r3, [r0, #100]	; 0x64
 801314c:	81c2      	strh	r2, [r0, #14]
 801314e:	6183      	str	r3, [r0, #24]
 8013150:	4619      	mov	r1, r3
 8013152:	2208      	movs	r2, #8
 8013154:	305c      	adds	r0, #92	; 0x5c
 8013156:	f7ff ff3f 	bl	8012fd8 <memset>
 801315a:	4b05      	ldr	r3, [pc, #20]	; (8013170 <std+0x38>)
 801315c:	6263      	str	r3, [r4, #36]	; 0x24
 801315e:	4b05      	ldr	r3, [pc, #20]	; (8013174 <std+0x3c>)
 8013160:	62a3      	str	r3, [r4, #40]	; 0x28
 8013162:	4b05      	ldr	r3, [pc, #20]	; (8013178 <std+0x40>)
 8013164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013166:	4b05      	ldr	r3, [pc, #20]	; (801317c <std+0x44>)
 8013168:	6224      	str	r4, [r4, #32]
 801316a:	6323      	str	r3, [r4, #48]	; 0x30
 801316c:	bd10      	pop	{r4, pc}
 801316e:	bf00      	nop
 8013170:	08013dd1 	.word	0x08013dd1
 8013174:	08013df3 	.word	0x08013df3
 8013178:	08013e2b 	.word	0x08013e2b
 801317c:	08013e4f 	.word	0x08013e4f

08013180 <_cleanup_r>:
 8013180:	4901      	ldr	r1, [pc, #4]	; (8013188 <_cleanup_r+0x8>)
 8013182:	f000 b8c1 	b.w	8013308 <_fwalk_reent>
 8013186:	bf00      	nop
 8013188:	08014139 	.word	0x08014139

0801318c <__sfmoreglue>:
 801318c:	b570      	push	{r4, r5, r6, lr}
 801318e:	2268      	movs	r2, #104	; 0x68
 8013190:	1e4d      	subs	r5, r1, #1
 8013192:	4355      	muls	r5, r2
 8013194:	460e      	mov	r6, r1
 8013196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801319a:	f000 f94b 	bl	8013434 <_malloc_r>
 801319e:	4604      	mov	r4, r0
 80131a0:	b140      	cbz	r0, 80131b4 <__sfmoreglue+0x28>
 80131a2:	2100      	movs	r1, #0
 80131a4:	e9c0 1600 	strd	r1, r6, [r0]
 80131a8:	300c      	adds	r0, #12
 80131aa:	60a0      	str	r0, [r4, #8]
 80131ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80131b0:	f7ff ff12 	bl	8012fd8 <memset>
 80131b4:	4620      	mov	r0, r4
 80131b6:	bd70      	pop	{r4, r5, r6, pc}

080131b8 <__sfp_lock_acquire>:
 80131b8:	4801      	ldr	r0, [pc, #4]	; (80131c0 <__sfp_lock_acquire+0x8>)
 80131ba:	f000 b8c5 	b.w	8013348 <__retarget_lock_acquire_recursive>
 80131be:	bf00      	nop
 80131c0:	24007501 	.word	0x24007501

080131c4 <__sfp_lock_release>:
 80131c4:	4801      	ldr	r0, [pc, #4]	; (80131cc <__sfp_lock_release+0x8>)
 80131c6:	f000 b8c0 	b.w	801334a <__retarget_lock_release_recursive>
 80131ca:	bf00      	nop
 80131cc:	24007501 	.word	0x24007501

080131d0 <__sinit_lock_acquire>:
 80131d0:	4801      	ldr	r0, [pc, #4]	; (80131d8 <__sinit_lock_acquire+0x8>)
 80131d2:	f000 b8b9 	b.w	8013348 <__retarget_lock_acquire_recursive>
 80131d6:	bf00      	nop
 80131d8:	24007502 	.word	0x24007502

080131dc <__sinit_lock_release>:
 80131dc:	4801      	ldr	r0, [pc, #4]	; (80131e4 <__sinit_lock_release+0x8>)
 80131de:	f000 b8b4 	b.w	801334a <__retarget_lock_release_recursive>
 80131e2:	bf00      	nop
 80131e4:	24007502 	.word	0x24007502

080131e8 <__sinit>:
 80131e8:	b510      	push	{r4, lr}
 80131ea:	4604      	mov	r4, r0
 80131ec:	f7ff fff0 	bl	80131d0 <__sinit_lock_acquire>
 80131f0:	69a3      	ldr	r3, [r4, #24]
 80131f2:	b11b      	cbz	r3, 80131fc <__sinit+0x14>
 80131f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131f8:	f7ff bff0 	b.w	80131dc <__sinit_lock_release>
 80131fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013200:	6523      	str	r3, [r4, #80]	; 0x50
 8013202:	4b13      	ldr	r3, [pc, #76]	; (8013250 <__sinit+0x68>)
 8013204:	4a13      	ldr	r2, [pc, #76]	; (8013254 <__sinit+0x6c>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	62a2      	str	r2, [r4, #40]	; 0x28
 801320a:	42a3      	cmp	r3, r4
 801320c:	bf04      	itt	eq
 801320e:	2301      	moveq	r3, #1
 8013210:	61a3      	streq	r3, [r4, #24]
 8013212:	4620      	mov	r0, r4
 8013214:	f000 f820 	bl	8013258 <__sfp>
 8013218:	6060      	str	r0, [r4, #4]
 801321a:	4620      	mov	r0, r4
 801321c:	f000 f81c 	bl	8013258 <__sfp>
 8013220:	60a0      	str	r0, [r4, #8]
 8013222:	4620      	mov	r0, r4
 8013224:	f000 f818 	bl	8013258 <__sfp>
 8013228:	2200      	movs	r2, #0
 801322a:	60e0      	str	r0, [r4, #12]
 801322c:	2104      	movs	r1, #4
 801322e:	6860      	ldr	r0, [r4, #4]
 8013230:	f7ff ff82 	bl	8013138 <std>
 8013234:	68a0      	ldr	r0, [r4, #8]
 8013236:	2201      	movs	r2, #1
 8013238:	2109      	movs	r1, #9
 801323a:	f7ff ff7d 	bl	8013138 <std>
 801323e:	68e0      	ldr	r0, [r4, #12]
 8013240:	2202      	movs	r2, #2
 8013242:	2112      	movs	r1, #18
 8013244:	f7ff ff78 	bl	8013138 <std>
 8013248:	2301      	movs	r3, #1
 801324a:	61a3      	str	r3, [r4, #24]
 801324c:	e7d2      	b.n	80131f4 <__sinit+0xc>
 801324e:	bf00      	nop
 8013250:	080175cc 	.word	0x080175cc
 8013254:	08013181 	.word	0x08013181

08013258 <__sfp>:
 8013258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801325a:	4607      	mov	r7, r0
 801325c:	f7ff ffac 	bl	80131b8 <__sfp_lock_acquire>
 8013260:	4b1e      	ldr	r3, [pc, #120]	; (80132dc <__sfp+0x84>)
 8013262:	681e      	ldr	r6, [r3, #0]
 8013264:	69b3      	ldr	r3, [r6, #24]
 8013266:	b913      	cbnz	r3, 801326e <__sfp+0x16>
 8013268:	4630      	mov	r0, r6
 801326a:	f7ff ffbd 	bl	80131e8 <__sinit>
 801326e:	3648      	adds	r6, #72	; 0x48
 8013270:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013274:	3b01      	subs	r3, #1
 8013276:	d503      	bpl.n	8013280 <__sfp+0x28>
 8013278:	6833      	ldr	r3, [r6, #0]
 801327a:	b30b      	cbz	r3, 80132c0 <__sfp+0x68>
 801327c:	6836      	ldr	r6, [r6, #0]
 801327e:	e7f7      	b.n	8013270 <__sfp+0x18>
 8013280:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013284:	b9d5      	cbnz	r5, 80132bc <__sfp+0x64>
 8013286:	4b16      	ldr	r3, [pc, #88]	; (80132e0 <__sfp+0x88>)
 8013288:	60e3      	str	r3, [r4, #12]
 801328a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801328e:	6665      	str	r5, [r4, #100]	; 0x64
 8013290:	f000 f859 	bl	8013346 <__retarget_lock_init_recursive>
 8013294:	f7ff ff96 	bl	80131c4 <__sfp_lock_release>
 8013298:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801329c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80132a0:	6025      	str	r5, [r4, #0]
 80132a2:	61a5      	str	r5, [r4, #24]
 80132a4:	2208      	movs	r2, #8
 80132a6:	4629      	mov	r1, r5
 80132a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80132ac:	f7ff fe94 	bl	8012fd8 <memset>
 80132b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80132b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80132b8:	4620      	mov	r0, r4
 80132ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132bc:	3468      	adds	r4, #104	; 0x68
 80132be:	e7d9      	b.n	8013274 <__sfp+0x1c>
 80132c0:	2104      	movs	r1, #4
 80132c2:	4638      	mov	r0, r7
 80132c4:	f7ff ff62 	bl	801318c <__sfmoreglue>
 80132c8:	4604      	mov	r4, r0
 80132ca:	6030      	str	r0, [r6, #0]
 80132cc:	2800      	cmp	r0, #0
 80132ce:	d1d5      	bne.n	801327c <__sfp+0x24>
 80132d0:	f7ff ff78 	bl	80131c4 <__sfp_lock_release>
 80132d4:	230c      	movs	r3, #12
 80132d6:	603b      	str	r3, [r7, #0]
 80132d8:	e7ee      	b.n	80132b8 <__sfp+0x60>
 80132da:	bf00      	nop
 80132dc:	080175cc 	.word	0x080175cc
 80132e0:	ffff0001 	.word	0xffff0001

080132e4 <fiprintf>:
 80132e4:	b40e      	push	{r1, r2, r3}
 80132e6:	b503      	push	{r0, r1, lr}
 80132e8:	4601      	mov	r1, r0
 80132ea:	ab03      	add	r3, sp, #12
 80132ec:	4805      	ldr	r0, [pc, #20]	; (8013304 <fiprintf+0x20>)
 80132ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80132f2:	6800      	ldr	r0, [r0, #0]
 80132f4:	9301      	str	r3, [sp, #4]
 80132f6:	f000 fa97 	bl	8013828 <_vfiprintf_r>
 80132fa:	b002      	add	sp, #8
 80132fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013300:	b003      	add	sp, #12
 8013302:	4770      	bx	lr
 8013304:	24000034 	.word	0x24000034

08013308 <_fwalk_reent>:
 8013308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801330c:	4606      	mov	r6, r0
 801330e:	4688      	mov	r8, r1
 8013310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013314:	2700      	movs	r7, #0
 8013316:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801331a:	f1b9 0901 	subs.w	r9, r9, #1
 801331e:	d505      	bpl.n	801332c <_fwalk_reent+0x24>
 8013320:	6824      	ldr	r4, [r4, #0]
 8013322:	2c00      	cmp	r4, #0
 8013324:	d1f7      	bne.n	8013316 <_fwalk_reent+0xe>
 8013326:	4638      	mov	r0, r7
 8013328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801332c:	89ab      	ldrh	r3, [r5, #12]
 801332e:	2b01      	cmp	r3, #1
 8013330:	d907      	bls.n	8013342 <_fwalk_reent+0x3a>
 8013332:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013336:	3301      	adds	r3, #1
 8013338:	d003      	beq.n	8013342 <_fwalk_reent+0x3a>
 801333a:	4629      	mov	r1, r5
 801333c:	4630      	mov	r0, r6
 801333e:	47c0      	blx	r8
 8013340:	4307      	orrs	r7, r0
 8013342:	3568      	adds	r5, #104	; 0x68
 8013344:	e7e9      	b.n	801331a <_fwalk_reent+0x12>

08013346 <__retarget_lock_init_recursive>:
 8013346:	4770      	bx	lr

08013348 <__retarget_lock_acquire_recursive>:
 8013348:	4770      	bx	lr

0801334a <__retarget_lock_release_recursive>:
 801334a:	4770      	bx	lr

0801334c <malloc>:
 801334c:	4b02      	ldr	r3, [pc, #8]	; (8013358 <malloc+0xc>)
 801334e:	4601      	mov	r1, r0
 8013350:	6818      	ldr	r0, [r3, #0]
 8013352:	f000 b86f 	b.w	8013434 <_malloc_r>
 8013356:	bf00      	nop
 8013358:	24000034 	.word	0x24000034

0801335c <_free_r>:
 801335c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801335e:	2900      	cmp	r1, #0
 8013360:	d044      	beq.n	80133ec <_free_r+0x90>
 8013362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013366:	9001      	str	r0, [sp, #4]
 8013368:	2b00      	cmp	r3, #0
 801336a:	f1a1 0404 	sub.w	r4, r1, #4
 801336e:	bfb8      	it	lt
 8013370:	18e4      	addlt	r4, r4, r3
 8013372:	f000 ff95 	bl	80142a0 <__malloc_lock>
 8013376:	4a1e      	ldr	r2, [pc, #120]	; (80133f0 <_free_r+0x94>)
 8013378:	9801      	ldr	r0, [sp, #4]
 801337a:	6813      	ldr	r3, [r2, #0]
 801337c:	b933      	cbnz	r3, 801338c <_free_r+0x30>
 801337e:	6063      	str	r3, [r4, #4]
 8013380:	6014      	str	r4, [r2, #0]
 8013382:	b003      	add	sp, #12
 8013384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013388:	f000 bf90 	b.w	80142ac <__malloc_unlock>
 801338c:	42a3      	cmp	r3, r4
 801338e:	d908      	bls.n	80133a2 <_free_r+0x46>
 8013390:	6825      	ldr	r5, [r4, #0]
 8013392:	1961      	adds	r1, r4, r5
 8013394:	428b      	cmp	r3, r1
 8013396:	bf01      	itttt	eq
 8013398:	6819      	ldreq	r1, [r3, #0]
 801339a:	685b      	ldreq	r3, [r3, #4]
 801339c:	1949      	addeq	r1, r1, r5
 801339e:	6021      	streq	r1, [r4, #0]
 80133a0:	e7ed      	b.n	801337e <_free_r+0x22>
 80133a2:	461a      	mov	r2, r3
 80133a4:	685b      	ldr	r3, [r3, #4]
 80133a6:	b10b      	cbz	r3, 80133ac <_free_r+0x50>
 80133a8:	42a3      	cmp	r3, r4
 80133aa:	d9fa      	bls.n	80133a2 <_free_r+0x46>
 80133ac:	6811      	ldr	r1, [r2, #0]
 80133ae:	1855      	adds	r5, r2, r1
 80133b0:	42a5      	cmp	r5, r4
 80133b2:	d10b      	bne.n	80133cc <_free_r+0x70>
 80133b4:	6824      	ldr	r4, [r4, #0]
 80133b6:	4421      	add	r1, r4
 80133b8:	1854      	adds	r4, r2, r1
 80133ba:	42a3      	cmp	r3, r4
 80133bc:	6011      	str	r1, [r2, #0]
 80133be:	d1e0      	bne.n	8013382 <_free_r+0x26>
 80133c0:	681c      	ldr	r4, [r3, #0]
 80133c2:	685b      	ldr	r3, [r3, #4]
 80133c4:	6053      	str	r3, [r2, #4]
 80133c6:	4421      	add	r1, r4
 80133c8:	6011      	str	r1, [r2, #0]
 80133ca:	e7da      	b.n	8013382 <_free_r+0x26>
 80133cc:	d902      	bls.n	80133d4 <_free_r+0x78>
 80133ce:	230c      	movs	r3, #12
 80133d0:	6003      	str	r3, [r0, #0]
 80133d2:	e7d6      	b.n	8013382 <_free_r+0x26>
 80133d4:	6825      	ldr	r5, [r4, #0]
 80133d6:	1961      	adds	r1, r4, r5
 80133d8:	428b      	cmp	r3, r1
 80133da:	bf04      	itt	eq
 80133dc:	6819      	ldreq	r1, [r3, #0]
 80133de:	685b      	ldreq	r3, [r3, #4]
 80133e0:	6063      	str	r3, [r4, #4]
 80133e2:	bf04      	itt	eq
 80133e4:	1949      	addeq	r1, r1, r5
 80133e6:	6021      	streq	r1, [r4, #0]
 80133e8:	6054      	str	r4, [r2, #4]
 80133ea:	e7ca      	b.n	8013382 <_free_r+0x26>
 80133ec:	b003      	add	sp, #12
 80133ee:	bd30      	pop	{r4, r5, pc}
 80133f0:	24007504 	.word	0x24007504

080133f4 <sbrk_aligned>:
 80133f4:	b570      	push	{r4, r5, r6, lr}
 80133f6:	4e0e      	ldr	r6, [pc, #56]	; (8013430 <sbrk_aligned+0x3c>)
 80133f8:	460c      	mov	r4, r1
 80133fa:	6831      	ldr	r1, [r6, #0]
 80133fc:	4605      	mov	r5, r0
 80133fe:	b911      	cbnz	r1, 8013406 <sbrk_aligned+0x12>
 8013400:	f000 fcd6 	bl	8013db0 <_sbrk_r>
 8013404:	6030      	str	r0, [r6, #0]
 8013406:	4621      	mov	r1, r4
 8013408:	4628      	mov	r0, r5
 801340a:	f000 fcd1 	bl	8013db0 <_sbrk_r>
 801340e:	1c43      	adds	r3, r0, #1
 8013410:	d00a      	beq.n	8013428 <sbrk_aligned+0x34>
 8013412:	1cc4      	adds	r4, r0, #3
 8013414:	f024 0403 	bic.w	r4, r4, #3
 8013418:	42a0      	cmp	r0, r4
 801341a:	d007      	beq.n	801342c <sbrk_aligned+0x38>
 801341c:	1a21      	subs	r1, r4, r0
 801341e:	4628      	mov	r0, r5
 8013420:	f000 fcc6 	bl	8013db0 <_sbrk_r>
 8013424:	3001      	adds	r0, #1
 8013426:	d101      	bne.n	801342c <sbrk_aligned+0x38>
 8013428:	f04f 34ff 	mov.w	r4, #4294967295
 801342c:	4620      	mov	r0, r4
 801342e:	bd70      	pop	{r4, r5, r6, pc}
 8013430:	24007508 	.word	0x24007508

08013434 <_malloc_r>:
 8013434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013438:	1ccd      	adds	r5, r1, #3
 801343a:	f025 0503 	bic.w	r5, r5, #3
 801343e:	3508      	adds	r5, #8
 8013440:	2d0c      	cmp	r5, #12
 8013442:	bf38      	it	cc
 8013444:	250c      	movcc	r5, #12
 8013446:	2d00      	cmp	r5, #0
 8013448:	4607      	mov	r7, r0
 801344a:	db01      	blt.n	8013450 <_malloc_r+0x1c>
 801344c:	42a9      	cmp	r1, r5
 801344e:	d905      	bls.n	801345c <_malloc_r+0x28>
 8013450:	230c      	movs	r3, #12
 8013452:	603b      	str	r3, [r7, #0]
 8013454:	2600      	movs	r6, #0
 8013456:	4630      	mov	r0, r6
 8013458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801345c:	4e2e      	ldr	r6, [pc, #184]	; (8013518 <_malloc_r+0xe4>)
 801345e:	f000 ff1f 	bl	80142a0 <__malloc_lock>
 8013462:	6833      	ldr	r3, [r6, #0]
 8013464:	461c      	mov	r4, r3
 8013466:	bb34      	cbnz	r4, 80134b6 <_malloc_r+0x82>
 8013468:	4629      	mov	r1, r5
 801346a:	4638      	mov	r0, r7
 801346c:	f7ff ffc2 	bl	80133f4 <sbrk_aligned>
 8013470:	1c43      	adds	r3, r0, #1
 8013472:	4604      	mov	r4, r0
 8013474:	d14d      	bne.n	8013512 <_malloc_r+0xde>
 8013476:	6834      	ldr	r4, [r6, #0]
 8013478:	4626      	mov	r6, r4
 801347a:	2e00      	cmp	r6, #0
 801347c:	d140      	bne.n	8013500 <_malloc_r+0xcc>
 801347e:	6823      	ldr	r3, [r4, #0]
 8013480:	4631      	mov	r1, r6
 8013482:	4638      	mov	r0, r7
 8013484:	eb04 0803 	add.w	r8, r4, r3
 8013488:	f000 fc92 	bl	8013db0 <_sbrk_r>
 801348c:	4580      	cmp	r8, r0
 801348e:	d13a      	bne.n	8013506 <_malloc_r+0xd2>
 8013490:	6821      	ldr	r1, [r4, #0]
 8013492:	3503      	adds	r5, #3
 8013494:	1a6d      	subs	r5, r5, r1
 8013496:	f025 0503 	bic.w	r5, r5, #3
 801349a:	3508      	adds	r5, #8
 801349c:	2d0c      	cmp	r5, #12
 801349e:	bf38      	it	cc
 80134a0:	250c      	movcc	r5, #12
 80134a2:	4629      	mov	r1, r5
 80134a4:	4638      	mov	r0, r7
 80134a6:	f7ff ffa5 	bl	80133f4 <sbrk_aligned>
 80134aa:	3001      	adds	r0, #1
 80134ac:	d02b      	beq.n	8013506 <_malloc_r+0xd2>
 80134ae:	6823      	ldr	r3, [r4, #0]
 80134b0:	442b      	add	r3, r5
 80134b2:	6023      	str	r3, [r4, #0]
 80134b4:	e00e      	b.n	80134d4 <_malloc_r+0xa0>
 80134b6:	6822      	ldr	r2, [r4, #0]
 80134b8:	1b52      	subs	r2, r2, r5
 80134ba:	d41e      	bmi.n	80134fa <_malloc_r+0xc6>
 80134bc:	2a0b      	cmp	r2, #11
 80134be:	d916      	bls.n	80134ee <_malloc_r+0xba>
 80134c0:	1961      	adds	r1, r4, r5
 80134c2:	42a3      	cmp	r3, r4
 80134c4:	6025      	str	r5, [r4, #0]
 80134c6:	bf18      	it	ne
 80134c8:	6059      	strne	r1, [r3, #4]
 80134ca:	6863      	ldr	r3, [r4, #4]
 80134cc:	bf08      	it	eq
 80134ce:	6031      	streq	r1, [r6, #0]
 80134d0:	5162      	str	r2, [r4, r5]
 80134d2:	604b      	str	r3, [r1, #4]
 80134d4:	4638      	mov	r0, r7
 80134d6:	f104 060b 	add.w	r6, r4, #11
 80134da:	f000 fee7 	bl	80142ac <__malloc_unlock>
 80134de:	f026 0607 	bic.w	r6, r6, #7
 80134e2:	1d23      	adds	r3, r4, #4
 80134e4:	1af2      	subs	r2, r6, r3
 80134e6:	d0b6      	beq.n	8013456 <_malloc_r+0x22>
 80134e8:	1b9b      	subs	r3, r3, r6
 80134ea:	50a3      	str	r3, [r4, r2]
 80134ec:	e7b3      	b.n	8013456 <_malloc_r+0x22>
 80134ee:	6862      	ldr	r2, [r4, #4]
 80134f0:	42a3      	cmp	r3, r4
 80134f2:	bf0c      	ite	eq
 80134f4:	6032      	streq	r2, [r6, #0]
 80134f6:	605a      	strne	r2, [r3, #4]
 80134f8:	e7ec      	b.n	80134d4 <_malloc_r+0xa0>
 80134fa:	4623      	mov	r3, r4
 80134fc:	6864      	ldr	r4, [r4, #4]
 80134fe:	e7b2      	b.n	8013466 <_malloc_r+0x32>
 8013500:	4634      	mov	r4, r6
 8013502:	6876      	ldr	r6, [r6, #4]
 8013504:	e7b9      	b.n	801347a <_malloc_r+0x46>
 8013506:	230c      	movs	r3, #12
 8013508:	603b      	str	r3, [r7, #0]
 801350a:	4638      	mov	r0, r7
 801350c:	f000 fece 	bl	80142ac <__malloc_unlock>
 8013510:	e7a1      	b.n	8013456 <_malloc_r+0x22>
 8013512:	6025      	str	r5, [r4, #0]
 8013514:	e7de      	b.n	80134d4 <_malloc_r+0xa0>
 8013516:	bf00      	nop
 8013518:	24007504 	.word	0x24007504

0801351c <__ssputs_r>:
 801351c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013520:	688e      	ldr	r6, [r1, #8]
 8013522:	429e      	cmp	r6, r3
 8013524:	4682      	mov	sl, r0
 8013526:	460c      	mov	r4, r1
 8013528:	4690      	mov	r8, r2
 801352a:	461f      	mov	r7, r3
 801352c:	d838      	bhi.n	80135a0 <__ssputs_r+0x84>
 801352e:	898a      	ldrh	r2, [r1, #12]
 8013530:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013534:	d032      	beq.n	801359c <__ssputs_r+0x80>
 8013536:	6825      	ldr	r5, [r4, #0]
 8013538:	6909      	ldr	r1, [r1, #16]
 801353a:	eba5 0901 	sub.w	r9, r5, r1
 801353e:	6965      	ldr	r5, [r4, #20]
 8013540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013544:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013548:	3301      	adds	r3, #1
 801354a:	444b      	add	r3, r9
 801354c:	106d      	asrs	r5, r5, #1
 801354e:	429d      	cmp	r5, r3
 8013550:	bf38      	it	cc
 8013552:	461d      	movcc	r5, r3
 8013554:	0553      	lsls	r3, r2, #21
 8013556:	d531      	bpl.n	80135bc <__ssputs_r+0xa0>
 8013558:	4629      	mov	r1, r5
 801355a:	f7ff ff6b 	bl	8013434 <_malloc_r>
 801355e:	4606      	mov	r6, r0
 8013560:	b950      	cbnz	r0, 8013578 <__ssputs_r+0x5c>
 8013562:	230c      	movs	r3, #12
 8013564:	f8ca 3000 	str.w	r3, [sl]
 8013568:	89a3      	ldrh	r3, [r4, #12]
 801356a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801356e:	81a3      	strh	r3, [r4, #12]
 8013570:	f04f 30ff 	mov.w	r0, #4294967295
 8013574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013578:	6921      	ldr	r1, [r4, #16]
 801357a:	464a      	mov	r2, r9
 801357c:	f7ff fd04 	bl	8012f88 <memcpy>
 8013580:	89a3      	ldrh	r3, [r4, #12]
 8013582:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801358a:	81a3      	strh	r3, [r4, #12]
 801358c:	6126      	str	r6, [r4, #16]
 801358e:	6165      	str	r5, [r4, #20]
 8013590:	444e      	add	r6, r9
 8013592:	eba5 0509 	sub.w	r5, r5, r9
 8013596:	6026      	str	r6, [r4, #0]
 8013598:	60a5      	str	r5, [r4, #8]
 801359a:	463e      	mov	r6, r7
 801359c:	42be      	cmp	r6, r7
 801359e:	d900      	bls.n	80135a2 <__ssputs_r+0x86>
 80135a0:	463e      	mov	r6, r7
 80135a2:	6820      	ldr	r0, [r4, #0]
 80135a4:	4632      	mov	r2, r6
 80135a6:	4641      	mov	r1, r8
 80135a8:	f7ff fcfc 	bl	8012fa4 <memmove>
 80135ac:	68a3      	ldr	r3, [r4, #8]
 80135ae:	1b9b      	subs	r3, r3, r6
 80135b0:	60a3      	str	r3, [r4, #8]
 80135b2:	6823      	ldr	r3, [r4, #0]
 80135b4:	4433      	add	r3, r6
 80135b6:	6023      	str	r3, [r4, #0]
 80135b8:	2000      	movs	r0, #0
 80135ba:	e7db      	b.n	8013574 <__ssputs_r+0x58>
 80135bc:	462a      	mov	r2, r5
 80135be:	f000 fe7b 	bl	80142b8 <_realloc_r>
 80135c2:	4606      	mov	r6, r0
 80135c4:	2800      	cmp	r0, #0
 80135c6:	d1e1      	bne.n	801358c <__ssputs_r+0x70>
 80135c8:	6921      	ldr	r1, [r4, #16]
 80135ca:	4650      	mov	r0, sl
 80135cc:	f7ff fec6 	bl	801335c <_free_r>
 80135d0:	e7c7      	b.n	8013562 <__ssputs_r+0x46>
	...

080135d4 <_svfiprintf_r>:
 80135d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135d8:	4698      	mov	r8, r3
 80135da:	898b      	ldrh	r3, [r1, #12]
 80135dc:	061b      	lsls	r3, r3, #24
 80135de:	b09d      	sub	sp, #116	; 0x74
 80135e0:	4607      	mov	r7, r0
 80135e2:	460d      	mov	r5, r1
 80135e4:	4614      	mov	r4, r2
 80135e6:	d50e      	bpl.n	8013606 <_svfiprintf_r+0x32>
 80135e8:	690b      	ldr	r3, [r1, #16]
 80135ea:	b963      	cbnz	r3, 8013606 <_svfiprintf_r+0x32>
 80135ec:	2140      	movs	r1, #64	; 0x40
 80135ee:	f7ff ff21 	bl	8013434 <_malloc_r>
 80135f2:	6028      	str	r0, [r5, #0]
 80135f4:	6128      	str	r0, [r5, #16]
 80135f6:	b920      	cbnz	r0, 8013602 <_svfiprintf_r+0x2e>
 80135f8:	230c      	movs	r3, #12
 80135fa:	603b      	str	r3, [r7, #0]
 80135fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013600:	e0d1      	b.n	80137a6 <_svfiprintf_r+0x1d2>
 8013602:	2340      	movs	r3, #64	; 0x40
 8013604:	616b      	str	r3, [r5, #20]
 8013606:	2300      	movs	r3, #0
 8013608:	9309      	str	r3, [sp, #36]	; 0x24
 801360a:	2320      	movs	r3, #32
 801360c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013610:	f8cd 800c 	str.w	r8, [sp, #12]
 8013614:	2330      	movs	r3, #48	; 0x30
 8013616:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80137c0 <_svfiprintf_r+0x1ec>
 801361a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801361e:	f04f 0901 	mov.w	r9, #1
 8013622:	4623      	mov	r3, r4
 8013624:	469a      	mov	sl, r3
 8013626:	f813 2b01 	ldrb.w	r2, [r3], #1
 801362a:	b10a      	cbz	r2, 8013630 <_svfiprintf_r+0x5c>
 801362c:	2a25      	cmp	r2, #37	; 0x25
 801362e:	d1f9      	bne.n	8013624 <_svfiprintf_r+0x50>
 8013630:	ebba 0b04 	subs.w	fp, sl, r4
 8013634:	d00b      	beq.n	801364e <_svfiprintf_r+0x7a>
 8013636:	465b      	mov	r3, fp
 8013638:	4622      	mov	r2, r4
 801363a:	4629      	mov	r1, r5
 801363c:	4638      	mov	r0, r7
 801363e:	f7ff ff6d 	bl	801351c <__ssputs_r>
 8013642:	3001      	adds	r0, #1
 8013644:	f000 80aa 	beq.w	801379c <_svfiprintf_r+0x1c8>
 8013648:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801364a:	445a      	add	r2, fp
 801364c:	9209      	str	r2, [sp, #36]	; 0x24
 801364e:	f89a 3000 	ldrb.w	r3, [sl]
 8013652:	2b00      	cmp	r3, #0
 8013654:	f000 80a2 	beq.w	801379c <_svfiprintf_r+0x1c8>
 8013658:	2300      	movs	r3, #0
 801365a:	f04f 32ff 	mov.w	r2, #4294967295
 801365e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013662:	f10a 0a01 	add.w	sl, sl, #1
 8013666:	9304      	str	r3, [sp, #16]
 8013668:	9307      	str	r3, [sp, #28]
 801366a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801366e:	931a      	str	r3, [sp, #104]	; 0x68
 8013670:	4654      	mov	r4, sl
 8013672:	2205      	movs	r2, #5
 8013674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013678:	4851      	ldr	r0, [pc, #324]	; (80137c0 <_svfiprintf_r+0x1ec>)
 801367a:	f7ec fe31 	bl	80002e0 <memchr>
 801367e:	9a04      	ldr	r2, [sp, #16]
 8013680:	b9d8      	cbnz	r0, 80136ba <_svfiprintf_r+0xe6>
 8013682:	06d0      	lsls	r0, r2, #27
 8013684:	bf44      	itt	mi
 8013686:	2320      	movmi	r3, #32
 8013688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801368c:	0711      	lsls	r1, r2, #28
 801368e:	bf44      	itt	mi
 8013690:	232b      	movmi	r3, #43	; 0x2b
 8013692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013696:	f89a 3000 	ldrb.w	r3, [sl]
 801369a:	2b2a      	cmp	r3, #42	; 0x2a
 801369c:	d015      	beq.n	80136ca <_svfiprintf_r+0xf6>
 801369e:	9a07      	ldr	r2, [sp, #28]
 80136a0:	4654      	mov	r4, sl
 80136a2:	2000      	movs	r0, #0
 80136a4:	f04f 0c0a 	mov.w	ip, #10
 80136a8:	4621      	mov	r1, r4
 80136aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136ae:	3b30      	subs	r3, #48	; 0x30
 80136b0:	2b09      	cmp	r3, #9
 80136b2:	d94e      	bls.n	8013752 <_svfiprintf_r+0x17e>
 80136b4:	b1b0      	cbz	r0, 80136e4 <_svfiprintf_r+0x110>
 80136b6:	9207      	str	r2, [sp, #28]
 80136b8:	e014      	b.n	80136e4 <_svfiprintf_r+0x110>
 80136ba:	eba0 0308 	sub.w	r3, r0, r8
 80136be:	fa09 f303 	lsl.w	r3, r9, r3
 80136c2:	4313      	orrs	r3, r2
 80136c4:	9304      	str	r3, [sp, #16]
 80136c6:	46a2      	mov	sl, r4
 80136c8:	e7d2      	b.n	8013670 <_svfiprintf_r+0x9c>
 80136ca:	9b03      	ldr	r3, [sp, #12]
 80136cc:	1d19      	adds	r1, r3, #4
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	9103      	str	r1, [sp, #12]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	bfbb      	ittet	lt
 80136d6:	425b      	neglt	r3, r3
 80136d8:	f042 0202 	orrlt.w	r2, r2, #2
 80136dc:	9307      	strge	r3, [sp, #28]
 80136de:	9307      	strlt	r3, [sp, #28]
 80136e0:	bfb8      	it	lt
 80136e2:	9204      	strlt	r2, [sp, #16]
 80136e4:	7823      	ldrb	r3, [r4, #0]
 80136e6:	2b2e      	cmp	r3, #46	; 0x2e
 80136e8:	d10c      	bne.n	8013704 <_svfiprintf_r+0x130>
 80136ea:	7863      	ldrb	r3, [r4, #1]
 80136ec:	2b2a      	cmp	r3, #42	; 0x2a
 80136ee:	d135      	bne.n	801375c <_svfiprintf_r+0x188>
 80136f0:	9b03      	ldr	r3, [sp, #12]
 80136f2:	1d1a      	adds	r2, r3, #4
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	9203      	str	r2, [sp, #12]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	bfb8      	it	lt
 80136fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8013700:	3402      	adds	r4, #2
 8013702:	9305      	str	r3, [sp, #20]
 8013704:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80137d0 <_svfiprintf_r+0x1fc>
 8013708:	7821      	ldrb	r1, [r4, #0]
 801370a:	2203      	movs	r2, #3
 801370c:	4650      	mov	r0, sl
 801370e:	f7ec fde7 	bl	80002e0 <memchr>
 8013712:	b140      	cbz	r0, 8013726 <_svfiprintf_r+0x152>
 8013714:	2340      	movs	r3, #64	; 0x40
 8013716:	eba0 000a 	sub.w	r0, r0, sl
 801371a:	fa03 f000 	lsl.w	r0, r3, r0
 801371e:	9b04      	ldr	r3, [sp, #16]
 8013720:	4303      	orrs	r3, r0
 8013722:	3401      	adds	r4, #1
 8013724:	9304      	str	r3, [sp, #16]
 8013726:	f814 1b01 	ldrb.w	r1, [r4], #1
 801372a:	4826      	ldr	r0, [pc, #152]	; (80137c4 <_svfiprintf_r+0x1f0>)
 801372c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013730:	2206      	movs	r2, #6
 8013732:	f7ec fdd5 	bl	80002e0 <memchr>
 8013736:	2800      	cmp	r0, #0
 8013738:	d038      	beq.n	80137ac <_svfiprintf_r+0x1d8>
 801373a:	4b23      	ldr	r3, [pc, #140]	; (80137c8 <_svfiprintf_r+0x1f4>)
 801373c:	bb1b      	cbnz	r3, 8013786 <_svfiprintf_r+0x1b2>
 801373e:	9b03      	ldr	r3, [sp, #12]
 8013740:	3307      	adds	r3, #7
 8013742:	f023 0307 	bic.w	r3, r3, #7
 8013746:	3308      	adds	r3, #8
 8013748:	9303      	str	r3, [sp, #12]
 801374a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801374c:	4433      	add	r3, r6
 801374e:	9309      	str	r3, [sp, #36]	; 0x24
 8013750:	e767      	b.n	8013622 <_svfiprintf_r+0x4e>
 8013752:	fb0c 3202 	mla	r2, ip, r2, r3
 8013756:	460c      	mov	r4, r1
 8013758:	2001      	movs	r0, #1
 801375a:	e7a5      	b.n	80136a8 <_svfiprintf_r+0xd4>
 801375c:	2300      	movs	r3, #0
 801375e:	3401      	adds	r4, #1
 8013760:	9305      	str	r3, [sp, #20]
 8013762:	4619      	mov	r1, r3
 8013764:	f04f 0c0a 	mov.w	ip, #10
 8013768:	4620      	mov	r0, r4
 801376a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801376e:	3a30      	subs	r2, #48	; 0x30
 8013770:	2a09      	cmp	r2, #9
 8013772:	d903      	bls.n	801377c <_svfiprintf_r+0x1a8>
 8013774:	2b00      	cmp	r3, #0
 8013776:	d0c5      	beq.n	8013704 <_svfiprintf_r+0x130>
 8013778:	9105      	str	r1, [sp, #20]
 801377a:	e7c3      	b.n	8013704 <_svfiprintf_r+0x130>
 801377c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013780:	4604      	mov	r4, r0
 8013782:	2301      	movs	r3, #1
 8013784:	e7f0      	b.n	8013768 <_svfiprintf_r+0x194>
 8013786:	ab03      	add	r3, sp, #12
 8013788:	9300      	str	r3, [sp, #0]
 801378a:	462a      	mov	r2, r5
 801378c:	4b0f      	ldr	r3, [pc, #60]	; (80137cc <_svfiprintf_r+0x1f8>)
 801378e:	a904      	add	r1, sp, #16
 8013790:	4638      	mov	r0, r7
 8013792:	f3af 8000 	nop.w
 8013796:	1c42      	adds	r2, r0, #1
 8013798:	4606      	mov	r6, r0
 801379a:	d1d6      	bne.n	801374a <_svfiprintf_r+0x176>
 801379c:	89ab      	ldrh	r3, [r5, #12]
 801379e:	065b      	lsls	r3, r3, #25
 80137a0:	f53f af2c 	bmi.w	80135fc <_svfiprintf_r+0x28>
 80137a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137a6:	b01d      	add	sp, #116	; 0x74
 80137a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137ac:	ab03      	add	r3, sp, #12
 80137ae:	9300      	str	r3, [sp, #0]
 80137b0:	462a      	mov	r2, r5
 80137b2:	4b06      	ldr	r3, [pc, #24]	; (80137cc <_svfiprintf_r+0x1f8>)
 80137b4:	a904      	add	r1, sp, #16
 80137b6:	4638      	mov	r0, r7
 80137b8:	f000 f9d4 	bl	8013b64 <_printf_i>
 80137bc:	e7eb      	b.n	8013796 <_svfiprintf_r+0x1c2>
 80137be:	bf00      	nop
 80137c0:	080176e0 	.word	0x080176e0
 80137c4:	080176ea 	.word	0x080176ea
 80137c8:	00000000 	.word	0x00000000
 80137cc:	0801351d 	.word	0x0801351d
 80137d0:	080176e6 	.word	0x080176e6

080137d4 <__sfputc_r>:
 80137d4:	6893      	ldr	r3, [r2, #8]
 80137d6:	3b01      	subs	r3, #1
 80137d8:	2b00      	cmp	r3, #0
 80137da:	b410      	push	{r4}
 80137dc:	6093      	str	r3, [r2, #8]
 80137de:	da08      	bge.n	80137f2 <__sfputc_r+0x1e>
 80137e0:	6994      	ldr	r4, [r2, #24]
 80137e2:	42a3      	cmp	r3, r4
 80137e4:	db01      	blt.n	80137ea <__sfputc_r+0x16>
 80137e6:	290a      	cmp	r1, #10
 80137e8:	d103      	bne.n	80137f2 <__sfputc_r+0x1e>
 80137ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137ee:	f000 bb33 	b.w	8013e58 <__swbuf_r>
 80137f2:	6813      	ldr	r3, [r2, #0]
 80137f4:	1c58      	adds	r0, r3, #1
 80137f6:	6010      	str	r0, [r2, #0]
 80137f8:	7019      	strb	r1, [r3, #0]
 80137fa:	4608      	mov	r0, r1
 80137fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013800:	4770      	bx	lr

08013802 <__sfputs_r>:
 8013802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013804:	4606      	mov	r6, r0
 8013806:	460f      	mov	r7, r1
 8013808:	4614      	mov	r4, r2
 801380a:	18d5      	adds	r5, r2, r3
 801380c:	42ac      	cmp	r4, r5
 801380e:	d101      	bne.n	8013814 <__sfputs_r+0x12>
 8013810:	2000      	movs	r0, #0
 8013812:	e007      	b.n	8013824 <__sfputs_r+0x22>
 8013814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013818:	463a      	mov	r2, r7
 801381a:	4630      	mov	r0, r6
 801381c:	f7ff ffda 	bl	80137d4 <__sfputc_r>
 8013820:	1c43      	adds	r3, r0, #1
 8013822:	d1f3      	bne.n	801380c <__sfputs_r+0xa>
 8013824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013828 <_vfiprintf_r>:
 8013828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801382c:	460d      	mov	r5, r1
 801382e:	b09d      	sub	sp, #116	; 0x74
 8013830:	4614      	mov	r4, r2
 8013832:	4698      	mov	r8, r3
 8013834:	4606      	mov	r6, r0
 8013836:	b118      	cbz	r0, 8013840 <_vfiprintf_r+0x18>
 8013838:	6983      	ldr	r3, [r0, #24]
 801383a:	b90b      	cbnz	r3, 8013840 <_vfiprintf_r+0x18>
 801383c:	f7ff fcd4 	bl	80131e8 <__sinit>
 8013840:	4b89      	ldr	r3, [pc, #548]	; (8013a68 <_vfiprintf_r+0x240>)
 8013842:	429d      	cmp	r5, r3
 8013844:	d11b      	bne.n	801387e <_vfiprintf_r+0x56>
 8013846:	6875      	ldr	r5, [r6, #4]
 8013848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801384a:	07d9      	lsls	r1, r3, #31
 801384c:	d405      	bmi.n	801385a <_vfiprintf_r+0x32>
 801384e:	89ab      	ldrh	r3, [r5, #12]
 8013850:	059a      	lsls	r2, r3, #22
 8013852:	d402      	bmi.n	801385a <_vfiprintf_r+0x32>
 8013854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013856:	f7ff fd77 	bl	8013348 <__retarget_lock_acquire_recursive>
 801385a:	89ab      	ldrh	r3, [r5, #12]
 801385c:	071b      	lsls	r3, r3, #28
 801385e:	d501      	bpl.n	8013864 <_vfiprintf_r+0x3c>
 8013860:	692b      	ldr	r3, [r5, #16]
 8013862:	b9eb      	cbnz	r3, 80138a0 <_vfiprintf_r+0x78>
 8013864:	4629      	mov	r1, r5
 8013866:	4630      	mov	r0, r6
 8013868:	f000 fb5a 	bl	8013f20 <__swsetup_r>
 801386c:	b1c0      	cbz	r0, 80138a0 <_vfiprintf_r+0x78>
 801386e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013870:	07dc      	lsls	r4, r3, #31
 8013872:	d50e      	bpl.n	8013892 <_vfiprintf_r+0x6a>
 8013874:	f04f 30ff 	mov.w	r0, #4294967295
 8013878:	b01d      	add	sp, #116	; 0x74
 801387a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801387e:	4b7b      	ldr	r3, [pc, #492]	; (8013a6c <_vfiprintf_r+0x244>)
 8013880:	429d      	cmp	r5, r3
 8013882:	d101      	bne.n	8013888 <_vfiprintf_r+0x60>
 8013884:	68b5      	ldr	r5, [r6, #8]
 8013886:	e7df      	b.n	8013848 <_vfiprintf_r+0x20>
 8013888:	4b79      	ldr	r3, [pc, #484]	; (8013a70 <_vfiprintf_r+0x248>)
 801388a:	429d      	cmp	r5, r3
 801388c:	bf08      	it	eq
 801388e:	68f5      	ldreq	r5, [r6, #12]
 8013890:	e7da      	b.n	8013848 <_vfiprintf_r+0x20>
 8013892:	89ab      	ldrh	r3, [r5, #12]
 8013894:	0598      	lsls	r0, r3, #22
 8013896:	d4ed      	bmi.n	8013874 <_vfiprintf_r+0x4c>
 8013898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801389a:	f7ff fd56 	bl	801334a <__retarget_lock_release_recursive>
 801389e:	e7e9      	b.n	8013874 <_vfiprintf_r+0x4c>
 80138a0:	2300      	movs	r3, #0
 80138a2:	9309      	str	r3, [sp, #36]	; 0x24
 80138a4:	2320      	movs	r3, #32
 80138a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80138aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80138ae:	2330      	movs	r3, #48	; 0x30
 80138b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013a74 <_vfiprintf_r+0x24c>
 80138b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80138b8:	f04f 0901 	mov.w	r9, #1
 80138bc:	4623      	mov	r3, r4
 80138be:	469a      	mov	sl, r3
 80138c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138c4:	b10a      	cbz	r2, 80138ca <_vfiprintf_r+0xa2>
 80138c6:	2a25      	cmp	r2, #37	; 0x25
 80138c8:	d1f9      	bne.n	80138be <_vfiprintf_r+0x96>
 80138ca:	ebba 0b04 	subs.w	fp, sl, r4
 80138ce:	d00b      	beq.n	80138e8 <_vfiprintf_r+0xc0>
 80138d0:	465b      	mov	r3, fp
 80138d2:	4622      	mov	r2, r4
 80138d4:	4629      	mov	r1, r5
 80138d6:	4630      	mov	r0, r6
 80138d8:	f7ff ff93 	bl	8013802 <__sfputs_r>
 80138dc:	3001      	adds	r0, #1
 80138de:	f000 80aa 	beq.w	8013a36 <_vfiprintf_r+0x20e>
 80138e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138e4:	445a      	add	r2, fp
 80138e6:	9209      	str	r2, [sp, #36]	; 0x24
 80138e8:	f89a 3000 	ldrb.w	r3, [sl]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	f000 80a2 	beq.w	8013a36 <_vfiprintf_r+0x20e>
 80138f2:	2300      	movs	r3, #0
 80138f4:	f04f 32ff 	mov.w	r2, #4294967295
 80138f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80138fc:	f10a 0a01 	add.w	sl, sl, #1
 8013900:	9304      	str	r3, [sp, #16]
 8013902:	9307      	str	r3, [sp, #28]
 8013904:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013908:	931a      	str	r3, [sp, #104]	; 0x68
 801390a:	4654      	mov	r4, sl
 801390c:	2205      	movs	r2, #5
 801390e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013912:	4858      	ldr	r0, [pc, #352]	; (8013a74 <_vfiprintf_r+0x24c>)
 8013914:	f7ec fce4 	bl	80002e0 <memchr>
 8013918:	9a04      	ldr	r2, [sp, #16]
 801391a:	b9d8      	cbnz	r0, 8013954 <_vfiprintf_r+0x12c>
 801391c:	06d1      	lsls	r1, r2, #27
 801391e:	bf44      	itt	mi
 8013920:	2320      	movmi	r3, #32
 8013922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013926:	0713      	lsls	r3, r2, #28
 8013928:	bf44      	itt	mi
 801392a:	232b      	movmi	r3, #43	; 0x2b
 801392c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013930:	f89a 3000 	ldrb.w	r3, [sl]
 8013934:	2b2a      	cmp	r3, #42	; 0x2a
 8013936:	d015      	beq.n	8013964 <_vfiprintf_r+0x13c>
 8013938:	9a07      	ldr	r2, [sp, #28]
 801393a:	4654      	mov	r4, sl
 801393c:	2000      	movs	r0, #0
 801393e:	f04f 0c0a 	mov.w	ip, #10
 8013942:	4621      	mov	r1, r4
 8013944:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013948:	3b30      	subs	r3, #48	; 0x30
 801394a:	2b09      	cmp	r3, #9
 801394c:	d94e      	bls.n	80139ec <_vfiprintf_r+0x1c4>
 801394e:	b1b0      	cbz	r0, 801397e <_vfiprintf_r+0x156>
 8013950:	9207      	str	r2, [sp, #28]
 8013952:	e014      	b.n	801397e <_vfiprintf_r+0x156>
 8013954:	eba0 0308 	sub.w	r3, r0, r8
 8013958:	fa09 f303 	lsl.w	r3, r9, r3
 801395c:	4313      	orrs	r3, r2
 801395e:	9304      	str	r3, [sp, #16]
 8013960:	46a2      	mov	sl, r4
 8013962:	e7d2      	b.n	801390a <_vfiprintf_r+0xe2>
 8013964:	9b03      	ldr	r3, [sp, #12]
 8013966:	1d19      	adds	r1, r3, #4
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	9103      	str	r1, [sp, #12]
 801396c:	2b00      	cmp	r3, #0
 801396e:	bfbb      	ittet	lt
 8013970:	425b      	neglt	r3, r3
 8013972:	f042 0202 	orrlt.w	r2, r2, #2
 8013976:	9307      	strge	r3, [sp, #28]
 8013978:	9307      	strlt	r3, [sp, #28]
 801397a:	bfb8      	it	lt
 801397c:	9204      	strlt	r2, [sp, #16]
 801397e:	7823      	ldrb	r3, [r4, #0]
 8013980:	2b2e      	cmp	r3, #46	; 0x2e
 8013982:	d10c      	bne.n	801399e <_vfiprintf_r+0x176>
 8013984:	7863      	ldrb	r3, [r4, #1]
 8013986:	2b2a      	cmp	r3, #42	; 0x2a
 8013988:	d135      	bne.n	80139f6 <_vfiprintf_r+0x1ce>
 801398a:	9b03      	ldr	r3, [sp, #12]
 801398c:	1d1a      	adds	r2, r3, #4
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	9203      	str	r2, [sp, #12]
 8013992:	2b00      	cmp	r3, #0
 8013994:	bfb8      	it	lt
 8013996:	f04f 33ff 	movlt.w	r3, #4294967295
 801399a:	3402      	adds	r4, #2
 801399c:	9305      	str	r3, [sp, #20]
 801399e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013a84 <_vfiprintf_r+0x25c>
 80139a2:	7821      	ldrb	r1, [r4, #0]
 80139a4:	2203      	movs	r2, #3
 80139a6:	4650      	mov	r0, sl
 80139a8:	f7ec fc9a 	bl	80002e0 <memchr>
 80139ac:	b140      	cbz	r0, 80139c0 <_vfiprintf_r+0x198>
 80139ae:	2340      	movs	r3, #64	; 0x40
 80139b0:	eba0 000a 	sub.w	r0, r0, sl
 80139b4:	fa03 f000 	lsl.w	r0, r3, r0
 80139b8:	9b04      	ldr	r3, [sp, #16]
 80139ba:	4303      	orrs	r3, r0
 80139bc:	3401      	adds	r4, #1
 80139be:	9304      	str	r3, [sp, #16]
 80139c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139c4:	482c      	ldr	r0, [pc, #176]	; (8013a78 <_vfiprintf_r+0x250>)
 80139c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80139ca:	2206      	movs	r2, #6
 80139cc:	f7ec fc88 	bl	80002e0 <memchr>
 80139d0:	2800      	cmp	r0, #0
 80139d2:	d03f      	beq.n	8013a54 <_vfiprintf_r+0x22c>
 80139d4:	4b29      	ldr	r3, [pc, #164]	; (8013a7c <_vfiprintf_r+0x254>)
 80139d6:	bb1b      	cbnz	r3, 8013a20 <_vfiprintf_r+0x1f8>
 80139d8:	9b03      	ldr	r3, [sp, #12]
 80139da:	3307      	adds	r3, #7
 80139dc:	f023 0307 	bic.w	r3, r3, #7
 80139e0:	3308      	adds	r3, #8
 80139e2:	9303      	str	r3, [sp, #12]
 80139e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139e6:	443b      	add	r3, r7
 80139e8:	9309      	str	r3, [sp, #36]	; 0x24
 80139ea:	e767      	b.n	80138bc <_vfiprintf_r+0x94>
 80139ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80139f0:	460c      	mov	r4, r1
 80139f2:	2001      	movs	r0, #1
 80139f4:	e7a5      	b.n	8013942 <_vfiprintf_r+0x11a>
 80139f6:	2300      	movs	r3, #0
 80139f8:	3401      	adds	r4, #1
 80139fa:	9305      	str	r3, [sp, #20]
 80139fc:	4619      	mov	r1, r3
 80139fe:	f04f 0c0a 	mov.w	ip, #10
 8013a02:	4620      	mov	r0, r4
 8013a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a08:	3a30      	subs	r2, #48	; 0x30
 8013a0a:	2a09      	cmp	r2, #9
 8013a0c:	d903      	bls.n	8013a16 <_vfiprintf_r+0x1ee>
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d0c5      	beq.n	801399e <_vfiprintf_r+0x176>
 8013a12:	9105      	str	r1, [sp, #20]
 8013a14:	e7c3      	b.n	801399e <_vfiprintf_r+0x176>
 8013a16:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a1a:	4604      	mov	r4, r0
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	e7f0      	b.n	8013a02 <_vfiprintf_r+0x1da>
 8013a20:	ab03      	add	r3, sp, #12
 8013a22:	9300      	str	r3, [sp, #0]
 8013a24:	462a      	mov	r2, r5
 8013a26:	4b16      	ldr	r3, [pc, #88]	; (8013a80 <_vfiprintf_r+0x258>)
 8013a28:	a904      	add	r1, sp, #16
 8013a2a:	4630      	mov	r0, r6
 8013a2c:	f3af 8000 	nop.w
 8013a30:	4607      	mov	r7, r0
 8013a32:	1c78      	adds	r0, r7, #1
 8013a34:	d1d6      	bne.n	80139e4 <_vfiprintf_r+0x1bc>
 8013a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a38:	07d9      	lsls	r1, r3, #31
 8013a3a:	d405      	bmi.n	8013a48 <_vfiprintf_r+0x220>
 8013a3c:	89ab      	ldrh	r3, [r5, #12]
 8013a3e:	059a      	lsls	r2, r3, #22
 8013a40:	d402      	bmi.n	8013a48 <_vfiprintf_r+0x220>
 8013a42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013a44:	f7ff fc81 	bl	801334a <__retarget_lock_release_recursive>
 8013a48:	89ab      	ldrh	r3, [r5, #12]
 8013a4a:	065b      	lsls	r3, r3, #25
 8013a4c:	f53f af12 	bmi.w	8013874 <_vfiprintf_r+0x4c>
 8013a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013a52:	e711      	b.n	8013878 <_vfiprintf_r+0x50>
 8013a54:	ab03      	add	r3, sp, #12
 8013a56:	9300      	str	r3, [sp, #0]
 8013a58:	462a      	mov	r2, r5
 8013a5a:	4b09      	ldr	r3, [pc, #36]	; (8013a80 <_vfiprintf_r+0x258>)
 8013a5c:	a904      	add	r1, sp, #16
 8013a5e:	4630      	mov	r0, r6
 8013a60:	f000 f880 	bl	8013b64 <_printf_i>
 8013a64:	e7e4      	b.n	8013a30 <_vfiprintf_r+0x208>
 8013a66:	bf00      	nop
 8013a68:	080176a0 	.word	0x080176a0
 8013a6c:	080176c0 	.word	0x080176c0
 8013a70:	08017680 	.word	0x08017680
 8013a74:	080176e0 	.word	0x080176e0
 8013a78:	080176ea 	.word	0x080176ea
 8013a7c:	00000000 	.word	0x00000000
 8013a80:	08013803 	.word	0x08013803
 8013a84:	080176e6 	.word	0x080176e6

08013a88 <_printf_common>:
 8013a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a8c:	4616      	mov	r6, r2
 8013a8e:	4699      	mov	r9, r3
 8013a90:	688a      	ldr	r2, [r1, #8]
 8013a92:	690b      	ldr	r3, [r1, #16]
 8013a94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013a98:	4293      	cmp	r3, r2
 8013a9a:	bfb8      	it	lt
 8013a9c:	4613      	movlt	r3, r2
 8013a9e:	6033      	str	r3, [r6, #0]
 8013aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013aa4:	4607      	mov	r7, r0
 8013aa6:	460c      	mov	r4, r1
 8013aa8:	b10a      	cbz	r2, 8013aae <_printf_common+0x26>
 8013aaa:	3301      	adds	r3, #1
 8013aac:	6033      	str	r3, [r6, #0]
 8013aae:	6823      	ldr	r3, [r4, #0]
 8013ab0:	0699      	lsls	r1, r3, #26
 8013ab2:	bf42      	ittt	mi
 8013ab4:	6833      	ldrmi	r3, [r6, #0]
 8013ab6:	3302      	addmi	r3, #2
 8013ab8:	6033      	strmi	r3, [r6, #0]
 8013aba:	6825      	ldr	r5, [r4, #0]
 8013abc:	f015 0506 	ands.w	r5, r5, #6
 8013ac0:	d106      	bne.n	8013ad0 <_printf_common+0x48>
 8013ac2:	f104 0a19 	add.w	sl, r4, #25
 8013ac6:	68e3      	ldr	r3, [r4, #12]
 8013ac8:	6832      	ldr	r2, [r6, #0]
 8013aca:	1a9b      	subs	r3, r3, r2
 8013acc:	42ab      	cmp	r3, r5
 8013ace:	dc26      	bgt.n	8013b1e <_printf_common+0x96>
 8013ad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013ad4:	1e13      	subs	r3, r2, #0
 8013ad6:	6822      	ldr	r2, [r4, #0]
 8013ad8:	bf18      	it	ne
 8013ada:	2301      	movne	r3, #1
 8013adc:	0692      	lsls	r2, r2, #26
 8013ade:	d42b      	bmi.n	8013b38 <_printf_common+0xb0>
 8013ae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013ae4:	4649      	mov	r1, r9
 8013ae6:	4638      	mov	r0, r7
 8013ae8:	47c0      	blx	r8
 8013aea:	3001      	adds	r0, #1
 8013aec:	d01e      	beq.n	8013b2c <_printf_common+0xa4>
 8013aee:	6823      	ldr	r3, [r4, #0]
 8013af0:	68e5      	ldr	r5, [r4, #12]
 8013af2:	6832      	ldr	r2, [r6, #0]
 8013af4:	f003 0306 	and.w	r3, r3, #6
 8013af8:	2b04      	cmp	r3, #4
 8013afa:	bf08      	it	eq
 8013afc:	1aad      	subeq	r5, r5, r2
 8013afe:	68a3      	ldr	r3, [r4, #8]
 8013b00:	6922      	ldr	r2, [r4, #16]
 8013b02:	bf0c      	ite	eq
 8013b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b08:	2500      	movne	r5, #0
 8013b0a:	4293      	cmp	r3, r2
 8013b0c:	bfc4      	itt	gt
 8013b0e:	1a9b      	subgt	r3, r3, r2
 8013b10:	18ed      	addgt	r5, r5, r3
 8013b12:	2600      	movs	r6, #0
 8013b14:	341a      	adds	r4, #26
 8013b16:	42b5      	cmp	r5, r6
 8013b18:	d11a      	bne.n	8013b50 <_printf_common+0xc8>
 8013b1a:	2000      	movs	r0, #0
 8013b1c:	e008      	b.n	8013b30 <_printf_common+0xa8>
 8013b1e:	2301      	movs	r3, #1
 8013b20:	4652      	mov	r2, sl
 8013b22:	4649      	mov	r1, r9
 8013b24:	4638      	mov	r0, r7
 8013b26:	47c0      	blx	r8
 8013b28:	3001      	adds	r0, #1
 8013b2a:	d103      	bne.n	8013b34 <_printf_common+0xac>
 8013b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8013b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b34:	3501      	adds	r5, #1
 8013b36:	e7c6      	b.n	8013ac6 <_printf_common+0x3e>
 8013b38:	18e1      	adds	r1, r4, r3
 8013b3a:	1c5a      	adds	r2, r3, #1
 8013b3c:	2030      	movs	r0, #48	; 0x30
 8013b3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013b42:	4422      	add	r2, r4
 8013b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013b48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013b4c:	3302      	adds	r3, #2
 8013b4e:	e7c7      	b.n	8013ae0 <_printf_common+0x58>
 8013b50:	2301      	movs	r3, #1
 8013b52:	4622      	mov	r2, r4
 8013b54:	4649      	mov	r1, r9
 8013b56:	4638      	mov	r0, r7
 8013b58:	47c0      	blx	r8
 8013b5a:	3001      	adds	r0, #1
 8013b5c:	d0e6      	beq.n	8013b2c <_printf_common+0xa4>
 8013b5e:	3601      	adds	r6, #1
 8013b60:	e7d9      	b.n	8013b16 <_printf_common+0x8e>
	...

08013b64 <_printf_i>:
 8013b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b68:	7e0f      	ldrb	r7, [r1, #24]
 8013b6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013b6c:	2f78      	cmp	r7, #120	; 0x78
 8013b6e:	4691      	mov	r9, r2
 8013b70:	4680      	mov	r8, r0
 8013b72:	460c      	mov	r4, r1
 8013b74:	469a      	mov	sl, r3
 8013b76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013b7a:	d807      	bhi.n	8013b8c <_printf_i+0x28>
 8013b7c:	2f62      	cmp	r7, #98	; 0x62
 8013b7e:	d80a      	bhi.n	8013b96 <_printf_i+0x32>
 8013b80:	2f00      	cmp	r7, #0
 8013b82:	f000 80d8 	beq.w	8013d36 <_printf_i+0x1d2>
 8013b86:	2f58      	cmp	r7, #88	; 0x58
 8013b88:	f000 80a3 	beq.w	8013cd2 <_printf_i+0x16e>
 8013b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013b94:	e03a      	b.n	8013c0c <_printf_i+0xa8>
 8013b96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013b9a:	2b15      	cmp	r3, #21
 8013b9c:	d8f6      	bhi.n	8013b8c <_printf_i+0x28>
 8013b9e:	a101      	add	r1, pc, #4	; (adr r1, 8013ba4 <_printf_i+0x40>)
 8013ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013ba4:	08013bfd 	.word	0x08013bfd
 8013ba8:	08013c11 	.word	0x08013c11
 8013bac:	08013b8d 	.word	0x08013b8d
 8013bb0:	08013b8d 	.word	0x08013b8d
 8013bb4:	08013b8d 	.word	0x08013b8d
 8013bb8:	08013b8d 	.word	0x08013b8d
 8013bbc:	08013c11 	.word	0x08013c11
 8013bc0:	08013b8d 	.word	0x08013b8d
 8013bc4:	08013b8d 	.word	0x08013b8d
 8013bc8:	08013b8d 	.word	0x08013b8d
 8013bcc:	08013b8d 	.word	0x08013b8d
 8013bd0:	08013d1d 	.word	0x08013d1d
 8013bd4:	08013c41 	.word	0x08013c41
 8013bd8:	08013cff 	.word	0x08013cff
 8013bdc:	08013b8d 	.word	0x08013b8d
 8013be0:	08013b8d 	.word	0x08013b8d
 8013be4:	08013d3f 	.word	0x08013d3f
 8013be8:	08013b8d 	.word	0x08013b8d
 8013bec:	08013c41 	.word	0x08013c41
 8013bf0:	08013b8d 	.word	0x08013b8d
 8013bf4:	08013b8d 	.word	0x08013b8d
 8013bf8:	08013d07 	.word	0x08013d07
 8013bfc:	682b      	ldr	r3, [r5, #0]
 8013bfe:	1d1a      	adds	r2, r3, #4
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	602a      	str	r2, [r5, #0]
 8013c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	e0a3      	b.n	8013d58 <_printf_i+0x1f4>
 8013c10:	6820      	ldr	r0, [r4, #0]
 8013c12:	6829      	ldr	r1, [r5, #0]
 8013c14:	0606      	lsls	r6, r0, #24
 8013c16:	f101 0304 	add.w	r3, r1, #4
 8013c1a:	d50a      	bpl.n	8013c32 <_printf_i+0xce>
 8013c1c:	680e      	ldr	r6, [r1, #0]
 8013c1e:	602b      	str	r3, [r5, #0]
 8013c20:	2e00      	cmp	r6, #0
 8013c22:	da03      	bge.n	8013c2c <_printf_i+0xc8>
 8013c24:	232d      	movs	r3, #45	; 0x2d
 8013c26:	4276      	negs	r6, r6
 8013c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c2c:	485e      	ldr	r0, [pc, #376]	; (8013da8 <_printf_i+0x244>)
 8013c2e:	230a      	movs	r3, #10
 8013c30:	e019      	b.n	8013c66 <_printf_i+0x102>
 8013c32:	680e      	ldr	r6, [r1, #0]
 8013c34:	602b      	str	r3, [r5, #0]
 8013c36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013c3a:	bf18      	it	ne
 8013c3c:	b236      	sxthne	r6, r6
 8013c3e:	e7ef      	b.n	8013c20 <_printf_i+0xbc>
 8013c40:	682b      	ldr	r3, [r5, #0]
 8013c42:	6820      	ldr	r0, [r4, #0]
 8013c44:	1d19      	adds	r1, r3, #4
 8013c46:	6029      	str	r1, [r5, #0]
 8013c48:	0601      	lsls	r1, r0, #24
 8013c4a:	d501      	bpl.n	8013c50 <_printf_i+0xec>
 8013c4c:	681e      	ldr	r6, [r3, #0]
 8013c4e:	e002      	b.n	8013c56 <_printf_i+0xf2>
 8013c50:	0646      	lsls	r6, r0, #25
 8013c52:	d5fb      	bpl.n	8013c4c <_printf_i+0xe8>
 8013c54:	881e      	ldrh	r6, [r3, #0]
 8013c56:	4854      	ldr	r0, [pc, #336]	; (8013da8 <_printf_i+0x244>)
 8013c58:	2f6f      	cmp	r7, #111	; 0x6f
 8013c5a:	bf0c      	ite	eq
 8013c5c:	2308      	moveq	r3, #8
 8013c5e:	230a      	movne	r3, #10
 8013c60:	2100      	movs	r1, #0
 8013c62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013c66:	6865      	ldr	r5, [r4, #4]
 8013c68:	60a5      	str	r5, [r4, #8]
 8013c6a:	2d00      	cmp	r5, #0
 8013c6c:	bfa2      	ittt	ge
 8013c6e:	6821      	ldrge	r1, [r4, #0]
 8013c70:	f021 0104 	bicge.w	r1, r1, #4
 8013c74:	6021      	strge	r1, [r4, #0]
 8013c76:	b90e      	cbnz	r6, 8013c7c <_printf_i+0x118>
 8013c78:	2d00      	cmp	r5, #0
 8013c7a:	d04d      	beq.n	8013d18 <_printf_i+0x1b4>
 8013c7c:	4615      	mov	r5, r2
 8013c7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8013c82:	fb03 6711 	mls	r7, r3, r1, r6
 8013c86:	5dc7      	ldrb	r7, [r0, r7]
 8013c88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013c8c:	4637      	mov	r7, r6
 8013c8e:	42bb      	cmp	r3, r7
 8013c90:	460e      	mov	r6, r1
 8013c92:	d9f4      	bls.n	8013c7e <_printf_i+0x11a>
 8013c94:	2b08      	cmp	r3, #8
 8013c96:	d10b      	bne.n	8013cb0 <_printf_i+0x14c>
 8013c98:	6823      	ldr	r3, [r4, #0]
 8013c9a:	07de      	lsls	r6, r3, #31
 8013c9c:	d508      	bpl.n	8013cb0 <_printf_i+0x14c>
 8013c9e:	6923      	ldr	r3, [r4, #16]
 8013ca0:	6861      	ldr	r1, [r4, #4]
 8013ca2:	4299      	cmp	r1, r3
 8013ca4:	bfde      	ittt	le
 8013ca6:	2330      	movle	r3, #48	; 0x30
 8013ca8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013cac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013cb0:	1b52      	subs	r2, r2, r5
 8013cb2:	6122      	str	r2, [r4, #16]
 8013cb4:	f8cd a000 	str.w	sl, [sp]
 8013cb8:	464b      	mov	r3, r9
 8013cba:	aa03      	add	r2, sp, #12
 8013cbc:	4621      	mov	r1, r4
 8013cbe:	4640      	mov	r0, r8
 8013cc0:	f7ff fee2 	bl	8013a88 <_printf_common>
 8013cc4:	3001      	adds	r0, #1
 8013cc6:	d14c      	bne.n	8013d62 <_printf_i+0x1fe>
 8013cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8013ccc:	b004      	add	sp, #16
 8013cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cd2:	4835      	ldr	r0, [pc, #212]	; (8013da8 <_printf_i+0x244>)
 8013cd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013cd8:	6829      	ldr	r1, [r5, #0]
 8013cda:	6823      	ldr	r3, [r4, #0]
 8013cdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8013ce0:	6029      	str	r1, [r5, #0]
 8013ce2:	061d      	lsls	r5, r3, #24
 8013ce4:	d514      	bpl.n	8013d10 <_printf_i+0x1ac>
 8013ce6:	07df      	lsls	r7, r3, #31
 8013ce8:	bf44      	itt	mi
 8013cea:	f043 0320 	orrmi.w	r3, r3, #32
 8013cee:	6023      	strmi	r3, [r4, #0]
 8013cf0:	b91e      	cbnz	r6, 8013cfa <_printf_i+0x196>
 8013cf2:	6823      	ldr	r3, [r4, #0]
 8013cf4:	f023 0320 	bic.w	r3, r3, #32
 8013cf8:	6023      	str	r3, [r4, #0]
 8013cfa:	2310      	movs	r3, #16
 8013cfc:	e7b0      	b.n	8013c60 <_printf_i+0xfc>
 8013cfe:	6823      	ldr	r3, [r4, #0]
 8013d00:	f043 0320 	orr.w	r3, r3, #32
 8013d04:	6023      	str	r3, [r4, #0]
 8013d06:	2378      	movs	r3, #120	; 0x78
 8013d08:	4828      	ldr	r0, [pc, #160]	; (8013dac <_printf_i+0x248>)
 8013d0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013d0e:	e7e3      	b.n	8013cd8 <_printf_i+0x174>
 8013d10:	0659      	lsls	r1, r3, #25
 8013d12:	bf48      	it	mi
 8013d14:	b2b6      	uxthmi	r6, r6
 8013d16:	e7e6      	b.n	8013ce6 <_printf_i+0x182>
 8013d18:	4615      	mov	r5, r2
 8013d1a:	e7bb      	b.n	8013c94 <_printf_i+0x130>
 8013d1c:	682b      	ldr	r3, [r5, #0]
 8013d1e:	6826      	ldr	r6, [r4, #0]
 8013d20:	6961      	ldr	r1, [r4, #20]
 8013d22:	1d18      	adds	r0, r3, #4
 8013d24:	6028      	str	r0, [r5, #0]
 8013d26:	0635      	lsls	r5, r6, #24
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	d501      	bpl.n	8013d30 <_printf_i+0x1cc>
 8013d2c:	6019      	str	r1, [r3, #0]
 8013d2e:	e002      	b.n	8013d36 <_printf_i+0x1d2>
 8013d30:	0670      	lsls	r0, r6, #25
 8013d32:	d5fb      	bpl.n	8013d2c <_printf_i+0x1c8>
 8013d34:	8019      	strh	r1, [r3, #0]
 8013d36:	2300      	movs	r3, #0
 8013d38:	6123      	str	r3, [r4, #16]
 8013d3a:	4615      	mov	r5, r2
 8013d3c:	e7ba      	b.n	8013cb4 <_printf_i+0x150>
 8013d3e:	682b      	ldr	r3, [r5, #0]
 8013d40:	1d1a      	adds	r2, r3, #4
 8013d42:	602a      	str	r2, [r5, #0]
 8013d44:	681d      	ldr	r5, [r3, #0]
 8013d46:	6862      	ldr	r2, [r4, #4]
 8013d48:	2100      	movs	r1, #0
 8013d4a:	4628      	mov	r0, r5
 8013d4c:	f7ec fac8 	bl	80002e0 <memchr>
 8013d50:	b108      	cbz	r0, 8013d56 <_printf_i+0x1f2>
 8013d52:	1b40      	subs	r0, r0, r5
 8013d54:	6060      	str	r0, [r4, #4]
 8013d56:	6863      	ldr	r3, [r4, #4]
 8013d58:	6123      	str	r3, [r4, #16]
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d60:	e7a8      	b.n	8013cb4 <_printf_i+0x150>
 8013d62:	6923      	ldr	r3, [r4, #16]
 8013d64:	462a      	mov	r2, r5
 8013d66:	4649      	mov	r1, r9
 8013d68:	4640      	mov	r0, r8
 8013d6a:	47d0      	blx	sl
 8013d6c:	3001      	adds	r0, #1
 8013d6e:	d0ab      	beq.n	8013cc8 <_printf_i+0x164>
 8013d70:	6823      	ldr	r3, [r4, #0]
 8013d72:	079b      	lsls	r3, r3, #30
 8013d74:	d413      	bmi.n	8013d9e <_printf_i+0x23a>
 8013d76:	68e0      	ldr	r0, [r4, #12]
 8013d78:	9b03      	ldr	r3, [sp, #12]
 8013d7a:	4298      	cmp	r0, r3
 8013d7c:	bfb8      	it	lt
 8013d7e:	4618      	movlt	r0, r3
 8013d80:	e7a4      	b.n	8013ccc <_printf_i+0x168>
 8013d82:	2301      	movs	r3, #1
 8013d84:	4632      	mov	r2, r6
 8013d86:	4649      	mov	r1, r9
 8013d88:	4640      	mov	r0, r8
 8013d8a:	47d0      	blx	sl
 8013d8c:	3001      	adds	r0, #1
 8013d8e:	d09b      	beq.n	8013cc8 <_printf_i+0x164>
 8013d90:	3501      	adds	r5, #1
 8013d92:	68e3      	ldr	r3, [r4, #12]
 8013d94:	9903      	ldr	r1, [sp, #12]
 8013d96:	1a5b      	subs	r3, r3, r1
 8013d98:	42ab      	cmp	r3, r5
 8013d9a:	dcf2      	bgt.n	8013d82 <_printf_i+0x21e>
 8013d9c:	e7eb      	b.n	8013d76 <_printf_i+0x212>
 8013d9e:	2500      	movs	r5, #0
 8013da0:	f104 0619 	add.w	r6, r4, #25
 8013da4:	e7f5      	b.n	8013d92 <_printf_i+0x22e>
 8013da6:	bf00      	nop
 8013da8:	080176f1 	.word	0x080176f1
 8013dac:	08017702 	.word	0x08017702

08013db0 <_sbrk_r>:
 8013db0:	b538      	push	{r3, r4, r5, lr}
 8013db2:	4d06      	ldr	r5, [pc, #24]	; (8013dcc <_sbrk_r+0x1c>)
 8013db4:	2300      	movs	r3, #0
 8013db6:	4604      	mov	r4, r0
 8013db8:	4608      	mov	r0, r1
 8013dba:	602b      	str	r3, [r5, #0]
 8013dbc:	f7ec ff1e 	bl	8000bfc <_sbrk>
 8013dc0:	1c43      	adds	r3, r0, #1
 8013dc2:	d102      	bne.n	8013dca <_sbrk_r+0x1a>
 8013dc4:	682b      	ldr	r3, [r5, #0]
 8013dc6:	b103      	cbz	r3, 8013dca <_sbrk_r+0x1a>
 8013dc8:	6023      	str	r3, [r4, #0]
 8013dca:	bd38      	pop	{r3, r4, r5, pc}
 8013dcc:	24007488 	.word	0x24007488

08013dd0 <__sread>:
 8013dd0:	b510      	push	{r4, lr}
 8013dd2:	460c      	mov	r4, r1
 8013dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dd8:	f000 fa9e 	bl	8014318 <_read_r>
 8013ddc:	2800      	cmp	r0, #0
 8013dde:	bfab      	itete	ge
 8013de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013de2:	89a3      	ldrhlt	r3, [r4, #12]
 8013de4:	181b      	addge	r3, r3, r0
 8013de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013dea:	bfac      	ite	ge
 8013dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8013dee:	81a3      	strhlt	r3, [r4, #12]
 8013df0:	bd10      	pop	{r4, pc}

08013df2 <__swrite>:
 8013df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013df6:	461f      	mov	r7, r3
 8013df8:	898b      	ldrh	r3, [r1, #12]
 8013dfa:	05db      	lsls	r3, r3, #23
 8013dfc:	4605      	mov	r5, r0
 8013dfe:	460c      	mov	r4, r1
 8013e00:	4616      	mov	r6, r2
 8013e02:	d505      	bpl.n	8013e10 <__swrite+0x1e>
 8013e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e08:	2302      	movs	r3, #2
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	f000 f9d0 	bl	80141b0 <_lseek_r>
 8013e10:	89a3      	ldrh	r3, [r4, #12]
 8013e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013e1a:	81a3      	strh	r3, [r4, #12]
 8013e1c:	4632      	mov	r2, r6
 8013e1e:	463b      	mov	r3, r7
 8013e20:	4628      	mov	r0, r5
 8013e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e26:	f000 b869 	b.w	8013efc <_write_r>

08013e2a <__sseek>:
 8013e2a:	b510      	push	{r4, lr}
 8013e2c:	460c      	mov	r4, r1
 8013e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e32:	f000 f9bd 	bl	80141b0 <_lseek_r>
 8013e36:	1c43      	adds	r3, r0, #1
 8013e38:	89a3      	ldrh	r3, [r4, #12]
 8013e3a:	bf15      	itete	ne
 8013e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8013e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013e46:	81a3      	strheq	r3, [r4, #12]
 8013e48:	bf18      	it	ne
 8013e4a:	81a3      	strhne	r3, [r4, #12]
 8013e4c:	bd10      	pop	{r4, pc}

08013e4e <__sclose>:
 8013e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e52:	f000 b8db 	b.w	801400c <_close_r>
	...

08013e58 <__swbuf_r>:
 8013e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e5a:	460e      	mov	r6, r1
 8013e5c:	4614      	mov	r4, r2
 8013e5e:	4605      	mov	r5, r0
 8013e60:	b118      	cbz	r0, 8013e6a <__swbuf_r+0x12>
 8013e62:	6983      	ldr	r3, [r0, #24]
 8013e64:	b90b      	cbnz	r3, 8013e6a <__swbuf_r+0x12>
 8013e66:	f7ff f9bf 	bl	80131e8 <__sinit>
 8013e6a:	4b21      	ldr	r3, [pc, #132]	; (8013ef0 <__swbuf_r+0x98>)
 8013e6c:	429c      	cmp	r4, r3
 8013e6e:	d12b      	bne.n	8013ec8 <__swbuf_r+0x70>
 8013e70:	686c      	ldr	r4, [r5, #4]
 8013e72:	69a3      	ldr	r3, [r4, #24]
 8013e74:	60a3      	str	r3, [r4, #8]
 8013e76:	89a3      	ldrh	r3, [r4, #12]
 8013e78:	071a      	lsls	r2, r3, #28
 8013e7a:	d52f      	bpl.n	8013edc <__swbuf_r+0x84>
 8013e7c:	6923      	ldr	r3, [r4, #16]
 8013e7e:	b36b      	cbz	r3, 8013edc <__swbuf_r+0x84>
 8013e80:	6923      	ldr	r3, [r4, #16]
 8013e82:	6820      	ldr	r0, [r4, #0]
 8013e84:	1ac0      	subs	r0, r0, r3
 8013e86:	6963      	ldr	r3, [r4, #20]
 8013e88:	b2f6      	uxtb	r6, r6
 8013e8a:	4283      	cmp	r3, r0
 8013e8c:	4637      	mov	r7, r6
 8013e8e:	dc04      	bgt.n	8013e9a <__swbuf_r+0x42>
 8013e90:	4621      	mov	r1, r4
 8013e92:	4628      	mov	r0, r5
 8013e94:	f000 f950 	bl	8014138 <_fflush_r>
 8013e98:	bb30      	cbnz	r0, 8013ee8 <__swbuf_r+0x90>
 8013e9a:	68a3      	ldr	r3, [r4, #8]
 8013e9c:	3b01      	subs	r3, #1
 8013e9e:	60a3      	str	r3, [r4, #8]
 8013ea0:	6823      	ldr	r3, [r4, #0]
 8013ea2:	1c5a      	adds	r2, r3, #1
 8013ea4:	6022      	str	r2, [r4, #0]
 8013ea6:	701e      	strb	r6, [r3, #0]
 8013ea8:	6963      	ldr	r3, [r4, #20]
 8013eaa:	3001      	adds	r0, #1
 8013eac:	4283      	cmp	r3, r0
 8013eae:	d004      	beq.n	8013eba <__swbuf_r+0x62>
 8013eb0:	89a3      	ldrh	r3, [r4, #12]
 8013eb2:	07db      	lsls	r3, r3, #31
 8013eb4:	d506      	bpl.n	8013ec4 <__swbuf_r+0x6c>
 8013eb6:	2e0a      	cmp	r6, #10
 8013eb8:	d104      	bne.n	8013ec4 <__swbuf_r+0x6c>
 8013eba:	4621      	mov	r1, r4
 8013ebc:	4628      	mov	r0, r5
 8013ebe:	f000 f93b 	bl	8014138 <_fflush_r>
 8013ec2:	b988      	cbnz	r0, 8013ee8 <__swbuf_r+0x90>
 8013ec4:	4638      	mov	r0, r7
 8013ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ec8:	4b0a      	ldr	r3, [pc, #40]	; (8013ef4 <__swbuf_r+0x9c>)
 8013eca:	429c      	cmp	r4, r3
 8013ecc:	d101      	bne.n	8013ed2 <__swbuf_r+0x7a>
 8013ece:	68ac      	ldr	r4, [r5, #8]
 8013ed0:	e7cf      	b.n	8013e72 <__swbuf_r+0x1a>
 8013ed2:	4b09      	ldr	r3, [pc, #36]	; (8013ef8 <__swbuf_r+0xa0>)
 8013ed4:	429c      	cmp	r4, r3
 8013ed6:	bf08      	it	eq
 8013ed8:	68ec      	ldreq	r4, [r5, #12]
 8013eda:	e7ca      	b.n	8013e72 <__swbuf_r+0x1a>
 8013edc:	4621      	mov	r1, r4
 8013ede:	4628      	mov	r0, r5
 8013ee0:	f000 f81e 	bl	8013f20 <__swsetup_r>
 8013ee4:	2800      	cmp	r0, #0
 8013ee6:	d0cb      	beq.n	8013e80 <__swbuf_r+0x28>
 8013ee8:	f04f 37ff 	mov.w	r7, #4294967295
 8013eec:	e7ea      	b.n	8013ec4 <__swbuf_r+0x6c>
 8013eee:	bf00      	nop
 8013ef0:	080176a0 	.word	0x080176a0
 8013ef4:	080176c0 	.word	0x080176c0
 8013ef8:	08017680 	.word	0x08017680

08013efc <_write_r>:
 8013efc:	b538      	push	{r3, r4, r5, lr}
 8013efe:	4d07      	ldr	r5, [pc, #28]	; (8013f1c <_write_r+0x20>)
 8013f00:	4604      	mov	r4, r0
 8013f02:	4608      	mov	r0, r1
 8013f04:	4611      	mov	r1, r2
 8013f06:	2200      	movs	r2, #0
 8013f08:	602a      	str	r2, [r5, #0]
 8013f0a:	461a      	mov	r2, r3
 8013f0c:	f7ec fe25 	bl	8000b5a <_write>
 8013f10:	1c43      	adds	r3, r0, #1
 8013f12:	d102      	bne.n	8013f1a <_write_r+0x1e>
 8013f14:	682b      	ldr	r3, [r5, #0]
 8013f16:	b103      	cbz	r3, 8013f1a <_write_r+0x1e>
 8013f18:	6023      	str	r3, [r4, #0]
 8013f1a:	bd38      	pop	{r3, r4, r5, pc}
 8013f1c:	24007488 	.word	0x24007488

08013f20 <__swsetup_r>:
 8013f20:	4b32      	ldr	r3, [pc, #200]	; (8013fec <__swsetup_r+0xcc>)
 8013f22:	b570      	push	{r4, r5, r6, lr}
 8013f24:	681d      	ldr	r5, [r3, #0]
 8013f26:	4606      	mov	r6, r0
 8013f28:	460c      	mov	r4, r1
 8013f2a:	b125      	cbz	r5, 8013f36 <__swsetup_r+0x16>
 8013f2c:	69ab      	ldr	r3, [r5, #24]
 8013f2e:	b913      	cbnz	r3, 8013f36 <__swsetup_r+0x16>
 8013f30:	4628      	mov	r0, r5
 8013f32:	f7ff f959 	bl	80131e8 <__sinit>
 8013f36:	4b2e      	ldr	r3, [pc, #184]	; (8013ff0 <__swsetup_r+0xd0>)
 8013f38:	429c      	cmp	r4, r3
 8013f3a:	d10f      	bne.n	8013f5c <__swsetup_r+0x3c>
 8013f3c:	686c      	ldr	r4, [r5, #4]
 8013f3e:	89a3      	ldrh	r3, [r4, #12]
 8013f40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013f44:	0719      	lsls	r1, r3, #28
 8013f46:	d42c      	bmi.n	8013fa2 <__swsetup_r+0x82>
 8013f48:	06dd      	lsls	r5, r3, #27
 8013f4a:	d411      	bmi.n	8013f70 <__swsetup_r+0x50>
 8013f4c:	2309      	movs	r3, #9
 8013f4e:	6033      	str	r3, [r6, #0]
 8013f50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013f54:	81a3      	strh	r3, [r4, #12]
 8013f56:	f04f 30ff 	mov.w	r0, #4294967295
 8013f5a:	e03e      	b.n	8013fda <__swsetup_r+0xba>
 8013f5c:	4b25      	ldr	r3, [pc, #148]	; (8013ff4 <__swsetup_r+0xd4>)
 8013f5e:	429c      	cmp	r4, r3
 8013f60:	d101      	bne.n	8013f66 <__swsetup_r+0x46>
 8013f62:	68ac      	ldr	r4, [r5, #8]
 8013f64:	e7eb      	b.n	8013f3e <__swsetup_r+0x1e>
 8013f66:	4b24      	ldr	r3, [pc, #144]	; (8013ff8 <__swsetup_r+0xd8>)
 8013f68:	429c      	cmp	r4, r3
 8013f6a:	bf08      	it	eq
 8013f6c:	68ec      	ldreq	r4, [r5, #12]
 8013f6e:	e7e6      	b.n	8013f3e <__swsetup_r+0x1e>
 8013f70:	0758      	lsls	r0, r3, #29
 8013f72:	d512      	bpl.n	8013f9a <__swsetup_r+0x7a>
 8013f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f76:	b141      	cbz	r1, 8013f8a <__swsetup_r+0x6a>
 8013f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f7c:	4299      	cmp	r1, r3
 8013f7e:	d002      	beq.n	8013f86 <__swsetup_r+0x66>
 8013f80:	4630      	mov	r0, r6
 8013f82:	f7ff f9eb 	bl	801335c <_free_r>
 8013f86:	2300      	movs	r3, #0
 8013f88:	6363      	str	r3, [r4, #52]	; 0x34
 8013f8a:	89a3      	ldrh	r3, [r4, #12]
 8013f8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013f90:	81a3      	strh	r3, [r4, #12]
 8013f92:	2300      	movs	r3, #0
 8013f94:	6063      	str	r3, [r4, #4]
 8013f96:	6923      	ldr	r3, [r4, #16]
 8013f98:	6023      	str	r3, [r4, #0]
 8013f9a:	89a3      	ldrh	r3, [r4, #12]
 8013f9c:	f043 0308 	orr.w	r3, r3, #8
 8013fa0:	81a3      	strh	r3, [r4, #12]
 8013fa2:	6923      	ldr	r3, [r4, #16]
 8013fa4:	b94b      	cbnz	r3, 8013fba <__swsetup_r+0x9a>
 8013fa6:	89a3      	ldrh	r3, [r4, #12]
 8013fa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013fb0:	d003      	beq.n	8013fba <__swsetup_r+0x9a>
 8013fb2:	4621      	mov	r1, r4
 8013fb4:	4630      	mov	r0, r6
 8013fb6:	f000 f933 	bl	8014220 <__smakebuf_r>
 8013fba:	89a0      	ldrh	r0, [r4, #12]
 8013fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013fc0:	f010 0301 	ands.w	r3, r0, #1
 8013fc4:	d00a      	beq.n	8013fdc <__swsetup_r+0xbc>
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	60a3      	str	r3, [r4, #8]
 8013fca:	6963      	ldr	r3, [r4, #20]
 8013fcc:	425b      	negs	r3, r3
 8013fce:	61a3      	str	r3, [r4, #24]
 8013fd0:	6923      	ldr	r3, [r4, #16]
 8013fd2:	b943      	cbnz	r3, 8013fe6 <__swsetup_r+0xc6>
 8013fd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013fd8:	d1ba      	bne.n	8013f50 <__swsetup_r+0x30>
 8013fda:	bd70      	pop	{r4, r5, r6, pc}
 8013fdc:	0781      	lsls	r1, r0, #30
 8013fde:	bf58      	it	pl
 8013fe0:	6963      	ldrpl	r3, [r4, #20]
 8013fe2:	60a3      	str	r3, [r4, #8]
 8013fe4:	e7f4      	b.n	8013fd0 <__swsetup_r+0xb0>
 8013fe6:	2000      	movs	r0, #0
 8013fe8:	e7f7      	b.n	8013fda <__swsetup_r+0xba>
 8013fea:	bf00      	nop
 8013fec:	24000034 	.word	0x24000034
 8013ff0:	080176a0 	.word	0x080176a0
 8013ff4:	080176c0 	.word	0x080176c0
 8013ff8:	08017680 	.word	0x08017680

08013ffc <abort>:
 8013ffc:	b508      	push	{r3, lr}
 8013ffe:	2006      	movs	r0, #6
 8014000:	f000 f9c4 	bl	801438c <raise>
 8014004:	2001      	movs	r0, #1
 8014006:	f7ec fd81 	bl	8000b0c <_exit>
	...

0801400c <_close_r>:
 801400c:	b538      	push	{r3, r4, r5, lr}
 801400e:	4d06      	ldr	r5, [pc, #24]	; (8014028 <_close_r+0x1c>)
 8014010:	2300      	movs	r3, #0
 8014012:	4604      	mov	r4, r0
 8014014:	4608      	mov	r0, r1
 8014016:	602b      	str	r3, [r5, #0]
 8014018:	f7ec fdbb 	bl	8000b92 <_close>
 801401c:	1c43      	adds	r3, r0, #1
 801401e:	d102      	bne.n	8014026 <_close_r+0x1a>
 8014020:	682b      	ldr	r3, [r5, #0]
 8014022:	b103      	cbz	r3, 8014026 <_close_r+0x1a>
 8014024:	6023      	str	r3, [r4, #0]
 8014026:	bd38      	pop	{r3, r4, r5, pc}
 8014028:	24007488 	.word	0x24007488

0801402c <__sflush_r>:
 801402c:	898a      	ldrh	r2, [r1, #12]
 801402e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014032:	4605      	mov	r5, r0
 8014034:	0710      	lsls	r0, r2, #28
 8014036:	460c      	mov	r4, r1
 8014038:	d458      	bmi.n	80140ec <__sflush_r+0xc0>
 801403a:	684b      	ldr	r3, [r1, #4]
 801403c:	2b00      	cmp	r3, #0
 801403e:	dc05      	bgt.n	801404c <__sflush_r+0x20>
 8014040:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014042:	2b00      	cmp	r3, #0
 8014044:	dc02      	bgt.n	801404c <__sflush_r+0x20>
 8014046:	2000      	movs	r0, #0
 8014048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801404c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801404e:	2e00      	cmp	r6, #0
 8014050:	d0f9      	beq.n	8014046 <__sflush_r+0x1a>
 8014052:	2300      	movs	r3, #0
 8014054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014058:	682f      	ldr	r7, [r5, #0]
 801405a:	602b      	str	r3, [r5, #0]
 801405c:	d032      	beq.n	80140c4 <__sflush_r+0x98>
 801405e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014060:	89a3      	ldrh	r3, [r4, #12]
 8014062:	075a      	lsls	r2, r3, #29
 8014064:	d505      	bpl.n	8014072 <__sflush_r+0x46>
 8014066:	6863      	ldr	r3, [r4, #4]
 8014068:	1ac0      	subs	r0, r0, r3
 801406a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801406c:	b10b      	cbz	r3, 8014072 <__sflush_r+0x46>
 801406e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014070:	1ac0      	subs	r0, r0, r3
 8014072:	2300      	movs	r3, #0
 8014074:	4602      	mov	r2, r0
 8014076:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014078:	6a21      	ldr	r1, [r4, #32]
 801407a:	4628      	mov	r0, r5
 801407c:	47b0      	blx	r6
 801407e:	1c43      	adds	r3, r0, #1
 8014080:	89a3      	ldrh	r3, [r4, #12]
 8014082:	d106      	bne.n	8014092 <__sflush_r+0x66>
 8014084:	6829      	ldr	r1, [r5, #0]
 8014086:	291d      	cmp	r1, #29
 8014088:	d82c      	bhi.n	80140e4 <__sflush_r+0xb8>
 801408a:	4a2a      	ldr	r2, [pc, #168]	; (8014134 <__sflush_r+0x108>)
 801408c:	40ca      	lsrs	r2, r1
 801408e:	07d6      	lsls	r6, r2, #31
 8014090:	d528      	bpl.n	80140e4 <__sflush_r+0xb8>
 8014092:	2200      	movs	r2, #0
 8014094:	6062      	str	r2, [r4, #4]
 8014096:	04d9      	lsls	r1, r3, #19
 8014098:	6922      	ldr	r2, [r4, #16]
 801409a:	6022      	str	r2, [r4, #0]
 801409c:	d504      	bpl.n	80140a8 <__sflush_r+0x7c>
 801409e:	1c42      	adds	r2, r0, #1
 80140a0:	d101      	bne.n	80140a6 <__sflush_r+0x7a>
 80140a2:	682b      	ldr	r3, [r5, #0]
 80140a4:	b903      	cbnz	r3, 80140a8 <__sflush_r+0x7c>
 80140a6:	6560      	str	r0, [r4, #84]	; 0x54
 80140a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80140aa:	602f      	str	r7, [r5, #0]
 80140ac:	2900      	cmp	r1, #0
 80140ae:	d0ca      	beq.n	8014046 <__sflush_r+0x1a>
 80140b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80140b4:	4299      	cmp	r1, r3
 80140b6:	d002      	beq.n	80140be <__sflush_r+0x92>
 80140b8:	4628      	mov	r0, r5
 80140ba:	f7ff f94f 	bl	801335c <_free_r>
 80140be:	2000      	movs	r0, #0
 80140c0:	6360      	str	r0, [r4, #52]	; 0x34
 80140c2:	e7c1      	b.n	8014048 <__sflush_r+0x1c>
 80140c4:	6a21      	ldr	r1, [r4, #32]
 80140c6:	2301      	movs	r3, #1
 80140c8:	4628      	mov	r0, r5
 80140ca:	47b0      	blx	r6
 80140cc:	1c41      	adds	r1, r0, #1
 80140ce:	d1c7      	bne.n	8014060 <__sflush_r+0x34>
 80140d0:	682b      	ldr	r3, [r5, #0]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d0c4      	beq.n	8014060 <__sflush_r+0x34>
 80140d6:	2b1d      	cmp	r3, #29
 80140d8:	d001      	beq.n	80140de <__sflush_r+0xb2>
 80140da:	2b16      	cmp	r3, #22
 80140dc:	d101      	bne.n	80140e2 <__sflush_r+0xb6>
 80140de:	602f      	str	r7, [r5, #0]
 80140e0:	e7b1      	b.n	8014046 <__sflush_r+0x1a>
 80140e2:	89a3      	ldrh	r3, [r4, #12]
 80140e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140e8:	81a3      	strh	r3, [r4, #12]
 80140ea:	e7ad      	b.n	8014048 <__sflush_r+0x1c>
 80140ec:	690f      	ldr	r7, [r1, #16]
 80140ee:	2f00      	cmp	r7, #0
 80140f0:	d0a9      	beq.n	8014046 <__sflush_r+0x1a>
 80140f2:	0793      	lsls	r3, r2, #30
 80140f4:	680e      	ldr	r6, [r1, #0]
 80140f6:	bf08      	it	eq
 80140f8:	694b      	ldreq	r3, [r1, #20]
 80140fa:	600f      	str	r7, [r1, #0]
 80140fc:	bf18      	it	ne
 80140fe:	2300      	movne	r3, #0
 8014100:	eba6 0807 	sub.w	r8, r6, r7
 8014104:	608b      	str	r3, [r1, #8]
 8014106:	f1b8 0f00 	cmp.w	r8, #0
 801410a:	dd9c      	ble.n	8014046 <__sflush_r+0x1a>
 801410c:	6a21      	ldr	r1, [r4, #32]
 801410e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014110:	4643      	mov	r3, r8
 8014112:	463a      	mov	r2, r7
 8014114:	4628      	mov	r0, r5
 8014116:	47b0      	blx	r6
 8014118:	2800      	cmp	r0, #0
 801411a:	dc06      	bgt.n	801412a <__sflush_r+0xfe>
 801411c:	89a3      	ldrh	r3, [r4, #12]
 801411e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014122:	81a3      	strh	r3, [r4, #12]
 8014124:	f04f 30ff 	mov.w	r0, #4294967295
 8014128:	e78e      	b.n	8014048 <__sflush_r+0x1c>
 801412a:	4407      	add	r7, r0
 801412c:	eba8 0800 	sub.w	r8, r8, r0
 8014130:	e7e9      	b.n	8014106 <__sflush_r+0xda>
 8014132:	bf00      	nop
 8014134:	20400001 	.word	0x20400001

08014138 <_fflush_r>:
 8014138:	b538      	push	{r3, r4, r5, lr}
 801413a:	690b      	ldr	r3, [r1, #16]
 801413c:	4605      	mov	r5, r0
 801413e:	460c      	mov	r4, r1
 8014140:	b913      	cbnz	r3, 8014148 <_fflush_r+0x10>
 8014142:	2500      	movs	r5, #0
 8014144:	4628      	mov	r0, r5
 8014146:	bd38      	pop	{r3, r4, r5, pc}
 8014148:	b118      	cbz	r0, 8014152 <_fflush_r+0x1a>
 801414a:	6983      	ldr	r3, [r0, #24]
 801414c:	b90b      	cbnz	r3, 8014152 <_fflush_r+0x1a>
 801414e:	f7ff f84b 	bl	80131e8 <__sinit>
 8014152:	4b14      	ldr	r3, [pc, #80]	; (80141a4 <_fflush_r+0x6c>)
 8014154:	429c      	cmp	r4, r3
 8014156:	d11b      	bne.n	8014190 <_fflush_r+0x58>
 8014158:	686c      	ldr	r4, [r5, #4]
 801415a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d0ef      	beq.n	8014142 <_fflush_r+0xa>
 8014162:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014164:	07d0      	lsls	r0, r2, #31
 8014166:	d404      	bmi.n	8014172 <_fflush_r+0x3a>
 8014168:	0599      	lsls	r1, r3, #22
 801416a:	d402      	bmi.n	8014172 <_fflush_r+0x3a>
 801416c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801416e:	f7ff f8eb 	bl	8013348 <__retarget_lock_acquire_recursive>
 8014172:	4628      	mov	r0, r5
 8014174:	4621      	mov	r1, r4
 8014176:	f7ff ff59 	bl	801402c <__sflush_r>
 801417a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801417c:	07da      	lsls	r2, r3, #31
 801417e:	4605      	mov	r5, r0
 8014180:	d4e0      	bmi.n	8014144 <_fflush_r+0xc>
 8014182:	89a3      	ldrh	r3, [r4, #12]
 8014184:	059b      	lsls	r3, r3, #22
 8014186:	d4dd      	bmi.n	8014144 <_fflush_r+0xc>
 8014188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801418a:	f7ff f8de 	bl	801334a <__retarget_lock_release_recursive>
 801418e:	e7d9      	b.n	8014144 <_fflush_r+0xc>
 8014190:	4b05      	ldr	r3, [pc, #20]	; (80141a8 <_fflush_r+0x70>)
 8014192:	429c      	cmp	r4, r3
 8014194:	d101      	bne.n	801419a <_fflush_r+0x62>
 8014196:	68ac      	ldr	r4, [r5, #8]
 8014198:	e7df      	b.n	801415a <_fflush_r+0x22>
 801419a:	4b04      	ldr	r3, [pc, #16]	; (80141ac <_fflush_r+0x74>)
 801419c:	429c      	cmp	r4, r3
 801419e:	bf08      	it	eq
 80141a0:	68ec      	ldreq	r4, [r5, #12]
 80141a2:	e7da      	b.n	801415a <_fflush_r+0x22>
 80141a4:	080176a0 	.word	0x080176a0
 80141a8:	080176c0 	.word	0x080176c0
 80141ac:	08017680 	.word	0x08017680

080141b0 <_lseek_r>:
 80141b0:	b538      	push	{r3, r4, r5, lr}
 80141b2:	4d07      	ldr	r5, [pc, #28]	; (80141d0 <_lseek_r+0x20>)
 80141b4:	4604      	mov	r4, r0
 80141b6:	4608      	mov	r0, r1
 80141b8:	4611      	mov	r1, r2
 80141ba:	2200      	movs	r2, #0
 80141bc:	602a      	str	r2, [r5, #0]
 80141be:	461a      	mov	r2, r3
 80141c0:	f7ec fd0e 	bl	8000be0 <_lseek>
 80141c4:	1c43      	adds	r3, r0, #1
 80141c6:	d102      	bne.n	80141ce <_lseek_r+0x1e>
 80141c8:	682b      	ldr	r3, [r5, #0]
 80141ca:	b103      	cbz	r3, 80141ce <_lseek_r+0x1e>
 80141cc:	6023      	str	r3, [r4, #0]
 80141ce:	bd38      	pop	{r3, r4, r5, pc}
 80141d0:	24007488 	.word	0x24007488

080141d4 <__swhatbuf_r>:
 80141d4:	b570      	push	{r4, r5, r6, lr}
 80141d6:	460e      	mov	r6, r1
 80141d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141dc:	2900      	cmp	r1, #0
 80141de:	b096      	sub	sp, #88	; 0x58
 80141e0:	4614      	mov	r4, r2
 80141e2:	461d      	mov	r5, r3
 80141e4:	da08      	bge.n	80141f8 <__swhatbuf_r+0x24>
 80141e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80141ea:	2200      	movs	r2, #0
 80141ec:	602a      	str	r2, [r5, #0]
 80141ee:	061a      	lsls	r2, r3, #24
 80141f0:	d410      	bmi.n	8014214 <__swhatbuf_r+0x40>
 80141f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80141f6:	e00e      	b.n	8014216 <__swhatbuf_r+0x42>
 80141f8:	466a      	mov	r2, sp
 80141fa:	f000 f8e3 	bl	80143c4 <_fstat_r>
 80141fe:	2800      	cmp	r0, #0
 8014200:	dbf1      	blt.n	80141e6 <__swhatbuf_r+0x12>
 8014202:	9a01      	ldr	r2, [sp, #4]
 8014204:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014208:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801420c:	425a      	negs	r2, r3
 801420e:	415a      	adcs	r2, r3
 8014210:	602a      	str	r2, [r5, #0]
 8014212:	e7ee      	b.n	80141f2 <__swhatbuf_r+0x1e>
 8014214:	2340      	movs	r3, #64	; 0x40
 8014216:	2000      	movs	r0, #0
 8014218:	6023      	str	r3, [r4, #0]
 801421a:	b016      	add	sp, #88	; 0x58
 801421c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014220 <__smakebuf_r>:
 8014220:	898b      	ldrh	r3, [r1, #12]
 8014222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014224:	079d      	lsls	r5, r3, #30
 8014226:	4606      	mov	r6, r0
 8014228:	460c      	mov	r4, r1
 801422a:	d507      	bpl.n	801423c <__smakebuf_r+0x1c>
 801422c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014230:	6023      	str	r3, [r4, #0]
 8014232:	6123      	str	r3, [r4, #16]
 8014234:	2301      	movs	r3, #1
 8014236:	6163      	str	r3, [r4, #20]
 8014238:	b002      	add	sp, #8
 801423a:	bd70      	pop	{r4, r5, r6, pc}
 801423c:	ab01      	add	r3, sp, #4
 801423e:	466a      	mov	r2, sp
 8014240:	f7ff ffc8 	bl	80141d4 <__swhatbuf_r>
 8014244:	9900      	ldr	r1, [sp, #0]
 8014246:	4605      	mov	r5, r0
 8014248:	4630      	mov	r0, r6
 801424a:	f7ff f8f3 	bl	8013434 <_malloc_r>
 801424e:	b948      	cbnz	r0, 8014264 <__smakebuf_r+0x44>
 8014250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014254:	059a      	lsls	r2, r3, #22
 8014256:	d4ef      	bmi.n	8014238 <__smakebuf_r+0x18>
 8014258:	f023 0303 	bic.w	r3, r3, #3
 801425c:	f043 0302 	orr.w	r3, r3, #2
 8014260:	81a3      	strh	r3, [r4, #12]
 8014262:	e7e3      	b.n	801422c <__smakebuf_r+0xc>
 8014264:	4b0d      	ldr	r3, [pc, #52]	; (801429c <__smakebuf_r+0x7c>)
 8014266:	62b3      	str	r3, [r6, #40]	; 0x28
 8014268:	89a3      	ldrh	r3, [r4, #12]
 801426a:	6020      	str	r0, [r4, #0]
 801426c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014270:	81a3      	strh	r3, [r4, #12]
 8014272:	9b00      	ldr	r3, [sp, #0]
 8014274:	6163      	str	r3, [r4, #20]
 8014276:	9b01      	ldr	r3, [sp, #4]
 8014278:	6120      	str	r0, [r4, #16]
 801427a:	b15b      	cbz	r3, 8014294 <__smakebuf_r+0x74>
 801427c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014280:	4630      	mov	r0, r6
 8014282:	f000 f8b1 	bl	80143e8 <_isatty_r>
 8014286:	b128      	cbz	r0, 8014294 <__smakebuf_r+0x74>
 8014288:	89a3      	ldrh	r3, [r4, #12]
 801428a:	f023 0303 	bic.w	r3, r3, #3
 801428e:	f043 0301 	orr.w	r3, r3, #1
 8014292:	81a3      	strh	r3, [r4, #12]
 8014294:	89a0      	ldrh	r0, [r4, #12]
 8014296:	4305      	orrs	r5, r0
 8014298:	81a5      	strh	r5, [r4, #12]
 801429a:	e7cd      	b.n	8014238 <__smakebuf_r+0x18>
 801429c:	08013181 	.word	0x08013181

080142a0 <__malloc_lock>:
 80142a0:	4801      	ldr	r0, [pc, #4]	; (80142a8 <__malloc_lock+0x8>)
 80142a2:	f7ff b851 	b.w	8013348 <__retarget_lock_acquire_recursive>
 80142a6:	bf00      	nop
 80142a8:	24007500 	.word	0x24007500

080142ac <__malloc_unlock>:
 80142ac:	4801      	ldr	r0, [pc, #4]	; (80142b4 <__malloc_unlock+0x8>)
 80142ae:	f7ff b84c 	b.w	801334a <__retarget_lock_release_recursive>
 80142b2:	bf00      	nop
 80142b4:	24007500 	.word	0x24007500

080142b8 <_realloc_r>:
 80142b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142bc:	4680      	mov	r8, r0
 80142be:	4614      	mov	r4, r2
 80142c0:	460e      	mov	r6, r1
 80142c2:	b921      	cbnz	r1, 80142ce <_realloc_r+0x16>
 80142c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142c8:	4611      	mov	r1, r2
 80142ca:	f7ff b8b3 	b.w	8013434 <_malloc_r>
 80142ce:	b92a      	cbnz	r2, 80142dc <_realloc_r+0x24>
 80142d0:	f7ff f844 	bl	801335c <_free_r>
 80142d4:	4625      	mov	r5, r4
 80142d6:	4628      	mov	r0, r5
 80142d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142dc:	f000 f894 	bl	8014408 <_malloc_usable_size_r>
 80142e0:	4284      	cmp	r4, r0
 80142e2:	4607      	mov	r7, r0
 80142e4:	d802      	bhi.n	80142ec <_realloc_r+0x34>
 80142e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80142ea:	d812      	bhi.n	8014312 <_realloc_r+0x5a>
 80142ec:	4621      	mov	r1, r4
 80142ee:	4640      	mov	r0, r8
 80142f0:	f7ff f8a0 	bl	8013434 <_malloc_r>
 80142f4:	4605      	mov	r5, r0
 80142f6:	2800      	cmp	r0, #0
 80142f8:	d0ed      	beq.n	80142d6 <_realloc_r+0x1e>
 80142fa:	42bc      	cmp	r4, r7
 80142fc:	4622      	mov	r2, r4
 80142fe:	4631      	mov	r1, r6
 8014300:	bf28      	it	cs
 8014302:	463a      	movcs	r2, r7
 8014304:	f7fe fe40 	bl	8012f88 <memcpy>
 8014308:	4631      	mov	r1, r6
 801430a:	4640      	mov	r0, r8
 801430c:	f7ff f826 	bl	801335c <_free_r>
 8014310:	e7e1      	b.n	80142d6 <_realloc_r+0x1e>
 8014312:	4635      	mov	r5, r6
 8014314:	e7df      	b.n	80142d6 <_realloc_r+0x1e>
	...

08014318 <_read_r>:
 8014318:	b538      	push	{r3, r4, r5, lr}
 801431a:	4d07      	ldr	r5, [pc, #28]	; (8014338 <_read_r+0x20>)
 801431c:	4604      	mov	r4, r0
 801431e:	4608      	mov	r0, r1
 8014320:	4611      	mov	r1, r2
 8014322:	2200      	movs	r2, #0
 8014324:	602a      	str	r2, [r5, #0]
 8014326:	461a      	mov	r2, r3
 8014328:	f7ec fbfa 	bl	8000b20 <_read>
 801432c:	1c43      	adds	r3, r0, #1
 801432e:	d102      	bne.n	8014336 <_read_r+0x1e>
 8014330:	682b      	ldr	r3, [r5, #0]
 8014332:	b103      	cbz	r3, 8014336 <_read_r+0x1e>
 8014334:	6023      	str	r3, [r4, #0]
 8014336:	bd38      	pop	{r3, r4, r5, pc}
 8014338:	24007488 	.word	0x24007488

0801433c <_raise_r>:
 801433c:	291f      	cmp	r1, #31
 801433e:	b538      	push	{r3, r4, r5, lr}
 8014340:	4604      	mov	r4, r0
 8014342:	460d      	mov	r5, r1
 8014344:	d904      	bls.n	8014350 <_raise_r+0x14>
 8014346:	2316      	movs	r3, #22
 8014348:	6003      	str	r3, [r0, #0]
 801434a:	f04f 30ff 	mov.w	r0, #4294967295
 801434e:	bd38      	pop	{r3, r4, r5, pc}
 8014350:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014352:	b112      	cbz	r2, 801435a <_raise_r+0x1e>
 8014354:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014358:	b94b      	cbnz	r3, 801436e <_raise_r+0x32>
 801435a:	4620      	mov	r0, r4
 801435c:	f000 f830 	bl	80143c0 <_getpid_r>
 8014360:	462a      	mov	r2, r5
 8014362:	4601      	mov	r1, r0
 8014364:	4620      	mov	r0, r4
 8014366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801436a:	f000 b817 	b.w	801439c <_kill_r>
 801436e:	2b01      	cmp	r3, #1
 8014370:	d00a      	beq.n	8014388 <_raise_r+0x4c>
 8014372:	1c59      	adds	r1, r3, #1
 8014374:	d103      	bne.n	801437e <_raise_r+0x42>
 8014376:	2316      	movs	r3, #22
 8014378:	6003      	str	r3, [r0, #0]
 801437a:	2001      	movs	r0, #1
 801437c:	e7e7      	b.n	801434e <_raise_r+0x12>
 801437e:	2400      	movs	r4, #0
 8014380:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014384:	4628      	mov	r0, r5
 8014386:	4798      	blx	r3
 8014388:	2000      	movs	r0, #0
 801438a:	e7e0      	b.n	801434e <_raise_r+0x12>

0801438c <raise>:
 801438c:	4b02      	ldr	r3, [pc, #8]	; (8014398 <raise+0xc>)
 801438e:	4601      	mov	r1, r0
 8014390:	6818      	ldr	r0, [r3, #0]
 8014392:	f7ff bfd3 	b.w	801433c <_raise_r>
 8014396:	bf00      	nop
 8014398:	24000034 	.word	0x24000034

0801439c <_kill_r>:
 801439c:	b538      	push	{r3, r4, r5, lr}
 801439e:	4d07      	ldr	r5, [pc, #28]	; (80143bc <_kill_r+0x20>)
 80143a0:	2300      	movs	r3, #0
 80143a2:	4604      	mov	r4, r0
 80143a4:	4608      	mov	r0, r1
 80143a6:	4611      	mov	r1, r2
 80143a8:	602b      	str	r3, [r5, #0]
 80143aa:	f7ec fb9d 	bl	8000ae8 <_kill>
 80143ae:	1c43      	adds	r3, r0, #1
 80143b0:	d102      	bne.n	80143b8 <_kill_r+0x1c>
 80143b2:	682b      	ldr	r3, [r5, #0]
 80143b4:	b103      	cbz	r3, 80143b8 <_kill_r+0x1c>
 80143b6:	6023      	str	r3, [r4, #0]
 80143b8:	bd38      	pop	{r3, r4, r5, pc}
 80143ba:	bf00      	nop
 80143bc:	24007488 	.word	0x24007488

080143c0 <_getpid_r>:
 80143c0:	f7ec bb8a 	b.w	8000ad8 <_getpid>

080143c4 <_fstat_r>:
 80143c4:	b538      	push	{r3, r4, r5, lr}
 80143c6:	4d07      	ldr	r5, [pc, #28]	; (80143e4 <_fstat_r+0x20>)
 80143c8:	2300      	movs	r3, #0
 80143ca:	4604      	mov	r4, r0
 80143cc:	4608      	mov	r0, r1
 80143ce:	4611      	mov	r1, r2
 80143d0:	602b      	str	r3, [r5, #0]
 80143d2:	f7ec fbea 	bl	8000baa <_fstat>
 80143d6:	1c43      	adds	r3, r0, #1
 80143d8:	d102      	bne.n	80143e0 <_fstat_r+0x1c>
 80143da:	682b      	ldr	r3, [r5, #0]
 80143dc:	b103      	cbz	r3, 80143e0 <_fstat_r+0x1c>
 80143de:	6023      	str	r3, [r4, #0]
 80143e0:	bd38      	pop	{r3, r4, r5, pc}
 80143e2:	bf00      	nop
 80143e4:	24007488 	.word	0x24007488

080143e8 <_isatty_r>:
 80143e8:	b538      	push	{r3, r4, r5, lr}
 80143ea:	4d06      	ldr	r5, [pc, #24]	; (8014404 <_isatty_r+0x1c>)
 80143ec:	2300      	movs	r3, #0
 80143ee:	4604      	mov	r4, r0
 80143f0:	4608      	mov	r0, r1
 80143f2:	602b      	str	r3, [r5, #0]
 80143f4:	f7ec fbe9 	bl	8000bca <_isatty>
 80143f8:	1c43      	adds	r3, r0, #1
 80143fa:	d102      	bne.n	8014402 <_isatty_r+0x1a>
 80143fc:	682b      	ldr	r3, [r5, #0]
 80143fe:	b103      	cbz	r3, 8014402 <_isatty_r+0x1a>
 8014400:	6023      	str	r3, [r4, #0]
 8014402:	bd38      	pop	{r3, r4, r5, pc}
 8014404:	24007488 	.word	0x24007488

08014408 <_malloc_usable_size_r>:
 8014408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801440c:	1f18      	subs	r0, r3, #4
 801440e:	2b00      	cmp	r3, #0
 8014410:	bfbc      	itt	lt
 8014412:	580b      	ldrlt	r3, [r1, r0]
 8014414:	18c0      	addlt	r0, r0, r3
 8014416:	4770      	bx	lr

08014418 <_init>:
 8014418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801441a:	bf00      	nop
 801441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801441e:	bc08      	pop	{r3}
 8014420:	469e      	mov	lr, r3
 8014422:	4770      	bx	lr

08014424 <_fini>:
 8014424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014426:	bf00      	nop
 8014428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801442a:	bc08      	pop	{r3}
 801442c:	469e      	mov	lr, r3
 801442e:	4770      	bx	lr
